{"version":3,"sources":["webpack:///./components/common/back_button.jsx","webpack:///./images/logo.png","webpack:///./components/common/site_name_and_description.jsx","webpack:///./actions/views/login.js","webpack:///./components/signup/signup_email/signup_email.jsx","webpack:///./components/signup/signup_email/index.js"],"names":["BackButton","React","PureComponent","react__WEBPACK_IMPORTED_MODULE_3___default","a","createElement","id","className","react_router_dom__WEBPACK_IMPORTED_MODULE_5__","onClick","this","props","to","url","react_intl__WEBPACK_IMPORTED_MODULE_4__","defaultMessage","title","PropTypes","string","func","module","exports","__webpack_require__","p","SiteNameAndDescription","_this$props","customDescriptionText","siteName","description","Fragment","login","loginId","password","mfaToken","dispatch","ignoreMfaRequiredError","UserActions","loginById","userId","_callee","promise","result","regeneratorRuntime","wrap","_context","prev","next","sent","error","server_error_id","data","abrupt","stop","SignupEmail","_this","_classCallCheck","_getPrototypeOf","call","_defineProperty","_assertThisInitialized","document","token","parsedData","JSON","parse","loading","email","teamName","name","_ref","mark","inviteId","_ref2","actions","getTeamInviteInfo","setState","noOpenServerError","serverError","react_default","index_es","_x","apply","arguments","user","trackEvent","then","_ref3","browserHistory","push","encodeURIComponent","state","message","isSubmitting","setGlobalItem","stringify","usedBefore","redirectTo","URLSearchParams","location","search","get","GlobalActions","providedEmail","refs","value","trim","nameError","emailError","passwordError","isEmail","providedUsername","toLowerCase","usernameError","Utils","values","min","Constants","MIN_USERNAME_LENGTH","max","MAX_USERNAME_LENGTH","providedPassword","_Utils$isValidPasswor","passwordConfig","valid","e","preventDefault","isUserValid","username","allow_marketing","createUser","handleSignupSuccess","emailHelpText","emailDivStyle","nameHelpText","nameDivStyle","passwordDivStyle","yourEmailIs","formatted_markdown_message","emailContainerStyle","type","ref","defaultValue","placeholder","maxLength","autoFocus","spellCheck","autoCapitalize","handleSubmit","disabled","length","getTokenData","Component","setDocumentTitle","getInviteInfo","emailSignup","enableSignUpWithEmail","privacyPolicyLink","termsOfServiceLink","loading_screen","renderEmailSignup","terms","TermsOfServiceLink","PrivacyPolicyLink","back_button","alt","src","logoImage","site_name_and_description","react_router_dom","object","bool","isRequired","shape","connect","config","getConfig","EnableSignUpWithEmail","SiteName","CustomDescriptionText","getPasswordConfig","bindActionCreators"],"mappings":"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","file":"11.f15e7f6a8a94e801e5f3.js","sourcesContent":["// Copyright (c) 2015-present Mattermost, Inc. All Rights Reserved.\n// See LICENSE.txt for license information.\n\nimport PropTypes from 'prop-types';\nimport React from 'react';\nimport {FormattedMessage} from 'react-intl';\nimport {Link} from 'react-router-dom';\n\nexport default class BackButton extends React.PureComponent {\n    static propTypes = {\n\n        /**\n         * URL to return to\n         */\n        url: PropTypes.string,\n\n        /**\n         * An optional click handler that will trigger when the user clicks on the back button\n         */\n        onClick: PropTypes.func,\n    };\n\n    static defaultProps = {\n        url: '/',\n    };\n\n    render() {\n        return (\n            <div\n                id='back_button'\n                className='signup-header'\n            >\n                <Link\n                    onClick={this.props.onClick}\n                    to={this.props.url}\n                >\n                    <FormattedMessage\n                        id='generic_icons.back'\n                        defaultMessage='Back Icon'\n                    >\n                        {(title) => (\n                            <span\n                                id='back_button_icon'\n                                className='fa fa-1x fa-angle-left'\n                                title={title}\n                            />\n                        )}\n                    </FormattedMessage>\n                    <FormattedMessage\n                        id='web.header.back'\n                        defaultMessage='Back'\n                    />\n                </Link>\n            </div>\n        );\n    }\n}\n","module.exports = __webpack_public_path__ + \"files/786f906c373b98400b1e6f6c3341ce7d.png\";","// Copyright (c) 2015-present Mattermost, Inc. All Rights Reserved.\n// See LICENSE.txt for license information.\n\nimport PropTypes from 'prop-types';\nimport React from 'react';\nimport {FormattedMessage} from 'react-intl';\n\nexport default class SiteNameAndDescription extends React.PureComponent {\n    static propTypes = {\n        customDescriptionText: PropTypes.string,\n        siteName: PropTypes.string,\n    };\n\n    static defaultProps = {\n        siteName: 'Mattermost',\n    };\n\n    render() {\n        const {\n            customDescriptionText,\n            siteName,\n        } = this.props;\n        let description = null;\n        if (customDescriptionText) {\n            description = customDescriptionText;\n        } else {\n            description = (\n                <FormattedMessage\n                    id='web.root.signup_info'\n                    defaultMessage='All team communication in one place, searchable and accessible anywhere'\n                />\n            );\n        }\n\n        return (\n            <React.Fragment>\n                <h1 id='site_name'>{siteName}</h1>\n                <h4\n                    id='site_description'\n                    className='color--light'\n                >\n                    {description}\n                </h4>\n            </React.Fragment>\n        );\n    }\n}\n","// Copyright (c) 2015-present Mattermost, Inc. All Rights Reserved.\n// See LICENSE.txt for license information.\n\nimport * as UserActions from 'mattermost-redux/actions/users';\n\nexport function login(loginId, password, mfaToken) {\n    return (dispatch) => {\n        return ignoreMfaRequiredError(dispatch(UserActions.login(loginId, password, mfaToken)));\n    };\n}\n\nexport function loginById(userId, password, mfaToken) {\n    return (dispatch) => {\n        return ignoreMfaRequiredError(dispatch(UserActions.loginById(userId, password, mfaToken)));\n    };\n}\n\nasync function ignoreMfaRequiredError(promise) {\n    let result = await promise;\n\n    if (result.error && result.error.server_error_id === 'api.context.mfa_required.app_error') {\n        result = {data: true};\n    }\n\n    return result;\n}\n","// Copyright (c) 2015-present Mattermost, Inc. All Rights Reserved.\n// See LICENSE.txt for license information.\n\nimport PropTypes from 'prop-types';\nimport React from 'react';\nimport {FormattedMessage} from 'react-intl';\nimport {Link} from 'react-router-dom';\n\nimport {isEmail} from 'mattermost-redux/utils/helpers';\n\nimport {trackEvent} from 'actions/diagnostics_actions.jsx';\nimport * as GlobalActions from 'actions/global_actions.jsx';\nimport {browserHistory} from 'utils/browser_history';\nimport Constants from 'utils/constants.jsx';\nimport * as Utils from 'utils/utils.jsx';\n\nimport logoImage from 'images/logo.png';\n\nimport BackButton from 'components/common/back_button.jsx';\nimport LoadingScreen from 'components/loading_screen.jsx';\nimport SiteNameAndDescription from 'components/common/site_name_and_description';\n\nimport FormattedMarkdownMessage from 'components/formatted_markdown_message.jsx';\n\nexport default class SignupEmail extends React.Component {\n    static propTypes = {\n        location: PropTypes.object,\n        enableSignUpWithEmail: PropTypes.bool.isRequired,\n        siteName: PropTypes.string,\n        termsOfServiceLink: PropTypes.string,\n        privacyPolicyLink: PropTypes.string,\n        customDescriptionText: PropTypes.string,\n        passwordConfig: PropTypes.object,\n        actions: PropTypes.shape({\n            createUser: PropTypes.func.isRequired,\n            loginById: PropTypes.func.isRequired,\n            setGlobalItem: PropTypes.func.isRequired,\n            getTeamInviteInfo: PropTypes.func.isRequired,\n        }).isRequired,\n    }\n\n    constructor(props) {\n        super(props);\n\n        const data = (new URLSearchParams(this.props.location.search)).get('d');\n        const token = (new URLSearchParams(this.props.location.search)).get('t');\n        const inviteId = (new URLSearchParams(this.props.location.search)).get('id');\n\n        this.state = {};\n        if (token && token.length > 0) {\n            this.state = this.getTokenData(token, data);\n        } else if (inviteId && inviteId.length > 0) {\n            this.state = {\n                loading: true,\n                inviteId,\n            };\n        }\n    }\n\n    componentDidMount() {\n        trackEvent('signup', 'signup_user_01_welcome');\n\n        this.setDocumentTitle(this.props.siteName);\n\n        const {inviteId} = this.state;\n        if (inviteId && inviteId.length > 0) {\n            this.getInviteInfo(inviteId);\n        }\n    }\n\n    componentDidUpdate() {\n        this.setDocumentTitle(this.props.siteName);\n    }\n\n    setDocumentTitle = (siteName) => {\n        if (siteName) {\n            document.title = siteName;\n        }\n    }\n\n    getTokenData = (token, data) => {\n        const parsedData = JSON.parse(data);\n\n        return {\n            loading: false,\n            token,\n            email: parsedData.email,\n            teamName: parsedData.name,\n        };\n    }\n\n    getInviteInfo = async (inviteId) => {\n        const {data, error} = await this.props.actions.getTeamInviteInfo(inviteId);\n        if (data) {\n            this.setState({\n                loading: false,\n                noOpenServerError: false,\n                serverError: '',\n                teamName: data.name,\n            });\n        } else if (error) {\n            this.setState({loading: false,\n                noOpenServerError: true,\n                serverError: (\n                    <FormattedMessage\n                        id='signup_user_completed.invalid_invite'\n                        defaultMessage='The invite link was invalid.  Please speak with your Administrator to receive an invitation.'\n                    />\n                ),\n            });\n        }\n    }\n\n    handleSignupSuccess = (user, data) => {\n        trackEvent('signup', 'signup_user_02_complete');\n\n        this.props.actions.loginById(data.id, user.password, '').then(({error}) => {\n            if (error) {\n                if (error.server_error_id === 'api.user.login.not_verified.app_error') {\n                    browserHistory.push('/should_verify_email?email=' + encodeURIComponent(user.email) + '&teamname=' + encodeURIComponent(this.state.teamName));\n                } else {\n                    this.setState({\n                        serverError: error.message,\n                        isSubmitting: false,\n                    });\n                }\n\n                return;\n            }\n\n            if (this.state.token > 0) {\n                this.props.actions.setGlobalItem(this.state.token, JSON.stringify({usedBefore: true}));\n            }\n\n            const redirectTo = (new URLSearchParams(this.props.location.search)).get('redirect_to');\n            if (redirectTo) {\n                browserHistory.push(redirectTo);\n            } else {\n                GlobalActions.redirectUserToDefaultTeam();\n            }\n        });\n    }\n\n    isUserValid = () => {\n        const providedEmail = this.refs.email.value.trim();\n        if (!providedEmail) {\n            this.setState({\n                nameError: '',\n                emailError: (<FormattedMessage id='signup_user_completed.required'/>),\n                passwordError: '',\n                serverError: '',\n            });\n            return false;\n        }\n\n        if (!isEmail(providedEmail)) {\n            this.setState({\n                nameError: '',\n                emailError: (<FormattedMessage id='signup_user_completed.validEmail'/>),\n                passwordError: '',\n                serverError: '',\n            });\n            return false;\n        }\n\n        const providedUsername = this.refs.name.value.trim().toLowerCase();\n        if (!providedUsername) {\n            this.setState({\n                nameError: (<FormattedMessage id='signup_user_completed.required'/>),\n                emailError: '',\n                passwordError: '',\n                serverError: '',\n            });\n            return false;\n        }\n\n        const usernameError = Utils.isValidUsername(providedUsername);\n        if (usernameError === 'Cannot use a reserved word as a username.') {\n            this.setState({\n                nameError: (<FormattedMessage id='signup_user_completed.reserved'/>),\n                emailError: '',\n                passwordError: '',\n                serverError: '',\n            });\n            return false;\n        } else if (usernameError) {\n            this.setState({\n                nameError: (\n                    <FormattedMessage\n                        id='signup_user_completed.usernameLength'\n                        values={{\n                            min: Constants.MIN_USERNAME_LENGTH,\n                            max: Constants.MAX_USERNAME_LENGTH,\n                        }}\n                    />\n                ),\n                emailError: '',\n                passwordError: '',\n                serverError: '',\n            });\n            return false;\n        }\n\n        const providedPassword = this.refs.password.value;\n        const {valid, error} = Utils.isValidPassword(providedPassword, this.props.passwordConfig);\n        if (!valid && error) {\n            this.setState({\n                nameError: '',\n                emailError: '',\n                passwordError: error,\n                serverError: '',\n            });\n            return false;\n        }\n\n        return true;\n    }\n\n    handleSubmit = (e) => {\n        e.preventDefault();\n\n        // bail out if a submission is already in progress\n        if (this.state.isSubmitting) {\n            return;\n        }\n\n        if (this.isUserValid()) {\n            this.setState({\n                nameError: '',\n                emailError: '',\n                passwordError: '',\n                serverError: '',\n                isSubmitting: true,\n            });\n\n            const user = {\n                email: this.refs.email.value.trim(),\n                username: this.refs.name.value.trim().toLowerCase(),\n                password: this.refs.password.value,\n                allow_marketing: true,\n            };\n\n            this.props.actions.createUser(user, this.state.token, this.state.inviteId).then((result) => {\n                if (result.error) {\n                    this.setState({\n                        serverError: result.error.message,\n                        isSubmitting: false,\n                    });\n                    return;\n                }\n\n                this.handleSignupSuccess(user, result.data);\n            });\n        }\n    }\n\n    renderEmailSignup = () => {\n        let emailError = null;\n        let emailHelpText = (\n            <span\n                id='valid_email'\n                className='help-block'\n            >\n                <FormattedMessage\n                    id='signup_user_completed.emailHelp'\n                    defaultMessage='Valid email required for sign-up'\n                />\n            </span>\n        );\n        let emailDivStyle = 'form-group';\n        if (this.state.emailError) {\n            emailError = (<label className='control-label'>{this.state.emailError}</label>);\n            emailHelpText = '';\n            emailDivStyle += ' has-error';\n        }\n\n        let nameError = null;\n        let nameHelpText = (\n            <span\n                id='valid_name'\n                className='help-block'\n            >\n                <FormattedMessage\n                    id='signup_user_completed.userHelp'\n                    defaultMessage='You can use lowercase letters, numbers, periods, dashes, and underscores.'\n                />\n            </span>\n        );\n        let nameDivStyle = 'form-group';\n        if (this.state.nameError) {\n            nameError = <label className='control-label'>{this.state.nameError}</label>;\n            nameHelpText = '';\n            nameDivStyle += ' has-error';\n        }\n\n        let passwordError = null;\n        let passwordDivStyle = 'form-group';\n        if (this.state.passwordError) {\n            passwordError = <label className='control-label'>{this.state.passwordError}</label>;\n            passwordDivStyle += ' has-error';\n        }\n\n        let yourEmailIs = null;\n        if (this.state.email) {\n            yourEmailIs = (\n                <FormattedMarkdownMessage\n                    id='signup_user_completed.emailIs'\n                    defaultMessage=\"Your email address is **{email}**. You'll use this address to sign in to {siteName}.\"\n                    values={{\n                        email: this.state.email,\n                        siteName: this.props.siteName,\n                    }}\n                />\n            );\n        }\n\n        let emailContainerStyle = 'margin--extra';\n        if (this.state.email) {\n            emailContainerStyle = 'hidden';\n        }\n\n        return (\n            <form>\n                <div className='inner__content'>\n                    <div className={emailContainerStyle}>\n                        <h5 id='email_label'>\n                            <strong>\n                                <FormattedMessage\n                                    id='signup_user_completed.whatis'\n                                    defaultMessage=\"What's your email address?\"\n                                />\n                            </strong>\n                        </h5>\n                        <div className={emailDivStyle}>\n                            <input\n                                id='email'\n                                type='email'\n                                ref='email'\n                                className='form-control'\n                                defaultValue={this.state.email}\n                                placeholder=''\n                                maxLength='128'\n                                autoFocus={true}\n                                spellCheck='false'\n                                autoCapitalize='off'\n                            />\n                            {emailError}\n                            {emailHelpText}\n                        </div>\n                    </div>\n                    {yourEmailIs}\n                    <div className='margin--extra'>\n                        <h5 id='name_label'>\n                            <strong>\n                                <FormattedMessage\n                                    id='signup_user_completed.chooseUser'\n                                    defaultMessage='Choose your username'\n                                />\n                            </strong>\n                        </h5>\n                        <div className={nameDivStyle}>\n                            <input\n                                id='name'\n                                type='text'\n                                ref='name'\n                                className='form-control'\n                                placeholder=''\n                                maxLength={Constants.MAX_USERNAME_LENGTH}\n                                spellCheck='false'\n                                autoCapitalize='off'\n                            />\n                            {nameError}\n                            {nameHelpText}\n                        </div>\n                    </div>\n                    <div className='margin--extra'>\n                        <h5 id='password_label'>\n                            <strong>\n                                <FormattedMessage\n                                    id='signup_user_completed.choosePwd'\n                                    defaultMessage='Choose your password'\n                                />\n                            </strong>\n                        </h5>\n                        <div className={passwordDivStyle}>\n                            <input\n                                id='password'\n                                type='password'\n                                ref='password'\n                                className='form-control'\n                                placeholder=''\n                                maxLength='128'\n                                spellCheck='false'\n                            />\n                            {passwordError}\n                        </div>\n                    </div>\n                    <p className='margin--extra'>\n                        <button\n                            id='createAccountButton'\n                            type='submit'\n                            onClick={this.handleSubmit}\n                            className='btn-primary btn'\n                            disabled={this.state.isSubmitting}\n                        >\n                            <FormattedMessage\n                                id='signup_user_completed.create'\n                                defaultMessage='Create Account'\n                            />\n                        </button>\n                    </p>\n                </div>\n            </form>\n        );\n    }\n\n    render() {\n        const {\n            customDescriptionText,\n            enableSignUpWithEmail,\n            location,\n            privacyPolicyLink,\n            siteName,\n            termsOfServiceLink,\n        } = this.props;\n\n        let serverError = null;\n        if (this.state.serverError) {\n            serverError = (\n                <div\n                    id='existingEmailErrorContainer'\n                    className={'form-group has-error'}\n                >\n                    <label className='control-label'>{this.state.serverError}</label>\n                </div>\n            );\n        }\n\n        if (this.state.loading) {\n            return (<LoadingScreen/>);\n        }\n\n        let emailSignup;\n        if (enableSignUpWithEmail) {\n            emailSignup = this.renderEmailSignup();\n        } else {\n            return null;\n        }\n\n        let terms = null;\n        if (!this.state.noOpenServerError && emailSignup) {\n            terms = (\n                <p id='signup_agreement'>\n                    <FormattedMarkdownMessage\n                        id='create_team.agreement'\n                        defaultMessage='By proceeding to create your account and use {siteName}, you agree to our [Terms of Service]({TermsOfServiceLink}) and [Privacy Policy]({PrivacyPolicyLink}). If you do not agree, you cannot use {siteName}.'\n                        values={{\n                            siteName,\n                            TermsOfServiceLink: termsOfServiceLink,\n                            PrivacyPolicyLink: privacyPolicyLink,\n                        }}\n                    />\n                </p>\n            );\n        }\n\n        if (this.state.noOpenServerError) {\n            emailSignup = null;\n        }\n\n        return (\n            <div>\n                <BackButton/>\n                <div\n                    id='signup_email_section'\n                    className='col-sm-12'\n                >\n                    <div className='signup-team__container padding--less'>\n                        <img\n                            alt={'signup team logo'}\n                            className='signup-team-logo'\n                            src={logoImage}\n                        />\n                        <SiteNameAndDescription\n                            customDescriptionText={customDescriptionText}\n                            siteName={siteName}\n                        />\n                        <h4\n                            id='create_account'\n                            className='color--light'\n                        >\n                            <FormattedMessage\n                                id='signup_user_completed.lets'\n                                defaultMessage=\"Let's create your account\"\n                            />\n                        </h4>\n                        <span\n                            id='signin_account'\n                            className='color--light'\n                        >\n                            <FormattedMessage\n                                id='signup_user_completed.haveAccount'\n                                defaultMessage='Already have an account?'\n                            />\n                            {' '}\n                            <Link\n                                id='signin_account_link'\n                                to={'/login' + location.search}\n                            >\n                                <FormattedMessage\n                                    id='signup_user_completed.signIn'\n                                    defaultMessage='Click here to sign in.'\n                                />\n                            </Link>\n                        </span>\n                        {emailSignup}\n                        {serverError}\n                        {terms}\n                    </div>\n                </div>\n            </div>\n        );\n    }\n}\n","// Copyright (c) 2015-present Mattermost, Inc. All Rights Reserved.\n// See LICENSE.txt for license information.\n\nimport {connect} from 'react-redux';\nimport {bindActionCreators} from 'redux';\n\nimport {createUser} from 'mattermost-redux/actions/users';\nimport {getConfig} from 'mattermost-redux/selectors/entities/general';\nimport {getTeamInviteInfo} from 'mattermost-redux/actions/teams';\n\nimport {setGlobalItem} from 'actions/storage';\nimport {loginById} from 'actions/views/login';\nimport {getPasswordConfig} from 'utils/utils.jsx';\n\nimport SignupEmail from './signup_email.jsx';\n\nfunction mapStateToProps(state) {\n    const config = getConfig(state);\n\n    const enableSignUpWithEmail = config.EnableSignUpWithEmail === 'true';\n    const siteName = config.SiteName;\n    const termsOfServiceLink = config.TermsOfServiceLink;\n    const privacyPolicyLink = config.PrivacyPolicyLink;\n    const customDescriptionText = config.CustomDescriptionText;\n\n    return {\n        enableSignUpWithEmail,\n        siteName,\n        termsOfServiceLink,\n        privacyPolicyLink,\n        customDescriptionText,\n        passwordConfig: getPasswordConfig(config),\n    };\n}\n\nfunction mapDispatchToProps(dispatch) {\n    return {\n        actions: bindActionCreators({\n            createUser,\n            loginById,\n            setGlobalItem,\n            getTeamInviteInfo,\n        }, dispatch),\n    };\n}\n\nexport default connect(mapStateToProps, mapDispatchToProps)(SignupEmail);\n"],"sourceRoot":""}