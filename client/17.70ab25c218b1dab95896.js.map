{"version":3,"sources":["webpack:///./components/common/back_button.jsx","webpack:///./images/logo.png","webpack:///./components/do_verify_email/do_verify_email.jsx","webpack:///./components/do_verify_email/index.js"],"names":["BackButton","React","PureComponent","react__WEBPACK_IMPORTED_MODULE_3___default","a","createElement","id","className","react_router_dom__WEBPACK_IMPORTED_MODULE_5__","onClick","this","props","to","url","react_intl__WEBPACK_IMPORTED_MODULE_4__","defaultMessage","title","PropTypes","string","func","module","exports","__webpack_require__","p","DoVerifyEmail","_this","_classCallCheck","_getPrototypeOf","call","_defineProperty","_assertThisInitialized","_asyncToGenerator","regeneratorRuntime","mark","_callee","verifyUserEmail","verify","wrap","_context","prev","next","actions","URLSearchParams","location","search","get","sent","data","handleSuccess","error","handleError","VerifyEmailErrors","FAILED_EMAIL_VERIFICATION","stop","state","verifyStatus","serverError","verifyEmail","isLoggedIn","GlobalActions","browserHistory","push","encodeURIComponent","_this2","setState","clearErrors","logError","message","AnnouncementBarMessages","EMAIL_VERIFIED","type","AnnouncementBarTypes","SUCCESS","trackEvent","getMe","then","_ref2","err","handleRedirect","FAILED_USER_STATE_GET","react_default","index_es","loading_screen","back_button","alt","src","logoImage","siteName","object","isRequired","shape","user","email_verified","bool","defaultProps","connect","getConfig","SiteName","Boolean","getCurrentUserId","getCurrentUser","dispatch","bindActionCreators"],"mappings":"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","file":"17.70ab25c218b1dab95896.js","sourcesContent":["// Copyright (c) 2015-present Mattermost, Inc. All Rights Reserved.\n// See LICENSE.txt for license information.\n\nimport PropTypes from 'prop-types';\nimport React from 'react';\nimport {FormattedMessage} from 'react-intl';\nimport {Link} from 'react-router-dom';\n\nexport default class BackButton extends React.PureComponent {\n    static propTypes = {\n\n        /**\n         * URL to return to\n         */\n        url: PropTypes.string,\n\n        /**\n         * An optional click handler that will trigger when the user clicks on the back button\n         */\n        onClick: PropTypes.func,\n    };\n\n    static defaultProps = {\n        url: '/',\n    };\n\n    render() {\n        return (\n            <div\n                id='back_button'\n                className='signup-header'\n            >\n                <Link\n                    onClick={this.props.onClick}\n                    to={this.props.url}\n                >\n                    <FormattedMessage\n                        id='generic_icons.back'\n                        defaultMessage='Back Icon'\n                    >\n                        {(title) => (\n                            <span\n                                id='back_button_icon'\n                                className='fa fa-1x fa-angle-left'\n                                title={title}\n                            />\n                        )}\n                    </FormattedMessage>\n                    <FormattedMessage\n                        id='web.header.back'\n                        defaultMessage='Back'\n                    />\n                </Link>\n            </div>\n        );\n    }\n}\n","module.exports = __webpack_public_path__ + \"files/786f906c373b98400b1e6f6c3341ce7d.png\";","// Copyright (c) 2015-present Mattermost, Inc. All Rights Reserved.\n// See LICENSE.txt for license information.\n\nimport PropTypes from 'prop-types';\nimport React from 'react';\nimport {FormattedMessage} from 'react-intl';\n\nimport {trackEvent} from 'actions/diagnostics_actions.jsx';\nimport {browserHistory} from 'utils/browser_history';\nimport {AnnouncementBarTypes, AnnouncementBarMessages, VerifyEmailErrors} from 'utils/constants.jsx';\nimport logoImage from 'images/logo.png';\nimport BackButton from 'components/common/back_button.jsx';\nimport LoadingScreen from 'components/loading_screen.jsx';\n\nimport * as GlobalActions from 'actions/global_actions.jsx';\n\nexport default class DoVerifyEmail extends React.PureComponent {\n    static propTypes = {\n\n        /**\n         * Object with validation parameters given in link\n         */\n        location: PropTypes.object.isRequired,\n\n        /**\n         * Title of the app or site.\n         */\n        siteName: PropTypes.string,\n\n        /*\n         * Object with redux action creators\n         */\n        actions: PropTypes.shape({\n\n            /*\n             * Action creator to verify the user's email\n             */\n            verifyUserEmail: PropTypes.func.isRequired,\n\n            /*\n             * Action creator to update the user in the redux store\n             */\n            getMe: PropTypes.func.isRequired,\n            logError: PropTypes.func.isRequired,\n            clearErrors: PropTypes.func.isRequired,\n        }).isRequired,\n\n        /**\n         * Object reprenseting the current user\n         */\n        user: PropTypes.shape({\n            email_verified: PropTypes.bool,\n        }),\n\n        isLoggedIn: PropTypes.bool.isRequired,\n    }\n\n    constructor(props) {\n        super(props);\n\n        this.state = {\n            verifyStatus: 'pending',\n            serverError: '',\n        };\n    }\n\n    UNSAFE_componentWillMount() { // eslint-disable-line camelcase\n        this.verifyEmail();\n    }\n\n    handleRedirect() {\n        if (this.props.isLoggedIn) {\n            GlobalActions.redirectUserToDefaultTeam();\n        } else {\n            browserHistory.push('/login?extra=verified&email=' + encodeURIComponent((new URLSearchParams(this.props.location.search)).get('email')));\n        }\n    }\n\n    handleSuccess() {\n        this.setState({verifyStatus: 'success'});\n        this.props.actions.clearErrors();\n        if (this.props.isLoggedIn) {\n            this.props.actions.logError({\n                message: AnnouncementBarMessages.EMAIL_VERIFIED,\n                type: AnnouncementBarTypes.SUCCESS,\n            }, true);\n            trackEvent('settings', 'verify_email');\n            this.props.actions.getMe().then(({data, error: err}) => {\n                if (data) {\n                    this.handleRedirect();\n                } else if (err) {\n                    this.handleError(VerifyEmailErrors.FAILED_USER_STATE_GET);\n                }\n            });\n        } else {\n            this.handleRedirect();\n        }\n    }\n\n    handleError(type) {\n        let serverError = '';\n        if (type === VerifyEmailErrors.FAILED_EMAIL_VERIFICATION) {\n            serverError = (\n                <FormattedMessage\n                    id='signup_user_completed.invalid_invite'\n                    defaultMessage='The invite link was invalid. Please speak with your Administrator to receive an invitation.'\n                />\n            );\n        } else if (type === VerifyEmailErrors.FAILED_USER_STATE_GET) {\n            serverError = (\n                <FormattedMessage\n                    id='signup_user_completed.failed_update_user_state'\n                    defaultMessage='Please clear your cache and try to log in.'\n                />\n            );\n        }\n        this.setState({\n            verifyStatus: 'failure',\n            serverError,\n        });\n    }\n\n    verifyEmail = async () => {\n        const {actions: {verifyUserEmail}} = this.props;\n        const verify = await verifyUserEmail((new URLSearchParams(this.props.location.search)).get('token'));\n\n        if (verify && verify.data) {\n            this.handleSuccess();\n        } else if (verify && verify.error) {\n            this.handleError(VerifyEmailErrors.FAILED_EMAIL_VERIFICATION);\n        }\n    }\n\n    render() {\n        if (this.state.verifyStatus !== 'failure') {\n            return (<LoadingScreen/>);\n        }\n\n        let serverError = null;\n        if (this.state.serverError) {\n            serverError = (\n                <div className={'form-group has-error'}>\n                    <label className='control-label'>{this.state.serverError}</label>\n                </div>\n            );\n        }\n\n        return (\n            <div>\n                <BackButton/>\n                <div className='col-sm-12'>\n                    <div className='signup-team__container'>\n                        <img\n                            alt={'signup team logo'}\n                            className='signup-team-logo'\n                            src={logoImage}\n                        />\n                        <div className='signup__content'>\n                            <h1>{this.props.siteName}</h1>\n                            <h4 className='color--light'>\n                                <FormattedMessage\n                                    id='web.root.signup_info'\n                                    defaultMessage='All team communication in one place, searchable and accessible anywhere'\n                                />\n                            </h4>\n                            {serverError}\n                        </div>\n                    </div>\n                </div>\n            </div>\n        );\n    }\n}\n\nDoVerifyEmail.defaultProps = {\n    location: {},\n};\n","// Copyright (c) 2015-present Mattermost, Inc. All Rights Reserved.\n// See LICENSE.txt for license information.\n\nimport {bindActionCreators} from 'redux';\nimport {connect} from 'react-redux';\nimport {verifyUserEmail, getMe} from 'mattermost-redux/actions/users';\nimport {getConfig} from 'mattermost-redux/selectors/entities/general';\nimport {getCurrentUserId, getCurrentUser} from 'mattermost-redux/selectors/entities/users';\nimport {clearErrors, logError} from 'mattermost-redux/actions/errors';\n\nimport DoVerifyEmail from './do_verify_email.jsx';\n\nfunction mapStateToProps(state) {\n    const config = getConfig(state);\n    const siteName = config.SiteName;\n    return {\n        isLoggedIn: Boolean(getCurrentUserId(state)),\n        siteName,\n        user: getCurrentUser(state),\n    };\n}\n\nfunction mapDispatchToProps(dispatch) {\n    return {\n        actions: bindActionCreators({\n            verifyUserEmail,\n            getMe,\n            logError,\n            clearErrors,\n        }, dispatch),\n    };\n}\n\nexport default connect(mapStateToProps, mapDispatchToProps)(DoVerifyEmail);\n"],"sourceRoot":""}