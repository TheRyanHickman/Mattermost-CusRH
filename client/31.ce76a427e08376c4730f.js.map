{"version":3,"sources":["webpack:///./components/pdf_preview.jsx"],"names":["PDFPreview","props","_this","_classCallCheck","this","_getPrototypeOf","call","updateStateFromProps","bind","_assertThisInitialized","onDocumentLoad","onDocumentLoadError","onPageLoad","renderPDFPage","pdfPagesRendered","state","pdf","pdfPages","pdfPagesLoaded","numPages","loading","success","React","PureComponent","nextProps","fileUrl","i","pageIndex","canvas","refs","context","getContext","viewport","getViewport","height","width","renderContext","canvasContext","render","setState","PDFJS","getDocument","then","getPage","reason","console","log","page","Object","assign","react__WEBPACK_IMPORTED_MODULE_4___default","a","createElement","className","components_widgets_loading_loading_spinner_jsx__WEBPACK_IMPORTED_MODULE_7__","components_file_info_preview__WEBPACK_IMPORTED_MODULE_8__","fileInfo","pdfCanvases","push","ref","key","href","react_intl__WEBPACK_IMPORTED_MODULE_5__","id","defaultMessage","PropTypes","object","isRequired","string"],"mappings":"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","file":"31.ce76a427e08376c4730f.js","sourcesContent":["// Copyright (c) 2015-present Mattermost, Inc. All Rights Reserved.\n// See LICENSE.txt for license information.\n\nimport PropTypes from 'prop-types';\nimport React from 'react';\nimport {FormattedMessage} from 'react-intl';\nimport PDFJS from 'pdfjs-dist';\n\nimport LoadingSpinner from 'components/widgets/loading/loading_spinner.jsx';\nimport FileInfoPreview from 'components/file_info_preview';\n\nconst MAX_PDF_PAGES = 5;\n\nexport default class PDFPreview extends React.PureComponent {\n    static propTypes = {\n\n        /**\n        * Compare file types\n        */\n        fileInfo: PropTypes.object.isRequired,\n\n        /**\n        *  URL of pdf file to output and compare to update props url\n        */\n        fileUrl: PropTypes.string.isRequired,\n    }\n\n    constructor(props) {\n        super(props);\n\n        this.updateStateFromProps = this.updateStateFromProps.bind(this);\n        this.onDocumentLoad = this.onDocumentLoad.bind(this);\n        this.onDocumentLoadError = this.onDocumentLoadError.bind(this);\n        this.onPageLoad = this.onPageLoad.bind(this);\n        this.renderPDFPage = this.renderPDFPage.bind(this);\n\n        this.pdfPagesRendered = {};\n\n        this.state = {\n            pdf: null,\n            pdfPages: {},\n            pdfPagesLoaded: {},\n            numPages: 0,\n            loading: true,\n            success: false,\n        };\n    }\n\n    componentDidMount() {\n        this.updateStateFromProps(this.props);\n    }\n\n    UNSAFE_componentWillReceiveProps(nextProps) { // eslint-disable-line camelcase\n        if (this.props.fileUrl !== nextProps.fileUrl) {\n            this.updateStateFromProps(nextProps);\n            this.pdfPagesRendered = {};\n        }\n    }\n\n    componentDidUpdate() {\n        if (this.state.success) {\n            for (let i = 0; i < this.state.numPages; i++) {\n                this.renderPDFPage(i);\n            }\n        }\n    }\n\n    renderPDFPage(pageIndex) {\n        if (this.pdfPagesRendered[pageIndex] || !this.state.pdfPagesLoaded[pageIndex]) {\n            return;\n        }\n\n        const canvas = this.refs['pdfCanvas' + pageIndex];\n        const context = canvas.getContext('2d');\n        const viewport = this.state.pdfPages[pageIndex].getViewport(1);\n\n        canvas.height = viewport.height;\n        canvas.width = viewport.width;\n\n        const renderContext = {\n            canvasContext: context,\n            viewport,\n        };\n\n        this.state.pdfPages[pageIndex].render(renderContext);\n        this.pdfPagesRendered[pageIndex] = true;\n    }\n\n    updateStateFromProps(props) {\n        this.setState({\n            pdf: null,\n            pdfPages: {},\n            pdfPagesLoaded: {},\n            numPages: 0,\n            loading: true,\n            success: false,\n        });\n\n        PDFJS.getDocument(props.fileUrl).then(this.onDocumentLoad, this.onDocumentLoadError);\n    }\n\n    onDocumentLoad(pdf) {\n        const numPages = pdf.numPages <= MAX_PDF_PAGES ? pdf.numPages : MAX_PDF_PAGES;\n        this.setState({pdf, numPages});\n        for (let i = 1; i <= pdf.numPages; i++) {\n            pdf.getPage(i).then(this.onPageLoad);\n        }\n    }\n\n    onDocumentLoadError(reason) {\n        console.log('Unable to load PDF preview: ' + reason); //eslint-disable-line no-console\n        this.setState({loading: false, success: false});\n    }\n\n    onPageLoad(page) {\n        const pdfPages = Object.assign({}, this.state.pdfPages);\n        pdfPages[page.pageIndex] = page;\n\n        const pdfPagesLoaded = Object.assign({}, this.state.pdfPagesLoaded);\n        pdfPagesLoaded[page.pageIndex] = true;\n\n        this.setState({pdfPages, pdfPagesLoaded});\n\n        if (page.pageIndex === 0) {\n            this.setState({success: true, loading: false});\n        }\n    }\n\n    render() {\n        if (this.state.loading) {\n            return (\n                <div className='view-image__loading'>\n                    <LoadingSpinner/>\n                </div>\n            );\n        }\n\n        if (!this.state.success) {\n            return (\n                <FileInfoPreview\n                    fileInfo={this.props.fileInfo}\n                    fileUrl={this.props.fileUrl}\n                />\n            );\n        }\n\n        const pdfCanvases = [];\n        for (let i = 0; i < this.state.numPages; i++) {\n            pdfCanvases.push(\n                <canvas\n                    ref={'pdfCanvas' + i}\n                    key={'previewpdfcanvas' + i}\n                />\n            );\n\n            if (i < this.state.numPages - 1 && this.state.numPages > 1) {\n                pdfCanvases.push(\n                    <div\n                        key={'previewpdfspacer' + i}\n                        className='pdf-preview-spacer'\n                    />\n                );\n            }\n        }\n\n        if (this.state.pdf.numPages > MAX_PDF_PAGES) {\n            pdfCanvases.push(\n                <a\n                    key='previewpdfmorepages'\n                    href={this.props.fileUrl}\n                    className='pdf-max-pages'\n                >\n                    <FormattedMessage\n                        id='pdf_preview.max_pages'\n                        defaultMessage='Download to read more pages'\n                    />\n                </a>\n            );\n        }\n\n        return (\n            <div className='post-code'>\n                {pdfCanvases}\n            </div>\n        );\n    }\n}\n"],"sourceRoot":""}