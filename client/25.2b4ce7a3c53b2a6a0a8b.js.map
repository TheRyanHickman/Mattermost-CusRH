{"version":3,"sources":["webpack:///./components/icon/logout_icon.jsx","webpack:///./components/terms_of_service/terms_of_service.jsx","webpack:///./components/terms_of_service/index.js"],"names":["LogoutIcon","React","PureComponent","react__WEBPACK_IMPORTED_MODULE_2___default","a","createElement","react_intl__WEBPACK_IMPORTED_MODULE_3__","id","defaultMessage","title","className","TermsOfService","props","_this","_classCallCheck","this","_getPrototypeOf","call","_defineProperty","_assertThisInitialized","_asyncToGenerator","regeneratorRuntime","mark","_callee","_ref2","data","wrap","_context","prev","next","setState","customTermsOfServiceId","customTermsOfServiceText","loading","actions","getTermsOfService","sent","text","GlobalActions","concat","Constants","GET_TERMS_ERROR","stop","e","preventDefault","loadingAgree","serverError","registerUserAction","redirectTo","URLSearchParams","location","search","get","match","browserHistory","push","loadingDisagree","TERMS_REJECTED","_ref3","_callee2","accepted","success","_ref4","_context2","updateMyTermsOfServiceStatus","state","react_default","index_es","_x","_x2","apply","arguments","formattedText","memoizeResult","formatText","termsEnabled","loading_screen","termsMarkdownClasses","announcement_bar","href","onClick","handleLogoutClick","logout_icon","messageHtmlToComponent","mentions","ButtonGroup","Button","bsStyle","disabled","handleAcceptTerms","type","loading_spinner","handleRejectTerms","Boolean","warning_icon","PropTypes","object","bool","isRequired","shape","func","connect","getConfig","EnableCustomTermsOfService","dispatch","bindActionCreators"],"mappings":"+8BAOqBA,gaAAmBC,IAAMC,sDAEtC,OACIC,EAAAC,EAAAC,cAACC,EAAA,EAAD,CACIC,GAAG,uBACHC,eAAe,eAEd,SAACC,GAAD,OACGN,EAAAC,EAAAC,cAAA,KACIK,UAAU,yBACVD,MAAOA,s+CCKVE,cAUjB,SAAAA,EAAYC,GAAO,IAAAC,MAAA,mGAAAC,CAAAC,KAAAJ,KACfI,OAAAC,EAAAL,GAAAM,KAAAF,KAAMH,GAANC,mDADeK,EAAAC,EAAAN,GAAA,oBAAAO,EAAAC,mBAAAC,KAuBC,SAAAC,IAAA,IAAAC,EAAAC,EAAA,OAAAJ,mBAAAK,KAAA,SAAAC,GAAA,cAAAA,EAAAC,KAAAD,EAAAE,MAAA,cAChBhB,EAAKiB,SAAS,CACVC,uBAAwB,GACxBC,yBAA0B,GAC1BC,SAAS,IAJGN,EAAAE,KAAA,EAMKhB,EAAKD,MAAMsB,QAAQC,oBANxB,OAAAX,EAAAG,EAAAS,MAMTX,EANSD,EAMTC,MAEHZ,EAAKiB,SAAS,CACVC,uBAAwBN,EAAKlB,GAC7ByB,yBAA0BP,EAAKY,KAC/BJ,SAAS,IAGbK,IAAA,gBAAAC,OAAqDC,IAAUC,kBAdnD,wBAAAd,EAAAe,SAAAnB,OAvBDL,EAAAC,EAAAN,GAAA,oBAyCC,SAAC8B,GACjBA,EAAEC,iBACFN,IAAqC,YA3CtBpB,EAAAC,EAAAN,GAAA,oBA8CC,WAChBA,EAAKiB,SAAS,CACVe,cAAc,EACdC,YAAa,OAEjBjC,EAAKkC,oBACD,EACA,WACI,IACMC,EADQ,IAAIC,gBAAgBpC,EAAKD,MAAMsC,SAASC,QAC7BC,IAAI,eACzBJ,GAAcA,EAAWK,MAAM,gBAC/BC,IAAeC,KAAKP,GAEpBV,UA3DGpB,EAAAC,EAAAN,GAAA,oBAiEC,WAChBA,EAAKiB,SAAS,CACV0B,iBAAiB,EACjBV,YAAa,OAEjBjC,EAAKkC,oBACD,EACA,WACIT,IAAA,gBAAAC,OAAqDC,IAAUiB,qBAzExDvC,EAAAC,EAAAN,GAAA,oCAAA6C,EAAAtC,EAAAC,mBAAAC,KA8EE,SAAAqC,EAAOC,EAAUC,GAAjB,IAAAC,EAAArC,EAAA,OAAAJ,mBAAAK,KAAA,SAAAqC,GAAA,cAAAA,EAAAnC,KAAAmC,EAAAlC,MAAA,cAAAkC,EAAAlC,KAAA,EACIhB,EAAKD,MAAMsB,QAAQ8B,6BAA6BnD,EAAKoD,MAAMlC,uBAAwB6B,GADvF,OAAAE,EAAAC,EAAA3B,MACVX,EADUqC,EACVrC,MAEHoC,EAAQpC,GAERZ,EAAKiB,SAAS,CACVe,cAAc,EACdW,iBAAiB,EACjBV,YACIoB,EAAA9D,EAAAC,cAAC8D,EAAA,EAAD,CACI5D,GAAG,6BACHC,eAAe,iGAXd,wBAAAuD,EAAArB,SAAAiB,MA9EF,gBAAAS,EAAAC,GAAA,OAAAX,EAAAY,MAAAvD,KAAAwD,YAAA,IAGf1D,EAAKoD,MAAQ,CACTlC,uBAAwB,GACxBC,yBAA0B,GAC1BC,SAAS,EACTY,cAAc,EACdW,iBAAiB,EACjBV,YAAa,MAGjBjC,EAAK2D,cAAgBC,wBAAc,SAACpC,GAAD,OAAUqC,YAAWrC,KAZzCxB,wPAVqBZ,IAAMC,iEA0BtCa,KAAKH,MAAM+D,aACX5D,KAAKoB,oBAELG,uCA8EJ,GAAIvB,KAAKkD,MAAMhC,QACX,OAAOiC,EAAA9D,EAAAC,cAACuE,EAAA,EAAD,MAGX,IAAIC,EAAuB,6BAM3B,OALI9D,KAAKkD,MAAMnB,YACX+B,GAAwB,wCAExBA,GAAwB,kCAGxBX,EAAA9D,EAAAC,cAAA,WACI6D,EAAA9D,EAAAC,cAACyE,EAAA,EAAD,MACAZ,EAAA9D,EAAAC,cAAA,OAAKK,UAAU,iBACXwD,EAAA9D,EAAAC,cAAA,KACI0E,KAAK,IACLC,QAASjE,KAAKkE,mBAEdf,EAAA9D,EAAAC,cAAC6E,EAAA,EAAD,MACAhB,EAAA9D,EAAAC,cAAC8D,EAAA,EAAD,CACI5D,GAAG,oBACHC,eAAe,aAI3B0D,EAAA9D,EAAAC,cAAA,WACI6D,EAAA9D,EAAAC,cAAA,OAAKK,UAAU,sDACXwD,EAAA9D,EAAAC,cAAA,OAAKK,UAAWmE,GACZX,EAAA9D,EAAAC,cAAA,OAAKK,UAAU,iBACVyE,YAAuBpE,KAAKyD,cAAczD,KAAKkD,MAAMjC,2BAA2B,EAAO,CAACoD,UAAU,MAG3GlB,EAAA9D,EAAAC,cAAA,OAAKK,UAAU,0CACXwD,EAAA9D,EAAAC,cAACgF,EAAA,EAAD,CAAa3E,UAAU,kCACnBwD,EAAA9D,EAAAC,cAACiF,EAAA,EAAD,CACIC,QAAS,UACTC,SAAUzE,KAAKkD,MAAMpB,cAAgB9B,KAAKkD,MAAMT,gBAChDjD,GAAG,cACHyE,QAASjE,KAAK0E,kBACdC,KAAK,UAEJ3E,KAAKkD,MAAMpB,cAAgBqB,EAAA9D,EAAAC,cAACsF,EAAA,EAAD,MAC5BzB,EAAA9D,EAAAC,cAAC8D,EAAA,EAAD,CACI5D,GAAG,+BACHC,eAAgB,aAGxB0D,EAAA9D,EAAAC,cAACiF,EAAA,EAAD,CACIC,QAAS,OACTC,SAAUzE,KAAKkD,MAAMpB,cAAgB9B,KAAKkD,MAAMT,gBAChDjD,GAAG,cACHyE,QAASjE,KAAK6E,kBACdF,KAAK,SAEJ3E,KAAKkD,MAAMT,iBAAmBU,EAAA9D,EAAAC,cAACsF,EAAA,EAAD,MAC/BzB,EAAA9D,EAAAC,cAAC8D,EAAA,EAAD,CACI5D,GAAG,kCACHC,eAAgB,iBAI3BqF,QAAQ9E,KAAKkD,MAAMnB,cAChBoB,EAAA9D,EAAAC,cAAA,OAAKK,UAAU,sDACXwD,EAAA9D,EAAAC,cAACyF,EAAA,EAAD,MACC,IACA/E,KAAKkD,MAAMnB,wDA5K3BnC,cACE,CACfuC,SAAU6C,IAAUC,OACpBrB,aAAcoB,IAAUE,KAAKC,WAC7BhE,QAAS6D,IAAUI,MAAM,CACrBhE,kBAAmB4D,IAAUK,KAAKF,WAClClC,6BAA8B+B,IAAUK,KAAKF,aAC9CA,aCFIG,4BAhBf,SAAyBpC,GAErB,MAAO,CACHU,aAAoD,SAFzC2B,oBAAUrC,GAEAsC,6BAI7B,SAA4BC,GACxB,MAAO,CACHtE,QAASuE,6BAAmB,CACxBtE,sCACA6B,6DACDwC,KAIIH,CAA6C1F","file":"25.2b4ce7a3c53b2a6a0a8b.js","sourcesContent":["// Copyright (c) 2015-present Mattermost, Inc. All Rights Reserved.\n// See LICENSE.txt for license information.\n\nimport React from 'react';\n\nimport {FormattedMessage} from 'react-intl';\n\nexport default class LogoutIcon extends React.PureComponent {\n    render() {\n        return (\n            <FormattedMessage\n                id='generic_icons.logout'\n                defaultMessage='Logout Icon'\n            >\n                {(title) => (\n                    <i\n                        className='fa fa-1x fa-angle-left'\n                        title={title}\n                    />\n                )}\n            </FormattedMessage>\n        );\n    }\n}\n","// Copyright (c) 2015-present Mattermost, Inc. All Rights Reserved.\n// See LICENSE.txt for license information.\n\nimport PropTypes from 'prop-types';\nimport React from 'react';\nimport {Button, ButtonGroup} from 'react-bootstrap';\nimport {FormattedMessage} from 'react-intl';\n\nimport {memoizeResult} from 'mattermost-redux/utils/helpers';\n\nimport * as GlobalActions from 'actions/global_actions.jsx';\nimport AnnouncementBar from 'components/announcement_bar';\nimport LoadingScreen from 'components/loading_screen.jsx';\nimport LoadingSpinner from 'components/widgets/loading/loading_spinner.jsx';\nimport LogoutIcon from 'components/icon/logout_icon';\nimport WarningIcon from 'components/icon/warning_icon';\n\nimport {browserHistory} from 'utils/browser_history';\nimport messageHtmlToComponent from 'utils/message_html_to_component';\nimport {formatText} from 'utils/text_formatting.jsx';\nimport {Constants} from 'utils/constants.jsx';\n\nexport default class TermsOfService extends React.PureComponent {\n    static propTypes = {\n        location: PropTypes.object,\n        termsEnabled: PropTypes.bool.isRequired,\n        actions: PropTypes.shape({\n            getTermsOfService: PropTypes.func.isRequired,\n            updateMyTermsOfServiceStatus: PropTypes.func.isRequired,\n        }).isRequired,\n    };\n\n    constructor(props) {\n        super(props);\n\n        this.state = {\n            customTermsOfServiceId: '',\n            customTermsOfServiceText: '',\n            loading: true,\n            loadingAgree: false,\n            loadingDisagree: false,\n            serverError: null,\n        };\n\n        this.formattedText = memoizeResult((text) => formatText(text));\n    }\n\n    componentDidMount() {\n        if (this.props.termsEnabled) {\n            this.getTermsOfService();\n        } else {\n            GlobalActions.redirectUserToDefaultTeam();\n        }\n    }\n\n    getTermsOfService = async () => {\n        this.setState({\n            customTermsOfServiceId: '',\n            customTermsOfServiceText: '',\n            loading: true,\n        });\n        const {data} = await this.props.actions.getTermsOfService();\n        if (data) {\n            this.setState({\n                customTermsOfServiceId: data.id,\n                customTermsOfServiceText: data.text,\n                loading: false,\n            });\n        } else {\n            GlobalActions.emitUserLoggedOutEvent(`/login?extra=${Constants.GET_TERMS_ERROR}`);\n        }\n    };\n\n    handleLogoutClick = (e) => {\n        e.preventDefault();\n        GlobalActions.emitUserLoggedOutEvent('/login');\n    };\n\n    handleAcceptTerms = () => {\n        this.setState({\n            loadingAgree: true,\n            serverError: null,\n        });\n        this.registerUserAction(\n            true,\n            () => {\n                const query = new URLSearchParams(this.props.location.search);\n                const redirectTo = query.get('redirect_to');\n                if (redirectTo && redirectTo.match(/^\\/([^/]|$)/)) {\n                    browserHistory.push(redirectTo);\n                } else {\n                    GlobalActions.redirectUserToDefaultTeam();\n                }\n            }\n        );\n    };\n\n    handleRejectTerms = () => {\n        this.setState({\n            loadingDisagree: true,\n            serverError: null,\n        });\n        this.registerUserAction(\n            false,\n            () => {\n                GlobalActions.emitUserLoggedOutEvent(`/login?extra=${Constants.TERMS_REJECTED}`);\n            }\n        );\n    };\n\n    registerUserAction = async (accepted, success) => {\n        const {data} = await this.props.actions.updateMyTermsOfServiceStatus(this.state.customTermsOfServiceId, accepted);\n        if (data) {\n            success(data);\n        } else {\n            this.setState({\n                loadingAgree: false,\n                loadingDisagree: false,\n                serverError: (\n                    <FormattedMessage\n                        id='terms_of_service.api_error'\n                        defaultMessage='Unable to complete the request. If this issue persists, contact your System Administrator.'\n                    />\n                ),\n            });\n        }\n    };\n\n    render() {\n        if (this.state.loading) {\n            return <LoadingScreen/>;\n        }\n\n        let termsMarkdownClasses = 'terms-of-service__markdown';\n        if (this.state.serverError) {\n            termsMarkdownClasses += ' terms-of-service-error__height--fill';\n        } else {\n            termsMarkdownClasses += ' terms-of-service__height--fill';\n        }\n        return (\n            <div>\n                <AnnouncementBar/>\n                <div className='signup-header'>\n                    <a\n                        href='#'\n                        onClick={this.handleLogoutClick}\n                    >\n                        <LogoutIcon/>\n                        <FormattedMessage\n                            id='web.header.logout'\n                            defaultMessage='Logout'\n                        />\n                    </a>\n                </div>\n                <div>\n                    <div className='signup-team__container terms-of-service__container'>\n                        <div className={termsMarkdownClasses}>\n                            <div className='medium-center'>\n                                {messageHtmlToComponent(this.formattedText(this.state.customTermsOfServiceText), false, {mentions: false})}\n                            </div>\n                        </div>\n                        <div className='terms-of-service__footer medium-center'>\n                            <ButtonGroup className='terms-of-service__button-group'>\n                                <Button\n                                    bsStyle={'primary'}\n                                    disabled={this.state.loadingAgree || this.state.loadingDisagree}\n                                    id='acceptTerms'\n                                    onClick={this.handleAcceptTerms}\n                                    type='submit'\n                                >\n                                    {this.state.loadingAgree && <LoadingSpinner/>}\n                                    <FormattedMessage\n                                        id='terms_of_service.agreeButton'\n                                        defaultMessage={'I Agree'}\n                                    />\n                                </Button>\n                                <Button\n                                    bsStyle={'link'}\n                                    disabled={this.state.loadingAgree || this.state.loadingDisagree}\n                                    id='rejectTerms'\n                                    onClick={this.handleRejectTerms}\n                                    type='reset'\n                                >\n                                    {this.state.loadingDisagree && <LoadingSpinner/>}\n                                    <FormattedMessage\n                                        id='terms_of_service.disagreeButton'\n                                        defaultMessage={'I Disagree'}\n                                    />\n                                </Button>\n                            </ButtonGroup>\n                            {Boolean(this.state.serverError) && (\n                                <div className='terms-of-service__server-error alert alert-warning'>\n                                    <WarningIcon/>\n                                    {' '}\n                                    {this.state.serverError}\n                                </div>\n                            )}\n                        </div>\n                    </div>\n                </div>\n            </div>\n        );\n    }\n}\n","// Copyright (c) 2015-present Mattermost, Inc. All Rights Reserved.\n// See LICENSE.txt for license information.\n\nimport {connect} from 'react-redux';\nimport {bindActionCreators} from 'redux';\n\nimport {getTermsOfService, updateMyTermsOfServiceStatus} from 'mattermost-redux/actions/users';\nimport {getConfig} from 'mattermost-redux/selectors/entities/general';\n\nimport TermsOfService from './terms_of_service';\n\nfunction mapStateToProps(state) {\n    const config = getConfig(state);\n    return {\n        termsEnabled: config.EnableCustomTermsOfService === 'true',\n    };\n}\n\nfunction mapDispatchToProps(dispatch) {\n    return {\n        actions: bindActionCreators({\n            getTermsOfService,\n            updateMyTermsOfServiceStatus,\n        }, dispatch),\n    };\n}\n\nexport default connect(mapStateToProps, mapDispatchToProps)(TermsOfService);\n"],"sourceRoot":""}