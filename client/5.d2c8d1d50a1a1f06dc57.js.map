{"version":3,"sources":["webpack:///./components/root/index.js","webpack:///./components/formatted_markdown_message.jsx","webpack:///./actions/global_actions.jsx","webpack:///./components/loading_screen.jsx","webpack:///./components/confirm_modal.jsx","webpack:///./components/localized_input/localized_input.jsx","webpack:///./components/form_error.jsx","webpack:///./actions/views/modals.js","webpack:///./components/widgets/badges/bot_badge.jsx","webpack:///./components/setting_item_max.jsx","webpack:///./selectors/views/channel.js","webpack:///./actions/views/channel.js","webpack:///./components/suggestion/provider.jsx","webpack:///./components/suggestion/suggestion.jsx","webpack:///./components/widgets/menu/menu_items/menu_item_action.jsx","webpack:///./selectors/views/settings.js","webpack:///./actions/views/settings.js","webpack:///./components/setting_item_min/setting_item_min.jsx","webpack:///./components/setting_item_min/index.js","webpack:///./components/save_button.jsx","webpack:///./actions/channel_actions.jsx","webpack:///./components/widgets/loading/loading_wrapper.jsx","webpack:///./components/widgets/menu/menu.jsx","webpack:///./components/markdown/markdown.jsx","webpack:///./components/markdown/index.js","webpack:///./components/widgets/menu/menu_wrapper_animation.jsx","webpack:///./components/widgets/menu/menu_wrapper.jsx","webpack:///./components/widgets/loading/loading_spinner.jsx","webpack:///./utils/file_utils.jsx","webpack:///./components/icon/warning_icon.jsx","webpack:///./components/profile_picture.jsx","webpack:///./actions/views/search.js","webpack:///./plugins/pluggable/pluggable.jsx","webpack:///./plugins/pluggable/index.js","webpack:///./components/svg/globe_icon.jsx","webpack:///./components/svg/lock_icon.jsx","webpack:///./utils/license_utils.jsx","webpack:///./components/announcement_bar/announcement_bar.jsx","webpack:///./components/announcement_bar/text_dismissable_bar.jsx","webpack:///./components/announcement_bar/configuration_bar/configuration_bar.jsx","webpack:///./components/announcement_bar/configuration_bar/index.js","webpack:///./components/announcement_bar/version_bar/version_bar.jsx","webpack:///./components/announcement_bar/version_bar/index.js","webpack:///./components/announcement_bar/announcement_bar_controller.jsx","webpack:///./components/announcement_bar/index.js","webpack:///./components/spinner_button.jsx","webpack:///./components/suggestion/suggestion_box.jsx","webpack:///./components/suggestion/suggestion_list.jsx","webpack:///./actions/team_actions.jsx","webpack:///./components/permissions_gates/system_permission_gate/system_permission_gate.jsx","webpack:///./components/permissions_gates/system_permission_gate/index.js","webpack:///./components/multiselect/multiselect_list.jsx","webpack:///./components/multiselect/multiselect.jsx","webpack:///./components/svg/archive_icon.jsx","webpack:///./components/icon/success_icon.jsx","webpack:///./selectors/views/modals.js","webpack:///./components/icon/add_icon.jsx","webpack:///./components/permissions_gates/team_permission_gate/team_permission_gate.jsx","webpack:///./components/permissions_gates/team_permission_gate/index.js","webpack:///./actions/views/lhs.js","webpack:///./actions/websocket_actions.jsx","webpack:///./components/size_aware_image.jsx","webpack:///./components/widgets/menu/menu_items/menu_item.jsx","webpack:///./components/svg/search_icon.jsx","webpack:///./components/icon/back_icon.jsx","webpack:///./components/toggle_modal_button.jsx","webpack:///./components/svg/status_away_avatar_icon.jsx","webpack:///./components/svg/status_away_icon.jsx","webpack:///./components/svg/status_dnd_avatar_icon.jsx","webpack:///./components/svg/status_dnd_icon.jsx","webpack:///./components/svg/status_offline_avatar_icon.jsx","webpack:///./components/svg/status_offline_icon.jsx","webpack:///./components/svg/status_online_avatar_icon.jsx","webpack:///./components/svg/status_online_icon.jsx","webpack:///./components/status_icon.jsx","webpack:///./components/external_image/external_image.jsx","webpack:///./components/external_image/index.js","webpack:///./actions/views/root.js","webpack:///./stores/browser_store.jsx","webpack:///./utils/team_utils.jsx","webpack:///./images/groups-avatar.png","webpack:///./components/widgets/menu/menu_group.jsx","webpack:///./components/svg/menu_icon.jsx","webpack:///./components/latex_block.jsx","webpack:///./components/markdown_image.jsx","webpack:///./components/post_emoji/post_emoji.jsx","webpack:///./components/post_emoji/index.jsx","webpack:///./utils/message_html_to_component.jsx","webpack:///./components/toggle_modal_button_redux/toggle_modal_button_redux.jsx","webpack:///./components/toggle_modal_button_redux/index.js","webpack:///./components/user_settings/modal/user_settings_modal.jsx","webpack:///./components/user_settings/modal/index.js","webpack:///./components/add_groups_to_team_modal/add_groups_to_team_modal.jsx","webpack:///./components/add_groups_to_team_modal/index.js","webpack:///./components/add_groups_to_channel_modal/add_groups_to_channel_modal.jsx","webpack:///./components/add_groups_to_channel_modal/index.js","webpack:///./components/file_info_preview/file_info_preview.jsx","webpack:///./components/file_info_preview/index.js","webpack:///./selectors/local_storage.js","webpack:///./components/suggestion/generic_user_provider.jsx","webpack:///./components/widgets/badges/badge.jsx","webpack:///./components/quick_input.jsx","webpack:///./dispatcher/app_dispatcher.jsx","webpack:///./actions/views/notice.js","webpack:///./components/svg/mattermost_logo.jsx","webpack:///./images/img_trans.gif","webpack:///./components/widgets/menu/menu_items/menu_item_toggle_modal_redux.jsx","webpack:///./actions/views/profile_popover.js","webpack:///./components/suggestion/search_channel_with_permissions_provider.jsx","webpack:///./components/add_user_to_channel_modal/add_user_to_channel_modal.jsx","webpack:///./components/add_user_to_channel_modal/index.js","webpack:///./components/profile_popover/profile_popover.jsx","webpack:///./components/profile_popover/index.js","webpack:///./components/system_notice/notices.jsx","webpack:///./components/system_notice/system_notice.jsx","webpack:///./components/system_notice/index.js","webpack:///./client/websocket_client.jsx","webpack:///./client/web_websocket_client.jsx","webpack:///./selectors/views/websocket.js","webpack:///./components/suggestion/menu_action_provider.jsx","webpack:///./components/suggestion/generic_channel_provider.jsx","webpack:///./components/widgets/settings/autocomplete_selector.jsx","webpack:///./components/settings_sidebar.jsx?91ec","webpack:///./utils/position_utils.jsx","webpack:///./components/loading_image_preview.jsx","webpack:///./components/logged_in/index.js?3ab1","webpack:///./utils/route.jsx","webpack:///./utils/server_version.jsx","webpack:///./components/autosize_textarea.jsx","webpack:///./components/icon/edit_icon.jsx","webpack:///./components/setting_picture.jsx","webpack:///./components/widgets/menu/menu_items/menu_item_external_link.jsx","webpack:///./components/user_list_row/user_list_row.jsx","webpack:///./components/user_list_row/index.js","webpack:///./components/user_list.jsx","webpack:///./components/searchable_user_list/searchable_user_list.jsx","webpack:///./components/interactive_dialog/dialog_element.jsx","webpack:///./components/interactive_dialog/interactive_dialog.jsx","webpack:///./components/interactive_dialog/index.js","webpack:///./components/at_mention/at_mention.jsx","webpack:///./components/at_mention/index.jsx","webpack:///./components/modal_controller/modal_controller.jsx","webpack:///./components/modal_controller/index.js","webpack:///./components/widgets/settings/setting.jsx","webpack:///./components/widgets/settings/text_setting.jsx","webpack:///./components/local_date_time/local_date_time.jsx","webpack:///./components/local_date_time/index.js","webpack:///./components/about_build_modal/about_build_modal.jsx","webpack:///./components/about_build_modal/index.js","webpack:///./plugins/registry.js","webpack:///./plugins/index.js","webpack:///./components/root/root.jsx","webpack:///./actions/views/system.js","webpack:///./components/user_settings/index.js?4083","webpack:///./components/link_tooltip/link_tooltip.jsx","webpack:///./components/header_footer_template_route.jsx","webpack:///./components/header_footer_template/index.js?9120","webpack:///./components/backstage/index.js?937c","webpack:///./images/filesOverlay.png","webpack:///./images/logoWhite.png","webpack:///./non_npm_dependencies/jquery-dragster/jquery.dragster.js","webpack:///./components/pdf_preview.jsx?201b","webpack:///./images/tutorialTip.gif","webpack:///./images/tutorialTipWhite.gif","webpack:///./images/favicon/favicon-16x16.png","webpack:///./images/favicon/redfavicon-16x16.png","webpack:///./images/appIcons.png","webpack:///./components/error_page/index.jsx?4c76","webpack:///./components/login/login_controller/index.js?7f1c","webpack:///./components/admin_console/index.js?cc43","webpack:///./components/password_reset_send_link/index.js?1cb8","webpack:///./components/password_reset_form/index.js?1c57","webpack:///./components/signup/signup_controller/index.js?3081","webpack:///./components/signup/signup_email/index.js?fd7f","webpack:///./components/terms_of_service/index.js?4169","webpack:///./components/should_verify_email/index.js?4b7b","webpack:///./components/do_verify_email/index.js?01f1","webpack:///./components/claim/index.js?d70a","webpack:///./components/help/help_controller.jsx?083b","webpack:///./components/get_ios_app/index.js?024a","webpack:///./components/get_android_app/index.js?b51e","webpack:///./components/select_team/index.js?d49e","webpack:///./components/authorize/index.js?e231","webpack:///./components/create_team/index.js?e586","webpack:///./components/mfa/mfa_controller/index.js?b130","webpack:///./utils/a11y_controller.js","webpack:///./actions/views/posts.js","webpack:///./components/delete_post_modal/delete_post_modal.jsx","webpack:///./components/delete_post_modal/index.js","webpack:///./components/gif_picker/utils/constants.js","webpack:///./components/svg/gif_search_icon.jsx","webpack:///./components/svg/gif_search_clear_icon.jsx","webpack:///./components/gif_picker/components/SearchBar/index.jsx","webpack:///./components/svg/gif_trending_icon.jsx","webpack:///./components/svg/gif_reactions_icon.jsx","webpack:///./components/gif_picker/components/Header/index.jsx","webpack:///./components/gif_picker/components/App/index.jsx","webpack:///./components/gif_picker/components/InfiniteScroll/index.js","webpack:///./components/gif_picker/components/Categories/index.jsx","webpack:///./components/gif_picker/components/SearchItem/index.jsx","webpack:///./components/gif_picker/components/SearchGrid/SearchGrid.jsx","webpack:///./components/gif_picker/components/SearchGrid/index.js","webpack:///./components/gif_picker/components/Search/index.jsx","webpack:///./components/gif_picker/components/Trending/index.jsx","webpack:///./components/gif_picker/gif_picker.jsx","webpack:///./components/svg/emoji_icon.jsx","webpack:///./components/svg/gfycat_icon.jsx","webpack:///./components/emoji_picker/components/emoji_picker_header.jsx","webpack:///./utils/emoji_utils.jsx","webpack:///./components/emoji_picker/components/emoji_picker_category.jsx","webpack:///./components/emoji_picker/components/emoji_picker_item.jsx","webpack:///./components/emoji_picker/emoji_picker_category_section.jsx","webpack:///./components/emoji_picker/components/emoji_picker_preview.jsx","webpack:///./components/emoji_picker/emoji_picker.jsx","webpack:///./components/emoji_picker/index.js","webpack:///./components/emoji_picker/emoji_picker_tabs.jsx","webpack:///./components/emoji_picker/emoji_picker_overlay.jsx","webpack:///./components/post_view/combined_system_message/last_users.jsx","webpack:///./components/post_view/combined_system_message/combined_system_message.jsx","webpack:///./components/post_view/combined_system_message/index.js","webpack:///./components/post_view/post_add_channel_member/post_add_channel_member.jsx","webpack:///./components/post_view/post_add_channel_member/index.js","webpack:///./components/post_markdown/system_message_helpers.jsx","webpack:///./components/post_markdown/post_markdown.jsx","webpack:///./components/post_markdown/index.js","webpack:///./components/suggestion/at_mention_provider/at_mention_suggestion.jsx","webpack:///./components/suggestion/at_mention_provider/index.js","webpack:///./components/suggestion/at_mention_provider/at_mention_provider.jsx","webpack:///./components/suggestion/channel_mention_provider.jsx","webpack:///./components/suggestion/command_provider.jsx","webpack:///./components/suggestion/emoticon_provider.jsx","webpack:///./components/textbox/textbox.jsx","webpack:///./components/textbox/index.js","webpack:///./components/textbox/textbox_links.jsx","webpack:///./components/edit_post_modal/edit_post_modal.jsx","webpack:///./components/edit_post_modal/index.js","webpack:///./stores/modal_store.jsx","webpack:///./components/get_link_modal.jsx","webpack:///./components/get_post_link_modal/get_post_link_modal.jsx","webpack:///./components/get_post_link_modal/index.js","webpack:///./components/get_team_invite_link_modal/get_team_invite_link_modal.jsx","webpack:///./components/get_team_invite_link_modal/index.js","webpack:///./components/get_public_link_modal/get_public_link_modal.jsx","webpack:///./components/get_public_link_modal/index.js","webpack:///./components/leave_private_channel_modal/leave_private_channel_modal.jsx","webpack:///./components/leave_private_channel_modal/index.js","webpack:///./components/reset_status_modal/reset_status_modal.jsx","webpack:///./components/reset_status_modal/index.js","webpack:///./components/shortcuts_modal.jsx","webpack:///./components/file_upload_overlay.jsx","webpack:///./utils/delayed_action.jsx","webpack:///./selectors/views/system.js","webpack:///./actions/command.js","webpack:///./actions/hooks.js","webpack:///./actions/views/create_comment.jsx","webpack:///./utils/paste.jsx","webpack:///./components/svg/attachment_icon.jsx","webpack:///./components/file_attachment/filename_overlay.jsx","webpack:///./components/icon/remove_icon.jsx","webpack:///./components/file_preview/file_progress_preview.jsx","webpack:///./components/file_preview/file_preview.jsx","webpack:///./components/file_preview/index.js","webpack:///./actions/file_actions.jsx","webpack:///./components/file_upload/file_upload.jsx","webpack:///./components/file_upload/index.js","webpack:///./components/msg_typing/msg_typing.jsx","webpack:///./components/msg_typing/index.js","webpack:///./components/post_deleted_modal.jsx","webpack:///./components/message_submit_error.jsx","webpack:///./components/create_comment/create_comment.jsx","webpack:///./components/create_comment/index.js","webpack:///./components/post_view/date_separator/date_separator.jsx","webpack:///./components/post_view/date_separator/index.js","webpack:///./components/post_view/floating_timestamp/floating_timestamp.jsx","webpack:///./components/post_view/floating_timestamp/index.js","webpack:///./components/permissions_gates/channel_permission_gate/channel_permission_gate.jsx","webpack:///./components/permissions_gates/channel_permission_gate/index.js","webpack:///./components/dot_menu/dot_menu.jsx","webpack:///./components/dot_menu/index.js","webpack:///./components/svg/download_icon.jsx","webpack:///./components/file_attachment/file_thumbnail/file_thumbnail.jsx","webpack:///./components/file_attachment/file_thumbnail/index.js","webpack:///./components/file_attachment/file_attachment.jsx","webpack:///./components/file_attachment/index.js","webpack:///./components/audio_video_preview.jsx","webpack:///./components/code_preview.jsx","webpack:///./components/view_image/image_preview.jsx","webpack:///./components/view_image/popover_bar/popover_bar.jsx","webpack:///./components/view_image/popover_bar/index.js","webpack:///./components/view_image/view_image.jsx","webpack:///./components/view_image/index.js","webpack:///./components/single_image_view/single_image_view.jsx","webpack:///./components/single_image_view/index.js","webpack:///./components/file_attachment_list/file_attachment_list.jsx","webpack:///./components/file_attachment_list/index.js","webpack:///./components/post_profile_picture/post_profile_picture.jsx","webpack:///./components/post_profile_picture/index.jsx","webpack:///./components/post_view/failed_post_options/failed_post_options.jsx","webpack:///./components/post_view/failed_post_options/index.js","webpack:///./components/svg/flag_icon.jsx","webpack:///./components/svg/flag_icon_filled.jsx","webpack:///./components/post_view/post_flag_icon/post_flag_icon.js","webpack:///./components/post_view/post_flag_icon/index.js","webpack:///./components/post_view/post_time/post_time.jsx","webpack:///./components/post_view/post_time/index.js","webpack:///./components/post_view/post_reaction/post_reaction.jsx","webpack:///./components/post_view/post_reaction/index.js","webpack:///./components/post_view/reaction/reaction.jsx","webpack:///./components/post_view/reaction/index.js","webpack:///./components/post_view/reaction_list/reaction_list.jsx","webpack:///./components/post_view/reaction_list/index.js","webpack:///./components/post_view/show_more/show_more.jsx","webpack:///./components/post_view/show_more/index.js","webpack:///./components/post_view/message_attachments/action_button.jsx","webpack:///./components/post_view/message_attachments/action_menu/action_menu.jsx","webpack:///./components/post_view/message_attachments/action_menu/index.js","webpack:///./utils/markdown/link_only_renderer.jsx","webpack:///./components/post_view/message_attachments/message_attachment/message_attachment.jsx","webpack:///./components/post_view/message_attachments/message_attachment/index.js","webpack:///./components/post_view/message_attachments/message_attachment_list.jsx","webpack:///./components/post_view/post_attachment_opengraph/get_nearest_point.js","webpack:///./components/post_view/post_attachment_opengraph/post_attachment_opengraph.jsx","webpack:///./components/post_view/post_attachment_opengraph/index.js","webpack:///./components/post_view/post_image/post_image.jsx","webpack:///./components/post_view/post_image/index.js","webpack:///./components/youtube_video/youtube_video.jsx","webpack:///./components/youtube_video/index.js","webpack:///./components/post_view/post_body_additional_content/post_body_additional_content.jsx","webpack:///./components/post_view/post_body_additional_content/index.js","webpack:///./components/post_view/post_message_view/post_message_view.jsx","webpack:///./components/post_view/post_message_view/index.js","webpack:///./components/message_with_additional_content.jsx","webpack:///./components/svg/info_small_icon.jsx","webpack:///./components/user_profile/user_profile.jsx","webpack:///./components/user_profile/index.js","webpack:///./components/rhs_comment/rhs_comment.jsx","webpack:///./components/rhs_comment/index.js","webpack:///./components/rhs_header_post/rhs_header_post.jsx","webpack:///./components/rhs_header_post/index.js","webpack:///./components/rhs_root_post/rhs_root_post.jsx","webpack:///./components/rhs_root_post/index.js","webpack:///./components/rhs_thread/rhs_thread.jsx","webpack:///./components/rhs_thread/index.js","webpack:///./components/rhs_card_header/rhs_card_header.jsx","webpack:///./components/rhs_card_header/index.jsx","webpack:///./components/rhs_card/rhs_card.jsx","webpack:///./components/rhs_card/index.js","webpack:///./components/icon/select_icon.jsx","webpack:///./components/suggestion/search_channel_provider.jsx","webpack:///./components/suggestion/search_suggestion_list.jsx","webpack:///./components/suggestion/suggestion_date.jsx","webpack:///./components/suggestion/search_user_provider.jsx","webpack:///./components/suggestion/search_date_provider.jsx","webpack:///./components/channel_header/components/header_icon_wrapper.js","webpack:///./components/search_hint/search_hint.jsx","webpack:///./components/svg/mentions_icon.jsx","webpack:///./components/search_bar/search_bar.jsx","webpack:///./components/search_bar/index.jsx","webpack:///./components/search_results_header/search_results_header.jsx","webpack:///./components/search_results_header/index.jsx","webpack:///./components/svg/reply_icon.jsx","webpack:///./components/common/comment_icon.jsx","webpack:///./components/search_results_item/search_results_item.jsx","webpack:///./components/search_results_item/index.js","webpack:///./components/search_hint/data_retention_hint.jsx","webpack:///./components/search_hint/flag_post_search_hint.jsx","webpack:///./components/search_hint/no_result_search_hint.jsx","webpack:///./components/search_hint/pin_post_search_hint.jsx","webpack:///./components/search_results/search_results.jsx","webpack:///./components/search_results/index.jsx","webpack:///./plugins/rhs_plugin/rhs_plugin.jsx","webpack:///./plugins/rhs_plugin/index.js","webpack:///./components/sidebar_right/sidebar_right.jsx","webpack:///./components/sidebar_right/index.js","webpack:///./components/tutorial/tutorial_tip/tutorial_tip.jsx","webpack:///./components/tutorial/tutorial_tip/index.js","webpack:///./components/tutorial/menu_tutorial_tip.jsx","webpack:///./components/invite_member_modal/invite_member_modal.jsx","webpack:///./components/invite_member_modal/index.js","webpack:///./components/svg/leave_team_icon.jsx","webpack:///./components/leave_team_modal/leave_team_modal.jsx","webpack:///./components/leave_team_modal/index.js","webpack:///./components/searchable_user_list/searchable_user_list_container.jsx","webpack:///./components/icon/dropdown_icon.jsx","webpack:///./components/team_members_dropdown/team_members_dropdown.jsx","webpack:///./components/team_members_dropdown/index.js","webpack:///./components/member_list_team/member_list_team.jsx","webpack:///./components/member_list_team/index.js","webpack:///./components/team_members_modal/team_members_modal.jsx","webpack:///./components/team_members_modal/index.js","webpack:///./components/team_general_tab/team_general_tab.jsx","webpack:///./components/team_general_tab/index.js","webpack:///./components/setting_upload.jsx","webpack:///./components/team_import_tab.jsx","webpack:///./components/team_settings/team_settings.jsx","webpack:///./components/team_settings/index.js","webpack:///./components/team_settings_modal/team_settings_modal.jsx","webpack:///./components/team_settings_modal/index.js","webpack:///./components/add_users_to_team/add_users_to_team.jsx","webpack:///./components/add_users_to_team/index.js","webpack:///./components/widgets/menu/menu_items/menu_item_link.jsx","webpack:///./components/list_modal.jsx","webpack:///./components/team_groups_manage_modal/team_groups_manage_modal.jsx","webpack:///./components/team_groups_manage_modal/index.js","webpack:///./components/main_menu/main_menu.jsx","webpack:///./components/main_menu/index.jsx","webpack:///./components/sidebar_right_menu/sidebar_right_menu.jsx","webpack:///./components/sidebar_right_menu/index.js","webpack:///./components/user_settings/import_theme_modal.jsx","webpack:///./selectors/lhs.jsx","webpack:///./components/copy_url_context_menu/copy_url_context_menu.jsx","webpack:///./components/copy_url_context_menu/index.js","webpack:///./components/team_sidebar/components/team_button.jsx","webpack:///./components/team_sidebar/team_sidebar_controller.jsx","webpack:///./components/team_sidebar/index.js","webpack:///./components/searchable_channel_list.jsx","webpack:///./components/more_channels/more_channels.jsx","webpack:///./components/more_channels/index.js","webpack:///./components/more_direct_channels/group_message_option.jsx","webpack:///./components/more_direct_channels/more_direct_channels.jsx","webpack:///./components/more_direct_channels/index.js","webpack:///./components/svg/draft_icon.jsx","webpack:///./components/suggestion/switch_channel_provider.jsx","webpack:///./components/suggestion/switch_team_provider.jsx","webpack:///./components/quick_switch_modal/quick_switch_modal.jsx","webpack:///./components/quick_switch_modal/index.js","webpack:///./components/new_channel_modal/new_channel_modal.jsx","webpack:///./components/new_channel_modal/index.js","webpack:///./components/change_url_modal/change_url_modal.jsx","webpack:///./components/change_url_modal/index.js","webpack:///./components/new_channel_flow/new_channel_flow.jsx","webpack:///./components/new_channel_flow/index.js","webpack:///./components/svg/unread_below_icon.jsx","webpack:///./components/unread_channel_indicator.jsx","webpack:///./components/status_dropdown/status_dropdown.jsx","webpack:///./components/status_dropdown/index.jsx","webpack:///./components/sidebar/header/sidebar_header_dropdown_button.jsx","webpack:///./components/sidebar/header/dropdown/sidebar_header_dropdown.jsx","webpack:///./components/sidebar/header/dropdown/index.js","webpack:///./components/sidebar/header/sidebar_header.jsx","webpack:///./components/sidebar/header/index.js","webpack:///./components/svg/bot_icon.jsx","webpack:///./components/sidebar/sidebar_channel_button_or_link/sidebar_channel_button_or_link_icon.jsx","webpack:///./components/sidebar/sidebar_channel_button_or_link/sidebar_channel_button_or_link_close_button.jsx","webpack:///./components/sidebar/sidebar_channel_button_or_link/sidebar_channel_button_or_link.jsx","webpack:///./components/sidebar/sidebar_tutorial_tip.jsx","webpack:///./components/sidebar/sidebar_channel/sidebar_channel.jsx","webpack:///./components/sidebar/sidebar_channel/index.js","webpack:///./components/sidebar/channel_create.jsx","webpack:///./components/sidebar/channel_more.jsx","webpack:///./components/sidebar/channel_name.jsx","webpack:///./components/sidebar/more_public_direct_channels.jsx","webpack:///./components/sidebar/sidebar.jsx","webpack:///./components/sidebar/index.js","webpack:///./components/permalink_view/actions.js","webpack:///./components/edit_channel_header_modal/edit_channel_header_modal.jsx","webpack:///./components/edit_channel_header_modal/index.js","webpack:///./components/channel_invite_modal/channel_invite_modal.jsx","webpack:///./components/channel_invite_modal/index.js","webpack:///./components/channel_members_dropdown/channel_members_dropdown.jsx","webpack:///./components/channel_members_dropdown/index.js","webpack:///./components/member_list_channel/member_list_channel.jsx","webpack:///./components/member_list_channel/index.js","webpack:///./components/channel_members_modal/channel_members_modal.jsx","webpack:///./components/channel_members_modal/index.js","webpack:///./components/svg/member_icon.jsx","webpack:///./components/svg/message_icon.jsx","webpack:///./components/popover_list_members/popover_list_members_item.jsx","webpack:///./components/popover_list_members/popover_list_members.jsx","webpack:///./components/popover_list_members/index.js","webpack:///./components/svg/pin_icon.jsx","webpack:///./components/channel_header_dropdown/channel_header_dropdown.js","webpack:///./plugins/mobile_channel_header_plug/mobile_channel_header_plug.jsx","webpack:///./plugins/mobile_channel_header_plug/index.js","webpack:///./components/channel_notifications_modal/components/describe.jsx","webpack:///./components/channel_notifications_modal/components/section_title.jsx","webpack:///./components/channel_notifications_modal/components/collapse_view.jsx","webpack:///./components/channel_notifications_modal/components/extra_info.jsx","webpack:///./components/channel_notifications_modal/components/expand_view.jsx","webpack:///./components/channel_notifications_modal/components/notification_section.jsx","webpack:///./components/channel_notifications_modal/channel_notifications_modal.jsx","webpack:///./components/channel_notifications_modal/index.js","webpack:///./components/channel_info_modal/channel_info_modal.jsx","webpack:///./components/channel_info_modal/index.js","webpack:///./components/edit_channel_purpose_modal/edit_channel_purpose_modal.jsx","webpack:///./components/edit_channel_purpose_modal/index.js","webpack:///./components/rename_channel_modal/rename_channel_modal.jsx","webpack:///./components/rename_channel_modal/index.js","webpack:///./components/convert_channel_modal/convert_channel_modal.jsx","webpack:///./components/convert_channel_modal/index.js","webpack:///./components/delete_channel_modal/delete_channel_modal.jsx","webpack:///./components/delete_channel_modal/index.js","webpack:///./components/channel_groups_manage_modal/channel_groups_manage_modal.jsx","webpack:///./components/channel_groups_manage_modal/index.js","webpack:///./components/channel_header_dropdown/menu_items/leave_channel/leave_channel.js","webpack:///./components/channel_header_dropdown/menu_items/leave_channel/index.js","webpack:///./components/channel_header_dropdown/menu_items/close_channel/close_channel.js","webpack:///./components/channel_header_dropdown/menu_items/close_channel/index.js","webpack:///./components/channel_header_dropdown/menu_items/toggle_mute_channel/toggle_mute_channel.js","webpack:///./components/channel_header_dropdown/menu_items/toggle_mute_channel/index.js","webpack:///./components/channel_header_dropdown/menu_items/toggle_favorite_channel/toggle_favorite_channel.js","webpack:///./components/channel_header_dropdown/menu_items/toggle_favorite_channel/index.js","webpack:///./components/channel_header_dropdown/menu_items/view_pinned_posts/view_pinned_posts.js","webpack:///./components/channel_header_dropdown/menu_items/view_pinned_posts/index.js","webpack:///./components/channel_header_dropdown/channel_header_dropdown_items.js","webpack:///./components/channel_header_dropdown/mobile_channel_header_dropdown_animation.jsx","webpack:///./components/channel_header_dropdown/mobile_channel_header_dropdown.js","webpack:///./components/channel_header_dropdown/index.js","webpack:///./plugins/channel_header_plug/channel_header_plug.jsx","webpack:///./plugins/channel_header_plug/index.js","webpack:///./components/channel_header/channel_header.js","webpack:///./components/channel_header/index.js","webpack:///./components/post_view/new_messages_below/new_messages_below.jsx","webpack:///./components/post_view/new_messages_below/index.js","webpack:///./components/post_view/commented_on_files_message/commented_on_files_message.jsx","webpack:///./components/post_view/commented_on_files_message/index.js","webpack:///./components/post_view/commented_on/commented_on.jsx","webpack:///./components/post_view/commented_on/index.js","webpack:///./components/post_view/post_body/post_body.jsx","webpack:///./components/post_view/post_body/index.js","webpack:///./components/post_view/post_info/post_info.jsx","webpack:///./components/post_view/post_info/index.js","webpack:///./components/post_view/post_header/post_header.jsx","webpack:///./components/post_view/post_header/index.js","webpack:///./components/post_view/post/post.jsx","webpack:///./components/post_view/post/index.js","webpack:///./components/post_view/combined_user_activity_post/index.js","webpack:///./components/svg/scroll_to_bottom_icon.jsx","webpack:///./components/post_view/scroll_to_bottom_arrows.jsx","webpack:///./components/post_view/channel_intro_message/channel_intro_message.jsx","webpack:///./components/post_view/channel_intro_message/index.js","webpack:///./components/post_view/post_list_ie/post_list_ie.jsx","webpack:///./components/post_view/post_list_ie/index.js","webpack:///./components/post_view/new_message_separator/new_message_separator.jsx","webpack:///./components/post_view/post_list_row/post_list_row.jsx","webpack:///./components/post_view/post_list_row/index.js","webpack:///./components/post_view/post_list/post_list_virtualized.jsx","webpack:///./components/post_view/post_list/post_list.jsx","webpack:///./components/post_view/post_list/index.js","webpack:///./components/post_view/post_view.jsx","webpack:///./components/post_view/index.js","webpack:///./components/permalink_view/permalink_view.jsx","webpack:///./components/permalink_view/index.js","webpack:///./components/notify_counts/notify_counts.jsx","webpack:///./components/notify_counts/index.js","webpack:///./components/channel_header_mobile/collapse_lhs_button/collapse_lhs_button.js","webpack:///./components/channel_header_mobile/collapse_lhs_button/index.js","webpack:///./components/channel_header_mobile/collapse_rhs_button/collapse_rhs_button.js","webpack:///./components/channel_header_mobile/collapse_rhs_button/index.js","webpack:///./components/svg/info_icon.jsx","webpack:///./components/channel_header_mobile/channel_info_button/channel_info_button.js","webpack:///./components/channel_header_mobile/channel_info_button/index.js","webpack:///./components/channel_header_mobile/show_search_button/show_search_button.js","webpack:///./components/channel_header_mobile/show_search_button/index.js","webpack:///./components/channel_header_mobile/unmute_channel_button/unmute_channel_button.js","webpack:///./components/channel_header_mobile/unmute_channel_button/index.js","webpack:///./components/channel_header_mobile/channel_header_mobile.js","webpack:///./components/channel_header_mobile/index.js","webpack:///./components/channel_layout/channel_identifier_router/actions.js","webpack:///./components/deferComponentRender.jsx","webpack:///./components/create_post/create_post.jsx","webpack:///./components/create_post/index.js","webpack:///./components/tutorial/tutorial_intro_screens/tutorial_intro_screens.jsx","webpack:///./components/tutorial/tutorial_intro_screens/index.jsx","webpack:///./components/tutorial/tutorial_view.jsx","webpack:///./components/tutorial/index.jsx","webpack:///./components/channel_view/channel_view.jsx","webpack:///./components/channel_view/index.js","webpack:///./components/channel_layout/channel_identifier_router/channel_identifier_router.jsx","webpack:///./components/channel_layout/channel_identifier_router/index.js","webpack:///./components/channel_layout/center_channel/center_channel.jsx","webpack:///./components/channel_layout/center_channel/index.js","webpack:///./components/channel_layout/channel_controller.jsx","webpack:///./components/needs_team/needs_team.jsx","webpack:///./components/needs_team/index.js","webpack:///./components/removed_from_channel_modal/removed_from_channel_modal.jsx","webpack:///./components/removed_from_channel_modal/index.js","webpack:///./plugins/interactive_dialog.js","webpack:///./plugins/export.js","webpack:///./components/intl_provider/intl_provider.jsx","webpack:///./components/intl_provider/index.jsx"],"names":["__webpack_require__","r","__webpack_exports__","redux__WEBPACK_IMPORTED_MODULE_0__","react_redux__WEBPACK_IMPORTED_MODULE_1__","mattermost_redux_selectors_entities_general__WEBPACK_IMPORTED_MODULE_2__","mattermost_redux_selectors_entities_users__WEBPACK_IMPORTED_MODULE_3__","actions_views_root__WEBPACK_IMPORTED_MODULE_4__","_root_jsx__WEBPACK_IMPORTED_MODULE_5__","connect","state","config","getConfig","showTermsOfService","shouldShowTermsOfService","diagnosticsEnabled","DiagnosticsEnabled","noAccounts","NoAccounts","diagnosticId","DiagnosticId","dispatch","actions","bindActionCreators","loadMeAndConfig","Root","CustomRenderer","_marked$Renderer","_classCallCheck","this","_possibleConstructorReturn","_getPrototypeOf","apply","arguments","_inherits","marked","Renderer","_createClass","key","value","href","title","text","concat","substring","length","FormattedMarkdownMessage","React","PureComponent","origMsg","props","intl","formatMessage","id","defaultMessage","values","markedUpMessage","breaks","sanitize","renderer","react__WEBPACK_IMPORTED_MODULE_5___default","a","createElement","dangerouslySetInnerHTML","__html","intlShape","isRequired","PropTypes","string","object","injectIntl","store","getState","emitChannelClickEvent","channel","_this","_userVisitedFakeChannel","_asyncToGenerator","regeneratorRuntime","mark","_callee","chan","success","fail","currentUserId","otherUserId","_ref","receivedChannel","wrap","_context","prev","next","getCurrentUserId","Utils","createDirectChannel","sent","data","stop","switchToChannel","getMyChannelMemberPromise","getMyChannelMember","oldChannelId","getCurrentChannelId","userId","teamId","team_id","getCurrentTeamId","isRHSOpened","getIsRhsOpen","isPinnedPostsShowing","getRhsState","RHSStates","PIN","member","selectMyChannelMember","then","getChannelStats","markChannelAsRead","markChannelAsViewed","delete_at","penultimate","LocalStorageStore","getPreviousChannelName","name","setPenultimateChannelName","setPreviousChannelName","updateRhsState","loadProfilesForSidebar","batchActions","type","ChannelTypes","SELECT_CHANNEL","ActionTypes","SELECT_CHANNEL_WITH_MEMBER","fake","_x","_x2","_x3","userVisitedFakeChannel","browserHistory","push","currentTeam","emitCloseRightHandSide","closeRightHandSide","toggleShortcutsModal","AppDispatcher","handleViewAction","TOGGLE_SHORTCUTS_MODAL","showChannelNameUpdateModal","TOGGLE_CHANNEL_NAME_UPDATE_MODAL","showGetPostLinkModal","post","TOGGLE_GET_POST_LINK_MODAL","showGetPublicLinkModal","fileId","TOGGLE_GET_PUBLIC_LINK_MODAL","showGetTeamInviteLinkModal","Constants","TOGGLE_GET_TEAM_INVITE_LINK_MODAL","showLeavePrivateChannelModal","TOGGLE_LEAVE_PRIVATE_CHANNEL_MODAL","sendEphemeralPost","message","channelId","parentId","timestamp","user_id","channel_id","PostTypes","EPHEMERAL","create_at","update_at","root_id","parent_id","handleNewPost","sendAddToChannelEphemeralPost","user","addedUsername","addedUserId","postRootId","undefined","EPHEMERAL_ADD_TO_CHANNEL","username","lastTimeTypingSent","emitLocalUserTypingEvent","parentPostId","_ref2","_callee2","actionDispatch","actionGetState","t","stats","membersInChannel","_context2","Date","now","getCurrentChannelStats","member_count","TimeBetweenUserTypingUpdatesMilliseconds","MaxNotificationsPerChannel","EnableUserTypingMessages","WebSocketClient","userTyping","abrupt","_x4","_x5","emitUserLoggedOutEvent","redirectTo","shouldSignalLogout","setWasLoggedIn","logout","BrowserStore","signalLogout","clear","stopPeriodicStatusUpdates","WebsocketActions","clearUserCookie","catch","toggleSideBarRightMenuAction","doDispatch","closeLhs","closeRhsMenu","emitBrowserFocus","focus","BROWSER_CHANGE_FOCUS","redirectUserToDefaultTeam","_redirectUserToDefaultTeam","_callee3","locale","team","myMember","myTeams","channelName","_ref3","_context3","getTeamMemberships","loadMe","getCurrentLocale","getPreviousTeamId","getTeam","getMyTeamMember","getMyTeams","filterAndSortTeamsByDisplayName","getChannelByName","selectChannel","getChannelByNameAndTeamName","LoadingScreen","call","Component","react__WEBPACK_IMPORTED_MODULE_7___default","react_intl__WEBPACK_IMPORTED_MODULE_8__","className","style","_objectSpread","position","oneOf","node","ConfirmModal","e","show","handleConfirm","checked","refs","checkbox","onConfirm","onCancel","document","addEventListener","handleKeypress","removeEventListener","nextProps","cancelText","cancelButton","showCheckbox","react__WEBPACK_IMPORTED_MODULE_3___default","ref","checkboxText","cancelButtonText","react_intl__WEBPACK_IMPORTED_MODULE_5__","hideCancel","onClick","handleCancel","react_bootstrap__WEBPACK_IMPORTED_MODULE_4__","modalClass","dialogClassName","onHide","onExited","role","aria-labelledby","Header","closeButton","Title","componentClass","Body","Footer","autoFocus","confirmButtonClass","confirmButtonText","bool","func","LocalizedInput","_defineProperty","_assertThisInitialized","input","current","createRef","placeholder","context","_this$props","otherProps","_objectWithoutProperties","placeholderString","react__WEBPACK_IMPORTED_MODULE_8___default","Object","assign","shape","FormError","error","textClassName","iconClassName","margin","errors","arrayOf","_iteratorNormalCompletion","_didIteratorError","_iteratorError","_step","_iterator","Symbol","iterator","done","err","return","react__WEBPACK_IMPORTED_MODULE_4___default","d","openModal","closeModal","utils_constants__WEBPACK_IMPORTED_MODULE_0__","modalData","MODAL_OPEN","modalId","dialogProps","dialogType","MODAL_CLOSE","BotBadge","react__WEBPACK_IMPORTED_MODULE_0__","react__WEBPACK_IMPORTED_MODULE_0___default","n","prop_types__WEBPACK_IMPORTED_MODULE_1__","prop_types__WEBPACK_IMPORTED_MODULE_1___default","react_intl__WEBPACK_IMPORTED_MODULE_2__","_badge_jsx__WEBPACK_IMPORTED_MODULE_3__","propTypes","defaultProps","SettingItemMax","shiftEnter","keyCode","KeyCodes","ENTER","shiftKey","isKeyPressed","submit","target","tagName","parentElement","classList","contains","settingList","handleSubmit","preventDefault","setting","updateSection","section","focusableElements","querySelectorAll","onKeyDown","clientError","serverError","extraInfo","hintClass","infoPosition","components_save_button_jsx__WEBPACK_IMPORTED_MODULE_5__","saveButtonText","saving","disabled","widthClass","inputs","width","listContent","react_intl__WEBPACK_IMPORTED_MODULE_4__","containerStyle","tabIndex","submitExtra","handleUpdateSection","oneOfType","element","getLastPostsApiTimeForChannel","views","lastGetPosts","checkAndSetMobileView","UPDATE_MOBILE_VIEW","isMobile","goToLastViewedChannel","currentChannel","channelsInTeam","channelToSwitchTo","getCurrentChannel","getChannelsNameMapInCurrentTeam","getLastViewedChannelName","getRedirectChannelNameForTeam","switchToChannelById","getChannel","teamUrl","gmChannel","getCurrentRelativeTeamUrl","display_name","getUserByUsername","openDirectChannelToUserId","GM_CHANNEL","_x6","joinChannelById","_ref4","_callee4","currentTeamId","_context4","joinChannel","_x7","_x8","leaveChannel","_ref5","_callee5","myPreferences","_ref6","_context5","getMyPreferences","isFavoriteChannel","unfavoriteChannel","removePreviousChannelName","leaveChannelRedux","_x9","_x10","autocompleteUsersInChannel","prefix","_ref7","_callee6","_context6","autocompleteUsers","_x11","_x12","loadUnreads","_ref8","_callee7","time","_ref9","_context7","PostActions","atLatestMessage","atOldestmessage","INCREASE_POST_VISIBILITY","amount","order","next_post_id","RECEIVED_POSTS_FOR_CHANNEL_AT_TIME","prev_post_id","_x13","loadPostsAround","focusedPostId","_ref10","_callee8","_ref11","_context8","Posts","POST_CHUNK_SIZE","_x14","loadLatestPosts","_ref12","_callee9","_ref13","_context9","_x15","loadPosts","_ref14","postId","_ref15","_callee10","POST_INCREASE_AMOUNT","page","result","_context10","LOADING_POSTS","PostRequestTypes","BEFORE_ID","moreToLoad","_x16","syncPostsInChannel","since","_ref16","_callee11","socketStatus","sinceTimeToGetPosts","lastPostsApiCallForChannel","_ref17","_context11","getSocketStatus","lastDisconnectAt","_x17","_x18","scrollPostListToBottom","EventEmitter","emit","EventTypes","POST_LIST_SCROLL_CHANGE","scrollPostList","Provider","latestPrefix","latestComplete","disableDispatches","requestStarted","pretext","Suggestion","handleClick","bind","item","term","matchedPretext","isSelection","_menu_item_jsx__WEBPACK_IMPORTED_MODULE_2__","MenuItemActionImpl","ariaLabel","extraText","aria-label","MenuItemAction","menuItem","displayName","getPreviousActiveSection","settings","previousActiveSection","updateActiveSection","newActiveSection","UPDATE_ACTIVE_SECTION","SettingItemMin","edit","editButton","describeSection","disableOpen","react_default","getEdit","edit_icon","describe","index_es","SaveButton","savingMessage","btnClass","extraClasses","savingMessageComponent","defaultMessageComponent","components_widgets_loading_loading_wrapper_jsx__WEBPACK_IMPORTED_MODULE_10__","loading","doGetState","prefDirect","prefOpenTime","getDirectChannelName","ChannelActions","trackEvent","category","Preferences","CATEGORY_DIRECT_CHANNEL_SHOW","CATEGORY_CHANNEL_OPEN_TIME","toString","PreferenceTypes","RECEIVED_PREFERENCES","savePreferences","openGroupChannelToUserIds","userIds","getCurrentTeamUrl","loadChannelsForCurrentUser","unreads","getUnreadChannelIds","DM_CHANNEL","loadNewDMIfNeeded","loadNewGMIfNeeded","t0","finish","searchMoreChannels","myMembers","channels","Error","getMyChannelMemberships","filter","c","autocompleteChannels","_autocompleteChannels","server_error_id","autocompleteChannelsForSearch","_autocompleteChannelsForSearch","addUsersToChannel","requests","map","uId","Promise","all","LoadingWrapper","children","_loading_spinner_jsx__WEBPACK_IMPORTED_MODULE_4__","Menu","observer","disconnect","slice","prevWasDivider","isAtBeginning","child","display","_iteratorNormalCompletion2","_didIteratorError2","_iteratorError2","_step2","_iterator2","reverse","observe","attributes","childList","subtree","MutationObserver","hideUnneededDividers","getBoundingClientRect","openUp","openLeft","customStyles","styles","left","right","bottom","top","Markdown","enableFormatting","options","autolinkedUrlSchemes","siteURL","mentionKeys","atMentions","channelNamesMap","proxyImages","hasImageProxy","minimumHashtagLength","htmlFormattedText","TextFormatting","messageHtmlToComponent","isRHS","imageProps","imagesMetadata","hasPluginTooltips","array","number","getChannelNamesMap","createSelector","channelMentions","ownProps","getAutolinkedUrlSchemes","getBool","CATEGORY_ADVANCED_SETTINGS","getCurrentUserMentionKeys","getSiteURL","getCurrentTeam","HasImageProxy","parseInt","MinimumHashtagLength","ANIMATION_DURATION","MenuWrapperAnimation","nodeStyler","styler","chain","action","update","complete","tween","from","opacity","to","duration","start","set","CSSTransition","in","classNames","enter","exit","mountOnEnter","unmountOnExit","onEntering","onExiting","timeout","MenuWrapper","menu_wrapper_classCallCheck","Array","isArray","menu_wrapper_getPrototypeOf","menu_wrapper_defineProperty","menu_wrapper_assertThisInitialized","ESCAPE","close","TAB","closeOnBlur","open","setState","onToggle","newState","keyboardClose","Animation","animationComponent","toggle","any","LoadingSpinner","canUploadFiles","enableFileAttachments","EnableFileAttachments","enableMobileFileUpload","EnableMobileFileUpload","UserAgent","canDownloadFiles","EnableMobileFileDownload","trimFilename","filename","trimmedFilename","MAX_FILENAME_LENGTH","Math","min","getFileTypeFromMime","mimetype","mimeTypeSplitBySlash","split","mimeTypePrefix","mimeTypeSuffix","includes","getExifOrientation","view","DataView","getUint16","byteLength","offset","marker","getUint32","little","tags","i","getOrientationStyles","orientation","_exif2css","exif2css","transform","transformOrigin","WarningIcon","additionalClassName","ProfilePicture","overlay","hide","profileSrc","src","profileIconClass","isEmoji","trigger","placement","rootClose","components_profile_popover__WEBPACK_IMPORTED_MODULE_5__","isBusy","hideProfilePopover","hasMention","alt","height","components_status_icon__WEBPACK_IMPORTED_MODULE_6__","status","wrapperClass","setModalSearchTerm","SearchTypes","SET_MODAL_SEARCH","setSystemUsersSearch","SET_SYSTEM_USERS_SEARCH","Pluggable","pluggableName","Children","only","components","childrenProps","componentName","getComponentName","Reflect","deleteProperty","hasOwnProperty","pluginComponents","pluggableId","content","p","PluginComponent","component","theme","Fragment","cloneElement","plugins","getTheme","GlobeIcon","react__WEBPACK_IMPORTED_MODULE_2___default","react_intl__WEBPACK_IMPORTED_MODULE_3__","viewBox","stroke","strokeWidth","fill","fillRule","LockIcon","LICENSE_EXPIRY_NOTIFICATION","LICENSE_GRACE_PERIOD","isLicensePastGracePeriod","license","getLicense","IsLicensed","ExpiresAt","AnnouncementBar","handleClose","announcementBarCount","body","getAttribute","add","setAttribute","remove","barClass","barStyle","linkStyle","color","textColor","backgroundColor","AnnouncementBarTypes","DEVELOPER","CRITICAL","SUCCESS","showCloseButton","formatted_markdown_message","announcementTooltip","Tooltip","OverlayTrigger","delayShow","OVERLAY_TIME_DELAY","localStoragePrefix","TextDismissableBar","text_dismissable_bar_classCallCheck","text_dismissable_bar_getPrototypeOf","text_dismissable_bar_defineProperty","text_dismissable_bar_assertThisInitialized","allowDismissal","localStorage","setItem","dismissed","onDismissal","getItem","extraProps","announcement_bar_AnnouncementBar","handleDismiss","singleline","mentionHighlight","ConfigurationAnnouncementBar","dismissNotice","AnnouncementBarMessages","LICENSE_EXPIRING","canViewSystemErrors","renewalLink","RENEWAL_LINK","totalUsers","LICENSE_EXPIRED","link","isLicenseExpiring","dismissedExpiringLicense","dismissExpiringLicense","ANNOUNCEMENT","date","LICENSE_PAST_GRACE","SendEmailNotifications","EnablePreviewModeBanner","emailMessage","PREVIEW_MODE","text_dismissable_bar_TextDismissableBar","SiteURL","EnableSignUpWithGitLab","siteURLMessage","Boolean","notice","hasBeenDismissed","ConfigurationBar","VersionBar","version_bar_classCallCheck","version_bar_getPrototypeOf","version_bar_defineProperty","version_bar_assertThisInitialized","window","location","reload","serverVersionOnAppLoad","serverVersion","equalServerVersions","reloadPage","entities","general","AnnouncementBarController","adminConfiguredAnnouncementBar","EnableBanner","BannerText","trim","BannerColor","BannerTextColor","AllowBannerDismissal","errorBar","latestError","dismissError","version_bar","configuration_bar","email","email_verified","haveISystemPermission","permission","Permissions","MANAGE_SYSTEM","getCurrentUser","getDisplayableErrors","admin","analytics","TOTAL_USERS","dismissFirstError","getStandardAnalytics","SpinnerButton","spinning","spinningText","components_widgets_loading_loading_wrapper_jsx__WEBPACK_IMPORTED_MODULE_9__","SuggestionBox","mentionKey","insertText","test","addTextAtCaret","getInput","getDOMNode","recalculateSize","delay","setTimeout","preventSuggestionListCloseFlag","container","relatedTarget","handleEmitClearSuggestions","focused","onBlur","openOnFocus","openWhenEmpty","textbox","getTextbox","selectionEnd","requiredCharacters","handlePretextChanged","onFocus","toLowerCase","composing","onChange","onComposition","selectionStart","caret","keepPretext","endsWith","termWithoutMatched","overlap","findOverlap","newValue","suffix","requestAnimationFrame","replaceAllInputOnSelect","replaceText","onItemSelected","items","terms","providers","provider","handleCompleteWord","setSelectionByDelta","delta","selectionIndex","indexOf","selection","cleared","some","hasSuggestions","UP","selectPrevious","DOWN","selectNext","completeOnTab","clearTimeout","timeoutId","nonDebouncedPretextChanged","presentationType","stopPropagation","suggestions","newComponents","newPretext","_this$handleReceivedS","handleReceivedSuggestions","handled","callback","handleReceivedSuggestionsAndComplete","allowDividers","SEARCH_TIMEOUT_MILLISECONDS","debouncedPretextChanged","blur","handleFocusIn","handleFocusOut","suggestionReadOut","b","aLower","bLower","listenForMentionKeyClick","addListener","handleMentionKeyClick","removeListener","prevProps","contextId","listComponent","dateComponent","listStyle","renderNoResults","renderDividers","SuggestionListComponent","SuggestionDateComponent","react__WEBPACK_IMPORTED_MODULE_10___default","setContainerRef","containerClass","aria-live","components_quick_input_jsx__WEBPACK_IMPORTED_MODULE_12__","autoComplete","onInput","handleChange","onCompositionStart","handleCompositionStart","onCompositionUpdate","handleCompositionUpdate","onCompositionEnd","handleCompositionEnd","handleKeyDown","ariaLiveRef","onCompleteWord","preventClose","preventSuggestionListClose","SuggestionList","getContent","scrollToItem","currentLabel","currentItem","isEmptyObject","generateLabel","removeLabel","innerHTML","first_name","last_name","nickname","announceLabel","$","ReactDOM","findDOMNode","visibleContentHeight","clientHeight","scrollHeight","contentTop","scrollTop","contentTopPadding","css","contentBottomPadding","itemTop","offsetTop","itemBottomMargin","itemBottom","react_intl__WEBPACK_IMPORTED_MODULE_6__","components_formatted_markdown_message__WEBPACK_IMPORTED_MODULE_8__","lastType","renderDivider","components_widgets_loading_loading_spinner_jsx__WEBPACK_IMPORTED_MODULE_9__","mainClass","contentClass","onMouseDown","removeUserFromTeamAndGetStats","response","TeamActions","getUser","addUserToTeamFromInvite","token","inviteId","TeamTypes","RECEIVED_MY_TEAM_MEMBER","msg_count","mention_count","addUserToTeam","addUsersToTeam","switchTeam","url","viewChannel","SystemPermissionGate","hasPermission","invert","permissions","MultiSelectList","defaultOptionRenderer","handleArrowPress","setSelected","toSelect","selected","onSelect","_","prevState","list","elemTop","elemBottom","listTop","scrollIntoView","cmdOrCtrlPressed","max","option","isSelected","onAdd","rowSelected","label","renderOutput","_this2","aria-hidden","loading_screen","optionRenderer","optionControls","o","selectedOption","ariaLabelRenderer","perPage","onAction","onPageChange","MultiSelect","multiselect_classCallCheck","multiselect_getPrototypeOf","multiselect_assertThisInitialized","a11yActive","handlePageChange","maxValues","handleAdd","reactSelect","select","handleInputChange","currentTarget","submitImmediatelyOn","change","handleInput","_toConsumableArray","removedValue","splice","handleDelete","handleEnterPress","inputRef","A11yCustomEventTypes","ACTIVATE","handleA11yActivateEvent","DEACTIVATE","handleA11yDeactivateEvent","numRemainingText","buttonSubmitText","totalCount","users","num","nextButton","previousButton","noteTextContainer","optionsToDisplay","noteText","memberCount","valueMap","pageStart","pageEnd","nextPage","prevPage","memberOptions","react_select_esm","isMulti","nullComponent","IndicatorsContainer","MultiValueLabel","paddedComponent","valueRenderer","isClearable","openMenuOnFocus","menuIsOpen","onInputChange","onInputKeyDown","placeholderText","inputValue","getOptionValue","getOptionLabel","save_button","handleOnClick","buttonSubmitLoadingText","multiselect_list_MultiSelectList","WrappedComponent","paddingRight","paddingLeft","borderRight","verticalAlign","control","base","borderRadius","borderColor","minHeight","&:hover","boxShadow","multiValue","whiteSpace","border","multiValueRemove",":hover","ArchiveIcon","SuccessIcon","isModalOpen","modals","modalState","AddIcon","TeamPermissionGate","haveITeamPermission","utils_constants_jsx__WEBPACK_IMPORTED_MODULE_0__","TOGGLE_LHS","OPEN_LHS","CLOSE_LHS","MAX_WEBSOCKET_FAILS","pluginEventHandlers","initialize","WebSocket","connUrl","WebsocketURL","URL","protocol","host","WebsocketSecurePort","WebsocketPort","Client4","getUrlVersion","setEventCallback","handleEvent","setFirstConnectCallback","handleFirstConnect","setReconnectCallback","reconnect","setMissedEventCallback","setCloseCallback","console","log","pluginReconnectHandlers","registerPluginReconnectHandler","pluginId","handler","unregisterPluginReconnectHandler","GeneralTypes","WEBSOCKET_SUCCESS","loadPluginsIfNecessary","forEach","teams","currentChannelId","mostRecentId","getMostRecentPostIdInChannel","mostRecentPost","getPost","getPosts","StatusActions","websocket","checkForModifiedUsers","resetWsErrorCount","clearErrors","intervalId","SYNC_INTERVAL_MILLISECONDS","startPeriodicSync","clearInterval","setInterval","stopPeriodicSync","registerPluginWebSocketEvent","event","unregisterPluginWebSocketEvent","events","unregisterAllPluginWebSocketEvents","failCount","logError","WEBSOCKET_PORT_ERROR","WEBSOCKET_FAILURE","incrementWsErrorCount","msg","SocketEvents","POSTED","EPHEMERAL_MESSAGE","handleNewPostEventDebounced","POST_EDITED","JSON","parse","receivedPost","getProfilesAndStatusesForPosts","broadcast","isActive","handlePostEditEvent","POST_DELETED","postDeleted","handlePostDeleteEvent","LEAVE_TEAM","UserTypes","RECEIVED_PROFILE_NOT_IN_TEAM","REMOVE_MEMBER_FROM_TEAM","global","pathname","startsWith","GlobalActions","handleLeaveTeamEvent","UPDATE_TEAM","UPDATED_TEAM","handleUpdateTeamEvent","DELETE_TEAM","deletedTeam","_state$entities$teams","teamMembers","teamMember","find","m","newTeamId","memberTeamId","RECEIVED_TEAM_DELETED","SELECT_TEAM","globalState","redirectChannel","handleDeleteTeamEvent","ADDED_TO_TEAM","handleTeamAddedEvent","USER_ADDED","RECEIVED_PROFILE_IN_CHANNEL","getChannelAndMyMember","handleUserAddedEvent","USER_REMOVED","rhsChannelId","getSelectedChannelId","remover_id","ModalIdentifiers","REMOVED_FROM_CHANNEL","RemovedFromChannelModal","remover","LEAVE_CHANNEL","RECEIVED_PROFILE_NOT_IN_CHANNEL","handleUserRemovedEvent","USER_UPDATED","currentUser","getMe","RECEIVED_PROFILE","handleUserUpdatedEvent","ROLE_ADDED","RoleTypes","RECEIVED_ROLE","handleRoleAddedEvent","ROLE_REMOVED","ROLE_DELETED","handleRoleRemovedEvent","MEMBERROLE_UPDATED","handleUpdateMemberRoleEvent","ROLE_UPDATED","handleRoleUpdatedEvent","CHANNEL_CREATED","handleChannelCreatedEvent","CHANNEL_DELETED","viewArchivedChannels","ExperimentalViewArchivedChannels","RECEIVED_CHANNEL_DELETED","deleteAt","handleChannelDeletedEvent","CHANNEL_CONVERTED","RECEIVED_CHANNEL","General","PRIVATE_CHANNEL","handleChannelConvertedEvent","CHANNEL_UPDATED","replace","handleChannelUpdatedEvent","CHANNEL_MEMBER_UPDATED","channelMember","RECEIVED_MY_CHANNEL_MEMBER","handleChannelMemberUpdatedEvent","DIRECT_ADDED","handleDirectAddedEvent","PREFERENCE_CHANGED","preference","addedNewDmUser","handlePreferenceChangedEvent","PREFERENCES_CHANGED","preferences","findIndex","handlePreferencesChangedEvent","PREFERENCES_DELETED","DELETED_PREFERENCES","handlePreferencesDeletedEvent","TYPING","WebsocketEvents","STOP_TYPING","getMissingProfilesByIds","getStatusForUserId","ONLINE","getStatusesByIds","handleUserTypingEvent","STATUS_CHANGED","RECEIVED_STATUSES","handleStatusChangedEvent","HELLO","setServerVersion","server_version","handleHelloEvent","REACTION_ADDED","reaction","getCustomEmojiForReaction","emoji_name","RECEIVED_REACTION","handleReactionAddedEvent","REACTION_REMOVED","REACTION_DELETED","handleReactionRemovedEvent","EMOJI_ADDED","emoji","EmojiTypes","RECEIVED_CUSTOM_EMOJI","handleAddEmoji","CHANNEL_VIEWED","handleChannelViewedEvent","PLUGIN_ENABLED","manifest","loadPlugin","handlePluginEnabled","PLUGIN_DISABLED","removePlugin","handlePluginDisabled","USER_ROLE_UPDATED","profiles","roles","demoted","PERMISSIONS_SYSTEM_ADMIN","handleUserRoleUpdated","CONFIG_CHANGED","CLIENT_CONFIG_RECEIVED","handleConfigChanged","LICENSE_CHANGED","CLIENT_LICENSE_RECEIVED","handleLicenseChanged","PLUGIN_STATUSES_CHANGED","AdminTypes","RECEIVED_PLUGIN_STATUSES","plugin_statuses","handlePluginStatusesChangedEvent","OPEN_DIALOG","dialog","IntegrationTypes","RECEIVED_DIALOG","currentTriggerId","integrations","dialogTriggerId","trigger_id","INTERACTIVE_DIALOG","InteractiveDialog","handleOpenDialogEvent","pluginEvents","wait","queue","count","triggered","myDispatch","myGetState","posts","receivedNewPost","getThreadsForPosts","handleNewPostEvents","fromAutoResponder","UserStatuses","handleNewPostEvent","SizeAwareImage","mounted","image","onImageLoaded","naturalHeight","naturalWidth","loaded","onImageLoadFail","showLoader","components_loading_image_preview__WEBPACK_IMPORTED_MODULE_12__","placeHolder","dimensions","fileInfo","imageStyleChangesOnLoad","ariaLabelImage","localizeMessage","maxWidth","xmlns","maxHeight","visibility","overflow","onEnterKeyDown","onError","handleError","onLoad","handleLoad","heightTimeout","renderImageLoaderIfNeeded","renderImageOrPlaceholder","MenuItem","_React$PureComponent","icon","textProp","SearchIcon","cx","cy","strokeLinecap","BackIcon","ModalToggleButton","clickHandler","StatusAwayAvatarIcon","clipRule","strokeLinejoin","strokeMiterlimit","StatusAwayIcon","StatusDndAvatarIcon","x","y","rx","ry","enableBackground","StatusDndIcon","StatusOfflineIcon","StatusOnlineAvatarIcon","StatusOnlineIcon","StatusIcon","button","IconComponent","StatusOfflineAvatarIcon","ExternalImage","imageMetadata","format","enableSVGs","isSVGImage","getImageSrc","shouldRenderImage","EnableSVGs","promises","resolvedPromises","getClientConfig","getLicenseConfig","cookie","UserActions","t1","pluginTranslationSources","registerPluginTranslationsSource","sourceFunction","immutableTranslations","getTranslations","translations","copyAndDispatchTranslations","unregisterPluginTranslationsSource","loadTranslations","pluginFunc","serverTranslations","en","RECEIVED_TRANSLATIONS","Actions","defaultValue","Selectors","isLocalStorageSupported","logoutId","StoragePrefixes","sessionStorage","LOGOUT","removeItem","loginId","LOGIN","hasCheckedLocalStorage","localStorageSupported","ErrorPageTypes","LOCAL_STORAGE","LANDING_PAGE_SEEN","landingPageSeen","sort","localeCompare","numeric","compareTeamsByDisplayName","module","exports","MenuGroup","divider","MenuIcon","version","LatexBlock","katex","html","renderToString","throwOnError","displayMode","MarkdownImage","external_image","safeSrc","size_aware_image","rel","PostEmoji","emojiText","imageUrl","backgroundImage","getEmojiMap","get","getEmojiImageUrl","parser","Parser","processNodeDefinitions","ProcessNodeDefinitions","processingInstructions","replaceChildren","shouldProcessNode","attribs","processNode","link_tooltip","mentions","mentionName","at_mention","emojiName","post_emoji","images","_node$attribs","class","message_html_to_component_objectWithoutProperties","latex","latex_block_LatexBlock","processDefaultNode","parseWithInstructions","ModalToggleButtonRedux","_this$props2","accessibilityLabel","data-toggle","holders","defineMessages","security","notifications","sidebar","advanced","checkEmail","confirmTitle","confirmMsg","confirmBtns","UserSettingsModal","resendStatus","sendVerificationEmail","A","handleHide","requireConfirm","showConfirmModal","active_tab","active_section","modalBodyRef","closest","removeClass","enforceFocus","customConfirmAction","afterConfirm","collapseModal","handleCollapse","tab","skipConfirm","updateTab","perfectScrollbar","tabs","uiName","iconTitle","Modal","handleHidden","async_load","doLoad","loadSettingsSidebar","activeTab","loadUserSettings","activeSection","setEnforceFocus","setRequireConfirm","confirm_modal","handleCancelConfirmation","isRequred","closeUnusedDirectMessages","CloseUnusedDirectMessages","experimentalChannelOrganization","ExperimentalChannelOrganization","sendEmailNotifications","requireEmailVerification","RequireEmailVerification","GROUPS_PER_PAGE","AddGroupsToTeamModal","addError","groupIDs","v","skipCommit","onAddCallback","groupID","linkGroupSyncable","Groups","SYNCABLE_TYPE_TEAM","auto_add","handleResponse","loadingState","loadingGroups","setGroupsLoadingState","getGroupsNotAssociatedToTeam","searchTerm","searchTimeoutId","search","getAllGroupsAssociatedToTeam","_this3","groupsAvatar","add_icon","_this4","groupsToShow","groups","excludeGroups","og","g","includeGroups","handleExit","teamName","currentTeamName","multiselect","renderOption","renderValue","addValue","modalSearch","selectGroupsNotAssociatedToTeam","regex","RegExp","group","AddGroupsToChannelModal","SYNCABLE_TYPE_CHANNEL","getGroupsNotAssociatedToChannel","getAllGroupsAssociatedToChannel","currentChannelName","selectGroupsNotAssociatedToChannel","FileInfoPreview","fileUrl","infoParts","extension","toUpperCase","size","infoString","join","preview","getPenultimateViewedChannelName","getLastViewedChannelNameByTeamName","mattermost_redux_selectors_entities_teams__WEBPACK_IMPORTED_MODULE_0__","mattermost_redux_selectors_entities_users__WEBPACK_IMPORTED_MODULE_1__","stores_local_storage_store__WEBPACK_IMPORTED_MODULE_2__","localStorageStore","getPenultimateChannelName","getTeamByName","UserSuggestion","description","baseProps","getUsersRoute","last_picture_update","components_widgets_badges_bot_badge_jsx__WEBPACK_IMPORTED_MODULE_7__","is_bot","UserProvider","resultsCallback","normalizedPretext","startNewRequest","shouldCancelDispatch","Badge","QuickInput","delayInputUpdate","updateInputFromProps","inputComponent","setInput","PayloadSources","Flux","handleServerAction","warn","payload","source","SERVER_ACTION","VIEW_ACTION","DISMISS_NOTICE","MattermostLogo","background","st0","components_toggle_modal_button_redux__WEBPACK_IMPORTED_MODULE_2__","_menu_item_jsx__WEBPACK_IMPORTED_MODULE_3__","MenuItemToggleModalReduxImpl","MenuItemToggleModalRedux","getMembershipForCurrentEntities","selectedPost","getSelectedPost","exists","getTeamMember","getChannelMember","SearchChannelWithPermissionsSuggestion","channelIsArchived","archive_icon","OPEN_CHANNEL","globe_icon","lock_icon","_get","channelSearchSorter","wrappedA","wrappedB","aIsArchived","bIsArchived","getCurrentUserLocale","aDisplayName","bDisplayName","aStartsWith","bStartsWith","sortChannelsByTypeAndDisplayName","SearchChannelWithPermissionsProvider","channelPrefix","channelPrefixLower","searchString","haveIChannelPermission","MANAGE_PUBLIC_CHANNEL_MEMBERS","MANAGE_PRIVATE_CHANNEL_MEMBERS","getChannelsInCurrentTeam","formatChannelsAndDispatch","fetchChannels","channelsAsync","channelsFromServer","allChannels","members","completedChannels","channelFilter","makeChannelSearchFilter","_i","_Object$keys","keys","newChannel","wrappedChannel","deactivated","AddUserToChannelModal","add_user_to_channel_modal_classCallCheck","add_user_to_channel_modal_getPrototypeOf","add_user_to_channel_modal_defineProperty","add_user_to_channel_modal_assertThisInitialized","suggestionProviders","channelSearchBox","activeElement","placeCaretAtEnd","selectedChannelId","focusTextbox","submitError","checkingForMembership","isUserMemberOfChannel","addChannelMember","handleSubmitError","memberships","channelMembers","enableChannelProvider","errorMsg","targetUserIsMemberOfSelectedChannel","getFullName","help","suggestion_box","setSearchBoxRef","didSelectChannel","maxLength","shouldDisableAddButton","onSubmit","getChannelMembersInChannels","ProfilePopover","profile_popover_classCallCheck","profile_popover_getPrototypeOf","handleShowDirectChannel","profile_popover_assertThisInitialized","handleEditAccountSettings","loadingDMChannel","ModalId","USER_SETTINGS","popoverProps","hideStatus","enableTimezone","isTeamAdmin","isChannelAdmin","canManageAnyChannelMembersInCurrentTeam","dataContent","fullname","bot_description","MAX_POSITION_LENGTH","roleTitle","pluggable","timezone","local_date_time","userTimezone","isInCurrentTeam","addToChannelMessage","toggle_modal_button_redux","ADD_USER_TO_CHANNEL","Popover","OFFLINE","scheme_admin","areTimezonesEnabledAndSupported","notices","adminOnly","mattermostIcon","allowForget","InstallationDate","getTime","IssuedAt","Cluster","ServerVersion","SystemNotice","dismissedNotices","isSystemAdmin","remind","getCurrentNotice","CATEGORY_SYSTEM_NOTICE","visibleMessage","mattermost_logo","hideAndRemind","hideAndForget","getCategory","makeGetCategory","getPreferenceNameMap","nameMap","Notices","WebClient","conn","connectionUrl","sequence","eventSequence","connectFailCount","eventCallback","responseCallbacks","firstConnectCallback","reconnectCallback","missedEventCallback","errorCallback","closeCallback","onopen","sendMessage","onclose","retryTime","onerror","evt","onmessage","seq_reply","seq","readyState","OPEN","responseCallback","send","stringify","CLOSED","userIsActive","manual","user_is_active","user_ids","MenuActionSuggestion","react__WEBPACK_IMPORTED_MODULE_6___default","MenuActionProvider","displayAllOptions","filterOptions","filteredOptions","ChannelSuggestion","purpose","ChannelProvider","AutocompleteSelector","onSelected","suggestionRef","labelContent","helpTextContent","footer","labelClassName","helpText","inputClassName","components_suggestion_suggestion_box_jsx__WEBPACK_IMPORTED_MODULE_4__","setSuggestionRef","handleSelected","cb","require","oe","popOverOverlayPosition","targetBounds","innerHeight","spaceRequiredOptions","above","below","LoadingImagePreview","prop_types__WEBPACK_IMPORTED_MODULE_0__","prop_types__WEBPACK_IMPORTED_MODULE_0___default","react__WEBPACK_IMPORTED_MODULE_1__","react__WEBPACK_IMPORTED_MODULE_1___default","components_widgets_loading_loading_spinner_jsx__WEBPACK_IMPORTED_MODULE_2__","progress","progressView","checkIfMFARequired","PAGE_NOT_FOUND","mfaPaths","mfaAuthServices","path","MFA","EnableMultifactorAuthentication","EnforceMultifactorAuthentication","mfa_active","auth_service","isServerVersionGreaterThanOrEqualTo","currentVersion","compareVersion","currentVersionNumber","exec","compareVersionNumber","AutosizeTextarea","reference","textarea","getComputedStyle","borderWidth","borderTopWidth","borderBottomWidth","String","onHeightChange","heightProps","rows","textareaPlaceholder","placeholderAriaLabel","react__WEBPACK_IMPORTED_MODULE_9___default","textOverflow","pointerEvents","EditIcon","SettingPicture","removeSrc","setDefaultSrc","confirmButton","onRemove","onSetDefault","focusFirstElement","onFileChange","selectInput","click","file","previewBlob","createObjectURL","reader","FileReader","onload","FileUtils","orientationStyles","readAsArrayBuffer","imageContext","imageStyles","defaultImageSrc","imageElement","handleRemoveSrc","handleSetDefaultSrc","react_bootstrap__WEBPACK_IMPORTED_MODULE_9__","react_bootstrap__WEBPACK_IMPORTED_MODULE_10__","handleFileSelected","setPicture","revokeObjectURL","imgRender","img","renderImg","disableSaveButtonFocus","submitActive","components_formatted_markdown_message_jsx__WEBPACK_IMPORTED_MODULE_16__","fileSizeToString","maxFileSize","aria-describedby","components_form_error_jsx__WEBPACK_IMPORTED_MODULE_15__","accept","handleFileChange","loadingPicture","handleInputFile","handleSave","components_widgets_loading_loading_wrapper_jsx__WEBPACK_IMPORTED_MODULE_14__","MenuItemExternalLinkImpl","MenuItemExternalLink","UserListRow","buttons","Action","index","actionProps","actionUserProps","emailStyle","userCountID","userCountEmail","userCount","profile_picture","getProfilePictureUrl","bot_badge","UserList","user_list_classCallCheck","user_list_getPrototypeOf","scrollToTop","user_list_assertThisInitialized","RowComponentType","rowComponentType","TEST_ID_COUNT","SearchableUserList","searchable_user_list_classCallCheck","searchable_user_list_getPrototypeOf","searchable_user_list_assertThisInitialized","previousPage","focusSearchBar","renderCount","nextTimeoutId","nextDisabled","userList","channelListScroll","focusOnMount","onTermChange","startCount","endCount","total","isSearch","usersPerPage","usersToDisplay","filterRow","renderFilterRow","quick_input","user_list_UserList","showTeamToggle","DialogElement","dataSource","GenericUserProvider","GenericChannelProvider","subtype","errorText","optional","_this$props3","displayNameContent","TextSetting","validTypes","text_setting","resizable","autocomplete_selector","interactive_dialog_classCallCheck","interactive_dialog_getPrototypeOf","interactive_dialog_defineProperty","interactive_dialog_assertThisInitialized","elements","callbackId","elem","checkDialogElementForError","callback_id","submission","submitting","submitInteractiveDialog","checkIfErrorsMatchElements","submitted","notifyOnCancel","cancelled","default","iconUrl","submitLabel","submitText","backdrop","borderBottom","dialog_element_DialogElement","help_text","minLength","min_length","max_length","data_source","spinner_button","icon_url","submit_label","notify_on_cancel","spaceRequiredForPopOver","AtMention","overlayRef","getUserFromMentionName","usersByUsername","Overlay","hideOverlay","profile_popover","displayUsername","teammateNameDisplay","getTeammateNameDisplaySetting","getUsersByUsername","ModalController","modalOutput","modal","modalComponent","Setting","inputId","htmlFor","resize","LocalDateTime","eventTime","timeZone","useMilitaryTime","moment","tz","timezoneProps","dateTime","toISOString","hour12","getUserTimezone","CATEGORY_DISPLAY_SETTINGS","USE_MILITARY_TIME","getUserCurrentTimezone","AboutBuildModal","doHide","licensee","termsOfService","privacyPolicy","tosPrivacyHyphen","subTitle","learnMore","BuildEnterpriseReady","Company","TermsOfServiceLink","PrivacyPolicyLink","buildnumber","BuildNumber","isNaN","mmversion","appTitle","SiteName","Version","SQLDriverName","currentYear","getFullYear","BuildHash","BuildHashEnterprise","webappBuildHash","COMMIT_HASH","BuildDate","ABOUT","dispatchPluginComponentAction","generateId","RECEIVED_PLUGIN_COMPONENT","resolveReactElement","PluginRegistry","dropdownText","tooltipText","RECEIVED_PLUGIN_POST_COMPONENT","RECEIVED_PLUGIN_POST_CARD_COMPONENT","mobileIcon","hook","componentId","REMOVED_PLUGIN_COMPONENT","REMOVED_PLUGIN_POST_COMPONENT","reducer","reducerRegistry","register","override","getTranslationsForLocale","showRHSPlugin","initializePlugins","_initializePlugins","PluginsEnabled","getPlugins","loadErr","getWebappPlugins","RECEIVED_WEBAPP_PLUGINS","registerPlugin","plugin","loadedPlugins","resolve","reject","oldManifest","webapp","bundle_path","REMOVED_WEBAPP_PLUGIN","bundlePath","script","registry","initializePlugin","getElementsByTagName","appendChild","uninitialize","deinitialize","getElementById","parentNode","removeChild","_loadPluginsIfNecessary","oldManifests","newManifests","newManifest","CreateTeam","makeAsyncComponent","loadCreateTeam","ErrorPage","loadErrorPage","TermsOfService","loadTermsOfService","LoginController","loadLoginController","AdminConsole","loadAdminConsole","LoggedIn","loadLoggedIn","PasswordResetSendLink","loadPasswordResetSendLink","PasswordResetForm","loadPasswordResetForm","SignupController","loadSignupController","SignupEmail","loadSignupEmail","ShouldVerifyEmail","loadShouldVerifyEmail","DoVerifyEmail","loadDoVerifyEmail","ClaimController","loadClaimController","HelpController","loadHelpController","GetIosApp","loadGetIosApp","GetAndroidApp","loadGetAndroidApp","SelectTeam","loadSelectTeam","Authorize","loadAuthorize","Mfa","loadMfa","LoggedInRoute","rest","react__WEBPACK_IMPORTED_MODULE_11___default","react_router_dom__WEBPACK_IMPORTED_MODULE_13__","render","isDevMode","enableDevModeFeatures","segmentKey","DIAGNOSTICS_SEGMENT_KEY","invoked","methods","factory","_len","args","_key","prototype","unshift","load","async","insertBefore","SNIPPET_VERSION","identify","ip","referrer","anonymousId","afterIntl","history","configLoaded","Intl","I18n","loadRecentlyUsedCustomEmojis","iosDownloadLink","IosAppDownloadLink","androidDownloadLink","AndroidAppDownloadLink","toResetPasswordScreen","hasSeenLandingPage","encodeURIComponent","setLandingPageSeen","currentCategoryFocus","currentSidebarFocus","setUrl","setSystemEmojis","EmojiIndicesByAlias","originalEvent","storageArea","isSignallingLogout","isSignallingLogin","FastClick","attach","a11yController","A11yController","newProps","redirectIfNecessary","onConfigLoaded","trackLoadTime","unbind","components_intl_provider__WEBPACK_IMPORTED_MODULE_28__","components_header_footer_template_route__WEBPACK_IMPORTED_MODULE_27__","NeedsTeam","INCREMENT_WS_ERROR_COUNT","RESET_WS_ERROR_COUNT","tooltipContainerStyles","flexDirection","alignItems","zIndex","LinkTooltip","hideTimeout","tooltipContainer","tooltipContainerRef","showTimeout","on","toElement","hideTooltip","popper","Popper","modifiers","preventOverflow","enabled","OVERLAY_TIME_DELAY_SMALL","createPortal","plugins_pluggable__WEBPACK_IMPORTED_MODULE_7__","onMouseOver","showTooltip","onMouseLeave","HFTRoute","react_router_dom__WEBPACK_IMPORTED_MODULE_7__","components_async_load__WEBPACK_IMPORTED_MODULE_10__","HeaderFooterTemplate","LoggedInHFTRoute","jQuery","fn","dragster","extend","noop","leave","over","drop","each","first","second","$this","dragenter","dragleave","dragover","dragster:enter","dragster:leave","dragster:over","dragster:drop","listenerOptions","capture","modifierKeys","ctrlKey","altKey","lastInputEventIsKeyboard","isMac","tabKeyIsPressed","TILDE","regions","tildeKeyIsPressed","previousRegion","nextRegion","F6","isDesktopApp","f6KeyIsPressed","navigationInProgress","sections","upArrowKeyIsPressed","shouldReverseSections","nextSection","previousSection","downArrowKeyIsPressed","cancelNavigation","enterKeyIsPressed","SPACE","nodeName","resetInterractionStates","mouseIsPressed","windowIsFocused","nextElement","updateActiveRegion","focusedElement","activeRegion","udpateCurrentFocus","updateActiveElement","regionHTMLCollection","getAllRegions","sectionHTMLCollection","modalHTMLCollection","getAllModals","popupHTMLCollection","getAllPopups","resetNavigation","KEY_DOWN","KEY_UP","handleKeyUp","CLICK","handleMouseClick","MOUSE_DOWN","handleMouseDown","MOUSE_UP","handleMouseUp","FOCUS","handleFocus","BLUR","handleWindowBlur","clearActiveRegion","clearCurrentFocus","newRegion","modalIsOpen","popupIsOpen","activeRegionIndex","setActiveRegion","setCurrentFocus","newSection","shouldLoopNavigation","getLoopNavigationAttribute","activeSectionIndex","setActiveSection","region","elementPath","pathElement","A11yClassNames","REGION","SECTION","setActiveElement","canFocusChild","isElementValid","UPDATE","handleActiveRegionUpdate","dispatchEvent","Event","getAllSectionsForRegion","getFocusChildAttribute","clearActiveSection","handleActiveSectionUpdate","clearActiveElement","handleActiveElementUpdate","ACTIVE","forceUpdate","a11yKeyIsPressed","FOCUSED","blurActiveElement","getElementsByClassName","elementA","elementB","A11yAttributeNames","SORT_ORDER","offsetParent","MODAL","POPUP","attributeValue","LOOP_NAVIGATION","ORDER_REVERSE","FOCUS_CHILD","invalidElements","domElements","sortElementsByAttributeOrder","elementIsVisible","getOrderReverseAttribute","editPost","selectAttachmentMenuAction","actionId","SELECT_ATTACHMENT_MENU_ACTION","DeletePostModal","delete_post_modal_defineProperty","delete_post_modal_asyncToGenerator","deleteAndRemovePost","deletePostBtn","commentWarning","commentCount","postTerm","onEntered","handleEntered","utils_constants","OPEN_EMBED_PAGE","SHARE","TRENDING","REACTIONS","mattermost","GifSearchIcon","GifSearchClearIcon","mapDispatchToProps","saveSearchBarText","saveSearchScrollPosition","searchTextUpdate","getStyle","makeStyleFromTheme","centerChannelBg","changeOpacity","centerChannelColor","inputBackground","SearchBar","_Component","SearchBar_classCallCheck","SearchBar_getPrototypeOf","SearchBar_defineProperty","SearchBar_assertThisInitialized","searchText","searchInput","triggerSearch","onSearch","parseSearchText","searchTimeout","onCategories","isFilteredTags","inputFocused","removeExtraSpaces","tagsList","substr","filteredTags","tag","onTrending","updateSearchInputValue","SearchBar_inherits","searchBarText","nextState","clearSearchButton","gif_search_clear_icon_GifSearchClearIcon","clearSearchHandle","method","noValidate","localized_input","autoCapitalize","focusInput","blurInput","gif_search_icon_GifSearchIcon","gifs","categories","appProps","app","GifTrendingIcon","GifReactionsIcon","header","borderBottomColor","iconActive","iconHover","_PureComponent","Header_classCallCheck","Header_possibleConstructorReturn","Header_getPrototypeOf","hovering","Header_inherits","components_SearchBar","renderTabs","constants","renderTab","Icon","onMouseOut","cursor","paddingTop","saveAppProps","App","App_classCallCheck","App_possibleConstructorReturn","App_getPrototypeOf","App_inherits","appClassName","components_Header","authenticateSdk","InfiniteScroll","InfiniteScroll_classCallCheck","InfiniteScroll_getPrototypeOf","scrollListener","InfiniteScroll_assertThisInitialized","pageLoaded","attachScrollListener","setScrollPosition","hasMore","loader","initialLoad","containerHeight","loadMore","threshold","useWindow","isReverse","scrollPosition","scrollComponent","elementProps","InfiniteScroll_objectSpread","defaultLoader","el","calculateTopPosition","scrollTo","scrollEl","pageYOffset","documentElement","offsetHeight","Number","detachScrollListener","requestCategoriesList","requestCategoriesListIfNeeded","Categories","_getPrototypeOf2","Categories_classCallCheck","Categories_getPrototypeOf","Categories_defineProperty","Categories_assertThisInitialized","gfycats","gfyId","Categories_inherits","sendImpressions","filterTagsList","gfyItem","max1mbGif","avgColor","PostUtils","Categories_objectSpread","InfiniteScroll_InfiniteScroll","cache","SearchItem","SearchItem_classCallCheck","SearchItem_possibleConstructorReturn","SearchItem_getPrototypeOf","SearchItem_inherits","itemWidth","itemClickHandler","paddingBottom","SearchItem_objectSpread","ITEMS_PADDING","NUMBER_OF_COLUMNS_PORTRAIT","NUMBER_OF_COLUMNS_LANDSCAPE","WEBKIT_SCROLLBAR_WIDTH","SearchGrid","SearchGrid_classCallCheck","SearchGrid_getPrototypeOf","SearchGrid_defineProperty","SearchGrid_assertThisInitialized","matchMedia","matches","numberOfColumns","keyword","handleItemClick","gfyid","columnsHeights","containerWidth","offsetWidth","setNumberOfColumns","SearchGrid_objectSpread","scrollY","padding","SearchGrid_inherits","resizeHandler","scrollHandler","containerClassName","resultsByTerm","moreRemaining","_ref$items","isEmpty","columnWidth","leftPosition","searchItems","colIndex","minHeightColumnIndex","itemHeight","components_SearchItem","maxColumnHeight","emptySearch","components_SearchGrid_objectSpread","searchGfycat","searchIfNeededInitial","Search","Search_classCallCheck","Search_getPrototypeOf","Search_defineProperty","Search_assertThisInitialized","Search_inherits","components_SearchGrid","Search_objectSpread","searchCategory","Trending","Trending_classCallCheck","Trending_getPrototypeOf","Trending_defineProperty","Trending_assertThisInitialized","Trending_inherits","appName","basePath","itemTapType","shareEvent","appId","enableHistory","displayText","GifPicker","gif_picker_classCallCheck","gif_picker_getPrototypeOf","shouldComponentUpdate","PureRenderMixin","gif_picker_assertThisInitialized","handleTrending","handleCategories","handleSearch","gif","onGifClick","max5mbGif","components_Categories","components_Search","components_Trending","components_App","EmojiIcon","GfycatIcon","EmojiPickerHeader","handleEmojiPickerClose","compareEmojis","emojiA","emojiB","searchedName","aName","aliases","bName","aPrefix","EmojiPickerCategory","emoji_picker_category_classCallCheck","emoji_picker_category_getPrototypeOf","emoji_picker_category_assertThisInitialized","enable","onCategoryClick","EMOJI_LAZY_LOAD_SCROLL_THROTTLE","EmojiPickerItem","emojiItem","onItemOver","categoryIndex","emojiIndex","debounce","handleMouseOver","leading","trailing","onItemClick","topOfTheEmojiItem","bottomOfTheEmojiItem","containerRef","containerTop","containerBottom","itemClassName","spriteClassName","batch","handleMouseOverThrottle","imgTrans","emojiItemRef","EmojiPickerCategorySection","div","updateCategoryOffset","categoryName","divRef","EmojiPickerPreview","previewImage","EMOJI_CONTAINER_STYLE","SYSTEM_EMOJIS_COUNT","CATEGORIES","recent","people","nature","foods","activity","places","objects","symbols","flags","custom","getEmojiFilename","EMOJIS_PER_PAGE","EmojiPicker","emoji_picker_classCallCheck","emoji_picker_getPrototypeOf","emoji_picker_defineProperty","emoji_picker_assertThisInitialized","emoji_picker_asyncToGenerator","customEmojisEnabled","loadingMoreEmojis","getCustomEmojis","customEmojiPage","missingPages","incrementEmojiPickerPage","lastVisibleEmoji","emojiPickerContainer","emojis","currentEmojiLoadedCount","_this$state","emojisToShow","numEmojisLoaded","lastVisibleEmojiRef","emoji_picker_item_EmojiPickerItem","handleItemOver","onItemUnmount","divTopOffset","divHeight","handleCategoryClick","handleFilterChange","handleCategoryKeyDown","handleScroll","handleScrollThrottle","throttle","allEmojis","loadMoreCustomEmojis","getEmojis","difference","numToLoad","ceil","emojiMap","visible","searchCustomEmojis","onEmojiClick","selectNextEmoji","selectPrevEmoji","getCurrentEmojiByCursor","newCursor","newCategory","getCategoryByIndex","lastVisibleEmojiInNewCategory","emojiIds","getCategoriesByKey","getEmojisByCategory","recentEmojisProps","recentEmojis","emojisMinusRecent","emojiArray","sortEmojisHelper","sortEmojis","emojiId","_this$state2","customEmojiMap","customEmojis","categoryEmojis","emoji_picker_toConsumableArray","has","Emoji","currentEmoji","fileName","emoji_picker_objectSpread","currentCategoryName","_this5","categoryKeys","getCurrentEmojiCategoryName","emojiPickerCategories","emoji_picker_category_EmojiPickerCategory","_this6","emojiSearchInput","categoryComponents","emojiCurrentResultsItems","emoji_picker_category_section_EmojiPickerCategorySection","emojiPickerContainerRef","onScroll","getCurrentEmojiName","emojiSearch","emojiCategories","emojiCurrentResults","emoji_picker_preview_EmojiPickerPreview","listHeight","onEmojiClose","EnableCustomEmoji","emojiPickerCustomPage","getRecentEmojis","EmojiPickerTabs","emoji_picker_tabs_classCallCheck","emoji_picker_tabs_getPrototypeOf","emoji_picker_tabs_defineProperty","emoji_picker_tabs_assertThisInitialized","emojiTabVisible","pickerStyle","rightOffset","emoji_picker_tabs_objectSpread","topOffset","pickerClass","enableGifPicker","Tabs","defaultActiveKey","justified","emoji_picker_header_EmojiPickerHeader","Tab","eventKey","onEnter","handleEnterEmojiTab","onExit","handleExitEmojiTab","emoji_icon_EmojiIcon","emoji_picker","gfycat_icon_GfycatIcon","gif_picker_GifPicker","EmojiPickerOverlay","emoji_picker_overlay_classCallCheck","emoji_picker_overlay_possibleConstructorReturn","emoji_picker_overlay_getPrototypeOf","DEFAULT_EMOJI_PICKER_RIGHT_OFFSET","spaceRequiredAbove","spaceRequiredBelow","emojiPickerPosition","emojiTrigger","innerWidth","DEFAULT_EMOJI_PICKER_LEFT_OFFSET","animation","emoji_picker_tabs_EmojiPickerTabs","CENTER_SPACE_REQUIRED_ABOVE","CENTER_SPACE_REQUIRED_BELOW","typeMessage","last_users_defineProperty","_typeMessage","POST_TYPES","ADD_TO_CHANNEL","JOIN_CHANNEL","REMOVE_FROM_CHANNEL","ADD_TO_TEAM","JOIN_TEAM","REMOVE_FROM_TEAM","LastUsers","last_users_classCallCheck","last_users_getPrototypeOf","last_users_assertThisInitialized","expand","formattedMessage","components_markdown","formatOptions","actor","expandedLocale","postType","usernames","firstUser","lastIndex","lastUser","renderMessage","firstUserMessage","otherUsersMessage","numOthers","actorMessage","postTypeMessage","combined_system_message_defineProperty","_postTypeMessage","one","one_you","two","many_expanded","CombinedSystemMessage","allUserIds","allUsernames","getMissingProfilesByUsernames","currentUsername","userProfiles","reduce","acc","currentUserDisplayName","getAllUsernames","someone","loadUserProfiles","actorId","_this$props4","getUsernamesByIds","localeHolder","secondUser","last_users_LastUsers","renderFormattedMessage","_this$props5","messageData","removedUserIds","showJoinLeave","combined_system_message_toConsumableArray","uniqueRemovedUserIds","arr","getProfilesByIdsAndUsernames","makeGetProfilesByIdsAndUsernames","ADVANCED_FILTER_JOIN_LEAVE","PostAddChannelMember","createAt","removePost","andSeparator","commaSeparator","idx","post_add_channel_member_toConsumableArray","linkId","linkText","outOfChannelMessageID","outOfChannelMessageText","channelType","noGroupsUsernames","outOfGroupsMessageID","outOfGroupsMessageText","outOfChannelAtMentions","generateAtMentions","outOfGroupsAtMentions","outOfChannelMessage","outOfGroupsMessage","handleAddChannelMember","renderUsername","renderFormattedText","markdown","renderAddToChannelMessage","systemMessageRenderers","system_message_helpers_defineProperty","_systemMessageRendere","removedUsername","HEADER_CHANGE","headerOptions","channel_mentions","oldHeader","old_header","newHeader","new_header","old","new","DISPLAYNAME_CHANGE","old_displayname","new_displayname","oldDisplayName","newDisplayName","CONVERT_CHANNEL","PURPOSE_CHANGE","oldPurpose","old_purpose","newPurpose","new_purpose","ME","PostMarkdown","renderedSystemMessage","add_channel_member","isUserCanManageMembers","canManageMembers","isEphemeral","addMemberProps","post_add_channel_member","post_id","not_in_channel_user_ids","not_in_groups_usernames","not_in_channel_usernames","COMBINED_USER_ACTIVITY","_post$props$user_acti","user_activity","combined_system_message","renderSystemMessage","message_source","pluginHooks","metadata","MessageWillFormat","AtMentionSuggestion","AtMentionProvider","at_mention_provider_classCallCheck","at_mention_provider_possibleConstructorReturn","at_mention_provider_getPrototypeOf","setProps","profilesInChannel","profilesNotInChannel","MENTION_SPECIAL","profile","profileSuggestions","usernameSuggestions","getSuggestionsSplitByMultiple","AUTOCOMPLETE_SPLIT_CHARACTERS","at_mention_provider_toConsumableArray","property","getSuggestionsSplitBy","prefixLower","getProfileSuggestions","suggestion","localMembers","filterProfile","at_mention_provider_objectSpread","MENTION_MEMBERS","out_of_channel","MENTION_NONMEMBERS","specialMentions","localUserIds","remoteMembers","localAndRemoteMembers","remoteNonMembers","resultCallback","captured","XRegExp","updateMatches","showLoadingIndicator","MENTION_MORE_MEMBERS","ChannelMentionSuggestion","ChannelMentionProvider","channel_mention_provider_classCallCheck","channel_mention_provider_possibleConstructorReturn","channel_mention_provider_getPrototypeOf","lastPrefixTrimmed","lastPrefixWithNoResults","lastCompletedWord","resetRequest","words","wrappedChannelIds","wrappedChannels","getMyChannels","nameWords","matched","j","wordMatched","MENTION_CHANNELS","MENTION_MORE_CHANNELS","wrappedMoreChannels","moreChannels","wrapped","RECEIVED_CHANNELS","CommandSuggestion","_Suggestion","command_provider_classCallCheck","command_provider_possibleConstructorReturn","command_provider_getPrototypeOf","command_provider_inherits","command_provider_createClass","hint","CommandProvider","command","getCommandsList","cmd","auto_complete","s","auto_complete_hint","auto_complete_desc","EMOJI_CATEGORY_SUGGESTION_BLACKLIST","EmoticonSuggestion","EmoticonProvider","partialName","Emoticons","emoticon","autocompleteCustomEmojis","findAndSuggestEmojis","recentMatched","_step$value","_slicedToArray","alias","hasSystemEmoji","emoticon_provider_toConsumableArray","formatEmojis","Textbox","textbox_classCallCheck","textbox_getPrototypeOf","textbox_defineProperty","textbox_assertThisInitialized","handlePostError","characterLimit","errorMessage","limit","checkMessageLength","supportsCommands","textboxClassName","textWrapperClass","emojiEnabled","badConnection","onKeyPress","handleBlur","post_markdown","spellCheck","createMessage","handleHeightChange","suggestionListStyle","getProfilesInChannel","makeGetProfilesInChannel","getProfilesNotInChannel","makeGetProfilesNotInChannel","withRef","PreReleaseFeatures","PRE_RELEASE_FEATURES","TextboxLinks","updatePreview","showPreview","editHeader","hasText","helpTextClass","previewMessageLink","previewLink","MARKDOWN_PREVIEW","togglePreview","react_router_dom","EditPostModal","edit_post_modal_classCallCheck","edit_post_modal_getPrototypeOf","edit_post_modal_defineProperty","edit_post_modal_assertThisInitialized","editModalBody","showEmojiPicker","editbox","emojiAlias","editText","newMessage","editPostEmoji","postError","edit_post_modal_asyncToGenerator","editingPost","updatedPost","hasAttachment","deletePostModalData","isSaveDisabled","errorClass","ANIMATION_TIMEOUT","file_ids","DELETE_POST","addMessageIntoHistory","ctrlSend","handleEdit","doRefocus","refocusId","hideEditPostModal","getWrappedInstance","canEditPost","canDeletePost","errorBoxClass","postErrorClass","emojiPicker","emojiButtonAriaLabel","EnableEmojiPicker","emoji_picker_overlay_EmojiPickerOverlay","getContainer","getEditPostControls","hideEmojiPicker","handleEmojiClick","handleGifClick","EnableGifPicker","toggleEmojiPicker","handleExited","keyboard","bsClass","components_textbox","handleEditKeyPress","setEditboxRef","maxPostSize","textbox_links_TextboxLinks","setTextboxLinksRef","getEditingPost","EDIT_POST","DELETE_OTHERS_POSTS","EDIT_OTHERS_POSTS","MaxPostSize","DEFAULT_CHARACTER_LIMIT","ModalStore","ModalStoreClass","modal_store_classCallCheck","modal_store_getPrototypeOf","modal_store_defineProperty","modal_store_assertThisInitialized","_payload$action","modal_store_objectWithoutProperties","TOGGLE_IMPORT_THEME_MODAL","TOGGLE_DELETE_POST_MODAL","TOGGLE_QUICK_SWITCH_MODAL","TOGGLE_CHANNEL_PURPOSE_UPDATE_MODAL","dispatchToken","handleEventPayload","GetLinkModal","get_link_modal_classCallCheck","get_link_modal_getPrototypeOf","get_link_modal_defineProperty","get_link_modal_assertThisInitialized","copiedLink","setSelectionRange","execCommand","copyLink","queryCommandSupported","data-copy-btn","readOnly","copyLinkConfirm","success_icon","GetPostLinkModal","get_post_link_modal_classCallCheck","get_post_link_modal_getPrototypeOf","handleToggle","get_post_link_modal_assertThisInitialized","addModalListener","removeModalListener","postUrl","currentTeamUrl","get_link_modal_GetLinkModal","GetTeamInviteLinkModal","get_team_invite_link_modal_classCallCheck","get_team_invite_link_modal_getPrototypeOf","get_team_invite_link_modal_defineProperty","get_team_invite_link_modal_assertThisInitialized","inviteUrl","invite_id","EnableUserCreation","GetPublicLinkModal","get_public_link_modal_classCallCheck","get_public_link_modal_getPrototypeOf","get_public_link_modal_defineProperty","get_public_link_modal_assertThisInitialized","getFilePublicLink","LeavePrivateChannelModal","leave_private_channel_modal_classCallCheck","leave_private_channel_modal_getPrototypeOf","leave_private_channel_modal_defineProperty","leave_private_channel_modal_assertThisInitialized","ResetStatusModal","reset_status_modal_classCallCheck","reset_status_modal_getPrototypeOf","reset_status_modal_defineProperty","reset_status_modal_assertThisInitialized","hideModal","newStatus","reset_status_modal_objectSpread","currentUserStatus","setStatus","pref","CATEGORY_AUTO_RESET_MANUAL_STATUS","OUT_OF_OFFICE","toTitleCase","autoResetStatus","statusIsManual","autoResetPrefNotSet","autoResetPref","userStatus","userStatusId","manualStatusTitle","manualStatusMessage","renderModalMessage","manualStatusButton","manualStatusId","manualStatusCancel","manualStatusCheckbox","allShortcuts","mainHeader","mac","navHeader","navPrev","navNext","navUnreadPrev","navUnreadNext","navSwitcher","navDMMenu","navSettings","navMentions","navFocusCenter","msgHeader","msgInputHeader","msgEdit","msgReply","msgReprintPrev","msgReprintNext","msgCompHeader","msgCompUsername","msgCompChannel","msgCompEmoji","filesHeader","filesUpload","browserHeader","browserChannelPrev","browserChannelNext","browserFontIncrease","browserFontDecrease","browserInputHeader","browserHighlightPrev","browserHighlightNext","browserNewline","info","ShortcutsModal","shortcuts_modal_classCallCheck","shortcuts_modal_getPrototypeOf","shortcuts_modal_defineProperty","shortcuts_modal_assertThisInitialized","shortcuts","getShortcuts","renderShortcut","shortcut","FileUploadOverlay","overlayClass","overlayType","fileOverlayImage","overlayLogoImage","DelayedAction","delayed_action_classCallCheck","timer","fire","connectionErrorCount","system","websocketConnectionErrorCount","executeCommand","cmdLength","hasGotoLocation","getUserIdFromChannelName","CATEGORY_GROUP_CHANNEL_SHOW","goto_location","isUrlSafe","RECEIVED_DIALOG_TRIGGER_ID","runMessageWillBePostedHooks","originalPost","hooks_asyncToGenerator","hooks","MessageWillBePosted","runSlashCommandWillBePostedHooks","originalMessage","originalArgs","SlashCommandWillBePosted","clearCommentDraftUploads","actionOnGlobalItemsWithPrefix","COMMENT_DRAFT","create_comment_objectSpread","uploadsInProgress","updateCommentDraft","rootId","draft","setGlobalItem","makeOnMoveHistoryIndex","direction","getMessageInHistory","makeGetMessageInHistoryItem","MESSAGE_TYPES","COMMENT","getPostDraft","moveHistoryIndexBack","moveHistoryIndexForward","nextMessageInHistory","submitPost","create_comment_asyncToGenerator","hookResult","pending_post_id","fileInfos","submitReaction","removeReaction","submitCommand","makeOnEditLatestPost","getCurrentUsersLatestPost","getPostIdsInChannel","postIds","getPostById","lastPost","from_webhook","SYSTEM_MESSAGE_PREFIX","isPostPendingOrFailed","makeGetCurrentUsersLatestPost","getCommentCount","makeGetCommentCountForPost","getTable","clipboardData","types","getData","table","querySelector","parseTable","columnText","column","textContent","formatMarkdownTableMessage","row","headers","shift","spacers","formattedTable","AttachmentIcon","FilenameOverlay","canDownload","compactDisplay","handleImageClick","iconClass","attachment_icon_AttachmentIcon","getFileDownloadUrl","download","RemoveIcon","FileProgressPreview","handleRemove","clientId","fileNameComponent","percent","percentTxt","toFixed","fileType","filename_overlay_FilenameOverlay","ProgressBar","active","data-client-id","remove_icon_RemoveIcon","FilePreview","previews","FileTypes","SVG","getFileUrl","IMAGE","imageClassName","THUMBNAIL_WIDTH","THUMBNAIL_HEIGHT","thumbnailUrl","getFileThumbnailUrl","has_preview_image","backgroundSize","file_progress_preview_FileProgressPreview","uploadsProgressPercent","uploadFile","UPLOAD_FILES_REQUEST","request","getFilesRoute","getOptions","field","handleFileUploadEnd","res","forceLogoutIfNecessary","failure","UPLOAD_FILES_FAILURE","clientIds","getLogErrorAction","file_infos","file_actions_objectSpread","client_ids","RECEIVED_UPLOAD_FILES","UPLOAD_FILES_SUCCESS","limited","filesAbove","fileAbove","zeroBytesFiles","zeroBytesFile","pasted","OVERLAY_TIMEOUT","FileUpload","file_upload_classCallCheck","file_upload_getPrototypeOf","file_upload_defineProperty","file_upload_assertThisInitialized","currentRootId","onFileUpload","onUploadError","files","uploadFiles","sortedFiles","willUploadHooks","pluginFilesWillUploadHooks","pluginUploadFiles","uploadsRemaining","MAX_UPLOAD_FILES","fileCount","numUploads","tooLargeFiles","zeroFiles","_loop","progressEvent","onUploadProgress","end","_this$props$actions$h","fileUploadFail","fileUploadSuccess","file_upload_objectSpread","onUploadStart","tooLargeFilenames","filenames","zeroFilenames","checkPluginHooksAndUploadFiles","clearFileInput","onFileUploadChange","dataTransfer","droppedFiles","webkitGetAsEntry","isDirectory","containerSelector","overlaySelector","self","dragTimeout","hasClass","addClass","dragsterActions","dragsterEvent","isFileTransfer","cancel","fireAfter","handleDrop","targetElement","eventTarget","getTarget","containsEventTarget","kind","getAsFile","hour","getHours","minute","getMinutes","ext","lastIndexOf","getMonth","getDate","newFile","Blob","U","postTextbox","commentTextbox","fileInput","abort","menuOpen","handleMaxUploadReached","registerDragEvents","pasteUpload","keyUpload","off","multiple","isMobileApp","isIosChrome","bodyAction","pluginFileUploadMethods","simulateInputClick","handleLocalFileUploaded","menu_wrapper","menu","MaxFileSize","FileUploadMethod","FilesWillUploadHook","MsgTyping","numUsers","typingUsers","msg_typing_toConsumableArray","last","pop","getTypingText","getUsersTypingByChannelAndPost","makeGetUsersTypingByChannelAndPost","PostDeletedModal","MessageSubmitError","submittedMessage","errorContent","isErrorInvalidSlashCommand","renderSlashCommandError","CreateComment","create_comment_classCallCheck","create_comment_getPrototypeOf","create_comment_create_comment_defineProperty","create_comment_assertThisInitialized","rhsExpanded","shouldFocusMainTextbox","updatedDraft","create_comment_create_comment_objectSpread","onUpdateCommentDraft","hideNotifyAllModal","doSubmit","modifiedDraft","draftsForPost","create_comment_create_comment_asyncToGenerator","membersCount","channelMembersCount","enableConfirmNotificationsToChannel","NOTIFY_ALL_MEMBERS","containsAtChannel","isTimezoneEnabled","getChannelTimezones","channelTimezoneCount","showNotifyAllModal","forceFocus","ignoreSlash","shouldEnableAddButton","rootDeleted","showPostDeletedModal","lastBlurAt","codeBlockOnCtrlEnter","_postMessageOnKeyPres","postMessageOnKeyPress","allowSending","withClosedCodeBlock","persist","emitTypingEvent","$el","parent","scrollToBottom","metaKey","commentMsgKeyPress","onEditLatestPost","onMoveHistoryIndexBack","onMoveHistoryIndexForward","create_comment_toConsumableArray","newFileInfos","sortFileInfos","updateCommentDraftWithRootId","handleUploadError","fileUpload","cancelUpload","handleFileUploadChange","_this$state$draft","createCommentControls","enableAddButton","keepFocus","resetCreatePostRequest","renderScrollbar","doInitialScrollToBottom","onResetHistoryIndex","pasteHandler","focusTextboxIfNecessary","createPostErrorId","messageInHistory","selectedPostFocussedAt","readOnlyChannel","ariaLabelReplyInput","notifyAllTitle","notifyAllConfirm","notifyAllMessage","totalMembers","timezones","message_submit_error","file_preview","removePreview","uploadsInProgressText","addButtonClass","file_upload","getFileCount","getFileUploadTarget","handleUploadStart","handleFileUploadComplete","handleUploadProgress","enableEmojiPicker","getCreateCommentControls","scrollbarClass","data-a11y-sort-order","initialText","popoverMentionKeyClick","msg_typing","post_deleted_modal_PostDeletedModal","hidePostDeletedModal","handleNotifyAllConfirmation","latestPostId","getSidebarBody","getMessageInHistoryItem","createPost","getAllChannelStats","EnableConfirmNotificationsToChannel","ExperimentalTimezone","isCurrentUserSystemAdmin","ExperimentalTownSquareIsReadOnly","DEFAULT_CHANNEL","getIsRhsExpanded","getSelectedPostFocussedAt","resetHistoryIndex","makeOnUpdateCommentDraft","isReaction","getCustomEmojisByName","EmojiMap","makeOnSubmit","DateSeparator","weekday","month","day","year","instanceOf","FloatingTimestamp","dateString","isScrolling","isRhsPost","PostListUtils","combinedIds","ChannelPermissionGate","MENU_BOTTOM_MARGIN","DotMenu","dot_menu_classCallCheck","dot_menu_getPrototypeOf","dot_menu_defineProperty","dot_menu_assertThisInitialized","canEdit","isFlagged","unflagPost","flagPost","handleAddReactionClick","is_pinned","unpinPost","pinPost","Locations","RHS_ROOT","RHS_COMMENT","setEditingPost","CENTER","rect","editDisableAction","handleEditDisable","buttonRef","canDelete","isReadOnly","isLicensed","postEditTimeLimit","UNSET_POST_EDIT_TIME_LIMIT","timeLeft","disableCanEditPostByTime","isSystemMessage","pluginItems","pluginMenuItems","menu_item_action","handleDropdownOpened","tooltip","aria-expanded","refCallback","channel_permission_gate","ADD_REACTION","handleAddReactionMenuItemActivated","handleFlagMenuItemActivated","handleCommentClick","handlePermalinkMenuItemActivated","handlePinMenuItemActivated","handleDeleteMenuItemActivated","handleEditMenuItemActivated","SEARCH","PostEditTimeLimit","PostDropdownMenu","DownloadIcon","FileThumbnail","getFileType","isGIFImage","getIconClassName","FileAttachment","file_attachment_classCallCheck","file_attachment_getPrototypeOf","file_attachment_defineProperty","file_attachment_assertThisInitialized","loadImage","handleImageLoaded","loadFiles","fileThumbnail","fileDetail","filenameOverlay","onAttachmentClick","file_thumbnail","download_icon_DownloadIcon","AudioVideoPreview","audio_video_preview_classCallCheck","audio_video_preview_getPrototypeOf","handleFileInfoChanged","audio_video_preview_assertThisInitialized","handleLoadError","canPlay","video","canPlayType","mime_type","pause","currentTime","file_info_preview","WEB_VIDEO_WIDTH","WEB_VIDEO_HEIGHT","MOBILE_VIDEO_WIDTH","MOBILE_VIDEO_HEIGHT","data-setup","controls","CodePreview","code_preview_classCallCheck","code_preview_getPrototypeOf","updateStateFromProps","code_preview_assertThisInitialized","handleReceivedError","handleReceivedCode","code","lang","SyntaxHighlighting","usedLanguage","CODE_PREVIEW_MAX_FILE_SIZE","ajax","dataType","XMLSerializer","serializeToString","loading_spinner","lines","match","strlines","language","highlighted","ImagePreview","hasPreviewImage","previewUrl","getFilePreviewUrl","PopoverBar","publicLink","enablePublicLink","showPublicLink","data-title","onGetPublicLink","footerClass","downloadLinks","downloadLinkText","downloadLinkProps","isExternalFile","fileURL","fileIndex","totalFiles","ViewImageModal","view_image_classCallCheck","view_image_getPrototypeOf","view_image_defineProperty","view_image_assertThisInitialized","imageIndex","showImage","RIGHT","handleNext","LEFT","handlePrev","handleKeyPress","startIndex","imageHeight","has_image_preview","completedPercentage","handleImageProgress","view_image_objectSpread","onModalDismissed","showFooter","onModalShown","onModalHidden","fileDownloadUrl","VIDEO","AUDIO","audio_video_preview_AudioVideoPreview","PDF","loadPDFPreview","supports","code_preview_CodePreview","floor","loading_image_preview","pluginFilePreviewComponents","leftArrow","rightArrow","closeButtonClass","onMouseEnter","onMouseEnterImage","onMouseLeaveImage","popover_bar","handleGetPublicLink","EnablePublicLink","ViewImage","SingleImageView","single_image_view_classCallCheck","single_image_view_getPrototypeOf","single_image_view_defineProperty","single_image_view_assertThisInitialized","showPreviewModal","toggleEmbedVisibility","previewURL","previewHeight","previewWidth","minPreviewClass","viewImageModal","data-expanded","isEmbedVisible","fileHeader","fadeInClass","styleIfSvgWithDimensions","imageContainerStyle","svgClass","view_image","imageLoaded","isRhsOpen","FileAttachmentList","file_attachment_list_classCallCheck","file_attachment_list_getPrototypeOf","file_attachment_list_defineProperty","file_attachment_list_assertThisInitialized","startImgIndex","indexClicked","single_image_view","minHeightPlaceholder","sortedFileInfos","postFiles","file_attachment","hidePreviewModal","selectFilesForPost","makeGetFilesForPost","PostProfilePicture","fromWebhook","defaultURL","enablePostIconOverride","postProps","postIconOverrideURL","useUserIcon","override_icon_url","use_user_icon","DEFAULT_WEBHOOK_LOGO","isBot","getProfilePictureURL","getPostIconURL","overrideIconEmoji","override_icon_emoji","getStatus","EnablePostIconOverride","FailedPostOptions","failed_post_options_objectSpread","retryPost","cancelPost","FlagIcon","FlagIconFilled","PostFlagIcon","post_flag_icon_classCallCheck","post_flag_icon_getPrototypeOf","post_flag_icon_defineProperty","post_flag_icon_assertThisInitialized","flagIcon","flagVisible","flag_icon_filled_FlagIconFilled","flag_icon_FlagIcon","handlePress","PostTime","isMobileView","localDateTime","isPermalink","PostReaction","addReaction","RHS_SPACE_REQUIRED_ABOVE","RHS_SPACE_REQUIRED_BELOW","getDotMenuRef","Reaction","ids","reactions","emojiImageUrl","names","reactionVerb","currentUserReacted","otherUsersCount","otherUsers","clickTooltip","emojiNameWithSpaces","ariaLabelEmoji","canRemoveReaction","handleRemoveReaction","canAddReaction","handleAddReaction","shouldUpdatePosition","loadMissingProfiles","reactionCount","checkReactionAction","getProfilesForReactions","makeGetProfilesForReactions","me","REMOVE_REACTION","ReactionList","reaction_list_classCallCheck","reaction_list_getPrototypeOf","reaction_list_defineProperty","reaction_list_assertThisInitialized","addReactionButton","disableVirtList","reactionsByName","Map","emojiNames","_Object$values","post_view_reaction","addReactionTooltip","addReactionClassName","getReactionsForPost","makeGetReactionsForPost","MAX_POST_HEIGHT","MAX_ATTACHMENT_TEXT_HEIGHT","ShowMore","show_more_classCallCheck","show_more_getPrototypeOf","show_more_defineProperty","show_more_assertThisInitialized","isCollapsed","overflowRef","cancelAnimationFrame","textContainer","isOverflow","checkTextOverflow","isAttachmentText","handleResize","isRHSExpanded","isRHSOpen","checkOverflow","collapsedMaxHeightStyle","collapseGradientClass","collapseShowMoreClass","attachmentTextOverflow","showIcon","showText","toggleCollapse","MESSAGE_DISPLAY","MESSAGE_DISPLAY_DEFAULT","MESSAGE_DISPLAY_COMPACT","ActionButton","handleAction","data-action-id","data-action-cookie","ActionMenu","action_menu_classCallCheck","action_menu_getPrototypeOf","action_menu_defineProperty","action_menu_assertThisInitialized","default_option","menuActions","LinkOnlyRenderer","RemoveMarkdown","outHref","getScheme","output","MessageAttachment","message_attachment_classCallCheck","message_attachment_getPrototypeOf","message_attachment_defineProperty","message_attachment_assertThisInitialized","attachment","thumb_url","handleHeightReceived","image_url","action_menu","action_button_ActionButton","actionCookie","doPostActionWithCookie","fields","fieldTables","headerCols","bodyCols","rowPos","lastWasLong","nrTables","short","preText","preTextClass","attachmentText","thumb","author","author_name","author_icon","author_link","title_link","show_more","handleHeightReceivedForImageUrl","thumbMetadata","thumbUrl","handleHeightReceivedForThumbUrl","useBorderStyle","getFieldsTable","renderPostActions","borderLeftColor","handleFormattedTextClick","MessageAttachmentList","attachments","message_attachment","getDistanceBW2Points","point1","point2","xAttr","yAttr","sqrt","pow","DIMENSIONS_NEAREST_POINT_IMAGE","PostAttachmentOpenGraph","patchedPost","REMOVE_LINK_PREVIEW","safeImageUrl","previewEnabled","enableLinkPreviews","hasPreviewBeenRemoved","openGraphData","removePreviewButton","secure_url","post_attachment_opengraph_objectSpread","bestImage","pivotPoint","points","nearestPoint","point","getNearestPoint","getBestImageUrl","getImageMetadata","hasLargeImage","isLargeImage","handleRemovePreview","truncateText","renderImageToggle","renderLargeImage","site_name","useSafeUrl","renderSmallImage","EnableLinkPreviews","getOpenGraphMetadataForUrl","LINK_PREVIEW_DISPLAY","PostImage","post_image_classCallCheck","post_image_getPrototypeOf","post_image_defineProperty","post_image_assertThisInitialized","showModal","safeLink","ytRegex","YoutubeVideo","youtube_video_classCallCheck","youtube_video_getPrototypeOf","youtube_video_defineProperty","youtube_video_assertThisInitialized","videoId","handleYoutubeTime","playing","hours","minutes","seconds","ticks","frameBorder","allowFullScreen","safeUrl","play","googleDeveloperKey","GoogleDeveloperKey","PostBodyAdditionalContent","embeds","embed","isYoutubeLink","post_image","message_attachment_list_MessageAttachmentList","youtube_video","post_attachment_opengraph","prependToggle","getEmbed","toggleable","isEmbedToggleable","renderToggle","renderEmbed","PostMessageView","post_message_view_classCallCheck","post_message_view_getPrototypeOf","post_message_view_defineProperty","post_message_view_assertThisInitialized","collapse","hasOverflow","pluginPostTypes","renderDeletedPost","aria-readonly","renderEditedIndicator","postTypes","MessageWithAdditionalContent","previewCollapsed","hasPlugin","messageWrapper","post_message_view","post_body_additional_content","InfoSmallIcon","UserProfile","disablePopover","overwriteName","profileImg","imageURLForUser","overwriteImage","getDisplayName","makeGetDisplayName","RhsComment","rhs_comment_classCallCheck","rhs_comment_getPrototypeOf","rhs_comment_defineProperty","rhs_comment_assertThisInitialized","post_time","dropdownOpened","isConsecutivePost","isOpened","dotMenu","hover","currentAriaLabel","postRef","botIndicator","profilePicture","failedPostOptions","isPostDeleted","isPostEphemeral","userProfile","user_profile","post_profile_picture","override_username","enablePostUsernameOverride","badges_badge","SYSTEM_MESSAGE_PROFILE_IMAGE","postClass","failed","failed_post_options","postReaction","pinnedBadge","fileAttachment","file_attachment_list","post_reaction","createRemovePostButton","dot_menu","post_flag_icon","postInfoIcon","postTime","renderPostTime","card","handleCardClick","info_small_icon_InfoSmallIcon","getClassName","setHover","unsetHover","handlePostFocus","reaction_list","previousPost","previousPostId","consecutivePost","postFromWebhook","prevPostFromWebhook","POST_COLLAPSE_TIMEOUT","EnablePostUsernameOverride","isChannelReadOnlyById","CATEGORY_FLAGGED_POST","RhsHeaderPost","previousRhsState","showSearchResults","MENTION","showMentions","FLAG","showFlaggedPosts","showPinnedPosts","back","backToResultsTooltip","closeSidebarTooltip","expandSidebarTooltip","shrinkSidebarTooltip","handleBack","toggleRhsExpanded","RhsRootPost","rhs_root_post_classCallCheck","rhs_root_post_getPrototypeOf","rhs_root_post_defineProperty","rhs_root_post_assertThisInitialized","FAKE_PARENT_DELETED","ReduxPostUtils","testStateObj","channelDisplayName","dotMenuContainer","postFlagIcon","renderView","renderThumbHorizontal","renderThumbVertical","RhsThread","rhs_thread_classCallCheck","rhs_thread_getPrototypeOf","rhs_thread_defineProperty","rhs_thread_assertThisInitialized","windowWidth","windowHeight","selectPostCard","openTime","postsArray","cpost","childNodes","rhspostlist","viewPort","topRhsPostId","updateFloatingTimestamp","scrollStopAction","SCROLL_DELAY","sidebarbody","handleScrollStop","prevPostsArray","curPostsArray","socketConnectionStatus","getPostThread","filterPosts","createComment","rootPostDay","previousPostDay","commentsLists","postsLength","comPost","currentPostDay","toDateString","date_separator","keyPrefix","rhs_comment","handleCardClickPost","isFakeDeletedPost","create_comment","teammate","floating_timestamp","rhs_header_post","react_custom_scrollbars_lib_default","autoHide","autoHideTimeout","autoHideDuration","data-a11y-focus-child","data-a11y-order-reversed","rhs_root_post","getPostsForThread","makeGetPostsForThread","COLLAPSE_DISPLAY","COLLAPSE_DISPLAY_DEFAULT","connected","LINK_PREVIEW_DISPLAY_DEFAULT","RhsCardHeader","RshCardHeader","RhsCard","rhs_card_classCallCheck","rhs_card_getPrototypeOf","rhs_card_defineProperty","rhs_card_assertThisInitialized","topRhsPostCreateAt","pluginPostCardTypes","avatar","rhs_card_header","getSelectedPostCard","postCardTypes","SelectIcon","itemToName","SearchChannelSuggestion","getDirectTeammate","select_icon_SelectIcon","SearchChannelProvider","channelNames","SearchSuggestionList","search_suggestion_list_classCallCheck","search_suggestion_list_possibleConstructorReturn","search_suggestion_list_getPrototypeOf","popover","renderChannelDivider","SuggestionDate","itemComponent","SearchUserSuggestion","SearchUserProvider","usernamePrefix","autocompleteUsersInTeam","SearchDateSuggestion","search_date_provider_classCallCheck","search_date_provider_possibleConstructorReturn","search_date_provider_getPrototypeOf","handleDayClick","search_date_provider_assertThisInitialized","dayString","DayPicker_default","onDayClick","showOutsideDays","SearchDateProvider","datePrefix","dates","HeaderIconWrapper","ariaLabelText","iconComponent","buttonClass","buttonId","tooltipKey","toolTips","flaggedPosts","messageID","pinnedPosts","recentMentions","getTooltip","SearchHint","withTitle","MentionsIcon","search_bar_classCallCheck","search_bar_getPrototypeOf","search_bar_defineProperty","search_bar_assertThisInitialized","updateSearchTerms","handleSearchOnSuccess","searchTerms","isMentionSearch","isFlaggedPosts","helpClass","search_hint_SearchHint","mentionBtn","flagBtn","showMentionFlagBtns","mentionBtnClass","mentions_icon_MentionsIcon","searchMentions","flagBtnClass","getFlagged","showClear","isSearchingTerm","searchFormClass","searchClearTooltip","searchForm","search_icon","getSearch","handleUserFocus","handleUserBlur","isFocus","handleClear","renderHintPopover","rhsState","getIsSearchingTerm","getSearchTerms","SearchResultsHeader","ReplyIcon","CommentIcon","commentCountSpan","iconStyle","searchStyle","extraClass","reply_icon_ReplyIcon","SearchResultsItem","search_results_item_classCallCheck","search_results_item_getPrototypeOf","search_results_item_defineProperty","search_results_item_assertThisInitialized","selectPost","setRhsExpanded","overrideUsername","disableProfilePopover","profilePic","profilePicContainer","flagContent","rhsControls","commentCountForPost","comment_icon_CommentIcon","handleFocusRHSClick","handleJumpClick","searchMatches","data-testid","getCommentCountForPost","isPostFlagged","selectPostFromRightHandSideSearch","selectPostCardFromRightHandSideSearch","DataRetentionHint","days","dataRetentionMessageRetentionDays","FlagPostSearchHint","dataRetentionEnableMessageDeletion","data_retention_hint_DataRetentionHint","PinPostSearchHint","GET_MORE_BUFFER","SearchResults","search_results_classCallCheck","search_results_getPrototypeOf","search_results_defineProperty","search_results_assertThisInitialized","scrollbars","isPinnedPosts","isSearchGettingMore","getScrollHeight","getScrollTop","getClientHeight","loadMorePosts","getMorePostsForSearch","results","nextResults","shouldRenderFromPropsAndState","noResults","ctls","loadingMorePostsComponent","isSearchingFlaggedPost","isSearchingPinnedPost","loading_wrapper","flag_post_search_hint_FlagPostSearchHint","pin_post_search_hint_PinPostSearchHint","no_result_search_hint_PinPostSearchHint","sortedResults","search_results_toConsumableArray","postA","postB","search_results_item","isSearchAtEnd","formattedTitle","isCard","search_results_header","DataRetentionEnableMessageDeletion","DataRetentionMessageRetentionDays","newResults","getSearchResults","currentSearch","getCurrentSearchForCurrentTeam","getSearchMatches","getSearchResultsTerms","getIsSearchingFlaggedPost","getIsSearchingPinnedPost","getIsSearchGettingMore","isEnd","PreferenceSelectors","RhsPlugin","rhsPlugins","RightHandSidebarComponent","getPluginId","RHSPlugin","SidebarRight","sidebar_right_classCallCheck","sidebar_right_getPrototypeOf","sidebar_right_defineProperty","sidebar_right_assertThisInitialized","transitionInfo","sidebarRight","getPropertyValue","hasTransition","isOpen","onFinishTransition","propertyName","determineTransition","wasOpen","searchVisible","postRightVisible","postCardVisible","isPluginView","expandedClass","isExpanded","search_bar","search_results","toggleSize","shrink","onShrink","rhs_thread","rhs_plugin","rhs_card","move--left","getSelectedPostId","getSelectedPostCardId","PLUGIN","getPreviousRhsState","TutorialSteps","TutorialTip","tutorial_tip_classCallCheck","tutorial_tip_getPrototypeOf","tutorial_tip_defineProperty","tutorial_tip_assertThisInitialized","currentScreen","screens","diagnosticsTag","TUTORIAL_STEP","step","FINISHED","screen","buttonText","dots","data-screen","handleCircleClick","tutorialGifImage","tutorialGif","tutorialGifWhite","skipTutorial","getInt","MenuTutorialTip","toggleFunc","onBottom","arrow","tutorial_tip","emailError","firstname","lastname","modalTitle","modalMessage","modalButton","InviteMemberModal","invite_member_modal_classCallCheck","invite_member_modal_getPrototypeOf","invite_member_modal_defineProperty","invite_member_modal_assertThisInitialized","invite_member_modal_asyncToGenerator","inviteIds","invites","emails","emailErrors","firstNameErrors","lastNameErrors","valid","invite","invite_member_modal_objectSpread","firstName","lastName","isEmail","isSendingEmails","sendEmailInvitesToTeam","detailed_error","notEmpty","clearFields","idCount","invite_member_modal_toConsumableArray","utils","teamType","inviteSections","firstNameError","lastNameError","removeButton","removeInviteFields","emailClass","nameFields","firstNameClass","lastNameClass","enableUserCreation","onKeyUp","displayNameKeyUp","sendButton","addInviteFields","defaultChannelName","sendButtonLabel","teamInviteLink","hideConfirmModal","defaultChannel","LeaveTeamIcon","LeaveTeamModal","leaveTeam","toggleSideBarRightMenu","SearchableUserListContainer","searchable_user_list_container_classCallCheck","searchable_user_list_container_getPrototypeOf","handleTermChange","searchable_user_list_container_assertThisInitialized","searchable_user_list","DropdownIcon","TeamMembersDropdown","team_members_dropdown_classCallCheck","team_members_dropdown_getPrototypeOf","team_members_dropdown_defineProperty","team_members_dropdown_assertThisInitialized","team_members_dropdown_asyncToGenerator","handleDemote","updateTeamMemberSchemeRoles","getMyTeamMembers","getMyTeamUnreads","newRole","showDemoteModal","currentRoles","showMakeMember","showMakeAdmin","canRemoveFromTeam","group_constrained","makeDemoteModal","vallues","handleDemoteSubmit","handleDemoteCancel","dropdown_icon_DropdownIcon","handleRemoveFromTeam","handleMakeAdmin","handleMakeMember","getTeamStats","updateUserActive","USERS_PER_PAGE","MemberListTeam","member_list_team_classCallCheck","member_list_team_getPrototypeOf","member_list_team_defineProperty","member_list_team_assertThisInitialized","loadProfilesAndTeamMembers","PROFILE_CHUNK_SIZE","loadComplete","member_list_team_asyncToGenerator","_nextProps$actions","loadStatusesForProfilesList","loadTeamMembersForProfilesList","searchProfiles","teamMembersDropdown","canManageTeamMembers","searchable_user_list_container_SearchableUserListContainer","totalTeamMembers","MANAGE_TEAM_ROLES","searchProfilesInCurrentTeam","getProfilesInCurrentTeam","getCurrentTeamStats","active_member_count","getMembersInCurrentTeam","TeamMembersModal","teamDisplayName","member_list_team","TEAM_MEMBERS","ACCEPTED_TEAM_IMAGE_TYPES","GeneralTab","team_general_tab_classCallCheck","team_general_tab_getPrototypeOf","team_general_tab_defineProperty","team_general_tab_assertThisInitialized","team_general_tab_asyncToGenerator","team_general_tab_objectSpread","allowed_domains","patchTeam","allow_open_invite","MIN_TEAMNAME_LENGTH","MAX_TEAMNAME_LENGTH","regenerateTeamInviteId","teamIconFile","loadingIcon","setTeamIcon","removeTeamIcon","handleNameSubmit","handleAllowedDomainsSubmit","handleInviteIdSubmit","handleOpenInviteSubmit","handleDescriptionSubmit","handleTeamIconSubmit","updateName","updateDescription","updateTeamIcon","updateAllowedDomains","handleOpenInviteRadio","setupInitialState","openInvite","openInviteSection","inviteSection","nameSection","descriptionSection","teamIconSection","minMessage","allowedDomainsSection","defaultChecked","setting_item_max","setting_item_min","canInviteTeamMembers","getTeamInviteLink","teamNameLabel","nameExtraInfo","teamDescriptionLabel","MAX_TEAMDESCRIPTION_LENGTH","descriptionExtraInfo","describemsg","setting_picture","handleTeamIconRemove","last_team_icon_update","allowedDomainsInfo","data-dismiss","back_icon","INVITE_USER","TeamGeneralTab","SettingsUpload","setting_upload_classCallCheck","setting_upload_getPrototypeOf","doFileSelect","setting_upload_assertThisInitialized","val","inputnode","uploadinput","fileNameText","submitButtonClass","fileTypesAccepted","importSlack","TeamImportTab","team_import_tab_classCallCheck","team_import_tab_getPrototypeOf","onImportFailure","team_import_tab_assertThisInitialized","onImportSuccess","doImportSlack","atob","messageSection","uploadDocsLink","uploadExportInstructions","uploadExporterLink","importCliLink","uploadHelpText","exportInstructions","slackAdvancedExporterLink","cliLink","uploadSection","setting_upload_SettingsUpload","warning_icon","TeamSettings","team_general_tab","team_import_tab","TeamSettingsModal","team_settings_modal_classCallCheck","team_settings_modal_getPrototypeOf","team_settings_modal_defineProperty","team_settings_modal_assertThisInitialized","modalBody","components_team_settings","TEAM_SETTINGS","AddUsersToTeam","add_users_to_team_classCallCheck","add_users_to_team_getPrototypeOf","add_users_to_team_defineProperty","add_users_to_team_assertThisInitialized","add_users_to_team_asyncToGenerator","loadingUsers","setUsersLoadingState","getProfilesNotInTeam","currentTeamGroupConstrained","displayEntireNameForUser","not_in_team_id","renderAriaLabel","searchProfilesNotInCurrentTeam","getProfilesNotInCurrentTeam","ADD_USER_TO_TEAM","MenuItemLinkImpl","MenuItemLink","DEFAULT_NUM_PER_PAGE","ListModal","list_modal_classCallCheck","list_modal_getPrototypeOf","list_modal_defineProperty","list_modal_assertThisInitialized","list_modal_asyncToGenerator","loadItems","numPerPage","renderRow","_this$paginationRange","paginationRange","titleText","titleBarButtonText","titleBarButtonOnClick","searchPlaceholderText","onSearchInput","renderRows","onPrev","onNext","TeamGroupsManageModal","listModal","pageNumber","getGroupsAssociatedToTeam","totalGroupCount","unlinkGroupSyncable","team_groups_manage_modal_asyncToGenerator","MANAGE_TEAM_GROUPS","ADD_GROUPS_TO_TEAM","onClickRemoveGroup","list_modal_ListModal","titleButtonOnClick","handleDeleteConfirmed","handleDeleteCanceled","teamID","MainMenu","teamIsGroupConstrained","mobile","menu_group","menu_item_toggle_modal_redux","team_permission_gate","MANAGE_TEAM","enableEmailInvitations","EMAIL_INVITE","OPEN_TEAM","REMOVE_USER_FROM_TEAM","system_permission_gate","CREATE_TEAM","menu_item_link","experimentalPrimaryTeam","moreTeamsToJoin","leave_team_icon_LeaveTeamIcon","MANAGE_SLASH_COMMANDS","MANAGE_OAUTH","MANAGE_INCOMING_WEBHOOKS","MANAGE_OUTGOING_WEBHOOKS","enableIncomingWebhooks","enableOutgoingWebhooks","enableCommands","enableOAuthServiceProvider","enableCustomEmoji","canCreateOrDeleteCustomEmoji","menu_item_external_link","helpLink","reportAProblemLink","appDownloadLink","siteName","handleEmitUserLoggedOutEvent","AppDownloadLink","EnableCommands","EnableIncomingWebhooks","EnableOAuthServiceProvider","EnableOutgoingWebhooks","EnableEmailInvitations","ExperimentalPrimaryTeam","HelpLink","ReportAProblemLink","CREATE_EMOJIS","DELETE_EMOJIS","joinableTeams","getJoinableTeamIds","SidebarRightMenu","tutorialTip","showTutorialTip","menu_tutorial_tip","openRhsMenu","main_menu","enableTutorial","EnableTutorial","tutorialStep","getIsRhsMenuOpen","MENU_POPOVER","ImportThemeModal","import_theme_modal_classCallCheck","import_theme_modal_getPrototypeOf","import_theme_modal_defineProperty","import_theme_modal_assertThisInitialized","isInputValid","colors","sidebarBg","sidebarText","sidebarUnreadText","sidebarTextHoverBg","sidebarTextActiveBorder","sidebarTextActiveColor","sidebarHeaderBg","sidebarHeaderTextColor","onlineIndicator","awayIndicator","mentionBg","mentionColor","newMessageSeparator","linkColor","buttonBg","buttonColor","mentionHighlightBg","mentionHighlightLink","codeTheme","inputError","updateShow","charAt","handleOnHide","getIsLhsOpen","lhs","CopyUrlContextMenu","copyToClipboard","contextMenu","es6","menuId","copy","contextMenuTrigger","TeamButton","team_button_classCallCheck","team_button_getPrototypeOf","handleSwitch","team_button_assertThisInitialized","handleDisabled","badge","teamIconUrl","teamClass","unread","mentionCount","initials","teamButton","toolTip","tip","btn","copy_url_context_menu","TeamSidebar","getTeams","root","myTeamMembers","team_button_TeamButton","move--right","withRouter","SearchableChannelList","searchable_channel_list_classCallCheck","searchable_channel_list_getPrototypeOf","createChannelRow","searchable_channel_list_assertThisInitialized","doSearch","joiningChannel","channelList","handleJoin","marginTop","noResultsText","channelsPerPage","channelsToDisplay","createChannelButton","CHANNELS_PER_PAGE","MoreChannels","more_channels_classCallCheck","more_channels_getPrototypeOf","more_channels_defineProperty","more_channels_assertThisInitialized","bodyOnly","force","searchedChannels","getChannels","getRelativeChannelURL","searching","setSearchResults","CHANNELS_CHUNK_SIZE","channelsRequestStarted","serverErrorState","createNewChannelButton","CREATE_PUBLIC_CHANNEL","CREATE_PRIVATE_CHANNEL","handleNewChannel","createChannelHelpText","searchable_channel_list_SearchableChannelList","getNotArchivedOtherChannels","getOtherChannels","RequestStatus","STARTED","GroupMessageOption","group_message_option_classCallCheck","group_message_option_getPrototypeOf","group_message_option_assertThisInitialized","MAX_SELECTABLE_VALUES","MAX_USERS_IN_GM","MoreDirectChannels","more_direct_channels_classCallCheck","more_direct_channels_getPrototypeOf","more_direct_channels_defineProperty","more_direct_channels_assertThisInitialized","statuses","missingStatusByIds","exitToChannel","addUsers","existingUserIds","pageNum","restrictDirectMessage","getProfiles","getProfilesInTeam","getUserProfiles","resetPaging","group_message_option_GroupMessageOption","modalName","displayname","currentChannelMembers","getTotalUsersStats","loadProfilesMissingStatus","more_direct_channels_asyncToGenerator","profilesData","groupChannelsData","searchGroupChannels","more_direct_channels_slicedToArray","loadProfilesForGroupChannels","note","isExistingChannel","inactive","groupChannels","more_direct_channels_toConsumableArray","handleSubmitImmediatelyOn","filterGroupChannels","memoizeResult","filterProfilesMatchingTerm","getProfilesInCurrentChannel","RestrictDirectMessage","searchProfilesSelector","selectProfiles","filteredGroupChannels","getChannelsWithUserProfiles","getTotalUsersStatsSelector","total_users_count","DraftIcon","SwitchChannelSuggestion","notify_props","hasDraft","draft_icon_DraftIcon","switch_channel_provider_objectSpread","switch_channel_provider_getPrototypeOf","ConnectedSwitchChannelSuggestion","DRAFT","quickSwitchSorter","SwitchChannelProvider","getDirectAndGroupChannels","fetchUsersAndChannels","formatUnreadChannelsAndDispatch","usersAsync","usersFromServer","RECEIVED_PROFILES_LIST","skipNotInChannel","curState","usersInChannels","getUserIdsInChannels","userSearchStrings","usersInChannel","Set","userString","ARCHIVED_CHANNEL","isGroupChannelVisible","getLastPostPerChannel","isUnreadChannel","u","userWrappedChannel","isDirectChannelVisible","isDMVisible","makeGetChannel","unreadChannelIds","getSortedUnreadChannelIds","MENTION_UNREAD_CHANNELS","SwitchTeamSuggestion","SwitchTeamProvider","teamPrefix","teamNames","CHANNEL_MODE","TEAM_MODE","QuickSwitchModal","quick_switch_modal_classCallCheck","quick_switch_modal_getPrototypeOf","quick_switch_modal_defineProperty","quick_switch_modal_assertThisInitialized","switchBox","focusPostTextbox","switchMode","_this$props$actions","selectedChannel","mode","channelProviders","teamProviders","showTeamSwitcher","enableTeamProvider","channelShortcut","defaultChannelShortcut","teamShortcut","defaultTeamShortcut","channelsActiveClass","teamsActiveClass","data-mode","restoreFocus","setSwitchBoxRef","NewChannelModal","new_channel_modal_classCallCheck","new_channel_modal_getPrototypeOf","new_channel_modal_defineProperty","new_channel_modal_assertThisInitialized","enterPressed","MIN_CHANNELNAME_LENGTH","displayNameError","onSubmitChannel","newData","channel_header","channel_purpose","onDataChanged","onChangeURLPressed","onTypeSwitched","canCreatePublicChannel","canCreatePrivateChannel","enableTypeSelection","displayNameClass","publicChannelDesc","privateChannelDesc","typeOptions","handlePublicTypeSelect","handlePrivateTypeSelect","prettyTeamURL","getShortenedURL","bsSize","onModalExited","MAX_CHANNELNAME_LENGTH","channelData","handleOnURLChange","ChangeURLModal","change_url_modal_classCallCheck","change_url_modal_getPrototypeOf","change_url_modal_defineProperty","change_url_modal_assertThisInitialized","currentURL","userEdit","formattedError","urlinput","cleanUpUrlable","urlError","getURLError","onModalSubmit","urlClass","fullURL","currentTeamURL","shortURL","urlTooltip","onURLChanged","submitButtonText","SHOW_NEW_CHANNEL","SHOW_EDIT_URL","SHOW_EDIT_URL_THEN_COMPLETE","NewChannelFlow","new_channel_flow_classCallCheck","new_channel_flow_getPrototypeOf","new_channel_flow_defineProperty","new_channel_flow_assertThisInitialized","flowState","channelPurpose","channelHeader","createChannel","onCreateChannelError","newURL","nameModified","showChannelModal","showChangeURLModal","changeURLTitle","changeURLSubmitButtonText","new_channel_modal","typeSwitched","urlChangeRequested","channelDataChanged","change_url_modal","urlChangeSubmitted","urlChangeDismissed","UnreadBelowIcon","UnreadChannelIndicator","displayValue","unread_below_icon_UnreadBelowIcon","StatusDropdown","AWAY","DND","resetStatusModalData","RESET_STATUS","needsConfirm","isUserOutOfOffice","renderProfilePicture","dropdownIcon","renderDropdownIcon","setOnline","showStatusChangeConfirmation","setDnd","setAway","setOffline","status_icon","SidebarHeaderDropdownButton","mainMenuToolTip","teamNameWithToolTip","data-teamid","teamDescription","menu_icon","SidebarHeaderDropdown","sidebar_header_dropdown_button_SidebarHeaderDropdownButton","SidebarHeader","sidebar_header_classCallCheck","sidebar_header_getPrototypeOf","sidebar_header_defineProperty","sidebar_header_assertThisInitialized","status_dropdown","dropdown","BotIcon","SidebarChannelButtonOrLinkIcon","teammateId","teammateDeletedAt","teammateIsBot","bot_icon_BotIcon","channelStatus","SidebarChannelButtonOrLinkCloseButton","removeTooltip","SidebarChannelButtonOrLink","sidebar_channel_button_or_link_classCallCheck","sidebar_channel_button_or_link_getPrototypeOf","sidebar_channel_button_or_link_defineProperty","sidebar_channel_button_or_link_assertThisInitialized","trackChannelSelectedEvent","gmItemRef","removeAttribute","unreadMentions","sidebar_channel_button_or_link_icon_SidebarChannelButtonOrLinkIcon","sidebar_channel_button_or_link_close_button_SidebarChannelButtonOrLinkCloseButton","unreadMsgs","showUnreadForMsgs","rowClass","displayNameToolTip","channelTooltip","removeTooltipLink","SidebarTutorialTip","townSquareDisplayName","DEFAULT_CHANNEL_UI_NAME","offTopicDisplayName","OFFTOPIC_CHANNEL_UI_NAME","townsquare","offtopic","SidebarChannel","isLeaving","channelTeammateId","closeHandler","showChannelAsUnread","shouldHideChannel","handleLeaveDirectChannel","EnableXToLeaveChannelsFromLHS","handleLeavePublicChannel","handleLeavePrivateChannel","linkClass","channelMuted","sidebar_tutorial_tip_SidebarTutorialTip","openLhs","channelFake","channelStringified","channelTeammateUsername","sidebar_channel_button_or_link_SidebarChannelButtonOrLink","channelTeammateDeletedAt","channelTeammateIsBot","channelsByName","memberIds","total_msg_count","mark_unread","NotificationLevels","teammate_id","shouldHideDefaultChannel","isChannelMuted","CHANNEL_POPOVER","OFFTOPIC_CHANNEL","ChannelCreate","ariaLabelPublic","createPublicChannel","ariaLabelPrivate","createPrivateChannel","ariaLabelDM","createDirectMessage","renderPublic","renderPrivate","createPublicDirectChannel","sectionType","renderDirect","renderCombined","ChannelMore","moreDirectMessages","browsePublicDirectChannels","clickableChannelHeader","ChannelName","tooltipTriggers","formattedMessageId","sectionTypeFormatMessageId","createPublicDirectChannelTooltip","MorePublicDirectChannels","activeKey","handleSelect","more_channels","more_direct_channels","Sidebar","sidebar_classCallCheck","sidebar_getPrototypeOf","sidebar_defineProperty","sidebar_assertThisInitialized","showDirectChannelsModal","hideMoreDirectChannelsModal","showMoreDirectChannelsModal","currentTeammate","currentSiteName","mentionTitle","unreadTitle","messageCount","updateUnreadIndicators","spring","scrollbar","getCurrentValue","firstUnreadChannel","displayedChannels","getDisplayedChannels","orderedChannelIds","unreadScrollAnimate","setCurrentValue","setAtRest","MathUtil","mapValueInRange","setEndValue","lastUnreadChannel","lastUnreadElement","showTopUnread","showBottomUnread","firstUnreadElement","firstUnreadPosition","lastUnreadPosition","curChannel","CHANNEL_SCROLL_ADJUSTMENT","isSwitchingChannel","allChannelIds","curChannelId","curIndex","nextIndex","nextChannelId","updateScrollbarOnChannelChange","K","handleOpenMoreDirectChannelsModal","ChannelUtils","sidebar_toConsumableArray","showMorePublicChannelsModal","hideMorePublicDirectChannelsModal","showNewChannelModal","showMoreChannelsModal","newChannelModalType","QUICK_SWITCH","sidebar_channel","sectionsToHide","SidebarChannelGroups","UNREADS","FAVORITE","sec","createSidebarChannel","sectionId","channel_name_ChannelName","showMorePublicDirectChannelsModal","channel_create_ChannelCreate","showNewPublicChannelModal","showNewPrivateChannelModal","channel_more_ChannelMore","badgesActive","closedDirectChannel","animate","SpringSystem","createSpring","setOvershootClampingEnabled","onSpringUpdate","handleScrollAnimationUpdate","navigateChannelShortcut","navigateUnreadChannelShortcut","channelIdIsDisplayedForProps","updateTitle","setFirstAndLastUnreadChannels","deregisterSpring","removeAllListeners","destroy","lastBadgesActive","redFavicon","favicon","head","oldLink","channelSwitcherOption","moreDirectChannelsModal","moreChannelsModal","hideMoreChannelsModal","morePublicDirectChannelsModal","quickSwitchText","quickSwitchTextShortcutId","quickSwitchTextShortcutDefault","quickSwitchTextShortcut","openQuickSwitcher","more_public_direct_channels_MorePublicDirectChannels","onHandleNewChannel","new_channel_flow","hideNewChannelModal","sidebar_header","unread_channel_indicator_UnreadChannelIndicator","scrollToFirstUnreadChannel","scrollToLastUnreadChannel","renderOrderedChannels","sidebarPrefs","getSidebarPreferences","keepChannelIdAsUnread","getOrderedChannelIds","grouping","sorting","unreads_at_top","favorite_at_top","getBoolPreference","CATEGORY_SIDEBAR_SETTINGS","getUnreads","focusPost","returnTo","PERMALINK_NOT_FOUND","RECEIVED_FOCUSED_POST","EditChannelHeaderModal","edit_channel_header_modal_classCallCheck","edit_channel_header_modal_getPrototypeOf","edit_channel_header_modal_defineProperty","edit_channel_header_modal_assertThisInitialized","patchChannel","editChannelHeaderTextbox","blurTextbox","showError","nextRequestStatus","requestStatus","FAILURE","headerTitle","handleEntering","mapStateToProps","updateChannel","submitInfo","edit_channel_header_modal_objectSpread","ChannelInviteModal","channel_invite_modal_classCallCheck","channel_invite_modal_getPrototypeOf","channel_invite_modal_defineProperty","channel_invite_modal_assertThisInitialized","inviteError","handleInviteError","channel_invite_modal_asyncToGenerator","not_in_channel_id","profilesNotInCurrentChannel","getProfilesNotInCurrentChannel","ChannelMembersDropdown","channel_members_dropdown_classCallCheck","channel_members_dropdown_getPrototypeOf","channel_members_dropdown_defineProperty","channel_members_dropdown_assertThisInitialized","removing","removeChannelMember","channel_members_dropdown_asyncToGenerator","updateChannelMemberSchemeRoles","supportsChannelAdmin","renderRole","canChangeMemberRoles","canRemoveFromChannel","canRemoveMember","canMakeChannelMember","canMakeChannelAdmin","handleMakeChannelMember","handleMakeChannelAdmin","handleRemoveFromChannel","MANAGE_CHANNEL_ROLES","MemberListChannel","member_list_channel_classCallCheck","member_list_channel_getPrototypeOf","member_list_channel_defineProperty","member_list_channel_assertThisInitialized","loadProfilesAndTeamMembersAndChannelMembers","member_list_channel_asyncToGenerator","in_channel_id","loadTeamMembersAndChannelMembersForProfilesList","totalChannelMembers","getUsersAndActionsToDisplay","getMembersInCurrentChannel","sortByUsername","searchProfilesInCurrentChannel","member_list_channel_objectSpread","ChannelMembersModal","channel_members_modal_classCallCheck","channel_members_modal_getPrototypeOf","channel_members_modal_defineProperty","channel_members_modal_assertThisInitialized","CHANNEL_INVITE","canManageChannelMembers","onAddNewMembersButton","member_list_channel","MemberIcon","MessageIcon","PopoverListMembersItem","messageIcon","showMessageIcon","message_icon_MessageIcon","botClass","PopoverListMembers","popover_list_members_classCallCheck","popover_list_members_getPrototypeOf","popover_list_members_defineProperty","popover_list_members_assertThisInitialized","closePopover","showPopover","showChannelMembersModal","showChannelInviteModal","showTeamMembersModal","popoverTarget","loadProfilesAndStatusesInChannel","membersList","sortedUsers","sortUsers","popoverButton","isDirectChannel","popover_list_members_item_PopoverListMembersItem","membersName","manageMembers","showMembersModal","countText","channelMembersModal","teamMembersModal","channelInviteModal","channel_members_modal","hideChannelMembersModal","showInviteModal","team_members_modal","hideTeamMembersModal","channel_invite_modal","hideChannelInviteModal","channelMembersTooltip","handleGetProfilesInChannel","member_icon_MemberIcon","getTargetPopover","doGetProfilesInChannel","getUserStatuses","PinIcon","ChannelHeaderDropdown","ChannelHeaderDropdownItems","MobileChannelHeaderPlug","plug","fireAction","isDropdown","plugs","createButton","createList","getMyCurrentChannelMembership","MobileChannelHeaderButton","Describe","memberNotifyLevel","globalNotifyLevel","ignoreChannelMentions","DEFAULT","levelsFormattedMessageId","NotificationSections","MARK_UNREAD","IGNORE_CHANNEL_MENTIONS","IgnoreChannelMentions","ON","OFF","DESKTOP","PUSH","ALL","SectionTitle","CollapseView","onExpandSection","ExtraInfo","ExpandView","onCollapseSection","NONE","server_error","NotificationSection","onUpdateSection","globalNotificationLevel","memberNotificationLevel","handleOnChange","handleCollapseSection","handleExpandSection","ChannelNotificationsModal","channel_notifications_modal_classCallCheck","channel_notifications_modal_getPrototypeOf","channel_notifications_modal_defineProperty","channel_notifications_modal_assertThisInitialized","channelNotifyProps","resetStateFromNotifyProps","updateChannelNotifyProps","desktopNotifyLevel","desktop","handleUpdateChannelNotifyProps","markUnreadNotifyLevel","pushNotifyLevel","ignore_channel_mentions","channel_notifications_modal_objectSpread","getStateFromNotifyProps","prevChannelNotifyProps","channelMemberNotifyProps","currentUserNotifyProps","ignoreChannelMentionsDefault","sendPushNotifications","serverErrorTag","notification_section_NotificationSection","handleUpdateMarkUnreadLevel","handleSubmitMarkUnreadLevel","handleUpdateIgnoreChannelMentions","handleSubmitIgnoreChannelMentions","handleUpdateDesktopNotifyLevel","handleSubmitDesktopNotifyLevel","handleUpdatePushNotificationLevel","handleSubmitPushNotificationLevel","SendPushNotifications","headerMarkdownOptions","ChannelInfoModal","channel_info_modal_classCallCheck","channel_info_modal_getPrototypeOf","channel_info_modal_defineProperty","channel_info_modal_assertThisInitialized","getHeaderMarkdownOptions","channel_info_modal_objectSpread","channelIcon","notFound","channelPurposeElement","channelURL","EditChannelPurposeModal","edit_channel_purpose_modal_classCallCheck","edit_channel_purpose_modal_getPrototypeOf","edit_channel_purpose_modal_defineProperty","edit_channel_purpose_modal_assertThisInitialized","nextServerError","setError","unsetError","channelPurposeModal","getPurpose","requestInfo","edit_channel_purpose_modal_objectSpread","required","lowercase","defaultError","displayNameHolder","handleHolder","RenameChannelModal","rename_channel_modal_classCallCheck","rename_channel_modal_getPrototypeOf","rename_channel_modal_defineProperty","rename_channel_modal_assertThisInitialized","nameError","invalid","oldName","onSaveSuccess","rename_channel_modal_inherits","nameClass","urlInputLabel","readOnlyHandleInput","fullUrl","shortUrl","onDisplayNameChange","onNameChange","teamInfo","rename_channel_modal_objectSpread","ConvertChannelModal","convert_channel_modal_classCallCheck","convert_channel_modal_getPrototypeOf","convert_channel_modal_defineProperty","convert_channel_modal_assertThisInitialized","CHANNEL_ID_LENGTH","convertChannelToPrivate","handleConvert","currentTeamDetails","DeleteChannelModal","delete_channel_modal_classCallCheck","delete_channel_modal_getPrototypeOf","delete_channel_modal_assertThisInitialized","canViewArchivedChannels","penultimateViewedChannelName","deleteChannel","ChannelGroupsManageModal","getGroupsAssociatedToChannel","channel_groups_manage_modal_asyncToGenerator","MANAGE_CHANNEL_GROUPS","channelID","LeaveChannel","isDefault","handleLeave","CloseChannel","isArchived","MenuItemToggleMuteChannel","isMuted","ToggleFavoriteChannel","isFavorite","favoriteChannel","toggleFavoriteChannel","ViewPinnedPosts","hasPinnedPosts","isReadonly","isPrivate","isGroupConstrained","channelMembersPermission","channelPropertiesPermission","MANAGE_PRIVATE_CHANNEL_PROPERTIES","MANAGE_PUBLIC_CHANNEL_PROPERTIES","channelDeletePermission","DELETE_PRIVATE_CHANNEL","DELETE_PUBLIC_CHANNEL","CHANNEL_INFO","toggle_favorite_channel","view_pinned_posts","CHANNEL_NOTIFICATIONS","toggle_mute_channel","CREATE_DM_CHANNEL","CHANNEL_MEMBERS","ADD_GROUPS_TO_CHANNEL","EDIT_CHANNEL_HEADER","EDIT_CHANNEL_PURPOSE","RENAME_CHANNEL","DELETE_CHANNEL","mobile_channel_header_plug","leave_channel","close_channel","MobileChannelHeaderDropdownAnimation","MobileChannelHeaderDropdown","getDisplayNameByUserId","dmHeaderIconStatus","teammateStatus","getChannelTitle","getTeammateId","getTeammateStatus","userStatuses","Desktop","isCurrentChannelDefault","isCurrentChannelFavorite","isCurrentChannelMuted","isCurrentChannelReadOnly","isCurrentChannelArchived","Items","Mobile","CustomMenu","onClose","rootCloseEvent","react_overlays_es","onRootClose","handleRootClose","CustomToggle","activeClass","dropdownOpen","ChannelHeaderPlug","channel_header_plug_classCallCheck","channel_header_plug_defineProperty","channel_header_plug_assertThisInitialized","channel_header_plug_possibleConstructorReturn","channel_header_plug_getPrototypeOf","toggleDropdown","fireActionAndClose","Dropdown","channel_header_plug_CustomToggle","bsRole","channel_header_plug_CustomMenu","createDropdown","ChannelHeaderButton","popoverMarkdownOptions","SEARCH_BAR_MINIMUM_WINDOW_SIZE","ChannelHeader","channel_header_classCallCheck","channel_header_getPrototypeOf","channel_header_defineProperty","channel_header_assertThisInitialized","showSearchBar","M","headerOverlay","toggleQuickSwitchModal","isQuickSwitcherOpen","toggleFavoriteRef","channel_header_objectSpread","getPopoverMarkdownOptions","getCustomEmojisInText","handleShortcut","handleQuickSwitchKeyPress","dmUser","ariaLabelChannelHeader","channelTitle","archivedIcon","popoverListMembers","dmHeaderTextStatus","headerTextContainer","isDirect","isGroup","popover_list_members","toggleFavoriteTooltip","headerText","popoverContent","bStyle","bSize","handleOnMouseOver","handleOnMouseOut","editMessage","showEditChannelHeaderModal","toggleFavorite","muteTrigger","channelMutedTooltip","unmute","pinnedIconClass","aria-level","components_channel_header_dropdown_ChannelHeaderDropdown","data-channelid","channel_header_plug","pin_icon_PinIcon","searchButtonClick","dmUserId","NewMessagesBelow","new_messages_below_classCallCheck","new_messages_below_possibleConstructorReturn","new_messages_below_getPrototypeOf","rendered","newMessages","atBottom","onTransitionEnd","setRendered","countUnreadsBelow","getAllPosts","lastViewedBottom","allPosts","preparePostIdsForPostList","makePreparePostIdsForPostList","lastViewedAt","CommentedOnFilesMessage","plusMore","selectFileInfosForPost","CommentedOn","makeUsername","commented_on_files_message","webhookMessage","fallback","makeCommentedOnMessage","onCommentClick","stripMarkdown","getDisplayNameByUser","PostBody","post_body_classCallCheck","post_body_possibleConstructorReturn","post_body_getPrototypeOf","sendingAction","sending","comment","failedOptions","parentPost","isFirstReply","commented_on","fileAttachmentHolder","messageWithAdditionalContent","mentionHighlightClass","isCommentMention","ephemeralPostClass","parentPostUser","PostInfo","post_info_classCallCheck","post_info_getPrototypeOf","post_info_defineProperty","post_info_assertThisInitialized","showDotMenu","commentIcon","commentIconExtraClass","replyCount","getDotMenu","handleDotMenuOpened","isCardOpen","buildOptions","showTimeWithoutHover","selectedCard","mobileView","PostHeader","indicator","colon","post_info","Post","post_classCallCheck","post_getPrototypeOf","post_defineProperty","post_assertThisInitialized","opened","togglePostMenu","previousPostIsComment","consecutivePostByUser","isMeMessage","fromBot","shouldHighlight","rootUser","sameRoot","currentUserCss","sameUserClass","ariaHidden","createAriaLabel","hasSameRoot","checkIsMeMessage","from_bot","hideProfilePicture","centerClass","center","removeFocus","onTouchStart","aria-atomic","post_header","post_body","getReplyCount","postsInThread","isPostCommentMention","makeIsPostCommentMention","createAriaLabelForPost","makeCreateAriaLabelForPost","CHANNEL_DISPLAY_MODE","CHANNEL_DISPLAY_MODE_DEFAULT","CHANNEL_DISPLAY_MODE_CENTERED","generateCombinedPost","makeGenerateCombinedPost","combinedId","ScrollToBottomIcon","ScrollToBottomArrows","scroll_to_bottom_icon_ScrollToBottomIcon","ChannelIntroMessage","fullWidth","channelProfiles","centeredIntro","teammateName","createSetHeaderButton","createDMIntroMessage","pictures","createGMIntroMessage","toggle_modal_button","setHeaderButton","createDefaultIntroMessage","channelInviteButton","createInviteChannelButton","createOffTopicIntroMessage","memberMessage","creatorName","creator_id","getMonthLong","creator","purposeMessage","createStandardIntroMessage","CHANNEL_DISPLAY_MODE_FULL_SCREEN","CLOSE_TO_BOTTOM_SCROLL_MARGIN","POSTS_PER_PAGE","MAX_EXTRA_PAGES_LOADED","PostList","post_list_ie_classCallCheck","post_list_ie_getPrototypeOf","post_list_ie_defineProperty","post_list_ie_assertThisInitialized","isDoingInitialLoad","atEnd","postListContent","postlist","extraPagesLoaded","doLoadPostsToFillScreen","hasScrolledToNewMessageSeparator","postList","messageSeparator","setUnreadsBelow","unViewedCount","lastViewed","forceScrollToBottom","doScrollToBottom","hasScrolled","previousScrollHeight","previousScrollTop","previousClientHeight","checkBottom","post_list_ie_asyncToGenerator","hasScrolledToFocusedPost","domNode","topPost","postCtls","renderedLastViewed","postCtl","isCombinedUserActivityPost","combined_user_activity_post","post_view_post","isFromWebhook","newSeparatorId","MAX_SAFE_INTEGER","loadingPosts","handleWindowResize","initialScroll","nextChannel","loadPostsToFillScreenIfNecessary","postVisibility","prevPosts","hasNewPosts","focusedPost","didInitialScroll","prevPostId","pendingPostId","topRow","data-a11y-loop-navigation","channel_intro_message","MAX_POST_VISIBILITY","topPostCreateAt","scroll_to_bottom_arrows_ScrollToBottomArrows","new_messages_below","createPosts","getPostsInChannel","makeGetPostsInChannel","getPostsAroundPost","makeGetPostsAroundPost","combineUserActivityPosts","makeCombineUserActivityFromPosts","lastChannelViewTime","NewMessageSeparator","separatorId","PostListRow","listId","previousListId","new_message_separator_NewMessageSeparator","PostListRowListIds","CHANNEL_INTRO_MESSAGE","LOAD_OLDER_MESSAGES_TRIGGER","LOAD_NEWER_MESSAGES_TRIGGER","loadOlderPosts","loadNewerPosts","OLDER_MESSAGES_LOADER","NEWER_MESSAGES_LOADER","OVERSCAN_COUNT_BACKWARD","OVERSCAN_COUNT_FORWARD","HEIGHT_TRIGGER_FOR_MORE_POSTS","BUFFER_TO_BE_CONSIDERED_BOTTOM","MAXIMUM_POSTS_FOR_SLICING","permalink","postListStyle","virtListStyles","post_list_virtualized_classCallCheck","post_list_virtualized_getPrototypeOf","post_list_virtualized_defineProperty","post_list_virtualized_assertThisInitialized","postListIds","START_OF_NEW_MESSAGES","toBottom","scrollToLatestMessages","dynamicListStyle","postMenuOpened","willChange","itemId","previousItemId","nextItemId","isDateLine","isStartOfNewMessages","basePaddingClass","post_list_row","getPreviousPostId","scrollDirection","scrollOffset","scrollUpdateWasRequested","didUserScrollForwards","offsetFromBottom","atOldestPost","atLatestPost","listRef","_getRangeToRender","canLoadMorePosts","AFTER_ID","updateAtBottom","isAtBottom","latestPostTimeStamp","visibleTopItem","topPostId","getLatestPostId","visibleStartIndex","newMessagesSeparatorIndex","changeUnreadChunkTimeStamp","channelIntroMessage","postListRef","initRangeToRender","postIndex","getNewMessagesSeparatorIndex","maxPostsForSlicing","newPostListIds","post_list_virtualized_toConsumableArray","autoRetryEnable","scrollChange","postsAddedAtTop","channelHeaderAdded","postListNode","snapshot","postlistScrollHeight","scrollValue","latestAriaLabelFunc","newMessagesBelow","index_esm","dist_index_esm","itemCount","itemData","itemKey","overscanCountForward","overscanCountBackward","onItemsRendered","initScrollToIndex","skipResizeClass","innerRef","post_list_virtualized_objectSpread","innerListStyle","loaderId","correctScrollToBottom","MAX_NUMBER_OF_AUTO_RETRIES","post_list_classCallCheck","post_list_getPrototypeOf","post_list_defineProperty","post_list_assertThisInitialized","post_list_asyncToGenerator","isFirstLoad","loadingOlderPosts","loadingNewerPosts","autoRetriesCount","callLoadPosts","getOldestPostId","oldestPostId","_args3","getOldestVisiblePostId","getPostsBefore","getLatestVisiblePostId","getPostsAfter","loadingMorePosts","actionsForPostList","postsOnLoad","post_list_virtualized_PostList","formattedPostIds","PostListWrapper","IePostList","postsInChannel","memoizedGetLatestPostId","getPostsChunkAroundPost","makeGetPostsChunkAroundPost","chunk","params","postid","unreadChunkTimeStamp","getUnreadPostsChunk","getRecentPostsChunkInChannel","oldest","indicateNewMessages","latestPost","PostView","post_view_classCallCheck","post_view_getPrototypeOf","post_view_defineProperty","post_view_assertThisInitialized","loaderForChangeOfPostsChunk","channelLoading","post_view_post_list","isChannelLoading","teamMemberships","identifier","last_post_at","PermalinkView","permalink_view_classCallCheck","permalink_view_getPrototypeOf","permalink_view_defineProperty","permalink_view_assertThisInitialized","doPermalinkEvent","isStateValid","post_view","NotifyCounts","_getUnreadsInCurrentT","getUnreadsInCurrentTeam","CollapseLhsButton","toggleLhs","data-target","notify_counts","CollapseRhsButton","toggleRhsMenu","InfoIcon","NavbarInfoButton","addOne","clickHere","bsStyle","info_icon_InfoIcon","ChannelInfoButton","ShowSearchButton","UnmuteChannelButton","ChannelHeaderMobile","closeRhs","hideSidebars","channel_header_mobile_collapse_lhs_button","channel_header_dropdown_MobileChannelHeaderDropdown","unmute_channel_button","channel_info_button","show_search_button","channel_header_mobile_collapse_rhs_button","membership","LENGTH_OF_ID","LENGTH_OF_GROUP_ID","LENGTH_OF_USER_ID_PAIR","onChannelByIdentifierEnter","_match$params","teamObj","moreChannelsByName","goToChannelByChannelName","channel_identifier_router_actions_asyncToGenerator","_match$params2","handleChannelJoinError","goToDirectChannelByUserId","goToChannelByChannelId","goToGroupChannelByGroupId","goToDirectChannelByUserIds","_match$params4","_data","selectUserByUsername","doChannelChange","goToDirectChannelByUsername","_match$params6","selectUserByEmail","getUserByEmail","goToDirectChannelByEmail","_match$params3","data2","getChannelsNameMapInTeam","selectUser","_match$params5","_match$params7","groupId","markGroupChannelOpen","deferComponentRender","PreRenderComponent","DeferredRenderWrapper","_React$Component","deferComponentRender_classCallCheck","deferComponentRender_possibleConstructorReturn","deferComponentRender_getPrototypeOf","shouldRender","deferComponentRender_inherits","hoistStatics","trimRight","str","CreatePost","create_post_classCallCheck","create_post_getPrototypeOf","create_post_defineProperty","create_post_assertThisInitialized","onOrientationChange","prevOrientation","abs","handleEmojiClose","create_post_asyncToGenerator","enableSendButton","create_post_objectSpread","sendReaction","setDraft","draftsForChannel","tokens","userIsOutOfOffice","currentMembersCount","editChannelHeaderModalData","isDirectOrGroup","editChannelPurposeModalData","currentChannelMembersCount","getStatusFromSlashCommand","isStatusSlashCommand","onSubmitPost","lastChannelSwitchAt","ignoreKeyPress","handleEnableSendButton","create_post_toConsumableArray","itemIndex","FORWARD_SLASH","createPostControls","ctrlOrMetaKeyPressed","messageIsEmpty","draftMessageIsEmpty","ctrlEnterKeyCombo","upKeyOnly","shiftUpKeyCombo","ctrlKeyCombo","postMsgKeyPress","editLastPost","replyToLastPost","loadPrevMessage","loadNextMessage","currentUsersLatestPost","POST","latestReplyablePostId","replyBox","selectPostFromRightHandSideSearchByPostId","fillMessageFromHistory","clearDraftUploads","documentKeyHandler","setOrientationListeners","removeOrientationListeners","lastMessage","messageInHistoryItem","fullWidthTextBox","ariaLabelMessageInput","postFooterClassName","createTutorialTip","sendButtonClass","attachmentsDisabled","getCreatePostControls","getChannelView","recentPostIdInChannel","getLatestReplyablePostId","PreferencesRedux","POST_POPOVER","NUM_SCREENS","TutorialIntroScreens","tutorial_intro_screens_classCallCheck","tutorial_intro_screens_getPrototypeOf","tutorial_intro_screens_defineProperty","tutorial_intro_screens_assertThisInitialized","createScreenOne","createScreenTwo","createScreenThree","circles","createCircles","appDownloadImage","AppIcons","inviteModalLink","inviteText","restrictTeamInvite","INVITE_TEAM","inviteMessage","supportInfo","supportEmail","createScreen","TutorialView","isRoot","tutorial_intro_screens","townSquare","SupportEmail","ChannelView","channel_view_classCallCheck","channel_view_getPrototypeOf","channel_view_defineProperty","channel_view_assertThisInitialized","deferredPostView","channelView","createDeferredPostView","platform","navigator","dur1","channel_view_slicedToArray","measure","dur2","clearMarks","round","showTutorial","tutorial","deactivatedChannel","create_post","onClickCloseChannel","DeferredPostView","getDeactivatedChannel","INTRO_SCREENS","ChannelIdentifierRouter","channel_identifier_router_classCallCheck","channel_identifier_router_possibleConstructorReturn","channel_identifier_router_getPrototypeOf","channel_view","CenterChannel","center_channel_classCallCheck","center_channel_possibleConstructorReturn","center_channel_getPrototypeOf","lastChannelPath","lhsOpen","rhsOpen","move--left-small","rhsMenuOpen","channel_header_mobile","react_router","permalink_view","ChannelController","pathName","announcement_bar","system_notice","sidebar_right","sidebar_right_menu","get_post_link_modal","get_public_link_modal","get_team_invite_link_modal","import_theme_modal_ImportThemeModal","edit_post_modal","reset_status_modal","components_leave_private_channel_modal","shortcuts_modal","modal_controller","wakeUpInterval","BackstageController","loadBackstageController","lastTime","WAKEUP_CHECK_INTERVAL","WAKEUP_THRESHOLD","UNREAD_CHECK_TIME_MILLISECONDS","needs_team_classCallCheck","needs_team_defineProperty","needs_team_assertThisInitialized","needs_team_possibleConstructorReturn","needs_team_getPrototypeOf","blurTime","fetchMyChannelsAndMembers","loadProfilesForDirect","initTeam","selectTeam","setPreviousTeamId","finishedFetchingChannels","loadStatusesForChannelAndSidebar","teamsList","L","replyTextbox","mfaRequired","updateCurrentTeam","joinTeam","startPeriodicStatusUpdates","iNoBounce","onShortcutKeyDown","disable","renderProps","channel_controller_ChannelController","previousTriggerId","subscribe","Redux","ReactRedux","ReactBootstrap","formatText","PDFJS","openInteractiveDialog","IntlProvider","setAcceptLanguage","loadTranslationsIfNecessary","localeInfo","setLocalizeFunction","handleLocaleChange","messages"],"mappings":"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","file":"5.d2c8d1d50a1a1f06dc57.js","sourcesContent":["// Copyright (c) 2015-present Mattermost, Inc. All Rights Reserved.\n// See LICENSE.txt for license information.\n\nimport {bindActionCreators} from 'redux';\nimport {connect} from 'react-redux';\n\nimport {getConfig} from 'mattermost-redux/selectors/entities/general';\nimport {shouldShowTermsOfService} from 'mattermost-redux/selectors/entities/users';\n\nimport {loadMeAndConfig} from 'actions/views/root';\n\nimport Root from './root.jsx';\n\nfunction mapStateToProps(state) {\n    const config = getConfig(state);\n    const showTermsOfService = shouldShowTermsOfService(state);\n\n    return {\n        diagnosticsEnabled: config.DiagnosticsEnabled === 'true',\n        noAccounts: config.NoAccounts === 'true',\n        diagnosticId: config.DiagnosticId,\n        showTermsOfService,\n    };\n}\n\nfunction mapDispatchToProps(dispatch) {\n    return {\n        actions: bindActionCreators({\n            loadMeAndConfig,\n        }, dispatch),\n    };\n}\n\nexport default connect(mapStateToProps, mapDispatchToProps)(Root);\n","// Copyright (c) 2015-present Mattermost, Inc. All Rights Reserved.\n// See LICENSE.txt for license information.\n\nimport React from 'react';\nimport {injectIntl, intlShape} from 'react-intl';\nimport PropTypes from 'prop-types';\nimport marked from 'marked';\n\nconst TARGET_BLANK_URL_PREFIX = '!';\n\nexport class CustomRenderer extends marked.Renderer {\n    link(href, title, text) {\n        if (href[0] === TARGET_BLANK_URL_PREFIX) {\n            return `<a href=\"${href.substring(1, href.length)}\" rel=\"noreferrer\" target=\"_blank\">${text}</a>`;\n        }\n        return `<a href=\"${href}\">${text}</a>`;\n    }\n\n    paragraph(text) {\n        return text;\n    }\n}\n\n/*\n* Translations component with the same API as react-intl's <FormattedMessage> component except the message string\n* accepts markdown. It supports the following non-block-level markdown:\n* - *italic*\n* - **bold**\n* - `inline code`\n* - ~~strikethrough~~\n* - [link](http://example.com/)\n* - [link in new tab](!http://example.com/)\n* - line\\nbreaks\n*\n* Note: Line breaks (\\n) in a defaultMessage parameter string must be surrounded by curly brackets {} in JSX. Example:\n* <FormattedMarkdownMessage id='my.example' defaultMessage={'first line\\nsecond line'} />\n*/\nclass FormattedMarkdownMessage extends React.PureComponent {\n    static get propTypes() {\n        return {\n            intl: intlShape.isRequired,\n            id: PropTypes.string.isRequired,\n            defaultMessage: PropTypes.string.isRequired,\n            values: PropTypes.object,\n        };\n    }\n\n    render() {\n        const origMsg = this.props.intl.formatMessage({\n            id: this.props.id,\n            defaultMessage: this.props.defaultMessage,\n        }, this.props.values);\n\n        const markedUpMessage = marked(origMsg, {\n            breaks: true,\n            sanitize: true,\n            renderer: new CustomRenderer(),\n        });\n\n        return (<span dangerouslySetInnerHTML={{__html: markedUpMessage}}/>);\n    }\n}\n\nexport default injectIntl(FormattedMarkdownMessage);\n","// Copyright (c) 2015-present Mattermost, Inc. All Rights Reserved.\n// See LICENSE.txt for license information.\n\nimport {batchActions} from 'redux-batched-actions';\n\nimport {\n    createDirectChannel,\n    getChannelByNameAndTeamName,\n    getChannelStats,\n    getMyChannelMember,\n    markChannelAsRead,\n    markChannelAsViewed,\n    selectChannel,\n} from 'mattermost-redux/actions/channels';\nimport {logout, loadMe} from 'mattermost-redux/actions/users';\nimport {getConfig} from 'mattermost-redux/selectors/entities/general';\nimport {getCurrentTeamId, getTeam, getMyTeams, getMyTeamMember, getTeamMemberships} from 'mattermost-redux/selectors/entities/teams';\nimport {getCurrentUserId} from 'mattermost-redux/selectors/entities/users';\nimport {getCurrentChannelStats, getCurrentChannelId, getChannelByName, getMyChannelMember as selectMyChannelMember} from 'mattermost-redux/selectors/entities/channels';\nimport {ChannelTypes} from 'mattermost-redux/action_types';\n\nimport {browserHistory} from 'utils/browser_history';\nimport {handleNewPost} from 'actions/post_actions.jsx';\nimport {stopPeriodicStatusUpdates} from 'actions/status_actions.jsx';\nimport {loadProfilesForSidebar} from 'actions/user_actions.jsx';\nimport {closeRightHandSide, closeMenu as closeRhsMenu, updateRhsState} from 'actions/views/rhs';\nimport {clearUserCookie} from 'actions/views/cookie';\nimport {close as closeLhs} from 'actions/views/lhs';\nimport * as WebsocketActions from 'actions/websocket_actions.jsx';\nimport AppDispatcher from 'dispatcher/app_dispatcher.jsx';\nimport {getCurrentLocale} from 'selectors/i18n';\nimport {getIsRhsOpen, getRhsState} from 'selectors/rhs';\nimport BrowserStore from 'stores/browser_store.jsx';\nimport store from 'stores/redux_store.jsx';\nimport LocalStorageStore from 'stores/local_storage_store';\nimport WebSocketClient from 'client/web_websocket_client.jsx';\n\nimport {ActionTypes, Constants, PostTypes, RHSStates} from 'utils/constants.jsx';\nimport {filterAndSortTeamsByDisplayName} from 'utils/team_utils.jsx';\nimport * as Utils from 'utils/utils.jsx';\n\nconst dispatch = store.dispatch;\nconst getState = store.getState;\n\nexport function emitChannelClickEvent(channel) {\n    async function userVisitedFakeChannel(chan, success, fail) {\n        const state = getState();\n        const currentUserId = getCurrentUserId(state);\n        const otherUserId = Utils.getUserIdFromChannelName(chan);\n        const {data: receivedChannel} = await createDirectChannel(currentUserId, otherUserId)(dispatch, getState);\n        if (receivedChannel) {\n            success(receivedChannel);\n        } else {\n            fail();\n        }\n    }\n    function switchToChannel(chan) {\n        const state = getState();\n        const getMyChannelMemberPromise = dispatch(getMyChannelMember(chan.id));\n        const oldChannelId = getCurrentChannelId(state);\n        const userId = getCurrentUserId(state);\n        const teamId = chan.team_id || getCurrentTeamId(state);\n        const isRHSOpened = getIsRhsOpen(state);\n        const isPinnedPostsShowing = getRhsState(state) === RHSStates.PIN;\n        const member = selectMyChannelMember(state, chan.id);\n\n        getMyChannelMemberPromise.then(() => {\n            dispatch(getChannelStats(chan.id));\n\n            // Mark previous and next channel as read\n            dispatch(markChannelAsRead(chan.id, oldChannelId));\n            dispatch(markChannelAsViewed(chan.id, oldChannelId));\n        });\n\n        if (chan.delete_at === 0) {\n            const penultimate = LocalStorageStore.getPreviousChannelName(userId, teamId);\n            if (penultimate !== chan.name) {\n                LocalStorageStore.setPenultimateChannelName(userId, teamId, penultimate);\n                LocalStorageStore.setPreviousChannelName(userId, teamId, chan.name);\n            }\n        }\n\n        // When switching to a different channel if the pinned posts is showing\n        // Update the RHS state to reflect the pinned post of the selected channel\n        if (isRHSOpened && isPinnedPostsShowing) {\n            dispatch(updateRhsState(RHSStates.PIN, chan.id));\n        }\n\n        loadProfilesForSidebar();\n\n        dispatch(batchActions([{\n            type: ChannelTypes.SELECT_CHANNEL,\n            data: chan.id,\n        }, {\n            type: ActionTypes.SELECT_CHANNEL_WITH_MEMBER,\n            data: chan.id,\n            channel: chan,\n            member: member || {},\n        }]));\n    }\n\n    if (channel.fake) {\n        userVisitedFakeChannel(\n            channel,\n            (data) => {\n                switchToChannel(data);\n            },\n            () => {\n                browserHistory.push('/' + this.state.currentTeam.name);\n            }\n        );\n    } else {\n        switchToChannel(channel);\n    }\n}\n\nexport function emitCloseRightHandSide() {\n    dispatch(closeRightHandSide());\n}\n\nexport function toggleShortcutsModal() {\n    AppDispatcher.handleViewAction({\n        type: ActionTypes.TOGGLE_SHORTCUTS_MODAL,\n        value: true,\n    });\n}\n\nexport function showChannelPurposeUpdateModal(channel) {\n    AppDispatcher.handleViewAction({\n        type: ActionTypes.TOGGLE_CHANNEL_PURPOSE_UPDATE_MODAL,\n        value: true,\n        channel,\n    });\n}\n\nexport function showChannelNameUpdateModal(channel) {\n    AppDispatcher.handleViewAction({\n        type: ActionTypes.TOGGLE_CHANNEL_NAME_UPDATE_MODAL,\n        value: true,\n        channel,\n    });\n}\n\nexport function showGetPostLinkModal(post) {\n    AppDispatcher.handleViewAction({\n        type: ActionTypes.TOGGLE_GET_POST_LINK_MODAL,\n        value: true,\n        post,\n    });\n}\n\nexport function showGetPublicLinkModal(fileId) {\n    AppDispatcher.handleViewAction({\n        type: ActionTypes.TOGGLE_GET_PUBLIC_LINK_MODAL,\n        value: true,\n        fileId,\n    });\n}\n\nexport function showGetTeamInviteLinkModal() {\n    AppDispatcher.handleViewAction({\n        type: Constants.ActionTypes.TOGGLE_GET_TEAM_INVITE_LINK_MODAL,\n        value: true,\n    });\n}\n\nexport function showLeavePrivateChannelModal(channel) {\n    AppDispatcher.handleViewAction({\n        type: ActionTypes.TOGGLE_LEAVE_PRIVATE_CHANNEL_MODAL,\n        value: channel,\n    });\n}\n\nexport function sendEphemeralPost(message, channelId, parentId) {\n    const timestamp = Utils.getTimestamp();\n    const post = {\n        id: Utils.generateId(),\n        user_id: '0',\n        channel_id: channelId || getCurrentChannelId(getState()),\n        message,\n        type: PostTypes.EPHEMERAL,\n        create_at: timestamp,\n        update_at: timestamp,\n        root_id: parentId,\n        parent_id: parentId,\n        props: {},\n    };\n\n    dispatch(handleNewPost(post));\n}\n\nexport function sendAddToChannelEphemeralPost(user, addedUsername, addedUserId, channelId, postRootId = '', timestamp) {\n    const post = {\n        id: Utils.generateId(),\n        user_id: user.id,\n        channel_id: channelId || getCurrentChannelId(getState()),\n        message: '',\n        type: PostTypes.EPHEMERAL_ADD_TO_CHANNEL,\n        create_at: timestamp,\n        update_at: timestamp,\n        root_id: postRootId,\n        parent_id: postRootId,\n        props: {\n            username: user.username,\n            addedUsername,\n            addedUserId,\n        },\n    };\n\n    dispatch(handleNewPost(post));\n}\n\nlet lastTimeTypingSent = 0;\nexport function emitLocalUserTypingEvent(channelId, parentPostId) {\n    const userTyping = async (actionDispatch, actionGetState) => {\n        const state = actionGetState();\n        const config = getConfig(state);\n        const t = Date.now();\n        const stats = getCurrentChannelStats(state);\n        const membersInChannel = stats ? stats.member_count : 0;\n\n        if (((t - lastTimeTypingSent) > config.TimeBetweenUserTypingUpdatesMilliseconds) &&\n            (membersInChannel < config.MaxNotificationsPerChannel) && (config.EnableUserTypingMessages === 'true')) {\n            WebSocketClient.userTyping(channelId, parentPostId);\n            lastTimeTypingSent = t;\n        }\n\n        return {data: true};\n    };\n\n    return dispatch(userTyping);\n}\n\nexport function emitUserLoggedOutEvent(redirectTo = '/', shouldSignalLogout = true, userAction = true) {\n    // If the logout was intentional, discard knowledge about having previously been logged in.\n    // This bit is otherwise used to detect session expirations on the login page.\n    if (userAction) {\n        LocalStorageStore.setWasLoggedIn(false);\n    }\n\n    dispatch(logout()).then(() => {\n        if (shouldSignalLogout) {\n            BrowserStore.signalLogout();\n        }\n\n        BrowserStore.clear();\n        stopPeriodicStatusUpdates();\n        WebsocketActions.close();\n\n        clearUserCookie();\n\n        browserHistory.push(redirectTo);\n    }).catch(() => {\n        browserHistory.push(redirectTo);\n    });\n}\n\nexport function toggleSideBarRightMenuAction() {\n    return (doDispatch) => {\n        doDispatch(closeRightHandSide());\n        doDispatch(closeLhs());\n        doDispatch(closeRhsMenu());\n    };\n}\n\nexport function emitBrowserFocus(focus) {\n    dispatch({\n        type: ActionTypes.BROWSER_CHANGE_FOCUS,\n        focus,\n    });\n}\n\nexport async function redirectUserToDefaultTeam() {\n    let state = getState();\n\n    // Assume we need to load the user if they don't have any team memberships loaded\n    const shouldLoadUser = Utils.isEmptyObject(getTeamMemberships(state));\n\n    if (shouldLoadUser) {\n        await dispatch(loadMe());\n    }\n\n    state = getState();\n\n    const userId = getCurrentUserId(state);\n    const locale = getCurrentLocale(state);\n    const teamId = LocalStorageStore.getPreviousTeamId(userId);\n\n    let team = getTeam(state, teamId);\n    const myMember = getMyTeamMember(state, teamId);\n\n    if (!team || !myMember || !myMember.team_id) {\n        team = null;\n        let myTeams = getMyTeams(state);\n\n        if (myTeams.length > 0) {\n            myTeams = filterAndSortTeamsByDisplayName(myTeams, locale);\n            if (myTeams && myTeams[0]) {\n                team = myTeams[0];\n            }\n        }\n    }\n\n    if (userId && team) {\n        let channelName = LocalStorageStore.getPreviousChannelName(userId, team.id);\n        const channel = getChannelByName(state, channelName);\n        if (channel && channel.team_id === team.id) {\n            dispatch(selectChannel(channel.id));\n            channelName = channel.name;\n        } else {\n            const {data} = await dispatch(getChannelByNameAndTeamName(team.name, channelName));\n            if (data) {\n                dispatch(selectChannel(data.id));\n            }\n        }\n\n        browserHistory.push(`/${team.name}/channels/${channelName}`);\n    } else if (userId) {\n        browserHistory.push('/select_team');\n    }\n}\n","// Copyright (c) 2015-present Mattermost, Inc. All Rights Reserved.\n// See LICENSE.txt for license information.\n\nimport PropTypes from 'prop-types';\nimport React from 'react';\nimport {FormattedMessage} from 'react-intl';\n\nexport default class LoadingScreen extends React.Component {\n    static propTypes = {\n        position: PropTypes.oneOf(['absolute', 'fixed', 'relative', 'static', 'inherit']),\n        style: PropTypes.object,\n        message: PropTypes.node,\n    }\n\n    static defaultProps = {\n        position: 'relative',\n        style: {},\n    }\n\n    constructor(props) {\n        super(props);\n        this.state = {};\n    }\n\n    render() {\n        let message = (\n            <FormattedMessage\n                id='loading_screen.loading'\n                defaultMessage='Loading'\n            />\n        );\n\n        if (this.props.message) {\n            message = this.props.message;\n        }\n\n        return (\n            <div\n                className='loading-screen'\n                style={{position: this.props.position, ...this.props.style}}\n            >\n                <div className='loading__content'>\n                    <h3>\n                        {message}\n                    </h3>\n                    <div className='round round-1'/>\n                    <div className='round round-2'/>\n                    <div className='round round-3'/>\n                </div>\n            </div>\n        );\n    }\n}\n","// Copyright (c) 2015-present Mattermost, Inc. All Rights Reserved.\n// See LICENSE.txt for license information.\n\nimport PropTypes from 'prop-types';\nimport React from 'react';\nimport {Modal} from 'react-bootstrap';\nimport {FormattedMessage} from 'react-intl';\n\nexport default class ConfirmModal extends React.Component {\n    static propTypes = {\n\n        /*\n         * Set to show modal\n         */\n        show: PropTypes.bool.isRequired,\n\n        /*\n         * Title to use for the modal\n         */\n        title: PropTypes.node,\n\n        /*\n         * Message to display in the body of the modal\n         */\n        message: PropTypes.node,\n\n        /*\n         * The CSS class to apply to the confirm button\n         */\n        confirmButtonClass: PropTypes.string,\n\n        /*\n         * The CSS class to apply to the modal\n         */\n        modalClass: PropTypes.string,\n\n        /*\n         * Text/jsx element on the confirm button\n         */\n        confirmButtonText: PropTypes.node,\n\n        /*\n         * Text/jsx element on the cancel button\n         */\n        cancelButtonText: PropTypes.node,\n\n        /*\n         * Set to show checkbox\n         */\n        showCheckbox: PropTypes.bool,\n\n        /*\n         * Text/jsx element to display with the checkbox\n         */\n        checkboxText: PropTypes.node,\n\n        /*\n         * Function called when the confirm button or ENTER is pressed. Passes `true` if the checkbox is checked\n         */\n        onConfirm: PropTypes.func.isRequired,\n\n        /*\n         * Function called when the cancel button is pressed or the modal is hidden. Passes `true` if the checkbox is checked\n         */\n        onCancel: PropTypes.func.isRequired,\n\n        /**\n         * Function called when modal is dismissed\n         */\n        onExited: PropTypes.func,\n\n        /*\n         * Set to hide the cancel button\n         */\n        hideCancel: PropTypes.bool,\n    }\n\n    static defaultProps = {\n        title: '',\n        message: '',\n        confirmButtonClass: 'btn btn-primary',\n        confirmButtonText: '',\n        modalClass: '',\n    }\n\n    componentDidMount() {\n        if (this.props.show) {\n            document.addEventListener('keydown', this.handleKeypress);\n        }\n    }\n\n    componentWillUnmount() {\n        document.removeEventListener('keydown', this.handleKeypress);\n    }\n\n    shouldComponentUpdate(nextProps) {\n        return nextProps.show !== this.props.show;\n    }\n\n    UNSAFE_componentWillReceiveProps(nextProps) { // eslint-disable-line camelcase\n        if (this.props.show && !nextProps.show) {\n            document.removeEventListener('keydown', this.handleKeypress);\n        } else if (!this.props.show && nextProps.show) {\n            document.addEventListener('keydown', this.handleKeypress);\n        }\n    }\n\n    handleKeypress = (e) => {\n        if (e.key === 'Enter' && this.props.show) {\n            this.handleConfirm();\n        }\n    }\n\n    handleConfirm = () => {\n        const checked = this.refs.checkbox ? this.refs.checkbox.checked : false;\n        this.props.onConfirm(checked);\n    }\n\n    handleCancel = () => {\n        const checked = this.refs.checkbox ? this.refs.checkbox.checked : false;\n        this.props.onCancel(checked);\n    }\n\n    render() {\n        let checkbox;\n        if (this.props.showCheckbox) {\n            checkbox = (\n                <div className='checkbox text-right margin-bottom--none'>\n                    <label>\n                        <input\n                            ref='checkbox'\n                            type='checkbox'\n                        />\n                        {this.props.checkboxText}\n                    </label>\n                </div>\n            );\n        }\n\n        let cancelText;\n        if (this.props.cancelButtonText) {\n            cancelText = this.props.cancelButtonText;\n        } else {\n            cancelText = (\n                <FormattedMessage\n                    id='confirm_modal.cancel'\n                    defaultMessage='Cancel'\n                />\n            );\n        }\n\n        let cancelButton;\n        if (!this.props.hideCancel) {\n            cancelButton = (\n                <button\n                    type='button'\n                    className='btn btn-link btn-cancel'\n                    onClick={this.handleCancel}\n                >\n                    {cancelText}\n                </button>\n            );\n        }\n\n        return (\n            <Modal\n                className={'modal-confirm ' + this.props.modalClass}\n                dialogClassName='a11y__modal'\n                show={this.props.show}\n                onHide={this.props.onCancel}\n                onExited={this.props.onExited}\n                id='confirmModal'\n                role='dialog'\n                aria-labelledby='confirmModalLabel'\n            >\n                <Modal.Header closeButton={false}>\n                    <Modal.Title\n                        componentClass='h1'\n                        id='confirmModalLabel'\n                    >\n                        {this.props.title}\n                    </Modal.Title>\n                </Modal.Header>\n                <Modal.Body>\n                    {this.props.message}\n                    {checkbox}\n                </Modal.Body>\n                <Modal.Footer>\n                    {cancelButton}\n                    <button\n                        autoFocus={true}\n                        type='button'\n                        className={this.props.confirmButtonClass}\n                        onClick={this.handleConfirm}\n                        id='confirmModalButton'\n                    >\n                        {this.props.confirmButtonText}\n                    </button>\n                </Modal.Footer>\n            </Modal>\n        );\n    }\n}\n","// Copyright (c) 2015-present Mattermost, Inc. All Rights Reserved.\n// See LICENSE.txt for license information.\n\nimport PropTypes from 'prop-types';\nimport React from 'react';\nimport {intlShape} from 'react-intl';\n\nexport default class LocalizedInput extends React.Component {\n    static propTypes = {\n\n        placeholder: PropTypes.shape({\n            id: PropTypes.string.isRequired,\n            defaultMessage: PropTypes.string.isRequired,\n        }).isRequired,\n        value: PropTypes.string,\n    };\n\n    static contextTypes = {\n        intl: intlShape.isRequired,\n    };\n\n    constructor(props) {\n        super(props);\n\n        this.input = React.createRef();\n    }\n\n    get value() {\n        return this.input.current.value;\n    }\n\n    set value(value) {\n        this.input.current.value = value;\n    }\n\n    focus = () => {\n        this.input.current.focus();\n    };\n\n    shouldComponentUpdate(nextProps) {\n        return nextProps.value !== this.props.value ||\n            nextProps.placeholder.id !== this.props.placeholder.id ||\n            nextProps.placeholder.defaultMessage !== this.props.placeholder.defaultMessage;\n    }\n\n    render() {\n        const {formatMessage} = this.context.intl;\n        const {placeholder, ...otherProps} = this.props;\n        const placeholderString = formatMessage(placeholder);\n\n        return (\n            <input\n                ref={this.input}\n                {...otherProps}\n                placeholder={placeholderString}\n            />\n        );\n    }\n}\n","// Copyright (c) 2015-present Mattermost, Inc. All Rights Reserved.\n// See LICENSE.txt for license information.\n\nimport PropTypes from 'prop-types';\nimport React from 'react';\n\nexport default class FormError extends React.Component {\n    static get propTypes() {\n        // accepts either a single error or an array of errors\n        return {\n            type: PropTypes.node,\n            error: PropTypes.node,\n            textClassName: PropTypes.string,\n            iconClassName: PropTypes.string,\n            margin: PropTypes.bool,\n            errors: PropTypes.arrayOf(PropTypes.node),\n        };\n    }\n\n    static get defaultProps() {\n        return {\n            error: null,\n            errors: [],\n        };\n    }\n\n    render() {\n        if (!this.props.error && this.props.errors.length === 0) {\n            return null;\n        }\n\n        // look for the first truthy error to display\n        let message = this.props.error;\n\n        if (!message) {\n            for (const error of this.props.errors) {\n                if (error) {\n                    message = error;\n                }\n            }\n        }\n\n        if (!message) {\n            return null;\n        }\n\n        if (this.props.type === 'modal') {\n            return (\n                <div className='form-group'>\n                    <label className='col-sm-12 has-error'>\n                        {message}\n                    </label>\n                </div>\n            );\n        }\n\n        if (this.props.type === 'backstage') {\n            return (\n                <div className='pull-left has-error'>\n                    <label className='control-label'>\n                        {message}\n                    </label>\n                </div>\n            );\n        }\n\n        if (this.props.margin) {\n            return (\n                <div className='form-group has-error'>\n                    <label className='control-label'>\n                        {message}\n                    </label>\n                </div>\n            );\n        }\n\n        return (\n            <div className={`col-sm-12 ${this.props.textClassName || 'has-error'}`}>\n                <label className='control-label'>\n                    <i className={`fa ${this.props.iconClassName || 'fa-exclamation-circle'}`}/> {message}\n                </label>\n            </div>\n        );\n    }\n}\n","// Copyright (c) 2015-present Mattermost, Inc. All Rights Reserved.\n// See LICENSE.txt for license information.\n\nimport {ActionTypes} from 'utils/constants';\n\nexport function openModal(modalData) {\n    return (dispatch) => {\n        const action = {\n            type: ActionTypes.MODAL_OPEN,\n            modalId: modalData.modalId,\n            dialogProps: modalData.dialogProps,\n            dialogType: modalData.dialogType,\n        };\n\n        dispatch(action);\n    };\n}\n\nexport function closeModal(modalId) {\n    return (dispatch) => {\n        const action = {\n            type: ActionTypes.MODAL_CLOSE,\n            modalId,\n        };\n\n        dispatch(action);\n    };\n}\n","// Copyright (c) 2015-present Mattermost, Inc. All Rights Reserved.\n// See LICENSE.txt for license information.\n\nimport React from 'react';\nimport PropTypes from 'prop-types';\nimport {FormattedMessage} from 'react-intl';\n\nimport Badge from './badge.jsx';\n\nexport default function BotBadge(props) {\n    return (\n        <Badge\n            className={'BotBadge ' + props.className}\n            show={props.show}\n        >\n            <FormattedMessage\n                id='post_info.bot'\n                defaultMessage='BOT'\n            />\n        </Badge>\n    );\n}\n\nBotBadge.propTypes = {\n    className: PropTypes.string,\n    show: PropTypes.bool,\n};\n\nBotBadge.defaultProps = {\n    show: true,\n    className: '',\n};\n","// Copyright (c) 2015-present Mattermost, Inc. All Rights Reserved.\n// See LICENSE.txt for license information.\n\nimport PropTypes from 'prop-types';\nimport React from 'react';\nimport {FormattedMessage} from 'react-intl';\n\nimport SaveButton from 'components/save_button.jsx';\nimport Constants from 'utils/constants.jsx';\nimport {isKeyPressed} from 'utils/utils.jsx';\n\nexport default class SettingItemMax extends React.PureComponent {\n    static defaultProps = {\n        infoPosition: 'bottom',\n        saving: false,\n        section: '',\n        containerStyle: '',\n    };\n\n    static propTypes = {\n\n        /**\n         * Array of inputs selection\n         */\n        inputs: PropTypes.node,\n\n        /**\n         * Styles for main component\n         */\n        containerStyle: PropTypes.string,\n\n        /**\n         * Client error\n         */\n        clientError: PropTypes.oneOfType([\n            PropTypes.string,\n            PropTypes.object,\n        ]),\n\n        /**\n         * Server error\n         */\n        serverError: PropTypes.string,\n\n        /**\n         * Settings extra information\n         */\n        extraInfo: PropTypes.element,\n\n        /**\n         * Info position\n         */\n        infoPosition: PropTypes.string,\n\n        /**\n         * Settings or tab section\n         */\n        section: PropTypes.string,\n\n        /**\n         * Function to update section\n         */\n        updateSection: PropTypes.func,\n\n        /**\n         * setting to submit\n         */\n        setting: PropTypes.string,\n\n        /**\n         * Function to submit setting\n         */\n        submit: PropTypes.func,\n\n        /**\n         * Extra information on submit\n         */\n        submitExtra: PropTypes.node,\n\n        /**\n         * Indicates whether setting is on saving\n         */\n        saving: PropTypes.bool,\n\n        /**\n         * Settings title\n         */\n        title: PropTypes.node,\n\n        /**\n         * Settings width\n         */\n        width: PropTypes.string,\n\n        /**\n         * Text of cancel button\n         */\n        cancelButtonText: PropTypes.node,\n\n        /**\n         * Avoid submitting when using SHIFT + ENTER\n         */\n        shiftEnter: PropTypes.bool,\n\n        /**\n         * Text of save button\n         */\n        saveButtonText: PropTypes.string,\n    }\n\n    constructor(props) {\n        super(props);\n        this.settingList = React.createRef();\n    }\n\n    componentDidMount() {\n        if (this.settingList.current) {\n            const focusableElements = this.settingList.current.querySelectorAll('.btn:not(.save-button):not(.btn-cancel), input.form-control, select, textarea, [tabindex]:not([tabindex=\"-1\"])');\n            if (focusableElements.length > 0) {\n                focusableElements[0].focus();\n            } else {\n                this.settingList.current.focus();\n            }\n        }\n\n        document.addEventListener('keydown', this.onKeyDown);\n    }\n\n    componentWillUnmount() {\n        document.removeEventListener('keydown', this.onKeyDown);\n    }\n\n    onKeyDown = (e) => {\n        if (this.props.shiftEnter && e.keyCode === Constants.KeyCodes.ENTER && e.shiftKey) {\n            return;\n        }\n        if (isKeyPressed(e, Constants.KeyCodes.ENTER) && this.props.submit && e.target.tagName !== 'SELECT' && e.target.parentElement && e.target.parentElement.className !== 'react-select__input' && !e.target.classList.contains('btn-cancel') && this.settingList.current && this.settingList.current.contains(e.target)) {\n            this.handleSubmit(e);\n        }\n    }\n\n    handleSubmit = (e) => {\n        e.preventDefault();\n\n        if (this.props.setting) {\n            this.props.submit(this.props.setting);\n        } else {\n            this.props.submit();\n        }\n    }\n\n    handleUpdateSection = (e) => {\n        this.props.updateSection(this.props.section);\n        e.preventDefault();\n    }\n\n    render() {\n        let clientError = null;\n        if (this.props.clientError) {\n            clientError = (\n                <div className='form-group'>\n                    <label\n                        id='clientError'\n                        className='col-sm-12 has-error'\n                    >\n                        {this.props.clientError}\n                    </label>\n                </div>\n            );\n        }\n\n        let serverError = null;\n        if (this.props.serverError) {\n            serverError = (\n                <div className='form-group'>\n                    <label\n                        id='serverError'\n                        className='col-sm-12 has-error'\n                    >\n                        {this.props.serverError}\n                    </label>\n                </div>\n            );\n        }\n\n        let extraInfo = null;\n        let hintClass = 'setting-list__hint';\n        if (this.props.infoPosition === 'top') {\n            hintClass = 'padding-bottom x2';\n        }\n\n        if (this.props.extraInfo) {\n            extraInfo = (<div className={hintClass}>{this.props.extraInfo}</div>);\n        }\n\n        let submit = '';\n        if (this.props.submit) {\n            submit = (\n                <SaveButton\n                    defaultMessage={this.props.saveButtonText}\n                    saving={this.props.saving}\n                    disabled={this.props.saving}\n                    onClick={this.handleSubmit}\n                />\n            );\n        }\n\n        const inputs = this.props.inputs;\n        let widthClass;\n        if (this.props.width === 'full') {\n            widthClass = 'col-sm-12';\n        } else if (this.props.width === 'medium') {\n            widthClass = 'col-sm-10 col-sm-offset-2';\n        } else {\n            widthClass = 'col-sm-9 col-sm-offset-3';\n        }\n\n        let title;\n        if (this.props.title) {\n            title = (\n                <li\n                    id='settingTitle'\n                    className='col-sm-12 section-title'\n                >\n                    {this.props.title}\n                </li>\n            );\n        }\n\n        let listContent = (\n            <li\n                className='setting-list-item'\n                role='presentation'\n            >\n                {inputs}\n                {extraInfo}\n            </li>\n        );\n\n        if (this.props.infoPosition === 'top') {\n            listContent = (\n                <li role='presentation'>\n                    {extraInfo}\n                    {inputs}\n                </li>\n            );\n        }\n\n        let cancelButtonText;\n        if (this.props.cancelButtonText) {\n            cancelButtonText = this.props.cancelButtonText;\n        } else {\n            cancelButtonText = (\n                <FormattedMessage\n                    id='setting_item_max.cancel'\n                    defaultMessage='Cancel'\n                />\n            );\n        }\n\n        return (\n            <ul\n                className={`section-max form-horizontal ${this.props.containerStyle}`}\n            >\n                {title}\n                <li className={widthClass}>\n                    <ul\n                        tabIndex='-1'\n                        ref={this.settingList}\n                        role='presentation'\n                        className='setting-list'\n                    >\n                        {listContent}\n                        <li className='setting-list-item'>\n                            <hr/>\n                            {this.props.submitExtra}\n                            {serverError}\n                            {clientError}\n                            {submit}\n                            <button\n                                id={'cancelSetting'}\n                                className='btn btn-sm btn-cancel cursor--pointer style--none'\n                                onClick={this.handleUpdateSection}\n                            >\n                                {cancelButtonText}\n                            </button>\n                        </li>\n                    </ul>\n                </li>\n            </ul>\n        );\n    }\n}\n","// Copyright (c) 2015-present Mattermost, Inc. All Rights Reserved.\n// See LICENSE.txt for license information.\n\nexport const getLastPostsApiTimeForChannel = (state, channelId) => state.views.channel.lastGetPosts[channelId];\n","// Copyright (c) 2015-present Mattermost, Inc. All Rights Reserved.\n// See LICENSE.txt for license information.\n\nimport {batchActions} from 'redux-batched-actions';\n\nimport {leaveChannel as leaveChannelRedux, joinChannel, unfavoriteChannel} from 'mattermost-redux/actions/channels';\nimport * as PostActions from 'mattermost-redux/actions/posts';\nimport {autocompleteUsers} from 'mattermost-redux/actions/users';\nimport {Posts} from 'mattermost-redux/constants';\nimport {getChannel, getChannelsNameMapInCurrentTeam, getCurrentChannel, getRedirectChannelNameForTeam} from 'mattermost-redux/selectors/entities/channels';\nimport {getCurrentRelativeTeamUrl, getCurrentTeamId} from 'mattermost-redux/selectors/entities/teams';\nimport {getCurrentUserId, getUserByUsername} from 'mattermost-redux/selectors/entities/users';\nimport {getMyPreferences} from 'mattermost-redux/selectors/entities/preferences';\nimport {getChannelByName, isFavoriteChannel} from 'mattermost-redux/utils/channel_utils';\nimport EventEmitter from 'mattermost-redux/utils/event_emitter';\n\nimport {openDirectChannelToUserId} from 'actions/channel_actions.jsx';\nimport {getLastViewedChannelName} from 'selectors/local_storage';\nimport {getLastPostsApiTimeForChannel} from 'selectors/views/channel';\nimport {getSocketStatus} from 'selectors/views/websocket';\n\nimport {browserHistory} from 'utils/browser_history';\nimport {Constants, ActionTypes, EventTypes, PostRequestTypes} from 'utils/constants.jsx';\nimport {isMobile} from 'utils/utils.jsx';\nimport LocalStorageStore from 'stores/local_storage_store.jsx';\n\nexport function checkAndSetMobileView() {\n    return (dispatch) => {\n        dispatch({\n            type: ActionTypes.UPDATE_MOBILE_VIEW,\n            data: isMobile(),\n        });\n    };\n}\n\nexport function goToLastViewedChannel() {\n    return async (dispatch, getState) => {\n        const state = getState();\n        const currentChannel = getCurrentChannel(state);\n        const channelsInTeam = getChannelsNameMapInCurrentTeam(state);\n\n        let channelToSwitchTo = getChannelByName(channelsInTeam, getLastViewedChannelName(state));\n\n        if (currentChannel.id === channelToSwitchTo.id) {\n            channelToSwitchTo = getChannelByName(channelsInTeam, getRedirectChannelNameForTeam(state, getCurrentTeamId(state)));\n        }\n\n        return dispatch(switchToChannel(channelToSwitchTo));\n    };\n}\n\nexport function switchToChannelById(channelId) {\n    return async (dispatch, getState) => {\n        const state = getState();\n        const channel = getChannel(state, channelId);\n        return dispatch(switchToChannel(channel));\n    };\n}\n\nexport function switchToChannel(channel) {\n    return async (dispatch, getState) => {\n        const state = getState();\n        const teamUrl = getCurrentRelativeTeamUrl(state);\n\n        if (channel.fake || channel.userId) {\n            const username = channel.userId ? channel.name : channel.display_name;\n            const user = getUserByUsername(state, username);\n            if (!user) {\n                return {error: true};\n            }\n\n            const direct = await dispatch(openDirectChannelToUserId(user.id));\n            if (direct.error) {\n                return {error: true};\n            }\n            browserHistory.push(`${teamUrl}/messages/@${channel.name}`);\n        } else if (channel.type === Constants.GM_CHANNEL) {\n            const gmChannel = getChannel(state, channel.id);\n            browserHistory.push(`${teamUrl}/channels/${gmChannel.name}`);\n        } else {\n            browserHistory.push(`${teamUrl}/channels/${channel.name}`);\n        }\n\n        return {data: true};\n    };\n}\n\nexport function joinChannelById(channelId) {\n    return async (dispatch, getState) => {\n        const state = getState();\n        const currentUserId = getCurrentUserId(state);\n        const currentTeamId = getCurrentTeamId(state);\n\n        return dispatch(joinChannel(currentUserId, currentTeamId, channelId));\n    };\n}\n\nexport function leaveChannel(channelId) {\n    return async (dispatch, getState) => {\n        const state = getState();\n        const myPreferences = getMyPreferences(state);\n        const currentUserId = getCurrentUserId(state);\n        const currentTeamId = getCurrentTeamId(state);\n\n        if (isFavoriteChannel(myPreferences, channelId)) {\n            dispatch(unfavoriteChannel(channelId));\n        }\n\n        const teamUrl = getCurrentRelativeTeamUrl(state);\n        LocalStorageStore.removePreviousChannelName(currentUserId, currentTeamId);\n        browserHistory.push(teamUrl);\n\n        const {error} = await dispatch(leaveChannelRedux(channelId));\n        if (error) {\n            return {error};\n        }\n\n        return {\n            data: true,\n        };\n    };\n}\n\nexport function autocompleteUsersInChannel(prefix, channelId) {\n    return async (dispatch, getState) => {\n        const state = getState();\n        const currentTeamId = getCurrentTeamId(state);\n\n        return dispatch(autocompleteUsers(prefix, currentTeamId, channelId));\n    };\n}\n\nexport function loadUnreads(channelId) {\n    return async (dispatch) => {\n        const time = Date.now();\n        const {data, error} = await dispatch(PostActions.getPostsUnread(channelId));\n        if (error) {\n            return {\n                error,\n                atLatestMessage: false,\n                atOldestmessage: false,\n            };\n        }\n\n        dispatch({\n            type: ActionTypes.INCREASE_POST_VISIBILITY,\n            data: channelId,\n            amount: data.order.length,\n        });\n\n        if (data.next_post_id === '') {\n            dispatch({\n                type: ActionTypes.RECEIVED_POSTS_FOR_CHANNEL_AT_TIME,\n                channelId,\n                time,\n            });\n        }\n\n        return {\n            atLatestMessage: data.next_post_id === '',\n            atOldestmessage: data.prev_post_id === '',\n        };\n    };\n}\n\nexport function loadPostsAround(channelId, focusedPostId) {\n    return async (dispatch) => {\n        const {data, error} = await dispatch(PostActions.getPostsAround(channelId, focusedPostId, Posts.POST_CHUNK_SIZE / 2));\n        if (error) {\n            return {\n                error,\n                atLatestMessage: false,\n                atOldestmessage: false,\n            };\n        }\n\n        dispatch({\n            type: ActionTypes.INCREASE_POST_VISIBILITY,\n            data: channelId,\n            amount: data.order.length,\n        });\n        return {\n            atLatestMessage: data.next_post_id === '',\n            atOldestmessage: data.prev_post_id === '',\n        };\n    };\n}\n\nexport function loadLatestPosts(channelId) {\n    return async (dispatch) => {\n        const time = Date.now();\n        const {data, error} = await dispatch(PostActions.getPosts(channelId, 0, Posts.POST_CHUNK_SIZE / 2));\n\n        if (error) {\n            return {\n                error,\n                atLatestMessage: false,\n                atOldestmessage: false,\n            };\n        }\n\n        dispatch({\n            type: ActionTypes.RECEIVED_POSTS_FOR_CHANNEL_AT_TIME,\n            channelId,\n            time,\n        });\n\n        return {\n            data,\n            atLatestMessage: data.next_post_id === '',\n            atOldestmessage: data.prev_post_id === '',\n        };\n    };\n}\n\nexport function loadPosts({channelId, postId, type}) {\n    //type here can be BEFORE_ID or AFTER_ID\n    return async (dispatch) => {\n        const POST_INCREASE_AMOUNT = Constants.POST_CHUNK_SIZE / 2;\n\n        dispatch({\n            type: ActionTypes.LOADING_POSTS,\n            data: true,\n            channelId,\n        });\n\n        const page = 0;\n        let result;\n        if (type === PostRequestTypes.BEFORE_ID) {\n            result = await dispatch(PostActions.getPostsBefore(channelId, postId, page, POST_INCREASE_AMOUNT));\n        } else {\n            result = await dispatch(PostActions.getPostsAfter(channelId, postId, page, POST_INCREASE_AMOUNT));\n        }\n\n        const {data} = result;\n\n        const actions = [{\n            type: ActionTypes.LOADING_POSTS,\n            data: false,\n            channelId,\n        }];\n\n        if (result.error) {\n            return {\n                error: result.error,\n                moreToLoad: true,\n            };\n        }\n        actions.push({\n            type: ActionTypes.INCREASE_POST_VISIBILITY,\n            data: channelId,\n            amount: data.order.length,\n        });\n\n        dispatch(batchActions(actions));\n\n        return {\n            moreToLoad: type === PostRequestTypes.BEFORE_ID ? data.prev_post_id !== '' : data.next_post_id !== '',\n        };\n    };\n}\n\nexport function syncPostsInChannel(channelId, since) {\n    return async (dispatch, getState) => {\n        const time = Date.now();\n        const state = getState();\n        const socketStatus = getSocketStatus(state);\n        let sinceTimeToGetPosts = since;\n        const lastPostsApiCallForChannel = getLastPostsApiTimeForChannel(state, channelId);\n\n        if (lastPostsApiCallForChannel && lastPostsApiCallForChannel < socketStatus.lastDisconnectAt) {\n            sinceTimeToGetPosts = lastPostsApiCallForChannel;\n        }\n\n        const {data, error} = await dispatch(PostActions.getPostsSince(channelId, sinceTimeToGetPosts));\n        if (data) {\n            dispatch({\n                type: ActionTypes.RECEIVED_POSTS_FOR_CHANNEL_AT_TIME,\n                channelId,\n                time,\n            });\n        }\n        return {data, error};\n    };\n}\n\nexport function scrollPostListToBottom() {\n    return () => {\n        EventEmitter.emit(EventTypes.POST_LIST_SCROLL_CHANGE, true);\n    };\n}\n\nexport function scrollPostList() {\n    return () => {\n        EventEmitter.emit(EventTypes.POST_LIST_SCROLL_CHANGE, false);\n    };\n}\n","// Copyright (c) 2015-present Mattermost, Inc. All Rights Reserved.\n// See LICENSE.txt for license information.\n\nexport default class Provider {\n    constructor() {\n        this.latestPrefix = '';\n        this.latestComplete = true;\n        this.disableDispatches = false;\n        this.requestStarted = false;\n    }\n\n    handlePretextChanged(pretext) { // eslint-disable-line no-unused-vars\n        // NO-OP for inherited classes to override\n    }\n\n    resetRequest() {\n        this.requestStarted = false;\n    }\n\n    startNewRequest(prefix) {\n        this.latestPrefix = prefix;\n        this.latestComplete = false;\n        this.requestStarted = true;\n    }\n\n    shouldCancelDispatch(prefix) {\n        if (this.disableDispatches) {\n            return true;\n        }\n\n        if (!this.requestStarted) {\n            return true;\n        }\n\n        if (prefix === this.latestPrefix) {\n            this.latestComplete = true;\n        } else if (this.latestComplete) {\n            return true;\n        }\n\n        return false;\n    }\n\n    allowDividers() {\n        return true;\n    }\n\n    presentationType() {\n        return 'text';\n    }\n}\n","// Copyright (c) 2015-present Mattermost, Inc. All Rights Reserved.\n// See LICENSE.txt for license information.\n\nimport PropTypes from 'prop-types';\nimport React from 'react';\n\nexport default class Suggestion extends React.Component {\n    static get propTypes() {\n        return {\n            item: PropTypes.oneOfType([\n                PropTypes.object,\n                PropTypes.string,\n            ]).isRequired,\n            term: PropTypes.string.isRequired,\n            matchedPretext: PropTypes.string.isRequired,\n            isSelection: PropTypes.bool,\n            onClick: PropTypes.func,\n        };\n    }\n\n    static baseProps = {\n        role: 'button',\n        tabIndex: -1,\n    };\n\n    constructor(props) {\n        super(props);\n\n        this.handleClick = this.handleClick.bind(this);\n    }\n\n    handleClick(e) {\n        e.preventDefault();\n\n        this.props.onClick(this.props.term, this.props.matchedPretext);\n    }\n}\n","// Copyright (c) 2015-present Mattermost, Inc. All Rights Reserved.\n// See LICENSE.txt for license information.\n\nimport React from 'react';\nimport PropTypes from 'prop-types';\n\nimport menuItem from './menu_item.jsx';\n\nexport const MenuItemActionImpl = ({onClick, ariaLabel, text, extraText, id}) => (\n    <button\n        id={id}\n        aria-label={ariaLabel}\n        className={'style--none' + (extraText ? ' MenuItem__help' : '')}\n        onClick={onClick}\n    >\n        {text}\n        {extraText && <span className='extra-text'>{extraText}</span>}\n    </button>\n);\nMenuItemActionImpl.propTypes = {\n    onClick: PropTypes.func.isRequired,\n    ariaLabel: PropTypes.string,\n    text: PropTypes.oneOfType([PropTypes.string, PropTypes.node]).isRequired,\n    extraText: PropTypes.string,\n    id: PropTypes.string,\n};\n\nconst MenuItemAction = menuItem(MenuItemActionImpl);\nMenuItemAction.displayName = 'MenuItemAction';\n\nexport default MenuItemAction;\n","// Copyright (c) 2015-present Mattermost, Inc. All Rights Reserved.\n// See LICENSE.txt for license information.\n\nexport function getPreviousActiveSection(state) {\n    return state.views.settings.previousActiveSection;\n}\n","// Copyright (c) 2015-present Mattermost, Inc. All Rights Reserved.\n// See LICENSE.txt for license information.\n\nimport {ActionTypes} from 'utils/constants.jsx';\n\nexport function updateActiveSection(newActiveSection) {\n    return {\n        type: ActionTypes.UPDATE_ACTIVE_SECTION,\n        data: newActiveSection,\n    };\n}","// Copyright (c) 2015-present Mattermost, Inc. All Rights Reserved.\n// See LICENSE.txt for license information.\n\nimport PropTypes from 'prop-types';\nimport React from 'react';\nimport {FormattedMessage} from 'react-intl';\n\nimport {isMobile} from 'utils/utils.jsx';\nimport EditIcon from 'components/icon/edit_icon';\n\nexport default class SettingItemMin extends React.PureComponent {\n    static defaultProps = {\n        section: '',\n    };\n\n    static propTypes = {\n\n        /**\n         * Settings title\n         */\n        title: PropTypes.node,\n\n        /**\n         * Option to disable opening the setting\n         */\n        disableOpen: PropTypes.bool,\n\n        /**\n         * Settings or tab section\n         */\n        section: PropTypes.string,\n\n        /**\n         * Function to update section\n         */\n        updateSection: PropTypes.func,\n\n        /**\n         * Settings description\n         */\n        describe: PropTypes.node,\n\n        /**\n         * Shows the previous active section for focusing\n         */\n        previousActiveSection: PropTypes.string,\n\n        /**\n         * Actions\n         */\n        actions: PropTypes.shape({\n\n            /**\n             * Update the active section for focusing\n             */\n            updateActiveSection: PropTypes.func.isRequired,\n        }).isRequired,\n    };\n\n    componentDidMount() {\n        if (this.props.previousActiveSection === this.props.section) {\n            this.edit.focus();\n        }\n    }\n\n    getEdit = (node) => {\n        this.edit = node;\n    }\n\n    handleUpdateSection = (e) => {\n        e.preventDefault();\n        this.props.actions.updateActiveSection(this.props.section);\n        this.props.updateSection(this.props.section);\n    }\n\n    render() {\n        let editButton = null;\n        let describeSection = null;\n\n        if (!this.props.disableOpen && isMobile()) {\n            editButton = (\n                <div className='section-min__edit'>\n                    <button\n                        id={this.props.section + 'Edit'}\n                        className='color--link cursor--pointer style--none'\n                        onClick={this.handleUpdateSection}\n                        ref={this.getEdit}\n                        aria-labelledby={this.props.section + 'Title ' + this.props.section + 'Edit'}\n                    >\n                        <EditIcon/>\n                        {this.props.describe}\n                    </button>\n                </div>\n            );\n        } else if (!this.props.disableOpen) {\n            editButton = (\n                <div className='section-min__edit'>\n                    <button\n                        id={this.props.section + 'Edit'}\n                        className='color--link cursor--pointer style--none text-left'\n                        onClick={this.handleUpdateSection}\n                        ref={this.getEdit}\n                        aria-labelledby={this.props.section + 'Title ' + this.props.section + 'Edit'}\n                    >\n                        <EditIcon/>\n                        <FormattedMessage\n                            id='setting_item_min.edit'\n                            defaultMessage='Edit'\n                        />\n                    </button>\n                </div>\n            );\n\n            describeSection = (\n                <div\n                    id={this.props.section + 'Desc'}\n                    className='section-min__describe'\n                >\n                    {this.props.describe}\n                </div>\n            );\n        }\n\n        return (\n            <div\n                className='section-min'\n                onClick={this.handleUpdateSection}\n            >\n                <div className='d-flex'>\n                    <div\n                        id={this.props.section + 'Title'}\n                        className='section-min__title'\n                    >\n                        {this.props.title}\n                    </div>\n                    {editButton}\n                </div>\n                {describeSection}\n            </div>\n        );\n    }\n}\n","// Copyright (c) 2015-present Mattermost, Inc. All Rights Reserved.\n// See LICENSE.txt for license information.\n\nimport {connect} from 'react-redux';\nimport {bindActionCreators} from 'redux';\n\nimport {getPreviousActiveSection} from 'selectors/views/settings';\nimport {updateActiveSection} from 'actions/views/settings';\n\nimport SettingItemMin from './setting_item_min.jsx';\n\nfunction mapStateToProps(state) {\n    return {\n        previousActiveSection: getPreviousActiveSection(state),\n    };\n}\n\nfunction mapDispatchToProps(dispatch) {\n    return {\n        actions: bindActionCreators({\n            updateActiveSection,\n        }, dispatch),\n    };\n}\n\nexport default connect(mapStateToProps, mapDispatchToProps)(SettingItemMin);\n","// Copyright (c) 2015-present Mattermost, Inc. All Rights Reserved.\n// See LICENSE.txt for license information.\n\nimport PropTypes from 'prop-types';\nimport React from 'react';\nimport {intlShape} from 'react-intl';\n\nimport LoadingWrapper from 'components/widgets/loading/loading_wrapper.jsx';\n\nexport default class SaveButton extends React.PureComponent {\n    static propTypes = {\n        saving: PropTypes.bool.isRequired,\n        disabled: PropTypes.bool,\n        savingMessage: PropTypes.node,\n        defaultMessage: PropTypes.node,\n        btnClass: PropTypes.string,\n        extraClasses: PropTypes.string,\n    }\n\n    static defaultProps = {\n        disabled: false,\n        btnClass: 'btn-primary',\n        extraClasses: '',\n    }\n\n    static contextTypes = {\n        intl: intlShape,\n    };\n\n    render() {\n        const {formatMessage} = this.context.intl;\n        const {\n            saving,\n            disabled,\n            savingMessage,\n            defaultMessage,\n            btnClass,\n            extraClasses,\n            ...props\n        } = this.props;\n\n        let className = 'save-button btn';\n        if (!disabled || saving) {\n            className += ' ' + btnClass;\n        }\n\n        if (extraClasses) {\n            className += ' ' + extraClasses;\n        }\n\n        const savingMessageComponent = savingMessage || formatMessage({id: 'save_button.saving', defaultMessage: 'Saving'});\n        const defaultMessageComponent = defaultMessage || formatMessage({id: 'save_button.save', defaultMessage: 'Save'});\n\n        return (\n            <button\n                type='submit'\n                id='saveSetting'\n                className={className}\n                disabled={disabled}\n                {...props}\n            >\n                <LoadingWrapper\n                    loading={saving}\n                    text={savingMessageComponent}\n                >\n                    <span>{defaultMessageComponent}</span>\n                </LoadingWrapper>\n            </button>\n        );\n    }\n}\n","// Copyright (c) 2015-present Mattermost, Inc. All Rights Reserved.\n// See LICENSE.txt for license information.\n\nimport {batchActions} from 'redux-batched-actions';\n\nimport {PreferenceTypes} from 'mattermost-redux/action_types';\nimport * as ChannelActions from 'mattermost-redux/actions/channels';\nimport {savePreferences} from 'mattermost-redux/actions/preferences';\nimport {getMyChannelMemberships} from 'mattermost-redux/selectors/entities/common';\nimport {getChannelByName, getUnreadChannelIds, getChannel} from 'mattermost-redux/selectors/entities/channels';\nimport {getCurrentTeamUrl, getCurrentTeamId} from 'mattermost-redux/selectors/entities/teams';\nimport {getCurrentUserId} from 'mattermost-redux/selectors/entities/users';\n\nimport {trackEvent} from 'actions/diagnostics_actions.jsx';\nimport {loadNewDMIfNeeded, loadNewGMIfNeeded, loadProfilesForSidebar} from 'actions/user_actions.jsx';\nimport store from 'stores/redux_store.jsx';\nimport {browserHistory} from 'utils/browser_history';\nimport {Constants, Preferences} from 'utils/constants.jsx';\nimport {getDirectChannelName} from 'utils/utils';\n\nconst doDispatch = store.dispatch;\nconst doGetState = store.getState;\n\nexport function openDirectChannelToUserId(userId) {\n    return async (dispatch, getState) => {\n        const state = getState();\n        const currentUserId = getCurrentUserId(state);\n        const channelName = getDirectChannelName(currentUserId, userId);\n        const channel = getChannelByName(state, channelName);\n\n        if (!channel) {\n            return dispatch(ChannelActions.createDirectChannel(currentUserId, userId));\n        }\n\n        trackEvent('api', 'api_channels_join_direct');\n        const now = Date.now();\n        const prefDirect = {\n            category: Preferences.CATEGORY_DIRECT_CHANNEL_SHOW,\n            name: userId,\n            value: 'true',\n        };\n        const prefOpenTime = {\n            category: Preferences.CATEGORY_CHANNEL_OPEN_TIME,\n            name: channel.id,\n            value: now.toString(),\n        };\n        const actions = [{\n            type: PreferenceTypes.RECEIVED_PREFERENCES,\n            data: [prefDirect],\n        }, {\n            type: PreferenceTypes.RECEIVED_PREFERENCES,\n            data: [prefOpenTime],\n        }];\n        dispatch(batchActions(actions));\n\n        dispatch(savePreferences(currentUserId, [\n            {user_id: currentUserId, ...prefDirect},\n            {user_id: currentUserId, ...prefOpenTime},\n        ]));\n\n        return {data: channel};\n    };\n}\n\nexport function openGroupChannelToUserIds(userIds) {\n    return async (dispatch, getState) => {\n        const result = await dispatch(ChannelActions.createGroupChannel(userIds));\n\n        if (result.error) {\n            browserHistory.push(getCurrentTeamUrl(getState()));\n        }\n\n        return result;\n    };\n}\n\nexport function loadChannelsForCurrentUser() {\n    return async (dispatch, getState) => {\n        const state = getState();\n        const unreads = getUnreadChannelIds(state);\n\n        await dispatch(ChannelActions.fetchMyChannelsAndMembers(getCurrentTeamId(state)));\n        for (const id of unreads) {\n            const channel = getChannel(state, id);\n            if (channel && channel.type === Constants.DM_CHANNEL) {\n                loadNewDMIfNeeded(channel.id);\n            } else if (channel && channel.type === Constants.GM_CHANNEL) {\n                loadNewGMIfNeeded(channel.id);\n            }\n        }\n\n        loadProfilesForSidebar();\n    };\n}\n\nexport function searchMoreChannels(term) {\n    return async (dispatch, getState) => {\n        const state = getState();\n        const teamId = getCurrentTeamId(state);\n\n        if (!teamId) {\n            throw new Error('No team id');\n        }\n\n        const {data, error} = await dispatch(ChannelActions.searchChannels(teamId, term));\n        if (data) {\n            const myMembers = getMyChannelMemberships(state);\n            const channels = data.filter((c) => !myMembers[c.id]);\n            return {data: channels};\n        }\n\n        return {error};\n    };\n}\n\nexport async function autocompleteChannels(term, success, error) {\n    const state = doGetState();\n    const teamId = getCurrentTeamId(state);\n    if (!teamId) {\n        return;\n    }\n\n    const {data, error: err} = await ChannelActions.autocompleteChannels(teamId, term)(doDispatch, doGetState);\n    if (data && success) {\n        success(data);\n    } else if (err && error) {\n        error({id: err.server_error_id, ...err});\n    }\n}\n\nexport async function autocompleteChannelsForSearch(term, success, error) {\n    const state = doGetState();\n    const teamId = getCurrentTeamId(state);\n    if (!teamId) {\n        return;\n    }\n\n    const {data, error: err} = await ChannelActions.autocompleteChannelsForSearch(teamId, term)(doDispatch, doGetState);\n    if (data && success) {\n        success(data);\n    } else if (err && error) {\n        error({id: err.server_error_id, ...err});\n    }\n}\n\nexport function addUsersToChannel(channelId, userIds) {\n    return async (dispatch) => {\n        try {\n            const requests = userIds.map((uId) => dispatch(ChannelActions.addChannelMember(channelId, uId)));\n\n            return await Promise.all(requests);\n        } catch (error) {\n            return {error};\n        }\n    };\n}\n","// Copyright (c) 2015-present Mattermost, Inc. All Rights Reserved.\n// See LICENSE.txt for license information.\n\nimport PropTypes from 'prop-types';\nimport React from 'react';\n\nimport LoadingSpinner from './loading_spinner.jsx';\n\nexport default class LoadingWrapper extends React.Component {\n    static propTypes = {\n        loading: PropTypes.bool.isRequired,\n        text: PropTypes.node,\n        children: PropTypes.node,\n    }\n\n    static defaultProps = {\n        loading: true,\n        text: null,\n        children: null,\n    }\n\n    render() {\n        const {text, loading, children} = this.props;\n        if (!loading) {\n            return children;\n        }\n\n        return <LoadingSpinner text={text}/>;\n    }\n}\n","// Copyright (c) 2015-present Mattermost, Inc. All Rights Reserved.\n// See LICENSE.txt for license information.\n\nimport PropTypes from 'prop-types';\nimport React from 'react';\n\nimport {isMobile} from 'utils/utils';\n\nexport default class Menu extends React.PureComponent {\n    static propTypes = {\n        children: PropTypes.node,\n        openLeft: PropTypes.bool,\n        openUp: PropTypes.bool,\n        id: PropTypes.string,\n        ariaLabel: PropTypes.string.isRequired,\n        customStyles: PropTypes.object,\n    };\n\n    constructor(props) {\n        super(props);\n        this.node = React.createRef();\n        this.observer = new MutationObserver(this.hideUnneededDividers);\n    }\n\n    hideUnneededDividers = () => {\n        if (this.node.current === null) {\n            return;\n        }\n\n        this.observer.disconnect();\n        const children = Object.values(this.node.current.children).slice(0, this.node.current.children.length);\n\n        // Hiding dividers at beginning and duplicated ones\n        let prevWasDivider = false;\n        let isAtBeginning = true;\n        for (const child of children) {\n            if (child.classList.contains('menu-divider') || child.classList.contains('mobile-menu-divider')) {\n                child.style.display = 'block';\n                if (isAtBeginning || prevWasDivider) {\n                    child.style.display = 'none';\n                }\n                prevWasDivider = true;\n            } else {\n                isAtBeginning = false;\n                prevWasDivider = false;\n            }\n        }\n\n        // Hiding trailing dividers\n        for (const child of children.reverse()) {\n            if (child.classList.contains('menu-divider') || child.classList.contains('mobile-menu-divider')) {\n                child.style.display = 'none';\n            } else {\n                break;\n            }\n        }\n        this.observer.observe(this.node.current, {attributes: true, childList: true, subtree: true});\n    }\n\n    componentDidMount() {\n        this.hideUnneededDividers();\n    }\n\n    componentDidUpdate() {\n        this.hideUnneededDividers();\n    }\n\n    componentWillUnmount() {\n        this.observer.disconnect();\n    }\n\n    // Used from DotMenu component to know in which direction show the menu\n    rect() {\n        if (this.node && this.node.current) {\n            return this.node.current.getBoundingClientRect();\n        }\n        return null;\n    }\n\n    render() {\n        const {children, openUp, openLeft, id, ariaLabel, customStyles} = this.props;\n        let styles = {};\n        if (customStyles) {\n            styles = customStyles;\n        } else {\n            if (openLeft && !isMobile()) {\n                styles.left = 'inherit';\n                styles.right = 0;\n            }\n            if (openUp && !isMobile()) {\n                styles.bottom = '100%';\n                styles.top = 'auto';\n            }\n        }\n\n        return (\n            <ul\n                id={id}\n                className='a11y__popup Menu dropdown-menu'\n                ref={this.node}\n                style={styles}\n                role='menu'\n                aria-label={ariaLabel}\n            >\n                {children}\n            </ul>\n        );\n    }\n}\n","// Copyright (c) 2015-present Mattermost, Inc. All Rights Reserved.\n// See LICENSE.txt for license information.\n\nimport PropTypes from 'prop-types';\nimport React from 'react';\n\nimport messageHtmlToComponent from 'utils/message_html_to_component';\nimport * as TextFormatting from 'utils/text_formatting.jsx';\n\nexport default class Markdown extends React.PureComponent {\n    static propTypes = {\n\n        /*\n         * An object mapping channel names to channels for the current team\n         */\n        channelNamesMap: PropTypes.object.isRequired,\n\n        /*\n         * An array of URL schemes that should be turned into links. Anything that looks\n         * like a link will be turned into a link if this is not provided.\n         */\n        autolinkedUrlSchemes: PropTypes.array,\n\n        /*\n         * Whether or not to do Markdown rendering\n         */\n        enableFormatting: PropTypes.bool.isRequired,\n\n        /*\n         * Whether or not this text is part of the RHS\n         */\n        isRHS: PropTypes.bool,\n\n        /*\n         * An array of words that can be used to mention a user\n         */\n        mentionKeys: PropTypes.arrayOf(PropTypes.object).isRequired,\n\n        /*\n         * The text to be rendered\n         */\n        message: PropTypes.string.isRequired,\n\n        /*\n         * Any additional text formatting options to be used\n         */\n        options: PropTypes.object,\n\n        /*\n         * The root Site URL for the page\n         */\n        siteURL: PropTypes.string.isRequired,\n\n        /*\n         * The current team\n         */\n        team: PropTypes.object.isRequired,\n\n        /**\n         * If an image proxy is enabled.\n         */\n        hasImageProxy: PropTypes.bool.isRequired,\n\n        /**\n         * Minimum number of characters in a hashtag.\n         */\n        minimumHashtagLength: PropTypes.number,\n\n        /**\n         * Whether or not to proxy image URLs\n         */\n        proxyImages: PropTypes.bool,\n\n        /**\n         * Any extra props that should be passed into the image component\n         */\n        imageProps: PropTypes.object,\n\n        /**\n         * prop for passed down to image component for dimensions\n         */\n        imagesMetadata: PropTypes.object,\n\n        /**\n         * Whether or not to place the LinkTooltip component inside links\n         */\n        hasPluginTooltips: PropTypes.bool,\n    };\n\n    static defaultProps = {\n        options: {},\n        isRHS: false,\n        proxyImages: true,\n        imagesMetadata: {},\n    };\n\n    render() {\n        if (!this.props.enableFormatting) {\n            return <span>{this.props.message}</span>;\n        }\n\n        const options = Object.assign({\n            autolinkedUrlSchemes: this.props.autolinkedUrlSchemes,\n            siteURL: this.props.siteURL,\n            mentionKeys: this.props.mentionKeys,\n            atMentions: true,\n            channelNamesMap: this.props.channelNamesMap,\n            proxyImages: this.props.hasImageProxy && this.props.proxyImages,\n            team: this.props.team,\n            minimumHashtagLength: this.props.minimumHashtagLength,\n        }, this.props.options);\n\n        const htmlFormattedText = TextFormatting.formatText(this.props.message, options);\n        return messageHtmlToComponent(htmlFormattedText, this.props.isRHS, {\n            imageProps: this.props.imageProps,\n            imagesMetadata: this.props.imagesMetadata,\n            hasPluginTooltips: this.props.hasPluginTooltips,\n        });\n    }\n}\n","// Copyright (c) 2015-present Mattermost, Inc. All Rights Reserved.\n// See LICENSE.txt for license information.\n\nimport {connect} from 'react-redux';\nimport {createSelector} from 'reselect';\n\nimport {Preferences} from 'mattermost-redux/constants';\nimport {getChannelsNameMapInCurrentTeam} from 'mattermost-redux/selectors/entities/channels';\nimport {getAutolinkedUrlSchemes, getConfig} from 'mattermost-redux/selectors/entities/general';\nimport {getBool} from 'mattermost-redux/selectors/entities/preferences';\nimport {getCurrentTeam} from 'mattermost-redux/selectors/entities/teams';\nimport {getCurrentUserMentionKeys} from 'mattermost-redux/selectors/entities/users';\n\nimport {getSiteURL} from 'utils/url.jsx';\n\nimport Markdown from './markdown';\n\nfunction makeGetChannelNamesMap() {\n    return createSelector(\n        getChannelsNameMapInCurrentTeam,\n        (state, props) => props && props.channelNamesMap,\n        (channelNamesMap, channelMentions) => {\n            if (channelMentions) {\n                return Object.assign({}, channelMentions, channelNamesMap);\n            }\n\n            return channelNamesMap;\n        }\n    );\n}\n\nfunction makeMapStateToProps() {\n    const getChannelNamesMap = makeGetChannelNamesMap();\n\n    return function mapStateToProps(state, ownProps) {\n        const config = getConfig(state);\n\n        return {\n            autolinkedUrlSchemes: getAutolinkedUrlSchemes(state),\n            channelNamesMap: getChannelNamesMap(state, ownProps),\n            enableFormatting: getBool(state, Preferences.CATEGORY_ADVANCED_SETTINGS, 'formatting', true),\n            mentionKeys: getCurrentUserMentionKeys(state),\n            siteURL: getSiteURL(),\n            team: getCurrentTeam(state),\n            hasImageProxy: config.HasImageProxy === 'true',\n            minimumHashtagLength: parseInt(config.MinimumHashtagLength, 10),\n        };\n    };\n}\n\nexport default connect(makeMapStateToProps)(Markdown);\n","// Copyright (c) 2015-present Mattermost, Inc. All Rights Reserved.\n// See LICENSE.txt for license information.\n\nimport PropTypes from 'prop-types';\nimport React from 'react';\nimport {chain, tween, styler, action} from 'popmotion';\nimport {CSSTransition} from 'react-transition-group';\n\nimport {isMobile} from 'utils/utils.jsx';\n\nconst ANIMATION_DURATION = 80;\n\nexport default class MenuWrapperAnimation extends React.PureComponent {\n    static propTypes = {\n        children: PropTypes.node,\n        show: PropTypes.bool.isRequired,\n    };\n\n    onEntering = (node) => {\n        const nodeStyler = styler(node);\n        chain(\n            action(({update, complete}) => {\n                update({display: 'block'});\n                complete();\n            }),\n            tween({from: {opacity: 0}, to: {opacity: 1}, duration: ANIMATION_DURATION}),\n        ).start(nodeStyler.set);\n    }\n\n    onExiting = (node) => {\n        const nodeStyler = styler(node);\n        chain(\n            tween({from: {opacity: 1}, to: {opacity: 0}, duration: ANIMATION_DURATION}),\n            action(({update, complete}) => {\n                update({display: 'none'});\n                complete();\n            }),\n        ).start(nodeStyler.set);\n    }\n\n    render() {\n        return (\n            <CSSTransition\n                in={this.props.show}\n                classNames='MenuWrapperAnimation'\n                enter={true}\n                exit={true}\n                mountOnEnter={true}\n                unmountOnExit={true}\n                onEntering={!isMobile() && this.onEntering}\n                onExiting={!isMobile() && this.onExiting}\n                timeout={{\n                    enter: ANIMATION_DURATION,\n                    exit: ANIMATION_DURATION,\n                }}\n            >\n                {this.props.children}\n            </CSSTransition>\n        );\n    }\n}\n\n","// Copyright (c) 2015-present Mattermost, Inc. All Rights Reserved.\n// See LICENSE.txt for license information.\n\nimport PropTypes from 'prop-types';\nimport React from 'react';\n\nimport Constants from 'utils/constants.jsx';\n\nimport MenuWrapperAnimation from './menu_wrapper_animation.jsx';\n\nexport default class MenuWrapper extends React.PureComponent {\n    static propTypes = {\n        children: PropTypes.node,\n        className: PropTypes.string,\n        onToggle: PropTypes.func,\n        animationComponent: PropTypes.any.isRequired,\n    };\n\n    static defaultProps = {\n        className: '',\n        animationComponent: MenuWrapperAnimation,\n    };\n\n    constructor(props) {\n        if (!Array.isArray(props.children) || props.children.length !== 2) {\n            throw new Error('MenuWrapper needs exactly 2 children');\n        }\n        super(props);\n        this.state = {\n            open: false,\n        };\n        this.node = React.createRef();\n    }\n\n    componentDidMount() {\n        document.addEventListener('click', this.closeOnBlur, true);\n        document.addEventListener('keyup', this.keyboardClose, true);\n    }\n\n    componentWillUnmount() {\n        document.removeEventListener('click', this.closeOnBlur, true);\n        document.removeEventListener('keyup', this.keyboardClose, true);\n    }\n\n    keyboardClose = (e) => {\n        if (e.key === Constants.KeyCodes.ESCAPE[0]) {\n            this.close();\n        }\n\n        if (e.key === Constants.KeyCodes.TAB[0]) {\n            this.closeOnBlur(e);\n        }\n    }\n\n    closeOnBlur = (e) => {\n        if (this.node.current && this.node.current.contains(e.target)) {\n            return;\n        }\n\n        this.close();\n    }\n\n    close = () => {\n        if (this.state.open) {\n            this.setState({open: false});\n            if (this.props.onToggle) {\n                this.props.onToggle(false);\n            }\n        }\n    }\n\n    toggle = () => {\n        const newState = !this.state.open;\n        this.setState({open: newState});\n        if (this.props.onToggle) {\n            this.props.onToggle(newState);\n        }\n    }\n\n    render() {\n        const {children} = this.props;\n\n        const Animation = this.props.animationComponent;\n\n        return (\n            <div\n                className={'MenuWrapper ' + this.props.className}\n                onClick={this.toggle}\n                ref={this.node}\n            >\n                {children[0]}\n                <Animation show={this.state.open}>\n                    {children[1]}\n                </Animation>\n            </div>\n        );\n    }\n}\n","// Copyright (c) 2015-present Mattermost, Inc. All Rights Reserved.\n// See LICENSE.txt for license information.\n\nimport PropTypes from 'prop-types';\nimport React from 'react';\nimport {intlShape} from 'react-intl';\n\nexport default class LoadingSpinner extends React.PureComponent {\n    static propTypes = {\n        text: PropTypes.node,\n    }\n\n    static defaultProps = {\n        text: null,\n    }\n\n    static contextTypes = {\n        intl: intlShape.isRequired,\n    };\n\n    render() {\n        const {formatMessage} = this.context.intl;\n        return (\n            <span\n                id='loadingSpinner'\n                className={'LoadingSpinner' + (this.props.text ? ' with-text' : '')}\n            >\n                <span\n                    className='fa fa-spinner fa-fw fa-pulse spinner'\n                    title={formatMessage({id: 'generic_icons.loading', defaultMessage: 'Loading Icon'})}\n                />\n                {this.props.text}\n            </span>\n        );\n    }\n}\n","// Copyright (c) 2015-present Mattermost, Inc. All Rights Reserved.\n// See LICENSE.txt for license information.\n\nimport exif2css from 'exif2css';\n\nimport Constants from 'utils/constants.jsx';\nimport * as UserAgent from 'utils/user_agent';\n\nexport function canUploadFiles(config) {\n    const enableFileAttachments = config.EnableFileAttachments === 'true';\n    const enableMobileFileUpload = config.EnableMobileFileUpload === 'true';\n\n    if (!enableFileAttachments) {\n        return false;\n    }\n\n    if (UserAgent.isMobileApp()) {\n        return enableMobileFileUpload;\n    }\n\n    return true;\n}\n\nexport function canDownloadFiles(config) {\n    if (UserAgent.isMobileApp()) {\n        return config.EnableMobileFileDownload === 'true';\n    }\n\n    return true;\n}\n\nexport function trimFilename(filename) {\n    let trimmedFilename = filename;\n    if (filename.length > Constants.MAX_FILENAME_LENGTH) {\n        trimmedFilename = filename.substring(0, Math.min(Constants.MAX_FILENAME_LENGTH, filename.length)) + '...';\n    }\n\n    return trimmedFilename;\n}\n\nexport function getFileTypeFromMime(mimetype) {\n    const mimeTypeSplitBySlash = mimetype.split('/');\n    const mimeTypePrefix = mimeTypeSplitBySlash[0];\n    const mimeTypeSuffix = mimeTypeSplitBySlash[1];\n\n    if (mimeTypePrefix === 'video') {\n        return 'video';\n    } else if (mimeTypePrefix === 'audio') {\n        return 'audio';\n    } else if (mimeTypePrefix === 'image') {\n        return 'image';\n    }\n\n    if (mimeTypeSuffix) {\n        if (mimeTypeSuffix === 'pdf') {\n            return 'pdf';\n        } else if (mimeTypeSuffix.includes('vnd.ms-excel') || mimeTypeSuffix.includes('spreadsheetml') || mimeTypeSuffix.includes('vnd.sun.xml.calc') || mimeTypeSuffix.includes('opendocument.spreadsheet')) {\n            return 'spreadsheet';\n        } else if (mimeTypeSuffix.includes('vnd.ms-powerpoint') || mimeTypeSuffix.includes('presentationml') || mimeTypeSuffix.includes('vnd.sun.xml.impress') || mimeTypeSuffix.includes('opendocument.presentation')) {\n            return 'presentation';\n        } else if ((mimeTypeSuffix === 'msword') || mimeTypeSuffix.includes('vnd.ms-word') || mimeTypeSuffix.includes('officedocument.wordprocessingml') || mimeTypeSuffix.includes('application/x-mswrite')) {\n            return 'word';\n        }\n    }\n\n    return 'other';\n}\n\n// based on https://stackoverflow.com/questions/7584794/accessing-jpeg-exif-rotation-data-in-javascript-on-the-client-side/32490603#32490603\nexport function getExifOrientation(data) {\n    var view = new DataView(data);\n\n    if (view.getUint16(0, false) !== 0xFFD8) {\n        return -2;\n    }\n\n    var length = view.byteLength;\n    var offset = 2;\n\n    while (offset < length) {\n        var marker = view.getUint16(offset, false);\n        offset += 2;\n\n        if (marker === 0xFFE1) {\n            if (view.getUint32(offset += 2, false) !== 0x45786966) {\n                return -1;\n            }\n\n            var little = view.getUint16(offset += 6, false) === 0x4949;\n            offset += view.getUint32(offset + 4, little);\n            var tags = view.getUint16(offset, little);\n            offset += 2;\n\n            for (var i = 0; i < tags; i++) {\n                if (view.getUint16(offset + (i * 12), little) === 0x0112) {\n                    return view.getUint16(offset + (i * 12) + 8, little);\n                }\n            }\n        } else if ((marker & 0xFF00) === 0xFF00) {\n            offset += view.getUint16(offset, false);\n        } else {\n            break;\n        }\n    }\n    return -1;\n}\n\nexport function getOrientationStyles(orientation) {\n    const {\n        transform,\n        'transform-origin': transformOrigin,\n    } = exif2css(orientation);\n    return {transform, transformOrigin};\n}\n","// Copyright (c) 2015-present Mattermost, Inc. All Rights Reserved.\n// See LICENSE.txt for license information.\n\nimport PropTypes from 'prop-types';\nimport React from 'react';\n\nimport {FormattedMessage} from 'react-intl';\n\nexport default class WarningIcon extends React.PureComponent {\n    static propTypes = {\n        additionalClassName: PropTypes.string,\n    };\n\n    static defaultProps = {\n        additionalClassName: null,\n    };\n\n    render() {\n        const className = 'fa fa-warning' + (this.props.additionalClassName ? ' ' + this.props.additionalClassName : '');\n        return (\n            <FormattedMessage\n                id='generic_icons.warning'\n                defaultMessage='Warning Icon'\n            >\n                {(title) => (\n                    <i\n                        className={className}\n                        title={title}\n                    />\n                )}\n            </FormattedMessage>\n        );\n    }\n}\n","// Copyright (c) 2015-present Mattermost, Inc. All Rights Reserved.\n// See LICENSE.txt for license information.\n\nimport PropTypes from 'prop-types';\nimport React from 'react';\nimport {OverlayTrigger} from 'react-bootstrap';\n\nimport ProfilePopover from 'components/profile_popover';\nimport StatusIcon from 'components/status_icon';\n\nimport './profile_picture.scss';\n\nexport default class ProfilePicture extends React.PureComponent {\n    static defaultProps = {\n        width: '36',\n        height: '36',\n        isRHS: false,\n        isEmoji: false,\n        hasMention: false,\n    };\n\n    static propTypes = {\n        src: PropTypes.string.isRequired,\n        profileSrc: PropTypes.string,\n        status: PropTypes.string,\n        width: PropTypes.string,\n        height: PropTypes.string,\n        userId: PropTypes.string,\n        username: PropTypes.string,\n        isBusy: PropTypes.bool,\n        isRHS: PropTypes.bool,\n        hasMention: PropTypes.bool,\n        isEmoji: PropTypes.bool,\n        wrapperClass: PropTypes.string,\n    };\n\n    hideProfilePopover = () => {\n        this.refs.overlay.hide();\n    }\n\n    render() {\n        // profileSrc will, if possible, be the original user profile picture even if the icon\n        // for the post is overriden, so that the popup shows the user identity\n        const profileSrc = (typeof this.props.profileSrc === 'string' && this.props.profileSrc !== '') ?\n            this.props.profileSrc :\n            this.props.src;\n\n        const profileIconClass = `profile-icon ${this.props.isEmoji ? 'emoji' : ''}`;\n\n        if (this.props.userId) {\n            return (\n                <OverlayTrigger\n                    ref='overlay'\n                    trigger='click'\n                    placement='right'\n                    rootClose={true}\n                    overlay={\n                        <ProfilePopover\n                            userId={this.props.userId}\n                            src={profileSrc}\n                            isBusy={this.props.isBusy}\n                            hide={this.hideProfilePopover}\n                            isRHS={this.props.isRHS}\n                            hasMention={this.props.hasMention}\n                        />\n                    }\n                >\n                    <span className='status-wrapper'>\n                        <span className={profileIconClass}>\n                            <img\n                                className='ProfilePicture more-modal__image'\n                                alt={`${this.props.username || 'user'} profile image`}\n                                width={this.props.width}\n                                height={this.props.width}\n                                src={this.props.src}\n                            />\n                        </span>\n                        <StatusIcon status={this.props.status}/>\n                    </span>\n                </OverlayTrigger>\n            );\n        }\n        return (\n            <span className='status-wrapper'>\n                <span className={profileIconClass}>\n                    <img\n                        className='more-modal__image'\n                        alt=''\n                        height={this.props.width}\n                        width={this.props.width}\n                        src={this.props.src}\n                    />\n                </span>\n                <StatusIcon status={this.props.status}/>\n            </span>\n        );\n    }\n}\n","// Copyright (c) 2015-present Mattermost, Inc. All Rights Reserved.\n// See LICENSE.txt for license information.\n\nimport {SearchTypes} from 'utils/constants';\n\nexport function setModalSearchTerm(term) {\n    return async (dispatch) => {\n        dispatch({\n            type: SearchTypes.SET_MODAL_SEARCH,\n            data: term,\n        });\n        return {data: true};\n    };\n}\n\nexport function setSystemUsersSearch(term, team, filter = '') {\n    return async (dispatch) => {\n        dispatch({\n            type: SearchTypes.SET_SYSTEM_USERS_SEARCH,\n            data: {term, team, filter},\n        });\n        return {data: true};\n    };\n}\n","// Copyright (c) 2015-present Mattermost, Inc. All Rights Reserved.\n// See LICENSE.txt for license information.\n\nimport PropTypes from 'prop-types';\nimport React from 'react';\n\nexport default class Pluggable extends React.PureComponent {\n    static propTypes = {\n\n        /*\n         * Should be a single overridable React component. One of this or pluggableName is required\n         */\n        children: PropTypes.element,\n\n        /*\n         * Override the component to be plugged. One of this or children is required\n         */\n        pluggableName: PropTypes.string,\n\n        /*\n         * Components for overriding provided by plugins\n         */\n        components: PropTypes.object.isRequired,\n\n        /*\n         * Logged in user's theme\n         */\n        theme: PropTypes.object.isRequired,\n\n        /*\n         * Id of the specific component to be plugged.\n         */\n        pluggableId: PropTypes.string,\n    }\n\n    render() {\n        const pluggableName = this.props.pluggableName;\n\n        let child;\n        if (this.props.children) {\n            child = React.Children.only(this.props.children).type;\n        } else if (!pluggableName) {\n            return null;\n        }\n\n        const components = this.props.components;\n        const childrenProps = child ? this.props.children.props : {};\n        const componentName = pluggableName || child.getComponentName();\n\n        // Include any props passed to this component or to the child component\n        let props = {...this.props};\n        Reflect.deleteProperty(props, 'children');\n        Reflect.deleteProperty(props, 'components');\n        Reflect.deleteProperty(props, 'pluggableName');\n        props = {...props, ...childrenProps};\n\n        // Override the default component with any registered plugin's component\n        // Select a specific component by pluginId if available\n        if (components.hasOwnProperty(componentName)) {\n            let pluginComponents = components[componentName];\n\n            if (this.props.pluggableId) {\n                pluginComponents = pluginComponents.filter(\n                    (element) => element.id === this.props.pluggableId);\n            }\n\n            const content = pluginComponents.map((p) => {\n                const PluginComponent = p.component;\n                return (\n                    <PluginComponent\n                        {...props}\n                        theme={this.props.theme}\n                        key={componentName + p.id}\n                    />\n                );\n            });\n\n            return (\n                <React.Fragment>\n                    {content}\n                </React.Fragment>\n            );\n        }\n\n        if (child == null) {\n            return null;\n        }\n\n        return React.cloneElement(this.props.children, {...props});\n    }\n}\n","// Copyright (c) 2015-present Mattermost, Inc. All Rights Reserved.\n// See LICENSE.txt for license information.\n\nimport {connect} from 'react-redux';\nimport {getTheme} from 'mattermost-redux/selectors/entities/preferences';\n\nimport Pluggable from './pluggable.jsx';\n\nfunction mapStateToProps(state) {\n    return {\n        components: state.plugins.components,\n        theme: getTheme(state),\n    };\n}\n\nexport default connect(mapStateToProps)(Pluggable);\n","// Copyright (c) 2015-present Mattermost, Inc. All Rights Reserved.\n// See LICENSE.txt for license information.\n\nimport React from 'react';\nimport {FormattedMessage} from 'react-intl';\n\nexport default class GlobeIcon extends React.PureComponent {\n    render() {\n        return (\n            <span {...this.props}>\n                <FormattedMessage\n                    id='generic_icons.channel.public'\n                    defaultMessage='Public Channel Icon'\n                >\n                    {(ariaLabel) => (\n                        <svg\n                            width='13px'\n                            height='13px'\n                            viewBox='0 0 14 14'\n                            role='icon'\n                            aria-label={ariaLabel}\n                        >\n                            <g\n                                stroke='none'\n                                strokeWidth='1'\n                                fill='inherit'\n                                fillRule='evenodd'\n                            >\n                                <g\n                                    transform='translate(-115.000000, -147.000000)'\n                                    fillRule='nonzero'\n                                    fill='inherit'\n                                >\n                                    <g transform='translate(95.000000, 0.000000)'>\n                                        <g transform='translate(20.000000, 113.000000)'>\n                                            <g transform='translate(0.000000, 34.000000)'>\n                                                <path d='M10.409,0.893375 C9.40275,0.329875 8.24075,0.00875 7,0 C3.13075,0 0,3.140375 0,7 C0,10.521875 2.594375,13.42775 5.97625,13.93 C6.314875,13.974625 6.6535,14 7,14 C8.24075,14 9.40275,13.678875 10.409,13.1145 C12.551875,11.918375 14,9.6285 14,7 C13.99125,4.3715 12.551875,2.090375 10.409,0.893375 Z M11.554375,4.375 L9.431625,4.375 C9.302125,3.5 9.10875,2.736125 8.86725,2.085125 C10.003875,2.519125 10.9515,3.5 11.554375,4.375 Z M6.941375,1.73775 C6.960625,1.736875 6.979875,1.73425 7,1.73425 C7.020125,1.73425 7.039375,1.736875 7.058625,1.73775 C7.340375,2.172625 7.697375,3.5 7.92225,4.375 L6.07775,4.375 C6.302625,3.5 6.659625,2.172625 6.941375,1.73775 Z M1.81475,7.875 C1.7675,7.875 1.73425,7.29925 1.73425,7 C1.73425,6.70075 1.764875,6.125 1.813,6.125 L4.396875,6.125 C4.384625,6.125 4.375,6.7025 4.375,7 C4.375,7.2975 4.384625,7.875 4.396875,7.875 L1.81475,7.875 Z M4.354875,11.54475 C4.346125,11.54475 4.337375,11.54475 4.337375,11.536 C3.548125,11.07575 2.893625,10.5 2.436875,9.625 L4.568375,9.625 C4.697875,10.5 4.890375,11.262125 5.131875,11.91225 C4.8615,11.81075 4.599875,11.692625 4.354875,11.54475 Z M4.568375,4.375 L2.443875,4.375 C3.045875,3.5 3.994375,2.517375 5.131875,2.083375 C4.89125,2.734375 4.697875,3.5 4.568375,4.375 Z M7.0595,12.26225 C7.039375,12.26225 7.020125,12.26575 7,12.26575 C6.979875,12.26575 6.960625,12.26225 6.9405,12.26225 C6.65875,11.8265 6.302625,11.375 6.07775,9.625 L7.921375,9.625 C7.697375,11.375 7.34125,11.8265 7.0595,12.26225 Z M8.11125,7.875 L5.88875,7.875 C5.873875,7.875 5.8625,7.30625 5.8625,7 C5.8625,6.69375 5.873875,6.125 5.88875,6.125 L8.11125,6.125 C8.126125,6.125 8.1375,6.69375 8.1375,7 C8.1375,7.30625 8.126125,7.875 8.11125,7.875 Z M10.409,11.0075 C10.13075,11.242 9.828,11.45025 9.506875,11.631375 C9.30125,11.74075 9.086875,11.839625 8.8655,11.923625 C9.107,11.270875 9.30125,10.5 9.431625,9.625 L11.557875,9.625 C11.25425,10.5 10.8675,10.618125 10.409,11.0075 Z M9.603125,7.875 C9.615375,7.875 9.625,7.2975 9.625,7 C9.625,6.7025 9.615375,6.125 9.603125,6.125 L12.186125,6.125 C12.235125,6.125 12.26575,6.70075 12.26575,7 C12.26575,7.29925 12.233375,7.875 12.18525,7.875 L9.603125,7.875 Z'/>\n                                            </g>\n                                        </g>\n                                    </g>\n                                </g>\n                            </g>\n                        </svg>\n                    )}\n                </FormattedMessage>\n            </span>\n        );\n    }\n}\n","// Copyright (c) 2015-present Mattermost, Inc. All Rights Reserved.\n// See LICENSE.txt for license information.\n\nimport React from 'react';\n\nimport {FormattedMessage} from 'react-intl';\n\nexport default class LockIcon extends React.PureComponent {\n    render() {\n        return (\n            <span {...this.props}>\n                <FormattedMessage\n                    id='generic_icons.channel.private'\n                    defaultMessage='Private Channel Icon'\n                >\n                    {(title) => (\n                        <svg\n                            width='12px'\n                            height='13px'\n                            viewBox='0 0 13 15'\n                            role='icon'\n                            title={title}\n                        >\n                            <g\n                                stroke='none'\n                                strokeWidth='1'\n                                fill='inherit'\n                                fillRule='evenodd'\n                            >\n                                <g\n                                    transform='translate(-116.000000, -175.000000)'\n                                    fillRule='nonzero'\n                                    fill='inherit'\n                                >\n                                    <g transform='translate(95.000000, 0.000000)'>\n                                        <g transform='translate(20.000000, 113.000000)'>\n                                            <g transform='translate(1.000000, 62.000000)'>\n                                                <path d='M12.0714286,6.5 L11.1428571,6.5 L11.1428571,4.64285714 C11.1428571,2.07814286 9.06471429,0 6.5,0 C3.93528571,0 1.85714286,2.07814286 1.85714286,4.64285714 L1.85714286,6.5 L0.928571429,6.5 C0.415071429,6.5 0,7.00792857 0,7.52142857 L0,13.9285714 C0,14.4420714 0.415071429,14.8571429 0.928571429,14.8571429 L12.0714286,14.8571429 C12.5849286,14.8571429 13,14.4420714 13,13.9285714 L13,7.52142857 C13,7.00792857 12.5849286,6.5 12.0714286,6.5 Z M6.5,1.85714286 C8.03585714,1.85714286 9.28571429,3.107 9.28571429,4.64285714 L9.28571429,6.5 L8.35714286,6.5 L4.64285714,6.5 L3.71428571,6.5 L3.71428571,4.64285714 C3.71428571,3.107 4.96414286,1.85714286 6.5,1.85714286 Z'/>\n                                            </g>\n                                        </g>\n                                    </g>\n                                </g>\n                            </g>\n                        </svg>\n                    )}\n                </FormattedMessage>\n            </span>\n        );\n    }\n}\n","// Copyright (c) 2015-present Mattermost, Inc. All Rights Reserved.\n// See LICENSE.txt for license information.\n\nimport {getLicense} from 'mattermost-redux/selectors/entities/general';\n\nimport store from 'stores/redux_store.jsx';\n\nconst LICENSE_EXPIRY_NOTIFICATION = 1000 * 60 * 60 * 24 * 60; // 60 days\nconst LICENSE_GRACE_PERIOD = 1000 * 60 * 60 * 24 * 15; // 15 days\n\nexport function isLicenseExpiring() {\n    const license = getLicense(store.getState());\n    if (license.IsLicensed !== 'true') {\n        return false;\n    }\n\n    const timeDiff = parseInt(license.ExpiresAt, 10) - Date.now();\n    return timeDiff <= LICENSE_EXPIRY_NOTIFICATION;\n}\n\nexport function isLicenseExpired() {\n    const license = getLicense(store.getState());\n    if (license.IsLicensed !== 'true') {\n        return false;\n    }\n\n    const timeDiff = parseInt(license.ExpiresAt, 10) - Date.now();\n    return timeDiff < 0;\n}\n\nexport function isLicensePastGracePeriod() {\n    const license = getLicense(store.getState());\n    if (license.IsLicensed !== 'true') {\n        return false;\n    }\n\n    const timeDiff = Date.now() - parseInt(license.ExpiresAt, 10);\n    return timeDiff > LICENSE_GRACE_PERIOD;\n}\n","// Copyright (c) 2015-present Mattermost, Inc. All Rights Reserved.\n// See LICENSE.txt for license information.\n\nimport React from 'react';\nimport PropTypes from 'prop-types';\nimport {Tooltip, OverlayTrigger} from 'react-bootstrap';\n\nimport {Constants, AnnouncementBarTypes} from 'utils/constants.jsx';\nimport FormattedMarkdownMessage from 'components/formatted_markdown_message';\n\nexport default class AnnouncementBar extends React.PureComponent {\n    static propTypes = {\n        showCloseButton: PropTypes.bool,\n        color: PropTypes.string,\n        textColor: PropTypes.string,\n        type: PropTypes.string,\n        message: PropTypes.node.isRequired,\n        handleClose: PropTypes.func,\n    }\n    static defaultProps = {\n        showCloseButton: false,\n        color: '',\n        textColor: '',\n        type: AnnouncementBarTypes.CRITICAL,\n        handleClose: null,\n    }\n\n    componentDidMount() {\n        let announcementBarCount = document.body.getAttribute('announcementBarCount') || 0;\n        announcementBarCount++;\n        document.body.classList.add('announcement-bar--fixed');\n\n        // keeping a track of mounted AnnouncementBars so that on the last AnnouncementBars unmount we can remove the class on body\n        document.body.setAttribute('announcementBarCount', announcementBarCount);\n    }\n\n    componentWillUnmount() {\n        let announcementBarCount = document.body.getAttribute('announcementBarCount');\n        announcementBarCount--;\n        document.body.setAttribute('announcementBarCount', announcementBarCount);\n\n        // remove the class on body as it is the last announcementBar\n        if (announcementBarCount === 0) {\n            document.body.classList.remove('announcement-bar--fixed');\n        }\n    }\n\n    handleClose = (e) => {\n        e.preventDefault();\n        if (this.props.handleClose) {\n            this.props.handleClose();\n        }\n    }\n\n    render() {\n        if (!this.props.message) {\n            return null;\n        }\n\n        let barClass = 'announcement-bar';\n        const barStyle = {};\n        const linkStyle = {};\n        if (this.props.color && this.props.textColor) {\n            barStyle.backgroundColor = this.props.color;\n            barStyle.color = this.props.textColor;\n            linkStyle.color = this.props.textColor;\n        } else if (this.props.type === AnnouncementBarTypes.DEVELOPER) {\n            barClass = 'announcement-bar announcement-bar-developer';\n        } else if (this.props.type === AnnouncementBarTypes.CRITICAL) {\n            barClass = 'announcement-bar announcement-bar-critical';\n        } else if (this.props.type === AnnouncementBarTypes.SUCCESS) {\n            barClass = 'announcement-bar announcement-bar-success';\n        }\n\n        let closeButton;\n        if (this.props.showCloseButton) {\n            closeButton = (\n                <a\n                    href='#'\n                    className='announcement-bar__close'\n                    style={linkStyle}\n                    onClick={this.handleClose}\n                >\n                    {'×'}\n                </a>\n            );\n        }\n\n        let message = this.props.message;\n        if (typeof message == 'string') {\n            message = (\n                <FormattedMarkdownMessage id={this.props.message}/>\n            );\n        }\n\n        const announcementTooltip = (\n            <Tooltip id='announcement-bar__tooltip'>\n                {message}\n            </Tooltip>\n        );\n\n        return (\n            <div\n                className={barClass}\n                style={barStyle}\n            >\n                <OverlayTrigger\n                    delayShow={Constants.OVERLAY_TIME_DELAY}\n                    placement='bottom'\n                    overlay={announcementTooltip}\n                >\n                    <span>\n                        {message}\n                    </span>\n                </OverlayTrigger>\n                {closeButton}\n            </div>\n        );\n    }\n}\n","// Copyright (c) 2015-present Mattermost, Inc. All Rights Reserved.\n// See LICENSE.txt for license information.\n\nimport React from 'react';\nimport PropTypes from 'prop-types';\n\nimport * as TextFormatting from 'utils/text_formatting.jsx';\n\nimport AnnouncementBar from './announcement_bar.jsx';\n\nconst localStoragePrefix = '__announcement__';\n\nexport default class TextDismissableBar extends React.PureComponent {\n    static propTypes = {\n        allowDismissal: PropTypes.bool.isRequired,\n        text: PropTypes.string.isRequired,\n        onDismissal: PropTypes.func,\n\n        // Any props that AnnouncementBar supports\n    };\n\n    constructor(props) {\n        super(props);\n\n        this.state = {\n            dismissed: true,\n        };\n    }\n\n    static getDerivedStateFromProps(props) {\n        const dismissed = localStorage.getItem(localStoragePrefix + props.text);\n        return {\n            dismissed,\n        };\n    }\n\n    handleDismiss = () => {\n        if (!this.props.allowDismissal) {\n            return;\n        }\n        localStorage.setItem(localStoragePrefix + this.props.text, true);\n        this.setState({\n            dismissed: true,\n        });\n        if (this.props.onDismissal) {\n            this.props.onDismissal();\n        }\n    }\n\n    render() {\n        if (this.state.dismissed) {\n            return null;\n        }\n        const {allowDismissal, text, ...extraProps} = this.props;\n        return (\n            <AnnouncementBar\n                {...extraProps}\n                showCloseButton={allowDismissal}\n                handleClose={this.handleDismiss}\n                message={\n                    <span\n                        dangerouslySetInnerHTML={{__html: TextFormatting.formatText(text, {singleline: true, mentionHighlight: false})}}\n                    />\n                }\n            />\n        );\n    }\n}\n\n","// Copyright (c) 2015-present Mattermost, Inc. All Rights Reserved.\n// See LICENSE.txt for license information.\n\nimport React from 'react';\nimport PropTypes from 'prop-types';\n\nimport {FormattedMessage, intlShape} from 'react-intl';\n\nimport {isLicenseExpired, isLicenseExpiring, isLicensePastGracePeriod} from 'utils/license_utils.jsx';\nimport {AnnouncementBarTypes, AnnouncementBarMessages} from 'utils/constants.jsx';\n\nimport {t} from 'utils/i18n';\n\nimport FormattedMarkdownMessage from 'components/formatted_markdown_message';\n\nimport AnnouncementBar from '../announcement_bar.jsx';\nimport TextDismissableBar from '../text_dismissable_bar';\n\nconst RENEWAL_LINK = 'https://licensing.mattermost.com/renew';\n\nexport default class ConfigurationAnnouncementBar extends React.PureComponent {\n    static propTypes = {\n        config: PropTypes.object,\n        license: PropTypes.object,\n        user: PropTypes.object,\n        canViewSystemErrors: PropTypes.bool.isRequired,\n        totalUsers: PropTypes.number,\n        dismissedExpiringLicense: PropTypes.bool,\n        actions: PropTypes.shape({\n            dismissNotice: PropTypes.func.isRequired,\n        }).isRequired,\n    };\n\n    static contextTypes = {\n        intl: intlShape,\n    };\n\n    dismissExpiringLicense = () => {\n        this.props.actions.dismissNotice(AnnouncementBarMessages.LICENSE_EXPIRING);\n    }\n\n    render() {\n        // System administrators\n        if (this.props.canViewSystemErrors) {\n            const renewalLink = RENEWAL_LINK + '?id=' + this.props.license.id + '&user_count=' + this.props.totalUsers;\n            if (isLicensePastGracePeriod()) {\n                return (\n                    <AnnouncementBar\n                        type={AnnouncementBarTypes.CRITICAL}\n                        message={\n                            <FormattedMarkdownMessage\n                                id={AnnouncementBarMessages.LICENSE_EXPIRED}\n                                defaultMessage='Enterprise license is expired and some features may be disabled. [Please renew](!{link}).'\n                                values={{\n                                    link: renewalLink,\n                                }}\n                            />\n                        }\n                    />\n                );\n            }\n\n            if (isLicenseExpired()) {\n                return (\n                    <AnnouncementBar\n                        type={AnnouncementBarTypes.CRITICAL}\n                        message={\n                            <FormattedMarkdownMessage\n                                id={AnnouncementBarMessages.LICENSE_EXPIRED}\n                                defaultMessage='Enterprise license is expired and some features may be disabled. [Please renew](!{link}).'\n                                values={{\n                                    link: renewalLink,\n                                }}\n                            />\n                        }\n                    />\n                );\n            }\n\n            if (isLicenseExpiring() && !this.props.dismissedExpiringLicense) {\n                return (\n                    <AnnouncementBar\n                        showCloseButton={true}\n                        handleClose={this.dismissExpiringLicense}\n                        type={AnnouncementBarTypes.ANNOUNCEMENT}\n                        message={\n                            <FormattedMarkdownMessage\n                                id={AnnouncementBarMessages.LICENSE_EXPIRING}\n                                defaultMessage='Enterprise license expires on {date, date, long}. [Please renew](!{link}).'\n                                values={{\n                                    date: new Date(parseInt(this.props.license.ExpiresAt, 10)),\n                                    link: renewalLink,\n                                }}\n                            />\n                        }\n                    />\n                );\n            }\n        } else {\n            // Regular users\n            if (isLicensePastGracePeriod()) { //eslint-disable-line no-lonely-if\n                return (\n                    <AnnouncementBar\n                        type={AnnouncementBarTypes.CRITICAL}\n                        message={\n                            <FormattedMessage\n                                id={AnnouncementBarMessages.LICENSE_PAST_GRACE}\n                                defaultMessage='Enterprise license is expired and some features may be disabled. Please contact your System Administrator for details.'\n                            />\n                        }\n                    />\n                );\n            }\n        }\n\n        const {formatMessage} = this.context.intl;\n\n        if (this.props.config.SendEmailNotifications !== 'true' &&\n            this.props.config.EnablePreviewModeBanner === 'true'\n        ) {\n            const emailMessage = formatMessage({\n                id: AnnouncementBarMessages.PREVIEW_MODE,\n                defaultMessage: 'Preview Mode: Email notifications have not been configured',\n            });\n\n            return (\n                <TextDismissableBar\n                    allowDismissal={true}\n                    text={emailMessage}\n                    type={AnnouncementBarTypes.ANNOUNCEMENT}\n                />\n            );\n        }\n\n        if (this.props.canViewSystemErrors && this.props.config.SiteURL === '') {\n            let id;\n            let defaultMessage;\n            if (this.props.config.EnableSignUpWithGitLab === 'true') {\n                id = t('announcement_bar.error.site_url_gitlab.full');\n                defaultMessage = 'Please configure your [Site URL](https://docs.mattermost.com/administration/config-settings.html#site-url) in the [System Console](/admin_console/environment/web_server) or in gitlab.rb if you\\'re using GitLab Mattermost.';\n            } else {\n                id = t('announcement_bar.error.site_url.full');\n                defaultMessage = 'Please configure your [Site URL](https://docs.mattermost.com/administration/config-settings.html#site-url) in the [System Console](/admin_console/environment/web_server).';\n            }\n\n            const siteURLMessage = formatMessage({id, defaultMessage});\n\n            return (\n                <TextDismissableBar\n                    allowDismissal={true}\n                    text={siteURLMessage}\n                    type={AnnouncementBarTypes.ANNOUNCEMENT}\n                />\n            );\n        }\n\n        return null;\n    }\n}\n","// Copyright (c) 2015-present Mattermost, Inc. All Rights Reserved.\n// See LICENSE.txt for license information.\n\nimport {connect} from 'react-redux';\nimport {bindActionCreators} from 'redux';\n\nimport {AnnouncementBarMessages} from 'utils/constants.jsx';\nimport {dismissNotice} from 'actions/views/notice';\n\nimport ConfigurationBar from './configuration_bar.jsx';\n\nfunction mapStateToProps(state) {\n    return {\n        dismissedExpiringLicense: Boolean(state.views.notice.hasBeenDismissed[AnnouncementBarMessages.LICENSE_EXPIRING]),\n    };\n}\n\nfunction mapDispatchToProps(dispatch) {\n    return {\n        actions: bindActionCreators({\n            dismissNotice,\n        }, dispatch),\n    };\n}\n\nexport default connect(mapStateToProps, mapDispatchToProps)(ConfigurationBar);\n","// Copyright (c) 2015-present Mattermost, Inc. All Rights Reserved.\n// See LICENSE.txt for license information.\n\nimport React from 'react';\nimport PropTypes from 'prop-types';\n\nimport {FormattedMessage} from 'react-intl';\n\nimport {equalServerVersions} from 'utils/server_version.jsx';\nimport {AnnouncementBarTypes} from 'utils/constants.jsx';\n\nimport AnnouncementBar from '../announcement_bar.jsx';\n\nexport default class VersionBar extends React.PureComponent {\n    static propTypes = {\n        serverVersion: PropTypes.string,\n    };\n\n    constructor(props) {\n        super(props);\n\n        this.state = {\n            serverVersionOnAppLoad: props.serverVersion,\n        };\n    }\n\n    static getDerivedStateFromProps(props, state) {\n        if (!state.serverVersionOnAppLoad && props.serverVersion) {\n            return {\n                serverVersionOnAppLoad: props.serverVersion,\n            };\n        }\n\n        return null;\n    }\n\n    reloadPage = () => {\n        window.location.reload();\n    }\n\n    render() {\n        const {serverVersionOnAppLoad} = this.state;\n        const {serverVersion} = this.props;\n\n        if (!serverVersionOnAppLoad) {\n            return null;\n        }\n\n        if (!equalServerVersions(serverVersionOnAppLoad, serverVersion)) {\n            return (\n                <AnnouncementBar\n                    type={AnnouncementBarTypes.ANNOUNCEMENT}\n                    message={\n                        <React.Fragment>\n                            <FormattedMessage\n                                id='version_bar.new'\n                                defaultMessage='A new version of Mattermost is available.'\n                            />\n                            {' '}\n                            <a onClick={this.reloadPage}>\n                                <FormattedMessage\n                                    id='version_bar.refresh'\n                                    defaultMessage='Refresh the app now'\n                                />\n                            </a>\n                            {'.'}\n                        </React.Fragment>\n                    }\n                />\n            );\n        }\n\n        return null;\n    }\n}\n","// Copyright (c) 2015-present Mattermost, Inc. All Rights Reserved.\n// See LICENSE.txt for license information.\n\nimport {connect} from 'react-redux';\n\nimport VersionBar from './version_bar.jsx';\n\nfunction mapStateToProps(state) {\n    return {\n        serverVersion: state.entities.general.serverVersion,\n    };\n}\n\nexport default connect(mapStateToProps)(VersionBar);\n","// Copyright (c) 2015-present Mattermost, Inc. All Rights Reserved.\n// See LICENSE.txt for license information.\n\nimport React from 'react';\nimport PropTypes from 'prop-types';\n\nimport ConfigurationAnnouncementBar from './configuration_bar';\nimport VersionBar from './version_bar';\nimport TextDismissableBar from './text_dismissable_bar.jsx';\nimport AnnouncementBar from './announcement_bar.jsx';\n\nexport default class AnnouncementBarController extends React.PureComponent {\n    static propTypes = {\n        license: PropTypes.object,\n        config: PropTypes.object,\n        user: PropTypes.shape({\n            email: PropTypes.string.isRequired,\n            email_verified: PropTypes.bool,\n        }),\n        canViewSystemErrors: PropTypes.bool.isRequired,\n        latestError: PropTypes.object,\n        totalUsers: PropTypes.number,\n        actions: PropTypes.shape({\n            dismissError: PropTypes.func.isRequired,\n        }).isRequired,\n    }\n\n    render() {\n        let adminConfiguredAnnouncementBar = null;\n        if (this.props.config.EnableBanner === 'true' && this.props.config.BannerText.trim()) {\n            adminConfiguredAnnouncementBar = (\n                <TextDismissableBar\n                    color={this.props.config.BannerColor}\n                    textColor={this.props.config.BannerTextColor}\n                    allowDismissal={this.props.config.AllowBannerDismissal === 'true'}\n                    text={this.props.config.BannerText}\n                />\n            );\n        }\n\n        let errorBar = null;\n        if (this.props.latestError) {\n            errorBar = (\n                <AnnouncementBar\n                    type={this.props.latestError.error.type}\n                    message={this.props.latestError.error.message}\n                    showCloseButton={true}\n                    handleClose={this.props.actions.dismissError}\n                />\n            );\n        }\n\n        return (\n            <React.Fragment>\n                {adminConfiguredAnnouncementBar}\n                {errorBar}\n                <VersionBar/>\n                <ConfigurationAnnouncementBar\n                    config={this.props.config}\n                    license={this.props.license}\n                    canViewSystemErrors={this.props.canViewSystemErrors}\n                    totalUsers={this.props.totalUsers}\n                    user={this.props.user}\n                />\n            </React.Fragment>\n        );\n    }\n}\n","// Copyright (c) 2015-present Mattermost, Inc. All Rights Reserved.\n// See LICENSE.txt for license information.\n\nimport {connect} from 'react-redux';\nimport {bindActionCreators} from 'redux';\nimport {getCurrentUser} from 'mattermost-redux/selectors/entities/users';\nimport {haveISystemPermission} from 'mattermost-redux/selectors/entities/roles';\nimport {Permissions} from 'mattermost-redux/constants';\nimport {getConfig, getLicense} from 'mattermost-redux/selectors/entities/general';\nimport {getDisplayableErrors} from 'mattermost-redux/selectors/errors';\nimport {dismissError} from 'mattermost-redux/actions/errors';\nimport {getStandardAnalytics} from 'mattermost-redux/actions/admin';\n\nimport {dismissNotice} from 'actions/views/notice';\n\nimport AnnouncementBarController from './announcement_bar_controller.jsx';\n\nfunction mapStateToProps(state) {\n    const canViewSystemErrors = haveISystemPermission(state, {permission: Permissions.MANAGE_SYSTEM});\n    const license = getLicense(state);\n    const config = getConfig(state);\n    const user = getCurrentUser(state);\n    const errors = getDisplayableErrors(state);\n    const totalUsers = state.entities.admin.analytics.TOTAL_USERS;\n    let latestError = null;\n    if (errors && errors.length >= 1) {\n        latestError = errors[0];\n    }\n\n    return {\n        license,\n        config,\n        user,\n        canViewSystemErrors,\n        latestError,\n        totalUsers,\n    };\n}\n\nfunction mapDispatchToProps(dispatch) {\n    const dismissFirstError = dismissError.bind(null, 0);\n    return {\n        actions: bindActionCreators({\n            getStandardAnalytics,\n            dismissError: dismissFirstError,\n            dismissNotice,\n        }, dispatch),\n    };\n}\n\nexport default connect(mapStateToProps, mapDispatchToProps)(AnnouncementBarController);\n","// Copyright (c) 2015-present Mattermost, Inc. All Rights Reserved.\n// See LICENSE.txt for license information.\n\nimport PropTypes from 'prop-types';\nimport React, {PureComponent} from 'react';\n\nimport LoadingWrapper from 'components/widgets/loading/loading_wrapper.jsx';\n\nexport default class SpinnerButton extends PureComponent {\n    static defaultProps = {\n        spinning: false,\n    }\n\n    static propTypes = {\n\n        /**\n         * Children to show when not spinning\n         */\n        children: PropTypes.node,\n\n        /**\n         * Set to true to spin\n         */\n        spinning: PropTypes.bool.isRequired,\n\n        /**\n         * Set the text used while spinning\n         */\n        spinningText: PropTypes.node.isRequired,\n\n        /**\n         * Callback function when button is clicked\n         */\n        onClick: PropTypes.func,\n    }\n\n    render() {\n        const {spinning, spinningText, children, ...props} = this.props; // eslint-disable-line no-use-before-define\n\n        return (\n            <button\n                className='btn btn-primary'\n                disabled={spinning}\n                {...props}\n            >\n                <LoadingWrapper\n                    loading={spinning}\n                    text={spinningText}\n                >\n                    {children}\n                </LoadingWrapper>\n            </button>\n        );\n    }\n}\n","// Copyright (c) 2015-present Mattermost, Inc. All Rights Reserved.\n// See LICENSE.txt for license information.\n\nimport PropTypes from 'prop-types';\nimport React from 'react';\n\nimport EventEmitter from 'mattermost-redux/utils/event_emitter';\n\nimport QuickInput from 'components/quick_input.jsx';\nimport Constants from 'utils/constants.jsx';\nimport * as UserAgent from 'utils/user_agent.jsx';\nimport * as Utils from 'utils/utils.jsx';\n\nconst KeyCodes = Constants.KeyCodes;\n\nexport default class SuggestionBox extends React.Component {\n    static propTypes = {\n\n        /**\n         * The list component to render, usually SuggestionList\n         */\n        listComponent: PropTypes.func.isRequired,\n\n        /**\n         * The date component to render\n         */\n        dateComponent: PropTypes.func,\n\n        /**\n         * The value of in the input\n         */\n        value: PropTypes.string.isRequired,\n\n        /**\n         * Array of suggestion providers\n         */\n        providers: PropTypes.arrayOf(PropTypes.object),\n\n        /**\n         * Where the list will be displayed relative to the input box, defaults to 'top'\n         */\n        listStyle: PropTypes.string,\n\n        /**\n         * CSS class for the div parent of the input box\n         */\n        containerClass: PropTypes.string,\n\n        /**\n         * Set to true to draw dividers between types of list items, defaults to false\n         */\n        renderDividers: PropTypes.bool,\n\n        /**\n         * Set to true to render a message when there were no results found, defaults to false\n         */\n        renderNoResults: PropTypes.bool,\n\n        /**\n         * Set to allow TAB to select an item in the list, defaults to true\n         */\n        completeOnTab: PropTypes.bool,\n\n        /**\n         * Function called when input box gains focus\n         */\n        onFocus: PropTypes.func,\n\n        /**\n         * Function called when input box loses focus\n         */\n        onBlur: PropTypes.func,\n\n        /**\n         * Function called when input box value changes\n         */\n        onChange: PropTypes.func,\n\n        /**\n         * Function called when a key is pressed and the input box is in focus\n         */\n        onKeyDown: PropTypes.func,\n        onComposition: PropTypes.func,\n\n        /**\n         * Function called when an item is selected\n         */\n        onItemSelected: PropTypes.func,\n\n        /**\n         * Flags if the suggestion_box is for the RHS (Reply).\n         */\n        isRHS: PropTypes.bool,\n\n        /**\n         * The number of characters required to show the suggestion list, defaults to 1\n         */\n        requiredCharacters: PropTypes.number,\n\n        /**\n         * If true, the suggestion box is opened on focus, default to false\n         */\n        openOnFocus: PropTypes.bool,\n\n        /**\n         * If true, the suggestion box is disabled\n         */\n        disabled: PropTypes.bool,\n\n        /**\n         * If true, it displays allow to display a default list when empty\n         */\n        openWhenEmpty: PropTypes.bool,\n\n        /**\n         * If true, replace all input in the suggestion box with the selected option after a select, defaults to false\n         */\n        replaceAllInputOnSelect: PropTypes.bool,\n\n        /**\n         * An optional, opaque identifier that distinguishes the context in which the suggestion\n         * box is rendered. This allows the reused component to otherwise respond to changes.\n         */\n        contextId: PropTypes.string,\n\n        /**\n         * If true, listen for clicks on a mention and populate the input with said mention, defaults to false\n         */\n        listenForMentionKeyClick: PropTypes.bool,\n    }\n\n    static defaultProps = {\n        listStyle: 'top',\n        containerClass: '',\n        renderDividers: false,\n        renderNoResults: false,\n        completeOnTab: true,\n        isRHS: false,\n        requiredCharacters: 1,\n        openOnFocus: false,\n        openWhenEmpty: false,\n        replaceAllInputOnSelect: false,\n        listenForMentionKeyClick: false,\n    }\n\n    constructor(props) {\n        super(props);\n        this.suggestionReadOut = React.createRef();\n\n        // Keep track of whether we're composing a CJK character so we can make suggestions for partial characters\n        this.composing = false;\n\n        this.pretext = '';\n\n        // Used for debouncing pretext changes\n        this.timeoutId = '';\n\n        // Used for preventing suggestion list to close when scrollbar is clicked\n        this.preventSuggestionListCloseFlag = false;\n\n        // pretext: the text before the cursor\n        // matchedPretext: a list of the text before the cursor that will be replaced if the corresponding autocomplete term is selected\n        // terms: a list of strings which the previously typed text may be replaced by\n        // items: a list of objects backing the terms which may be used in rendering\n        // components: a list of react components that can be used to render their corresponding item\n        // selection: the term currently selected by the keyboard\n        this.state = {\n            focused: false,\n            cleared: true,\n            matchedPretext: [],\n            items: [],\n            terms: [],\n            components: [],\n            selection: '',\n            allowDividers: true,\n            presentationType: 'text',\n        };\n    }\n\n    componentDidMount() {\n        if (this.props.listenForMentionKeyClick) {\n            EventEmitter.addListener('mention_key_click', this.handleMentionKeyClick);\n        }\n    }\n\n    componentWillUnmount() {\n        EventEmitter.removeListener('mention_key_click', this.handleMentionKeyClick);\n    }\n\n    componentDidUpdate(prevProps) {\n        if (prevProps.contextId !== this.props.contextId) {\n            const textbox = this.getTextbox();\n            const pretext = textbox.value.substring(0, textbox.selectionEnd).toLowerCase();\n\n            this.handlePretextChanged(pretext);\n        }\n    }\n\n    handleMentionKeyClick = (mentionKey, isRHS) => {\n        if (this.props.isRHS !== isRHS) {\n            return;\n        }\n\n        let insertText = '@' + mentionKey;\n\n        // if the current text does not end with a whitespace, then insert a space\n        if (this.props.value && (/[^\\s]$/).test(this.props.value)) {\n            insertText = ' ' + insertText;\n        }\n\n        this.addTextAtCaret(insertText, '');\n    }\n\n    getTextbox = () => {\n        if (!this.refs.input) {\n            return null;\n        }\n\n        const input = this.refs.input.getInput();\n\n        if (input.getDOMNode) {\n            return input.getDOMNode();\n        }\n\n        return input;\n    }\n\n    recalculateSize = () => {\n        // Pretty hacky way to force an AutosizeTextarea to recalculate its height if that's what\n        // we're rendering as the input\n        const input = this.refs.input.getInput();\n\n        if (input.recalculateSize) {\n            input.recalculateSize();\n        }\n    }\n\n    handleEmitClearSuggestions = (delay = 0) => {\n        setTimeout(() => {\n            this.clear();\n        }, delay);\n    }\n\n    preventSuggestionListClose = () => {\n        this.preventSuggestionListCloseFlag = true;\n    }\n\n    handleFocusOut = (e) => {\n        if (this.preventSuggestionListCloseFlag) {\n            this.preventSuggestionListCloseFlag = false;\n            return;\n        }\n\n        // Focus is switching TO e.relatedTarget, so only treat this as a blur event if we're not switching\n        // between children (like from the textbox to the suggestion list)\n        if (this.container.contains(e.relatedTarget)) {\n            return;\n        }\n\n        if (UserAgent.isIos() && !e.relatedTarget) {\n            // On Safari and iOS classic app, the autocomplete stays open\n            // when you tap outside of the post textbox or search box.\n            return;\n        }\n\n        this.handleEmitClearSuggestions();\n\n        this.setState({focused: false});\n\n        if (this.props.onBlur) {\n            this.props.onBlur();\n        }\n    };\n\n    handleFocusIn = (e) => {\n        // Focus is switching FROM e.relatedTarget, so only treat this as a focus event if we're not switching\n        // between children (like from the textbox to the suggestion list). PreventSuggestionListCloseFlag is\n        // checked because if true, it means that the focusIn comes from a click in the suggestion box, an\n        // option choice, so we don't want the focus event to be triggered\n        if (this.container.contains(e.relatedTarget) || this.preventSuggestionListCloseFlag) {\n            return;\n        }\n\n        this.setState({focused: true});\n\n        if (this.props.openOnFocus || this.props.openWhenEmpty) {\n            setTimeout(() => {\n                const textbox = this.getTextbox();\n                if (textbox) {\n                    const pretext = textbox.value.substring(0, textbox.selectionEnd);\n                    if (this.props.openWhenEmpty || pretext.length >= this.props.requiredCharacters) {\n                        this.handlePretextChanged(pretext);\n                    }\n                }\n            });\n        }\n\n        if (this.props.onFocus) {\n            this.props.onFocus();\n        }\n    };\n\n    handleChange = (e) => {\n        const textbox = this.getTextbox();\n        const pretext = textbox.value.substring(0, textbox.selectionEnd).toLowerCase();\n\n        if (!this.composing && this.pretext !== pretext) {\n            this.handlePretextChanged(pretext);\n        }\n\n        if (this.props.onChange) {\n            this.props.onChange(e);\n        }\n    }\n\n    handleCompositionStart = () => {\n        this.composing = true;\n        if (this.props.onComposition) {\n            this.props.onComposition();\n        }\n    }\n\n    handleCompositionUpdate = (e) => {\n        if (!e.data) {\n            return;\n        }\n\n        // The caret appears before the CJK character currently being composed, so re-add it to the pretext\n        const textbox = this.getTextbox();\n        const pretext = textbox.value.substring(0, textbox.selectionStart) + e.data;\n\n        this.handlePretextChanged(pretext);\n        if (this.props.onComposition) {\n            this.props.onComposition();\n        }\n    }\n\n    handleCompositionEnd = () => {\n        this.composing = false;\n        if (this.props.onComposition) {\n            this.props.onComposition();\n        }\n    }\n\n    addTextAtCaret = (term, matchedPretext) => {\n        const textbox = this.getTextbox();\n        const caret = textbox.selectionEnd;\n        const text = this.props.value;\n        const pretext = textbox.value.substring(0, textbox.selectionEnd);\n\n        let prefix;\n        let keepPretext = false;\n        if (pretext.toLowerCase().endsWith(matchedPretext.toLowerCase())) {\n            prefix = pretext.substring(0, pretext.length - matchedPretext.length);\n        } else {\n            // the pretext has changed since we got a term to complete so see if the term still fits the pretext\n            const termWithoutMatched = term.substring(matchedPretext.length);\n            const overlap = SuggestionBox.findOverlap(pretext, termWithoutMatched);\n\n            keepPretext = overlap.length === 0;\n            prefix = pretext.substring(0, pretext.length - overlap.length - matchedPretext.length);\n        }\n\n        const suffix = text.substring(caret);\n\n        let newValue;\n        if (keepPretext) {\n            newValue = pretext;\n        } else {\n            newValue = prefix + term + ' ' + suffix;\n        }\n\n        textbox.value = newValue;\n\n        if (this.props.onChange) {\n            // fake an input event to send back to parent components\n            const e = {\n                target: textbox,\n            };\n\n            // don't call handleChange or we'll get into an event loop\n            this.props.onChange(e);\n        }\n\n        // set the caret position after the next rendering\n        window.requestAnimationFrame(() => {\n            if (textbox.value === newValue) {\n                Utils.setCaretPosition(textbox, prefix.length + term.length + 1);\n            }\n        });\n    }\n\n    replaceText = (term) => {\n        const textbox = this.getTextbox();\n        textbox.value = term;\n\n        if (this.props.onChange) {\n            // fake an input event to send back to parent components\n            const e = {\n                target: textbox,\n            };\n\n            // don't call handleChange or we'll get into an event loop\n            this.props.onChange(e);\n        }\n    }\n\n    handleCompleteWord = (term, matchedPretext) => {\n        if (this.props.replaceAllInputOnSelect) {\n            this.replaceText(term);\n        } else {\n            this.addTextAtCaret(term, matchedPretext);\n        }\n\n        if (this.props.onItemSelected) {\n            const items = this.state.items;\n            const terms = this.state.terms;\n            for (let i = 0; i < terms.length; i++) {\n                if (terms[i] === term) {\n                    this.props.onItemSelected(items[i]);\n                    break;\n                }\n            }\n        }\n\n        this.clear();\n\n        this.refs.input.focus();\n\n        for (const provider of this.props.providers) {\n            if (provider.handleCompleteWord) {\n                provider.handleCompleteWord(term, matchedPretext);\n            }\n        }\n    }\n\n    selectNext = () => {\n        this.setSelectionByDelta(1);\n    }\n\n    selectPrevious = () => {\n        this.setSelectionByDelta(-1);\n    }\n\n    setSelectionByDelta = (delta) => {\n        let selectionIndex = this.state.terms.indexOf(this.state.selection);\n\n        if (selectionIndex === -1) {\n            this.setState({\n                selection: '',\n            });\n            return;\n        }\n\n        selectionIndex += delta;\n\n        if (selectionIndex < 0) {\n            selectionIndex = 0;\n        } else if (selectionIndex > this.state.terms.length - 1) {\n            selectionIndex = this.state.terms.length - 1;\n        }\n\n        this.setState({\n            selection: this.state.terms[selectionIndex],\n        });\n    }\n\n    clear = () => {\n        this.setState({\n            cleared: true,\n            matchedPretext: [],\n            terms: [],\n            items: [],\n            components: [],\n        });\n    }\n\n    hasSuggestions = () => {\n        return this.state.items.some((item) => !item.loading);\n    }\n\n    handleKeyDown = (e) => {\n        if ((this.props.openWhenEmpty || this.props.value) && this.hasSuggestions()) {\n            if (Utils.isKeyPressed(e, KeyCodes.UP)) {\n                this.selectPrevious();\n                e.preventDefault();\n            } else if (Utils.isKeyPressed(e, KeyCodes.DOWN)) {\n                this.selectNext();\n                e.preventDefault();\n            } else if (Utils.isKeyPressed(e, KeyCodes.ENTER) || (this.props.completeOnTab && Utils.isKeyPressed(e, KeyCodes.TAB))) {\n                let matchedPretext = '';\n                for (let i = 0; i < this.state.terms.length; i++) {\n                    if (this.state.terms[i] === this.state.selection) {\n                        matchedPretext = this.state.matchedPretext[i];\n                    }\n                }\n\n                // If these don't match, the user typed quickly and pressed enter before we could\n                // update the pretext, so update the pretext before completing\n                if (this.pretext.endsWith(matchedPretext)) {\n                    this.handleCompleteWord(this.state.selection, matchedPretext);\n                } else {\n                    clearTimeout(this.timeoutId);\n                    this.nonDebouncedPretextChanged(this.pretext, true);\n                }\n\n                if (this.props.onKeyDown) {\n                    this.props.onKeyDown(e);\n                }\n                e.preventDefault();\n            } else if (Utils.isKeyPressed(e, KeyCodes.ESCAPE)) {\n                this.clear();\n                this.setState({presentationType: 'text'});\n                e.preventDefault();\n                e.stopPropagation();\n            } else if (this.props.onKeyDown) {\n                this.props.onKeyDown(e);\n            }\n        } else if (this.props.onKeyDown) {\n            this.props.onKeyDown(e);\n        }\n    }\n\n    handleReceivedSuggestions = (suggestions) => {\n        const newComponents = [];\n        const newPretext = [];\n        for (let i = 0; i < suggestions.terms.length; i++) {\n            newComponents.push(suggestions.component);\n            newPretext.push(suggestions.matchedPretext);\n        }\n        const terms = suggestions.terms;\n        const items = suggestions.items;\n        let selection = this.state.selection;\n        if (terms.length > 0) {\n            // if the current selection is no longer in the map, select the first term in the list\n            if (!this.state.selection || terms.indexOf(this.state.selection) === -1) {\n                selection = terms[0];\n            }\n        } else if (this.state.selection) {\n            selection = '';\n        }\n\n        this.setState({\n            cleared: false,\n            selection,\n            terms,\n            items,\n            components: newComponents,\n            matchedPretext: newPretext,\n        });\n\n        return {selection, matchedPretext: suggestions.matchedPretext};\n    }\n\n    handleReceivedSuggestionsAndComplete = (suggestions) => {\n        const {selection, matchedPretext} = this.handleReceivedSuggestions(suggestions);\n        if (selection) {\n            this.handleCompleteWord(selection, matchedPretext);\n        }\n    }\n\n    nonDebouncedPretextChanged = (pretext, complete = false) => {\n        this.pretext = pretext;\n        let handled = false;\n        let callback = this.handleReceivedSuggestions;\n        if (complete) {\n            callback = this.handleReceivedSuggestionsAndComplete;\n        }\n        for (const provider of this.props.providers) {\n            handled = provider.handlePretextChanged(pretext, callback) || handled;\n\n            if (handled) {\n                this.setState({\n                    presentationType: provider.presentationType(),\n                    allowDividers: provider.allowDividers(),\n                });\n\n                break;\n            }\n        }\n        if (!handled) {\n            this.clear();\n        }\n    }\n\n    debouncedPretextChanged = (pretext) => {\n        clearTimeout(this.timeoutId);\n        this.timeoutId = setTimeout(() => this.nonDebouncedPretextChanged(pretext), Constants.SEARCH_TIMEOUT_MILLISECONDS);\n    };\n\n    handlePretextChanged = (pretext) => {\n        this.pretext = pretext;\n        this.debouncedPretextChanged(pretext);\n    }\n\n    blur = () => {\n        this.refs.input.blur();\n    }\n\n    setContainerRef = (container) => {\n        // Attach/detach event listeners that aren't supported by React\n        if (this.container) {\n            this.container.removeEventListener('focusin', this.handleFocusIn);\n            this.container.removeEventListener('focusout', this.handleFocusOut);\n        }\n\n        if (container) {\n            container.addEventListener('focusin', this.handleFocusIn);\n            container.addEventListener('focusout', this.handleFocusOut);\n        }\n\n        // Save ref\n        this.container = container;\n    };\n\n    render() {\n        const {\n            listComponent,\n            dateComponent,\n            listStyle,\n            renderNoResults,\n            ...props\n        } = this.props;\n\n        const renderDividers = this.props.renderDividers && this.state.allowDividers;\n\n        // Don't pass props used by SuggestionBox\n        Reflect.deleteProperty(props, 'providers');\n        Reflect.deleteProperty(props, 'onChange'); // We use onInput instead of onChange on the actual input\n        Reflect.deleteProperty(props, 'onComposition');\n        Reflect.deleteProperty(props, 'onItemSelected');\n        Reflect.deleteProperty(props, 'completeOnTab');\n        Reflect.deleteProperty(props, 'isRHS');\n        Reflect.deleteProperty(props, 'requiredCharacters');\n        Reflect.deleteProperty(props, 'openOnFocus');\n        Reflect.deleteProperty(props, 'openWhenEmpty');\n        Reflect.deleteProperty(props, 'onFocus');\n        Reflect.deleteProperty(props, 'onBlur');\n        Reflect.deleteProperty(props, 'containerClass');\n        Reflect.deleteProperty(props, 'replaceAllInputOnSelect');\n        Reflect.deleteProperty(props, 'renderDividers');\n        Reflect.deleteProperty(props, 'contextId');\n        Reflect.deleteProperty(props, 'listenForMentionKeyClick');\n\n        // This needs to be upper case so React doesn't think it's an html tag\n        const SuggestionListComponent = listComponent;\n        const SuggestionDateComponent = dateComponent;\n\n        return (\n            <div\n                ref={this.setContainerRef}\n                className={this.props.containerClass}\n            >\n                <div\n                    ref={this.suggestionReadOut}\n                    aria-live='polite'\n                    role='alert'\n                    className='sr-only'\n                />\n                <QuickInput\n                    ref='input'\n                    autoComplete='off'\n                    {...props}\n                    onInput={this.handleChange}\n                    onCompositionStart={this.handleCompositionStart}\n                    onCompositionUpdate={this.handleCompositionUpdate}\n                    onCompositionEnd={this.handleCompositionEnd}\n                    onKeyDown={this.handleKeyDown}\n                />\n                {(this.props.openWhenEmpty || this.props.value.length >= this.props.requiredCharacters) && this.state.presentationType === 'text' &&\n                    <SuggestionListComponent\n                        ref='list'\n                        ariaLiveRef={this.suggestionReadOut}\n                        open={this.state.focused}\n                        pretext={this.pretext}\n                        location={listStyle}\n                        renderDividers={renderDividers}\n                        renderNoResults={renderNoResults}\n                        onCompleteWord={this.handleCompleteWord}\n                        preventClose={this.preventSuggestionListClose}\n                        cleared={this.state.cleared}\n                        matchedPretext={this.state.matchedPretext}\n                        items={this.state.items}\n                        terms={this.state.terms}\n                        selection={this.state.selection}\n                        components={this.state.components}\n                    />\n                }\n                {(this.props.openWhenEmpty || this.props.value.length >= this.props.requiredCharacters) && this.state.presentationType === 'date' &&\n                    <SuggestionDateComponent\n                        ref='date'\n                        items={this.state.items}\n                        terms={this.state.terms}\n                        components={this.state.components}\n                        matchedPretext={this.state.matchedPretext}\n                        onCompleteWord={this.handleCompleteWord}\n                    />\n                }\n            </div>\n        );\n    }\n\n    // Finds the longest substring that's at both the end of b and the start of a. For example,\n    // if a = \"firepit\" and b = \"pitbull\", findOverlap would return \"pit\".\n    static findOverlap(a, b) {\n        const aLower = a.toLowerCase();\n        const bLower = b.toLowerCase();\n\n        for (let i = bLower.length; i > 0; i--) {\n            const substring = bLower.substring(0, i);\n\n            if (aLower.endsWith(substring)) {\n                return substring;\n            }\n        }\n\n        return '';\n    }\n}\n","// Copyright (c) 2015-present Mattermost, Inc. All Rights Reserved.\n// See LICENSE.txt for license information.\n\nimport $ from 'jquery';\nimport PropTypes from 'prop-types';\nimport React from 'react';\nimport ReactDOM from 'react-dom';\nimport {FormattedMessage} from 'react-intl';\n\nimport {isEmptyObject} from 'utils/utils.jsx';\nimport FormattedMarkdownMessage from 'components/formatted_markdown_message';\nimport LoadingSpinner from 'components/widgets/loading/loading_spinner.jsx';\n\nexport default class SuggestionList extends React.PureComponent {\n    static propTypes = {\n        ariaLiveRef: PropTypes.object,\n        open: PropTypes.bool.isRequired,\n        location: PropTypes.string,\n        renderDividers: PropTypes.bool,\n        renderNoResults: PropTypes.bool,\n        onCompleteWord: PropTypes.func.isRequired,\n        preventClose: PropTypes.func,\n        pretext: PropTypes.string.isRequired,\n        cleared: PropTypes.bool.isRequired,\n        matchedPretext: PropTypes.array.isRequired,\n        items: PropTypes.array.isRequired,\n        terms: PropTypes.array.isRequired,\n        selection: PropTypes.string.isRequired,\n        components: PropTypes.array.isRequired,\n    };\n\n    static defaultProps = {\n        renderDividers: false,\n        renderNoResults: false,\n    };\n\n    constructor(props) {\n        super(props);\n\n        this.getContent = this.getContent.bind(this);\n        this.suggestionReadOut = React.createRef();\n        this.scrollToItem = this.scrollToItem.bind(this);\n        this.currentLabel = '';\n        this.currentItem = {};\n    }\n\n    componentDidUpdate(prevProps) {\n        if (this.props.selection !== prevProps.selection && this.props.selection) {\n            this.scrollToItem(this.props.selection);\n        }\n\n        if (!isEmptyObject(this.currentItem)) {\n            this.generateLabel(this.currentItem);\n        }\n    }\n\n    componentWillUnmount() {\n        this.removeLabel();\n    }\n\n    announceLabel() {\n        const suggestionReadOut = this.props.ariaLiveRef.current;\n        if (suggestionReadOut) {\n            suggestionReadOut.innerHTML = this.currentLabel;\n        }\n    }\n\n    removeLabel() {\n        const suggestionReadOut = this.props.ariaLiveRef.current;\n        if (suggestionReadOut) {\n            suggestionReadOut.innerHTML = '';\n        }\n    }\n\n    generateLabel(item) {\n        if (item.username) {\n            this.currentLabel = item.username;\n            if ((item.first_name || item.last_name) && item.nickname) {\n                this.currentLabel += ` ${item.first_name} ${item.last_name} ${item.nickname}`;\n            } else if (item.nickname) {\n                this.currentLabel += ` ${item.nickname}`;\n            } else if (item.first_name || item.last_name) {\n                this.currentLabel += ` ${item.first_name} ${item.last_name}`;\n            }\n        } else if (item.type === 'mention.channels') {\n            this.currentLabel = item.channel.display_name;\n        }\n\n        if (this.currentLabel) {\n            this.currentLabel = this.currentLabel.toLowerCase();\n        }\n        this.announceLabel();\n    }\n\n    getContent() {\n        return $(ReactDOM.findDOMNode(this.refs.content));\n    }\n\n    scrollToItem(term) {\n        const content = this.getContent();\n        if (!content || content.length === 0) {\n            return;\n        }\n\n        const visibleContentHeight = content[0].clientHeight;\n        const actualContentHeight = content[0].scrollHeight;\n\n        if (visibleContentHeight < actualContentHeight) {\n            const contentTop = content.scrollTop();\n            const contentTopPadding = parseInt(content.css('padding-top'), 10);\n            const contentBottomPadding = parseInt(content.css('padding-top'), 10);\n\n            const item = $(ReactDOM.findDOMNode(this.refs[term]));\n            if (item.length === 0) {\n                return;\n            }\n\n            const itemTop = item[0].offsetTop - parseInt(item.css('margin-top'), 10);\n            const itemBottomMargin = parseInt(item.css('margin-bottom'), 10) + parseInt(item.css('padding-bottom'), 10);\n            const itemBottom = item[0].offsetTop + item.height() + itemBottomMargin;\n\n            if (itemTop - contentTopPadding < contentTop) {\n                // the item is off the top of the visible space\n                content.scrollTop(itemTop - contentTopPadding);\n            } else if (itemBottom + contentTopPadding + contentBottomPadding > contentTop + visibleContentHeight) {\n                // the item has gone off the bottom of the visible space\n                content.scrollTop((itemBottom - visibleContentHeight) + contentTopPadding + contentBottomPadding);\n            }\n        }\n    }\n\n    renderDivider(type) {\n        return (\n            <div\n                key={type + '-divider'}\n                className='suggestion-list__divider'\n            >\n                <span>\n                    <FormattedMessage id={'suggestion.' + type}/>\n                </span>\n            </div>\n        );\n    }\n\n    renderNoResults() {\n        return (\n            <div\n                key='list-no-results'\n                className='suggestion-list__no-results'\n            >\n                <FormattedMarkdownMessage\n                    id='suggestion_list.no_matches'\n                    defaultMessage='No items match __{value}__'\n                    values={{\n                        value: this.props.pretext || '\"\"',\n                    }}\n                />\n            </div>\n        );\n    }\n\n    render() {\n        if (!this.props.open || this.props.cleared) {\n            return null;\n        }\n\n        const items = [];\n        if (this.props.items.length === 0) {\n            if (!this.props.renderNoResults) {\n                return null;\n            }\n\n            items.push(this.renderNoResults());\n        }\n\n        let lastType;\n        for (let i = 0; i < this.props.items.length; i++) {\n            const item = this.props.items[i];\n            const term = this.props.terms[i];\n            const isSelection = term === this.props.selection;\n\n            // ReactComponent names need to be upper case when used in JSX\n            const Component = this.props.components[i];\n\n            if (this.props.renderDividers && item.type !== lastType) {\n                items.push(this.renderDivider(item.type));\n                lastType = item.type;\n            }\n\n            if (item.loading) {\n                items.push(<LoadingSpinner key={item.type}/>);\n                continue;\n            }\n\n            if (isSelection) {\n                this.currentItem = item;\n            }\n\n            items.push(\n                <Component\n                    key={term}\n                    ref={term}\n                    item={this.props.items[i]}\n                    term={term}\n                    matchedPretext={this.props.matchedPretext[i]}\n                    isSelection={isSelection}\n                    onClick={this.props.onCompleteWord}\n                />\n            );\n        }\n\n        const mainClass = 'suggestion-list suggestion-list--' + this.props.location;\n        const contentClass = 'suggestion-list__content suggestion-list__content--' + this.props.location;\n\n        return (\n            <div className={mainClass}>\n                <div\n                    id='suggestionList'\n                    ref='content'\n                    className={contentClass}\n                    onMouseDown={this.props.preventClose}\n                >\n                    {items}\n                </div>\n            </div>\n        );\n    }\n}\n","// Copyright (c) 2015-present Mattermost, Inc. All Rights Reserved.\n// See LICENSE.txt for license information.\n\nimport {TeamTypes} from 'mattermost-redux/action_types';\nimport {viewChannel, getChannelStats} from 'mattermost-redux/actions/channels';\nimport * as TeamActions from 'mattermost-redux/actions/teams';\nimport {getCurrentChannelId} from 'mattermost-redux/selectors/entities/channels';\nimport {getUser} from 'mattermost-redux/actions/users';\n\nimport {browserHistory} from 'utils/browser_history';\n\nexport function removeUserFromTeamAndGetStats(teamId, userId) {\n    return async (dispatch, getState) => {\n        const response = await dispatch(TeamActions.removeUserFromTeam(teamId, userId));\n        dispatch(getUser(userId));\n        dispatch(TeamActions.getTeamStats(teamId));\n        dispatch(getChannelStats(getCurrentChannelId(getState())));\n        return response;\n    };\n}\n\nexport function addUserToTeamFromInvite(token, inviteId) {\n    return async (dispatch) => {\n        const {data: member, error} = await dispatch(TeamActions.addUserToTeamFromInvite(token, inviteId));\n        if (member) {\n            const {data} = await dispatch(TeamActions.getTeam(member.team_id));\n\n            dispatch({\n                type: TeamTypes.RECEIVED_MY_TEAM_MEMBER,\n                data: {\n                    ...member,\n                    delete_at: 0,\n                    msg_count: 0,\n                    mention_count: 0,\n                },\n            });\n\n            return {data};\n        }\n        return {error};\n    };\n}\n\nexport function addUserToTeam(teamId, userId) {\n    return async (dispatch) => {\n        const {data: member, error} = await dispatch(TeamActions.addUserToTeam(teamId, userId));\n        if (member) {\n            const {data} = await dispatch(TeamActions.getTeam(member.team_id));\n\n            dispatch({\n                type: TeamTypes.RECEIVED_MY_TEAM_MEMBER,\n                data: {\n                    ...member,\n                    delete_at: 0,\n                    msg_count: 0,\n                    mention_count: 0,\n                },\n            });\n\n            return {data};\n        }\n        return {error};\n    };\n}\n\nexport function addUsersToTeam(teamId, userIds) {\n    return async (dispatch, getState) => {\n        const {data, error} = await dispatch(TeamActions.addUsersToTeam(teamId, userIds));\n\n        if (error) {\n            return {error};\n        }\n\n        dispatch(getChannelStats(getCurrentChannelId(getState())));\n\n        return {data};\n    };\n}\n\nexport function switchTeam(url) {\n    return (dispatch, getState) => {\n        dispatch(viewChannel(getCurrentChannelId(getState())));\n        browserHistory.push(url);\n    };\n}\n","// Copyright (c) 2015-present Mattermost, Inc. All Rights Reserved.\n// See LICENSE.txt for license information.\n\nimport PropTypes from 'prop-types';\nimport React from 'react';\n\nexport default class SystemPermissionGate extends React.Component {\n    static defaultProps = {\n        invert: false,\n    }\n\n    static propTypes = {\n\n        /**\n         * Permissions enough to pass the gate (binary OR)\n         */\n        permissions: PropTypes.arrayOf(PropTypes.string).isRequired,\n\n        /**\n         * Has permission\n         */\n        hasPermission: PropTypes.bool.isRequired,\n\n        /**\n         * Invert the permission (used for else)\n         */\n        invert: PropTypes.bool.isRequired,\n\n        /**\n         * Content protected by the permissions gate\n         */\n        children: PropTypes.node.isRequired,\n    };\n\n    render() {\n        if (this.props.hasPermission && !this.props.invert) {\n            return this.props.children;\n        }\n        if (!this.props.hasPermission && this.props.invert) {\n            return this.props.children;\n        }\n        return null;\n    }\n}\n","// Copyright (c) 2015-present Mattermost, Inc. All Rights Reserved.\n// See LICENSE.txt for license information.\n\nimport {connect} from 'react-redux';\n\nimport {haveISystemPermission} from 'mattermost-redux/selectors/entities/roles';\n\nimport SystemPermissionGate from './system_permission_gate.jsx';\n\nfunction mapStateToProps(state, ownProps) {\n    for (const permission of ownProps.permissions) {\n        if (haveISystemPermission(state, {permission})) {\n            return {hasPermission: true};\n        }\n    }\n\n    return {hasPermission: false};\n}\n\nexport default connect(mapStateToProps)(SystemPermissionGate);\n","// Copyright (c) 2015-present Mattermost, Inc. All Rights Reserved.\n// See LICENSE.txt for license information.\n\nimport PropTypes from 'prop-types';\nimport React from 'react';\nimport {FormattedMessage} from 'react-intl';\n\nimport Constants from 'utils/constants.jsx';\nimport {cmdOrCtrlPressed} from 'utils/utils.jsx';\nimport LoadingScreen from 'components/loading_screen.jsx';\nconst KeyCodes = Constants.KeyCodes;\n\nexport default class MultiSelectList extends React.Component {\n    constructor(props) {\n        super(props);\n\n        this.defaultOptionRenderer = this.defaultOptionRenderer.bind(this);\n        this.handleArrowPress = this.handleArrowPress.bind(this);\n        this.setSelected = this.setSelected.bind(this);\n\n        this.toSelect = -1;\n\n        this.state = {\n            selected: -1,\n        };\n    }\n\n    componentDidMount() {\n        document.addEventListener('keydown', this.handleArrowPress);\n    }\n\n    componentWillUnmount() {\n        document.removeEventListener('keydown', this.handleArrowPress);\n    }\n\n    UNSAFE_componentWillReceiveProps(nextProps) { // eslint-disable-line camelcase\n        this.setState({selected: this.toSelect});\n\n        const options = nextProps.options;\n\n        if (options && options.length > 0 && this.toSelect >= 0) {\n            this.props.onSelect(options[this.toSelect]);\n        }\n    }\n\n    componentDidUpdate(_, prevState) {\n        if (prevState.selected === this.state.selected) {\n            return;\n        }\n\n        if (this.refs.list && this.refs.selected) {\n            const elemTop = this.refs.selected.getBoundingClientRect().top;\n            const elemBottom = this.refs.selected.getBoundingClientRect().bottom;\n            const listTop = this.refs.list.getBoundingClientRect().top;\n            const listBottom = this.refs.list.getBoundingClientRect().bottom;\n            if (elemBottom > listBottom) {\n                this.refs.selected.scrollIntoView(false);\n            } else if (elemTop < listTop) {\n                this.refs.selected.scrollIntoView(true);\n            }\n        }\n    }\n\n    setSelected(selected) {\n        this.toSelect = selected;\n    }\n\n    handleArrowPress(e) {\n        if (cmdOrCtrlPressed(e) && e.shiftKey) {\n            return;\n        }\n\n        const options = this.props.options;\n        if (options.length === 0) {\n            return;\n        }\n\n        let selected;\n        switch (e.key) {\n        case KeyCodes.DOWN[0]:\n            if (this.state.selected === -1) {\n                selected = 0;\n                break;\n            }\n            selected = Math.min(this.state.selected + 1, options.length - 1);\n            break;\n        case KeyCodes.UP[0]:\n            if (this.state.selected === -1) {\n                selected = 0;\n                break;\n            }\n            selected = Math.max(this.state.selected - 1, 0);\n            break;\n        default:\n            return;\n        }\n\n        e.preventDefault();\n        this.setState({selected});\n        this.setSelected(selected);\n        this.props.onSelect(options[selected]);\n    }\n\n    defaultOptionRenderer(option, isSelected, onAdd) {\n        var rowSelected = '';\n        if (isSelected) {\n            rowSelected = 'more-modal__row--selected';\n        }\n\n        return (\n            <div\n                ref={isSelected ? 'selected' : option.value}\n                className={rowSelected}\n                key={'multiselectoption' + option.value}\n                onClick={() => onAdd(option)}\n            >\n                {option.label}\n            </div>\n        );\n    }\n\n    render() {\n        const options = this.props.options;\n        let renderOutput;\n\n        if (this.props.loading) {\n            renderOutput = (\n                <div aria-hidden={true}>\n                    <LoadingScreen\n                        position='absolute'\n                        key='loading'\n                    />\n                </div>\n            );\n        } else if (options == null || options.length === 0) {\n            renderOutput = (\n                <div\n                    key='no-users-found'\n                    className='no-channel-message'\n                >\n                    <p className='primary-message'>\n                        <FormattedMessage\n                            id='multiselect.list.notFound'\n                            defaultMessage='No items found'\n                        />\n                    </p>\n                </div>\n            );\n        } else {\n            let renderer;\n            if (this.props.optionRenderer) {\n                renderer = this.props.optionRenderer;\n            } else {\n                renderer = this.defaultOptionRenderer;\n            }\n\n            const optionControls = options.map((o, i) => renderer(o, this.state.selected === i, this.props.onAdd));\n\n            const selectedOption = options[this.state.selected];\n            const ariaLabel = this.props.ariaLabelRenderer(selectedOption);\n\n            renderOutput = (\n                <div className='more-modal__list'>\n                    <div\n                        className='sr-only'\n                        aria-live='polite'\n                    >\n                        {ariaLabel}\n                    </div>\n                    <div\n                        ref='list'\n                        role='presentation'\n                        aria-hidden={true}\n                    >\n                        {optionControls}\n                    </div>\n                </div>\n            );\n        }\n\n        return (\n            <div\n                className='multi-select__wrapper'\n                aria-live='polite'\n            >\n                {renderOutput}\n            </div>\n        );\n    }\n}\n\nMultiSelectList.defaultProps = {\n    options: [],\n    perPage: 50,\n    onAction: () => null,\n};\n\nMultiSelectList.propTypes = {\n    options: PropTypes.arrayOf(PropTypes.object),\n    optionRenderer: PropTypes.func,\n    ariaLabelRenderer: PropTypes.func,\n    page: PropTypes.number,\n    perPage: PropTypes.number,\n    onPageChange: PropTypes.func,\n    onAdd: PropTypes.func,\n    onSelect: PropTypes.func,\n    loading: PropTypes.bool,\n};\n","// Copyright (c) 2015-present Mattermost, Inc. All Rights Reserved.\n// See LICENSE.txt for license information.\n\nimport PropTypes from 'prop-types';\nimport React from 'react';\nimport {FormattedMessage} from 'react-intl';\nimport ReactSelect from 'react-select';\n\nimport {Constants, A11yCustomEventTypes} from 'utils/constants.jsx';\nimport SaveButton from 'components/save_button.jsx';\n\nimport MultiSelectList from './multiselect_list.jsx';\n\nconst KeyCodes = Constants.KeyCodes;\n\nexport default class MultiSelect extends React.Component {\n    static propTypes = {\n        users: PropTypes.arrayOf(PropTypes.object),\n        totalCount: PropTypes.number,\n        options: PropTypes.arrayOf(PropTypes.object),\n        optionRenderer: PropTypes.func,\n        values: PropTypes.arrayOf(PropTypes.object),\n        valueRenderer: PropTypes.func,\n        ariaLabelRenderer: PropTypes.func.isRequired,\n        handleInput: PropTypes.func,\n        handleDelete: PropTypes.func,\n        perPage: PropTypes.number,\n        handlePageChange: PropTypes.func,\n        handleAdd: PropTypes.func,\n        handleSubmit: PropTypes.func,\n        noteText: PropTypes.node,\n        maxValues: PropTypes.number,\n        numRemainingText: PropTypes.node,\n        buttonSubmitText: PropTypes.node,\n        buttonSubmitLoadingText: PropTypes.node,\n        submitImmediatelyOn: PropTypes.func,\n        saving: PropTypes.bool,\n        loading: PropTypes.bool,\n        placeholderText: PropTypes.string,\n    }\n\n    static defaultProps = {\n        ariaLabelRenderer: defaultAriaLabelRenderer,\n    }\n\n    constructor(props) {\n        super(props);\n\n        this.selected = null;\n\n        this.state = {\n            page: 0,\n            input: '',\n        };\n    }\n\n    componentDidMount() {\n        document.addEventListener('keydown', this.handleEnterPress);\n        if (this.refs.reactSelect) {\n            this.refs.reactSelect.select.inputRef.addEventListener(A11yCustomEventTypes.ACTIVATE, this.handleA11yActivateEvent);\n            this.refs.reactSelect.select.inputRef.addEventListener(A11yCustomEventTypes.DEACTIVATE, this.handleA11yDeactivateEvent);\n\n            this.refs.reactSelect.focus();\n        }\n    }\n\n    componentWillUnmount() {\n        this.refs.reactSelect.select.inputRef.removeEventListener(A11yCustomEventTypes.ACTIVATE, this.handleA11yActivateEvent);\n        this.refs.reactSelect.select.inputRef.removeEventListener(A11yCustomEventTypes.DEACTIVATE, this.handleA11yDeactivateEvent);\n\n        document.removeEventListener('keydown', this.handleEnterPress);\n    }\n\n    handleA11yActivateEvent = () => {\n        this.setState({a11yActive: true});\n    }\n\n    handleA11yDeactivateEvent = () => {\n        this.setState({a11yActive: false});\n    }\n\n    nextPage = () => {\n        if (this.props.handlePageChange) {\n            this.props.handlePageChange(this.state.page + 1, this.state.page);\n        }\n        if (this.refs.list) {\n            this.refs.list.setSelected(0);\n        }\n        this.setState({page: this.state.page + 1});\n    }\n\n    prevPage = () => {\n        if (this.state.page === 0) {\n            return;\n        }\n\n        if (this.props.handlePageChange) {\n            this.props.handlePageChange(this.state.page - 1, this.state.page);\n        }\n        this.refs.list.setSelected(0);\n        this.setState({page: this.state.page - 1});\n    }\n\n    resetPaging = () => {\n        this.setState({page: 0});\n    }\n\n    onSelect = (selected) => {\n        this.selected = selected;\n    }\n\n    onAdd = (value) => {\n        if (this.props.maxValues && this.props.values.length >= this.props.maxValues) {\n            return;\n        }\n\n        for (let i = 0; i < this.props.values.length; i++) {\n            if (this.props.values[i].id === value.id) {\n                return;\n            }\n        }\n\n        this.props.handleAdd(value);\n        this.selected = null;\n\n        this.refs.reactSelect.select.handleInputChange({currentTarget: {value: ''}});\n        this.onInput('');\n        this.refs.reactSelect.focus();\n\n        const submitImmediatelyOn = this.props.submitImmediatelyOn;\n        if (submitImmediatelyOn && submitImmediatelyOn(value)) {\n            this.props.handleSubmit([value]);\n        }\n    }\n\n    onInput = (input, change = {}) => {\n        if (change.action === 'input-blur' || change.action === 'menu-close') {\n            return;\n        }\n\n        if (this.state.input === input) {\n            return;\n        }\n\n        this.setState({input});\n\n        if (input === '') {\n            this.refs.list.setSelected(-1);\n        } else {\n            this.refs.list.setSelected(0);\n        }\n        this.selected = null;\n\n        this.props.handleInput(input, this);\n    }\n\n    onInputKeyDown = (e) => {\n        switch (e.key) {\n        case KeyCodes.ENTER[0]:\n            e.preventDefault();\n            break;\n        }\n    }\n\n    handleEnterPress = (e) => {\n        switch (e.key) {\n        case KeyCodes.ENTER[0]:\n            if (this.selected == null) {\n                this.props.handleSubmit();\n                return;\n            }\n            this.onAdd(this.selected);\n            break;\n        }\n    }\n\n    handleOnClick = (e) => {\n        e.preventDefault();\n        this.props.handleSubmit();\n    }\n\n    onChange = (_, change) => {\n        if (change.action !== 'remove-value' && change.action !== 'pop-value') {\n            return;\n        }\n\n        const values = [...this.props.values];\n        for (let i = 0; i < values.length; i++) {\n            if (values[i].id === change.removedValue.id) {\n                values.splice(i, 1);\n                break;\n            }\n        }\n\n        this.props.handleDelete(values);\n    }\n\n    render() {\n        const options = Object.assign([], this.props.options);\n        const {totalCount, users, values} = this.props;\n\n        let numRemainingText;\n        if (this.props.numRemainingText) {\n            numRemainingText = this.props.numRemainingText;\n        } else if (this.props.maxValues != null) {\n            numRemainingText = (\n                <FormattedMessage\n                    id='multiselect.numRemaining'\n                    defaultMessage='You can add {num, number} more. '\n                    values={{\n                        num: this.props.maxValues - this.props.values.length,\n                    }}\n                />\n            );\n        }\n\n        let buttonSubmitText;\n        if (this.props.buttonSubmitText) {\n            buttonSubmitText = this.props.buttonSubmitText;\n        } else if (this.props.maxValues != null) {\n            buttonSubmitText = (\n                <FormattedMessage\n                    id='multiselect.go'\n                    defaultMessage='Go'\n                />\n            );\n        }\n\n        let optionsToDisplay = [];\n        let nextButton;\n        let previousButton;\n        let noteTextContainer;\n\n        if (this.props.noteText) {\n            noteTextContainer = (\n                <div className='multi-select__note'>\n                    <div className='note__icon'>\n                        <FormattedMessage\n                            id='generic_icons.info'\n                            defaultMessage='Info Icon'\n                        >\n                            {(title) => (\n                                <span\n                                    className='fa fa-info'\n                                    title={title}\n                                />\n                            )}\n                        </FormattedMessage>\n                    </div>\n                    <div>{this.props.noteText}</div>\n                </div>\n            );\n        }\n\n        const valueMap = {};\n        for (let i = 0; i < values.length; i++) {\n            valueMap[values[i].id] = true;\n        }\n\n        for (let i = options.length - 1; i >= 0; i--) {\n            if (valueMap[options[i].id]) {\n                options.splice(i, 1);\n            }\n        }\n\n        if (options && options.length > this.props.perPage) {\n            const pageStart = this.state.page * this.props.perPage;\n            const pageEnd = pageStart + this.props.perPage;\n            optionsToDisplay = options.slice(pageStart, pageEnd);\n            if (!this.props.loading) {\n                if (options.length > pageEnd) {\n                    nextButton = (\n                        <button\n                            className='btn btn-link filter-control filter-control__next'\n                            onClick={this.nextPage}\n                        >\n                            <FormattedMessage\n                                id='filtered_user_list.next'\n                                defaultMessage='Next'\n                            />\n                        </button>\n                    );\n                }\n\n                if (this.state.page > 0) {\n                    previousButton = (\n                        <button\n                            className='btn btn-link filter-control filter-control__prev'\n                            onClick={this.prevPage}\n                        >\n                            <FormattedMessage\n                                id='filtered_user_list.prev'\n                                defaultMessage='Previous'\n                            />\n                        </button>\n                    );\n                }\n            }\n        } else {\n            optionsToDisplay = options;\n        }\n\n        let memberCount;\n        if (users && users.length && totalCount) {\n            memberCount = (\n                <FormattedMessage\n                    id='multiselect.numMembers'\n                    defaultMessage='{memberOptions, number} of {totalCount, number} members'\n                    values={{\n                        memberOptions: optionsToDisplay.length,\n                        totalCount: this.props.totalCount,\n                    }}\n                />\n            );\n        }\n\n        return (\n            <div className='filtered-user-list'>\n                <div className='filter-row filter-row--full'>\n                    <div className='multi-select__container'>\n                        <ReactSelect\n                            id='selectItems'\n                            ref='reactSelect'\n                            isMulti={true}\n                            options={this.props.options}\n                            styles={styles}\n                            components={{\n                                Menu: nullComponent,\n                                IndicatorsContainer: nullComponent,\n                                MultiValueLabel: paddedComponent(this.props.valueRenderer),\n                            }}\n                            isClearable={false}\n                            openMenuOnFocus={false}\n                            menuIsOpen={false}\n                            onInputChange={this.onInput}\n                            onKeyDown={this.onInputKeyDown}\n                            onChange={this.onChange}\n                            value={this.props.values}\n                            placeholder={this.props.placeholderText}\n                            inputValue={this.state.input}\n                            getOptionValue={(option) => option.id}\n                            getOptionLabel={(option) => this.props.ariaLabelRenderer(option)}\n                            aria-label={this.props.placeholderText}\n                            className={this.state.a11yActive ? 'multi-select__focused' : ''}\n                        />\n                        <SaveButton\n                            id='saveItems'\n                            saving={this.props.saving}\n                            disabled={this.props.saving}\n                            onClick={this.handleOnClick}\n                            defaultMessage={buttonSubmitText}\n                            savingMessage={this.props.buttonSubmitLoadingText}\n                        />\n                    </div>\n                    <div className='multi-select__help'>\n                        {numRemainingText}\n                        {memberCount}\n                    </div>\n                    <div className='multi-select__help'>\n                        {noteTextContainer}\n                    </div>\n                </div>\n                <MultiSelectList\n                    ref='list'\n                    options={optionsToDisplay}\n                    optionRenderer={this.props.optionRenderer}\n                    ariaLabelRenderer={this.props.ariaLabelRenderer}\n                    page={this.state.page}\n                    perPage={this.props.perPage}\n                    onPageChange={this.props.handlePageChange}\n                    onAdd={this.onAdd}\n                    onSelect={this.onSelect}\n                    loading={this.props.loading}\n                />\n                <div className='filter-controls'>\n                    {previousButton}\n                    {nextButton}\n                </div>\n            </div>\n        );\n    }\n}\n\nfunction defaultAriaLabelRenderer(option) {\n    if (!option) {\n        return null;\n    }\n    return option.label;\n}\n\nconst nullComponent = () => null;\n\nconst paddedComponent = (WrappedComponent) => {\n    return (props) => {\n        return (\n            <div style={{paddingRight: '5px', paddingLeft: '5px', borderRight: '1px solid rgba(0, 126, 255, 0.24)'}}>\n                <WrappedComponent {...props}/>\n            </div>\n        );\n    };\n};\n\nconst styles = {\n    container: () => {\n        return {\n            display: 'table-cell',\n            paddingRight: '15px',\n            verticalAlign: 'top',\n            width: '100%',\n        };\n    },\n    control: (base) => {\n        return {\n            ...base,\n            borderRadius: '1px',\n            borderColor: 'hsl(0,0%,80%)',\n            minHeight: '36px',\n            '&:hover': {},\n            boxShadow: '',\n            backgroundColor: 'hsl(0,0%,100%)',\n        };\n    },\n    multiValue: (base) => {\n        return {\n            ...base,\n            whiteSpace: 'nowrap',\n            border: '1px solid rgba(0, 126, 255, 0.24)',\n            backgroundColor: 'rgba(0, 126, 255, 0.08)',\n            color: '#007eff',\n        };\n    },\n    multiValueRemove: (base) => {\n        return {\n            ...base,\n            ':hover': {\n                backgroundColor: 'rgba(0, 126, 255, 0.15)',\n            },\n        };\n    },\n};\n","// Copyright (c) 2015-present Mattermost, Inc. All Rights Reserved.\n// See LICENSE.txt for license information.\n\nimport React from 'react';\nimport {FormattedMessage} from 'react-intl';\n\nexport default class ArchiveIcon extends React.PureComponent {\n    render() {\n        return (\n            <span {...this.props}>\n                <FormattedMessage\n                    id='generic_icons.archive'\n                    defaultMessage='Archive Icon'\n                >\n                    {(ariaLabel) => (\n                        <svg\n                            width='14'\n                            height='14'\n                            viewBox='0 0 14 14'\n                            role='icon'\n                            aria-label={ariaLabel}\n                        >\n                            <path d='M8.5 6.5q0-0.203-0.148-0.352t-0.352-0.148h-2q-0.203 0-0.352 0.148t-0.148 0.352 0.148 0.352 0.352 0.148h2q0.203 0 0.352-0.148t0.148-0.352zM13 5v7.5q0 0.203-0.148 0.352t-0.352 0.148h-11q-0.203 0-0.352-0.148t-0.148-0.352v-7.5q0-0.203 0.148-0.352t0.352-0.148h11q0.203 0 0.352 0.148t0.148 0.352zM13.5 1.5v2q0 0.203-0.148 0.352t-0.352 0.148h-12q-0.203 0-0.352-0.148t-0.148-0.352v-2q0-0.203 0.148-0.352t0.352-0.148h12q0.203 0 0.352 0.148t0.148 0.352z'/>\n                        </svg>\n                    )}\n                </FormattedMessage>\n            </span>\n        );\n    }\n}\n","// Copyright (c) 2015-present Mattermost, Inc. All Rights Reserved.\n// See LICENSE.txt for license information.\n\nimport React from 'react';\n\nimport {FormattedMessage} from 'react-intl';\n\nexport default class SuccessIcon extends React.PureComponent {\n    render() {\n        return (\n            <FormattedMessage\n                id='generic_icons.success'\n                defaultMessage='Success Icon'\n            >\n                {(title) => (\n                    <i\n                        className='fa fa-check'\n                        title={title}\n                    />\n                )}\n            </FormattedMessage>\n        );\n    }\n}\n","// Copyright (c) 2015-present Mattermost, Inc. All Rights Reserved.\n// See LICENSE.txt for license information.\n\nexport function isModalOpen(state, modalId) {\n    return state.views.modals.modalState[modalId] && state.views.modals.modalState[modalId].open;\n}\n","// Copyright (c) 2015-present Mattermost, Inc. All Rights Reserved.\n// See LICENSE.txt for license information.\n\nimport React from 'react';\n\nimport {FormattedMessage} from 'react-intl';\n\nexport default class AddIcon extends React.PureComponent {\n    render() {\n        return (\n            <FormattedMessage\n                id='generic_icons.add'\n                defaultMessage='Add Icon'\n            >\n                {(title) => (\n                    <i\n                        className='fa fa-plus'\n                        title={title}\n                    />\n                )}\n            </FormattedMessage>\n        );\n    }\n}\n","// Copyright (c) 2015-present Mattermost, Inc. All Rights Reserved.\n// See LICENSE.txt for license information.\n\nimport PropTypes from 'prop-types';\nimport React from 'react';\n\nexport default class TeamPermissionGate extends React.Component {\n    static defaultProps = {\n        invert: false,\n    }\n\n    static propTypes = {\n\n        /**\n         * Team to check the permission\n         */\n        teamId: PropTypes.string,\n\n        /**\n         * Permissions enough to pass the gate (binary OR)\n         */\n        permissions: PropTypes.arrayOf(PropTypes.string).isRequired,\n\n        /**\n         * Has permission\n         */\n        hasPermission: PropTypes.bool.isRequired,\n\n        /**\n         * Invert the permission (used for else)\n         */\n        invert: PropTypes.bool.isRequired,\n\n        /**\n         * Content protected by the permissions gate\n         */\n        children: PropTypes.node.isRequired,\n    };\n\n    render() {\n        if (this.props.hasPermission && !this.props.invert) {\n            return this.props.children;\n        }\n        if (!this.props.hasPermission && this.props.invert) {\n            return this.props.children;\n        }\n        return null;\n    }\n}\n","// Copyright (c) 2015-present Mattermost, Inc. All Rights Reserved.\n// See LICENSE.txt for license information.\n\nimport {connect} from 'react-redux';\n\nimport {haveITeamPermission} from 'mattermost-redux/selectors/entities/roles';\n\nimport TeamPermissionGate from './team_permission_gate.jsx';\n\nfunction mapStateToProps(state, ownProps) {\n    if (!ownProps.teamId) {\n        return {hasPermission: false};\n    }\n\n    for (const permission of ownProps.permissions) {\n        if (haveITeamPermission(state, {team: ownProps.teamId, permission})) {\n            return {hasPermission: true};\n        }\n    }\n\n    return {hasPermission: false};\n}\n\nexport default connect(mapStateToProps)(TeamPermissionGate);\n","// Copyright (c) 2015-present Mattermost, Inc. All Rights Reserved.\n// See LICENSE.txt for license information.\n\nimport {ActionTypes} from 'utils/constants.jsx';\n\nexport const toggle = () => (dispatch) => dispatch({\n    type: ActionTypes.TOGGLE_LHS,\n});\n\nexport const open = () => (dispatch) => dispatch({\n    type: ActionTypes.OPEN_LHS,\n});\n\nexport const close = () => (dispatch) => dispatch({\n    type: ActionTypes.CLOSE_LHS,\n});\n","// Copyright (c) 2015-present Mattermost, Inc. All Rights Reserved.\n// See LICENSE.txt for license information.\n\nimport {batchActions} from 'redux-batched-actions';\nimport {\n    ChannelTypes,\n    EmojiTypes,\n    PostTypes,\n    TeamTypes,\n    UserTypes,\n    RoleTypes,\n    GeneralTypes,\n    AdminTypes,\n    IntegrationTypes,\n    PreferenceTypes,\n} from 'mattermost-redux/action_types';\nimport {WebsocketEvents, General} from 'mattermost-redux/constants';\nimport {\n    getChannelAndMyMember,\n    getChannelStats,\n    viewChannel,\n    markChannelAsRead,\n} from 'mattermost-redux/actions/channels';\nimport {setServerVersion} from 'mattermost-redux/actions/general';\nimport {\n    getCustomEmojiForReaction,\n    getPosts,\n    getProfilesAndStatusesForPosts,\n    getThreadsForPosts,\n    postDeleted,\n    receivedNewPost,\n    receivedPost,\n} from 'mattermost-redux/actions/posts';\nimport {clearErrors, logError} from 'mattermost-redux/actions/errors';\n\nimport * as TeamActions from 'mattermost-redux/actions/teams';\nimport {\n    checkForModifiedUsers,\n    getMe,\n    getMissingProfilesByIds,\n    getStatusesByIds,\n} from 'mattermost-redux/actions/users';\nimport {Client4} from 'mattermost-redux/client';\nimport {getCurrentUser, getCurrentUserId, getStatusForUserId, getUser} from 'mattermost-redux/selectors/entities/users';\nimport {getMyTeams, getCurrentRelativeTeamUrl, getCurrentTeamId, getCurrentTeamUrl} from 'mattermost-redux/selectors/entities/teams';\nimport {getConfig} from 'mattermost-redux/selectors/entities/general';\nimport {getChannel, getCurrentChannel, getCurrentChannelId, getRedirectChannelNameForTeam} from 'mattermost-redux/selectors/entities/channels';\nimport {getPost, getMostRecentPostIdInChannel} from 'mattermost-redux/selectors/entities/posts';\n\nimport {getSelectedChannelId} from 'selectors/rhs';\n\nimport {openModal} from 'actions/views/modals';\nimport {incrementWsErrorCount, resetWsErrorCount} from 'actions/views/system';\nimport {closeRightHandSide} from 'actions/views/rhs';\nimport {syncPostsInChannel} from 'actions/views/channel';\n\nimport {browserHistory} from 'utils/browser_history';\nimport {loadChannelsForCurrentUser} from 'actions/channel_actions.jsx';\nimport * as GlobalActions from 'actions/global_actions.jsx';\nimport {handleNewPost} from 'actions/post_actions.jsx';\nimport * as StatusActions from 'actions/status_actions.jsx';\nimport {loadProfilesForSidebar} from 'actions/user_actions.jsx';\nimport store from 'stores/redux_store.jsx';\nimport WebSocketClient from 'client/web_websocket_client.jsx';\nimport {loadPlugin, loadPluginsIfNecessary, removePlugin} from 'plugins';\nimport {Constants, AnnouncementBarMessages, SocketEvents, UserStatuses, ModalIdentifiers} from 'utils/constants.jsx';\nimport {fromAutoResponder} from 'utils/post_utils';\nimport {getSiteURL} from 'utils/url.jsx';\nimport RemovedFromChannelModal from 'components/removed_from_channel_modal';\nimport InteractiveDialog from 'components/interactive_dialog';\n\nconst dispatch = store.dispatch;\nconst getState = store.getState;\n\nconst MAX_WEBSOCKET_FAILS = 7;\n\nconst pluginEventHandlers = {};\n\nexport function initialize() {\n    if (!window.WebSocket) {\n        console.log('Browser does not support websocket'); //eslint-disable-line no-console\n        return;\n    }\n\n    const config = getConfig(getState());\n    let connUrl = '';\n    if (config.WebsocketURL) {\n        connUrl = config.WebsocketURL;\n    } else {\n        connUrl = new URL(getSiteURL());\n\n        // replace the protocol with a websocket one\n        if (connUrl.protocol === 'https:') {\n            connUrl.protocol = 'wss:';\n        } else {\n            connUrl.protocol = 'ws:';\n        }\n\n        // append a port number if one isn't already specified\n        if (!(/:\\d+$/).test(connUrl.host)) {\n            if (connUrl.protocol === 'wss:') {\n                connUrl.host += ':' + config.WebsocketSecurePort;\n            } else {\n                connUrl.host += ':' + config.WebsocketPort;\n            }\n        }\n\n        connUrl = connUrl.toString();\n    }\n\n    // Strip any trailing slash before appending the pathname below.\n    if (connUrl.length > 0 && connUrl[connUrl.length - 1] === '/') {\n        connUrl = connUrl.substring(0, connUrl.length - 1);\n    }\n\n    connUrl += Client4.getUrlVersion() + '/websocket';\n\n    WebSocketClient.setEventCallback(handleEvent);\n    WebSocketClient.setFirstConnectCallback(handleFirstConnect);\n    WebSocketClient.setReconnectCallback(() => reconnect(false));\n    WebSocketClient.setMissedEventCallback(() => reconnect(false));\n    WebSocketClient.setCloseCallback(handleClose);\n    WebSocketClient.initialize(connUrl);\n}\n\nexport function close() {\n    WebSocketClient.close();\n}\n\nfunction reconnectWebSocket() {\n    close();\n    initialize();\n}\n\nconst pluginReconnectHandlers = {};\n\nexport function registerPluginReconnectHandler(pluginId, handler) {\n    pluginReconnectHandlers[pluginId] = handler;\n}\n\nexport function unregisterPluginReconnectHandler(pluginId) {\n    Reflect.deleteProperty(pluginReconnectHandlers, pluginId);\n}\n\nexport function reconnect(includeWebSocket = true) {\n    if (includeWebSocket) {\n        reconnectWebSocket();\n    }\n\n    dispatch({\n        type: GeneralTypes.WEBSOCKET_SUCCESS,\n        timestamp: Date.now(),\n    });\n\n    loadPluginsIfNecessary();\n\n    Object.values(pluginReconnectHandlers).forEach((handler) => {\n        if (handler && typeof handler === 'function') {\n            handler();\n        }\n    });\n\n    const state = getState();\n    const currentTeamId = state.entities.teams.currentTeamId;\n    if (currentTeamId) {\n        const currentChannelId = getCurrentChannelId(state);\n        const mostRecentId = getMostRecentPostIdInChannel(state, currentChannelId);\n        const mostRecentPost = getPost(state, mostRecentId);\n        dispatch(loadChannelsForCurrentUser());\n        if (mostRecentPost) {\n            dispatch(syncPostsInChannel(currentChannelId, mostRecentPost.create_at));\n        } else {\n            // if network timed-out the first time when loading a channel\n            // we can request for getPosts again when socket is connected\n            dispatch(getPosts(currentChannelId));\n        }\n        StatusActions.loadStatusesForChannelAndSidebar();\n        dispatch(TeamActions.getMyTeamUnreads());\n    }\n\n    if (state.websocket.lastDisconnectAt) {\n        dispatch(checkForModifiedUsers());\n    }\n\n    dispatch(resetWsErrorCount());\n    dispatch(clearErrors());\n}\n\nlet intervalId = '';\nconst SYNC_INTERVAL_MILLISECONDS = 1000 * 60 * 15; // 15 minutes\n\nexport function startPeriodicSync() {\n    clearInterval(intervalId);\n\n    intervalId = setInterval(\n        () => {\n            if (getCurrentUser(getState()) != null) {\n                reconnect(false);\n            }\n        },\n        SYNC_INTERVAL_MILLISECONDS\n    );\n}\n\nexport function stopPeriodicSync() {\n    clearInterval(intervalId);\n}\n\nexport function registerPluginWebSocketEvent(pluginId, event, action) {\n    if (!pluginEventHandlers[pluginId]) {\n        pluginEventHandlers[pluginId] = {};\n    }\n    pluginEventHandlers[pluginId][event] = action;\n}\n\nexport function unregisterPluginWebSocketEvent(pluginId, event) {\n    const events = pluginEventHandlers[pluginId];\n    if (!events) {\n        return;\n    }\n\n    Reflect.deleteProperty(events, event);\n}\n\nexport function unregisterAllPluginWebSocketEvents(pluginId) {\n    Reflect.deleteProperty(pluginEventHandlers, pluginId);\n}\n\nfunction handleFirstConnect() {\n    dispatch(batchActions([\n        {\n            type: GeneralTypes.WEBSOCKET_SUCCESS,\n            timestamp: Date.now(),\n        },\n        clearErrors(),\n    ]));\n}\n\nfunction handleClose(failCount) {\n    if (failCount > MAX_WEBSOCKET_FAILS) {\n        dispatch(logError({type: 'critical', message: AnnouncementBarMessages.WEBSOCKET_PORT_ERROR}, true));\n    }\n    dispatch(batchActions([\n        {\n            type: GeneralTypes.WEBSOCKET_FAILURE,\n            timestamp: Date.now(),\n        },\n        incrementWsErrorCount(),\n    ]));\n}\n\nexport function handleEvent(msg) {\n    switch (msg.event) {\n    case SocketEvents.POSTED:\n    case SocketEvents.EPHEMERAL_MESSAGE:\n        handleNewPostEventDebounced(msg);\n        break;\n\n    case SocketEvents.POST_EDITED:\n        handlePostEditEvent(msg);\n        break;\n\n    case SocketEvents.POST_DELETED:\n        handlePostDeleteEvent(msg);\n        break;\n\n    case SocketEvents.LEAVE_TEAM:\n        handleLeaveTeamEvent(msg);\n        break;\n\n    case SocketEvents.UPDATE_TEAM:\n        handleUpdateTeamEvent(msg);\n        break;\n\n    case SocketEvents.DELETE_TEAM:\n        handleDeleteTeamEvent(msg);\n        break;\n\n    case SocketEvents.ADDED_TO_TEAM:\n        handleTeamAddedEvent(msg);\n        break;\n\n    case SocketEvents.USER_ADDED:\n        handleUserAddedEvent(msg);\n        break;\n\n    case SocketEvents.USER_REMOVED:\n        handleUserRemovedEvent(msg);\n        break;\n\n    case SocketEvents.USER_UPDATED:\n        handleUserUpdatedEvent(msg);\n        break;\n\n    case SocketEvents.ROLE_ADDED:\n        handleRoleAddedEvent(msg);\n        break;\n\n    case SocketEvents.ROLE_REMOVED:\n        handleRoleRemovedEvent(msg);\n        break;\n\n    case SocketEvents.MEMBERROLE_UPDATED:\n        handleUpdateMemberRoleEvent(msg);\n        break;\n\n    case SocketEvents.ROLE_UPDATED:\n        handleRoleUpdatedEvent(msg);\n        break;\n\n    case SocketEvents.CHANNEL_CREATED:\n        handleChannelCreatedEvent(msg);\n        break;\n\n    case SocketEvents.CHANNEL_DELETED:\n        handleChannelDeletedEvent(msg);\n        break;\n\n    case SocketEvents.CHANNEL_CONVERTED:\n        handleChannelConvertedEvent(msg);\n        break;\n\n    case SocketEvents.CHANNEL_UPDATED:\n        dispatch(handleChannelUpdatedEvent(msg));\n        break;\n\n    case SocketEvents.CHANNEL_MEMBER_UPDATED:\n        handleChannelMemberUpdatedEvent(msg);\n        break;\n\n    case SocketEvents.DIRECT_ADDED:\n        handleDirectAddedEvent(msg);\n        break;\n\n    case SocketEvents.PREFERENCE_CHANGED:\n        handlePreferenceChangedEvent(msg);\n        break;\n\n    case SocketEvents.PREFERENCES_CHANGED:\n        handlePreferencesChangedEvent(msg);\n        break;\n\n    case SocketEvents.PREFERENCES_DELETED:\n        handlePreferencesDeletedEvent(msg);\n        break;\n\n    case SocketEvents.TYPING:\n        dispatch(handleUserTypingEvent(msg));\n        break;\n\n    case SocketEvents.STATUS_CHANGED:\n        handleStatusChangedEvent(msg);\n        break;\n\n    case SocketEvents.HELLO:\n        handleHelloEvent(msg);\n        break;\n\n    case SocketEvents.REACTION_ADDED:\n        handleReactionAddedEvent(msg);\n        break;\n\n    case SocketEvents.REACTION_REMOVED:\n        handleReactionRemovedEvent(msg);\n        break;\n\n    case SocketEvents.EMOJI_ADDED:\n        handleAddEmoji(msg);\n        break;\n\n    case SocketEvents.CHANNEL_VIEWED:\n        handleChannelViewedEvent(msg);\n        break;\n\n    case SocketEvents.PLUGIN_ENABLED:\n        handlePluginEnabled(msg);\n        break;\n\n    case SocketEvents.PLUGIN_DISABLED:\n        handlePluginDisabled(msg);\n        break;\n\n    case SocketEvents.USER_ROLE_UPDATED:\n        handleUserRoleUpdated(msg);\n        break;\n\n    case SocketEvents.CONFIG_CHANGED:\n        handleConfigChanged(msg);\n        break;\n\n    case SocketEvents.LICENSE_CHANGED:\n        handleLicenseChanged(msg);\n        break;\n\n    case SocketEvents.PLUGIN_STATUSES_CHANGED:\n        handlePluginStatusesChangedEvent(msg);\n        break;\n\n    case SocketEvents.OPEN_DIALOG:\n        handleOpenDialogEvent(msg);\n        break;\n\n    default:\n    }\n\n    Object.values(pluginEventHandlers).forEach((pluginEvents) => {\n        if (!pluginEvents) {\n            return;\n        }\n\n        if (pluginEvents.hasOwnProperty(msg.event) && typeof pluginEvents[msg.event] === 'function') {\n            pluginEvents[msg.event](msg);\n        }\n    });\n}\n\n// handleChannelConvertedEvent handles updating of channel which is converted from public to private\nfunction handleChannelConvertedEvent(msg) {\n    const channelId = msg.data.channel_id;\n    if (channelId) {\n        const channel = getChannel(getState(), channelId);\n        if (channel) {\n            dispatch({\n                type: ChannelTypes.RECEIVED_CHANNEL,\n                data: {...channel, type: General.PRIVATE_CHANNEL},\n            });\n        }\n    }\n}\n\nexport function handleChannelUpdatedEvent(msg) {\n    return (doDispatch, doGetState) => {\n        const channel = JSON.parse(msg.data.channel);\n\n        doDispatch({type: ChannelTypes.RECEIVED_CHANNEL, data: channel});\n\n        const state = doGetState();\n        if (channel.id === getCurrentChannelId(state)) {\n            browserHistory.replace(`${getCurrentRelativeTeamUrl(state)}/channels/${channel.name}`);\n        }\n    };\n}\n\nfunction handleChannelMemberUpdatedEvent(msg) {\n    const channelMember = JSON.parse(msg.data.channelMember);\n    dispatch({type: ChannelTypes.RECEIVED_MY_CHANNEL_MEMBER, data: channelMember});\n}\n\nfunction debouncePostEvent(wait) {\n    let timeout;\n    let queue = [];\n    let count = 0;\n\n    // Called when timeout triggered\n    const triggered = () => {\n        timeout = null;\n\n        if (queue.length > 0) {\n            dispatch(handleNewPostEvents(queue));\n        }\n\n        queue = [];\n        count = 0;\n    };\n\n    return function fx(msg) {\n        if (timeout && count > 2) {\n            // If the timeout is going this is the second or further event so queue them up.\n            if (queue.push(msg) > 200) {\n                // Don't run us out of memory, give up if the queue gets insane\n                queue = [];\n                console.log('channel broken because of too many incoming messages'); //eslint-disable-line no-console\n            }\n            clearTimeout(timeout);\n            timeout = setTimeout(triggered, wait);\n        } else {\n            // Apply immediately for events up until count reaches limit\n            count += 1;\n            dispatch(handleNewPostEvent(msg));\n            clearTimeout(timeout);\n            timeout = setTimeout(triggered, wait);\n        }\n    };\n}\n\nconst handleNewPostEventDebounced = debouncePostEvent(100);\n\nexport function handleNewPostEvent(msg) {\n    return (myDispatch, myGetState) => {\n        const post = JSON.parse(msg.data.post);\n        myDispatch(handleNewPost(post, msg));\n\n        getProfilesAndStatusesForPosts([post], myDispatch, myGetState);\n\n        if (post.user_id !== getCurrentUserId(myGetState()) && !fromAutoResponder(post)) {\n            myDispatch({\n                type: UserTypes.RECEIVED_STATUSES,\n                data: [{user_id: post.user_id, status: UserStatuses.ONLINE}],\n            });\n        }\n    };\n}\n\nexport function handleNewPostEvents(queue) {\n    return (myDispatch, myGetState) => {\n        const posts = queue.map((msg) => JSON.parse(msg.data.post));\n\n        // Receive the posts as one continuous block since they were received within a short period\n        const actions = posts.map(receivedNewPost);\n        myDispatch(batchActions(actions));\n\n        // Load the posts' threads\n        myDispatch(getThreadsForPosts(posts));\n\n        // And any other data needed for them\n        getProfilesAndStatusesForPosts(posts, myDispatch, myGetState);\n    };\n}\n\nexport function handlePostEditEvent(msg) {\n    // Store post\n    const post = JSON.parse(msg.data.post);\n    dispatch(receivedPost(post));\n\n    getProfilesAndStatusesForPosts([post], dispatch, getState);\n    const currentChannelId = getCurrentChannelId(getState());\n\n    // Update channel state\n    if (currentChannelId === msg.broadcast.channel_id) {\n        if (window.isActive) {\n            dispatch(viewChannel(currentChannelId));\n        }\n    }\n}\n\nfunction handlePostDeleteEvent(msg) {\n    const post = JSON.parse(msg.data.post);\n    dispatch(postDeleted(post));\n}\n\nasync function handleTeamAddedEvent(msg) {\n    await dispatch(TeamActions.getTeam(msg.data.team_id));\n    await dispatch(TeamActions.getMyTeamMembers());\n    await dispatch(TeamActions.getMyTeamUnreads());\n}\n\nfunction handleLeaveTeamEvent(msg) {\n    const state = getState();\n\n    dispatch(batchActions([\n        {\n            type: UserTypes.RECEIVED_PROFILE_NOT_IN_TEAM,\n            data: {id: msg.data.team_id, user_id: msg.data.user_id},\n        },\n        {\n            type: TeamTypes.REMOVE_MEMBER_FROM_TEAM,\n            data: {team_id: msg.data.team_id, user_id: msg.data.user_id},\n        },\n    ]));\n\n    if (getCurrentUserId(state) === msg.data.user_id) {\n        dispatch({type: TeamTypes.LEAVE_TEAM, data: {id: msg.data.team_id}});\n\n        // if they are on the team being removed redirect them to default team\n        if (getCurrentTeamId(state) === msg.data.team_id) {\n            if (!global.location.pathname.startsWith('/admin_console')) {\n                GlobalActions.redirectUserToDefaultTeam();\n            }\n        }\n    }\n}\n\nfunction handleUpdateTeamEvent(msg) {\n    dispatch({type: TeamTypes.UPDATED_TEAM, data: JSON.parse(msg.data.team)});\n}\n\nfunction handleDeleteTeamEvent(msg) {\n    const deletedTeam = JSON.parse(msg.data.team);\n    const state = store.getState();\n    const {teams} = state.entities.teams;\n    if (\n        deletedTeam &&\n        teams &&\n        teams[deletedTeam.id] &&\n        teams[deletedTeam.id].delete_at === 0\n    ) {\n        const {currentUserId} = state.entities.users;\n        const {currentTeamId, myMembers} = state.entities.teams;\n        const teamMembers = Object.values(myMembers);\n        const teamMember = teamMembers.find((m) => m.user_id === currentUserId && m.team_id === currentTeamId);\n\n        let newTeamId = '';\n        if (\n            deletedTeam &&\n            teamMember &&\n            deletedTeam.id === teamMember.team_id\n        ) {\n            const myTeams = {};\n            getMyTeams(state).forEach((t) => {\n                myTeams[t.id] = t;\n            });\n\n            for (let i = 0; i < teamMembers.length; i++) {\n                const memberTeamId = teamMembers[i].team_id;\n                if (\n                    myTeams &&\n                    myTeams[memberTeamId] &&\n                    myTeams[memberTeamId].delete_at === 0 &&\n                    deletedTeam.id !== memberTeamId\n                ) {\n                    newTeamId = memberTeamId;\n                    break;\n                }\n            }\n        }\n\n        dispatch(batchActions([\n            {type: TeamTypes.RECEIVED_TEAM_DELETED, data: {id: deletedTeam.id}},\n            {type: TeamTypes.UPDATED_TEAM, data: deletedTeam},\n        ]));\n\n        if (newTeamId) {\n            dispatch({type: TeamTypes.SELECT_TEAM, data: newTeamId});\n            const globalState = getState();\n            const redirectChannel = getRedirectChannelNameForTeam(globalState, newTeamId);\n            browserHistory.push(`${getCurrentTeamUrl(globalState)}/channels/${redirectChannel}`);\n        } else {\n            browserHistory.push('/');\n        }\n    }\n}\n\nfunction handleUpdateMemberRoleEvent(msg) {\n    dispatch({\n        type: TeamTypes.RECEIVED_MY_TEAM_MEMBER,\n        data: msg.data.member,\n    });\n}\n\nfunction handleDirectAddedEvent(msg) {\n    dispatch(getChannelAndMyMember(msg.broadcast.channel_id));\n}\n\nfunction handleUserAddedEvent(msg) {\n    const currentChannelId = getCurrentChannelId(getState());\n    if (currentChannelId === msg.broadcast.channel_id) {\n        dispatch(getChannelStats(currentChannelId));\n        dispatch({\n            type: UserTypes.RECEIVED_PROFILE_IN_CHANNEL,\n            data: {id: msg.broadcast.channel_id, user_id: msg.data.user_id},\n        });\n    }\n\n    const currentTeamId = getCurrentTeamId(getState());\n    const currentUserId = getCurrentUserId(getState());\n    if (currentTeamId === msg.data.team_id && currentUserId === msg.data.user_id) {\n        dispatch(getChannelAndMyMember(msg.broadcast.channel_id));\n    }\n}\n\nexport function handleUserRemovedEvent(msg) {\n    const state = getState();\n    const currentChannel = getCurrentChannel(state) || {};\n    const currentUserId = getCurrentUserId(state);\n\n    if (msg.broadcast.user_id === currentUserId) {\n        dispatch(loadChannelsForCurrentUser());\n\n        const rhsChannelId = getSelectedChannelId(state);\n        if (msg.data.channel_id === rhsChannelId) {\n            dispatch(closeRightHandSide());\n        }\n\n        if (msg.data.channel_id === currentChannel.id) {\n            if (msg.data.remover_id === msg.broadcast.user_id) {\n                browserHistory.push(getCurrentRelativeTeamUrl(state));\n            } else {\n                const user = getUser(state, msg.data.remover_id) || {};\n\n                dispatch(openModal({\n                    modalId: ModalIdentifiers.REMOVED_FROM_CHANNEL,\n                    dialogType: RemovedFromChannelModal,\n                    dialogProps: {\n                        channelName: currentChannel.display_name,\n                        remover: user.username,\n                    },\n                }));\n            }\n        }\n\n        dispatch({\n            type: ChannelTypes.LEAVE_CHANNEL,\n            data: {id: msg.data.channel_id, user_id: msg.broadcast.user_id},\n        });\n    } else if (msg.broadcast.channel_id === currentChannel.id) {\n        dispatch(getChannelStats(currentChannel.id));\n        dispatch({\n            type: UserTypes.RECEIVED_PROFILE_NOT_IN_CHANNEL,\n            data: {id: msg.broadcast.channel_id, user_id: msg.data.user_id},\n        });\n    }\n}\n\nfunction handleUserUpdatedEvent(msg) {\n    const currentUser = getCurrentUser(getState());\n    const user = msg.data.user;\n\n    if (currentUser.id === user.id) {\n        if (user.update_at > currentUser.update_at) {\n            // Need to request me to make sure we don't override with sanitized fields from the\n            // websocket event\n            getMe()(dispatch, getState);\n        }\n    } else {\n        dispatch({\n            type: UserTypes.RECEIVED_PROFILE,\n            data: user,\n        });\n    }\n}\n\nfunction handleRoleAddedEvent(msg) {\n    const role = JSON.parse(msg.data.role);\n\n    dispatch({\n        type: RoleTypes.RECEIVED_ROLE,\n        data: role,\n    });\n}\n\nfunction handleRoleRemovedEvent(msg) {\n    const role = JSON.parse(msg.data.role);\n\n    dispatch({\n        type: RoleTypes.ROLE_DELETED,\n        data: role,\n    });\n}\n\nfunction handleRoleUpdatedEvent(msg) {\n    const role = JSON.parse(msg.data.role);\n\n    dispatch({\n        type: RoleTypes.RECEIVED_ROLE,\n        data: role,\n    });\n}\n\nfunction handleChannelCreatedEvent(msg) {\n    const channelId = msg.data.channel_id;\n    const teamId = msg.data.team_id;\n    const state = getState();\n\n    if (getCurrentTeamId(state) === teamId && !getChannel(state, channelId)) {\n        dispatch(getChannelAndMyMember(channelId));\n    }\n}\n\nfunction handleChannelDeletedEvent(msg) {\n    const state = getState();\n    const config = getConfig(state);\n    const viewArchivedChannels = config.ExperimentalViewArchivedChannels === 'true';\n    if (getCurrentChannelId(state) === msg.data.channel_id && !viewArchivedChannels) {\n        const teamUrl = getCurrentRelativeTeamUrl(state);\n        const currentTeamId = getCurrentTeamId(state);\n        const redirectChannel = getRedirectChannelNameForTeam(state, currentTeamId);\n        browserHistory.push(teamUrl + '/channels/' + redirectChannel);\n    }\n\n    dispatch({type: ChannelTypes.RECEIVED_CHANNEL_DELETED, data: {id: msg.data.channel_id, team_id: msg.broadcast.team_id, deleteAt: msg.data.delete_at, viewArchivedChannels}});\n}\n\nfunction handlePreferenceChangedEvent(msg) {\n    const preference = JSON.parse(msg.data.preference);\n    dispatch({type: PreferenceTypes.RECEIVED_PREFERENCES, data: [preference]});\n\n    if (addedNewDmUser(preference)) {\n        loadProfilesForSidebar();\n    }\n}\n\nfunction handlePreferencesChangedEvent(msg) {\n    const preferences = JSON.parse(msg.data.preferences);\n    dispatch({type: PreferenceTypes.RECEIVED_PREFERENCES, data: preferences});\n\n    if (preferences.findIndex(addedNewDmUser) !== -1) {\n        loadProfilesForSidebar();\n    }\n}\n\nfunction handlePreferencesDeletedEvent(msg) {\n    const preferences = JSON.parse(msg.data.preferences);\n    dispatch({type: PreferenceTypes.DELETED_PREFERENCES, data: preferences});\n}\n\nfunction addedNewDmUser(preference) {\n    return preference.category === Constants.Preferences.CATEGORY_DIRECT_CHANNEL_SHOW && preference.value === 'true';\n}\n\nexport function handleUserTypingEvent(msg) {\n    return (doDispatch, doGetState) => {\n        const state = doGetState();\n        const config = getConfig(state);\n        const currentUserId = getCurrentUserId(state);\n        const userId = msg.data.user_id;\n\n        const data = {\n            id: msg.broadcast.channel_id + msg.data.parent_id,\n            userId,\n            now: Date.now(),\n        };\n\n        doDispatch({\n            type: WebsocketEvents.TYPING,\n            data,\n        });\n\n        setTimeout(() => {\n            doDispatch({\n                type: WebsocketEvents.STOP_TYPING,\n                data,\n            });\n        }, parseInt(config.TimeBetweenUserTypingUpdatesMilliseconds, 10));\n\n        if (userId !== currentUserId) {\n            doDispatch(getMissingProfilesByIds([userId]));\n        }\n\n        const status = getStatusForUserId(state, userId);\n        if (status !== General.ONLINE) {\n            doDispatch(getStatusesByIds([userId]));\n        }\n    };\n}\n\nfunction handleStatusChangedEvent(msg) {\n    dispatch({\n        type: UserTypes.RECEIVED_STATUSES,\n        data: [{user_id: msg.data.user_id, status: msg.data.status}],\n    });\n}\n\nfunction handleHelloEvent(msg) {\n    setServerVersion(msg.data.server_version)(dispatch, getState);\n}\n\nfunction handleReactionAddedEvent(msg) {\n    const reaction = JSON.parse(msg.data.reaction);\n\n    dispatch(getCustomEmojiForReaction(reaction.emoji_name));\n\n    dispatch({\n        type: PostTypes.RECEIVED_REACTION,\n        data: reaction,\n    });\n}\n\nfunction handleAddEmoji(msg) {\n    const data = JSON.parse(msg.data.emoji);\n\n    dispatch({\n        type: EmojiTypes.RECEIVED_CUSTOM_EMOJI,\n        data,\n    });\n}\n\nfunction handleReactionRemovedEvent(msg) {\n    const reaction = JSON.parse(msg.data.reaction);\n\n    dispatch({\n        type: PostTypes.REACTION_DELETED,\n        data: reaction,\n    });\n}\n\nfunction handleChannelViewedEvent(msg) {\n    // Useful for when multiple devices have the app open to different channels\n    if ((!window.isActive || getCurrentChannelId(getState()) !== msg.data.channel_id) &&\n        getCurrentUserId(getState()) === msg.broadcast.user_id) {\n        dispatch(markChannelAsRead(msg.data.channel_id, '', false));\n    }\n}\n\nexport function handlePluginEnabled(msg) {\n    const manifest = msg.data.manifest;\n    loadPlugin(manifest).catch((error) => {\n        console.error(error.message); //eslint-disable-line no-console\n    });\n}\n\nexport function handlePluginDisabled(msg) {\n    const manifest = msg.data.manifest;\n    removePlugin(manifest);\n}\n\nfunction handleUserRoleUpdated(msg) {\n    const user = store.getState().entities.users.profiles[msg.data.user_id];\n\n    if (user) {\n        const roles = msg.data.roles;\n        const demoted = user.roles.includes(Constants.PERMISSIONS_SYSTEM_ADMIN) && !roles.includes(Constants.PERMISSIONS_SYSTEM_ADMIN);\n\n        store.dispatch({type: UserTypes.RECEIVED_PROFILE, data: {...user, roles}});\n\n        if (demoted && global.location.pathname.startsWith('/admin_console')) {\n            GlobalActions.redirectUserToDefaultTeam();\n        }\n    }\n}\n\nfunction handleConfigChanged(msg) {\n    store.dispatch({type: GeneralTypes.CLIENT_CONFIG_RECEIVED, data: msg.data.config});\n}\n\nfunction handleLicenseChanged(msg) {\n    store.dispatch({type: GeneralTypes.CLIENT_LICENSE_RECEIVED, data: msg.data.license});\n}\n\nfunction handlePluginStatusesChangedEvent(msg) {\n    store.dispatch({type: AdminTypes.RECEIVED_PLUGIN_STATUSES, data: msg.data.plugin_statuses});\n}\n\nfunction handleOpenDialogEvent(msg) {\n    const data = (msg.data && msg.data.dialog) || {};\n    const dialog = JSON.parse(data);\n\n    store.dispatch({type: IntegrationTypes.RECEIVED_DIALOG, data: dialog});\n\n    const currentTriggerId = getState().entities.integrations.dialogTriggerId;\n\n    if (dialog.trigger_id !== currentTriggerId) {\n        return;\n    }\n\n    store.dispatch(openModal({modalId: ModalIdentifiers.INTERACTIVE_DIALOG, dialogType: InteractiveDialog}));\n}\n","// Copyright (c) 2015-present Mattermost, Inc. All Rights Reserved.\n// See LICENSE.txt for license information.\n\nimport PropTypes from 'prop-types';\nimport React from 'react';\n\nimport {localizeMessage} from 'utils/utils.jsx';\nimport LoadingImagePreview from 'components/loading_image_preview';\n\n// SizeAwareImage is a component used for rendering images where the dimensions of the image are important for\n// ensuring that the page is laid out correctly.\nexport default class SizeAwareImage extends React.PureComponent {\n    static propTypes = {\n\n        /*\n         * The source URL of the image\n         */\n        src: PropTypes.string.isRequired,\n\n        /*\n         * dimensions object to create empty space required to prevent scroll pop\n         */\n        dimensions: PropTypes.object,\n        fileInfo: PropTypes.object,\n\n        /*\n         * Boolean value to pass for showing a loader when image is being loaded\n         */\n        showLoader: PropTypes.bool,\n\n        /*\n         * A callback that is called as soon as the image component has a height value\n         */\n        onImageLoaded: PropTypes.func,\n\n        /*\n         * A callback that is called when image load fails\n         */\n        onImageLoadFail: PropTypes.func,\n\n        /*\n         * Fetch the onClick function\n         */\n        onClick: PropTypes.func,\n\n        /*\n         * css classes that can added to the img as well as parent div on svg for placeholder\n         */\n        className: PropTypes.string,\n    }\n\n    constructor(props) {\n        super(props);\n\n        this.state = {\n            loaded: false,\n        };\n\n        this.heightTimeout = 0;\n    }\n\n    componentDidMount() {\n        this.mounted = true;\n    }\n\n    componentWillUnmount() {\n        this.mounted = false;\n    }\n\n    handleLoad = (event) => {\n        if (this.mounted) {\n            const image = event.target;\n            if (this.props.onImageLoaded && image.naturalHeight) {\n                this.props.onImageLoaded({height: image.naturalHeight, width: image.naturalWidth});\n            }\n            this.setState({\n                loaded: true,\n                error: false,\n            });\n        }\n    };\n\n    handleError = () => {\n        if (this.mounted) {\n            if (this.props.onImageLoadFail) {\n                this.props.onImageLoadFail();\n            }\n            this.setState({error: true});\n        }\n    };\n\n    onEnterKeyDown = (e) => {\n        if (e.key === 'Enter') {\n            this.props.onClick(e);\n        }\n    }\n\n    renderImageLoaderIfNeeded = () => {\n        if (!this.state.loaded && this.props.showLoader && !this.state.error) {\n            return (\n                <div style={{position: 'absolute', top: '50%', transform: 'translate(-50%, -50%)', left: '50%'}}>\n                    <LoadingImagePreview\n                        containerClass={'file__image-loading'}\n                    />\n                </div>\n            );\n        }\n        return null;\n    }\n\n    renderImageOrPlaceholder = () => {\n        const {\n            dimensions,\n            fileInfo,\n            src,\n            ...props\n        } = this.props;\n\n        let placeHolder;\n        let imageStyleChangesOnLoad = {};\n        let ariaLabelImage = localizeMessage('file_attachment.thumbnail', 'file thumbnail');\n        if (fileInfo) {\n            ariaLabelImage += ` ${fileInfo.name}`.toLowerCase();\n        }\n\n        if (dimensions && dimensions.width && !this.state.loaded) {\n            placeHolder = (\n                <div\n                    className={`image-loading__container ${this.props.className}`}\n                    style={{maxWidth: dimensions.width}}\n                >\n                    <svg\n                        xmlns='http://www.w3.org/2000/svg'\n                        viewBox={`0 0 ${dimensions.width} ${dimensions.height}`}\n                        style={{verticalAlign: 'middle', maxHeight: dimensions.height, maxWidth: dimensions.width}}\n                    />\n                </div>\n            );\n        }\n        Reflect.deleteProperty(props, 'showLoader');\n        Reflect.deleteProperty(props, 'onImageLoaded');\n        Reflect.deleteProperty(props, 'onImageLoadFail');\n\n        //The css hack here for loading images in the background can be removed after IE11 is dropped in 5.16v\n        //We can go back to https://github.com/mattermost/mattermost-webapp/pull/2924/files\n        if (!this.state.loaded && dimensions) {\n            imageStyleChangesOnLoad = {position: 'absolute', top: 0, height: 1, width: 1, visibility: 'hidden', overflow: 'hidden'};\n        }\n\n        return (\n            <React.Fragment>\n                {placeHolder}\n                <div\n                    className='style--none file-preview__button'\n                    style={imageStyleChangesOnLoad}\n                >\n                    <img\n                        {...props}\n                        aria-label={ariaLabelImage}\n                        tabIndex='0'\n                        onKeyDown={this.onEnterKeyDown}\n                        className={this.props.className}\n                        src={src}\n                        onError={this.handleError}\n                        onLoad={this.handleLoad}\n                    />\n                </div>\n            </React.Fragment>\n        );\n    }\n\n    render() {\n        return (\n            <React.Fragment>\n                {this.renderImageLoaderIfNeeded()}\n                {this.renderImageOrPlaceholder()}\n            </React.Fragment>\n        );\n    }\n}\n","// Copyright (c) 2015-present Mattermost, Inc. All Rights Reserved.\n// See LICENSE.txt for license information.\n\nimport React from 'react';\nimport PropTypes from 'prop-types';\n\nexport default function menuItem(Component) {\n    class MenuItem extends React.PureComponent {\n        static propTypes= {\n            show: PropTypes.bool,\n            id: PropTypes.string,\n            icon: PropTypes.node,\n            text: PropTypes.string,\n        };\n        static defaultProps = {\n            show: true,\n        };\n\n        render() {\n            const {id, show, icon, text, ...props} = this.props;\n            if (!show) {\n                return null;\n            }\n\n            let textProp = text;\n            if (icon) {\n                textProp = (\n                    <React.Fragment>\n                        <span className='icon'>{icon}</span>\n                        {text}\n                    </React.Fragment>\n                );\n            }\n\n            return (\n                <li\n                    className='MenuItem'\n                    role='menuitem'\n                    id={id}\n                >\n                    <Component\n                        text={textProp}\n                        {...props}\n                    />\n                </li>\n            );\n        }\n    }\n    return MenuItem;\n}\n","// Copyright (c) 2015-present Mattermost, Inc. All Rights Reserved.\n// See LICENSE.txt for license information.\n\nimport React from 'react';\nimport {FormattedMessage} from 'react-intl';\n\nexport default class SearchIcon extends React.PureComponent {\n    render() {\n        return (\n            <span {...this.props}>\n                <FormattedMessage\n                    id='generic_icons.search'\n                    defaultMessage='Search Icon'\n                >\n                    {(ariaLabel) => (\n                        <svg\n                            width='14px'\n                            height='14px'\n                            viewBox='0 0 19 18'\n                            role='icon'\n                            aria-label={ariaLabel}\n                        >\n                            <g\n                                stroke='inherit'\n                                strokeWidth='1'\n                                fill='none'\n                                fillRule='evenodd'\n                            >\n                                <g\n                                    transform='translate(-719.000000, -20.000000)'\n                                    strokeWidth='1.5'\n                                >\n                                    <g transform='translate(0.000000, 1.000000)'>\n                                        <g transform='translate(63.000000, 10.000000)'>\n                                            <g transform='translate(657.000000, 10.000000)'>\n                                                <circle\n                                                    cx='7'\n                                                    cy='7'\n                                                    r='7'\n                                                />\n                                                <path\n                                                    d='M12.5,11.5 L16.5,15.5'\n                                                    strokeLinecap='round'\n                                                />\n                                            </g>\n                                        </g>\n                                    </g>\n                                </g>\n                            </g>\n                        </svg>\n                    )}\n                </FormattedMessage>\n            </span>\n        );\n    }\n}\n","// Copyright (c) 2015-present Mattermost, Inc. All Rights Reserved.\n// See LICENSE.txt for license information.\n\nimport React from 'react';\n\nimport {FormattedMessage} from 'react-intl';\n\nexport default class BackIcon extends React.PureComponent {\n    render() {\n        return (\n            <FormattedMessage\n                id='generic_icons.back'\n                defaultMessage='Back Icon'\n            >\n                {(title) => (\n                    <i\n                        className='fa fa-angle-left'\n                        title={title}\n                    />\n                )}\n            </FormattedMessage>\n        );\n    }\n}\n","// Copyright (c) 2015-present Mattermost, Inc. All Rights Reserved.\n// See LICENSE.txt for license information.\n\nimport PropTypes from 'prop-types';\nimport React from 'react';\n\nexport default class ModalToggleButton extends React.Component {\n    constructor(props) {\n        super(props);\n\n        this.show = this.show.bind(this);\n        this.hide = this.hide.bind(this);\n\n        this.state = {\n            show: false,\n        };\n    }\n\n    show(e) {\n        if (e) {\n            e.preventDefault();\n        }\n        this.setState({show: true});\n    }\n\n    hide() {\n        this.setState({show: false});\n    }\n\n    render() {\n        const {children, dialogType, dialogProps, onClick, ...props} = this.props;\n\n        // allow callers to provide an onClick which will be called before the modal is shown\n        let clickHandler = this.show;\n        if (onClick) {\n            clickHandler = (e) => {\n                onClick();\n\n                this.show(e);\n            };\n        }\n\n        let dialog;\n        if (this.state.show) {\n            // this assumes that all modals will have an onHide event and will show when mounted\n            dialog = React.createElement(dialogType, Object.assign({}, dialogProps, {\n                onHide: () => {\n                    this.hide();\n\n                    if (dialogProps.onHide) {\n                        dialogProps.onHide();\n                    }\n                },\n            }));\n        }\n\n        // nesting the dialog in the anchor tag looks like it shouldn't work, but it does due to how react-bootstrap\n        // renders modals at the top level of the DOM instead of where you specify in the virtual DOM\n        return (\n            <button\n                {...props}\n                className={'style--none ' + props.className}\n                onClick={clickHandler}\n            >\n                {children}\n                {dialog}\n            </button>\n        );\n    }\n}\n\nModalToggleButton.propTypes = {\n    children: PropTypes.node.isRequired,\n    dialogType: PropTypes.func.isRequired,\n    dialogProps: PropTypes.object,\n    onClick: PropTypes.func,\n    className: PropTypes.string,\n};\n\nModalToggleButton.defaultProps = {\n    dialogProps: {},\n    className: '',\n};\n","// Copyright (c) 2015-present Mattermost, Inc. All Rights Reserved.\n// See LICENSE.txt for license information.\n\nimport React from 'react';\nimport {FormattedMessage} from 'react-intl';\n\nexport default class StatusAwayAvatarIcon extends React.PureComponent {\n    render() {\n        return (\n            <span {...this.props}>\n                <FormattedMessage\n                    id='mobile.set_status.away.icon'\n                    defaultMessage='Away Icon'\n                >\n                    {(ariaLabel) => (\n\n                        <svg\n                            width='13px'\n                            height='13px'\n                            viewBox='0 0 12 12'\n                            style={style}\n                            role='icon'\n                            aria-label={ariaLabel}\n                        >\n                            <path\n                                className='away--icon'\n                                d='M9.081,5.712C9.267,5.712 9.417,5.863 9.417,6.048L9.417,9.086L11.864,10.499C12.025,10.592 12.08,10.797 11.987,10.958L11.482,11.832C11.39,11.993 11.184,12.048 11.023,11.955L7.904,10.154C7.788,10.087 7.727,9.961 7.737,9.836C7.736,9.827 7.736,9.818 7.736,9.809L7.736,6.048C7.736,5.863 7.886,5.712 8.072,5.712L9.081,5.712ZM4.812,11.513L4.605,11.513C2.325,11.41 0.253,10.374 0.046,9.027C-0.058,8.923 0.046,8.509 0.046,8.405C0.15,7.576 0.357,6.437 0.771,5.815C0.978,5.401 2.015,5.297 2.015,5.297C2.015,5.297 2.015,7.369 4.605,7.369L5.019,7.369C4.915,7.784 4.812,8.198 4.812,8.612C4.812,9.648 5.226,10.581 5.848,11.41C5.537,11.513 5.123,11.513 4.812,11.513ZM4.605,0.117C6.034,0.117 7.195,1.277 7.195,2.707C7.195,4.136 6.034,5.297 4.605,5.297C3.175,5.297 2.015,4.136 2.015,2.707C2.015,1.277 3.175,0.117 4.605,0.117Z'\n                            />\n                        </svg>\n                    )}\n                </FormattedMessage>\n            </span>\n        );\n    }\n}\n\nconst style = {\n    fillRule: 'evenodd',\n    clipRule: 'evenodd',\n    strokeLinejoin: 'round',\n    strokeMiterlimit: 1.41421,\n};\n","// Copyright (c) 2015-present Mattermost, Inc. All Rights Reserved.\n// See LICENSE.txt for license information.\n\nimport React from 'react';\nimport {FormattedMessage} from 'react-intl';\n\nexport default class StatusAwayIcon extends React.PureComponent {\n    render() {\n        return (\n            <span {...this.props}>\n                <FormattedMessage\n                    id='mobile.set_status.away.icon'\n                    defaultMessage='Away Icon'\n                >\n                    {(ariaLabel) => (\n                        <svg\n                            width='100%'\n                            height='100%'\n                            viewBox='0 0 20 20'\n                            style={style}\n                            role='icon'\n                            aria-label={ariaLabel}\n                        >\n                            <path\n                                className='away--icon'\n                                d='M10,0C15.519,0 20,4.481 20,10C20,15.519 15.519,20 10,20C4.481,20 0,15.519 0,10C0,4.481 4.481,0 10,0ZM10.27,3C10.949,3 11.5,3.586 11.5,4.307L11.5,9.379L15.002,12.881C15.492,13.37 15.499,14.158 15.019,14.638L14.638,15.019C14.158,15.499 13.37,15.492 12.881,15.002L8.887,11.008C8.739,10.861 8.636,10.686 8.576,10.501C8.528,10.402 8.5,10.299 8.5,10.193L8.5,4.307C8.5,3.586 9.051,3 9.73,3L10.27,3Z'\n                            />\n                        </svg>\n                    )}\n                </FormattedMessage>\n            </span>\n        );\n    }\n}\n\nconst style = {\n    fillRule: 'evenodd',\n    clipRule: 'evenodd',\n    strokeLinejoin: 'round',\n    strokeMiterlimit: 1.41421,\n};\n","// Copyright (c) 2015-present Mattermost, Inc. All Rights Reserved.\n// See LICENSE.txt for license information.\n\nimport React from 'react';\nimport {FormattedMessage} from 'react-intl';\n\nexport default class StatusDndAvatarIcon extends React.PureComponent {\n    render() {\n        return (\n            <span {...this.props}>\n                <FormattedMessage\n                    id='mobile.set_status.dnd.icon'\n                    defaultMessage='Do Not Disturb Icon'\n                >\n                    {(ariaLabel) => (\n                        <svg\n                            id='Layer_1'\n                            x='0px'\n                            y='0px'\n                            width='13px'\n                            height='13px'\n                            viewBox='-299 391 12 12'\n                            style={style}\n                            role='icon'\n                            aria-label={ariaLabel}\n                        >\n                            <g>\n                                <ellipse\n                                    className='dnd--icon'\n                                    cx='-294.6'\n                                    cy='394'\n                                    rx='2.5'\n                                    ry='2.5'\n                                />\n                                <path\n                                    className='dnd--icon'\n                                    d='M-293.8,399.4c0-0.4,0.1-0.7,0.2-1c-0.3,0.1-0.6,0.2-1,0.2c-2.5,0-2.5-2-2.5-2s-1,0.1-1.2,0.5c-0.4,0.6-0.6,1.7-0.7,2.5 c0,0.1-0.1,0.5,0,0.6c0.2,1.3,2.2,2.3,4.4,2.4c0,0,0.1,0,0.1,0c0,0,0.1,0,0.1,0c0.7,0,1.4-0.1,2-0.3 C-293.3,401.5-293.8,400.5-293.8,399.4z'\n                                />\n                            </g>\n                            <path\n                                className='dnd--icon'\n                                d='M-287,400c0,0.1-0.1,0.1-0.1,0.1l-4.9,0c-0.1,0-0.1-0.1-0.1-0.1v-1.6c0-0.1,0.1-0.1,0.1-0.1l4.9,0c0.1,0,0.1,0.1,0.1,0.1 V400z'\n                            />\n                        </svg>\n                    )}\n                </FormattedMessage>\n            </span>\n        );\n    }\n}\n\nconst style = {\n    enableBackground: 'new -299 391 12 12',\n};\n","// Copyright (c) 2015-present Mattermost, Inc. All Rights Reserved.\n// See LICENSE.txt for license information.\n\nimport React from 'react';\nimport {FormattedMessage} from 'react-intl';\n\nexport default class StatusDndIcon extends React.PureComponent {\n    render() {\n        return (\n            <span {...this.props}>\n                <FormattedMessage\n                    id='mobile.set_status.dnd.icon'\n                    defaultMessage='Do Not Disturb Icon'\n                >\n                    {(ariaLabel) => (\n                        <svg\n                            width='100%'\n                            height='100%'\n                            viewBox='0 0 20 20'\n                            style={style}\n                            role='icon'\n                            aria-label={ariaLabel}\n                        >\n                            <path\n                                className='dnd--icon'\n                                d='M10,0c5.519,0 10,4.481 10,10c0,5.519 -4.481,10 -10,10c-5.519,0 -10,-4.481 -10,-10c0,-5.519 4.481,-10 10,-10Zm5.25,8.5l-10.5,0c-0.414,0 -0.75,0.336 -0.75,0.75l0,1.5c0,0.414 0.336,0.75 0.75,0.75l10.5,0c0.414,0 0.75,-0.336 0.75,-0.75l0,-1.5c0,-0.414 -0.336,-0.75 -0.75,-0.75Z'\n                            />\n                        </svg>\n                    )}\n                </FormattedMessage>\n            </span>\n        );\n    }\n}\n\nconst style = {\n    fillRule: 'evenodd',\n    clipRule: 'evenodd',\n    strokeLinejoin: 'round',\n    strokeMiterlimit: 1.41421,\n};\n","// Copyright (c) 2015-present Mattermost, Inc. All Rights Reserved.\n// See LICENSE.txt for license information.\n\nimport React from 'react';\nimport {FormattedMessage} from 'react-intl';\n\nexport default class StatusDndAvatarIcon extends React.PureComponent {\n    render() {\n        return (\n            <span {...this.props}>\n                <FormattedMessage\n                    id='mobile.set_status.offline.icon'\n                    defaultMessage='Offline Icon'\n                >\n                    {(ariaLabel) => (\n                        <svg\n                            id='Layer_1'\n                            x='0px'\n                            y='0px'\n                            width='13px'\n                            height='13px'\n                            viewBox='-299 391 12 12'\n                            style={style}\n                            role='icon'\n                            aria-label={ariaLabel}\n                        >\n                            <g>\n                                <g>\n                                    <ellipse\n                                        className='offline--icon'\n                                        cx='-294.5'\n                                        cy='394'\n                                        rx='2.5'\n                                        ry='2.5'\n                                    />\n                                    <path\n                                        className='offline--icon'\n                                        d='M-294.3,399.7c0-0.4,0.1-0.8,0.2-1.2c-0.1,0-0.2,0-0.4,0c-2.5,0-2.5-2-2.5-2s-1,0.1-1.2,0.5c-0.4,0.6-0.6,1.7-0.7,2.5 c0,0.1-0.1,0.5,0,0.6c0.2,1.3,2.2,2.3,4.4,2.4h0.1h0.1c0.3,0,0.7,0,1-0.1C-293.9,401.6-294.3,400.7-294.3,399.7z'\n                                    />\n                                </g>\n                            </g>\n                            <g>\n                                <path\n                                    className='offline--icon'\n                                    d='M-288.9,399.4l1.8-1.8c0.1-0.1,0.1-0.3,0-0.3l-0.7-0.7c-0.1-0.1-0.3-0.1-0.3,0l-1.8,1.8l-1.8-1.8c-0.1-0.1-0.3-0.1-0.3,0 l-0.7,0.7c-0.1,0.1-0.1,0.3,0,0.3l1.8,1.8l-1.8,1.8c-0.1,0.1-0.1,0.3,0,0.3l0.7,0.7c0.1,0.1,0.3,0.1,0.3,0l1.8-1.8l1.8,1.8 c0.1,0.1,0.3,0.1,0.3,0l0.7-0.7c0.1-0.1,0.1-0.3,0-0.3L-288.9,399.4z'\n                                />\n                            </g>\n                        </svg>\n                    )}\n                </FormattedMessage>\n            </span>\n        );\n    }\n}\n\nconst style = {\n    enableBackground: 'new -299 391 12 12',\n};\n","// Copyright (c) 2015-present Mattermost, Inc. All Rights Reserved.\n// See LICENSE.txt for license information.\n\nimport React from 'react';\nimport {FormattedMessage} from 'react-intl';\n\nexport default class StatusOfflineIcon extends React.PureComponent {\n    render() {\n        return (\n            <span {...this.props}>\n                <FormattedMessage\n                    id='mobile.set_status.offline.icon'\n                    defaultMessage='Offline Icon'\n                >\n                    {(ariaLabel) => (\n                        <svg\n                            width='100%'\n                            height='100%'\n                            className='offline--icon'\n                            viewBox='0 0 20 20'\n                            style={style}\n                            role='icon'\n                            aria-label={ariaLabel}\n                        >\n                            <path d='M10,0c5.519,0 10,4.481 10,10c0,5.519 -4.481,10 -10,10c-5.519,0 -10,-4.481 -10,-10c0,-5.519 4.481,-10 10,-10Zm0,2c4.415,0 8,3.585 8,8c0,4.415 -3.585,8 -8,8c-4.415,0 -8,-3.585 -8,-8c0,-4.415 3.585,-8 8,-8Z'/>\n                        </svg>\n                    )}\n                </FormattedMessage>\n            </span>\n        );\n    }\n}\n\nconst style = {\n    fillRule: 'evenodd',\n    clipRule: 'evenodd',\n    strokeLinejoin: 'round',\n    strokeMiterlimit: 1.41421,\n};\n","// Copyright (c) 2015-present Mattermost, Inc. All Rights Reserved.\n// See LICENSE.txt for license information.\n\nimport React from 'react';\nimport {FormattedMessage} from 'react-intl';\n\nexport default class StatusOnlineAvatarIcon extends React.PureComponent {\n    render() {\n        return (\n            <span {...this.props}>\n                <FormattedMessage\n                    id='mobile.set_status.online.icon'\n                    defaultMessage='Online Icon'\n                >\n                    {(ariaLabel) => (\n                        <svg\n                            id='Layer_1'\n                            x='0px'\n                            y='0px'\n                            width='13px'\n                            height='13px'\n                            viewBox='-243 245 12 12'\n                            style={style}\n                            role='icon'\n                            aria-label={ariaLabel}\n                        >\n                            <g>\n                                <path\n                                    className='online--icon'\n                                    d='M-236,250.5C-236,250.5-236,250.5-236,250.5C-236,250.5-236,250.5-236,250.5C-236,250.5-236,250.5-236,250.5z'\n                                />\n                                <ellipse\n                                    className='online--icon'\n                                    cx='-238.5'\n                                    cy='248'\n                                    rx='2.5'\n                                    ry='2.5'\n                                />\n                            </g>\n                            <path\n                                className='online--icon'\n                                d='M-238.9,253.8c0-0.4,0.1-0.9,0.2-1.3c-2.2-0.2-2.2-2-2.2-2s-1,0.1-1.2,0.5c-0.4,0.6-0.6,1.7-0.7,2.5c0,0.1-0.1,0.5,0,0.6 c0.2,1.3,2.2,2.3,4.4,2.4c0,0,0.1,0,0.1,0c0,0,0.1,0,0.1,0c0,0,0.1,0,0.1,0C-238.7,255.7-238.9,254.8-238.9,253.8z'\n                            />\n                            <g>\n                                <g>\n                                    <path\n                                        className='online--icon'\n                                        d='M-232.3,250.1l1.3,1.3c0,0,0,0.1,0,0.1l-4.1,4.1c0,0,0,0-0.1,0c0,0,0,0,0,0l-2.7-2.7c0,0,0-0.1,0-0.1l1.2-1.2 c0,0,0.1,0,0.1,0l1.4,1.4l2.9-2.9C-232.4,250.1-232.3,250.1-232.3,250.1z'\n                                    />\n                                </g>\n                            </g>\n                        </svg>\n                    )}\n                </FormattedMessage>\n            </span>\n        );\n    }\n}\n\nconst style = {\n    enableBackground: 'new -243 245 12 12',\n};\n","// Copyright (c) 2015-present Mattermost, Inc. All Rights Reserved.\n// See LICENSE.txt for license information.\n\nimport React from 'react';\nimport {FormattedMessage} from 'react-intl';\n\nexport default class StatusOnlineIcon extends React.PureComponent {\n    render() {\n        return (\n            <span {...this.props}>\n                <FormattedMessage\n                    id='mobile.set_status.online.icon'\n                    defaultMessage='Online Icon'\n                >\n                    {(ariaLabel) => (\n                        <svg\n                            width='100%'\n                            height='100%'\n                            viewBox='0 0 20 20'\n                            style={style}\n                            role='icon'\n                            aria-label={ariaLabel}\n                        >\n                            <path\n                                className='online--icon'\n                                d='M10,0c5.519,0 10,4.481 10,10c0,5.519 -4.481,10 -10,10c-5.519,0 -10,-4.481 -10,-10c0,-5.519 4.481,-10 10,-10Zm6.19,7.18c0,0.208 -0.075,0.384 -0.224,0.53l-5.782,5.64l-1.087,1.059c-0.149,0.146 -0.33,0.218 -0.543,0.218c-0.213,0 -0.394,-0.072 -0.543,-0.218l-1.086,-1.059l-2.891,-2.82c-0.149,-0.146 -0.224,-0.322 -0.224,-0.53c0,-0.208 0.075,-0.384 0.224,-0.53l1.086,-1.059c0.149,-0.146 0.33,-0.218 0.543,-0.218c0.213,0 0.394,0.072 0.543,0.218l2.348,2.298l5.24,-5.118c0.149,-0.146 0.33,-0.218 0.543,-0.218c0.213,0 0.394,0.072 0.543,0.218l1.086,1.059c0.149,0.146 0.224,0.322 0.224,0.53Z'\n                            />\n                        </svg>\n                    )}\n                </FormattedMessage>\n            </span>\n        );\n    }\n}\n\nconst style = {\n    fillRule: 'evenodd',\n    clipRule: 'evenodd',\n    strokeLinejoin: 'round',\n    strokeMiterlimit: 1.41421,\n};\n","// Copyright (c) 2015-present Mattermost, Inc. All Rights Reserved.\n// See LICENSE.txt for license information.\n\nimport PropTypes from 'prop-types';\nimport React from 'react';\n\nimport StatusAwayAvatarIcon from 'components/svg/status_away_avatar_icon';\nimport StatusAwayIcon from 'components/svg/status_away_icon';\nimport StatusDndAvatarIcon from 'components/svg/status_dnd_avatar_icon';\nimport StatusDndIcon from 'components/svg/status_dnd_icon';\nimport StatusOfflineAvatarIcon from 'components/svg/status_offline_avatar_icon';\nimport StatusOfflineIcon from 'components/svg/status_offline_icon';\nimport StatusOnlineAvatarIcon from 'components/svg/status_online_avatar_icon';\nimport StatusOnlineIcon from 'components/svg/status_online_icon';\n\nexport default class StatusIcon extends React.PureComponent {\n    static propTypes = {\n        button: PropTypes.bool,\n        status: PropTypes.string,\n        className: PropTypes.string,\n        type: PropTypes.string,\n    };\n\n    static defaultProps = {\n        className: '',\n        button: false,\n    };\n\n    render() {\n        const {button, status, type} = this.props;\n\n        if (!status) {\n            return null;\n        }\n\n        let className = 'status ' + this.props.className;\n\n        if (button) {\n            className = this.props.className;\n        }\n\n        let IconComponent = 'span';\n        if (type === 'avatar') {\n            if (status === 'online') {\n                IconComponent = StatusOnlineAvatarIcon;\n            } else if (status === 'away') {\n                IconComponent = StatusAwayAvatarIcon;\n            } else if (status === 'dnd') {\n                IconComponent = StatusDndAvatarIcon;\n            } else {\n                IconComponent = StatusOfflineAvatarIcon;\n            }\n        } else if (status === 'online') {\n            IconComponent = StatusOnlineIcon;\n        } else if (status === 'away') {\n            IconComponent = StatusAwayIcon;\n        } else if (status === 'dnd') {\n            IconComponent = StatusDndIcon;\n        } else {\n            IconComponent = StatusOfflineIcon;\n        }\n\n        return <IconComponent className={className}/>;\n    }\n}\n","// Copyright (c) 2015-present Mattermost, Inc. All Rights Reserved.\n// See LICENSE.txt for license information.\n\nimport PropTypes from 'prop-types';\nimport React from 'react';\n\nimport {getImageSrc} from 'utils/post_utils.jsx';\n\nexport default class ExternalImage extends React.PureComponent {\n    static propTypes = {\n        children: PropTypes.func.isRequired,\n        enableSVGs: PropTypes.bool.isRequired,\n        hasImageProxy: PropTypes.bool.isRequired,\n        imageMetadata: PropTypes.object,\n        src: PropTypes.string.isRequired,\n    };\n\n    isSVGImage = () => {\n        if (!this.props.imageMetadata) {\n            // Just check if the string contains an svg extension instead of if it ends with one because it avoids\n            // having to deal with query strings and proxied image URLs\n            return this.props.src.indexOf('.svg') !== -1;\n        }\n\n        return this.props.imageMetadata.format === 'svg';\n    }\n\n    shouldRenderImage = () => {\n        // Return true unless the image is an SVG and we have SVG rendering disabled\n        return this.props.enableSVGs || !this.isSVGImage();\n    }\n\n    render() {\n        let src = getImageSrc(this.props.src, this.props.hasImageProxy);\n\n        if (!this.shouldRenderImage()) {\n            src = '';\n        }\n\n        return this.props.children(src);\n    }\n}\n","// Copyright (c) 2015-present Mattermost, Inc. All Rights Reserved.\n// See LICENSE.txt for license information.\n\nimport {connect} from 'react-redux';\n\nimport {getConfig} from 'mattermost-redux/selectors/entities/general';\n\nimport ExternalImage from './external_image';\n\nfunction mapStateToProps(state) {\n    const config = getConfig(state);\n\n    return {\n        enableSVGs: config.EnableSVGs === 'true',\n        hasImageProxy: config.HasImageProxy === 'true',\n    };\n}\n\nexport default connect(mapStateToProps)(ExternalImage);\n","// Copyright (c) 2015-present Mattermost, Inc. All Rights Reserved.\n// See LICENSE.txt for license information.\n\nimport {getClientConfig, getLicenseConfig} from 'mattermost-redux/actions/general';\nimport * as UserActions from 'mattermost-redux/actions/users';\nimport {Client4} from 'mattermost-redux/client';\n\nimport {ActionTypes} from 'utils/constants';\nimport en from 'i18n/en.json';\nimport {getCurrentLocale, getTranslations} from 'selectors/i18n';\n\nexport function loadMeAndConfig() {\n    return async (dispatch) => {\n        // if any new promise needs to be added please be mindful of the order as it is used in root.jsx for redirection\n        const promises = [\n            dispatch(getClientConfig()),\n            dispatch(getLicenseConfig()),\n        ];\n\n        // need to await for clientConfig first as it is required for loadMe\n        const resolvedPromises = await Promise.all(promises);\n        if (document.cookie.indexOf('MMUSERID=') > -1) {\n            resolvedPromises.push(await dispatch(UserActions.loadMe()));\n        }\n\n        return resolvedPromises;\n    };\n}\n\nconst pluginTranslationSources = {};\n\nexport function registerPluginTranslationsSource(pluginId, sourceFunction) {\n    pluginTranslationSources[pluginId] = sourceFunction;\n    return (dispatch, getState) => {\n        const state = getState();\n        const locale = getCurrentLocale(state);\n        const immutableTranslations = getTranslations(state, locale);\n        const translations = {};\n        Object.assign(translations, immutableTranslations);\n        if (immutableTranslations) {\n            copyAndDispatchTranslations(dispatch, translations, sourceFunction(locale), locale);\n        }\n    };\n}\n\nexport function unregisterPluginTranslationsSource(pluginId) {\n    Reflect.deleteProperty(pluginTranslationSources, pluginId);\n}\n\nexport function loadTranslations(locale, url) {\n    return (dispatch) => {\n        const translations = {};\n        Object.values(pluginTranslationSources).forEach((pluginFunc) => {\n            Object.assign(translations, pluginFunc(locale));\n        });\n\n        // No need to go to the server for EN\n        if (locale === 'en') {\n            copyAndDispatchTranslations(dispatch, translations, en, locale);\n            return;\n        }\n        Client4.getTranslations(url).then((serverTranslations) => {\n            copyAndDispatchTranslations(dispatch, translations, serverTranslations, locale);\n        }).catch(() => {}); // eslint-disable-line no-empty-function\n    };\n}\n\nfunction copyAndDispatchTranslations(dispatch, translations, from, locale) {\n    Object.assign(translations, from);\n    dispatch({\n        type: ActionTypes.RECEIVED_TRANSLATIONS,\n        data: {\n            locale,\n            translations,\n        },\n    });\n}","// Copyright (c) 2015-present Mattermost, Inc. All Rights Reserved.\n// See LICENSE.txt for license information.\n\nimport {browserHistory} from 'utils/browser_history';\nimport * as Selectors from 'selectors/storage';\nimport * as Actions from 'actions/storage';\nimport store from 'stores/redux_store.jsx';\nimport {ErrorPageTypes, StoragePrefixes} from 'utils/constants.jsx';\nimport * as Utils from 'utils/utils.jsx';\n\nconst dispatch = store.dispatch;\nconst getState = store.getState;\n\nclass BrowserStoreClass {\n    setItem(name, value) {\n        dispatch(Actions.setItem(name, value));\n    }\n\n    getItem(name, defaultValue) {\n        return Selectors.makeGetItem(name, defaultValue)(getState());\n    }\n\n    removeItem(name) {\n        dispatch(Actions.removeItem(name));\n    }\n\n    setGlobalItem(name, value) {\n        dispatch(Actions.setGlobalItem(name, value));\n    }\n\n    getGlobalItem(name, defaultValue = null) {\n        return Selectors.makeGetGlobalItem(name, defaultValue)(getState());\n    }\n\n    removeGlobalItem(name) {\n        dispatch(Actions.removeGlobalItem(name));\n    }\n\n    signalLogout() {\n        if (this.isLocalStorageSupported()) {\n            // PLT-1285 store an identifier in session storage so we can catch if the logout came from this tab on IE11\n            const logoutId = Utils.generateId();\n\n            Utils.removePrefixFromLocalStorage(StoragePrefixes.ANNOUNCEMENT);\n\n            sessionStorage.setItem(StoragePrefixes.LOGOUT, logoutId);\n            localStorage.setItem(StoragePrefixes.LOGOUT, logoutId);\n            localStorage.removeItem(StoragePrefixes.LOGOUT);\n        }\n    }\n\n    isSignallingLogout(logoutId) {\n        return logoutId === sessionStorage.getItem(StoragePrefixes.LOGOUT);\n    }\n\n    signalLogin() {\n        if (this.isLocalStorageSupported()) {\n            // PLT-1285 store an identifier in session storage so we can catch if the logout came from this tab on IE11\n            const loginId = Utils.generateId();\n\n            sessionStorage.setItem(StoragePrefixes.LOGIN, loginId);\n            localStorage.setItem(StoragePrefixes.LOGIN, loginId);\n            localStorage.removeItem(StoragePrefixes.LOGIN);\n        }\n    }\n\n    isSignallingLogin(loginId) {\n        return loginId === sessionStorage.getItem(StoragePrefixes.LOGIN);\n    }\n\n    clear(options) {\n        dispatch(Actions.clear(options));\n    }\n\n    isLocalStorageSupported() {\n        if (this.hasCheckedLocalStorage) {\n            return this.localStorageSupported;\n        }\n\n        this.localStorageSupported = false;\n\n        try {\n            localStorage.setItem('__testLocal__', '1');\n            if (localStorage.getItem('__testLocal__') === '1') {\n                this.localStorageSupported = true;\n            }\n            localStorage.removeItem('__testLocal__', '1');\n        } catch (e) {\n            this.localStorageSupported = false;\n        }\n\n        try {\n            sessionStorage.setItem('__testSession__', '1');\n            sessionStorage.removeItem('__testSession__');\n        } catch (e) {\n            // Session storage not usable, website is unusable\n            browserHistory.push('/error?type=' + ErrorPageTypes.LOCAL_STORAGE);\n        }\n\n        this.hasCheckedLocalStorage = true;\n\n        return this.localStorageSupported;\n    }\n\n    hasSeenLandingPage() {\n        return localStorage.getItem(StoragePrefixes.LANDING_PAGE_SEEN);\n    }\n\n    setLandingPageSeen(landingPageSeen) {\n        localStorage.setItem(StoragePrefixes.LANDING_PAGE_SEEN, landingPageSeen);\n    }\n}\n\nvar BrowserStore = new BrowserStoreClass();\nexport default BrowserStore;\n","// Copyright (c) 2015-present Mattermost, Inc. All Rights Reserved.\n// See LICENSE.txt for license information.\n\n// Use when sorting multiple teams by their `display_name` field\nfunction compareTeamsByDisplayName(locale, a, b) {\n    if (a.display_name !== b.display_name) {\n        return a.display_name.localeCompare(b.display_name, locale, {numeric: true});\n    }\n\n    return a.name.localeCompare(b.name, locale, {numeric: true});\n}\n\n// Use to filter out teams that are deleted and without display_name, then sort by their `display_name` field\nexport function filterAndSortTeamsByDisplayName(teams, locale) {\n    if (!teams) {\n        return [];\n    }\n\n    return teams.filter((team) => {\n        return team && !team.delete_at > 0 && team.display_name != null;\n    }).sort((a, b) => {\n        return compareTeamsByDisplayName(locale, a, b);\n    });\n}\n","module.exports = __webpack_public_path__ + \"files/002bcefbc1ddd0bbe72d15a7873f7a78.png\";","// Copyright (c) 2015-present Mattermost, Inc. All Rights Reserved.\n// See LICENSE.txt for license information.\n\nimport PropTypes from 'prop-types';\nimport React from 'react';\n\nexport default class MenuGroup extends React.PureComponent {\n    static propTypes = {\n        divider: PropTypes.node,\n        children: PropTypes.node,\n    };\n\n    render() {\n        const {children} = this.props;\n\n        const divider = this.props.divider || <li className='MenuGroup menu-divider'/>;\n\n        return (\n            <React.Fragment>\n                {divider}\n                {children}\n            </React.Fragment>\n        );\n    }\n}\n","// Copyright (c) 2015-present Mattermost, Inc. All Rights Reserved.\n// See LICENSE.txt for license information.\n\nimport React from 'react';\nimport {FormattedMessage} from 'react-intl';\n\nexport default class MenuIcon extends React.PureComponent {\n    render() {\n        return (\n            <span {...this.props}>\n                <FormattedMessage\n                    id='generic_icons.menu'\n                    defaultMessage='Menu Icon'\n                >\n                    {(title) => (\n                        <svg\n                            width='16px'\n                            height='10px'\n                            viewBox='0 0 16 10'\n                            version='1.1'\n                            role='icon'\n                            title={title}\n                        >\n                            <g\n                                stroke='none'\n                                strokeWidth='1'\n                                fill='inherit'\n                                fillRule='evenodd'\n                            >\n                                <g\n                                    transform='translate(-188.000000, -38.000000)'\n                                    fillRule='nonzero'\n                                    fill='inherit'\n                                >\n                                    <g>\n                                        <g>\n                                            <g transform='translate(188.000000, 38.000000)'>\n                                                <path d='M15.5,0 C15.776,0 16,0.224 16,0.5 L16,1.5 C16,1.776 15.776,2 15.5,2 L0.5,2 C0.224,2 0,1.776 0,1.5 L0,0.5 C0,0.224 0.224,0 0.5,0 L15.5,0 Z M15.5,4 C15.776,4 16,4.224 16,4.5 L16,5.5 C16,5.776 15.776,6 15.5,6 L0.5,6 C0.224,6 0,5.776 0,5.5 L0,4.5 C0,4.224 0.224,4 0.5,4 L15.5,4 Z M15.5,8 C15.776,8 16,8.224 16,8.5 L16,9.5 C16,9.776 15.776,10 15.5,10 L0.5,10 C0.224,10 0,9.776 0,9.5 L0,8.5 C0,8.224 0.224,8 0.5,8 L15.5,8 Z'/>\n                                            </g>\n                                        </g>\n                                    </g>\n                                </g>\n                            </g>\n                        </svg>\n                    )}\n                </FormattedMessage>\n            </span>\n        );\n    }\n}\n","// Copyright (c) 2015-present Mattermost, Inc. All Rights Reserved.\n// See LICENSE.txt for license information.\n\nimport React from 'react';\nimport PropTypes from 'prop-types';\nimport {FormattedMessage} from 'react-intl';\n\nexport default class LatexBlock extends React.Component {\n    static propTypes = {\n        content: PropTypes.string.isRequired,\n    }\n\n    constructor(props) {\n        super(props);\n\n        this.state = {\n            katex: null,\n        };\n    }\n\n    componentDidMount() {\n        import('katex').then((katex) => {\n            this.setState({katex});\n        });\n    }\n\n    render() {\n        if (this.state.katex == null) {\n            return (\n                <div\n                    className='post-body--code tex'\n                >\n                    {this.props.content}\n                </div>\n            );\n        }\n\n        try {\n            const html = this.state.katex.renderToString(this.props.content, {throwOnError: false, displayMode: true});\n\n            return (\n                <div\n                    className='post-body--code tex'\n                    dangerouslySetInnerHTML={{__html: html}}\n                />\n            );\n        } catch (e) {\n            return (\n                <div\n                    className='post-body--code tex'\n                >\n                    <FormattedMessage\n                        id='katex.error'\n                        defaultMessage=\"Couldn't compile your Latex code. Please review the syntax and try again.\"\n                    />\n                </div>\n            );\n        }\n    }\n}\n","// Copyright (c) 2015-present Mattermost, Inc. All Rights Reserved.\n// See LICENSE.txt for license information.\n\nimport PropTypes from 'prop-types';\nimport React from 'react';\n\nimport ExternalImage from 'components/external_image';\nimport SizeAwareImage from 'components/size_aware_image';\n\nexport default function MarkdownImage({imageMetadata, src, ...props}) {\n    return (\n        <ExternalImage\n            src={src}\n            imageMetadata={imageMetadata}\n        >\n            {(safeSrc) => {\n                if (!safeSrc) {\n                    return (\n                        <a\n                            className='theme markdown__link'\n                            href={src}\n                            rel='noopener noreferrer'\n                            target='_blank'\n                            title={props.title}\n                        >\n                            {props.alt}\n                        </a>\n                    );\n                }\n\n                return (\n                    <SizeAwareImage\n                        {...props}\n                        src={safeSrc}\n                        dimensions={imageMetadata}\n                    />\n                );\n            }}\n        </ExternalImage>\n    );\n}\n\nMarkdownImage.propTypes = {\n    alt: PropTypes.string,\n    imageMetadata: PropTypes.object,\n    src: PropTypes.string.isRequired,\n    title: PropTypes.string,\n};\n","// Copyright (c) 2015-present Mattermost, Inc. All Rights Reserved.\n// See LICENSE.txt for license information.\n\nimport React from 'react';\nimport PropTypes from 'prop-types';\n\nexport default class PostEmoji extends React.PureComponent {\n    static propTypes = {\n\n        /*\n         * Emoji name.\n         */\n        name: PropTypes.string.isRequired,\n\n        /*\n         * Emoji image URL.\n         */\n        imageUrl: PropTypes.string.isRequired,\n    };\n\n    render() {\n        const emojiText = ':' + this.props.name + ':';\n\n        if (!this.props.imageUrl) {\n            return emojiText;\n        }\n\n        return (\n            <span\n                alt={emojiText}\n                className='emoticon'\n                title={emojiText}\n                style={{backgroundImage: 'url(' + this.props.imageUrl + ')'}}\n            />\n        );\n    }\n}\n","// Copyright (c) 2015-present Mattermost, Inc. All Rights Reserved.\n// See LICENSE.txt for license information.\n\nimport {connect} from 'react-redux';\n\nimport {getEmojiImageUrl} from 'mattermost-redux/utils/emoji_utils';\n\nimport {getEmojiMap} from 'selectors/emojis';\n\nimport PostEmoji from './post_emoji.jsx';\n\nfunction mapStateToProps(state, ownProps) {\n    const emojiMap = getEmojiMap(state);\n    const emoji = emojiMap.get(ownProps.name);\n\n    return {\n        imageUrl: emoji ? getEmojiImageUrl(emoji) : '',\n    };\n}\n\nexport default connect(mapStateToProps)(PostEmoji);\n","// Copyright (c) 2015-present Mattermost, Inc. All Rights Reserved.\n// See LICENSE.txt for license information.\n\nimport React from 'react';\nimport {Parser, ProcessNodeDefinitions} from 'html-to-react';\n\nimport AtMention from 'components/at_mention';\nimport LatexBlock from 'components/latex_block';\nimport LinkTooltip from 'components/link_tooltip/link_tooltip';\nimport MarkdownImage from 'components/markdown_image';\nimport PostEmoji from 'components/post_emoji';\n\n/*\n * Converts HTML to React components using html-to-react.\n * The following options can be specified:\n * - mentions - If specified, mentions are replaced with the AtMention component. Defaults to true.\n * - emoji - If specified, emoji text is replaced with the PostEmoji component. Defaults to true.\n * - images - If specified, markdown images are replaced with the image component. Defaults to true.\n * - imageProps - If specified, any extra props that should be passed into the image component.\n * - latex - If specified, latex is replaced with the LatexBlock component. Defaults to true.\n * - imagesMetadata - the dimensions of the image as retrieved from post.metadata.images.\n * - hasPluginTooltips - If specified, the LinkTooltip component is placed inside links. Defaults to false.\n */\nexport function messageHtmlToComponent(html, isRHS, options = {}) {\n    if (!html) {\n        return null;\n    }\n\n    const parser = new Parser();\n    const processNodeDefinitions = new ProcessNodeDefinitions(React);\n\n    function isValidNode() {\n        return true;\n    }\n\n    const processingInstructions = [\n\n        // Workaround to fix MM-14931\n        {\n            replaceChildren: false,\n            shouldProcessNode: (node) => node.type === 'tag' && node.name === 'input' && node.attribs.type === 'checkbox',\n            processNode: (node) => {\n                const attribs = node.attribs || {};\n                node.attribs.checked = Boolean(attribs.checked);\n\n                return React.createElement('input', {...node.attribs});\n            },\n        },\n    ];\n\n    if (options.hasPluginTooltips) {\n        const hrefAttrib = 'href';\n        processingInstructions.push({\n            replaceChildren: true,\n            shouldProcessNode: (node) => node.type === 'tag' && node.name === 'a' && node.attribs[hrefAttrib],\n            processNode: (node, children) => {\n                return (\n                    <LinkTooltip\n                        href={node.attribs[hrefAttrib]}\n                        title={children[0]}\n                    />\n                );\n            },\n        });\n    }\n    if (!('mentions' in options) || options.mentions) {\n        const mentionAttrib = 'data-mention';\n        processingInstructions.push({\n            replaceChildren: true,\n            shouldProcessNode: (node) => node.attribs && node.attribs[mentionAttrib],\n            processNode: (node, children) => {\n                const mentionName = node.attribs[mentionAttrib];\n                const callAtMention = (\n                    <AtMention\n                        mentionName={mentionName}\n                        isRHS={isRHS}\n                        hasMention={true}\n                    >\n                        {children}\n                    </AtMention>\n                );\n                return callAtMention;\n            },\n        });\n    }\n\n    if (!('emoji' in options) || options.emoji) {\n        const emojiAttrib = 'data-emoticon';\n        processingInstructions.push({\n            replaceChildren: true,\n            shouldProcessNode: (node) => node.attribs && node.attribs[emojiAttrib],\n            processNode: (node) => {\n                const emojiName = node.attribs[emojiAttrib];\n\n                return <PostEmoji name={emojiName}/>;\n            },\n        });\n    }\n\n    if (!('images' in options) || options.images) {\n        processingInstructions.push({\n            shouldProcessNode: (node) => node.type === 'tag' && node.name === 'img',\n            processNode: (node) => {\n                const {\n                    class: className,\n                    ...attribs\n                } = node.attribs;\n\n                return (\n                    <MarkdownImage\n                        className={className}\n                        imageMetadata={options.imagesMetadata && options.imagesMetadata[attribs.src]}\n                        {...attribs}\n                        {...options.imageProps}\n                    />\n                );\n            },\n        });\n    }\n\n    if (!('latex' in options) || options.latex) {\n        processingInstructions.push({\n            shouldProcessNode: (node) => node.attribs && node.attribs['data-latex'],\n            processNode: (node) => {\n                return (\n                    <LatexBlock content={node.attribs['data-latex']}/>\n                );\n            },\n        });\n    }\n\n    processingInstructions.push({\n        shouldProcessNode: () => true,\n        processNode: processNodeDefinitions.processDefaultNode,\n    });\n\n    return parser.parseWithInstructions(html, isValidNode, processingInstructions);\n}\n\nexport default messageHtmlToComponent;\n","// Copyright (c) 2015-present Mattermost, Inc. All Rights Reserved.\n// See LICENSE.txt for license information.\n\nimport PropTypes from 'prop-types';\nimport React from 'react';\nimport {intlShape} from 'react-intl';\n\nexport default class ModalToggleButtonRedux extends React.Component {\n    static propTypes = {\n        accessibilityLabel: PropTypes.string,\n        children: PropTypes.node.isRequired,\n        modalId: PropTypes.string.isRequired,\n        dialogType: PropTypes.func.isRequired,\n        dialogProps: PropTypes.object,\n        onClick: PropTypes.func,\n        className: PropTypes.string,\n        actions: PropTypes.shape({\n            openModal: PropTypes.func.isRequired,\n        }).isRequired,\n    };\n\n    static defaultProps = {\n        dialogProps: {},\n        className: '',\n    };\n\n    static contextTypes = {\n        intl: intlShape.isRequired,\n    };\n\n    show(e) {\n        if (e) {\n            e.preventDefault();\n        }\n\n        const {modalId, dialogProps, dialogType} = this.props;\n\n        const modalData = {\n            modalId,\n            dialogProps,\n            dialogType,\n        };\n\n        this.props.actions.openModal(modalData);\n    }\n\n    render() {\n        const {children, onClick, ...props} = this.props;\n        const {formatMessage} = this.context.intl;\n        const ariaLabel = `${props.accessibilityLabel} ${formatMessage({id: 'accessibility.button.dialog', defaultMessage: 'Dialog'})}`;\n\n        // removing these three props since they are not valid props on buttons\n        delete props.modalId;\n        delete props.dialogType;\n        delete props.dialogProps;\n        delete props.accessibilityLabel;\n\n        // allow callers to provide an onClick which will be called before the modal is shown\n        let clickHandler = () => this.show();\n        if (onClick) {\n            clickHandler = (e) => {\n                onClick();\n\n                this.show(e);\n            };\n        }\n\n        return (\n            <button\n                {...props}\n                className={'style--none ' + props.className}\n                data-toggle='modal toggle'\n                aria-label={ariaLabel}\n                onClick={clickHandler}\n            >\n                {children}\n            </button>\n        );\n    }\n}\n\n","// Copyright (c) 2015-present Mattermost, Inc. All Rights Reserved.\n// See LICENSE.txt for license information.\n\nimport {connect} from 'react-redux';\nimport {bindActionCreators} from 'redux';\n\nimport {openModal} from 'actions/views/modals';\n\nimport ModalToggleButtonRedux from './toggle_modal_button_redux.jsx';\n\nfunction mapDispatchToProps(dispatch) {\n    return {\n        actions: bindActionCreators({\n            openModal,\n        }, dispatch),\n    };\n}\n\nexport default connect(null, mapDispatchToProps)(ModalToggleButtonRedux);\n","// Copyright (c) 2015-present Mattermost, Inc. All Rights Reserved.\n// See LICENSE.txt for license information.\n\nimport $ from 'jquery';\nimport React from 'react';\nimport {Modal} from 'react-bootstrap';\nimport ReactDOM from 'react-dom';\nimport {defineMessages, FormattedMessage, injectIntl, intlShape} from 'react-intl';\nimport PropTypes from 'prop-types';\n\nimport Constants from 'utils/constants.jsx';\nimport * as Utils from 'utils/utils.jsx';\nimport {t} from 'utils/i18n';\nimport ConfirmModal from '../../confirm_modal.jsx';\nimport {AsyncComponent} from 'components/async_load';\n\nimport loadUserSettings from 'bundle-loader?lazy!components/user_settings';\nimport loadSettingsSidebar from 'bundle-loader?lazy!../../settings_sidebar.jsx';\n\nconst holders = defineMessages({\n    general: {\n        id: t('user.settings.modal.general'),\n        defaultMessage: 'General',\n    },\n    security: {\n        id: t('user.settings.modal.security'),\n        defaultMessage: 'Security',\n    },\n    notifications: {\n        id: t('user.settings.modal.notifications'),\n        defaultMessage: 'Notifications',\n    },\n    display: {\n        id: t('user.settings.modal.display'),\n        defaultMessage: 'Display',\n    },\n    sidebar: {\n        id: t('user.settings.modal.sidebar'),\n        defaultMessage: 'Sidebar',\n    },\n    advanced: {\n        id: t('user.settings.modal.advanced'),\n        defaultMessage: 'Advanced',\n    },\n    checkEmail: {\n        id: 'user.settings.general.checkEmail',\n        defaultMessage: 'Check your email at {email} to verify the address. Cannot find the email?',\n    },\n    confirmTitle: {\n        id: t('user.settings.modal.confirmTitle'),\n        defaultMessage: 'Discard Changes?',\n    },\n    confirmMsg: {\n        id: t('user.settings.modal.confirmMsg'),\n        defaultMessage: 'You have unsaved changes, are you sure you want to discard them?',\n    },\n    confirmBtns: {\n        id: t('user.settings.modal.confirmBtns'),\n        defaultMessage: 'Yes, Discard',\n    },\n});\n\nclass UserSettingsModal extends React.Component {\n    static propTypes = {\n        currentUser: PropTypes.object.isRequired,\n        onHide: PropTypes.func.isRequired,\n        intl: intlShape.isRequired,\n        actions: PropTypes.shape({\n            sendVerificationEmail: PropTypes.func.isRequred,\n        }).isRequired,\n    }\n\n    constructor(props) {\n        super(props);\n\n        this.state = {\n            active_tab: 'general',\n            active_section: '',\n            showConfirmModal: false,\n            enforceFocus: true,\n            show: true,\n        };\n\n        this.requireConfirm = false;\n\n        // Used when settings want to override the default confirm modal with their own\n        // If set by a child, it will be called in place of showing the regular confirm\n        // modal. It will be passed a function to call on modal confirm\n        this.customConfirmAction = null;\n\n        this.modalBodyRef = React.createRef();\n    }\n\n    handleResend = (email) => {\n        this.setState({resendStatus: 'sending'});\n\n        this.props.actions.sendVerificationEmail(email).then(({data, error: err}) => {\n            if (data) {\n                this.setState({resendStatus: 'success'});\n            } else if (err) {\n                this.setState({resendStatus: 'failure'});\n            }\n        });\n    }\n\n    componentDidMount() {\n        document.addEventListener('keydown', this.handleKeyDown);\n    }\n\n    componentWillUnmount() {\n        document.removeEventListener('keydown', this.handleKeyDown);\n    }\n\n    componentDidUpdate(prevProps, prevState) {\n        if (!Utils.isMobile()) {\n            $('.settings-content .minimize-settings').perfectScrollbar('update');\n        }\n\n        if (this.state.active_tab !== prevState.active_tab) {\n            $(ReactDOM.findDOMNode(this.modalBodyRef.current)).scrollTop(0);\n        }\n    }\n\n    handleKeyDown = (e) => {\n        if (Utils.cmdOrCtrlPressed(e) && e.shiftKey && Utils.isKeyPressed(e, Constants.KeyCodes.A)) {\n            this.handleHide();\n        }\n    }\n\n    // Called when the close button is pressed on the main modal\n    handleHide = () => {\n        if (this.requireConfirm) {\n            this.showConfirmModal(() => this.handleHide());\n            return;\n        }\n\n        this.setState({\n            show: false,\n        });\n    }\n\n    // called after the dialog is fully hidden and faded out\n    handleHidden = () => {\n        this.setState({\n            active_tab: 'general',\n            active_section: '',\n        });\n        this.props.onHide();\n    }\n\n    // Called to hide the settings pane when on mobile\n    handleCollapse = () => {\n        $(ReactDOM.findDOMNode(this.modalBodyRef.current)).closest('.modal-dialog').removeClass('display--content');\n\n        this.setState({\n            active_tab: '',\n            active_section: '',\n        });\n    }\n\n    handleConfirm = () => {\n        this.setState({\n            showConfirmModal: false,\n            enforceFocus: true,\n        });\n\n        this.requireConfirm = false;\n        this.customConfirmAction = null;\n\n        if (this.afterConfirm) {\n            this.afterConfirm();\n            this.afterConfirm = null;\n        }\n    }\n\n    handleCancelConfirmation = () => {\n        this.setState({\n            showConfirmModal: false,\n            enforceFocus: true,\n        });\n\n        this.afterConfirm = null;\n    }\n\n    showConfirmModal = (afterConfirm) => {\n        if (afterConfirm) {\n            this.afterConfirm = afterConfirm;\n        }\n\n        if (this.customConfirmAction) {\n            this.customConfirmAction(this.handleConfirm);\n            return;\n        }\n\n        this.setState({\n            showConfirmModal: true,\n            enforceFocus: false,\n        });\n    }\n\n    // Called by settings tabs when their close button is pressed\n    closeModal = () => {\n        if (this.requireConfirm) {\n            this.showConfirmModal(this.closeModal);\n        } else {\n            this.handleHide();\n        }\n    }\n\n    // Called by settings tabs when their back button is pressed\n    collapseModal = () => {\n        if (this.requireConfirm) {\n            this.showConfirmModal(this.collapseModal);\n        } else {\n            this.handleCollapse();\n        }\n    }\n\n    updateTab = (tab, skipConfirm) => {\n        if (!skipConfirm && this.requireConfirm) {\n            this.showConfirmModal(() => this.updateTab(tab, true));\n        } else {\n            this.setState({\n                active_tab: tab,\n                active_section: '',\n            });\n        }\n    }\n\n    updateSection = (section, skipConfirm) => {\n        if (!skipConfirm && this.requireConfirm) {\n            this.showConfirmModal(() => this.updateSection(section, true));\n        } else {\n            this.setState({\n                active_section: section,\n            });\n        }\n    }\n\n    render() {\n        const {formatMessage} = this.props.intl;\n        if (this.props.currentUser == null) {\n            return (<div/>);\n        }\n        var tabs = [];\n\n        tabs.push({name: 'general', uiName: formatMessage(holders.general), icon: 'icon fa fa-gear', iconTitle: Utils.localizeMessage('user.settings.general.icon', 'General Settings Icon')});\n        tabs.push({name: 'security', uiName: formatMessage(holders.security), icon: 'icon fa fa-lock', iconTitle: Utils.localizeMessage('user.settings.security.icon', 'Security Settings Icon')});\n        tabs.push({name: 'notifications', uiName: formatMessage(holders.notifications), icon: 'icon fa fa-exclamation-circle', iconTitle: Utils.localizeMessage('user.settings.notifications.icon', 'Notification Settings Icon')});\n        tabs.push({name: 'display', uiName: formatMessage(holders.display), icon: 'icon fa fa-eye', iconTitle: Utils.localizeMessage('user.settings.display.icon', 'Display Settings Icon')});\n        tabs.push({name: 'sidebar', uiName: formatMessage(holders.sidebar), icon: 'icon fa fa-columns', iconTitle: Utils.localizeMessage('user.settings.sidebar.icon', 'Sidebar Settings Icon')});\n        tabs.push({name: 'advanced', uiName: formatMessage(holders.advanced), icon: 'icon fa fa-list-alt', iconTitle: Utils.localizeMessage('user.settings.advance.icon', 'Advanced Settings Icon')});\n\n        return (\n            <Modal\n                id='accountSettingsModal'\n                dialogClassName='a11y__modal settings-modal'\n                show={this.state.show}\n                onHide={this.handleHide}\n                onExited={this.handleHidden}\n                enforceFocus={this.state.enforceFocus}\n                role='dialog'\n                aria-labelledby='accountSettingsModalLabel'\n            >\n                <Modal.Header\n                    id='accountSettingsHeader'\n                    closeButton={true}\n                >\n                    <Modal.Title\n                        componentClass='h1'\n                        id='accountSettingsModalLabel'\n                    >\n                        <FormattedMessage\n                            id='user.settings.modal.title'\n                            defaultMessage='Account Settings'\n                        />\n                    </Modal.Title>\n                </Modal.Header>\n                <Modal.Body ref={this.modalBodyRef}>\n                    <div className='settings-table'>\n                        <div className='settings-links'>\n                            <AsyncComponent\n                                doLoad={loadSettingsSidebar}\n                                tabs={tabs}\n                                activeTab={this.state.active_tab}\n                                updateTab={this.updateTab}\n                            />\n                        </div>\n                        <div className='settings-content minimize-settings'>\n                            <AsyncComponent\n                                doLoad={loadUserSettings}\n                                activeTab={this.state.active_tab}\n                                activeSection={this.state.active_section}\n                                updateSection={this.updateSection}\n                                updateTab={this.updateTab}\n                                closeModal={this.closeModal}\n                                collapseModal={this.collapseModal}\n                                setEnforceFocus={(enforceFocus) => this.setState({enforceFocus})}\n                                setRequireConfirm={\n                                    (requireConfirm, customConfirmAction) => {\n                                        this.requireConfirm = requireConfirm;\n                                        this.customConfirmAction = customConfirmAction;\n                                    }\n                                }\n                            />\n                        </div>\n                    </div>\n                </Modal.Body>\n                <ConfirmModal\n                    title={formatMessage(holders.confirmTitle)}\n                    message={formatMessage(holders.confirmMsg)}\n                    confirmButtonText={formatMessage(holders.confirmBtns)}\n                    show={this.state.showConfirmModal}\n                    onConfirm={this.handleConfirm}\n                    onCancel={this.handleCancelConfirmation}\n                />\n            </Modal>\n        );\n    }\n}\n\nexport default injectIntl(UserSettingsModal);\n","// Copyright (c) 2015-present Mattermost, Inc. All Rights Reserved.\n// See LICENSE.txt for license information.\n\nimport {connect} from 'react-redux';\nimport {bindActionCreators} from 'redux';\nimport {sendVerificationEmail} from 'mattermost-redux/actions/users';\nimport {getConfig} from 'mattermost-redux/selectors/entities/general';\nimport {getCurrentUser} from 'mattermost-redux/selectors/entities/users';\n\nimport UserSettingsModal from './user_settings_modal.jsx';\n\nfunction mapStateToProps(state) {\n    const config = getConfig(state);\n\n    const closeUnusedDirectMessages = config.CloseUnusedDirectMessages === 'true';\n    const experimentalChannelOrganization = config.ExperimentalChannelOrganization === 'true';\n    const sendEmailNotifications = config.SendEmailNotifications === 'true';\n    const requireEmailVerification = config.RequireEmailVerification === 'true';\n\n    return {\n        currentUser: getCurrentUser(state),\n        closeUnusedDirectMessages,\n        experimentalChannelOrganization,\n        sendEmailNotifications,\n        requireEmailVerification,\n    };\n}\n\nfunction mapDispatchToProps(dispatch) {\n    return {\n        actions: bindActionCreators({\n            sendVerificationEmail,\n        }, dispatch),\n    };\n}\n\nexport default connect(mapStateToProps, mapDispatchToProps)(UserSettingsModal);\n","// Copyright (c) 2015-present Mattermost, Inc. All Rights Reserved.\n// See LICENSE.txt for license information.\n\nimport PropTypes from 'prop-types';\nimport React from 'react';\nimport {Modal} from 'react-bootstrap';\nimport {FormattedMessage} from 'react-intl';\n\nimport {Groups} from 'mattermost-redux/constants';\n\nimport Constants from 'utils/constants.jsx';\nimport {localizeMessage} from 'utils/utils.jsx';\n\nimport MultiSelect from 'components/multiselect/multiselect.jsx';\nimport groupsAvatar from 'images/groups-avatar.png';\nimport AddIcon from 'components/icon/add_icon';\n\nconst GROUPS_PER_PAGE = 50;\nconst MAX_SELECTABLE_VALUES = 10;\n\nexport default class AddGroupsToTeamModal extends React.Component {\n    static propTypes = {\n        currentTeamName: PropTypes.string.isRequired,\n        currentTeamId: PropTypes.string.isRequired,\n        searchTerm: PropTypes.string.isRequired,\n        groups: PropTypes.array.isRequired,\n\n        // used in tandem with 'skipCommit' to allow using this component without performing actual linking\n        excludeGroups: PropTypes.arrayOf(PropTypes.object),\n        includeGroups: PropTypes.arrayOf(PropTypes.object),\n        onHide: PropTypes.func,\n        skipCommit: PropTypes.bool,\n        onAddCallback: PropTypes.func,\n        actions: PropTypes.shape({\n            getGroupsNotAssociatedToTeam: PropTypes.func.isRequired,\n            setModalSearchTerm: PropTypes.func.isRequired,\n            linkGroupSyncable: PropTypes.func.isRequired,\n            getAllGroupsAssociatedToTeam: PropTypes.func.isRequired,\n        }).isRequired,\n    }\n\n    constructor(props) {\n        super(props);\n\n        this.searchTimeoutId = 0;\n\n        this.state = {\n            values: [],\n            show: true,\n            search: false,\n            saving: false,\n            addError: null,\n            loadingGroups: true,\n        };\n    }\n\n    componentDidMount() {\n        Promise.all([\n            this.props.actions.getGroupsNotAssociatedToTeam(this.props.currentTeamId, '', 0, GROUPS_PER_PAGE + 1),\n            this.props.actions.getAllGroupsAssociatedToTeam(this.props.currentTeamId),\n        ]).then(() => {\n            this.setGroupsLoadingState(false);\n        });\n    }\n\n    UNSAFE_componentWillReceiveProps(nextProps) { // eslint-disable-line camelcase\n        if (this.props.searchTerm !== nextProps.searchTerm) {\n            clearTimeout(this.searchTimeoutId);\n\n            const searchTerm = nextProps.searchTerm;\n            if (searchTerm === '') {\n                return;\n            }\n\n            this.searchTimeoutId = setTimeout(\n                async () => {\n                    this.setGroupsLoadingState(true);\n                    await this.props.actions.getGroupsNotAssociatedToTeam(this.props.currentTeamId, searchTerm);\n                    this.setGroupsLoadingState(false);\n                },\n                Constants.SEARCH_TIMEOUT_MILLISECONDS\n            );\n        }\n    }\n\n    handleHide = () => {\n        this.props.actions.setModalSearchTerm('');\n        this.setState({show: false});\n    }\n\n    handleExit = () => {\n        if (this.props.onHide) {\n            this.props.onHide();\n        }\n    }\n\n    handleResponse = (err) => {\n        let addError = null;\n        if (err && err.message) {\n            addError = err.message;\n        }\n\n        this.setState({\n            saving: false,\n            addError,\n        });\n    }\n\n    handleSubmit = async (e) => {\n        if (e) {\n            e.preventDefault();\n        }\n\n        const groupIDs = this.state.values.map((v) => v.id);\n        if (groupIDs.length === 0) {\n            return;\n        }\n        if (this.props.skipCommit) {\n            if (this.props.onAddCallback) {\n                this.props.onAddCallback(groupIDs);\n            }\n            this.handleHide();\n            return;\n        }\n\n        this.setState({saving: true});\n\n        groupIDs.forEach(async (groupID) => {\n            const {error} = await this.props.actions.linkGroupSyncable(groupID, this.props.currentTeamId, Groups.SYNCABLE_TYPE_TEAM, {auto_add: true});\n            this.handleResponse(error);\n            if (!error) {\n                this.handleHide();\n            }\n        });\n    }\n\n    addValue = (value) => {\n        const values = Object.assign([], this.state.values);\n        const userIds = values.map((v) => v.id);\n        if (value && value.id && userIds.indexOf(value.id) === -1) {\n            values.push(value);\n        }\n\n        this.setState({values});\n    }\n\n    setGroupsLoadingState = (loadingState) => {\n        this.setState({\n            loadingGroups: loadingState,\n        });\n    }\n\n    handlePageChange = (page, prevPage) => {\n        if (page > prevPage) {\n            this.setGroupsLoadingState(true);\n            this.props.actions.getGroupsNotAssociatedToTeam(this.props.currentTeamId, this.props.searchTerm, page, GROUPS_PER_PAGE + 1).then(() => {\n                this.setGroupsLoadingState(false);\n            });\n        }\n    }\n\n    handleDelete = (values) => {\n        this.setState({values});\n    }\n\n    search = (term) => {\n        this.props.actions.setModalSearchTerm(term);\n    }\n\n    renderOption(option, isSelected, onAdd) {\n        const rowSelected = isSelected ? 'more-modal__row--selected' : '';\n\n        return (\n            <div\n                key={option.id}\n                ref={isSelected ? 'selected' : option.id}\n                className={'more-modal__row clickable ' + rowSelected}\n                onClick={() => onAdd(option)}\n            >\n                <img\n                    className='more-modal__image'\n                    src={groupsAvatar}\n                    alt='group picture'\n                    width='32'\n                    height='32'\n                />\n                <div\n                    className='more-modal__details'\n                >\n                    <div className='more-modal__name'>\n                        {option.display_name}&nbsp;{'-'}&nbsp;<span className='more-modal__name_sub'>\n                            <FormattedMessage\n                                id='numMembers'\n                                defaultMessage='{num, number} {num, plural, one {member} other {members}}'\n                                values={{\n                                    num: option.member_count,\n                                }}\n                            />\n                        </span>\n                    </div>\n                </div>\n                <div className='more-modal__actions'>\n                    <div className='more-modal__actions--round'>\n                        <AddIcon/>\n                    </div>\n                </div>\n            </div>\n        );\n    }\n\n    renderValue(props) {\n        return props.data.display_name;\n    }\n\n    render() {\n        const numRemainingText = (\n            <div id='numGroupsRemaining'>\n                <FormattedMessage\n                    id='multiselect.numGroupsRemaining'\n                    defaultMessage='Use ↑↓ to browse, ↵ to select. You can add {num, number} more {num, plural, one {group} other {groups}}. '\n                    values={{\n                        num: MAX_SELECTABLE_VALUES - this.state.values.length,\n                    }}\n                />\n            </div>\n        );\n\n        const buttonSubmitText = localizeMessage('multiselect.add', 'Add');\n        const buttonSubmitLoadingText = localizeMessage('multiselect.adding', 'Adding...');\n\n        let addError = null;\n        if (this.state.addError) {\n            addError = (<div className='has-error col-sm-12'><label className='control-label font-weight--normal'>{this.state.addError}</label></div>);\n        }\n\n        let groupsToShow = this.props.groups;\n        if (this.props.excludeGroups) {\n            const hasGroup = (og) => !this.props.excludeGroups.find((g) => g.id === og.id);\n            groupsToShow = groupsToShow.filter(hasGroup);\n        }\n        if (this.props.includeGroups) {\n            const hasGroup = (og) => this.props.includeGroups.find((g) => g.id === og.id);\n            groupsToShow = [...groupsToShow, ...this.props.includeGroups.filter(hasGroup)];\n        }\n\n        return (\n            <Modal\n                id='addGroupsToTeamModal'\n                dialogClassName={'a11y__modal more-modal more-direct-channels'}\n                show={this.state.show}\n                onHide={this.handleHide}\n                onExited={this.handleExit}\n            >\n                <Modal.Header closeButton={true}>\n                    <Modal.Title componentClass='h1'>\n                        <FormattedMessage\n                            id='add_groups_to_team.title'\n                            defaultMessage='Add New Groups To {teamName} Team'\n                            values={{\n                                teamName: (\n                                    <strong>{this.props.currentTeamName}</strong>\n                                ),\n                            }}\n                        />\n                    </Modal.Title>\n                </Modal.Header>\n                <Modal.Body>\n                    {addError}\n                    <MultiSelect\n                        key='addGroupsToTeamKey'\n                        options={groupsToShow}\n                        optionRenderer={this.renderOption}\n                        values={this.state.values}\n                        valueRenderer={this.renderValue}\n                        perPage={GROUPS_PER_PAGE}\n                        handlePageChange={this.handlePageChange}\n                        handleInput={this.search}\n                        handleDelete={this.handleDelete}\n                        handleAdd={this.addValue}\n                        handleSubmit={this.handleSubmit}\n                        maxValues={MAX_SELECTABLE_VALUES}\n                        numRemainingText={numRemainingText}\n                        buttonSubmitText={buttonSubmitText}\n                        buttonSubmitLoadingText={buttonSubmitLoadingText}\n                        saving={this.state.saving}\n                        loading={this.state.loadingGroups}\n                        placeholderText={localizeMessage('multiselect.addGroupsPlaceholder', 'Search and add groups')}\n                    />\n                </Modal.Body>\n            </Modal>\n        );\n    }\n}\n","// Copyright (c) 2015-present Mattermost, Inc. All Rights Reserved.\n// See LICENSE.txt for license information.\n\nimport {connect} from 'react-redux';\nimport {bindActionCreators} from 'redux';\nimport {getGroupsNotAssociatedToTeam, linkGroupSyncable, getAllGroupsAssociatedToTeam} from 'mattermost-redux/actions/groups';\nimport {getGroupsNotAssociatedToTeam as selectGroupsNotAssociatedToTeam} from 'mattermost-redux/selectors/entities/groups';\nimport {getCurrentTeam} from 'mattermost-redux/selectors/entities/teams';\n\nimport {setModalSearchTerm} from 'actions/views/search';\n\nimport AddGroupsToTeamModal from './add_groups_to_team_modal';\n\nfunction mapStateToProps(state, ownProps) {\n    const searchTerm = state.views.search.modalSearch;\n\n    const team = ownProps.team || getCurrentTeam(state) || {};\n\n    let groups = selectGroupsNotAssociatedToTeam(state, team.id);\n    if (searchTerm) {\n        const regex = RegExp(searchTerm, 'i');\n        groups = groups.filter((group) => regex.test(group.display_name) || regex.test(group.name));\n    }\n\n    return {\n        currentTeamName: team.display_name,\n        currentTeamId: team.id,\n        skipCommit: ownProps.skipCommit,\n        onAddCallback: ownProps.onAddCallback,\n        excludeGroups: ownProps.excludeGroups,\n        searchTerm,\n        groups,\n    };\n}\n\nfunction mapDispatchToProps(dispatch) {\n    return {\n        actions: bindActionCreators({\n            getGroupsNotAssociatedToTeam,\n            setModalSearchTerm,\n            linkGroupSyncable,\n            getAllGroupsAssociatedToTeam,\n        }, dispatch),\n    };\n}\n\nexport default connect(mapStateToProps, mapDispatchToProps)(AddGroupsToTeamModal);\n","// Copyright (c) 2015-present Mattermost, Inc. All Rights Reserved.\n// See LICENSE.txt for license information.\n\nimport PropTypes from 'prop-types';\nimport React from 'react';\nimport {Modal} from 'react-bootstrap';\nimport {FormattedMessage} from 'react-intl';\n\nimport {Groups} from 'mattermost-redux/constants';\n\nimport Constants from 'utils/constants.jsx';\nimport {localizeMessage} from 'utils/utils.jsx';\n\nimport MultiSelect from 'components/multiselect/multiselect.jsx';\nimport groupsAvatar from 'images/groups-avatar.png';\nimport AddIcon from 'components/icon/add_icon';\n\nconst GROUPS_PER_PAGE = 50;\nconst MAX_SELECTABLE_VALUES = 10;\n\nexport default class AddGroupsToChannelModal extends React.Component {\n    static propTypes = {\n        currentChannelName: PropTypes.string.isRequired,\n        currentChannelId: PropTypes.string.isRequired,\n        searchTerm: PropTypes.string.isRequired,\n        groups: PropTypes.array.isRequired,\n\n        // used in tandem with 'skipCommit' to allow using this component without performing actual linking\n        excludeGroups: PropTypes.arrayOf(PropTypes.object),\n        includeGroups: PropTypes.arrayOf(PropTypes.object),\n        onHide: PropTypes.func,\n        skipCommit: PropTypes.bool,\n        onAddCallback: PropTypes.func,\n        actions: PropTypes.shape({\n            getGroupsNotAssociatedToChannel: PropTypes.func.isRequired,\n            setModalSearchTerm: PropTypes.func.isRequired,\n            linkGroupSyncable: PropTypes.func.isRequired,\n            getAllGroupsAssociatedToChannel: PropTypes.func.isRequired,\n        }).isRequired,\n    }\n\n    constructor(props) {\n        super(props);\n\n        this.searchTimeoutId = 0;\n\n        this.state = {\n            values: [],\n            show: true,\n            search: false,\n            saving: false,\n            addError: null,\n            loadingGroups: true,\n        };\n    }\n\n    componentDidMount() {\n        Promise.all([\n            this.props.actions.getGroupsNotAssociatedToChannel(this.props.currentChannelId, '', 0, GROUPS_PER_PAGE + 1),\n            this.props.actions.getAllGroupsAssociatedToChannel(this.props.currentChannelId),\n        ]).then(() => {\n            this.setGroupsLoadingState(false);\n        });\n    }\n\n    UNSAFE_componentWillReceiveProps(nextProps) { // eslint-disable-line camelcase\n        if (this.props.searchTerm !== nextProps.searchTerm) {\n            clearTimeout(this.searchTimeoutId);\n\n            const searchTerm = nextProps.searchTerm;\n            if (searchTerm === '') {\n                return;\n            }\n\n            this.searchTimeoutId = setTimeout(\n                async () => {\n                    this.setGroupsLoadingState(true);\n                    await this.props.actions.getGroupsNotAssociatedToChannel(this.props.currentChannelId, searchTerm);\n                    this.setGroupsLoadingState(false);\n                },\n                Constants.SEARCH_TIMEOUT_MILLISECONDS\n            );\n        }\n    }\n\n    handleHide = () => {\n        this.props.actions.setModalSearchTerm('');\n        this.setState({show: false});\n    }\n\n    handleExit = () => {\n        if (this.props.onHide) {\n            this.props.onHide();\n        }\n    }\n\n    handleResponse = (err) => {\n        let addError = null;\n        if (err && err.message) {\n            addError = err.message;\n        }\n\n        this.setState({\n            saving: false,\n            addError,\n        });\n    }\n\n    handleSubmit = async (e) => {\n        if (e) {\n            e.preventDefault();\n        }\n\n        const groupIDs = this.state.values.map((v) => v.id);\n        if (groupIDs.length === 0) {\n            return;\n        }\n\n        if (this.props.skipCommit) {\n            if (this.props.onAddCallback) {\n                this.props.onAddCallback(groupIDs);\n            }\n            this.handleHide();\n            return;\n        }\n\n        this.setState({saving: true});\n\n        groupIDs.forEach(async (groupID) => {\n            const {error} = await this.props.actions.linkGroupSyncable(groupID, this.props.currentChannelId, Groups.SYNCABLE_TYPE_CHANNEL, {auto_add: true});\n            this.handleResponse(error);\n            if (!error) {\n                this.handleHide();\n            }\n        });\n    }\n\n    addValue = (value) => {\n        const values = Object.assign([], this.state.values);\n        const userIds = values.map((v) => v.id);\n        if (value && value.id && userIds.indexOf(value.id) === -1) {\n            values.push(value);\n        }\n\n        this.setState({values});\n    }\n\n    setGroupsLoadingState = (loadingState) => {\n        this.setState({\n            loadingGroups: loadingState,\n        });\n    }\n\n    handlePageChange = (page, prevPage) => {\n        if (page > prevPage) {\n            this.setGroupsLoadingState(true);\n            this.props.actions.getGroupsNotAssociatedToChannel(this.props.currentChannelId, this.props.searchTerm, page, GROUPS_PER_PAGE + 1).then(() => {\n                this.setGroupsLoadingState(false);\n            });\n        }\n    }\n\n    handleDelete = (values) => {\n        this.setState({values});\n    }\n\n    search = (term) => {\n        this.props.actions.setModalSearchTerm(term);\n    }\n\n    renderOption(option, isSelected, onAdd) {\n        const rowSelected = isSelected ? 'more-modal__row--selected' : '';\n\n        return (\n            <div\n                key={option.id}\n                ref={isSelected ? 'selected' : option.id}\n                className={'more-modal__row clickable ' + rowSelected}\n                onClick={() => onAdd(option)}\n            >\n                <img\n                    className='more-modal__image'\n                    src={groupsAvatar}\n                    alt='group picture'\n                    width='32'\n                    height='32'\n                />\n                <div\n                    className='more-modal__details'\n                >\n                    <div className='more-modal__name'>\n                        {option.display_name}&nbsp;{'-'}&nbsp;<span className='more-modal__name_sub'>\n                            <FormattedMessage\n                                id='numMembers'\n                                defaultMessage='{num, number} {num, plural, one {member} other {members}}'\n                                values={{\n                                    num: option.member_count,\n                                }}\n                            />\n                        </span>\n                    </div>\n                </div>\n                <div className='more-modal__actions'>\n                    <div className='more-modal__actions--round'>\n                        <AddIcon/>\n                    </div>\n                </div>\n            </div>\n        );\n    }\n\n    renderValue(props) {\n        return props.data.display_name;\n    }\n\n    render() {\n        const numRemainingText = (\n            <div id='numGroupsRemaining'>\n                <FormattedMessage\n                    id='multiselect.numGroupsRemaining'\n                    defaultMessage='Use ↑↓ to browse, ↵ to select. You can add {num, number} more {num, plural, one {group} other {groups}}. '\n                    values={{\n                        num: MAX_SELECTABLE_VALUES - this.state.values.length,\n                    }}\n                />\n            </div>\n        );\n\n        const buttonSubmitText = localizeMessage('multiselect.add', 'Add');\n        const buttonSubmitLoadingText = localizeMessage('multiselect.adding', 'Adding...');\n\n        let addError = null;\n        if (this.state.addError) {\n            addError = (<div className='has-error col-sm-12'><label className='control-label font-weight--normal'>{this.state.addError}</label></div>);\n        }\n        let groupsToShow = this.props.groups;\n        if (this.props.excludeGroups) {\n            const hasGroup = (og) => !this.props.excludeGroups.find((g) => g.id === og.id);\n            groupsToShow = groupsToShow.filter(hasGroup);\n        }\n        if (this.props.includeGroups) {\n            const hasGroup = (og) => this.props.includeGroups.find((g) => g.id === og.id);\n            groupsToShow = [...groupsToShow, ...this.props.includeGroups.filter(hasGroup)];\n        }\n\n        return (\n            <Modal\n                id='addGroupsToChannelModal'\n                dialogClassName={'a11y__modal more-modal more-direct-channels'}\n                show={this.state.show}\n                onHide={this.handleHide}\n                onExited={this.handleExit}\n            >\n                <Modal.Header closeButton={true}>\n                    <Modal.Title>\n                        <FormattedMessage\n                            id='add_groups_to_channel.title'\n                            defaultMessage='Add New Groups To {channelName} Channel'\n                            values={{\n                                channelName: (\n                                    <strong>{this.props.currentChannelName}</strong>\n                                ),\n                            }}\n                        />\n                    </Modal.Title>\n                </Modal.Header>\n                <Modal.Body>\n                    {addError}\n                    <MultiSelect\n                        key='addGroupsToChannelKey'\n                        options={groupsToShow}\n                        optionRenderer={this.renderOption}\n                        values={this.state.values}\n                        valueRenderer={this.renderValue}\n                        perPage={GROUPS_PER_PAGE}\n                        handlePageChange={this.handlePageChange}\n                        handleInput={this.search}\n                        handleDelete={this.handleDelete}\n                        handleAdd={this.addValue}\n                        handleSubmit={this.handleSubmit}\n                        maxValues={MAX_SELECTABLE_VALUES}\n                        numRemainingText={numRemainingText}\n                        buttonSubmitText={buttonSubmitText}\n                        buttonSubmitLoadingText={buttonSubmitLoadingText}\n                        saving={this.state.saving}\n                        loading={this.state.loadingGroups}\n                        placeholderText={localizeMessage('multiselect.addGroupsPlaceholder', 'Search and add groups')}\n                    />\n                </Modal.Body>\n            </Modal>\n        );\n    }\n}\n","// Copyright (c) 2015-present Mattermost, Inc. All Rights Reserved.\n// See LICENSE.txt for license information.\n\nimport {connect} from 'react-redux';\nimport {bindActionCreators} from 'redux';\nimport {getGroupsNotAssociatedToChannel, linkGroupSyncable, getAllGroupsAssociatedToChannel} from 'mattermost-redux/actions/groups';\nimport {getGroupsNotAssociatedToChannel as selectGroupsNotAssociatedToChannel} from 'mattermost-redux/selectors/entities/groups';\nimport {getCurrentChannel} from 'mattermost-redux/selectors/entities/channels';\n\nimport {setModalSearchTerm} from 'actions/views/search';\n\nimport AddGroupsToChannelModal from './add_groups_to_channel_modal';\n\nfunction mapStateToProps(state, ownProps) {\n    const searchTerm = state.views.search.modalSearch;\n\n    const channel = ownProps.channel || getCurrentChannel(state) || {};\n\n    let groups = selectGroupsNotAssociatedToChannel(state, channel.id);\n    if (searchTerm) {\n        const regex = RegExp(searchTerm, 'i');\n        groups = groups.filter((group) => regex.test(group.display_name) || regex.test(group.name));\n    }\n\n    return {\n        currentChannelName: channel.display_name,\n        currentChannelId: channel.id,\n        skipCommit: ownProps.skipCommit,\n        onAddCallback: ownProps.onAddCallback,\n        excludeGroups: ownProps.excludeGroups,\n        searchTerm,\n        groups,\n    };\n}\n\nfunction mapDispatchToProps(dispatch) {\n    return {\n        actions: bindActionCreators({\n            getGroupsNotAssociatedToChannel,\n            setModalSearchTerm,\n            linkGroupSyncable,\n            getAllGroupsAssociatedToChannel,\n        }, dispatch),\n    };\n}\n\nexport default connect(mapStateToProps, mapDispatchToProps)(AddGroupsToChannelModal);\n","// Copyright (c) 2015-present Mattermost, Inc. All Rights Reserved.\n// See LICENSE.txt for license information.\n\nimport PropTypes from 'prop-types';\nimport React from 'react';\n\nimport * as Utils from 'utils/utils.jsx';\n\nexport default class FileInfoPreview extends React.PureComponent {\n    static propTypes = {\n        fileInfo: PropTypes.object.isRequired,\n        fileUrl: PropTypes.string.isRequired,\n        canDownloadFiles: PropTypes.bool.isRequired,\n    };\n\n    render() {\n        const fileInfo = this.props.fileInfo;\n        const fileUrl = this.props.fileUrl;\n\n        // non-image files include a section providing details about the file\n        const infoParts = [];\n\n        if (fileInfo.extension !== '') {\n            infoParts.push(Utils.localizeMessage('file_info_preview.type', 'File type ') + fileInfo.extension.toUpperCase());\n        }\n\n        infoParts.push(Utils.localizeMessage('file_info_preview.size', 'Size ') + Utils.fileSizeToString(fileInfo.size));\n\n        const infoString = infoParts.join(', ');\n\n        let preview = null;\n        if (this.props.canDownloadFiles) {\n            preview = (\n                <a\n                    className='file-details__preview'\n                    href={fileUrl}\n                    target='_blank'\n                    rel='noopener noreferrer'\n                >\n                    <span className='file-details__preview-helper'/>\n                    <img\n                        alt={'file preview'}\n                        src={Utils.getFileIconPath(fileInfo)}\n                    />\n                </a>\n            );\n        } else {\n            preview = (\n                <span className='file-details__preview'>\n                    <span className='file-details__preview-helper'/>\n                    <img\n                        alt={'file preview'}\n                        src={Utils.getFileIconPath(fileInfo)}\n                    />\n                </span>\n            );\n        }\n\n        return (\n            <div className='file-details__container'>\n                {preview}\n                <div className='file-details'>\n                    <div className='file-details__name'>{fileInfo.name}</div>\n                    <div className='file-details__info'>{infoString}</div>\n                </div>\n            </div>\n        );\n    }\n}\n","// Copyright (c) 2015-present Mattermost, Inc. All Rights Reserved.\n// See LICENSE.txt for license information.\n\nimport {connect} from 'react-redux';\nimport {getConfig} from 'mattermost-redux/selectors/entities/general';\n\nimport {canDownloadFiles} from 'utils/file_utils.jsx';\n\nimport FileInfoPreview from './file_info_preview.jsx';\n\nfunction mapStateToProps(state) {\n    const config = getConfig(state);\n\n    return {\n        canDownloadFiles: canDownloadFiles(config),\n    };\n}\n\nexport default connect(mapStateToProps)(FileInfoPreview);\n","// Copyright (c) 2015-present Mattermost, Inc. All Rights Reserved.\n// See LICENSE.txt for license information.\n\nimport {getCurrentTeamId, getTeamByName} from 'mattermost-redux/selectors/entities/teams';\nimport {getCurrentUserId} from 'mattermost-redux/selectors/entities/users';\n\nimport localStorageStore from 'stores/local_storage_store';\n\n// getLastViewedChannelName combines data from the Redux store and localStorage to return the\n// previously selected channel name, returning the default channel if none exists.\n//\n// See LocalStorageStore for context.\nexport const getLastViewedChannelName = (state) => {\n    const userId = getCurrentUserId(state);\n    const teamId = getCurrentTeamId(state);\n\n    return localStorageStore.getPreviousChannelName(userId, teamId);\n};\n\nexport const getPenultimateViewedChannelName = (state) => {\n    const userId = getCurrentUserId(state);\n    const teamId = getCurrentTeamId(state);\n\n    return localStorageStore.getPenultimateChannelName(userId, teamId);\n};\n\n// getLastViewedChannelNameByTeamName combines data from the Redux store and localStorage to return\n// the url to the previously selected channel, returning the path to the default channel if none\n// exists.\n//\n// See LocalStorageStore for context.\nexport const getLastViewedChannelNameByTeamName = (state, teamName) => {\n    const userId = getCurrentUserId(state);\n    const team = getTeamByName(state, teamName);\n    const teamId = team && team.id;\n\n    return localStorageStore.getPreviousChannelName(userId, teamId);\n};\n","// Copyright (c) 2015-present Mattermost, Inc. All Rights Reserved.\n// See LICENSE.txt for license information.\n\nimport React from 'react';\nimport {Client4} from 'mattermost-redux/client';\n\nimport {autocompleteUsers} from 'actions/user_actions.jsx';\nimport * as Utils from 'utils/utils.jsx';\n\nimport BotBadge from 'components/widgets/badges/bot_badge.jsx';\n\nimport Provider from './provider.jsx';\nimport Suggestion from './suggestion.jsx';\n\nclass UserSuggestion extends Suggestion {\n    render() {\n        const {item, isSelection} = this.props;\n\n        let className = 'suggestion-list__item mentions__name';\n        if (isSelection) {\n            className += ' suggestion--selected';\n        }\n\n        const username = item.username;\n        let description = '';\n\n        if ((item.first_name || item.last_name) && item.nickname) {\n            description = `- ${Utils.getFullName(item)} (${item.nickname})`;\n        } else if (item.nickname) {\n            description = `- (${item.nickname})`;\n        } else if (item.first_name || item.last_name) {\n            description = `- ${Utils.getFullName(item)}`;\n        }\n\n        return (\n            <div\n                className={className}\n                onClick={this.handleClick}\n                {...Suggestion.baseProps}\n            >\n                <img\n                    alt={''}\n                    className='admin-setting-user__image'\n                    src={Client4.getUsersRoute() + '/' + item.id + '/image?_=' + (item.last_picture_update || 0)}\n                />\n                <span className='admin-setting-user--align'>\n                    {'@' + username}\n                </span>\n                <BotBadge show={Boolean(item.is_bot)}/>\n                <span className='admin-setting-user__fullname'>\n                    {' '}\n                    {description}\n                </span>\n            </div>\n        );\n    }\n}\n\nexport default class UserProvider extends Provider {\n    handlePretextChanged(pretext, resultsCallback) {\n        const normalizedPretext = pretext.toLowerCase();\n        this.startNewRequest(normalizedPretext);\n\n        autocompleteUsers(\n            normalizedPretext,\n            (data) => {\n                if (this.shouldCancelDispatch(normalizedPretext)) {\n                    return;\n                }\n\n                const users = Object.assign([], data.users);\n\n                resultsCallback({\n                    matchedPretext: normalizedPretext,\n                    terms: users.map((user) => user.username),\n                    items: users,\n                    component: UserSuggestion,\n                });\n            }\n        );\n\n        return true;\n    }\n}\n","// Copyright (c) 2015-present Mattermost, Inc. All Rights Reserved.\n// See LICENSE.txt for license information.\n\nimport React from 'react';\nimport PropTypes from 'prop-types';\n\nimport './badge.scss';\n\nexport default class Badge extends React.Component {\n    static propTypes = {\n        show: PropTypes.bool.isRequired,\n        children: PropTypes.node.isRequired,\n        className: PropTypes.string,\n    };\n\n    static defaultProps = {\n        show: true,\n        className: '',\n    };\n\n    render() {\n        if (!this.props.show) {\n            return null;\n        }\n        return (\n            <div className='Badge'>\n                <div className={'Badge__box ' + this.props.className}>\n                    {this.props.children}\n                </div>\n            </div>\n        );\n    }\n}\n","// Copyright (c) 2015-present Mattermost, Inc. All Rights Reserved.\n// See LICENSE.txt for license information.\n\nimport PropTypes from 'prop-types';\nimport React from 'react';\n\n// A component that can be used to make controlled inputs that function properly in certain\n// environments (ie. IE11) where typing quickly would sometimes miss inputs\nexport default class QuickInput extends React.PureComponent {\n    static propTypes = {\n\n        /**\n         * Whether to delay updating the value of the textbox from props. Should only be used\n         * on textboxes that to properly compose CJK characters as the user types.\n         */\n        delayInputUpdate: PropTypes.bool,\n\n        /**\n         * An optional React component that will be used instead of an HTML input when rendering\n         */\n        inputComponent: PropTypes.func,\n\n        /**\n         * The string value displayed in this input\n         */\n        value: PropTypes.string.isRequired,\n    };\n\n    static defaultProps = {\n        delayInputUpdate: false,\n        value: '',\n    };\n\n    componentDidUpdate(prevProps) {\n        if (prevProps.value !== this.props.value) {\n            if (this.props.delayInputUpdate) {\n                requestAnimationFrame(this.updateInputFromProps);\n            } else {\n                this.updateInputFromProps();\n            }\n        }\n    }\n\n    updateInputFromProps = () => {\n        if (!this.input || this.input.value === this.props.value) {\n            return;\n        }\n\n        this.input.value = this.props.value;\n    }\n\n    get value() {\n        return this.input.value;\n    }\n\n    set value(value) {\n        this.input.value = value;\n    }\n\n    focus() {\n        this.input.focus();\n    }\n\n    blur() {\n        this.input.blur();\n    }\n\n    getInput = () => {\n        return this.input;\n    };\n\n    setInput = (input) => {\n        this.input = input;\n    }\n\n    render() {\n        const {value, inputComponent, ...props} = this.props;\n\n        Reflect.deleteProperty(props, 'delayInputUpdate');\n\n        return React.createElement(\n            inputComponent || 'input',\n            {\n                ...props,\n                ref: this.setInput,\n                defaultValue: value, // Only set the defaultValue since the real one will be updated using componentDidUpdate\n            }\n        );\n    }\n}\n","// Copyright (c) 2015-present Mattermost, Inc. All Rights Reserved.\n// See LICENSE.txt for license information.\n\nimport * as Flux from 'flux';\n\nimport Constants from 'utils/constants.jsx';\n\nconst PayloadSources = Constants.PayloadSources;\n\nconst AppDispatcher = Object.assign(new Flux.Dispatcher(), {\n    handleServerAction: function performServerAction(action) {\n        if (!action.type) {\n            console.warn('handleServerAction called with undefined action type'); // eslint-disable-line no-console\n        }\n\n        var payload = {\n            source: PayloadSources.SERVER_ACTION,\n            action,\n        };\n        this.dispatch(payload);\n    },\n\n    handleViewAction: function performViewAction(action) {\n        if (!action.type) {\n            console.warn('handleViewAction called with undefined action type'); // eslint-disable-line no-console\n        }\n\n        var payload = {\n            source: PayloadSources.VIEW_ACTION,\n            action,\n        };\n        this.dispatch(payload);\n    },\n});\n\nexport default AppDispatcher;\n","// Copyright (c) 2015-present Mattermost, Inc. All Rights Reserved.\n// See LICENSE.txt for license information.\n\nimport {ActionTypes} from 'utils/constants';\n\nexport function dismissNotice(type) {\n    return (dispatch) => {\n        dispatch({\n            type: ActionTypes.DISMISS_NOTICE,\n            data: type,\n        });\n\n        return {data: true};\n    };\n}\n","// Copyright (c) 2015-present Mattermost, Inc. All Rights Reserved.\n// See LICENSE.txt for license information.\n\nimport React from 'react';\nimport {FormattedMessage} from 'react-intl';\n\nexport default class MattermostLogo extends React.PureComponent {\n    render() {\n        return (\n            <span {...this.props}>\n                <FormattedMessage\n                    id='generic_icons.mattermost'\n                    defaultMessage='Mattermost Logo'\n                >\n                    {(ariaLabel) => (\n                        <svg\n                            version='1.1'\n                            id='Layer_1'\n                            x='0px'\n                            y='0px'\n                            viewBox='0 0 500 500'\n                            style={style.background}\n                            role='icon'\n                            aria-label={ariaLabel}\n                        >\n                            <g id='XMLID_1_'>\n                                <g id='XMLID_3_'>\n                                    <path\n                                        id='XMLID_4_'\n                                        style={style.st0}\n                                        d='M396.9,47.7l2.6,53.1c43,47.5,60,114.8,38.6,178.1c-32,94.4-137.4,144.1-235.4,110.9 S51.1,253.1,83,158.7C104.5,95.2,159.2,52,222.5,40.5l34.2-40.4C150-2.8,49.3,63.4,13.3,169.9C-31,300.6,39.1,442.5,169.9,486.7 s272.6-25.8,316.9-156.6C522.7,223.9,483.1,110.3,396.9,47.7z'\n                                    />\n                                </g>\n                                <path\n                                    id='XMLID_2_'\n                                    style={style.st0}\n                                    d='M335.6,204.3l-1.8-74.2l-1.5-42.7l-1-37c0,0,0.2-17.8-0.4-22c-0.1-0.9-0.4-1.6-0.7-2.2 c0-0.1-0.1-0.2-0.1-0.3c0-0.1-0.1-0.2-0.1-0.2c-0.7-1.2-1.8-2.1-3.1-2.6c-1.4-0.5-2.9-0.4-4.2,0.2c0,0-0.1,0-0.1,0 c-0.2,0.1-0.3,0.1-0.4,0.2c-0.6,0.3-1.2,0.7-1.8,1.3c-3,3-13.7,17.2-13.7,17.2l-23.2,28.8l-27.1,33l-46.5,57.8 c0,0-21.3,26.6-16.6,59.4s29.1,48.7,48,55.1c18.9,6.4,48,8.5,71.6-14.7C336.4,238.4,335.6,204.3,335.6,204.3z'\n                                />\n                            </g>\n                        </svg>\n                    )}\n                </FormattedMessage>\n            </span>\n        );\n    }\n}\n\nconst style = {\n    background: {\n        enableBackground: 'new 0 0 500 500',\n    },\n    st0: {\n        fillRule: 'evenodd',\n        clipRule: 'evenodd',\n    },\n};\n","module.exports = __webpack_public_path__ + \"files/325472601571f31e1bf00674c368d335.gif\";","// Copyright (c) 2015-present Mattermost, Inc. All Rights Reserved.\n// See LICENSE.txt for license information.\n\nimport React from 'react';\nimport PropTypes from 'prop-types';\n\nimport ToggleModalButtonRedux from 'components/toggle_modal_button_redux';\n\nimport menuItem from './menu_item.jsx';\n\nexport const MenuItemToggleModalReduxImpl = ({modalId, dialogType, dialogProps, text}) => (\n    <ToggleModalButtonRedux\n        accessibilityLabel={text}\n        modalId={modalId}\n        dialogType={dialogType}\n        dialogProps={dialogProps}\n    >\n        {text}\n    </ToggleModalButtonRedux>\n);\n\nMenuItemToggleModalReduxImpl.propTypes = {\n    modalId: PropTypes.string.isRequired,\n    dialogType: PropTypes.func.isRequired,\n    dialogProps: PropTypes.object,\n    text: PropTypes.oneOfType([PropTypes.string, PropTypes.node]).isRequired,\n};\n\nconst MenuItemToggleModalRedux = menuItem(MenuItemToggleModalReduxImpl);\nMenuItemToggleModalRedux.displayName = 'MenuItemToggleModalRedux';\n\nexport default MenuItemToggleModalRedux;\n","// Copyright (c) 2015-present Mattermost, Inc. All Rights Reserved.\n// See LICENSE.txt for license information.\n\nimport {getTeamMember} from 'mattermost-redux/actions/teams';\nimport {getChannelMember} from 'mattermost-redux/actions/channels';\nimport {getCurrentChannel} from 'mattermost-redux/selectors/entities/channels';\nimport {getCurrentTeamId} from 'mattermost-redux/selectors/entities/teams';\n\nimport {getSelectedPost} from 'selectors/rhs';\n\nexport function getMembershipForCurrentEntities(userId) {\n    return async (dispatch, getState) => {\n        const state = getState();\n        const currentTeamId = getCurrentTeamId(state);\n\n        const selectedPost = getSelectedPost(state);\n        const currentChannel = getCurrentChannel(state);\n\n        let channelId;\n        if (selectedPost.exists === false) {\n            channelId = currentChannel.id;\n        } else {\n            channelId = selectedPost.channel_id;\n        }\n\n        return Promise.all([dispatch(getTeamMember(currentTeamId, userId)), dispatch(getChannelMember(channelId, userId))]);\n    };\n}\n","// Copyright (c) 2015-present Mattermost, Inc. All Rights Reserved.\n// See LICENSE.txt for license information.\n\nimport React from 'react';\nimport {\n    getChannelsInCurrentTeam,\n} from 'mattermost-redux/selectors/entities/channels';\nimport {getMyChannelMemberships} from 'mattermost-redux/selectors/entities/common';\nimport {getConfig} from 'mattermost-redux/selectors/entities/general';\nimport {getCurrentTeamId} from 'mattermost-redux/selectors/entities/teams';\nimport * as ChannelActions from 'mattermost-redux/actions/channels';\nimport {getCurrentUserLocale} from 'mattermost-redux/selectors/entities/i18n';\nimport {haveIChannelPermission} from 'mattermost-redux/selectors/entities/roles';\nimport {Permissions} from 'mattermost-redux/constants';\nimport {sortChannelsByTypeAndDisplayName} from 'mattermost-redux/utils/channel_utils';\nimport {logError} from 'mattermost-redux/actions/errors';\n\nimport GlobeIcon from 'components/svg/globe_icon';\nimport LockIcon from 'components/svg/lock_icon';\nimport ArchiveIcon from 'components/svg/archive_icon';\nimport store from 'stores/redux_store.jsx';\nimport {Constants} from 'utils/constants.jsx';\n\nimport Provider from './provider.jsx';\nimport Suggestion from './suggestion.jsx';\n\nclass SearchChannelWithPermissionsSuggestion extends Suggestion {\n    static get propTypes() {\n        return {\n            ...super.propTypes,\n        };\n    }\n\n    render() {\n        const {item, isSelection} = this.props;\n        const channel = item.channel;\n        const channelIsArchived = channel.delete_at && channel.delete_at !== 0;\n\n        let className = 'mentions__name';\n        if (isSelection) {\n            className += ' suggestion--selected';\n        }\n\n        const displayName = channel.display_name;\n        let icon = null;\n        if (channelIsArchived) {\n            icon = (\n                <ArchiveIcon className='icon icon__archive'/>\n            );\n        } else if (channel.type === Constants.OPEN_CHANNEL) {\n            icon = (\n                <GlobeIcon className='icon icon__globe icon--body'/>\n            );\n        } else if (channel.type === Constants.PRIVATE_CHANNEL) {\n            icon = (\n                <LockIcon className='icon icon__lock icon--body'/>\n            );\n        }\n\n        return (\n            <div\n                onClick={this.handleClick}\n                className={className}\n                {...Suggestion.baseProps}\n            >\n                {icon}\n                {displayName}\n            </div>\n        );\n    }\n}\n\nlet prefix = '';\n\nfunction channelSearchSorter(wrappedA, wrappedB) {\n    const aIsArchived = wrappedA.channel.delete_at ? wrappedA.channel.delete_at !== 0 : false;\n    const bIsArchived = wrappedB.channel.delete_at ? wrappedB.channel.delete_at !== 0 : false;\n    if (aIsArchived && !bIsArchived) {\n        return 1;\n    } else if (!aIsArchived && bIsArchived) {\n        return -1;\n    }\n\n    const locale = getCurrentUserLocale(store.getState());\n\n    const a = wrappedA.channel;\n    const b = wrappedB.channel;\n\n    const aDisplayName = a.display_name.toLowerCase();\n    const bDisplayName = b.display_name.toLowerCase();\n\n    const aStartsWith = aDisplayName.startsWith(prefix);\n    const bStartsWith = bDisplayName.startsWith(prefix);\n    if (aStartsWith && bStartsWith) {\n        return sortChannelsByTypeAndDisplayName(locale, a, b);\n    } else if (!aStartsWith && !bStartsWith) {\n        return sortChannelsByTypeAndDisplayName(locale, a, b);\n    } else if (aStartsWith) {\n        return -1;\n    }\n\n    return 1;\n}\n\nexport default class SearchChannelWithPermissionsProvider extends Provider {\n    makeChannelSearchFilter(channelPrefix) {\n        const channelPrefixLower = channelPrefix.toLowerCase();\n\n        return (channel) => {\n            const state = store.getState();\n            const channelId = channel.id;\n            const teamId = getCurrentTeamId(state);\n\n            const searchString = channel.display_name;\n\n            if (channel.type === Constants.OPEN_CHANNEL &&\n                haveIChannelPermission(state, {channel: channelId, team: teamId, permission: Permissions.MANAGE_PUBLIC_CHANNEL_MEMBERS})) {\n                return searchString.toLowerCase().includes(channelPrefixLower);\n            } else if (channel.type === Constants.PRIVATE_CHANNEL &&\n                haveIChannelPermission(state, {channel: channelId, team: teamId, permission: Permissions.MANAGE_PRIVATE_CHANNEL_MEMBERS})) {\n                return searchString.toLowerCase().includes(channelPrefixLower);\n            }\n\n            return false;\n        };\n    }\n\n    handlePretextChanged(channelPrefix, resultsCallback) {\n        if (channelPrefix) {\n            prefix = channelPrefix;\n            this.startNewRequest(channelPrefix);\n            const state = store.getState();\n\n            // Dispatch suggestions for local data\n            const channels = getChannelsInCurrentTeam(state);\n            this.formatChannelsAndDispatch(channelPrefix, resultsCallback, channels);\n\n            // Fetch data from the server and dispatch\n            this.fetchChannels(channelPrefix, resultsCallback);\n        }\n\n        return true;\n    }\n\n    async fetchChannels(channelPrefix, resultsCallback) {\n        const state = store.getState();\n        const teamId = getCurrentTeamId(state);\n        if (!teamId) {\n            return;\n        }\n\n        const channelsAsync = ChannelActions.autocompleteChannelsForSearch(teamId, channelPrefix)(store.dispatch, store.getState);\n\n        let channelsFromServer = [];\n        try {\n            const {data} = await channelsAsync;\n            channelsFromServer = data;\n        } catch (err) {\n            store.dispatch(logError(err));\n        }\n\n        if (this.shouldCancelDispatch(channelPrefix)) {\n            return;\n        }\n\n        const channels = getChannelsInCurrentTeam(state).concat(channelsFromServer);\n        this.formatChannelsAndDispatch(channelPrefix, resultsCallback, channels);\n    }\n\n    formatChannelsAndDispatch(channelPrefix, resultsCallback, allChannels) {\n        const channels = [];\n\n        const state = store.getState();\n\n        const members = getMyChannelMemberships(state);\n\n        if (this.shouldCancelDispatch(channelPrefix)) {\n            return;\n        }\n\n        const completedChannels = {};\n\n        const channelFilter = this.makeChannelSearchFilter(channelPrefix);\n\n        const config = getConfig(state);\n        const viewArchivedChannels = config.ExperimentalViewArchivedChannels === 'true';\n\n        for (const id of Object.keys(allChannels)) {\n            const channel = allChannels[id];\n            if (!channel) {\n                continue;\n            }\n\n            if (completedChannels[channel.id]) {\n                continue;\n            }\n\n            if (channelFilter(channel)) {\n                const newChannel = Object.assign({}, channel);\n                const channelIsArchived = channel.delete_at !== 0;\n\n                const wrappedChannel = {channel: newChannel, name: newChannel.name, deactivated: false};\n                if (!viewArchivedChannels && channelIsArchived) {\n                    continue;\n                } else if (!members[channel.id]) {\n                    continue;\n                } else if (channelIsArchived && !members[channel.id]) {\n                    continue;\n                } else if (channel.type === Constants.OPEN_CHANNEL) {\n                    wrappedChannel.type = Constants.OPEN_CHANNEL;\n                } else if (channel.type === Constants.PRIVATE_CHANNEL) {\n                    wrappedChannel.type = Constants.PRIVATE_CHANNEL;\n                } else {\n                    continue;\n                }\n                completedChannels[channel.id] = true;\n                channels.push(wrappedChannel);\n            }\n        }\n\n        const channelNames = channels.\n            sort(channelSearchSorter).\n            map((wrappedChannel) => wrappedChannel.channel.name);\n\n        resultsCallback({\n            matchedPretext: channelPrefix,\n            terms: channelNames,\n            items: channels,\n            component: SearchChannelWithPermissionsSuggestion,\n        });\n    }\n}\n","// Copyright (c) 2015-present Mattermost, Inc. All Rights Reserved.\n// See LICENSE.txt for license information.\n\nimport PropTypes from 'prop-types';\nimport React from 'react';\nimport {Modal} from 'react-bootstrap';\nimport {FormattedMessage} from 'react-intl';\n\nimport {getFullName} from 'mattermost-redux/utils/user_utils';\n\nimport SearchChannelWithPermissionsProvider from 'components/suggestion/search_channel_with_permissions_provider.jsx';\nimport SuggestionBox from 'components/suggestion/suggestion_box.jsx';\nimport SuggestionList from 'components/suggestion/suggestion_list.jsx';\n\nimport {placeCaretAtEnd} from 'utils/utils.jsx';\n\nexport default class AddUserToChannelModal extends React.Component {\n    static propTypes = {\n\n        /**\n         * Function that's called when modal is closed\n         */\n        onHide: PropTypes.func.isRequired,\n\n        /**\n         * The user that is being added to a channel\n         */\n        user: PropTypes.object.isRequired,\n\n        /**\n         * Object used to determine if the user\n         * is a member of a given channel\n         */\n        channelMembers: PropTypes.object.isRequired,\n\n        actions: PropTypes.shape({\n\n            /**\n             * Function to add the user to a channel\n             */\n            addChannelMember: PropTypes.func.isRequired,\n\n            /**\n             * Function to fetch the user's channel membership\n             */\n            getChannelMember: PropTypes.func.isRequired,\n        }).isRequired,\n    }\n\n    constructor(props) {\n        super(props);\n\n        this.state = {\n\n            /**\n             * Whether or not the modal is visible\n             */\n            show: true,\n\n            /**\n             * Whether or not a request to add the user is in progress\n             */\n            saving: false,\n\n            /**\n             * Whether or not a request to check for the user's channel membership\n             * is in progress\n             */\n            checkingForMembership: false,\n\n            /**\n             * The user input in the channel search box\n             */\n            text: '',\n\n            /**\n             * The id for the channel that is selected\n             */\n            selectedChannelId: null,\n\n            /**\n             * An error to display when the add request fails\n             */\n            submitError: '',\n        };\n        this.suggestionProviders = [new SearchChannelWithPermissionsProvider()];\n        this.enableChannelProvider();\n    }\n\n    enableChannelProvider = () => {\n        this.suggestionProviders[0].disableDispatches = false;\n    }\n\n    focusTextbox = () => {\n        if (this.channelSearchBox == null) {\n            return;\n        }\n\n        const textbox = this.channelSearchBox.getTextbox();\n        if (document.activeElement !== textbox) {\n            textbox.focus();\n            placeCaretAtEnd(textbox);\n        }\n    }\n\n    onInputChange = (e) => {\n        this.setState({text: e.target.value, selectedChannelId: null});\n    }\n\n    onHide = () => {\n        this.setState({show: false});\n        this.props.onHide();\n    }\n\n    setSearchBoxRef = (input) => {\n        this.channelSearchBox = input;\n        this.focusTextbox();\n    }\n\n    handleSubmitError = (error) => {\n        if (error) {\n            this.setState({submitError: error.message, saving: false});\n        }\n    }\n\n    didSelectChannel = (selection) => {\n        const channel = selection.channel;\n        const userId = this.props.user.id;\n\n        this.setState({\n            text: channel.display_name,\n            selectedChannelId: channel.id,\n            checkingForMembership: true,\n            submitError: '',\n        });\n\n        this.props.actions.getChannelMember(channel.id, userId).then(() => {\n            this.setState({checkingForMembership: false});\n        });\n    }\n\n    handleSubmit = (e) => {\n        if (e && e.preventDefault) {\n            e.preventDefault();\n        }\n\n        const channelId = this.state.selectedChannelId;\n        const user = this.props.user;\n\n        if (!channelId) {\n            return;\n        }\n\n        if (this.isUserMemberOfChannel(channelId) || this.state.saving) {\n            return;\n        }\n\n        this.setState({saving: true});\n\n        this.props.actions.addChannelMember(channelId, user.id).then(({error}) => {\n            if (error) {\n                this.handleSubmitError(error);\n            } else {\n                this.onHide();\n            }\n        });\n    }\n\n    isUserMemberOfChannel = (channelId) => {\n        const user = this.props.user;\n        const memberships = this.props.channelMembers;\n\n        if (!channelId) {\n            return false;\n        }\n\n        if (!memberships[channelId]) {\n            return false;\n        }\n\n        return Boolean(memberships[channelId][user.id]);\n    }\n\n    render() {\n        const user = this.props.user;\n        const channelId = this.state.selectedChannelId;\n        const targetUserIsMemberOfSelectedChannel = this.isUserMemberOfChannel(channelId);\n\n        let name = getFullName(user);\n        if (!name) {\n            name = `@${user.username}`;\n        }\n\n        let errorMsg;\n        if (!this.state.saving) {\n            if (this.state.submitError) {\n                errorMsg = (\n                    <label\n                        id='add-user-to-channel-modal__invite-error'\n                        className='modal__error has-error control-label'\n                    >\n                        {this.state.submitError}\n                    </label>\n                );\n            } else if (targetUserIsMemberOfSelectedChannel) {\n                errorMsg = (\n                    <label\n                        id='add-user-to-channel-modal__user-is-member'\n                        className='modal__error has-error control-label'\n                    >\n                        <FormattedMessage\n                            id='add_user_to_channel_modal.membershipExistsError'\n                            defaultMessage='{name} is already a member of that channel'\n                            values={{\n                                name,\n                            }}\n                        />\n                    </label>\n                );\n            }\n        }\n\n        const help = (\n            <FormattedMessage\n                id='add_user_to_channel_modal.help'\n                defaultMessage='Type to find a channel. Use ↑↓ to browse, ↵ to select, ESC to dismiss.'\n            />\n        );\n\n        const content = (\n            <SuggestionBox\n                ref={this.setSearchBoxRef}\n                className='form-control focused'\n                onChange={this.onInputChange}\n                value={this.state.text}\n                onKeyDown={this.handleKeyDown}\n                onItemSelected={this.didSelectChannel}\n                listComponent={SuggestionList}\n                maxLength='64'\n                providers={this.suggestionProviders}\n                listStyle='bottom'\n                completeOnTab={false}\n                renderDividers={false}\n                delayInputUpdate={true}\n                openWhenEmpty={true}\n            />\n        );\n\n        const shouldDisableAddButton = targetUserIsMemberOfSelectedChannel ||\n            this.state.checkingForMembership ||\n            Boolean(!this.state.selectedChannelId) ||\n            this.state.saving;\n\n        return (\n            <Modal\n                dialogClassName='a11y__modal modal--overflow'\n                show={this.state.show}\n                onHide={this.onHide}\n                onExited={this.props.onHide}\n                ref='modal'\n                enforceFocus={true}\n                role='dialog'\n                aria-labelledby='addChannelModalLabel'\n            >\n                <Modal.Header closeButton={true}>\n                    <Modal.Title\n                        componentClass='h1'\n                        id='addChannelModalLabel'\n                    >\n                        <FormattedMessage\n                            id='add_user_to_channel_modal.title'\n                            defaultMessage='Add {name} to a channel'\n                            values={{\n                                name,\n                            }}\n                        />\n                    </Modal.Title>\n                </Modal.Header>\n                <form\n                    role='form'\n                    onSubmit={this.handleSubmit}\n                >\n                    <Modal.Body>\n                        <div className='modal__hint'>\n                            {help}\n                        </div>\n                        {content}\n                        <div>\n                            {errorMsg}\n                            <br/>\n                        </div>\n                    </Modal.Body>\n                    <Modal.Footer>\n                        <button\n                            type='button'\n                            className='btn btn-link'\n                            onClick={this.onHide}\n                        >\n                            <FormattedMessage\n                                id='add_user_to_channel_modal.cancel'\n                                defaultMessage='Cancel'\n                            />\n                        </button>\n                        <button\n                            type='button'\n                            id='add-user-to-channel-modal__add-button'\n                            className='btn btn-primary'\n                            onClick={this.handleSubmit}\n                            disabled={shouldDisableAddButton}\n                        >\n                            <FormattedMessage\n                                id='add_user_to_channel_modal.add'\n                                defaultMessage='Add'\n                            />\n                        </button>\n                    </Modal.Footer>\n                </form>\n            </Modal>\n        );\n    }\n}\n","// Copyright (c) 2015-present Mattermost, Inc. All Rights Reserved.\n// See LICENSE.txt for license information.\n\nimport {connect} from 'react-redux';\nimport {bindActionCreators} from 'redux';\nimport {addChannelMember, getChannelMember} from 'mattermost-redux/actions/channels';\nimport {getChannelMembersInChannels} from 'mattermost-redux/selectors/entities/channels';\n\nimport AddUserToChannelModal from './add_user_to_channel_modal.jsx';\n\nfunction mapStateToProps(state) {\n    const channelMembers = getChannelMembersInChannels(state) || {};\n    return {\n        channelMembers,\n    };\n}\n\nfunction mapDispatchToProps(dispatch) {\n    return {\n        actions: bindActionCreators({\n            addChannelMember,\n            getChannelMember,\n        }, dispatch),\n    };\n}\n\nexport default connect(mapStateToProps, mapDispatchToProps)(AddUserToChannelModal);\n","// Copyright (c) 2015-present Mattermost, Inc. All Rights Reserved.\n// See LICENSE.txt for license information.\n\nimport PropTypes from 'prop-types';\nimport React from 'react';\nimport {OverlayTrigger, Popover, Tooltip} from 'react-bootstrap';\nimport {FormattedMessage, intlShape, injectIntl} from 'react-intl';\n\nimport EventEmitter from 'mattermost-redux/utils/event_emitter';\n\nimport LocalDateTime from 'components/local_date_time';\nimport UserSettingsModal from 'components/user_settings/modal';\nimport {browserHistory} from 'utils/browser_history';\nimport * as GlobalActions from 'actions/global_actions.jsx';\nimport Constants, {ModalIdentifiers, UserStatuses} from 'utils/constants.jsx';\nimport * as Utils from 'utils/utils.jsx';\nimport Pluggable from 'plugins/pluggable';\n\nimport AddUserToChannelModal from 'components/add_user_to_channel_modal';\nimport ToggleModalButtonRedux from 'components/toggle_modal_button_redux';\n\n/**\n * The profile popover, or hovercard, that appears with user information when clicking\n * on the username or profile picture of a user.\n */\nclass ProfilePopover extends React.PureComponent {\n    static getComponentName() {\n        return 'ProfilePopover';\n    }\n\n    static propTypes = {\n\n        /**\n         * Source URL from the image to display in the popover\n         */\n        src: PropTypes.string.isRequired,\n\n        /**\n         * User the popover is being opened for\n         */\n        user: PropTypes.object,\n\n        /**\n         * Status for the user, either 'offline', 'away', 'dnd' or 'online'\n         */\n        status: PropTypes.string,\n\n        hideStatus: PropTypes.bool,\n\n        /**\n         * Function to call to hide the popover\n         */\n        hide: PropTypes.func,\n\n        /**\n         * Set to true if the popover was opened from the right-hand\n         * sidebar (comment thread, search results, etc.)\n         */\n        isRHS: PropTypes.bool,\n\n        currentTeamId: PropTypes.string.isRequired,\n\n        /**\n         * @internal\n         */\n        currentUserId: PropTypes.string.isRequired,\n\n        /**\n         * @internal\n         */\n        hasMention: PropTypes.bool,\n\n        /**\n         * @internal\n         */\n        isInCurrentTeam: PropTypes.bool.isRequired,\n\n        /**\n         * @internal\n         */\n        teamUrl: PropTypes.string.isRequired,\n\n        /**\n         * @internal\n         */\n        isTeamAdmin: PropTypes.bool.isRequired,\n\n        /**\n         * @internal\n         */\n        isChannelAdmin: PropTypes.bool.isRequired,\n\n        /**\n         * @internal\n         */\n        canManageAnyChannelMembersInCurrentTeam: PropTypes.bool.isRequired,\n\n        /**\n         * @internal\n         */\n        actions: PropTypes.shape({\n            getMembershipForCurrentEntities: PropTypes.func.isRequired,\n            openDirectChannelToUserId: PropTypes.func.isRequired,\n            openModal: PropTypes.func.isRequired,\n        }).isRequired,\n\n        /**\n         * react-intl helper object\n         */\n        intl: intlShape.isRequired,\n\n        ...Popover.propTypes,\n    }\n\n    static defaultProps = {\n        isRHS: false,\n        hasMention: false,\n        status: UserStatuses.OFFLINE,\n    }\n\n    constructor(props) {\n        super(props);\n\n        this.handleShowDirectChannel = this.handleShowDirectChannel.bind(this);\n        this.handleMentionKeyClick = this.handleMentionKeyClick.bind(this);\n        this.handleEditAccountSettings = this.handleEditAccountSettings.bind(this);\n        this.state = {\n            loadingDMChannel: -1,\n        };\n    }\n\n    componentDidMount() {\n        this.props.actions.getMembershipForCurrentEntities(this.props.userId);\n    }\n\n    handleShowDirectChannel(e) {\n        const {actions} = this.props;\n        e.preventDefault();\n\n        if (!this.props.user) {\n            return;\n        }\n\n        const user = this.props.user;\n\n        if (this.state.loadingDMChannel !== -1) {\n            return;\n        }\n\n        this.setState({loadingDMChannel: user.id});\n\n        actions.openDirectChannelToUserId(user.id).then((result) => {\n            if (!result.error) {\n                if (Utils.isMobile()) {\n                    GlobalActions.emitCloseRightHandSide();\n                }\n                this.setState({loadingDMChannel: -1});\n                if (this.props.hide) {\n                    this.props.hide();\n                }\n                browserHistory.push(`${this.props.teamUrl}/messages/@${user.username}`);\n            }\n        });\n    }\n\n    handleMentionKeyClick(e) {\n        e.preventDefault();\n\n        if (!this.props.user) {\n            return;\n        }\n        if (this.props.hide) {\n            this.props.hide();\n        }\n        EventEmitter.emit('mention_key_click', this.props.user.username, this.props.isRHS);\n    }\n\n    handleEditAccountSettings(e) {\n        e.preventDefault();\n\n        if (!this.props.user) {\n            return;\n        }\n        if (this.props.hide) {\n            this.props.hide();\n        }\n        this.props.actions.openModal({ModalId: ModalIdentifiers.USER_SETTINGS, dialogType: UserSettingsModal});\n    }\n\n    render() {\n        if (!this.props.user) {\n            return null;\n        }\n\n        const popoverProps = Object.assign({}, this.props);\n        delete popoverProps.user;\n        delete popoverProps.userId;\n        delete popoverProps.src;\n        delete popoverProps.status;\n        delete popoverProps.hideStatus;\n        delete popoverProps.isBusy;\n        delete popoverProps.hide;\n        delete popoverProps.isRHS;\n        delete popoverProps.hasMention;\n        delete popoverProps.dispatch;\n        delete popoverProps.enableTimezone;\n        delete popoverProps.currentUserId;\n        delete popoverProps.currentTeamId;\n        delete popoverProps.teamUrl;\n        delete popoverProps.actions;\n        delete popoverProps.isTeamAdmin;\n        delete popoverProps.isChannelAdmin;\n        delete popoverProps.canManageAnyChannelMembersInCurrentTeam;\n        delete popoverProps.intl;\n\n        const {formatMessage} = this.props.intl;\n\n        var dataContent = [];\n        dataContent.push(\n            <img\n                className='user-popover__image'\n                alt={`${this.props.user.username || 'user'} profile image`}\n                src={this.props.src}\n                height='128'\n                width='128'\n                key='user-popover-image'\n            />\n        );\n\n        const fullname = Utils.getFullName(this.props.user);\n\n        if (fullname || this.props.user.position) {\n            dataContent.push(\n                <hr\n                    key='user-popover-hr'\n                    className='divider divider--expanded'\n                />\n            );\n        }\n\n        if (fullname) {\n            dataContent.push(\n                <OverlayTrigger\n                    delayShow={Constants.OVERLAY_TIME_DELAY}\n                    placement='top'\n                    overlay={<Tooltip id='fullNameTooltip'>{fullname}</Tooltip>}\n                    key='user-popover-fullname'\n                >\n                    <div\n                        className='overflow--ellipsis text-nowrap'\n                    >\n                        <strong>{fullname}</strong>\n                    </div>\n                </OverlayTrigger>\n            );\n        }\n\n        if (this.props.user.is_bot) {\n            dataContent.push(\n                <div\n                    key='bot-description'\n                    className='overflow--ellipsis text-nowrap'\n                >\n                    {this.props.user.bot_description}\n                </div>\n            );\n        }\n\n        if (this.props.user.position) {\n            const position = this.props.user.position.substring(0, Constants.MAX_POSITION_LENGTH);\n            dataContent.push(\n                <OverlayTrigger\n                    delayShow={Constants.OVERLAY_TIME_DELAY}\n                    placement='top'\n                    overlay={<Tooltip id='positionTooltip'>{position}</Tooltip>}\n                    key='user-popover-position'\n                >\n                    <div\n                        className='overflow--ellipsis text-nowrap padding-bottom padding-top half'\n                    >\n                        {position}\n                    </div>\n                </OverlayTrigger>\n            );\n        }\n\n        const email = this.props.user.email;\n        if (email && !this.props.user.is_bot) {\n            dataContent.push(\n                <hr\n                    key='user-popover-hr2'\n                    className='divider divider--expanded'\n                />\n            );\n\n            dataContent.push(\n                <div\n                    data-toggle='tooltip'\n                    title={email}\n                    key='user-popover-email'\n                >\n                    <a\n                        href={'mailto:' + email}\n                        className='text-nowrap text-lowercase user-popover__email padding-bottom half'\n                    >\n                        {email}\n                    </a>\n                </div>\n            );\n        }\n\n        dataContent.push(\n            <Pluggable\n                key='profilePopoverPluggable2'\n                pluggableName='PopoverUserAttributes'\n                user={this.props.user}\n                status={this.props.hideStatus ? null : this.props.status}\n            />\n        );\n\n        if (this.props.enableTimezone && this.props.user.timezone) {\n            dataContent.push(\n                <div\n                    key='user-popover-local-time'\n                    className='padding-bottom half'\n                >\n                    <FormattedMessage\n                        id='user_profile.account.localTime'\n                        defaultMessage='Local Time: '\n                    />\n                    <LocalDateTime userTimezone={this.props.user.timezone}/>\n                </div>\n            );\n        }\n\n        if (this.props.user.id === this.props.currentUserId) {\n            dataContent.push(\n                <div\n                    data-toggle='tooltip'\n                    key='user-popover-settings'\n                    className='popover__row first'\n                >\n                    <a\n                        href='#'\n                        onClick={this.handleEditAccountSettings}\n                    >\n                        <i\n                            className='fa fa-pencil-square-o'\n                            title={formatMessage({id: 'generic_icons.edit', defaultMessage: 'Edit Icon'})}\n                        />\n                        <FormattedMessage\n                            id='user_profile.account.editSettings'\n                            defaultMessage='Edit Account Settings'\n                        />\n                    </a>\n                </div>\n            );\n        }\n\n        if (this.props.user.id !== this.props.currentUserId) {\n            dataContent.push(\n                <div\n                    data-toggle='tooltip'\n                    key='user-popover-dm'\n                    className='popover__row first'\n                >\n                    <a\n                        href='#'\n                        className='text-nowrap user-popover__email'\n                        onClick={this.handleShowDirectChannel}\n                    >\n                        <i\n                            className='fa fa-paper-plane'\n                            title={formatMessage({id: 'user_profile.send.dm.icon', defaultMessage: 'Send Message Icon'})}\n                        />\n                        <FormattedMessage\n                            id='user_profile.send.dm'\n                            defaultMessage='Send Message'\n                        />\n                    </a>\n                </div>\n            );\n\n            if (this.props.canManageAnyChannelMembersInCurrentTeam && this.props.isInCurrentTeam) {\n                const addToChannelMessage = formatMessage({id: 'user_profile.add_user_to_channel', defaultMessage: 'Add to a Channel'});\n                dataContent.push(\n                    <div\n                        data-toggle='tooltip'\n                        className='popover__row first'\n                        key='user-popover-add-to-channel'\n                    >\n                        <a\n                            href='#'\n                            className='text-nowrap'\n                        >\n                            <ToggleModalButtonRedux\n                                accessibilityLabel={addToChannelMessage}\n                                ref='addUserToChannelModalButton'\n                                modalId={ModalIdentifiers.ADD_USER_TO_CHANNEL}\n                                role='menuitem'\n                                dialogType={AddUserToChannelModal}\n                                dialogProps={{user: this.props.user}}\n                                onClick={this.props.hide}\n                            >\n                                <i\n                                    className='fa fa-user-plus'\n                                    title={formatMessage({id: 'user_profile.add_user_to_channel.icon', defaultMessage: 'Add User to Channel Icon'})}\n                                />\n                                {addToChannelMessage}\n                            </ToggleModalButtonRedux>\n                        </a>\n                    </div>\n                );\n            }\n        }\n\n        dataContent.push(\n            <Pluggable\n                key='profilePopoverPluggable3'\n                pluggableName='PopoverUserActions'\n                user={this.props.user}\n                status={this.props.hideStatus ? null : this.props.status}\n            />\n        );\n\n        let roleTitle;\n        if (this.props.user.is_bot) {\n            roleTitle = <span className='user-popover__role'>{Utils.localizeMessage('bots.is_bot', 'BOT')}</span>;\n        } else if (Utils.isSystemAdmin(this.props.user.roles)) {\n            roleTitle = <span className='user-popover__role'>{Utils.localizeMessage('admin.permissions.roles.system_admin.name', 'System Admin')}</span>;\n        } else if (this.props.isTeamAdmin) {\n            roleTitle = <span className='user-popover__role'>{Utils.localizeMessage('admin.permissions.roles.team_admin.name', 'Team Admin')}</span>;\n        } else if (this.props.isChannelAdmin) {\n            roleTitle = <span className='user-popover__role'>{Utils.localizeMessage('admin.permissions.roles.channel_admin.name', 'Channel Admin')}</span>;\n        }\n\n        let title = `@${this.props.user.username}`;\n        if (this.props.hasMention) {\n            title = <a onClick={this.handleMentionKeyClick}>{title}</a>;\n        }\n        title = (\n            <span>\n                <span className='user-popover__username'>\n                    {title}\n                </span>\n                {roleTitle}\n            </span>\n        );\n\n        return (\n            <Popover\n                {...popoverProps}\n                title={title}\n                id='user-profile-popover'\n            >\n                {dataContent}\n            </Popover>\n        );\n    }\n}\n\ndelete ProfilePopover.propTypes.id;\n\nexport default injectIntl(ProfilePopover);\n","// Copyright (c) 2015-present Mattermost, Inc. All Rights Reserved.\n// See LICENSE.txt for license information.\n\nimport {connect} from 'react-redux';\nimport {bindActionCreators} from 'redux';\n\nimport {getCurrentUserId, getStatusForUserId, getUser} from 'mattermost-redux/selectors/entities/users';\nimport {\n    getCurrentTeam,\n    getCurrentRelativeTeamUrl,\n    getTeamMember,\n} from 'mattermost-redux/selectors/entities/teams';\nimport {\n    getCurrentChannel,\n    getChannelMembersInChannels,\n    canManageAnyChannelMembersInCurrentTeam,\n} from 'mattermost-redux/selectors/entities/channels';\n\nimport {openDirectChannelToUserId} from 'actions/channel_actions.jsx';\nimport {getMembershipForCurrentEntities} from 'actions/views/profile_popover';\nimport {openModal} from 'actions/views/modals';\n\nimport {areTimezonesEnabledAndSupported} from 'selectors/general';\nimport {getSelectedPost, getRhsState} from 'selectors/rhs';\n\nimport ProfilePopover from './profile_popover.jsx';\n\nfunction mapStateToProps(state, ownProps) {\n    const userId = ownProps.userId;\n    const team = getCurrentTeam(state);\n    const teamMember = getTeamMember(state, team.id, userId);\n\n    let isTeamAdmin = false;\n    if (teamMember && teamMember.scheme_admin) {\n        isTeamAdmin = true;\n    }\n\n    const selectedPost = getSelectedPost(state);\n    const currentChannel = getCurrentChannel(state);\n\n    let channelId;\n    if (selectedPost.exists === false) {\n        channelId = currentChannel.id;\n    } else {\n        channelId = selectedPost.channel_id;\n    }\n\n    const channelMember = getChannelMembersInChannels(state)[channelId][userId];\n\n    let isChannelAdmin = false;\n    if (getRhsState(state) !== 'search' && channelMember != null && channelMember.scheme_admin) {\n        isChannelAdmin = true;\n    }\n\n    return {\n        currentTeamId: team.id,\n        currentUserId: getCurrentUserId(state),\n        enableTimezone: areTimezonesEnabledAndSupported(state),\n        isTeamAdmin,\n        isChannelAdmin,\n        isInCurrentTeam: Boolean(teamMember),\n        canManageAnyChannelMembersInCurrentTeam: canManageAnyChannelMembersInCurrentTeam(state),\n        status: getStatusForUserId(state, userId),\n        teamUrl: getCurrentRelativeTeamUrl(state),\n        user: getUser(state, userId),\n    };\n}\n\nfunction mapDispatchToProps(dispatch) {\n    return {\n        actions: bindActionCreators({\n            openDirectChannelToUserId,\n            openModal,\n            getMembershipForCurrentEntities,\n        }, dispatch),\n    };\n}\n\nexport default connect(mapStateToProps, mapDispatchToProps)(ProfilePopover);\n","// Copyright (c) 2015-present Mattermost, Inc. All Rights Reserved.\n// See LICENSE.txt for license information.\n\nimport React from 'react';\n\nimport FormattedMarkdownMessage from 'components/formatted_markdown_message';\n\nimport * as ServerVersion from 'utils/server_version.jsx';\nimport * as UserAgent from 'utils/user_agent.jsx';\n\nimport mattermostIcon from 'images/icon50x50.png';\n\n// Notices are objects with the following fields:\n//  - name - string identifier\n//  - adminOnly - set to true if only system admins should see this message\n//  - icon - the image to display for the notice icon\n//  - title - JSX node to display for the notice title\n//  - body - JSX node to display for the notice body\n//  - allowForget - boolean to allow forget the notice\n//  - show - function that check if we need to show the notice\n//\n// Order is important! The notices at the top are shown first.\nexport default [\n    {\n        name: 'apiv3_deprecation',\n        adminOnly: true,\n        title: (\n            <FormattedMarkdownMessage\n                id='system_notice.title'\n                defaultMessage='**Notice**\\nfrom Mattermost'\n            />\n        ),\n        icon: mattermostIcon,\n        body: (\n            <FormattedMarkdownMessage\n                id='system_notice.body.api3'\n                defaultMessage='If you’ve created or installed integrations in the last two years, find out how [recent changes](!https://about.mattermost.com/default-apiv3-deprecation-guide) may have affected them.'\n            />\n        ),\n        allowForget: true,\n        show: (serverVersion, config) => {\n            if (config.InstallationDate >= new Date(2018, 5, 16, 0, 0, 0, 0).getTime()) {\n                return false;\n            }\n            return true;\n        },\n    },\n    {\n        name: 'advanced_permissions',\n        adminOnly: true,\n        title: (\n            <FormattedMarkdownMessage\n                id='system_notice.title'\n                defaultMessage='**Notice**\\nfrom Mattermost'\n            />\n        ),\n        icon: mattermostIcon,\n        body: (\n            <FormattedMarkdownMessage\n                id='system_notice.body.permissions'\n                defaultMessage='Some policy and permission System Console settings have moved with the release of [advanced permissions](!https://about.mattermost.com/default-advanced-permissions) in Enterprise E10 and E20.'\n            />\n        ),\n        allowForget: true,\n        show: (serverVersion, config, license) => {\n            if (license.IsLicensed === 'false') {\n                return false;\n            }\n            if (config.InstallationDate > new Date(2018, 5, 16, 0, 0, 0, 0).getTime()) {\n                return false;\n            }\n            if (license.IsLicensed === 'true' && license.IssuedAt > new Date(2018, 5, 16, 0, 0, 0, 0).getTime()) {\n                return false;\n            }\n            return true;\n        },\n    },\n    {\n        name: 'ee_upgrade_advice',\n        adminOnly: true,\n        title: (\n            <FormattedMarkdownMessage\n                id='system_notice.title'\n                defaultMessage='**Notice**\\nfrom Mattermost'\n            />\n        ),\n        icon: mattermostIcon,\n        body: (\n            <FormattedMarkdownMessage\n                id='system_notice.body.ee_upgrade_advice'\n                defaultMessage='Enterprise Edition is recommended to ensure optimal operation and reliability. [Learn more](!https://mattermost.com/performance).'\n            />\n        ),\n        allowForget: false,\n        show: (serverVersion, config, license, analytics) => {\n            const USERS_THRESHOLD = 10000;\n\n            // If we don't have the analytics yet, don't show\n            if (!analytics.hasOwnProperty('TOTAL_USERS')) {\n                return false;\n            }\n\n            if (analytics.TOTAL_USERS < USERS_THRESHOLD) {\n                return false;\n            }\n\n            if (license.IsLicensed === 'true' && license.Cluster === 'true') {\n                return false;\n            }\n\n            return true;\n        },\n    },\n    {\n        name: 'ie11_deprecation',\n        title: (\n            <FormattedMarkdownMessage\n                id='system_notice.title'\n                defaultMessage='**Notice**\\nfrom Mattermost'\n            />\n        ),\n        icon: mattermostIcon,\n        allowForget: false,\n        body: (\n            <FormattedMarkdownMessage\n                id='system_notice.body.ie11_deprecation'\n                defaultMessage='Your browser, IE11, will no longer be supported in an upcoming release. [Find out how to move to another browser in one simple step](!https://forum.mattermost.org/t/mattermost-is-dropping-support-for-internet-explorer-ie11-in-v5-16/7575).'\n            />\n        ),\n        show: (serverVersion) => {\n            // Don't show the notice after v5.16, show a different notice\n            if (ServerVersion.isServerVersionGreaterThanOrEqualTo(serverVersion, '5.16.0')) {\n                return false;\n            }\n\n            // Only show if they're using IE\n            if (!UserAgent.isInternetExplorer()) {\n                return false;\n            }\n\n            return true;\n        },\n    },\n];\n","// Copyright (c) 2015-present Mattermost, Inc. All Rights Reserved.\n// See LICENSE.txt for license information.\n\nimport React from 'react';\nimport PropTypes from 'prop-types';\nimport {FormattedMessage, intlShape} from 'react-intl';\n\nimport {Preferences} from 'utils/constants.jsx';\nimport MattermostLogo from 'components/svg/mattermost_logo';\n\nexport default class SystemNotice extends React.PureComponent {\n    static propTypes = {\n        currentUserId: PropTypes.string.isRequired,\n        notices: PropTypes.arrayOf(PropTypes.object).isRequired,\n        preferences: PropTypes.object.isRequired,\n        dismissedNotices: PropTypes.object.isRequired,\n        isSystemAdmin: PropTypes.bool,\n        serverVersion: PropTypes.string.isRequired,\n        config: PropTypes.object.isRequired,\n        license: PropTypes.object.isRequired,\n        analytics: PropTypes.object,\n        actions: PropTypes.shape({\n            savePreferences: PropTypes.func.isRequired,\n            dismissNotice: PropTypes.func.isRequired,\n            getStandardAnalytics: PropTypes.func.isRequired,\n        }).isRequired,\n    }\n\n    static contextTypes = {\n        intl: intlShape.isRequired,\n    };\n\n    componentDidMount() {\n        if (this.props.isSystemAdmin) {\n            this.props.actions.getStandardAnalytics();\n        }\n    }\n\n    componentDidUpdate(prevProps) {\n        if (prevProps.isSystemAdmin !== this.props.isSystemAdmin && this.props.isSystemAdmin) {\n            this.props.actions.getStandardAnalytics();\n        }\n    }\n\n    getCurrentNotice = () => {\n        for (const notice of this.props.notices) {\n            // Skip if dismissed previously this session\n            if (this.props.dismissedNotices[notice.name]) {\n                continue;\n            }\n\n            // Skip if dismissed forever\n            if (this.props.preferences[notice.name]) {\n                continue;\n            }\n\n            if (notice.adminOnly && !this.props.isSystemAdmin) {\n                continue;\n            }\n\n            if (!notice.show(this.props.serverVersion, this.props.config, this.props.license, this.props.analytics)) {\n                continue;\n            }\n\n            return notice;\n        }\n        return null;\n    }\n\n    hide = (remind = false) => {\n        const notice = this.getCurrentNotice();\n        if (!notice) {\n            return;\n        }\n\n        if (!remind) {\n            this.props.actions.savePreferences(this.props.currentUserId, [{\n                user_id: this.props.currentUserId,\n                category: Preferences.CATEGORY_SYSTEM_NOTICE,\n                name: notice.name,\n                value: 'dismissed',\n            }]);\n        }\n\n        this.props.actions.dismissNotice(notice.name);\n    }\n\n    hideAndRemind = () => {\n        this.hide(true);\n    }\n\n    hideAndForget = () => {\n        this.hide(false);\n    }\n\n    render() {\n        const notice = this.getCurrentNotice();\n        const {formatMessage} = this.context.intl;\n\n        if (notice == null) {\n            return null;\n        }\n\n        let visibleMessage;\n        if (notice.adminOnly) {\n            visibleMessage = (\n                <div className='system-notice__info'>\n                    <i\n                        className='fa fa-eye'\n                        title={formatMessage({id: 'system_notice.adminVisible.icon', defaultMessage: 'Only visible to System Admins Icon'})}\n                    />\n                    <FormattedMessage\n                        id='system_notice.adminVisible'\n                        defaultMessage='Only visible to System Admins'\n                    />\n                </div>\n            );\n        }\n\n        return (\n            <div\n                className='system-notice bg--white shadow--2'\n            >\n                <div className='system-notice__header'>\n                    <div className='system-notice__logo'>\n                        <MattermostLogo/>\n                    </div>\n                    <div className='system-notice__title'>\n                        {notice.title}\n                    </div>\n                </div>\n                <div className='system-notice__body'>\n                    {notice.body}\n                </div>\n                {visibleMessage}\n                <div className='system-notice__footer'>\n                    <button\n                        id='systemnotice_remindme'\n                        className='btn btn-transparent'\n                        onClick={this.hideAndRemind}\n                    >\n                        <FormattedMessage\n                            id='system_notice.remind_me'\n                            defaultMessage='Remind me later'\n                        />\n                    </button>\n                    {notice.allowForget &&\n                        <button\n                            id='systemnotice_dontshow'\n                            className='btn btn-transparent'\n                            onClick={this.hideAndForget}\n                        >\n                            <FormattedMessage\n                                id='system_notice.dont_show'\n                                defaultMessage=\"Don't show again\"\n                            />\n                        </button>}\n                </div>\n            </div>\n        );\n    }\n}\n","// Copyright (c) 2015-present Mattermost, Inc. All Rights Reserved.\n// See LICENSE.txt for license information.\n\nimport {connect} from 'react-redux';\nimport {createSelector} from 'reselect';\nimport {bindActionCreators} from 'redux';\nimport {makeGetCategory} from 'mattermost-redux/selectors/entities/preferences';\nimport {getConfig, getLicense} from 'mattermost-redux/selectors/entities/general';\nimport {haveISystemPermission} from 'mattermost-redux/selectors/entities/roles';\nimport {savePreferences} from 'mattermost-redux/actions/preferences';\nimport {Permissions} from 'mattermost-redux/constants';\nimport {getStandardAnalytics} from 'mattermost-redux/actions/admin';\n\nimport {dismissNotice} from 'actions/views/notice';\nimport {Preferences} from 'utils/constants.jsx';\n\nimport Notices from './notices.jsx';\nimport SystemNotice from './system_notice.jsx';\n\nfunction makeMapStateToProps() {\n    const getCategory = makeGetCategory();\n\n    const getPreferenceNameMap = createSelector(\n        getCategory,\n        (preferences) => {\n            const nameMap = {};\n            preferences.forEach((p) => {\n                nameMap[p.name] = p;\n            });\n            return nameMap;\n        }\n    );\n\n    return function mapStateToProps(state) {\n        const license = getLicense(state);\n        const config = getConfig(state);\n        const serverVersion = state.entities.general.serverVersion;\n        const analytics = state.entities.admin.analytics;\n\n        return {\n            currentUserId: state.entities.users.currentUserId,\n            preferences: getPreferenceNameMap(state, Preferences.CATEGORY_SYSTEM_NOTICE),\n            dismissedNotices: state.views.notice.hasBeenDismissed,\n            isSystemAdmin: haveISystemPermission(state, {permission: Permissions.MANAGE_SYSTEM}),\n            notices: Notices,\n            config,\n            license,\n            serverVersion,\n            analytics,\n        };\n    };\n}\n\nfunction mapDispatchToProps(dispatch) {\n    return {\n        actions: bindActionCreators({\n            savePreferences,\n            dismissNotice,\n            getStandardAnalytics,\n        }, dispatch),\n    };\n}\n\nexport default connect(makeMapStateToProps, mapDispatchToProps)(SystemNotice);\n","// Copyright (c) 2015-present Mattermost, Inc. All Rights Reserved.\n// See LICENSE.txt for license information.\n\nconst MAX_WEBSOCKET_FAILS = 7;\nconst MIN_WEBSOCKET_RETRY_TIME = 3000; // 3 sec\nconst MAX_WEBSOCKET_RETRY_TIME = 300000; // 5 mins\n\nexport default class WebSocketClient {\n    constructor() {\n        this.conn = null;\n        this.connectionUrl = null;\n        this.sequence = 1;\n        this.eventSequence = 0;\n        this.connectFailCount = 0;\n        this.eventCallback = null;\n        this.responseCallbacks = {};\n        this.firstConnectCallback = null;\n        this.reconnectCallback = null;\n        this.missedEventCallback = null;\n        this.errorCallback = null;\n        this.closeCallback = null;\n    }\n\n    initialize(connectionUrl = this.connectionUrl, token) {\n        if (this.conn) {\n            return;\n        }\n\n        if (connectionUrl == null) {\n            console.log('websocket must have connection url'); //eslint-disable-line no-console\n            return;\n        }\n\n        if (this.connectFailCount === 0) {\n            console.log('websocket connecting to ' + connectionUrl); //eslint-disable-line no-console\n        }\n\n        this.conn = new WebSocket(connectionUrl);\n        this.connectionUrl = connectionUrl;\n\n        this.conn.onopen = () => {\n            this.eventSequence = 0;\n\n            if (token) {\n                this.sendMessage('authentication_challenge', {token});\n            }\n\n            if (this.connectFailCount > 0) {\n                console.log('websocket re-established connection'); //eslint-disable-line no-console\n                if (this.reconnectCallback) {\n                    this.reconnectCallback();\n                }\n            } else if (this.firstConnectCallback) {\n                this.firstConnectCallback();\n            }\n\n            this.connectFailCount = 0;\n        };\n\n        this.conn.onclose = () => {\n            this.conn = null;\n            this.sequence = 1;\n\n            if (this.connectFailCount === 0) {\n                console.log('websocket closed'); //eslint-disable-line no-console\n            }\n\n            this.connectFailCount++;\n\n            if (this.closeCallback) {\n                this.closeCallback(this.connectFailCount);\n            }\n\n            let retryTime = MIN_WEBSOCKET_RETRY_TIME;\n\n            // If we've failed a bunch of connections then start backing off\n            if (this.connectFailCount > MAX_WEBSOCKET_FAILS) {\n                retryTime = MIN_WEBSOCKET_RETRY_TIME * this.connectFailCount * this.connectFailCount;\n                if (retryTime > MAX_WEBSOCKET_RETRY_TIME) {\n                    retryTime = MAX_WEBSOCKET_RETRY_TIME;\n                }\n            }\n\n            setTimeout(\n                () => {\n                    this.initialize(connectionUrl, token);\n                },\n                retryTime\n            );\n        };\n\n        this.conn.onerror = (evt) => {\n            if (this.connectFailCount <= 1) {\n                console.log('websocket error'); //eslint-disable-line no-console\n                console.log(evt); //eslint-disable-line no-console\n            }\n\n            if (this.errorCallback) {\n                this.errorCallback(evt);\n            }\n        };\n\n        this.conn.onmessage = (evt) => {\n            const msg = JSON.parse(evt.data);\n            if (msg.seq_reply) {\n                if (msg.error) {\n                    console.log(msg); //eslint-disable-line no-console\n                }\n\n                if (this.responseCallbacks[msg.seq_reply]) {\n                    this.responseCallbacks[msg.seq_reply](msg);\n                    Reflect.deleteProperty(this.responseCallbacks, msg.seq_reply);\n                }\n            } else if (this.eventCallback) {\n                if (msg.seq !== this.eventSequence && this.missedEventCallback) {\n                    console.log('missed websocket event, act_seq=' + msg.seq + ' exp_seq=' + this.eventSequence); //eslint-disable-line no-console\n                    this.missedEventCallback();\n                }\n                this.eventSequence = msg.seq + 1;\n                this.eventCallback(msg);\n            }\n        };\n    }\n\n    setEventCallback(callback) {\n        this.eventCallback = callback;\n    }\n\n    setFirstConnectCallback(callback) {\n        this.firstConnectCallback = callback;\n    }\n\n    setReconnectCallback(callback) {\n        this.reconnectCallback = callback;\n    }\n\n    setMissedEventCallback(callback) {\n        this.missedEventCallback = callback;\n    }\n\n    setErrorCallback(callback) {\n        this.errorCallback = callback;\n    }\n\n    setCloseCallback(callback) {\n        this.closeCallback = callback;\n    }\n\n    close() {\n        this.connectFailCount = 0;\n        this.sequence = 1;\n        if (this.conn && this.conn.readyState === WebSocket.OPEN) {\n            this.conn.onclose = () => {}; //eslint-disable-line no-empty-function\n            this.conn.close();\n            this.conn = null;\n            console.log('websocket closed'); //eslint-disable-line no-console\n        }\n    }\n\n    sendMessage(action, data, responseCallback) {\n        const msg = {\n            action,\n            seq: this.sequence++,\n            data,\n        };\n\n        if (responseCallback) {\n            this.responseCallbacks[msg.seq] = responseCallback;\n        }\n\n        if (this.conn && this.conn.readyState === WebSocket.OPEN) {\n            this.conn.send(JSON.stringify(msg));\n        } else if (!this.conn || this.conn.readyState === WebSocket.CLOSED) {\n            this.conn = null;\n            this.initialize();\n        }\n    }\n\n    userTyping(channelId, parentId, callback) {\n        const data = {};\n        data.channel_id = channelId;\n        data.parent_id = parentId;\n\n        this.sendMessage('user_typing', data, callback);\n    }\n\n    userUpdateActiveStatus(userIsActive, manual, callback) {\n        const data = {\n            user_is_active: userIsActive,\n            manual,\n        };\n        this.sendMessage('user_update_active_status', data, callback);\n    }\n\n    getStatuses(callback) {\n        this.sendMessage('get_statuses', null, callback);\n    }\n\n    getStatusesByIds(userIds, callback) {\n        const data = {};\n        data.user_ids = userIds;\n        this.sendMessage('get_statuses_by_ids', data, callback);\n    }\n}\n","// Copyright (c) 2015-present Mattermost, Inc. All Rights Reserved.\n// See LICENSE.txt for license information.\n\nimport WebSocketClient from './websocket_client.jsx';\n\nvar WebClient = new WebSocketClient();\nexport default WebClient;\n","// Copyright (c) 2015-present Mattermost, Inc. All Rights Reserved.\n// See LICENSE.txt for license information.\n\nexport const getSocketStatus = (state) => state.websocket;\n","// Copyright (c) 2015-present Mattermost, Inc. All Rights Reserved.\n// See LICENSE.txt for license information.\n\nimport React from 'react';\n\nimport Provider from './provider.jsx';\nimport Suggestion from './suggestion.jsx';\n\nclass MenuActionSuggestion extends Suggestion {\n    render() {\n        const {item, isSelection} = this.props;\n\n        let className = 'mentions__name';\n        if (isSelection) {\n            className += ' suggestion--selected';\n        }\n\n        return (\n            <div\n                className={className}\n                onClick={this.handleClick}\n                {...Suggestion.baseProps}\n            >\n                {item.text}\n            </div>\n        );\n    }\n}\n\nexport default class MenuActionProvider extends Provider {\n    constructor(options) {\n        super();\n        this.options = options;\n    }\n\n    handlePretextChanged(prefix, resultsCallback) {\n        if (prefix.length === 0) {\n            this.displayAllOptions(resultsCallback);\n            return true;\n        }\n\n        if (prefix) {\n            this.filterOptions(prefix, resultsCallback);\n            return true;\n        }\n\n        return false;\n    }\n\n    async displayAllOptions(resultsCallback) {\n        const terms = this.options.map((option) => option.text);\n\n        resultsCallback({\n            matchedPretext: '',\n            terms,\n            items: this.options,\n            component: MenuActionSuggestion,\n        });\n    }\n\n    async filterOptions(prefix, resultsCallback) {\n        const filteredOptions = this.options.filter((option) => option.text.toLowerCase().indexOf(prefix) >= 0);\n        const terms = filteredOptions.map((option) => option.text);\n\n        resultsCallback({\n            matchedPretext: prefix,\n            terms,\n            items: filteredOptions,\n            component: MenuActionSuggestion,\n        });\n    }\n}\n","// Copyright (c) 2015-present Mattermost, Inc. All Rights Reserved.\n// See LICENSE.txt for license information.\n\nimport React from 'react';\n\nimport {autocompleteChannels} from 'actions/channel_actions.jsx';\n\nimport Provider from './provider.jsx';\nimport Suggestion from './suggestion.jsx';\n\nclass ChannelSuggestion extends Suggestion {\n    render() {\n        const isSelection = this.props.isSelection;\n        const item = this.props.item;\n\n        const channelName = item.display_name;\n        const purpose = item.purpose;\n\n        let className = 'mentions__name no-flex';\n        if (isSelection) {\n            className += ' suggestion--selected';\n        }\n\n        const description = '(~' + item.name + ')';\n\n        return (\n            <div\n                className={className}\n                onClick={this.handleClick}\n                {...Suggestion.baseProps}\n            >\n                <div className='mention__align'>\n                    <span>\n                        {channelName}\n                    </span>\n                    <span className='mention__channelname'>\n                        {' '}\n                        {description}\n                    </span>\n                </div>\n                <div className='mention__purpose'>\n                    {purpose}\n                </div>\n            </div>\n        );\n    }\n}\n\nexport default class ChannelProvider extends Provider {\n    handlePretextChanged(pretext, resultsCallback) {\n        const normalizedPretext = pretext.toLowerCase();\n        this.startNewRequest(normalizedPretext);\n\n        autocompleteChannels(\n            normalizedPretext,\n            (data) => {\n                if (this.shouldCancelDispatch(normalizedPretext)) {\n                    return;\n                }\n\n                const channels = Object.assign([], data);\n\n                resultsCallback({\n                    matchedPretext: normalizedPretext,\n                    terms: channels.map((channel) => channel.display_name),\n                    items: channels,\n                    component: ChannelSuggestion,\n                });\n            }\n        );\n\n        return true;\n    }\n}\n","// Copyright (c) 2015-present Mattermost, Inc. All Rights Reserved.\n// See LICENSE.txt for license information.\n\nimport PropTypes from 'prop-types';\nimport React from 'react';\n\nimport SuggestionBox from 'components/suggestion/suggestion_box.jsx';\nimport SuggestionList from 'components/suggestion/suggestion_list.jsx';\n\nexport default class AutocompleteSelector extends React.PureComponent {\n    static propTypes = {\n        providers: PropTypes.array.isRequired,\n        value: PropTypes.string.isRequired,\n        onSelected: PropTypes.func,\n        label: PropTypes.node,\n        labelClassName: PropTypes.string,\n        inputClassName: PropTypes.string,\n        helpText: PropTypes.node,\n        placeholder: PropTypes.string,\n        footer: PropTypes.node,\n    };\n\n    static defaultProps = {\n        value: '',\n        id: '',\n        labelClassName: '',\n        inputClassName: '',\n    };\n\n    constructor(props) {\n        super(props);\n\n        this.state = {\n            input: '',\n        };\n    }\n\n    onChange = (e) => {\n        if (!e || !e.target) {\n            return;\n        }\n\n        this.setState({input: e.target.value});\n    }\n\n    handleSelected = (selected) => {\n        this.setState({input: ''});\n\n        if (this.props.onSelected) {\n            this.props.onSelected(selected);\n        }\n\n        requestAnimationFrame(() => {\n            if (this.suggestionRef) {\n                this.suggestionRef.blur();\n            }\n        });\n    }\n\n    setSuggestionRef = (ref) => {\n        this.suggestionRef = ref;\n    }\n\n    onFocus = () => {\n        this.setState({focused: true});\n    }\n\n    onBlur = () => {\n        this.setState({focused: false});\n    }\n\n    render() {\n        const {\n            providers,\n            placeholder,\n            footer,\n            label,\n            labelClassName,\n            helpText,\n            inputClassName,\n            value,\n        } = this.props;\n\n        const {focused} = this.state;\n        let {input} = this.state;\n\n        if (!focused) {\n            input = value;\n        }\n\n        let labelContent;\n        if (label) {\n            labelContent = (\n                <label\n                    className={'control-label ' + labelClassName}\n                >\n                    {label}\n                </label>\n            );\n        }\n\n        let helpTextContent;\n        if (helpText) {\n            helpTextContent = (\n                <div className='help-text'>\n                    {helpText}\n                </div>\n            );\n        }\n\n        return (\n            <div className='form-group'>\n                {labelContent}\n                <div className={inputClassName}>\n                    <SuggestionBox\n                        placeholder={placeholder}\n                        ref={this.setSuggestionRef}\n                        listComponent={SuggestionList}\n                        className='form-control'\n                        containerClass='select-suggestion-container'\n                        value={input}\n                        onChange={this.onChange}\n                        onItemSelected={this.handleSelected}\n                        onFocus={this.onFocus}\n                        onBlur={this.onBlur}\n                        providers={providers}\n                        completeOnTab={true}\n                        renderDividers={false}\n                        renderNoResults={true}\n                        openOnFocus={true}\n                        openWhenEmpty={true}\n                        replaceAllInputOnSelect={true}\n                    />\n                    {helpTextContent}\n                    {footer}\n                </div>\n            </div>\n        );\n    }\n}","module.exports = function(cb) {\n\trequire.ensure([], function(require) {\n\t\tcb(require(\"!!../node_modules/babel-loader/lib/index.js??ref--4!./settings_sidebar.jsx\"));\n\t});\n}","// Copyright (c) 2015-present Mattermost, Inc. All Rights Reserved.\n// See LICENSE.txt for license information.\n\nexport function popOverOverlayPosition(targetBounds, innerHeight, spaceRequiredOptions) {\n    const {above, below} = spaceRequiredOptions;\n    let placement;\n\n    if (targetBounds.top > above) {\n        placement = 'top';\n    } else if (innerHeight - targetBounds.bottom > (below || above)) {\n        placement = 'bottom';\n    } else {\n        placement = 'left';\n    }\n    return placement;\n}\n","// Copyright (c) 2015-present Mattermost, Inc. All Rights Reserved.\n// See LICENSE.txt for license information.\n\nimport PropTypes from 'prop-types';\nimport React from 'react';\n\nimport LoadingSpinner from 'components/widgets/loading/loading_spinner.jsx';\n\nexport default function LoadingImagePreview({loading, progress, containerClass}) {\n    let progressView = (\n        <span className='loader-percent'/>\n    );\n\n    if (progress) {\n        progressView = (\n            <span className='loader-percent'>\n                {`${loading} ${progress}%`}\n            </span>\n        );\n    }\n\n    return (\n        <div className={containerClass}>\n            <LoadingSpinner/>\n            {progressView}\n        </div>\n    );\n}\n\nLoadingImagePreview.propTypes = {\n\n    /**\n     * The percent number of the progress\n     */\n    progress: PropTypes.number,\n\n    /**\n     * The loading message to display\n     */\n    loading: PropTypes.string,\n\n    /**\n     * Loading style\n     */\n    containerClass: PropTypes.string,\n};\n\nLoadingImagePreview.defaultProps = {\n    containerClass: 'view-image__loading',\n};\n","module.exports = function(cb) {\n\trequire.ensure([], function(require) {\n\t\tcb(require(\"!!../../node_modules/babel-loader/lib/index.js??ref--4!./index.js\"));\n\t});\n}","// Copyright (c) 2015-present Mattermost, Inc. All Rights Reserved.\n// See LICENSE.txt for license information.\n\nimport {ErrorPageTypes} from 'utils/constants.jsx';\n\nexport function importComponentSuccess(callback) {\n    return (comp) => callback(null, comp.default);\n}\n\nexport function createGetChildComponentsFunction(arrayOfComponents) {\n    return (locaiton, callback) => callback(null, arrayOfComponents);\n}\n\nexport const notFoundParams = {\n    type: ErrorPageTypes.PAGE_NOT_FOUND,\n};\n\nconst mfaPaths = [\n    '/mfa/setup',\n    '/mfa/confirm',\n];\n\nconst mfaAuthServices = [\n    '',\n    'email',\n    'ldap',\n];\n\nexport function checkIfMFARequired(user, license, config, path) {\n    if (license.MFA === 'true' &&\n            config.EnableMultifactorAuthentication === 'true' &&\n            config.EnforceMultifactorAuthentication === 'true' &&\n            mfaPaths.indexOf(path) === -1) {\n        if (user && !user.mfa_active &&\n                mfaAuthServices.indexOf(user.auth_service) !== -1) {\n            return true;\n        }\n    }\n\n    return false;\n}\n\n","// Copyright (c) 2015-present Mattermost, Inc. All Rights Reserved.\n// See LICENSE.txt for license information.\n\n/**\n * Compare server versions, ignoring the configuration hash and licensed status.\n *\n * For example, the following two server versions are considered equal:\n *     4.7.1.dev.3034fbc5fd566195d1b53e03890e35ff.true\n *     4.7.1.dev.d131dd02c5e6eec4693d9a0698aff95c.false\n *\n * but the following two are not\n *     4.7.0.dev.3034fbc5fd566195d1b53e03890e35ff.true\n *     4.7.1.dev.d131dd02c5e6eec4693d9a0698aff95c.true\n */\nexport function equalServerVersions(a, b) {\n    if (a === b) {\n        return true;\n    }\n\n    const ignoredComponents = 2;\n    const aIgnoringComponents = (a || '').split('.').slice(0, -ignoredComponents).join('.');\n    const bIgnoringComponents = (b || '').split('.').slice(0, -ignoredComponents).join('.');\n    if (aIgnoringComponents === bIgnoringComponents) {\n        return true;\n    }\n\n    return false;\n}\n\n/**\n * Boolean function to check if a server version is greater than another.\n *\n * currentVersion: The server version being checked\n * compareVersion: The version to compare the former version against\n *\n * eg.  currentVersion = 4.16.0, compareVersion = 4.17.0 returns false\n *      currentVersion = 4.16.1, compareVersion = 4.16.1 returns true\n */\nexport function isServerVersionGreaterThanOrEqualTo(currentVersion, compareVersion) {\n    if (currentVersion === compareVersion) {\n        return true;\n    }\n\n    // We only care about the numbers\n    const currentVersionNumber = (currentVersion || '').split('.').filter((x) => (/^[0-9]+$/).exec(x) !== null);\n    const compareVersionNumber = (compareVersion || '').split('.').filter((x) => (/^[0-9]+$/).exec(x) !== null);\n\n    for (var i = 0; i < Math.max(currentVersionNumber.length, compareVersionNumber.length); i++) {\n        if ((currentVersionNumber[i] || 0) > (compareVersionNumber[i] || 0)) {\n            return true;\n        }\n\n        if ((currentVersionNumber[i] || 0) < (compareVersionNumber[i] || 0)) {\n            return false;\n        }\n    }\n\n    // If all components are equal, then return true\n    return true;\n}\n","// Copyright (c) 2015-present Mattermost, Inc. All Rights Reserved.\n// See LICENSE.txt for license information.\n\nimport PropTypes from 'prop-types';\nimport React from 'react';\n\nexport default class AutosizeTextarea extends React.Component {\n    static propTypes = {\n        value: PropTypes.string,\n        defaultValue: PropTypes.string,\n        placeholder: PropTypes.string,\n        onChange: PropTypes.func,\n        onHeightChange: PropTypes.func,\n    };\n\n    static defaultProps = {\n        placeholder: '',\n    };\n\n    constructor(props) {\n        super(props);\n\n        this.height = 0;\n    }\n\n    get value() {\n        return this.refs.textarea.value;\n    }\n\n    set value(value) {\n        this.refs.textarea.value = value;\n    }\n\n    get selectionStart() {\n        return this.refs.textarea.selectionStart;\n    }\n\n    set selectionStart(selectionStart) {\n        this.refs.textarea.selectionStart = selectionStart;\n    }\n\n    get selectionEnd() {\n        return this.refs.textarea.selectionEnd;\n    }\n\n    set selectionEnd(selectionEnd) {\n        this.refs.textarea.selectionEnd = selectionEnd;\n    }\n\n    focus() {\n        this.refs.textarea.focus();\n    }\n\n    blur() {\n        this.refs.textarea.blur();\n    }\n\n    componentDidMount() {\n        this.recalculateSize();\n    }\n\n    componentDidUpdate() {\n        this.recalculateSize();\n    }\n\n    recalculateSize = () => {\n        if (!this.refs.reference || !this.refs.textarea) {\n            return;\n        }\n\n        const height = this.refs.reference.scrollHeight;\n        const textarea = this.refs.textarea;\n\n        if (height > 0 && height !== this.height) {\n            const style = getComputedStyle(textarea);\n            const borderWidth = parseInt(style.borderTopWidth, 10) + parseInt(style.borderBottomWidth, 10);\n\n            // Directly change the height to avoid circular rerenders\n            textarea.style.height = String(height + borderWidth) + 'px';\n\n            this.height = height;\n\n            if (this.props.onHeightChange) {\n                this.props.onHeightChange(height, parseInt(style.maxHeight, 10));\n            }\n        }\n    };\n\n    getDOMNode = () => {\n        return this.refs.textarea;\n    };\n\n    handleChange = (e) => {\n        if (this.props.onChange) {\n            this.props.onChange(e);\n        }\n    };\n\n    render() {\n        const props = {...this.props};\n\n        Reflect.deleteProperty(props, 'onHeightChange');\n        Reflect.deleteProperty(props, 'providers');\n        Reflect.deleteProperty(props, 'channelId');\n\n        const {\n            value,\n            defaultValue,\n            placeholder,\n            disabled,\n            onInput,\n\n            // TODO: The provided `id` is sometimes hard-coded and used to interface with the\n            // component, e.g. `post_textbox`, so it can't be changed. This would ideally be\n            // abstracted to avoid passing in an `id` prop at all, but we intentionally maintain\n            // the old behaviour to address ABC-213.\n            id,\n            ...otherProps\n        } = props;\n\n        const heightProps = {};\n\n        if (this.height <= 0) {\n            // Set an initial number of rows so that the textarea doesn't appear too large when its first rendered\n            heightProps.rows = 1;\n        } else {\n            heightProps.height = this.height;\n        }\n\n        let textareaPlaceholder = null;\n        const placeholderAriaLabel = placeholder.toLowerCase();\n        if (!this.props.value && !this.props.defaultValue) {\n            textareaPlaceholder = (\n                <div\n                    {...otherProps}\n                    style={style.placeholder}\n                >\n                    {placeholder}\n                </div>\n            );\n        }\n\n        return (\n            <div>\n                {textareaPlaceholder}\n                <textarea\n                    ref='textarea'\n                    id={id}\n                    {...heightProps}\n                    {...otherProps}\n                    role='textbox'\n                    aria-label={placeholderAriaLabel}\n                    disabled={disabled}\n                    onChange={this.handleChange}\n                    onInput={onInput}\n                    value={value}\n                    defaultValue={defaultValue}\n                />\n                <div style={style.container}>\n                    <textarea\n                        ref='reference'\n                        id={id + '-reference'}\n                        style={style.reference}\n                        disabled={true}\n                        rows='1'\n                        {...otherProps}\n                        value={value || defaultValue}\n                    />\n                </div>\n            </div>\n        );\n    }\n}\n\nconst style = {\n    container: {height: 0, overflow: 'hidden'},\n    reference: {height: 'auto', width: '100%'},\n    placeholder: {overflow: 'hidden', textOverflow: 'ellipsis', opacity: 0.5, pointerEvents: 'none', position: 'absolute', whiteSpace: 'nowrap'},\n};\n","// Copyright (c) 2015-present Mattermost, Inc. All Rights Reserved.\n// See LICENSE.txt for license information.\n\nimport React from 'react';\n\nimport {FormattedMessage} from 'react-intl';\n\nexport default class EditIcon extends React.PureComponent {\n    render() {\n        return (\n            <FormattedMessage\n                id='generic_icons.edit'\n                defaultMessage='Edit Icon'\n            >\n                {(title) => (\n                    <i\n                        className='fa fa-pencil'\n                        title={title}\n                    />\n                )}\n            </FormattedMessage>\n        );\n    }\n}\n","// Copyright (c) 2015-present Mattermost, Inc. All Rights Reserved.\n// See LICENSE.txt for license information.\n\nimport PropTypes from 'prop-types';\nimport React, {Component} from 'react';\nimport {FormattedMessage} from 'react-intl';\nimport {OverlayTrigger, Tooltip} from 'react-bootstrap';\n\nimport {Constants} from 'utils/constants.jsx';\nimport {fileSizeToString, localizeMessage} from 'utils/utils.jsx';\nimport * as FileUtils from 'utils/file_utils.jsx';\n\nimport LoadingWrapper from 'components/widgets/loading/loading_wrapper.jsx';\nimport FormError from 'components/form_error.jsx';\n\nimport FormattedMarkdownMessage from 'components/formatted_markdown_message.jsx';\n\nexport default class SettingPicture extends Component {\n    static defaultProps = {\n        imageContext: 'profile',\n    };\n\n    static propTypes = {\n        clientError: PropTypes.string,\n        serverError: PropTypes.string,\n        src: PropTypes.string,\n        defaultImageSrc: PropTypes.string,\n        file: PropTypes.object,\n        loadingPicture: PropTypes.bool,\n        submitActive: PropTypes.bool,\n        onRemove: PropTypes.func,\n        onSetDefault: PropTypes.func,\n        onSubmit: PropTypes.func,\n        title: PropTypes.string,\n        onFileChange: PropTypes.func,\n        updateSection: PropTypes.func,\n        imageContext: PropTypes.string,\n        maxFileSize: PropTypes.number,\n    };\n\n    constructor(props) {\n        super(props);\n\n        this.settingList = React.createRef();\n        this.selectInput = React.createRef();\n        this.confirmButton = React.createRef();\n\n        this.state = {\n            image: null,\n            removeSrc: false,\n            setDefaultSrc: false,\n        };\n    }\n\n    focusFirstElement() {\n        if (this.settingList.current) {\n            this.settingList.current.focus();\n        }\n    }\n\n    componentDidMount() {\n        this.focusFirstElement();\n\n        if (this.selectInput.current) {\n            this.selectInput.current.addEventListener('input', this.handleFileSelected);\n        }\n    }\n\n    UNSAFE_componentWillReceiveProps(nextProps) { // eslint-disable-line camelcase\n        if (nextProps.file !== this.props.file) {\n            this.setState({image: null});\n\n            this.setPicture(nextProps.file);\n        }\n    }\n\n    componentWillUnmount() {\n        if (this.previewBlob) {\n            URL.revokeObjectURL(this.previewBlob);\n        }\n\n        if (this.selectInput.current) {\n            this.selectInput.current.removeEventListener('input', this.handleFileSelected);\n        }\n    }\n\n    handleCancel = (e) => {\n        this.setState({removeSrc: false, setDefaultSrc: false});\n        this.props.updateSection(e);\n    }\n\n    handleFileSelected = () => {\n        if (this.confirmButton.current) {\n            this.confirmButton.current.focus();\n        }\n    }\n\n    handleSave = (e) => {\n        e.preventDefault();\n        if (this.state.removeSrc) {\n            this.props.onRemove();\n        } else if (this.state.setDefaultSrc) {\n            this.props.onSetDefault();\n        } else {\n            this.props.onSubmit();\n        }\n    }\n\n    handleRemoveSrc = (e) => {\n        e.preventDefault();\n        this.setState({removeSrc: true});\n        this.focusFirstElement();\n    }\n\n    handleSetDefaultSrc = (e) => {\n        e.preventDefault();\n        this.setState({setDefaultSrc: true});\n        this.focusFirstElement();\n    }\n\n    handleFileChange = (e) => {\n        this.setState({removeSrc: false, setDefaultSrc: false});\n        this.props.onFileChange(e);\n    }\n\n    handleInputFile = () => {\n        this.selectInput.current.value = '';\n        this.selectInput.current.click();\n    }\n\n    setPicture = (file) => {\n        if (file) {\n            this.previewBlob = URL.createObjectURL(file);\n\n            var reader = new FileReader();\n            reader.onload = (e) => {\n                const orientation = FileUtils.getExifOrientation(e.target.result);\n                const orientationStyles = FileUtils.getOrientationStyles(orientation);\n\n                this.setState({\n                    image: this.previewBlob,\n                    orientationStyles,\n                });\n            };\n            reader.readAsArrayBuffer(file);\n        }\n    }\n\n    renderImg = () => {\n        const imageContext = this.props.imageContext;\n\n        if (this.props.file) {\n            const imageStyles = {\n                backgroundImage: 'url(' + this.state.image + ')',\n                ...this.state.orientationStyles,\n            };\n\n            return (\n                <div className={`${imageContext}-img-preview`}>\n                    <div className='img-preview__image'>\n                        <div\n                            alt={`${imageContext} image preview`}\n                            style={imageStyles}\n                            className={`${imageContext}-img-preview`}\n                        />\n                    </div>\n                </div>\n            );\n        }\n\n        if (this.state.setDefaultSrc) {\n            return (\n                <img\n                    className={`${imageContext}-img`}\n                    alt={`${imageContext} image`}\n                    src={this.props.defaultImageSrc}\n                />\n            );\n        }\n\n        if (this.props.src && !this.state.removeSrc) {\n            const imageElement = (\n                <img\n                    className={`${imageContext}-img`}\n                    alt={`${imageContext} image`}\n                    src={this.props.src}\n                />\n            );\n            if (!this.props.onRemove && !this.props.onSetDefault) {\n                return imageElement;\n            }\n\n            let title;\n            let handler;\n            if (this.props.onRemove) {\n                title = (\n                    <FormattedMessage\n                        id='setting_picture.remove'\n                        defaultMessage='Remove this icon'\n                    />\n                );\n                handler = this.handleRemoveSrc;\n            } else if (this.props.onSetDefault) {\n                title = (\n                    <FormattedMessage\n                        id='setting_picture.remove_profile_picture'\n                        defaultMessage='Remove profile picture'\n                    />\n                );\n                handler = this.handleSetDefaultSrc;\n            }\n\n            return (\n                <div className={`${imageContext}-img__container`}>\n                    <div\n                        className='img-preview__image'\n                        aria-hidden={true}\n                    >\n                        {imageElement}\n                    </div>\n                    <OverlayTrigger\n                        delayShow={Constants.OVERLAY_TIME_DELAY}\n                        placement='right'\n                        overlay={(\n                            <Tooltip id='removeIcon'>\n                                <div aria-hidden={true}>\n                                    {title}\n                                </div>\n                            </Tooltip>\n                        )}\n                    >\n                        <button\n                            className={`${imageContext}-img__remove`}\n                            onClick={handler}\n                        >\n                            <span aria-hidden={true}>{'×'}</span>\n                            <span className='sr-only'>{title}</span>\n                        </button>\n                    </OverlayTrigger>\n                </div>\n            );\n        }\n        return null;\n    }\n\n    render() {\n        const imageContext = this.props.imageContext;\n\n        const img = this.renderImg();\n\n        let confirmButtonClass = 'btn btn-sm';\n        let disableSaveButtonFocus = false;\n        if (this.props.submitActive || this.state.removeSrc || this.state.setDefaultSrc) {\n            confirmButtonClass += ' btn-primary';\n        } else {\n            confirmButtonClass += ' btn-inactive disabled';\n            disableSaveButtonFocus = true;\n        }\n\n        let helpText;\n        if (imageContext === 'team') {\n            helpText = (\n                <FormattedMarkdownMessage\n                    id={'setting_picture.help.team'}\n                    defaultMessage='Upload a team icon in BMP, JPG or PNG format.\\nSquare images with a solid background color are recommended.'\n                />\n            );\n        } else {\n            helpText = (\n                <FormattedMessage\n                    id={'setting_picture.help.profile'}\n                    defaultMessage='Upload a picture in BMP, JPG or PNG format. Maximum file size: {max}'\n                    values={{max: fileSizeToString(this.props.maxFileSize)}}\n                />\n            );\n        }\n\n        let imgRender;\n        if (img) {\n            imgRender = (\n                <li\n                    className='setting-list-item'\n                    role='presentation'\n                >\n                    {img}\n                </li>\n            );\n        }\n\n        return (\n            <ul className='section-max form-horizontal'>\n                <li className='col-xs-12 section-title'>{this.props.title}</li>\n                <li className='col-xs-offset-3 col-xs-8'>\n                    <ul\n                        className='setting-list'\n                        ref={this.settingList}\n                        tabIndex='-1'\n                        aria-label={this.props.title}\n                        aria-describedby='setting-picture__helptext'\n                    >\n                        {imgRender}\n                        <li\n                            id='setting-picture__helptext'\n                            className='setting-list-item padding-top x2'\n                            role='presentation'\n                        >\n                            {helpText}\n                        </li>\n                        <li\n                            className='setting-list-item'\n                            role='presentation'\n                        >\n                            <hr/>\n                            <FormError\n                                errors={[this.props.clientError, this.props.serverError]}\n                                type={'modal'}\n                            />\n                            <input\n                                ref={this.selectInput}\n                                className='hidden'\n                                accept='.jpg,.png,.bmp'\n                                type='file'\n                                onChange={this.handleFileChange}\n                                disabled={this.props.loadingPicture}\n                                aria-hidden={true}\n                                tabIndex='-1'\n                            />\n                            <button\n                                className='btn btn-sm btn-primary btn-file sel-btn'\n                                disabled={this.props.loadingPicture}\n                                onClick={this.handleInputFile}\n                                aria-label={localizeMessage('setting_picture.select', 'Select')}\n                            >\n                                <FormattedMessage\n                                    id='setting_picture.select'\n                                    defaultMessage='Select'\n                                />\n                            </button>\n                            <button\n                                tabIndex={disableSaveButtonFocus ? '-1' : '0'}\n                                ref={this.confirmButton}\n                                className={confirmButtonClass}\n                                onClick={this.props.loadingPicture ? () => true : this.handleSave}\n                                aria-label={this.props.loadingPicture ? localizeMessage('setting_picture.uploading', 'Uploading...') : localizeMessage('setting_picture.save', 'Save')}\n                            >\n                                <LoadingWrapper\n                                    loading={this.props.loadingPicture}\n                                    text={localizeMessage('setting_picture.uploading', 'Uploading...')}\n                                >\n                                    <FormattedMessage\n                                        id='setting_picture.save'\n                                        defaultMessage='Save'\n                                    />\n                                </LoadingWrapper>\n                            </button>\n                            <button\n                                className='btn btn-link btn-sm theme'\n                                href='#'\n                                onClick={this.handleCancel}\n                                aria-label={localizeMessage('setting_picture.cancel', 'Cancel')}\n                            >\n                                <FormattedMessage\n                                    id='setting_picture.cancel'\n                                    defaultMessage='Cancel'\n                                />\n                            </button>\n                        </li>\n                    </ul>\n                </li>\n            </ul>\n        );\n    }\n}\n","// Copyright (c) 2015-present Mattermost, Inc. All Rights Reserved.\n// See LICENSE.txt for license information.\n\nimport React from 'react';\nimport PropTypes from 'prop-types';\n\nimport menuItem from './menu_item.jsx';\n\nexport const MenuItemExternalLinkImpl = ({url, text}) => (\n    <a\n        target='_blank'\n        rel='noopener noreferrer'\n        href={url}\n    >\n        {text}\n    </a>\n);\nMenuItemExternalLinkImpl.propTypes = {\n    url: PropTypes.string.isRequired,\n    text: PropTypes.oneOfType([PropTypes.string, PropTypes.node]).isRequired,\n};\n\nconst MenuItemExternalLink = menuItem(MenuItemExternalLinkImpl);\nMenuItemExternalLink.displayName = 'MenuItemExternalLink';\nexport default MenuItemExternalLink;\n","// Copyright (c) 2015-present Mattermost, Inc. All Rights Reserved.\n// See LICENSE.txt for license information.\n\nimport PropTypes from 'prop-types';\nimport React from 'react';\nimport {Client4} from 'mattermost-redux/client';\n\nimport * as Utils from 'utils/utils.jsx';\nimport ProfilePicture from 'components/profile_picture.jsx';\nimport BotBadge from 'components/widgets/badges/bot_badge.jsx';\n\nimport FormattedMarkdownMessage from 'components/formatted_markdown_message.jsx';\n\nexport default class UserListRow extends React.Component {\n    static propTypes = {\n        user: PropTypes.object.isRequired,\n        status: PropTypes.string,\n        extraInfo: PropTypes.arrayOf(PropTypes.object),\n        actions: PropTypes.arrayOf(PropTypes.func),\n        actionProps: PropTypes.object,\n        actionUserProps: PropTypes.object,\n        index: PropTypes.number,\n        totalUsers: PropTypes.number,\n        userCount: PropTypes.number,\n    };\n\n    static defaultProps = {\n        extraInfo: [],\n        actions: [],\n        actionProps: {},\n        actionUserProps: {},\n    };\n\n    render() {\n        let buttons = null;\n        if (this.props.actions) {\n            buttons = this.props.actions.map((Action, index) => {\n                return (\n                    <Action\n                        key={index.toString()}\n                        user={this.props.user}\n                        index={this.props.index}\n                        totalUsers={this.props.totalUsers}\n                        {...this.props.actionProps}\n                        {...this.props.actionUserProps}\n                    />\n                );\n            });\n        }\n\n        // QUICK HACK, NEEDS A PROP FOR TOGGLING STATUS\n        let email = this.props.user.email;\n        let emailStyle = 'more-modal__description';\n        let status;\n        if (this.props.extraInfo && this.props.extraInfo.length > 0) {\n            email = (\n                <FormattedMarkdownMessage\n                    id='admin.user_item.emailTitle'\n                    defaultMessage='**Email:** {email}'\n                    values={{\n                        email: this.props.user.email,\n                    }}\n                />\n            );\n            emailStyle = '';\n        } else if (this.props.user.status) {\n            status = this.props.user.status;\n        } else {\n            status = this.props.status;\n        }\n\n        if (this.props.user.is_bot) {\n            status = null;\n            email = null;\n        }\n\n        let userCountID = null;\n        let userCountEmail = null;\n        if (this.props.userCount >= 0) {\n            userCountID = Utils.createSafeId('userListRowName' + this.props.userCount);\n            userCountEmail = Utils.createSafeId('userListRowEmail' + this.props.userCount);\n        }\n\n        return (\n            <div\n                key={this.props.user.id}\n                className='more-modal__row'\n            >\n                <ProfilePicture\n                    src={Client4.getProfilePictureUrl(this.props.user.id, this.props.user.last_picture_update)}\n                    status={status}\n                    width='32'\n                    height='32'\n                />\n                <div\n                    className='more-modal__details'\n                >\n                    <div\n                        id={userCountID}\n                        className='more-modal__name'\n                    >\n                        {Utils.displayEntireNameForUser(this.props.user)}\n                        <BotBadge\n                            className='badge-popoverlist'\n                            show={Boolean(this.props.user.is_bot)}\n                        />\n                    </div>\n                    <div\n                        id={userCountEmail}\n                        className={emailStyle}\n                    >\n                        {email}\n                    </div>\n                    {this.props.extraInfo}\n                </div>\n                <div\n                    className='more-modal__actions'\n                >\n                    {buttons}\n                </div>\n            </div>\n        );\n    }\n}\n","// Copyright (c) 2015-present Mattermost, Inc. All Rights Reserved.\n// See LICENSE.txt for license information.\n\nimport {connect} from 'react-redux';\nimport {getStatusForUserId} from 'mattermost-redux/selectors/entities/users';\n\nimport UserListRow from './user_list_row.jsx';\n\nfunction mapStateToProps(state, ownProps) {\n    const user = ownProps.user || {};\n    return {\n        status: getStatusForUserId(state, user.id),\n    };\n}\n\nexport default connect(mapStateToProps)(UserListRow);\n","// Copyright (c) 2015-present Mattermost, Inc. All Rights Reserved.\n// See LICENSE.txt for license information.\n\nimport PropTypes from 'prop-types';\nimport React from 'react';\nimport {FormattedMessage} from 'react-intl';\n\nimport Constants from 'utils/constants.jsx';\nimport LoadingScreen from 'components/loading_screen.jsx';\n\nimport UserListRow from './user_list_row';\n\nexport default class UserList extends React.Component {\n    static propTypes = {\n        users: PropTypes.arrayOf(PropTypes.object),\n        extraInfo: PropTypes.object,\n        actions: PropTypes.arrayOf(PropTypes.func),\n        actionProps: PropTypes.object,\n        actionUserProps: PropTypes.object,\n\n        // the type of user list row to render\n        rowComponentType: PropTypes.func,\n    }\n\n    static defaultProps = {\n        users: [],\n        extraInfo: {},\n        actions: [],\n        actionProps: {},\n        rowComponentType: UserListRow,\n    }\n\n    constructor(props) {\n        super(props);\n\n        this.scrollToTop = this.scrollToTop.bind(this);\n    }\n\n    scrollToTop() {\n        if (this.refs.container) {\n            this.refs.container.scrollTop = 0;\n        }\n    }\n\n    render() {\n        const users = this.props.users;\n        const RowComponentType = this.props.rowComponentType;\n\n        let content;\n        if (users == null) {\n            return <LoadingScreen/>;\n        } else if (users.length > 0) {\n            content = users.map((user, index) => {\n                return (\n                    <RowComponentType\n                        key={user.id}\n                        user={user}\n                        extraInfo={this.props.extraInfo[user.id]}\n                        actions={this.props.actions}\n                        actionProps={this.props.actionProps}\n                        actionUserProps={this.props.actionUserProps[user.id]}\n                        index={index}\n                        totalUsers={users.length}\n                        userCount={(index >= 0 && index < Constants.TEST_ID_COUNT) ? index : -1}\n                    />\n                );\n            });\n        } else {\n            content = (\n                <div\n                    key='no-users-found'\n                    className='more-modal__placeholder-row'\n                >\n                    <p>\n                        <FormattedMessage\n                            id='user_list.notFound'\n                            defaultMessage='No users found'\n                        />\n                    </p>\n                </div>\n            );\n        }\n\n        return (\n            <div ref='container'>\n                {content}\n            </div>\n        );\n    }\n}","// Copyright (c) 2015-present Mattermost, Inc. All Rights Reserved.\n// See LICENSE.txt for license information.\n\nimport $ from 'jquery';\nimport PropTypes from 'prop-types';\nimport React from 'react';\nimport ReactDOM from 'react-dom';\nimport {FormattedMessage} from 'react-intl';\n\nimport QuickInput from 'components/quick_input';\nimport UserList from 'components/user_list.jsx';\nimport LocalizedInput from 'components/localized_input/localized_input';\n\nimport {t} from 'utils/i18n';\n\nconst NEXT_BUTTON_TIMEOUT = 500;\n\nexport default class SearchableUserList extends React.Component {\n    static propTypes = {\n        users: PropTypes.arrayOf(PropTypes.object),\n        usersPerPage: PropTypes.number,\n        total: PropTypes.number,\n        extraInfo: PropTypes.object,\n        nextPage: PropTypes.func.isRequired,\n        previousPage: PropTypes.func.isRequired,\n        search: PropTypes.func.isRequired,\n        actions: PropTypes.arrayOf(PropTypes.func),\n        actionProps: PropTypes.object,\n        actionUserProps: PropTypes.object,\n        focusOnMount: PropTypes.bool,\n        renderCount: PropTypes.func,\n        filter: PropTypes.string,\n        renderFilterRow: PropTypes.func,\n\n        page: PropTypes.number.isRequired,\n        term: PropTypes.string.isRequired,\n        onTermChange: PropTypes.func.isRequired,\n\n        // the type of user list row to render\n        rowComponentType: PropTypes.func,\n    };\n\n    static defaultProps = {\n        users: [],\n        usersPerPage: 50, // eslint-disable-line no-magic-numbers\n        extraInfo: {},\n        actions: [],\n        actionProps: {},\n        actionUserProps: {},\n        showTeamToggle: false,\n        focusOnMount: false,\n    };\n\n    constructor(props) {\n        super(props);\n\n        this.nextPage = this.nextPage.bind(this);\n        this.previousPage = this.previousPage.bind(this);\n        this.focusSearchBar = this.focusSearchBar.bind(this);\n\n        this.handleInput = this.handleInput.bind(this);\n\n        this.renderCount = this.renderCount.bind(this);\n\n        this.nextTimeoutId = 0;\n\n        this.state = {\n            nextDisabled: false,\n        };\n    }\n\n    componentDidMount() {\n        this.focusSearchBar();\n    }\n\n    componentDidUpdate(prevProps) {\n        if (this.props.page !== prevProps.page || this.props.term !== prevProps.term) {\n            this.refs.userList.scrollToTop();\n        }\n    }\n\n    componentWillUnmount() {\n        clearTimeout(this.nextTimeoutId);\n    }\n\n    nextPage(e) {\n        e.preventDefault();\n\n        this.setState({nextDisabled: true});\n        this.nextTimeoutId = setTimeout(() => this.setState({nextDisabled: false}), NEXT_BUTTON_TIMEOUT);\n\n        this.props.nextPage();\n        $(ReactDOM.findDOMNode(this.refs.channelListScroll)).scrollTop(0);\n    }\n\n    previousPage(e) {\n        e.preventDefault();\n\n        this.props.previousPage();\n        $(ReactDOM.findDOMNode(this.refs.channelListScroll)).scrollTop(0);\n    }\n\n    focusSearchBar() {\n        if (this.props.focusOnMount) {\n            this.refs.filter.focus();\n        }\n    }\n\n    handleInput(e) {\n        this.props.onTermChange(e.target.value);\n        this.props.search(e.target.value);\n    }\n\n    renderCount(users) {\n        if (!users) {\n            return null;\n        }\n\n        if (this.props.filter) {\n            return null;\n        }\n\n        const count = users.length;\n        const total = this.props.total;\n        const isSearch = Boolean(this.props.term);\n\n        let startCount;\n        let endCount;\n        if (isSearch) {\n            startCount = -1;\n            endCount = -1;\n        } else {\n            startCount = this.props.page * this.props.usersPerPage;\n            endCount = Math.min(startCount + this.props.usersPerPage, total);\n        }\n\n        if (this.props.renderCount) {\n            return this.props.renderCount(count, this.props.total, startCount, endCount, isSearch);\n        }\n\n        if (this.props.total) {\n            if (isSearch) {\n                return (\n                    <FormattedMessage\n                        id='filtered_user_list.countTotal'\n                        defaultMessage='{count, number} {count, plural, one {member} other {members}} of {total, number} total'\n                        values={{\n                            count,\n                            total,\n                        }}\n                    />\n                );\n            }\n\n            return (\n                <FormattedMessage\n                    id='filtered_user_list.countTotalPage'\n                    defaultMessage='{startCount, number} - {endCount, number} {count, plural, one {member} other {members}} of {total, number} total'\n                    values={{\n                        count,\n                        startCount: startCount + 1,\n                        endCount,\n                        total,\n                    }}\n                />\n            );\n        }\n\n        return null;\n    }\n\n    render() {\n        let nextButton;\n        let previousButton;\n        let usersToDisplay;\n\n        if (this.props.term || !this.props.users) {\n            usersToDisplay = this.props.users;\n        } else if (!this.props.term) {\n            const pageStart = this.props.page * this.props.usersPerPage;\n            const pageEnd = pageStart + this.props.usersPerPage;\n            usersToDisplay = this.props.users.slice(pageStart, pageEnd);\n\n            if (pageEnd < this.props.users.length) {\n                nextButton = (\n                    <button\n                        id='searchableUserListNextBtn'\n                        className='btn btn-link filter-control filter-control__next'\n                        onClick={this.nextPage}\n                        disabled={this.state.nextDisabled}\n                    >\n                        <FormattedMessage\n                            id='filtered_user_list.next'\n                            defaultMessage='Next'\n                        />\n                    </button>\n                );\n            }\n\n            if (this.props.page > 0) {\n                previousButton = (\n                    <button\n                        id='searchableUserListPrevBtn'\n                        className='btn btn-link filter-control filter-control__prev'\n                        onClick={this.previousPage}\n                    >\n                        <FormattedMessage\n                            id='filtered_user_list.prev'\n                            defaultMessage='Previous'\n                        />\n                    </button>\n                );\n            }\n        }\n\n        let filterRow;\n        if (this.props.renderFilterRow) {\n            filterRow = this.props.renderFilterRow(this.handleInput);\n        } else {\n            filterRow = (\n                <div className='col-xs-12'>\n                    <QuickInput\n                        id='searchUsersInput'\n                        ref='filter'\n                        className='form-control filter-textbox'\n                        placeholder={{id: t('filtered_user_list.search'), defaultMessage: 'Search users'}}\n                        inputComponent={LocalizedInput}\n                        value={this.props.term}\n                        onInput={this.handleInput}\n                    />\n                </div>\n            );\n        }\n\n        return (\n            <div className='filtered-user-list'>\n                <div className='filter-row'>\n                    {filterRow}\n                    <div className='col-sm-12'>\n                        <span\n                            id='searchableUserListTotal'\n                            className='member-count pull-left'\n                            aria-live='polite'\n                        >\n                            {this.renderCount(usersToDisplay)}\n                        </span>\n                    </div>\n                </div>\n                <div className='more-modal__list'>\n                    <UserList\n                        ref='userList'\n                        users={usersToDisplay}\n                        extraInfo={this.props.extraInfo}\n                        actions={this.props.actions}\n                        actionProps={this.props.actionProps}\n                        actionUserProps={this.props.actionUserProps}\n                        rowComponentType={this.props.rowComponentType}\n                    />\n                </div>\n                <div className='filter-controls'>\n                    {previousButton}\n                    {nextButton}\n                </div>\n            </div>\n        );\n    }\n}\n","// Copyright (c) 2015-present Mattermost, Inc. All Rights Reserved.\n// See LICENSE.txt for license information.\n\nimport React from 'react';\nimport PropTypes from 'prop-types';\n\nimport {FormattedMessage} from 'react-intl';\n\nimport MenuActionProvider from 'components/suggestion/menu_action_provider';\nimport GenericUserProvider from 'components/suggestion/generic_user_provider.jsx';\nimport GenericChannelProvider from 'components/suggestion/generic_channel_provider.jsx';\n\nimport TextSetting from 'components/widgets/settings/text_setting';\nimport AutocompleteSelector from 'components/widgets/settings/autocomplete_selector';\n\nconst TEXT_DEFAULT_MAX_LENGTH = 150;\nconst TEXTAREA_DEFAULT_MAX_LENGTH = 3000;\n\nexport default class DialogElement extends React.PureComponent {\n    static propTypes = {\n        displayName: PropTypes.string.isRequired,\n        name: PropTypes.string.isRequired,\n        type: PropTypes.string.isRequired,\n        subtype: PropTypes.string,\n        placeholder: PropTypes.string,\n        helpText: PropTypes.string,\n        errorText: PropTypes.node,\n        maxLength: PropTypes.number,\n        dataSource: PropTypes.string,\n        optional: PropTypes.bool,\n        options: PropTypes.arrayOf(PropTypes.object),\n        value: PropTypes.any,\n        onChange: PropTypes.func,\n    }\n\n    constructor(props) {\n        super(props);\n\n        this.providers = [];\n        if (props.type === 'select') {\n            if (props.dataSource === 'users') {\n                this.providers = [new GenericUserProvider()];\n            } else if (props.dataSource === 'channels') {\n                this.providers = [new GenericChannelProvider()];\n            } else if (props.options) {\n                this.providers = [new MenuActionProvider(props.options)];\n            }\n        }\n\n        this.state = {\n            value: '',\n        };\n    }\n\n    handleSelected = (selected) => {\n        const {name, dataSource, onChange} = this.props;\n\n        if (dataSource === 'users') {\n            onChange(name, selected.id);\n            this.setState({value: selected.username});\n        } else if (dataSource === 'channels') {\n            onChange(name, selected.id);\n            this.setState({value: selected.display_name});\n        } else {\n            onChange(name, selected.value);\n            this.setState({value: selected.text});\n        }\n    }\n\n    render() {\n        const {\n            name,\n            subtype,\n            displayName,\n            value,\n            placeholder,\n            onChange,\n            helpText,\n            errorText,\n            optional,\n        } = this.props;\n\n        let {type, maxLength} = this.props;\n\n        let displayNameContent = displayName;\n        if (optional) {\n            displayNameContent = (\n                <React.Fragment>\n                    {displayName + ' '}\n                    <span className='font-weight--normal light'>\n                        <FormattedMessage\n                            id='interactive_dialog.element.optional'\n                            defaultMessage='(optional)'\n                        />\n                    </span>\n                </React.Fragment>\n            );\n        } else {\n            displayNameContent = (\n                <React.Fragment>\n                    {displayName}\n                    <span className='error-text'>{' *'}</span>\n                </React.Fragment>\n            );\n        }\n\n        let helpTextContent = helpText;\n        if (errorText) {\n            helpTextContent = (\n                <React.Fragment>\n                    {helpText}\n                    <div className='error-text margin-top x2'>\n                        {errorText}\n                    </div>\n                </React.Fragment>\n            );\n        }\n\n        if (type === 'text' || type === 'textarea') {\n            if (type === 'text') {\n                maxLength = maxLength || TEXT_DEFAULT_MAX_LENGTH;\n\n                if (subtype && TextSetting.validTypes.includes(subtype)) {\n                    type = subtype;\n                } else {\n                    type = 'input';\n                }\n            } else {\n                maxLength = maxLength || TEXTAREA_DEFAULT_MAX_LENGTH;\n            }\n\n            return (\n                <TextSetting\n                    id={name}\n                    type={type}\n                    label={displayNameContent}\n                    maxLength={maxLength}\n                    value={value || ''}\n                    placeholder={placeholder}\n                    helpText={helpTextContent}\n                    onChange={onChange}\n                    resizable={false}\n                />\n            );\n        } else if (type === 'select') {\n            return (\n                <AutocompleteSelector\n                    id={name}\n                    providers={this.providers}\n                    onSelected={this.handleSelected}\n                    label={displayNameContent}\n                    helpText={helpTextContent}\n                    placeholder={placeholder}\n                    value={this.state.value}\n                />\n            );\n        }\n\n        return null;\n    }\n}\n","// Copyright (c) 2015-present Mattermost, Inc. All Rights Reserved.\n// See LICENSE.txt for license information.\n\nimport React from 'react';\nimport PropTypes from 'prop-types';\nimport {Modal} from 'react-bootstrap';\nimport {FormattedMessage} from 'react-intl';\nimport {checkDialogElementForError, checkIfErrorsMatchElements} from 'mattermost-redux/utils/integration_utils';\n\nimport SpinnerButton from 'components/spinner_button';\n\nimport {localizeMessage} from 'utils/utils.jsx';\n\nimport DialogElement from './dialog_element';\n\nexport default class InteractiveDialog extends React.Component {\n    static propTypes = {\n        url: PropTypes.string.isRequired,\n        callbackId: PropTypes.string,\n        elements: PropTypes.arrayOf(PropTypes.object),\n        title: PropTypes.string.isRequired,\n        iconUrl: PropTypes.string,\n        submitLabel: PropTypes.string,\n        notifyOnCancel: PropTypes.bool,\n        state: PropTypes.string,\n        onHide: PropTypes.func,\n        actions: PropTypes.shape({\n            submitInteractiveDialog: PropTypes.func.isRequired,\n        }).isRequired,\n    }\n\n    constructor(props) {\n        super(props);\n\n        const values = {};\n        if (props.elements != null) {\n            props.elements.forEach((e) => {\n                values[e.name] = e.default || null;\n            });\n        }\n\n        this.state = {\n            show: true,\n            values,\n            errors: {},\n            submitting: false,\n        };\n    }\n\n    handleSubmit = async (e) => {\n        e.preventDefault();\n\n        const {elements} = this.props;\n        const values = this.state.values;\n        const errors = {};\n        if (elements) {\n            elements.forEach((elem) => {\n                const error = checkDialogElementForError(elem, values[elem.name]);\n                if (error) {\n                    errors[elem.name] = (\n                        <FormattedMessage\n                            id={error.id}\n                            defaultMessage={error.defaultMessage}\n                            values={error.values}\n                        />\n                    );\n                }\n            });\n        }\n\n        this.setState({errors});\n\n        if (Object.keys(errors).length !== 0) {\n            return;\n        }\n\n        const {url, callbackId, state} = this.props;\n\n        const dialog = {\n            url,\n            callback_id: callbackId,\n            state,\n            submission: values,\n        };\n\n        this.setState({submitting: true});\n\n        const {data} = await this.props.actions.submitInteractiveDialog(dialog);\n\n        this.setState({submitting: false});\n\n        if (!data || !data.errors || Object.keys(data.errors).length === 0) {\n            this.handleHide(true);\n            return;\n        }\n\n        if (checkIfErrorsMatchElements(data.errors, elements)) {\n            this.setState({errors: data.errors});\n            return;\n        }\n\n        this.handleHide(true);\n    }\n\n    onHide = () => {\n        this.handleHide(false);\n    }\n\n    handleHide = (submitted = false) => {\n        const {url, callbackId, state, notifyOnCancel} = this.props;\n\n        if (!submitted && notifyOnCancel) {\n            const dialog = {\n                url,\n                callback_id: callbackId,\n                state,\n                cancelled: true,\n            };\n\n            this.props.actions.submitInteractiveDialog(dialog);\n        }\n\n        this.setState({show: false});\n    }\n\n    onChange = (name, value) => {\n        const values = {...this.state.values, [name]: value};\n        this.setState({values});\n    }\n\n    render() {\n        const {title, iconUrl, submitLabel, elements} = this.props;\n\n        let submitText = (\n            <FormattedMessage\n                id='interactive_dialog.submit'\n                defaultMessage='Submit'\n            />\n        );\n        if (submitLabel) {\n            submitText = submitLabel;\n        }\n\n        let icon;\n        if (iconUrl) {\n            icon = (\n                <img\n                    id='interactiveDialogIconUrl'\n                    alt={'modal title icon'}\n                    className='more-modal__image'\n                    width='36'\n                    height='36'\n                    src={iconUrl}\n                />\n            );\n        }\n\n        return (\n            <Modal\n                id='interactiveDialogModal'\n                dialogClassName='a11y__modal about-modal'\n                show={this.state.show}\n                onHide={this.onHide}\n                onExited={this.props.onHide}\n                backdrop='static'\n                role='dialog'\n                aria-labelledby='interactiveDialogModalLabel'\n            >\n                <Modal.Header\n                    closeButton={true}\n                    style={{borderBottom: elements == null && '0px'}}\n                >\n                    <Modal.Title\n                        componentClass='h1'\n                        id='interactiveDialogModalLabel'\n                    >\n                        {icon}{title}\n                    </Modal.Title>\n                </Modal.Header>\n                {elements && <Modal.Body>\n                    {elements.map((e) => {\n                        return (\n                            <DialogElement\n                                key={'dialogelement' + e.name}\n                                displayName={e.display_name}\n                                name={e.name}\n                                type={e.type}\n                                subtype={e.subtype}\n                                helpText={e.help_text}\n                                errorText={this.state.errors[e.name]}\n                                placeholder={e.placeholder}\n                                minLength={e.min_length}\n                                maxLength={e.max_length}\n                                dataSource={e.data_source}\n                                optional={e.optional}\n                                options={e.options}\n                                value={this.state.values[e.name]}\n                                onChange={this.onChange}\n                            />\n                        );\n                    })}\n                </Modal.Body>}\n                <Modal.Footer>\n                    <button\n                        id='interactiveDialogCancel'\n                        type='button'\n                        className='btn btn-link cancel-button'\n                        onClick={this.onHide}\n                    >\n                        <FormattedMessage\n                            id='interactive_dialog.cancel'\n                            defaultMessage='Cancel'\n                        />\n                    </button>\n                    <SpinnerButton\n                        id='interactiveDialogSubmit'\n                        type='button'\n                        className='btn btn-primary save-button'\n                        onClick={this.handleSubmit}\n                        spinning={this.state.submitting}\n                        spinningText={localizeMessage('interactive_dialog.submitting', 'Submitting...')}\n                    >\n                        {submitText}\n                    </SpinnerButton>\n                </Modal.Footer>\n            </Modal>\n        );\n    }\n}\n","// Copyright (c) 2015-present Mattermost, Inc. All Rights Reserved.\n// See LICENSE.txt for license information.\n\nimport {connect} from 'react-redux';\nimport {bindActionCreators} from 'redux';\n\nimport {submitInteractiveDialog} from 'mattermost-redux/actions/integrations';\n\nimport InteractiveDialog from './interactive_dialog';\n\nfunction mapStateToProps(state) {\n    const data = state.entities.integrations.dialog;\n    if (!data || !data.dialog) {\n        return {};\n    }\n\n    return {\n        url: data.url,\n        callbackId: data.dialog.callback_id,\n        elements: data.dialog.elements,\n        title: data.dialog.title,\n        iconUrl: data.dialog.icon_url,\n        submitLabel: data.dialog.submit_label,\n        notifyOnCancel: data.dialog.notify_on_cancel,\n        state: data.dialog.state,\n    };\n}\n\nfunction mapDispatchToProps(dispatch) {\n    return {\n        actions: bindActionCreators({\n            submitInteractiveDialog,\n        }, dispatch),\n    };\n}\n\nexport default connect(mapStateToProps, mapDispatchToProps)(InteractiveDialog);\n","// Copyright (c) 2015-present Mattermost, Inc. All Rights Reserved.\n// See LICENSE.txt for license information.\n\nimport PropTypes from 'prop-types';\nimport React from 'react';\nimport {Overlay} from 'react-bootstrap';\nimport {Client4} from 'mattermost-redux/client';\nimport {displayUsername} from 'mattermost-redux/utils/user_utils';\n\nimport ProfilePopover from 'components/profile_popover';\n\nimport {popOverOverlayPosition} from 'utils/position_utils.jsx';\nconst spaceRequiredForPopOver = 300;\n\nexport default class AtMention extends React.PureComponent {\n    static propTypes = {\n        children: PropTypes.node,\n        currentUserId: PropTypes.string.isRequired,\n        hasMention: PropTypes.bool,\n        isRHS: PropTypes.bool,\n        mentionName: PropTypes.string.isRequired,\n        teammateNameDisplay: PropTypes.string.isRequired,\n        usersByUsername: PropTypes.object.isRequired,\n    };\n\n    static defaultProps = {\n        isRHS: false,\n        hasMention: false,\n    }\n\n    constructor(props) {\n        super(props);\n\n        this.state = {\n            user: this.getUserFromMentionName(props),\n            show: false,\n        };\n\n        this.overlayRef = React.createRef();\n    }\n\n    UNSAFE_componentWillReceiveProps(nextProps) { // eslint-disable-line camelcase\n        if (nextProps.mentionName !== this.props.mentionName || nextProps.usersByUsername !== this.props.usersByUsername) {\n            this.setState({\n                user: this.getUserFromMentionName(nextProps),\n            });\n        }\n    }\n\n    handleClick = (e) => {\n        const targetBounds = this.overlayRef.current.getBoundingClientRect();\n        const placement = popOverOverlayPosition(targetBounds, window.innerHeight, {above: spaceRequiredForPopOver});\n\n        this.setState({target: e.target, show: !this.state.show, placement});\n    }\n\n    hideOverlay = () => {\n        this.setState({show: false});\n    }\n\n    getUserFromMentionName(props) {\n        const usersByUsername = props.usersByUsername;\n        let mentionName = props.mentionName.toLowerCase();\n\n        while (mentionName.length > 0) {\n            if (usersByUsername.hasOwnProperty(mentionName)) {\n                return usersByUsername[mentionName];\n            }\n\n            // Repeatedly trim off trailing punctuation in case this is at the end of a sentence\n            if ((/[._-]$/).test(mentionName)) {\n                mentionName = mentionName.substring(0, mentionName.length - 1);\n            } else {\n                break;\n            }\n        }\n\n        return '';\n    }\n\n    render() {\n        if (!this.state.user) {\n            return <React.Fragment>{this.props.children}</React.Fragment>;\n        }\n\n        const user = this.state.user;\n        const suffix = this.props.mentionName.substring(user.username.length);\n\n        let className = 'mention-link';\n        if (user.id === this.props.currentUserId) {\n            className += ' mention--highlight';\n        }\n\n        return (\n            <span>\n                <Overlay\n                    placement={this.state.placement}\n                    show={this.state.show}\n                    target={this.state.target}\n                    rootClose={true}\n                    onHide={this.hideOverlay}\n                >\n                    <ProfilePopover\n                        userId={user.id}\n                        src={Client4.getProfilePictureUrl(user.id, user.last_picture_update)}\n                        isRHS={this.props.isRHS}\n                        hasMention={this.props.hasMention}\n                        hide={this.hideOverlay}\n                    />\n                </Overlay>\n                <a\n                    className={className}\n                    onClick={this.handleClick}\n                    ref={this.overlayRef}\n                >\n                    {'@' + displayUsername(user, this.props.teammateNameDisplay)}\n                </a>\n                {suffix}\n            </span>\n        );\n    }\n}\n","// Copyright (c) 2015-present Mattermost, Inc. All Rights Reserved.\n// See LICENSE.txt for license information.\n\nimport {connect} from 'react-redux';\nimport {getTeammateNameDisplaySetting} from 'mattermost-redux/selectors/entities/preferences';\nimport {getCurrentUserId, getUsersByUsername} from 'mattermost-redux/selectors/entities/users';\n\nimport AtMention from './at_mention.jsx';\n\nfunction mapStateToProps(state) {\n    return {\n        currentUserId: getCurrentUserId(state),\n        teammateNameDisplay: getTeammateNameDisplaySetting(state),\n        usersByUsername: getUsersByUsername(state),\n    };\n}\n\nexport default connect(mapStateToProps)(AtMention);\n","// Copyright (c) 2015-present Mattermost, Inc. All Rights Reserved.\n// See LICENSE.txt for license information.\n\nimport PropTypes from 'prop-types';\nimport React from 'react';\n\nexport default class ModalController extends React.PureComponent {\n    static propTypes = {\n\n        /**\n         * Object that has map of modal's id and element\n         */\n        modals: PropTypes.object.isRequired,\n\n        /**\n         * Object with action creators\n         */\n        actions: PropTypes.shape({\n\n            /**\n             * Action creator to close modal\n             */\n            closeModal: PropTypes.func.isRequired,\n        }).isRequired,\n    }\n\n    render() {\n        const {modals, ...props} = this.props;\n        const {modalState} = modals;\n\n        if (!modals) {\n            return <div/>;\n        }\n\n        const modalOutput = [];\n\n        for (const modalId in modalState) {\n            if (modalState.hasOwnProperty(modalId)) {\n                const modal = modalState[modalId];\n                if (modal.open) {\n                    const modalComponent = React.createElement(modal.dialogType, Object.assign({}, modal.dialogProps, {\n                        onHide: props.actions.closeModal.bind(this, modalId),\n                        key: `${modalId}_modal`,\n                    }));\n\n                    modalOutput.push(modalComponent);\n                }\n            }\n        }\n\n        return (\n            <div>{modalOutput}</div>\n        );\n    }\n}\n","// Copyright (c) 2015-present Mattermost, Inc. All Rights Reserved.\n// See LICENSE.txt for license information.\n\nimport {connect} from 'react-redux';\nimport {bindActionCreators} from 'redux';\n\nimport {closeModal} from 'actions/views/modals';\n\nimport ModalController from './modal_controller.jsx';\n\nfunction mapStateToProps(state) {\n    return {\n        modals: state.views.modals,\n    };\n}\n\nfunction mapDispatchToProps(dispatch) {\n    return {\n        actions: bindActionCreators({\n            closeModal,\n        }, dispatch),\n    };\n}\n\nexport default connect(mapStateToProps, mapDispatchToProps)(ModalController);\n","// Copyright (c) 2015-present Mattermost, Inc. All Rights Reserved.\n// See LICENSE.txt for license information.\n\nimport React from 'react';\nimport PropTypes from 'prop-types';\n\nconst Setting = (props) => {\n    const {\n        children,\n        footer,\n        helpText,\n        inputId,\n        label,\n        labelClassName,\n        inputClassName,\n    } = props;\n\n    return (\n        <div className='form-group'>\n            <label\n                className={'control-label ' + labelClassName}\n                htmlFor={inputId}\n            >\n                {label}\n            </label>\n            <div className={inputClassName}>\n                {children}\n                <div className='help-text'>\n                    {helpText}\n                </div>\n                {footer}\n            </div>\n        </div>\n    );\n};\n\nSetting.propTypes = {\n    inputId: PropTypes.string,\n    label: PropTypes.node.isRequired,\n    labelClassName: PropTypes.string,\n    inputClassName: PropTypes.string,\n    children: PropTypes.node.isRequired,\n    helpText: PropTypes.node,\n    footer: PropTypes.node,\n};\n\nexport default Setting;","// Copyright (c) 2015-present Mattermost, Inc. All Rights Reserved.\n// See LICENSE.txt for license information.\n\nimport PropTypes from 'prop-types';\nimport React from 'react';\n\nimport Setting from './setting.jsx';\n\nexport default class TextSetting extends React.Component {\n    static validTypes = [\n        'input',\n        'textarea',\n        'number',\n        'email',\n        'tel',\n        'url',\n    ];\n    static propTypes = {\n        id: PropTypes.string.isRequired,\n        label: PropTypes.node.isRequired,\n        labelClassName: PropTypes.string,\n        placeholder: PropTypes.string,\n        helpText: PropTypes.node,\n        footer: PropTypes.node,\n        value: PropTypes.oneOfType([\n            PropTypes.string,\n            PropTypes.number,\n        ]).isRequired,\n        inputClassName: PropTypes.string,\n        maxLength: PropTypes.number,\n        resizable: PropTypes.bool,\n        onChange: PropTypes.func,\n        disabled: PropTypes.bool,\n        type: PropTypes.oneOf(TextSetting.validTypes),\n    };\n\n    static defaultProps = {\n        labelClassName: '',\n        inputClassName: '',\n        type: 'input',\n        maxLength: null,\n        resizable: true,\n    };\n\n    handleChange = (e) => {\n        if (this.props.type === 'number') {\n            this.props.onChange(this.props.id, parseInt(e.target.value, 10));\n        } else {\n            this.props.onChange(this.props.id, e.target.value);\n        }\n    }\n\n    render() {\n        const {resizable} = this.props;\n        let {type} = this.props;\n        let input = null;\n\n        if (type === 'textarea') {\n            const style = {};\n            if (!resizable) {\n                style.resize = 'none';\n            }\n\n            input = (\n                <textarea\n                    id={this.props.id}\n                    style={style}\n                    className='form-control'\n                    rows='5'\n                    placeholder={this.props.placeholder}\n                    value={this.props.value}\n                    maxLength={this.props.maxLength}\n                    onChange={this.handleChange}\n                    disabled={this.props.disabled}\n                />\n            );\n        } else {\n            type = ['input', 'email', 'tel', 'number', 'url'].includes(type) ? type : 'input';\n\n            input = (\n                <input\n                    id={this.props.id}\n                    className='form-control'\n                    type={type}\n                    placeholder={this.props.placeholder}\n                    value={this.props.value}\n                    maxLength={this.props.maxLength}\n                    onChange={this.handleChange}\n                    disabled={this.props.disabled}\n                />\n            );\n        }\n\n        return (\n            <Setting\n                label={this.props.label}\n                labelClassName={this.props.labelClassName}\n                inputClassName={this.props.inputClassName}\n                helpText={this.props.helpText}\n                inputId={this.props.id}\n                footer={this.props.footer}\n            >\n                {input}\n            </Setting>\n        );\n    }\n}\n","// Copyright (c) 2015-present Mattermost, Inc. All Rights Reserved.\n// See LICENSE.txt for license information.\n\nimport PropTypes from 'prop-types';\nimport React from 'react';\nimport {FormattedTime} from 'react-intl';\nimport moment from 'moment-timezone';\n\nexport default class LocalDateTime extends React.PureComponent {\n    static propTypes = {\n\n        /*\n         * The time to display\n         */\n        eventTime: PropTypes.number,\n\n        /*\n         * Set to display using 24 hour format\n         */\n        useMilitaryTime: PropTypes.bool,\n\n        /*\n         * Current timezone of the user\n         */\n        timeZone: PropTypes.string,\n\n        /*\n         * Enable timezone feature\n         */\n        enableTimezone: PropTypes.bool,\n    };\n\n    render() {\n        const {\n            enableTimezone,\n            eventTime,\n            timeZone,\n            useMilitaryTime,\n        } = this.props;\n\n        const date = eventTime ? new Date(eventTime) : new Date();\n\n        let title = moment(date);\n        if (enableTimezone && timeZone) {\n            title.tz(timeZone);\n\n            title = title.toString() + ' (' + title.tz() + ')';\n        } else {\n            title = title.toString();\n        }\n\n        const timezoneProps = enableTimezone && timeZone ? {timeZone} : {};\n\n        return (\n            <time\n                aria-label={date}\n                className='post__time'\n                dateTime={date.toISOString()}\n                title={title}\n                id='localDateTime'\n            >\n                <FormattedTime\n                    {...timezoneProps}\n                    hour12={!useMilitaryTime}\n                    value={date}\n                />\n            </time>\n        );\n    }\n}","// Copyright (c) 2015-present Mattermost, Inc. All Rights Reserved.\n// See LICENSE.txt for license information.\n\nimport {connect} from 'react-redux';\n\nimport {getCurrentUserId} from 'mattermost-redux/selectors/entities/users';\nimport {getUserTimezone} from 'mattermost-redux/selectors/entities/timezone';\nimport {getUserCurrentTimezone} from 'mattermost-redux/utils/timezone_utils';\nimport {getBool} from 'mattermost-redux/selectors/entities/preferences';\n\nimport {areTimezonesEnabledAndSupported} from 'selectors/general';\n\nimport {Preferences} from 'utils/constants.jsx';\n\nimport LocalDateTime from './local_date_time';\n\nfunction mapStateToProps(state, props) {\n    const currentUserId = getCurrentUserId(state);\n\n    let userTimezone;\n    if (props.userTimezone) {\n        userTimezone = props.userTimezone;\n    } else {\n        userTimezone = getUserTimezone(state, currentUserId);\n    }\n\n    return {\n        enableTimezone: areTimezonesEnabledAndSupported(state),\n        useMilitaryTime: getBool(state, Preferences.CATEGORY_DISPLAY_SETTINGS, Preferences.USE_MILITARY_TIME, false),\n        timeZone: getUserCurrentTimezone(userTimezone),\n    };\n}\n\nexport default connect(mapStateToProps)(LocalDateTime);\n","// Copyright (c) 2015-present Mattermost, Inc. All Rights Reserved.\n// See LICENSE.txt for license information.\n\nimport PropTypes from 'prop-types';\nimport React from 'react';\nimport {Modal} from 'react-bootstrap';\nimport {FormattedMessage} from 'react-intl';\n\nimport FormattedMarkdownMessage from 'components/formatted_markdown_message';\nimport MattermostLogo from 'components/svg/mattermost_logo';\n\nexport default class AboutBuildModal extends React.PureComponent {\n    static defaultProps = {\n        show: false,\n    };\n\n    static propTypes = {\n\n        /**\n         * Determines whether modal is shown or not\n         */\n        show: PropTypes.bool.isRequired,\n\n        /**\n         * Function that is called when the modal is dismissed\n         */\n        onHide: PropTypes.func.isRequired,\n\n        /**\n         * Global config object\n         */\n        config: PropTypes.object.isRequired,\n\n        /**\n         * Global license object\n         */\n        license: PropTypes.object.isRequired,\n\n        /**\n         * Webapp build hash override. By default, webpack sets this (so it must be overridden in tests).\n         */\n        webappBuildHash: PropTypes.string,\n    };\n\n    constructor(props) {\n        super(props);\n        this.doHide = this.doHide.bind(this);\n    }\n\n    doHide() {\n        this.props.onHide();\n    }\n\n    render() {\n        const config = this.props.config;\n        const license = this.props.license;\n\n        let title = (\n            <FormattedMessage\n                id='about.teamEditiont0'\n                defaultMessage='Team Edition'\n            />\n        );\n\n        let subTitle = (\n            <FormattedMessage\n                id='about.teamEditionSt'\n                defaultMessage='All your team communication in one place, instantly searchable and accessible anywhere.'\n            />\n        );\n\n        let learnMore = (\n            <div>\n                <FormattedMessage\n                    id='about.teamEditionLearn'\n                    defaultMessage='Join the Mattermost community at '\n                />\n                <a\n                    target='_blank'\n                    rel='noopener noreferrer'\n                    href='http://www.mattermost.org/'\n                >\n                    {'mattermost.org'}\n                </a>\n            </div>\n        );\n\n        let licensee;\n        if (config.BuildEnterpriseReady === 'true') {\n            title = (\n                <FormattedMessage\n                    id='about.teamEditiont1'\n                    defaultMessage='Enterprise Edition'\n                />\n            );\n\n            subTitle = (\n                <FormattedMessage\n                    id='about.enterpriseEditionSt'\n                    defaultMessage='Modern communication from behind your firewall.'\n                />\n            );\n\n            learnMore = (\n                <div>\n                    <FormattedMessage\n                        id='about.enterpriseEditionLearn'\n                        defaultMessage='Learn more about Enterprise Edition at '\n                    />\n                    <a\n                        target='_blank'\n                        rel='noopener noreferrer'\n                        href='http://about.mattermost.com/'\n                    >\n                        {'about.mattermost.com'}\n                    </a>\n                </div>\n            );\n\n            if (license.IsLicensed === 'true') {\n                title = (\n                    <FormattedMessage\n                        id='about.enterpriseEditione1'\n                        defaultMessage='Enterprise Edition'\n                    />\n                );\n                licensee = (\n                    <div className='form-group'>\n                        <FormattedMessage\n                            id='about.licensed'\n                            defaultMessage='Licensed to:'\n                        />\n                        &nbsp;{license.Company}\n                    </div>\n                );\n            }\n        }\n\n        let termsOfService;\n        if (config.TermsOfServiceLink) {\n            termsOfService = (\n                <a\n                    target='_blank'\n                    rel='noopener noreferrer'\n                    href={config.TermsOfServiceLink}\n                >\n                    <FormattedMessage\n                        id='about.tos'\n                        defaultMessage='Terms of Service'\n                    />\n                </a>\n            );\n        }\n\n        let privacyPolicy;\n        if (config.PrivacyPolicyLink) {\n            privacyPolicy = (\n                <a\n                    target='_blank'\n                    rel='noopener noreferrer'\n                    href={config.PrivacyPolicyLink}\n                >\n                    <FormattedMessage\n                        id='about.privacy'\n                        defaultMessage='Privacy Policy'\n                    />\n                </a>\n            );\n        }\n\n        let tosPrivacyHyphen;\n        if (config.TermsOfServiceLink && config.PrivacyPolicyLink) {\n            tosPrivacyHyphen = (\n                <span>\n                    {' - '}\n                </span>\n            );\n        }\n\n        // Only show build number if it's a number (so only builds from Jenkins)\n        let buildnumber = (\n            <div>\n                <FormattedMessage\n                    id='about.buildnumber'\n                    defaultMessage='Build Number:'\n                />\n                <span id='buildnumberString'>{'\\u00a0' + config.BuildNumber}</span>\n            </div>\n        );\n        if (isNaN(config.BuildNumber)) {\n            buildnumber = null;\n        }\n\n        let mmversion = config.BuildNumber;\n        if (!isNaN(config.BuildNumber)) {\n            mmversion = 'ci';\n        }\n\n        return (\n            <Modal\n                dialogClassName='a11y__modal about-modal'\n                show={this.props.show}\n                onHide={this.doHide}\n                role='dialog'\n                aria-labelledby='aboutModalLabel'\n            >\n                <Modal.Header closeButton={true}>\n                    <Modal.Title\n                        componentClass='h1'\n                        id='aboutModalLabel'\n                    >\n                        <FormattedMessage\n                            id='about.title'\n                            values={{appTitle: config.SiteName || 'Mattermost'}}\n                            defaultMessage='About {appTitle}'\n                        />\n                    </Modal.Title>\n                </Modal.Header>\n                <Modal.Body>\n                    <div className='about-modal__content'>\n                        <div className='about-modal__logo'>\n                            <MattermostLogo/>\n                        </div>\n                        <div>\n                            <h3 className='about-modal__title'>{'Mattermost'} {title}</h3>\n                            <p className='about-modal__subtitle padding-bottom'>{subTitle}</p>\n                            <div className='form-group less'>\n                                <div>\n                                    <FormattedMessage\n                                        id='about.version'\n                                        defaultMessage='Mattermost Version:'\n                                    />\n                                    <span id='versionString'>{'\\u00a0' + mmversion}</span>\n                                </div>\n                                <div>\n                                    <FormattedMessage\n                                        id='about.dbversion'\n                                        defaultMessage='Database Schema Version:'\n                                    />\n                                    <span id='dbversionString'>{'\\u00a0' + config.Version}</span>\n                                </div>\n                                {buildnumber}\n                                <div>\n                                    <FormattedMessage\n                                        id='about.database'\n                                        defaultMessage='Database:'\n                                    />\n                                    {'\\u00a0' + config.SQLDriverName}\n                                </div>\n                            </div>\n                            {licensee}\n                        </div>\n                    </div>\n                    <div className='about-modal__footer'>\n                        {learnMore}\n                        <div className='form-group'>\n                            <div className='about-modal__copyright'>\n                                <FormattedMessage\n                                    id='about.copyright'\n                                    defaultMessage='Copyright 2015 - {currentYear} Mattermost, Inc. All rights reserved'\n                                    values={{\n                                        currentYear: new Date().getFullYear(),\n                                    }}\n                                />\n                            </div>\n                            <div className='about-modal__links'>\n                                {termsOfService}\n                                {tosPrivacyHyphen}\n                                {privacyPolicy}\n                            </div>\n                        </div>\n                    </div>\n                    <div className='about-modal__notice form-group padding-top x2'>\n                        <p>\n                            <FormattedMarkdownMessage\n                                id='about.notice'\n                                defaultMessage='Mattermost is made possible by the open source software used in our [server](!https://about.mattermost.com/platform-notice-txt/), [desktop](!https://about.mattermost.com/desktop-notice-txt/) and [mobile](!https://about.mattermost.com/mobile-notice-txt/) apps.'\n                            />\n                        </p>\n                    </div>\n                    <div className='about-modal__hash'>\n                        <p>\n                            <FormattedMessage\n                                id='about.hash'\n                                defaultMessage='Build Hash:'\n                            />\n                            &nbsp;{config.BuildHash}\n                            <br/>\n                            <FormattedMessage\n                                id='about.hashee'\n                                defaultMessage='EE Build Hash:'\n                            />\n                            &nbsp;{config.BuildHashEnterprise}\n                            <br/>\n                            <FormattedMessage\n                                id='about.hashwebapp'\n                                defaultMessage='Webapp Build Hash:'\n                            />\n                            &nbsp;{/* global COMMIT_HASH */ this.props.webappBuildHash || (typeof COMMIT_HASH === 'undefined' ? '' : COMMIT_HASH)}\n                        </p>\n                        <p>\n                            <FormattedMessage\n                                id='about.date'\n                                defaultMessage='Build Date:'\n                            />\n                            &nbsp;{config.BuildDate}\n                        </p>\n                    </div>\n                </Modal.Body>\n            </Modal>\n        );\n    }\n}\n","// Copyright (c) 2015-present Mattermost, Inc. All Rights Reserved.\n// See LICENSE.txt for license information.\n\nimport {connect} from 'react-redux';\nimport {getConfig, getLicense} from 'mattermost-redux/selectors/entities/general';\n\nimport {ModalIdentifiers} from 'utils/constants';\nimport {isModalOpen} from 'selectors/views/modals';\n\nimport AboutBuildModal from './about_build_modal.jsx';\n\nfunction mapStateToProps(state) {\n    const modalId = ModalIdentifiers.ABOUT;\n    return {\n        config: getConfig(state),\n        license: getLicense(state),\n        show: isModalOpen(state, modalId),\n    };\n}\n\nexport default connect(mapStateToProps)(AboutBuildModal);\n","// Copyright (c) 2015-present Mattermost, Inc. All Rights Reserved.\n// See LICENSE.txt for license information.\n\nimport React from 'react';\nimport reducerRegistry from 'mattermost-redux/store/reducer_registry';\n\nimport {\n    registerPluginWebSocketEvent,\n    unregisterPluginWebSocketEvent,\n    registerPluginReconnectHandler,\n    unregisterPluginReconnectHandler,\n} from 'actions/websocket_actions.jsx';\n\nimport {showRHSPlugin} from 'actions/views/rhs';\n\nimport {\n    registerPluginTranslationsSource,\n} from 'actions/views/root';\n\nimport store from 'stores/redux_store.jsx';\nimport {ActionTypes} from 'utils/constants.jsx';\nimport {generateId} from 'utils/utils.jsx';\n\nfunction dispatchPluginComponentAction(name, pluginId, component, id = generateId()) {\n    store.dispatch({\n        type: ActionTypes.RECEIVED_PLUGIN_COMPONENT,\n        name,\n        data: {\n            id,\n            pluginId,\n            component,\n        },\n    });\n\n    return id;\n}\n\nconst resolveReactElement = (element) => {\n    if (typeof element === 'function') {\n        // Allow element to be passed as the name of the component, instead of a React element.\n        return React.createElement(element);\n    }\n\n    return element;\n};\n\nexport default class PluginRegistry {\n    constructor(id) {\n        this.id = id;\n    }\n\n    // Register a component at the root of the channel view of the app.\n    // Accepts a React component. Returns a unique identifier.\n    registerRootComponent(component) {\n        return dispatchPluginComponentAction('Root', this.id, component);\n    }\n\n    // Register a component in the user attributes section of the profile popover (hovercard), below the default user attributes.\n    // Accepts a React component. Returns a unique identifier.\n    registerPopoverUserAttributesComponent(component) {\n        return dispatchPluginComponentAction('PopoverUserAttributes', this.id, component);\n    }\n\n    // Register a component in the user actions of the profile popover (hovercard), below the default actions.\n    // Accepts a React component. Returns a unique identifier.\n    registerPopoverUserActionsComponent(component) {\n        return dispatchPluginComponentAction('PopoverUserActions', this.id, component);\n    }\n\n    // Register a component fixed to the top of the left-hand channel sidebar.\n    // Accepts a React component. Returns a unique identifier.\n    registerLeftSidebarHeaderComponent(component) {\n        return dispatchPluginComponentAction('LeftSidebarHeader', this.id, component);\n    }\n\n    // Register a component fixed to the bottom of the team sidebar. Does not render if\n    // user is only on one team and the team sidebar is not shown.\n    // Accepts a React component. Returns a unique identifier.\n    registerBottomTeamSidebarComponent(component) {\n        return dispatchPluginComponentAction('BottomTeamSidebar', this.id, component);\n    }\n\n    // Register a component fixed to the bottom of the post message.\n    // Accepts a React component. Returns a unique identifier.\n    registerPostMessageAttachmentComponent(component) {\n        return dispatchPluginComponentAction('PostMessageAttachment', this.id, component);\n    }\n\n    // Register a component to show as a tooltip when a user hovers on a link in a post.\n    // Accepts a React component. Returns a unique identifier.\n    registerLinkTooltipComponent(component) {\n        return dispatchPluginComponentAction('LinkTooltip', this.id, component);\n    }\n\n    // Add a button to the channel header. If there are more than one buttons registered by any\n    // plugin, a dropdown menu is created to contain all the plugin buttons.\n    // Accepts the following:\n    // - icon - React element to use as the button's icon\n    // - action - a function called when the button is clicked, passed the channel and channel member as arguments\n    // - dropdown_text - string or React element shown for the dropdown button description\n    // - tooltip_text - string shown for tooltip appear on hover\n    registerChannelHeaderButtonAction(icon, action, dropdownText, tooltipText) {\n        const id = generateId();\n\n        const data = {\n            id,\n            pluginId: this.id,\n            icon: resolveReactElement(icon),\n            action,\n            dropdownText: resolveReactElement(dropdownText),\n            tooltipText,\n        };\n\n        store.dispatch({\n            type: ActionTypes.RECEIVED_PLUGIN_COMPONENT,\n            name: 'ChannelHeaderButton',\n            data,\n        });\n\n        store.dispatch({\n            type: ActionTypes.RECEIVED_PLUGIN_COMPONENT,\n            name: 'MobileChannelHeaderButton',\n            data,\n        });\n\n        return id;\n    }\n\n    // Register a component to render a custom body for posts with a specific type.\n    // Custom post types must be prefixed with 'custom_'.\n    // Custom post types can also apply for ephemeral posts.\n    // Accepts a string type and a component.\n    // Returns a unique identifier.\n    registerPostTypeComponent(type, component) {\n        const id = generateId();\n\n        store.dispatch({\n            type: ActionTypes.RECEIVED_PLUGIN_POST_COMPONENT,\n            data: {\n                id,\n                pluginId: this.id,\n                type,\n                component,\n            },\n        });\n\n        return id;\n    }\n\n    // Register a component to render a custom body for post cards with a specific type.\n    // Custom post types must be prefixed with 'custom_'.\n    // Accepts a string type and a component.\n    // Returns a unique identifier.\n    registerPostCardTypeComponent(type, component) {\n        const id = generateId();\n\n        store.dispatch({\n            type: ActionTypes.RECEIVED_PLUGIN_POST_CARD_COMPONENT,\n            data: {\n                id,\n                pluginId: this.id,\n                type,\n                component,\n            },\n        });\n\n        return id;\n    }\n\n    // Register a main menu list item by providing some text and an action function.\n    // Accepts the following:\n    // - text - A string or React element to display in the menu\n    // - action - A function to trigger when component is clicked on\n    // - mobileIcon - A React element to display as the icon in the menu in mobile view\n    // Returns a unique identifier.\n    registerMainMenuAction(text, action, mobileIcon) {\n        const id = generateId();\n\n        store.dispatch({\n            type: ActionTypes.RECEIVED_PLUGIN_COMPONENT,\n            name: 'MainMenu',\n            data: {\n                id,\n                pluginId: this.id,\n                text: resolveReactElement(text),\n                action,\n                mobileIcon: resolveReactElement(mobileIcon),\n            },\n        });\n\n        return id;\n    }\n\n    // Register a post menu list item by providing some text and an action function.\n    // Accepts the following:\n    // - text - A string or React element to display in the menu\n    // - action - A function to trigger when component is clicked on\n    // - filter - A function whether to apply the plugin into the post' dropdown menu\n    // Returns a unique identifier.\n    registerPostDropdownMenuAction(text, action, filter) {\n        const id = generateId();\n\n        store.dispatch({\n            type: ActionTypes.RECEIVED_PLUGIN_COMPONENT,\n            name: 'PostDropdownMenu',\n            data: {\n                id,\n                pluginId: this.id,\n                text: resolveReactElement(text),\n                action,\n                filter,\n            },\n        });\n\n        return id;\n    }\n\n    // Register a component at the bottom of the post dropdown menu.\n    // Accepts a React component. Returns a unique identifier.\n    registerPostDropdownMenuComponent(component) {\n        return dispatchPluginComponentAction('PostDropdownMenuItem', this.id, component);\n    }\n\n    // Register a file upload method by providing some text, an icon, and an action function.\n    // Accepts the following:\n    // - icon - JSX element to use as the button's icon\n    // - text - A string or JSX element to display in the file upload menu\n    // - action - A function to trigger when the menu item is selected.\n    // Returns a unique identifier.\n    registerFileUploadMethod(icon, action, text) {\n        const id = generateId();\n\n        store.dispatch({\n            type: ActionTypes.RECEIVED_PLUGIN_COMPONENT,\n            name: 'FileUploadMethod',\n            data: {\n                id,\n                pluginId: this.id,\n                text,\n                action,\n                icon,\n            },\n        });\n\n        return id;\n    }\n\n    // Register a hook to intercept file uploads before they take place.\n    // Accepts a function to run before files get uploaded. Receives an array of\n    // files and a function to upload files at a later time as arguments. Must\n    // return an object that can contain two properties:\n    // - message - An error message to display, leave blank or null to display no message\n    // - files - Modified array of files to upload, set to null to reject all files\n    // Returns a unique identifier.\n    registerFilesWillUploadHook(hook) {\n        const id = generateId();\n\n        store.dispatch({\n            type: ActionTypes.RECEIVED_PLUGIN_COMPONENT,\n            name: 'FilesWillUploadHook',\n            data: {\n                id,\n                pluginId: this.id,\n                hook,\n            },\n        });\n\n        return id;\n    }\n\n    // Unregister a component, action or hook using the unique identifier returned after registration.\n    // Accepts a string id.\n    // Returns undefined in all cases.\n    unregisterComponent(componentId) {\n        store.dispatch({\n            type: ActionTypes.REMOVED_PLUGIN_COMPONENT,\n            id: componentId,\n        });\n    }\n\n    // Unregister a component that provided a custom body for posts with a specific type.\n    // Accepts a string id.\n    // Returns undefined in all cases.\n    unregisterPostTypeComponent(componentId) {\n        store.dispatch({\n            type: ActionTypes.REMOVED_PLUGIN_POST_COMPONENT,\n            id: componentId,\n        });\n    }\n\n    // Register a reducer against the Redux store. It will be accessible in redux state\n    // under \"state['plugins-<yourpluginid>']\"\n    // Accepts a reducer. Returns undefined.\n    registerReducer(reducer) {\n        reducerRegistry.register('plugins-' + this.id, reducer);\n    }\n\n    // Register a handler for WebSocket events.\n    // Accepts the following:\n    // - event - the event type, can be a regular server event or an event from plugins.\n    // Plugin events will have \"custom_<pluginid>_\" prepended\n    // - handler - a function to handle the event, receives the event message as an argument\n    // Returns undefined.\n    registerWebSocketEventHandler(event, handler) {\n        registerPluginWebSocketEvent(this.id, event, handler);\n    }\n\n    // Unregister a handler for a custom WebSocket event.\n    // Accepts a string event type.\n    // Returns undefined.\n    unregisterWebSocketEventHandler(event) {\n        unregisterPluginWebSocketEvent(this.id, event);\n    }\n\n    // Register a handler that will be called when the app reconnects to the\n    // internet after previously disconnecting.\n    // Accepts a function to handle the event. Returns undefined.\n    registerReconnectHandler(handler) {\n        registerPluginReconnectHandler(this.id, handler);\n    }\n\n    // Unregister a previously registered reconnect handler.\n    // Returns undefined.\n    unregisterReconnectHandler() {\n        unregisterPluginReconnectHandler(this.id);\n    }\n\n    // Register a hook that will be called when a message is posted by the user before it\n    // is sent to the server. Accepts a function that receives the post as an argument.\n    //\n    // To reject a post, return an object containing an error such as\n    //     {error: {message: 'Rejected'}}\n    // To modify or allow the post without modifcation, return an object containing the post\n    // such as\n    //     {post: {...}}\n    //\n    // If the hook function is asynchronous, the message will not be sent to the server\n    // until the hook returns.\n    registerMessageWillBePostedHook(hook) {\n        const id = generateId();\n\n        store.dispatch({\n            type: ActionTypes.RECEIVED_PLUGIN_COMPONENT,\n            name: 'MessageWillBePosted',\n            data: {\n                id,\n                pluginId: this.id,\n                hook,\n            },\n        });\n\n        return id;\n    }\n\n    // Register a hook that will be called when a slash command is posted by the user before it\n    // is sent to the server. Accepts a function that receives the message (string) and the args\n    // (object) as arguments.\n    // The args object is:\n    //        {\n    //            channel_id: channelId,\n    //            team_id: teamId,\n    //            root_id: rootId,\n    //            parent_id: rootId,\n    //        }\n    //\n    // To reject a command, return an object containing an error:\n    //     {error: {message: 'Rejected'}}\n    // To ignore a command, return an empty object (to prevent an error from being displayed):\n    //     {}\n    // To modify or allow the command without modification, return an object containing the new message\n    // and args. It is not likely that you will need to change the args, so return the object that was provided:\n    //     {message: {...}, args}\n    //\n    // If the hook function is asynchronous, the command will not be sent to the server\n    // until the hook returns.\n    registerSlashCommandWillBePostedHook(hook) {\n        const id = generateId();\n\n        store.dispatch({\n            type: ActionTypes.RECEIVED_PLUGIN_COMPONENT,\n            name: 'SlashCommandWillBePosted',\n            data: {\n                id,\n                pluginId: this.id,\n                hook,\n            },\n        });\n\n        return id;\n    }\n\n    // Register a hook that will be called before a message is formatted into Markdown.\n    // Accepts a function that receives the unmodified post and the message (potentially\n    // already modified by other hooks) as arguments. This function must return a string\n    // message that will be formatted.\n    // Returns a unique identifier.\n    registerMessageWillFormatHook(hook) {\n        const id = generateId();\n\n        store.dispatch({\n            type: ActionTypes.RECEIVED_PLUGIN_COMPONENT,\n            name: 'MessageWillFormat',\n            data: {\n                id,\n                pluginId: this.id,\n                hook,\n            },\n        });\n\n        return id;\n    }\n\n    // Register a component to override file previews. Accepts a function to run before file is\n    // previewed and a react component to be rendered as the file preview.\n    // - override - A function to check whether preview needs to be overridden. Receives fileInfo and post as arguments.\n    // Returns true is preview should be overridden and false otherwise.\n    // - component - A react component to display instead of original preview. Receives fileInfo and post as props.\n    // Returns a unique identifier.\n    // Only one plugin can override a file preview at a time. If two plugins try to override the same file preview, the first plugin will perform the override and the second will not. Plugin precedence is ordered alphabetically by plugin ID.\n    registerFilePreviewComponent(override, component) {\n        const id = generateId();\n\n        store.dispatch({\n            type: ActionTypes.RECEIVED_PLUGIN_COMPONENT,\n            name: 'FilePreview',\n            data: {\n                id,\n                pluginId: this.id,\n                override,\n                component,\n            },\n        });\n\n        return id;\n    }\n\n    registerTranslations(getTranslationsForLocale) {\n        store.dispatch(registerPluginTranslationsSource(this.id, getTranslationsForLocale));\n    }\n\n    // Register a Right-Hand Sidebar component by providing a title for the right hand component.\n    // Accepts the following:\n    // - title - A string or JSX element to display as a title for the RHS.\n    // - component - A react component to display in the Right-Hand Sidebar.\n    // Returns:\n    // - id: a unique identifier\n    // - showRHSPlugin: the action to dispatch that will open the RHS.\n    registerRightHandSidebarComponent(component, title) {\n        const id = generateId();\n\n        store.dispatch({\n            type: ActionTypes.RECEIVED_PLUGIN_COMPONENT,\n            name: 'RightHandSidebarComponent',\n            data: {\n                id,\n                pluginId: this.id,\n                component,\n                title,\n            },\n        });\n\n        return {id, showRHSPlugin: showRHSPlugin(id)};\n    }\n}\n","// Copyright (c) 2015-present Mattermost, Inc. All Rights Reserved.\n// See LICENSE.txt for license information.\n\nimport {Client4} from 'mattermost-redux/client';\n\nimport store from 'stores/redux_store.jsx';\nimport {ActionTypes} from 'utils/constants.jsx';\nimport {getSiteURL} from 'utils/url.jsx';\nimport PluginRegistry from 'plugins/registry';\nimport {unregisterAllPluginWebSocketEvents, unregisterPluginReconnectHandler} from 'actions/websocket_actions.jsx';\nimport {unregisterPluginTranslationsSource} from 'actions/views/root';\n\n// plugins records all active web app plugins by id.\nwindow.plugins = {};\n\n// registerPlugin, on the global window object, should be invoked by a plugin's web app bundle as\n// it is loaded.\n//\n// During the beta, plugins manipulated the global window.plugins data structure directly. This\n// remains possible, but is officially deprecated and may be removed in a future release.\nfunction registerPlugin(id, plugin) {\n    window.plugins[id] = plugin;\n}\nwindow.registerPlugin = registerPlugin;\n\n// initializePlugins queries the server for all enabled plugins and loads each in turn.\nexport async function initializePlugins() {\n    if (store.getState().entities.general.config.PluginsEnabled !== 'true') {\n        return;\n    }\n\n    const {data, error} = await getPlugins()(store.dispatch);\n    if (error) {\n        console.error(error); //eslint-disable-line no-console\n        return;\n    }\n\n    if (data == null || data.length === 0) {\n        return;\n    }\n\n    await Promise.all(data.map((m) => {\n        return loadPlugin(m).catch((loadErr) => {\n            console.error(loadErr.message); //eslint-disable-line no-console\n        });\n    }));\n}\n\n// getPlugins queries the server for all enabled plugins\nexport function getPlugins() {\n    return async (dispatch) => {\n        let plugins;\n        try {\n            plugins = await Client4.getWebappPlugins();\n        } catch (error) {\n            return {error};\n        }\n\n        dispatch({type: ActionTypes.RECEIVED_WEBAPP_PLUGINS, data: plugins});\n\n        return {data: plugins};\n    };\n}\n\n// loadedPlugins tracks which plugins have been added as script tags to the page\nconst loadedPlugins = {};\n\n// loadPlugin fetches the web app bundle described by the given manifest, waits for the bundle to\n// load, and then ensures the plugin has been initialized.\nexport function loadPlugin(manifest) {\n    return new Promise((resolve, reject) => {\n        // Don't load it again if previously loaded\n        const oldManifest = loadedPlugins[manifest.id];\n        if (oldManifest && oldManifest.webapp.bundle_path === manifest.webapp.bundle_path) {\n            resolve();\n            return;\n        }\n\n        if (oldManifest) {\n            // upgrading, perform cleanup\n            store.dispatch({type: ActionTypes.REMOVED_WEBAPP_PLUGIN, data: manifest});\n        }\n\n        function onLoad() {\n            initializePlugin(manifest);\n            console.log('Loaded ' + manifest.id + ' plugin'); //eslint-disable-line no-console\n            resolve();\n        }\n\n        function onError() {\n            reject(new Error('Unable to load bundle for plugin ' + manifest.id));\n        }\n\n        // Backwards compatibility for old plugins\n        let bundlePath = manifest.webapp.bundle_path;\n        if (bundlePath.includes('/static/') && !bundlePath.includes('/static/plugins/')) {\n            bundlePath = bundlePath.replace('/static/', '/static/plugins/');\n        }\n\n        console.log('Loading ' + manifest.id + ' plugin'); //eslint-disable-line no-console\n\n        const script = document.createElement('script');\n        script.id = 'plugin_' + manifest.id;\n        script.type = 'text/javascript';\n        script.src = getSiteURL() + bundlePath;\n        script.onload = onLoad;\n        script.onerror = onError;\n\n        document.getElementsByTagName('head')[0].appendChild(script);\n        loadedPlugins[manifest.id] = manifest;\n    });\n}\n\n// initializePlugin creates a registry specific to the plugin and invokes any initialize function\n// on the registered plugin class.\nfunction initializePlugin(manifest) {\n    // Initialize the plugin\n    const plugin = window.plugins[manifest.id];\n    const registry = new PluginRegistry(manifest.id);\n    if (plugin && plugin.initialize) {\n        plugin.initialize(registry, store);\n    }\n}\n\n// removePlugin triggers any uninitialize callback on the registered plugin, unregisters any\n// event handlers, and removes the plugin script from the DOM entirely. The plugin is responsible\n// for removing any of its registered components.\nexport function removePlugin(manifest) {\n    if (!loadedPlugins[manifest.id]) {\n        return;\n    }\n    console.log('Removing ' + manifest.id + ' plugin'); //eslint-disable-line no-console\n\n    delete loadedPlugins[manifest.id];\n\n    store.dispatch({type: ActionTypes.REMOVED_WEBAPP_PLUGIN, data: manifest});\n\n    const plugin = window.plugins[manifest.id];\n    if (plugin && plugin.uninitialize) {\n        plugin.uninitialize();\n\n    // Support the deprecated deinitialize callback from the plugins beta.\n    } else if (plugin && plugin.deinitialize) {\n        plugin.deinitialize();\n    }\n    unregisterAllPluginWebSocketEvents(manifest.id);\n    unregisterPluginReconnectHandler(manifest.id);\n    unregisterPluginTranslationsSource(manifest.id);\n    const script = document.getElementById('plugin_' + manifest.id);\n    if (!script) {\n        return;\n    }\n    script.parentNode.removeChild(script);\n    console.log('Removed ' + manifest.id + ' plugin'); //eslint-disable-line no-console\n}\n\n// loadPluginsIfNecessary synchronizes the current state of loaded plugins with that of the server,\n// loading any newly added plugins and unloading any removed ones.\nexport async function loadPluginsIfNecessary() {\n    if (store.getState().entities.general.config.PluginsEnabled !== 'true') {\n        return;\n    }\n\n    const oldManifests = store.getState().plugins.plugins;\n\n    const {error} = await getPlugins()(store.dispatch);\n    if (error) {\n        console.error(error); //eslint-disable-line no-console\n        return;\n    }\n\n    const newManifests = store.getState().plugins.plugins;\n\n    // Get new plugins and update existing plugins if version changed\n    Object.values(newManifests).forEach((newManifest) => {\n        const oldManifest = oldManifests[newManifest.id];\n        if (!oldManifest || oldManifest.version !== newManifest.version) {\n            loadPlugin(newManifest).catch((loadErr) => {\n                console.error(loadErr.message); //eslint-disable-line no-console\n            });\n        }\n    });\n\n    // Remove old plugins\n    Object.keys(oldManifests).forEach((id) => {\n        if (!newManifests.hasOwnProperty(id)) {\n            const oldManifest = oldManifests[id];\n            store.dispatch({type: ActionTypes.REMOVED_WEBAPP_PLUGIN, data: oldManifest});\n            removePlugin(oldManifest);\n        }\n    });\n}\n","// Copyright (c) 2015-present Mattermost, Inc. All Rights Reserved.\n// See LICENSE.txt for license information.\n\nimport $ from 'jquery';\nrequire('perfect-scrollbar/jquery')($);\n\nimport PropTypes from 'prop-types';\nimport React from 'react';\nimport FastClick from 'fastclick';\nimport {Route, Switch, Redirect} from 'react-router-dom';\nimport {setUrl} from 'mattermost-redux/actions/general';\nimport {setSystemEmojis} from 'mattermost-redux/actions/emojis';\nimport {getConfig} from 'mattermost-redux/selectors/entities/general';\n\nimport * as UserAgent from 'utils/user_agent.jsx';\nimport {EmojiIndicesByAlias} from 'utils/emoji.jsx';\nimport {trackLoadTime} from 'actions/diagnostics_actions.jsx';\nimport * as GlobalActions from 'actions/global_actions.jsx';\nimport BrowserStore from 'stores/browser_store.jsx';\nimport {loadRecentlyUsedCustomEmojis} from 'actions/emoji_actions.jsx';\nimport * as I18n from 'i18n/i18n.jsx';\nimport {initializePlugins} from 'plugins';\nimport 'plugins/export.js';\nimport Constants, {StoragePrefixes} from 'utils/constants.jsx';\nimport {HFTRoute, LoggedInHFTRoute} from 'components/header_footer_template_route';\nimport IntlProvider from 'components/intl_provider';\nimport NeedsTeam from 'components/needs_team';\nimport {makeAsyncComponent} from 'components/async_load';\nimport loadErrorPage from 'bundle-loader?lazy!components/error_page';\nimport loadLoginController from 'bundle-loader?lazy!components/login/login_controller';\nimport loadAdminConsole from 'bundle-loader?lazy!components/admin_console';\nimport loadLoggedIn from 'bundle-loader?lazy!components/logged_in';\nimport loadPasswordResetSendLink from 'bundle-loader?lazy!components/password_reset_send_link';\nimport loadPasswordResetForm from 'bundle-loader?lazy!components/password_reset_form';\nimport loadSignupController from 'bundle-loader?lazy!components/signup/signup_controller';\nimport loadSignupEmail from 'bundle-loader?lazy!components/signup/signup_email';\nimport loadTermsOfService from 'bundle-loader?lazy!components/terms_of_service';\nimport loadShouldVerifyEmail from 'bundle-loader?lazy!components/should_verify_email';\nimport loadDoVerifyEmail from 'bundle-loader?lazy!components/do_verify_email';\nimport loadClaimController from 'bundle-loader?lazy!components/claim';\nimport loadHelpController from 'bundle-loader?lazy!components/help/help_controller';\nimport loadGetIosApp from 'bundle-loader?lazy!components/get_ios_app';\nimport loadGetAndroidApp from 'bundle-loader?lazy!components/get_android_app';\nimport loadSelectTeam from 'bundle-loader?lazy!components/select_team';\nimport loadAuthorize from 'bundle-loader?lazy!components/authorize';\nimport loadCreateTeam from 'bundle-loader?lazy!components/create_team';\nimport loadMfa from 'bundle-loader?lazy!components/mfa/mfa_controller';\nimport store from 'stores/redux_store.jsx';\nimport {getSiteURL} from 'utils/url.jsx';\nimport {enableDevModeFeatures, isDevMode} from 'utils/utils';\nimport A11yController from 'utils/a11y_controller';\n\nconst CreateTeam = makeAsyncComponent(loadCreateTeam);\nconst ErrorPage = makeAsyncComponent(loadErrorPage);\nconst TermsOfService = makeAsyncComponent(loadTermsOfService);\nconst LoginController = makeAsyncComponent(loadLoginController);\nconst AdminConsole = makeAsyncComponent(loadAdminConsole);\nconst LoggedIn = makeAsyncComponent(loadLoggedIn);\nconst PasswordResetSendLink = makeAsyncComponent(loadPasswordResetSendLink);\nconst PasswordResetForm = makeAsyncComponent(loadPasswordResetForm);\nconst SignupController = makeAsyncComponent(loadSignupController);\nconst SignupEmail = makeAsyncComponent(loadSignupEmail);\nconst ShouldVerifyEmail = makeAsyncComponent(loadShouldVerifyEmail);\nconst DoVerifyEmail = makeAsyncComponent(loadDoVerifyEmail);\nconst ClaimController = makeAsyncComponent(loadClaimController);\nconst HelpController = makeAsyncComponent(loadHelpController);\nconst GetIosApp = makeAsyncComponent(loadGetIosApp);\nconst GetAndroidApp = makeAsyncComponent(loadGetAndroidApp);\nconst SelectTeam = makeAsyncComponent(loadSelectTeam);\nconst Authorize = makeAsyncComponent(loadAuthorize);\nconst Mfa = makeAsyncComponent(loadMfa);\n\nconst LoggedInRoute = ({component: Component, ...rest}) => (\n    <Route\n        {...rest}\n        render={(props) => (\n            <LoggedIn {...props}>\n                <Component {...props}/>\n            </LoggedIn>\n        )}\n    />\n);\n\nexport default class Root extends React.Component {\n    static propTypes = {\n        diagnosticsEnabled: PropTypes.bool,\n        diagnosticId: PropTypes.string,\n        noAccounts: PropTypes.bool,\n        showTermsOfService: PropTypes.bool,\n        actions: PropTypes.shape({\n            loadMeAndConfig: PropTypes.func.isRequired,\n        }).isRequired,\n    }\n\n    constructor(props) {\n        super(props);\n        this.currentCategoryFocus = 0;\n        this.currentSidebarFocus = 0;\n\n        // Redux\n        setUrl(getSiteURL());\n\n        setSystemEmojis(EmojiIndicesByAlias);\n\n        // Force logout of all tabs if one tab is logged out\n        $(window).bind('storage', (e) => {\n            // when one tab on a browser logs out, it sets __logout__ in localStorage to trigger other tabs to log out\n            if (e.originalEvent.key === StoragePrefixes.LOGOUT && e.originalEvent.storageArea === localStorage && e.originalEvent.newValue) {\n                // make sure it isn't this tab that is sending the logout signal (only necessary for IE11)\n                if (BrowserStore.isSignallingLogout(e.originalEvent.newValue)) {\n                    return;\n                }\n\n                console.log('detected logout from a different tab'); //eslint-disable-line no-console\n                GlobalActions.emitUserLoggedOutEvent('/', false, false);\n            }\n\n            if (e.originalEvent.key === StoragePrefixes.LOGIN && e.originalEvent.storageArea === localStorage && e.originalEvent.newValue) {\n                // make sure it isn't this tab that is sending the logout signal (only necessary for IE11)\n                if (BrowserStore.isSignallingLogin(e.originalEvent.newValue)) {\n                    return;\n                }\n\n                console.log('detected login from a different tab'); //eslint-disable-line no-console\n                location.reload();\n            }\n        });\n\n        // Prevent drag and drop files from navigating away from the app\n        document.addEventListener('drop', (e) => {\n            e.preventDefault();\n            e.stopPropagation();\n        });\n\n        document.addEventListener('dragover', (e) => {\n            e.preventDefault();\n            e.stopPropagation();\n        });\n\n        // Fastclick\n        FastClick.attach(document.body);\n\n        this.state = {\n            configLoaded: false,\n        };\n\n        // Keyboard navigation for accessibility\n        if (!UserAgent.isInternetExplorer()) {\n            this.a11yController = new A11yController();\n        }\n    }\n\n    onConfigLoaded = () => {\n        if (isDevMode()) {\n            enableDevModeFeatures();\n        }\n\n        const segmentKey = Constants.DIAGNOSTICS_SEGMENT_KEY;\n        const diagnosticId = this.props.diagnosticId;\n\n        /*eslint-disable */\n        if (segmentKey != null && segmentKey !== '' && !segmentKey.startsWith('placeholder') && this.props.diagnosticsEnabled) {\n            !function(){var analytics=global.window.analytics=global.window.analytics||[];if(!analytics.initialize)if(analytics.invoked)window.console&&console.error&&console.error(\"Segment snippet included twice.\");else{analytics.invoked=!0;analytics.methods=[\"trackSubmit\",\"trackClick\",\"trackLink\",\"trackForm\",\"pageview\",\"identify\",\"group\",\"track\",\"ready\",\"alias\",\"page\",\"once\",\"off\",\"on\"];analytics.factory=function(t){return function(...args){var e=Array.prototype.slice.call(args);e.unshift(t);analytics.push(e);return analytics}};for(var t=0;t<analytics.methods.length;t++){var e=analytics.methods[t];analytics[e]=analytics.factory(e)}analytics.load=function(t){var e=document.createElement(\"script\");e.type=\"text/javascript\";e.async=!0;e.src=(\"https:\"===document.location.protocol ? \"https://\":\"http://\")+\"cdn.segment.com/analytics.js/v1/\"+t+\"/analytics.min.js\";var n=document.getElementsByTagName(\"script\")[0];n.parentNode.insertBefore(e,n)};analytics.SNIPPET_VERSION=\"3.0.1\";\n                analytics.load(segmentKey);\n\n                analytics.identify(diagnosticId, {}, {\n                    context: {\n                        ip: '0.0.0.0',\n                    },\n                    page: {\n                        path: '',\n                        referrer: '',\n                        search: '',\n                        title: '',\n                        url: '',\n                    },\n                    anonymousId: '00000000000000000000000000',\n                });\n\n                analytics.page('ApplicationLoaded', {\n                        path: '',\n                        referrer: '',\n                        search: '',\n                        title: '',\n                        url: '',\n                    },\n                    {\n                        context: {\n                            ip: '0.0.0.0'\n                        },\n                        anonymousId: '00000000000000000000000000'\n                    });\n            }}();\n        }\n        /*eslint-enable */\n\n        const afterIntl = () => {\n            if (this.props.location.pathname === '/' && this.props.noAccounts) {\n                this.props.history.push('/signup_user_complete');\n            }\n\n            initializePlugins().then(() => {\n                this.setState({configLoaded: true});\n            });\n        };\n        if (global.Intl) {\n            afterIntl();\n        } else {\n            I18n.safariFix(afterIntl);\n        }\n\n        loadRecentlyUsedCustomEmojis()(store.dispatch, store.getState);\n\n        const iosDownloadLink = getConfig(store.getState()).IosAppDownloadLink;\n        const androidDownloadLink = getConfig(store.getState()).AndroidAppDownloadLink;\n\n        const toResetPasswordScreen = this.props.location.pathname === '/reset_password_complete';\n\n        // redirect to the mobile landing page if the user hasn't seen it before\n        if (iosDownloadLink && UserAgent.isIosWeb() && !BrowserStore.hasSeenLandingPage() && !toResetPasswordScreen) {\n            this.props.history.push('/get_ios_app?redirect_to=' + encodeURIComponent(this.props.location.pathname) + encodeURIComponent(this.props.location.search));\n            BrowserStore.setLandingPageSeen(true);\n        } else if (androidDownloadLink && UserAgent.isAndroidWeb() && !BrowserStore.hasSeenLandingPage() && !toResetPasswordScreen) {\n            this.props.history.push('/get_android_app?redirect_to=' + encodeURIComponent(this.props.location.pathname) + encodeURIComponent(this.props.location.search));\n            BrowserStore.setLandingPageSeen(true);\n        }\n    }\n\n    redirectIfNecessary = (props) => {\n        if (props.location.pathname === '/') {\n            if (this.props.noAccounts) {\n                this.props.history.push('/signup_user_complete');\n            } else if (props.showTermsOfService) {\n                this.props.history.push('/terms_of_service');\n            }\n        }\n    }\n\n    UNSAFE_componentWillReceiveProps(newProps) { // eslint-disable-line camelcase\n        this.redirectIfNecessary(newProps);\n    }\n\n    componentDidMount() {\n        this.props.actions.loadMeAndConfig().then((response) => {\n            if (this.props.location.pathname === '/' && response[2] && response[2].data) {\n                GlobalActions.redirectUserToDefaultTeam();\n            }\n            this.onConfigLoaded();\n        });\n        trackLoadTime();\n    }\n\n    componentWillUnmount() {\n        $(window).unbind('storage');\n    }\n\n    render() {\n        if (!this.state.configLoaded) {\n            return <div/>;\n        }\n\n        return (\n            <IntlProvider>\n                <Switch>\n                    <Route\n                        path={'/error'}\n                        component={ErrorPage}\n                    />\n                    <HFTRoute\n                        path={'/login'}\n                        component={LoginController}\n                    />\n                    <HFTRoute\n                        path={'/reset_password'}\n                        component={PasswordResetSendLink}\n                    />\n                    <HFTRoute\n                        path={'/reset_password_complete'}\n                        component={PasswordResetForm}\n                    />\n                    <HFTRoute\n                        path={'/signup_user_complete'}\n                        component={SignupController}\n                    />\n                    <HFTRoute\n                        path={'/signup_email'}\n                        component={SignupEmail}\n                    />\n                    <HFTRoute\n                        path={'/should_verify_email'}\n                        component={ShouldVerifyEmail}\n                    />\n                    <HFTRoute\n                        path={'/do_verify_email'}\n                        component={DoVerifyEmail}\n                    />\n                    <HFTRoute\n                        path={'/claim'}\n                        component={ClaimController}\n                    />\n                    <HFTRoute\n                        path={'/help'}\n                        component={HelpController}\n                    />\n                    <LoggedInRoute\n                        path={'/terms_of_service'}\n                        component={TermsOfService}\n                    />\n                    <Route\n                        path={'/get_ios_app'}\n                        component={GetIosApp}\n                    />\n                    <Route\n                        path={'/get_android_app'}\n                        component={GetAndroidApp}\n                    />\n                    <LoggedInRoute\n                        path={'/admin_console'}\n                        component={AdminConsole}\n                    />\n                    <LoggedInHFTRoute\n                        path={'/select_team'}\n                        component={SelectTeam}\n                    />\n                    <LoggedInHFTRoute\n                        path={'/oauth/authorize'}\n                        component={Authorize}\n                    />\n                    <LoggedInHFTRoute\n                        path={'/create_team'}\n                        component={CreateTeam}\n                    />\n                    <LoggedInRoute\n                        path={'/mfa'}\n                        component={Mfa}\n                    />\n                    <LoggedInRoute\n                        path={'/:team'}\n                        component={NeedsTeam}\n                    />\n                    <Redirect\n                        to={{\n                            ...this.props.location,\n                            pathname: '/login',\n                        }}\n                    />\n                </Switch>\n            </IntlProvider>\n        );\n    }\n}\n","// Copyright (c) 2015-present Mattermost, Inc. All Rights Reserved.\n// See LICENSE.txt for license information.\n\nimport {ActionTypes} from 'utils/constants.jsx';\n\nexport function incrementWsErrorCount() {\n    return async (dispatch) => {\n        dispatch({\n            type: ActionTypes.INCREMENT_WS_ERROR_COUNT,\n        });\n    };\n}\n\nexport function resetWsErrorCount() {\n    return async (dispatch) => {\n        dispatch({\n            type: ActionTypes.RESET_WS_ERROR_COUNT,\n        });\n    };\n}\n","module.exports = function(cb) {\n\trequire.ensure([], function(require) {\n\t\tcb(require(\"!!../../node_modules/babel-loader/lib/index.js??ref--4!./index.js\"));\n\t});\n}","// Copyright (c) 2015-present Mattermost, Inc. All Rights Reserved.\n// See LICENSE.txt for license information.\n\nimport PropTypes from 'prop-types';\nimport React from 'react';\nimport Popper from 'popper.js';\nimport ReactDOM from 'react-dom';\n\nimport {Constants} from 'utils/constants';\nimport Pluggable from 'plugins/pluggable';\n\nconst tooltipContainerStyles = {\n    display: 'flex',\n    flexDirection: 'column',\n    alignItems: 'center',\n    zIndex: '10',\n};\n\nexport default class LinkTooltip extends React.PureComponent {\n    static propTypes = {\n        href: PropTypes.string.isRequired,\n        title: PropTypes.string.isRequired,\n    };\n\n    constructor(props) {\n        super(props);\n\n        this.tooltipContainerRef = React.createRef();\n        this.show = false;\n    }\n\n    showTooltip = (e) => {\n        //clear the hideTimeout in the case when the cursor is moved from a tooltipContainer child to the link\n        clearTimeout(this.hideTimeout);\n\n        if (!this.show) {\n            const target = $(e.target);\n            const tooltipContainer = $(this.tooltipContainerRef.current);\n\n            //clear the old this.showTimeout if there is any before overriding\n            clearTimeout(this.showTimeout);\n\n            this.showTimeout = setTimeout(() => {\n                this.show = true;\n\n                tooltipContainer.show();\n                tooltipContainer.children().on('mouseover', () => clearTimeout(this.hideTimeout));\n                tooltipContainer.children().on('mouseleave', (event) => {\n                    if (event.toElement !== null) {\n                        this.hideTooltip();\n                    }\n                });\n\n                this.popper = new Popper(target, tooltipContainer, {\n                    placement: 'bottom',\n                    modifiers: {\n                        preventOverflow: {enabled: false},\n                        hide: {enabled: false},\n                    },\n                });\n            }, Constants.OVERLAY_TIME_DELAY);\n        }\n    };\n\n    hideTooltip = () => {\n        //clear the old this.hideTimeout if there is any before overriding\n        clearTimeout(this.hideTimeout);\n\n        this.hideTimeout = setTimeout(() => {\n            this.show = false;\n\n            //prevent executing the showTimeout after the hideTooltip\n            clearTimeout(this.showTimeout);\n\n            $(this.tooltipContainerRef.current).hide();\n        }, Constants.OVERLAY_TIME_DELAY_SMALL);\n    };\n\n    render() {\n        const {href, title} = this.props;\n        return (\n            <React.Fragment>\n                {ReactDOM.createPortal(\n                    <div\n                        style={tooltipContainerStyles}\n                        ref={this.tooltipContainerRef}\n                    >\n                        <Pluggable\n                            href={href}\n                            pluggableName='LinkTooltip'\n                        />\n                    </div>,\n                    document.getElementById('root')\n                )}\n                <span\n                    onMouseOver={this.showTooltip}\n                    onMouseLeave={this.hideTooltip}\n                >\n                    {title}\n                </span>\n            </React.Fragment>\n        );\n    }\n}\n\n","// Copyright (c) 2015-present Mattermost, Inc. All Rights Reserved.\n// See LICENSE.txt for license information.\n\nimport React from 'react';\nimport {Route} from 'react-router-dom';\n\nimport HeaderFooterTemplate from 'bundle-loader?lazy!components/header_footer_template';\nimport loadLoggedIn from 'bundle-loader?lazy!components/logged_in';\nimport {AsyncComponent} from 'components/async_load';\n\nexport const HFTRoute = ({component: Component, ...rest}) => (\n    <Route\n        {...rest}\n        render={(props) => (\n            <AsyncComponent\n                doLoad={HeaderFooterTemplate}\n                {...props}\n            >\n                <Component {...props}/>\n            </AsyncComponent>\n        )}\n    />\n);\n\nexport const LoggedInHFTRoute = ({component: Component, ...rest}) => (\n    <Route\n        {...rest}\n        render={(props) => (\n            <AsyncComponent\n                doLoad={loadLoggedIn}\n                {...props}\n            >\n                <AsyncComponent\n                    doLoad={HeaderFooterTemplate}\n                    {...props}\n                >\n                    <Component {...props}/>\n                </AsyncComponent>\n            </AsyncComponent>\n        )}\n    />\n);\n","module.exports = function(cb) {\n\trequire.ensure([], function(require) {\n\t\tcb(require(\"!!../../node_modules/babel-loader/lib/index.js??ref--4!./index.js\"));\n\t});\n}","module.exports = function(cb) {\n\trequire.ensure([], function(require) {\n\t\tcb(require(\"!!../../node_modules/babel-loader/lib/index.js??ref--4!./index.js\"));\n\t});\n}","module.exports = __webpack_public_path__ + \"files/86911ca1b4bd5d37b1681ad52dfcf232.png\";","module.exports = __webpack_public_path__ + \"files/ea640a6646c0b59f88f3e0728be11ee1.png\";","// 1.0.3\n/*\nThe MIT License (MIT)\n\nCopyright (c) 2015 Jan Martin\n\nPermission is hereby granted, free of charge, to any person obtaining a copy\nof this software and associated documentation files (the \"Software\"), to deal\nin the Software without restriction, including without limitation the rights\nto use, copy, modify, merge, publish, distribute, sublicense, and/or sell\ncopies of the Software, and to permit persons to whom the Software is\nfurnished to do so, subject to the following conditions:\n\nThe above copyright notice and this permission notice shall be included in all\ncopies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\nIMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\nFITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\nAUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\nLIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\nOUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\nSOFTWARE.\n*/\n(function ($) {\n\n    $.fn.dragster = function (options) {\n        var settings = $.extend({\n            enter: $.noop,\n            leave: $.noop,\n            over: $.noop,\n            drop: $.noop\n        }, options);\n\n        return this.each(function () {\n            var first = false,\n                second = false,\n                $this = $(this);\n\n            $this.on({\n                dragenter: function (event) {\n                    if (first) {\n                        second = true;\n                        return;\n                    } else {\n                        first = true;\n                        $this.trigger('dragster:enter', event);\n                    }\n                    event.preventDefault();\n                },\n                dragleave: function (event) {\n                    if (second) {\n                        second = false;\n                    } else if (first) {\n                        first = false;\n                    }\n                    if (!first && !second) {\n                        $this.trigger('dragster:leave', event);\n                    }\n                    event.preventDefault();\n                },\n                dragover: function (event) {\n                    $this.trigger('dragster:over', event);\n                    event.preventDefault();\n                },\n                drop: function (event) {\n                    if (second) {\n                        second = false;\n                    } else if (first) {\n                        first = false;\n                    }\n                    if (!first && !second) {\n                        $this.trigger('dragster:drop', event);\n                    }\n                    event.preventDefault();\n                },\n                'dragster:enter': settings.enter,\n                'dragster:leave': settings.leave,\n                'dragster:over': settings.over,\n                'dragster:drop': settings.drop\n            });\n        });\n    };\n\n}(jQuery));\n","module.exports = function(cb) {\n\trequire.ensure([], function(require) {\n\t\tcb(require(\"!!../node_modules/babel-loader/lib/index.js??ref--4!./pdf_preview.jsx\"));\n\t});\n}","module.exports = __webpack_public_path__ + \"files/bd956aafccffed574da236f21af209ef.gif\";","module.exports = __webpack_public_path__ + \"files/8b03642d36741ba3030a9004a1d56bb0.gif\";","module.exports = __webpack_public_path__ + \"files/08e71e3e79544893825f62b7398a18e3.png\";","module.exports = __webpack_public_path__ + \"files/f17f34e72125711d05850934588a743b.png\";","module.exports = __webpack_public_path__ + \"files/c86ea01a44f1291289b4af3eeb01f261.png\";","module.exports = function(cb) {\n\trequire.ensure([], function(require) {\n\t\tcb(require(\"!!../../node_modules/babel-loader/lib/index.js??ref--4!./index.jsx\"));\n\t});\n}","module.exports = function(cb) {\n\trequire.ensure([], function(require) {\n\t\tcb(require(\"!!../../../node_modules/babel-loader/lib/index.js??ref--4!./index.js\"));\n\t});\n}","module.exports = function(cb) {\n\trequire.ensure([], function(require) {\n\t\tcb(require(\"!!../../node_modules/babel-loader/lib/index.js??ref--4!./index.js\"));\n\t});\n}","module.exports = function(cb) {\n\trequire.ensure([], function(require) {\n\t\tcb(require(\"!!../../node_modules/babel-loader/lib/index.js??ref--4!./index.js\"));\n\t});\n}","module.exports = function(cb) {\n\trequire.ensure([], function(require) {\n\t\tcb(require(\"!!../../node_modules/babel-loader/lib/index.js??ref--4!./index.js\"));\n\t});\n}","module.exports = function(cb) {\n\trequire.ensure([], function(require) {\n\t\tcb(require(\"!!../../../node_modules/babel-loader/lib/index.js??ref--4!./index.js\"));\n\t});\n}","module.exports = function(cb) {\n\trequire.ensure([], function(require) {\n\t\tcb(require(\"!!../../../node_modules/babel-loader/lib/index.js??ref--4!./index.js\"));\n\t});\n}","module.exports = function(cb) {\n\trequire.ensure([], function(require) {\n\t\tcb(require(\"!!../../node_modules/babel-loader/lib/index.js??ref--4!./index.js\"));\n\t});\n}","module.exports = function(cb) {\n\trequire.ensure([], function(require) {\n\t\tcb(require(\"!!../../node_modules/babel-loader/lib/index.js??ref--4!./index.js\"));\n\t});\n}","module.exports = function(cb) {\n\trequire.ensure([], function(require) {\n\t\tcb(require(\"!!../../node_modules/babel-loader/lib/index.js??ref--4!./index.js\"));\n\t});\n}","module.exports = function(cb) {\n\trequire.ensure([], function(require) {\n\t\tcb(require(\"!!../../node_modules/babel-loader/lib/index.js??ref--4!./index.js\"));\n\t});\n}","module.exports = function(cb) {\n\trequire.ensure([], function(require) {\n\t\tcb(require(\"!!../../node_modules/babel-loader/lib/index.js??ref--4!./help_controller.jsx\"));\n\t});\n}","module.exports = function(cb) {\n\trequire.ensure([], function(require) {\n\t\tcb(require(\"!!../../node_modules/babel-loader/lib/index.js??ref--4!./index.js\"));\n\t});\n}","module.exports = function(cb) {\n\trequire.ensure([], function(require) {\n\t\tcb(require(\"!!../../node_modules/babel-loader/lib/index.js??ref--4!./index.js\"));\n\t});\n}","module.exports = function(cb) {\n\trequire.ensure([], function(require) {\n\t\tcb(require(\"!!../../node_modules/babel-loader/lib/index.js??ref--4!./index.js\"));\n\t});\n}","module.exports = function(cb) {\n\trequire.ensure([], function(require) {\n\t\tcb(require(\"!!../../node_modules/babel-loader/lib/index.js??ref--4!./index.js\"));\n\t});\n}","module.exports = function(cb) {\n\trequire.ensure([], function(require) {\n\t\tcb(require(\"!!../../node_modules/babel-loader/lib/index.js??ref--4!./index.js\"));\n\t});\n}","module.exports = function(cb) {\n\trequire.ensure([], function(require) {\n\t\tcb(require(\"!!../../../node_modules/babel-loader/lib/index.js??ref--4!./index.js\"));\n\t});\n}","// Copyright (c) 2015-present Mattermost, Inc. All Rights Reserved.\n// See LICENSE.txt for license information.\n\nimport Constants, {EventTypes, A11yClassNames, A11yAttributeNames, A11yCustomEventTypes} from 'utils/constants.jsx';\nimport {isKeyPressed, cmdOrCtrlPressed, isMac} from 'utils/utils';\nimport {isDesktopApp} from 'utils/user_agent';\n\nconst listenerOptions = {\n    capture: true,\n};\n\nexport default class A11yController {\n    constructor() {\n        this.regionHTMLCollection = this.getAllRegions();\n        this.sectionHTMLCollection = null; // populated when region changes\n        this.modalHTMLCollection = this.getAllModals();\n        this.popupHTMLCollection = this.getAllPopups();\n\n        this.activeRegion = null;\n        this.activeSection = null;\n        this.activeElement = null;\n\n        this.mouseIsPressed = false;\n\n        this.lastInputEventIsKeyboard = false;\n\n        this.enterKeyIsPressed = false;\n        this.f6KeyIsPressed = false;\n        this.upArrowKeyIsPressed = false;\n        this.downArrowKeyIsPressed = false;\n        this.tabKeyIsPressed = false;\n        this.tildeKeyIsPressed = false;\n        this.windowIsFocused = true;\n\n        // used to reset navigation whenever navigation within a region occurs (section or element)\n        this.resetNavigation = false;\n\n        document.addEventListener(EventTypes.KEY_DOWN, this.handleKeyDown, listenerOptions);\n        document.addEventListener(EventTypes.KEY_UP, this.handleKeyUp, listenerOptions);\n        document.addEventListener(EventTypes.CLICK, this.handleMouseClick, listenerOptions);\n        document.addEventListener(EventTypes.MOUSE_DOWN, this.handleMouseDown, listenerOptions);\n        document.addEventListener(EventTypes.MOUSE_UP, this.handleMouseUp, listenerOptions);\n        document.addEventListener(EventTypes.FOCUS, this.handleFocus, listenerOptions);\n        window.addEventListener(EventTypes.BLUR, this.handleWindowBlur, listenerOptions);\n    }\n\n    destroy() {\n        this.clearActiveRegion();\n        this.clearCurrentFocus();\n\n        document.removeEventListener(EventTypes.KEY_DOWN, this.handleKeyDown, listenerOptions);\n        document.removeEventListener(EventTypes.KEY_UP, this.handleKeyUp, listenerOptions);\n        document.removeEventListener(EventTypes.CLICK, this.handleMouseClick, listenerOptions);\n        document.removeEventListener(EventTypes.MOUSE_DOWN, this.handleMouseDown, listenerOptions);\n        document.removeEventListener(EventTypes.MOUSE_UP, this.handleMouseUp, listenerOptions);\n        document.removeEventListener(EventTypes.FOCUS, this.handleFocus, listenerOptions);\n        window.removeEventListener(EventTypes.BLUR, this.handleWindowBlur, listenerOptions);\n    }\n\n    // convenience getter/setters\n\n    /**\n     * Determines if keyboard navigation is currently in progress based on several criteria as follows:\n     * 1. There must be defined regions and a single region must be active\n     * 2. The last input event detected must be a keyboard event\n     * 3. There must be no open modals and/or popups\n     * 4. There must be an active element and it must support classList\n     */\n    get navigationInProgress() {\n        if (!this.regions || !this.regions.length || !this.isElementValid(this.activeRegion)) {\n            return false;\n        }\n        if (!this.lastInputEventIsKeyboard) {\n            return false;\n        }\n        if (this.modalIsOpen || this.popupIsOpen) {\n            return false;\n        }\n        if (!this.isElementValid(this.activeElement)) {\n            return false;\n        }\n        return true;\n    }\n\n    /**\n     * Returns an array of available regions sorted by A11yAttributeNames.SORT_ORDER\n     */\n    get regions() {\n        let domElements = this.sortElementsByAttributeOrder(this.regionHTMLCollection);\n        domElements = domElements.filter((element) => {\n            return this.elementIsVisible(element);\n        });\n        return domElements;\n    }\n\n    /**\n     * Returns an array of available sections sorted by A11yAttributeNames.SORT_ORDER and optionally reversed\n     */\n    get sections() {\n        let domElements = this.sortElementsByAttributeOrder(this.sectionHTMLCollection);\n        domElements = domElements.filter((element) => {\n            return this.elementIsVisible(element);\n        });\n        if (this.shouldReverseSections) {\n            domElements.reverse();\n        }\n        return domElements;\n    }\n\n    /**\n     * Returns the index of the active region\n     */\n    get activeRegionIndex() {\n        if (!this.activeRegion) {\n            return null;\n        }\n        return this.regions.indexOf(this.activeRegion);\n    }\n\n    /**\n     * Returns the index of the active section\n     */\n    get activeSectionIndex() {\n        if (!this.activeSection) {\n            return null;\n        }\n        return this.sections.indexOf(this.activeSection);\n    }\n\n    /**\n     * Returns whether the regions requires reverse section navigation\n     */\n    get shouldReverseSections() {\n        if (!this.activeRegion) {\n            return false;\n        }\n        return this.getOrderReverseAttribute(this.activeRegion);\n    }\n\n    /**\n     * Returns the element that should currently have focus\n     */\n    get focusedElement() {\n        let focusedElement;\n        if (this.activeElement) {\n            focusedElement = this.activeElement;\n        } else if (this.activeSection) {\n            focusedElement = this.activeSection;\n        } else if (this.activeRegion) {\n            focusedElement = this.activeRegion;\n        }\n        return focusedElement;\n    }\n\n    /**\n     * Returnes whether an a11y-specific key is currently pressed\n     */\n    get a11yKeyIsPressed() {\n        return this.f6KeyIsPressed ||\n               this.upArrowKeyIsPressed ||\n               this.downArrowKeyIsPressed ||\n               this.tabKeyIsPressed ||\n               this.tildeKeyIsPressed;\n    }\n\n    /**\n     * Indicates if a modal window is currently open\n     * - modals must have A11yClassNames.MODAL to be considered\n     */\n    get modalIsOpen() {\n        return this.modalHTMLCollection.length > 0;\n    }\n\n    /**\n     * Indicates if a popup/dropdown element is currently open\n     * - popups/dropdowns must have A11yClassNames.POPUP to be considered\n     */\n    get popupIsOpen() {\n        return this.popupHTMLCollection.length > 0;\n    }\n\n    // public methods\n\n    /**\n     * Determines the next region, sets it as active and updates the current focus\n     */\n    nextRegion() {\n        const regions = this.regions;\n        if (\n            !regions ||\n            !regions.length ||\n            this.modalIsOpen ||\n            this.popupIsOpen\n        ) {\n            return;\n        }\n        let newRegion;\n        if (\n            !this.activeRegion ||\n            this.activeRegionIndex === regions.length - 1 ||\n            this.resetNavigation\n        ) {\n            newRegion = regions[0];\n        } else {\n            newRegion = regions[this.activeRegionIndex + 1];\n        }\n        this.setActiveRegion(newRegion);\n        this.setCurrentFocus();\n        this.resetNavigation = false;\n    }\n\n    /**\n     * Determines the previous region, sets it as active and updates the current focus\n     */\n    previousRegion() {\n        const regions = this.regions;\n        if (\n            !regions ||\n            !regions.length ||\n            this.modalIsOpen ||\n            this.popupIsOpen\n        ) {\n            return;\n        }\n        let newRegion;\n        if (!this.activeRegion || (this.activeRegionIndex !== 0 && this.resetNavigation)) {\n            newRegion = regions[0];\n        } else if (this.activeRegionIndex === 0) {\n            newRegion = regions[regions.length - 1];\n        } else {\n            newRegion = regions[this.activeRegionIndex - 1];\n        }\n        this.setActiveRegion(newRegion);\n        this.setCurrentFocus();\n        this.resetNavigation = false;\n    }\n\n    /**\n     * Determines the next section, sets it as active and updates the current focus\n     */\n    nextSection() {\n        const sections = this.sections;\n        const shouldLoopNavigation = this.getLoopNavigationAttribute(this.activeRegion);\n        if (\n            this.modalIsOpen ||\n            this.popupIsOpen ||\n            !sections ||\n            !sections.length ||\n            (!shouldLoopNavigation && this.activeSectionIndex === sections.length - 1)\n        ) {\n            return;\n        }\n        let newSection;\n        if (this.activeSection && this.activeSectionIndex < sections.length - 1) {\n            newSection = sections[this.activeSectionIndex + 1];\n        } else {\n            newSection = sections[0];\n        }\n        this.setActiveSection(newSection);\n        this.setCurrentFocus();\n        this.resetNavigation = true;\n    }\n\n    /**\n     * Determines the previous section, sets it as active and updates the current focus\n     */\n    previousSection() {\n        const sections = this.sections;\n        const shouldLoopNavigation = this.getLoopNavigationAttribute(this.activeRegion);\n        if (\n            this.modalIsOpen ||\n            this.popupIsOpen ||\n            !sections ||\n            !sections.length ||\n            (!shouldLoopNavigation && this.activeSectionIndex === 0)\n        ) {\n            return;\n        }\n        let newSection;\n        if (this.activeSection && this.activeSectionIndex > 0) {\n            newSection = sections[this.activeSectionIndex - 1];\n        } else if (this.activeSection && this.activeSectionIndex === 0) {\n            newSection = sections[sections.length - 1];\n        } else {\n            newSection = sections[0];\n        }\n        this.setActiveSection(newSection);\n        this.setCurrentFocus();\n        this.resetNavigation = true;\n    }\n\n    /**\n     * Takes the provided dom element, finds it's parent section and region (if available),\n     * sets them as active and updates the current focus\n     * @param {HTMLElement} element - the DOM element to set as the active element\n     * @param {array or boolean} elementPath - array of element's dom branch or boolean to find section/region of element\n     */\n    nextElement(element, elementPath = false) {\n        let region;\n        let section;\n        if (elementPath && elementPath.length) {\n            // is the current element in an active region?\n            if (elementPath.indexOf(this.activeRegion) < 0) {\n                region = elementPath.find((pathElement) => {\n                    if (!pathElement.classList) {\n                        return false;\n                    }\n                    return pathElement.classList.contains(A11yClassNames.REGION);\n                });\n            }\n\n            // is the current element in an active section?\n            if (elementPath.indexOf(this.activeSection) < 0) {\n                section = elementPath.find((pathElement) => {\n                    if (!pathElement.classList) {\n                        return false;\n                    }\n                    return pathElement.classList.contains(A11yClassNames.SECTION);\n                });\n            }\n        } else if (elementPath && typeof element.closest === 'function') {\n            region = element.closest(`.${A11yClassNames.REGION}`);\n            section = element.closest(`.${A11yClassNames.SECTION}`);\n        }\n        if (region && this.activeRegion !== region) {\n            this.setActiveRegion(region, false);\n        }\n        if (section && this.activeSection !== section) {\n            this.setActiveSection(section);\n        }\n        this.setActiveElement(element);\n        this.setCurrentFocus();\n        this.resetNavigation = true;\n    }\n\n    /**\n     * Resets the a11y navigation controller, active region/section/element, clears focus and resets user interraction states\n     */\n    cancelNavigation() {\n        this.clearActiveRegion();\n        this.setCurrentFocus();\n        this.resetInterractionStates();\n    }\n\n    // private methods\n\n    /**\n     * Sets the currently active region and stores a list of the regions sections\n     * @param {HTMLElement} element - DOM element to set as the active region\n     * @param {boolean} canFocusChild - whether to focus child section instead of provide region\n     * @emits {A11yCustomEventTypes.ACTIVATE} - emitted on the provided DOM element once set to active\n     */\n    setActiveRegion(element, canFocusChild = true) {\n        if (!this.isElementValid(element, [this.activeRegion]) && !this.resetNavigation) {\n            return;\n        }\n\n        // clear previous active region\n        this.clearActiveRegion();\n\n        // setup new active region\n        this.activeRegion = element;\n        this.activeRegion.addEventListener(A11yCustomEventTypes.UPDATE, this.handleActiveRegionUpdate);\n        this.activeRegion.dispatchEvent(new Event(A11yCustomEventTypes.ACTIVATE));\n\n        // apply visual updates to active region\n        this.updateActiveRegion();\n\n        // retrieve all sections for the new active region\n        this.sectionHTMLCollection = this.getAllSectionsForRegion(this.activeRegion);\n\n        // should the visual focus start on a child section\n        if (canFocusChild && this.getFocusChildAttribute(this.activeRegion) && this.sections && this.sections.length) {\n            this.setActiveSection(this.sections[0]);\n        }\n    }\n\n    /**\n     * Sets the currently active section\n     * @param {HTMLElement} element - DOM element to set as the active section\n     * @emits {A11yCustomEventTypes.ACTIVATE} - emitted on the provided DOM element once set to active\n     */\n    setActiveSection(element) {\n        if (!this.isElementValid(element, [this.activeSection])) {\n            return;\n        }\n\n        // clear previous active section\n        this.clearActiveSection();\n\n        // setup new active section\n        this.activeSection = element;\n        this.activeSection.addEventListener(A11yCustomEventTypes.UPDATE, this.handleActiveSectionUpdate);\n        this.activeSection.dispatchEvent(new Event(A11yCustomEventTypes.ACTIVATE));\n\n        // apply visual updates to active section\n        this.updateActiveSection();\n    }\n\n    /**\n     * Sets the currently active element\n     * @param {HTMLElement} element - DOM element to set as the active element\n     * @emits {A11yCustomEventTypes.ACTIVATE} - emitted on the provided DOM element once set to active\n     */\n    setActiveElement(element) {\n        if (!this.isElementValid(element, [this.activeElement])) {\n            return;\n        }\n\n        // clear previous active element\n        this.clearActiveElement();\n\n        // setup new active element\n        this.activeElement = element;\n        this.activeElement.addEventListener(A11yCustomEventTypes.UPDATE, this.handleActiveElementUpdate);\n        this.activeElement.dispatchEvent(new Event(A11yCustomEventTypes.ACTIVATE));\n\n        // apply visual updates to active element\n        this.updateActiveElement();\n    }\n\n    /**\n     * Updates the focus status of the element that should now have focus\n     */\n    setCurrentFocus() {\n        this.clearCurrentFocus();\n        if (!this.focusedElement) {\n            return;\n        }\n\n        // set focus on the element that should have focus if needed\n        if (document.activeElement !== this.focusedElement) {\n            this.focusedElement.focus();\n        }\n\n        // apply visual updates to focused element\n        this.udpateCurrentFocus();\n    }\n\n    /**\n     * Updates the visual state of the active region and makes sure it is focusable\n     */\n    updateActiveRegion() {\n        if (!this.activeRegion) {\n            return;\n        }\n        this.activeRegion.classList.add(A11yClassNames.ACTIVE);\n\n        // ensure active region element is focusable\n        if (!this.activeRegion.getAttribute('tabindex')) {\n            this.activeRegion.setAttribute('tabindex', -1);\n        }\n    }\n\n    /**\n     * Updates the visual state of the active section and makes sure it is focusable\n     */\n    updateActiveSection() {\n        if (!this.activeSection) {\n            return;\n        }\n        this.activeSection.classList.add(A11yClassNames.ACTIVE);\n\n        // ensure active section element is focusable\n        if (!this.activeSection.getAttribute('tabindex')) {\n            this.activeSection.setAttribute('tabindex', -1);\n        }\n    }\n\n    /**\n     * Updates the visual state of the active element\n     */\n    updateActiveElement() {\n        if (!this.activeElement) {\n            return;\n        }\n        this.activeElement.classList.add(A11yClassNames.ACTIVE);\n    }\n\n    /**\n     * Updates the visual state of the currently focused element\n     */\n    udpateCurrentFocus(forceUpdate = false) {\n        if ((!this.focusedElement || !this.a11yKeyIsPressed) && !forceUpdate) {\n            return;\n        }\n        this.focusedElement.classList.add(A11yClassNames.FOCUSED);\n    }\n\n    /**\n     * Clears all a11y-applied classes, events and the active region DOM element reference\n     */\n    clearActiveRegion() {\n        if (this.activeRegion) {\n            this.activeRegion.classList.remove(A11yClassNames.ACTIVE);\n            this.activeRegion.dispatchEvent(new Event(A11yCustomEventTypes.DEACTIVATE));\n            this.activeRegion.removeEventListener(A11yCustomEventTypes.UPDATE, this.handleActiveRegionUpdate);\n            this.activeRegion = null;\n        }\n        this.clearActiveSection();\n    }\n\n    /**\n     * Clears all a11y-applied classes, events and the active section DOM element reference\n     */\n    clearActiveSection() {\n        if (this.activeSection) {\n            this.activeSection.classList.remove(A11yClassNames.ACTIVE);\n            this.activeSection.dispatchEvent(new Event(A11yCustomEventTypes.DEACTIVATE));\n            this.activeSection.removeEventListener(A11yCustomEventTypes.UPDATE, this.handleActiveSectionUpdate);\n            this.activeSection = null;\n        }\n        this.clearActiveElement();\n    }\n\n    /**\n     * Clears all a11y-applied classes, events and the active DOM element reference\n     */\n    clearActiveElement() {\n        if (this.activeElement) {\n            if (this.activeElement !== this.activeRegion && this.activeElement !== this.activeSection) {\n                this.activeElement.classList.remove(A11yClassNames.ACTIVE);\n                this.activeElement.dispatchEvent(new Event(A11yCustomEventTypes.DEACTIVATE));\n            }\n            this.activeElement.removeEventListener(A11yCustomEventTypes.UPDATE, this.handleActiveElementUpdate);\n            this.activeElement = null;\n        }\n    }\n\n    /**\n     * Clears all focused element classes and blurs the active element if requested\n     */\n    clearCurrentFocus(blurActiveElement = false) {\n        Array.from(document.getElementsByClassName(A11yClassNames.FOCUSED)).forEach((element) => {\n            element.classList.remove(A11yClassNames.FOCUSED);\n        });\n        if (blurActiveElement) {\n            document.activeElement.blur();\n        }\n    }\n\n    /**\n     * Resets the state of all a11y-defined interraction methods\n     */\n    resetInterractionStates() {\n        this.mouseIsPressed = false;\n        this.f6KeyIsPressed = false;\n        this.upArrowKeyIsPressed = false;\n        this.downArrowKeyIsPressed = false;\n        this.tabKeyIsPressed = false;\n        this.tildeKeyIsPressed = false;\n        this.enterKeyIsPressed = false;\n    }\n\n    // helper methods\n\n    /**\n     * Returns an HTMLCollection object of all defined regions\n     * - use of HTMLCollection is intentional as this object auto updates to reflect DOM changes\n     */\n    getAllRegions() {\n        return document.getElementsByClassName(A11yClassNames.REGION);\n    }\n\n    /**\n     * Returns an HTMLCollection object of all defined sections for the currently active region\n     * - use of HTMLCollection is intentional as this object auto updates to reflect DOM changes\n     */\n    getAllSectionsForRegion(region) {\n        if (!region) {\n            return null;\n        }\n        return region.getElementsByClassName(A11yClassNames.SECTION);\n    }\n\n    /**\n     * Sort a list of DOM elements by defined A11yAttributeNames.SORT_ORDER attribute\n     * @param {HTMLCollection} elements - list of elements to be sorted\n     */\n    sortElementsByAttributeOrder(elements) {\n        if (!elements || !elements.length) {\n            return [];\n        }\n        return Array.from(elements).sort((elementA, elementB) => {\n            const elementAOrder = elementA.getAttribute(A11yAttributeNames.SORT_ORDER);\n            const elementBOrder = elementB.getAttribute(A11yAttributeNames.SORT_ORDER);\n            return elementAOrder - elementBOrder;\n        });\n    }\n\n    /**\n     * Returns whether a DOM element is currently visible or not\n     * @param {HTMLElement} element - the DOM element to check\n     */\n    elementIsVisible(element) {\n        return element && element.offsetParent;\n    }\n\n    /**\n     * Retuns an HTMLCollection of all DOM elements that have the A11yClassNames.MODAL class\n     */\n    getAllModals() {\n        return document.getElementsByClassName(A11yClassNames.MODAL);\n    }\n\n    /**\n     * Retuns an HTMLCollection of all DOM elements that have the A11yClassNames.POPUP class\n     */\n    getAllPopups() {\n        return document.getElementsByClassName(A11yClassNames.POPUP);\n    }\n\n    /**\n     * Helper to retrieve the value of the A11yAttributeNames.LOOP_NAVIGATION attribute for the provided DOM element\n     * @param {HTMLElement} element - the element to retrive the A11yAttributeNames.LOOP_NAVIGATION value from\n     */\n    getLoopNavigationAttribute(element) {\n        const attributeValue = element.getAttribute(A11yAttributeNames.LOOP_NAVIGATION);\n        if (attributeValue && attributeValue.toLowerCase() === 'false') {\n            return false;\n        }\n        return true;\n    }\n\n    /**\n     * Helper to retrieve the value of the A11yAttributeNames.ORDER_REVERSE attribute for the provided DOM element\n     * @param {HTMLElement} element - the element to retrive the A11yAttributeNames.ORDER_REVERSE value from\n     */\n    getOrderReverseAttribute(element) {\n        const attributeValue = element.getAttribute(A11yAttributeNames.ORDER_REVERSE);\n        if (attributeValue && attributeValue.toLowerCase() === 'true') {\n            return true;\n        }\n        return false;\n    }\n\n    /**\n     * Helper to retrieve the value of the A11yAttributeNames.FOCUS_CHILD attribute for the provided DOM element\n     * @param {HTMLElement} element - the element to retrive the A11yAttributeNames.FOCUS_CHILD value from\n     */\n    getFocusChildAttribute(element) {\n        const attributeValue = element.getAttribute(A11yAttributeNames.FOCUS_CHILD);\n        if (attributeValue && attributeValue.toLowerCase() === 'true') {\n            return true;\n        }\n        return false;\n    }\n\n    /**\n     * Helper method to verify if a provided DOM element is a valid element for a11y navigation\n     * @param {HTMLElement} element - the DOM element to check\n     * @param {arry of HTMLElements} invalidElements - a list of invalid DOM elements to check against\n     */\n    isElementValid(element, invalidElements = []) {\n        if (\n            element &&\n            element.classList &&\n            !invalidElements.includes(element)\n        ) {\n            return true;\n        }\n        return false;\n    }\n\n    // event handling methods\n\n    handleKeyDown = (event) => {\n        const modifierKeys = {\n            ctrlIsPressed: event.ctrlKey,\n            altIsPressed: event.altKey,\n            shiftIsPressed: event.shiftKey,\n        };\n        this.lastInputEventIsKeyboard = true;\n        switch (true) {\n        case isKeyPressed(event, Constants.KeyCodes.TAB):\n            if ((!isMac() && modifierKeys.altIsPressed) || cmdOrCtrlPressed(event)) {\n                return;\n            }\n            this.tabKeyIsPressed = true;\n            break;\n        case isKeyPressed(event, Constants.KeyCodes.TILDE):\n            if (!this.regions || !this.regions.length) {\n                return;\n            }\n\n            // Check to make sure both aren't pressed because some older webkit browsers set CTRL and ALT when AltGr is pressed\n            if (modifierKeys.ctrlIsPressed && !modifierKeys.altIsPressed) {\n                this.tildeKeyIsPressed = true;\n                event.preventDefault();\n                if (modifierKeys.shiftIsPressed) {\n                    this.previousRegion();\n                } else {\n                    this.nextRegion();\n                }\n            }\n            break;\n        case isKeyPressed(event, Constants.KeyCodes.F6):\n            if (!isDesktopApp() && !cmdOrCtrlPressed(event)) {\n                return;\n            }\n            this.f6KeyIsPressed = true;\n            event.preventDefault();\n            if (modifierKeys.shiftIsPressed) {\n                this.previousRegion();\n            } else {\n                this.nextRegion();\n            }\n            break;\n        case isKeyPressed(event, Constants.KeyCodes.UP):\n            if (!this.navigationInProgress || !this.sections || !this.sections.length) {\n                return;\n            }\n            this.upArrowKeyIsPressed = true;\n            event.preventDefault();\n            if (this.shouldReverseSections) {\n                this.nextSection();\n            } else {\n                this.previousSection();\n            }\n            break;\n        case isKeyPressed(event, Constants.KeyCodes.DOWN):\n            if (!this.navigationInProgress || !this.sections || !this.sections.length) {\n                return;\n            }\n            this.downArrowKeyIsPressed = true;\n            event.preventDefault();\n            if (this.shouldReverseSections) {\n                this.previousSection();\n            } else {\n                this.nextSection();\n            }\n            break;\n        case isKeyPressed(event, Constants.KeyCodes.ESCAPE):\n            if (!this.navigationInProgress) {\n                return;\n            }\n            event.preventDefault();\n            this.cancelNavigation();\n            break;\n        case isKeyPressed(event, Constants.KeyCodes.ENTER):\n            this.enterKeyIsPressed = true;\n            break;\n        case isKeyPressed(event, Constants.KeyCodes.SPACE):\n            if (event.target.nodeName === 'BUTTON') {\n                event.preventDefault();\n                event.stopPropagation();\n                event.target.click();\n            }\n            break;\n        }\n    }\n\n    handleKeyUp = () => {\n        this.resetInterractionStates();\n    }\n\n    handleMouseClick = (event) => {\n        // hitting enter on a <button> triggers a click event\n        if (!this.enterKeyIsPressed) {\n            this.lastInputEventIsKeyboard = false;\n        }\n        if (event.target === this.activeElement) {\n            return;\n        }\n        this.cancelNavigation();\n    }\n\n    handleMouseDown = () => {\n        this.mouseIsPressed = true;\n    }\n\n    handleMouseUp = () => {\n        this.mouseIsPressed = false;\n    }\n\n    handleFocus = (event) => {\n        if (!this.mouseIsPressed && this.windowIsFocused) {\n            this.nextElement(event.target, event.path || true);\n        }\n\n        // focus just came back to the app\n        if (!this.windowIsFocused) {\n            this.windowIsFocused = true;\n        }\n    }\n\n    handleWindowBlur = (event) => {\n        if (event.target === window) {\n            this.windowIsFocused = false;\n        }\n    }\n\n    handleActiveRegionUpdate = () => {\n        if (this.navigationInProgress) {\n            this.updateActiveRegion();\n            if (this.focusedElement === this.activeRegion) {\n                this.udpateCurrentFocus(true);\n            }\n        }\n    }\n\n    handleActiveSectionUpdate = () => {\n        if (this.navigationInProgress) {\n            this.updateActiveSection();\n            if (this.focusedElement === this.activeSection) {\n                this.udpateCurrentFocus(true);\n            }\n        }\n    }\n\n    handleActiveElementUpdate = () => {\n        if (this.navigationInProgress) {\n            this.updateActiveElement();\n            if (this.focusedElement === this.activeElement) {\n                this.udpateCurrentFocus(true);\n            }\n        }\n    }\n}\n","// Copyright (c) 2015-present Mattermost, Inc. All Rights Reserved.\n// See LICENSE.txt for license information.\n\nimport * as PostActions from 'mattermost-redux/actions/posts';\n\nimport {logError} from 'mattermost-redux/actions/errors';\n\nimport {ActionTypes, AnnouncementBarTypes} from 'utils/constants.jsx';\n\nexport function editPost(post) {\n    return async (dispatch, getState) => {\n        const result = await PostActions.editPost(post)(dispatch, getState);\n\n        // Send to error bar if it's an edit post error about time limit.\n        if (result.error && result.error.server_error_id === 'api.post.update_post.permissions_time_limit.app_error') {\n            dispatch(logError({type: AnnouncementBarTypes.ANNOUNCEMENT, message: result.error.message}, true));\n        }\n\n        return result;\n    };\n}\n\nexport function selectAttachmentMenuAction(postId, actionId, cookie, dataSource, text, value) {\n    return async (dispatch) => {\n        dispatch({\n            type: ActionTypes.SELECT_ATTACHMENT_MENU_ACTION,\n            postId,\n            data: {\n                [actionId]: {\n                    text,\n                    value,\n                },\n            },\n        });\n\n        dispatch(PostActions.doPostActionWithCookie(postId, actionId, cookie, value));\n    };\n}\n","// Copyright (c) 2015-present Mattermost, Inc. All Rights Reserved.\n// See LICENSE.txt for license information.\n\nimport PropTypes from 'prop-types';\nimport React from 'react';\nimport {Modal} from 'react-bootstrap';\nimport {FormattedMessage} from 'react-intl';\n\nimport {browserHistory} from 'utils/browser_history';\nimport * as UserAgent from 'utils/user_agent.jsx';\n\nexport default class DeletePostModal extends React.PureComponent {\n    static propTypes = {\n\n        channelName: PropTypes.string,\n        focusedPostId: PropTypes.string,\n        teamName: PropTypes.string,\n        post: PropTypes.object.isRequired,\n        commentCount: PropTypes.number.isRequired,\n        isRHS: PropTypes.bool.isRequired,\n        onHide: PropTypes.func.isRequired,\n        actions: PropTypes.shape({\n            deleteAndRemovePost: PropTypes.func.isRequired,\n        }),\n    }\n\n    constructor(props) {\n        super(props);\n        this.state = {\n            show: true,\n        };\n    }\n\n    handleDelete = async () => {\n        const {\n            actions,\n            channelName,\n            focusedPostId,\n            post,\n            teamName,\n        } = this.props;\n\n        const result = await actions.deleteAndRemovePost(post);\n\n        if (post.id === focusedPostId && channelName) {\n            browserHistory.push('/' + teamName + '/channels/' + channelName);\n        }\n\n        if (result.data) {\n            this.onHide();\n        }\n    }\n\n    handleEntered = () => {\n        if (this.deletePostBtn) {\n            this.deletePostBtn.focus();\n        }\n    }\n\n    onHide = () => {\n        this.setState({show: false});\n\n        if (!UserAgent.isMobile()) {\n            var element;\n            if (this.props.isRHS) {\n                element = document.getElementById('reply_textbox');\n            } else {\n                element = document.getElementById('post_textbox');\n            }\n            if (element) {\n                element.focus();\n            }\n        }\n    }\n\n    render() {\n        var commentWarning = '';\n        if (this.props.commentCount > 0 && this.props.post.root_id === '') {\n            commentWarning = (\n                <FormattedMessage\n                    id='delete_post.warning'\n                    defaultMessage='This post has {count, number} {count, plural, one {comment} other {comments}} on it.'\n                    values={{\n                        count: this.props.commentCount,\n                    }}\n                />\n            );\n        }\n\n        const postTerm = this.props.post.root_id ? (\n            <FormattedMessage\n                id='delete_post.comment'\n                defaultMessage='Comment'\n            />\n        ) : (\n            <FormattedMessage\n                id='delete_post.post'\n                defaultMessage='Post'\n            />\n        );\n\n        return (\n            <Modal\n                dialogClassName='a11y__modal'\n                show={this.state.show}\n                onEntered={this.handleEntered}\n                onHide={this.onHide}\n                onExited={this.props.onHide}\n                enforceFocus={false}\n                id='deletePostModal'\n                role='dialog'\n                aria-labelledby='deletePostModalLabel'\n            >\n                <Modal.Header closeButton={true}>\n                    <Modal.Title\n                        componentClass='h1'\n                        id='deletePostModalLabel'\n                    >\n                        <FormattedMessage\n                            id='delete_post.confirm'\n                            defaultMessage='Confirm {term} Delete'\n                            values={{\n                                term: (postTerm),\n                            }}\n                        />\n                    </Modal.Title>\n                </Modal.Header>\n                <Modal.Body>\n                    <FormattedMessage\n                        id='delete_post.question'\n                        defaultMessage='Are you sure you want to delete this {term}?'\n                        values={{\n                            term: (postTerm),\n                        }}\n                    />\n                    <br/>\n                    <br/>\n                    {commentWarning}\n                </Modal.Body>\n                <Modal.Footer>\n                    <button\n                        type='button'\n                        className='btn btn-link'\n                        onClick={this.onHide}\n                    >\n                        <FormattedMessage\n                            id='delete_post.cancel'\n                            defaultMessage='Cancel'\n                        />\n                    </button>\n                    <button\n                        ref={(deletePostBtn) => {\n                            this.deletePostBtn = deletePostBtn;\n                        }}\n                        type='button'\n                        autoFocus={true}\n                        className='btn btn-danger'\n                        onClick={this.handleDelete}\n                        id='deletePostModalButton'\n                    >\n                        <FormattedMessage\n                            id='delete_post.del'\n                            defaultMessage='Delete'\n                        />\n                    </button>\n                </Modal.Footer>\n            </Modal>\n        );\n    }\n}\n","// Copyright (c) 2015-present Mattermost, Inc. All Rights Reserved.\n// See LICENSE.txt for license information.\n\nimport {bindActionCreators} from 'redux';\nimport {connect} from 'react-redux';\nimport {getChannel} from 'mattermost-redux/selectors/entities/channels';\nimport {getCurrentTeam} from 'mattermost-redux/selectors/entities/teams';\n\nimport {deleteAndRemovePost} from 'actions/post_actions.jsx';\n\nimport DeletePostModal from './delete_post_modal.jsx';\n\nfunction mapStateToProps(state, ownProps) {\n    const channel = getChannel(state, ownProps.post.channel_id);\n    let channelName = '';\n    if (channel) {\n        channelName = channel.name;\n    }\n\n    const {focusedPostId} = state.views.channel;\n\n    return {\n        channelName,\n        focusedPostId,\n        teamName: getCurrentTeam(state).name,\n    };\n}\n\nfunction mapDispatchToProps(dispatch) {\n    return {\n        actions: bindActionCreators({\n            deleteAndRemovePost,\n        }, dispatch),\n    };\n}\n\nexport default connect(mapStateToProps, mapDispatchToProps)(DeletePostModal);\n","// Copyright (c) 2015-present Mattermost, Inc. All Rights Reserved.\n// See LICENSE.txt for license information.\n\nexport default {\n    ItemTapAction: {\n        OPEN_EMBED_PAGE: 1,\n        SHARE: 2,\n    },\n\n    Tab: {\n        TRENDING: 0,\n        REACTIONS: 1,\n    },\n\n    appName: {\n        mattermost: 'mattermost',\n    },\n};\n","// Copyright (c) 2015-present Mattermost, Inc. All Rights Reserved.\n// See LICENSE.txt for license information.\n\nimport React from 'react';\n\nexport default class GifSearchIcon extends React.PureComponent {\n    render() {\n        return (\n            <span {...this.props}>\n                <svg\n                    width='100%'\n                    height='100%'\n                    viewBox='-10 -10 40 40'\n                    version='1.1'\n                >\n                    <g\n                        id='ic_search'\n                        transform='matrix(0.959095,-9.6091e-18,-1.00189e-17,0.959095,-0.0633002,-0.777826)'\n                    >\n                        <path\n                            d='M2.648,15.872C3.433,16.658 4.376,17.287 5.454,17.758C6.553,18.229 7.698,18.454 8.888,18.454C10.728,18.454 12.389,17.938 13.893,16.905L18.18,21.192C18.494,21.506 18.854,21.664 19.302,21.664C19.751,21.664 20.111,21.506 20.447,21.192C20.761,20.855 20.919,20.496 20.919,20.047C20.919,19.621 20.761,19.239 20.447,18.925L16.16,14.638C17.193,13.134 17.709,11.473 17.709,9.633C17.709,8.443 17.484,7.298 17.013,6.198C16.542,5.121 15.913,4.178 15.128,3.393C14.342,2.607 13.399,1.979 12.322,1.507C11.222,1.036 10.077,0.811 8.888,0.811C7.698,0.811 6.553,1.036 5.454,1.507C4.376,1.979 3.433,2.607 2.648,3.393C1.862,4.178 1.234,5.121 0.762,6.198C0.291,7.298 0.066,8.443 0.066,9.633C0.066,10.822 0.291,11.967 0.762,13.067C1.234,14.144 1.862,15.087 2.648,15.872ZM8.888,4.021C10.436,4.021 11.761,4.56 12.861,5.66C13.96,6.76 14.499,8.084 14.499,9.633C14.499,11.181 13.96,12.506 12.861,13.606C11.761,14.705 10.436,15.244 8.888,15.244C7.339,15.244 6.015,14.705 4.915,13.606C3.815,12.506 3.276,11.181 3.276,9.633C3.276,8.084 3.815,6.76 4.915,5.66C6.015,4.56 7.339,4.021 8.888,4.021Z'\n                            style={{fill: 'inherit'}}\n                        />\n                    </g>\n                </svg>\n            </span>\n        );\n    }\n}\n","// Copyright (c) 2015-present Mattermost, Inc. All Rights Reserved.\n// See LICENSE.txt for license information.\n\nimport React from 'react';\n\nexport default class GifSearchClearIcon extends React.PureComponent {\n    render() {\n        return (\n            <span {...this.props}>\n                <svg\n                    width='100%'\n                    height='100%'\n                    viewBox='-10 -10 40 40'\n                    enableBackground='new 0 0 20 20'\n                    version='1.1'\n                >\n                    <g transform='matrix(0.952381,0,0,1,0,0)'>\n                        <path\n                            fill='inherit'\n                            d='M10.5 11.7L2.2 19.8C2 19.9 1.9 20 1.7 20 1.6 20 1.4 19.9 1.3 19.8L0.2 18.8C0.1 18.7 0 18.5 0 18.3 0 18.2 0.1 18 0.2 17.9L8.3 10 0.2 2.1C0.1 2 0 1.8 0 1.7 0 1.5 0.1 1.3 0.2 1.2L1.3 0.2C1.4 0.1 1.6 0 1.7 0 1.9 0 2 0.1 2.2 0.2L10.5 8.3 18.8 0.2C19 0.1 19.1 0 19.3 0 19.4 0 19.6 0.1 19.7 0.2L20.8 1.2C20.9 1.3 21 1.5 21 1.7 21 1.8 20.9 2 20.8 2.1L12.7 10 20.8 17.9C20.9 18 21 18.2 21 18.3 21 18.5 20.9 18.7 20.8 18.8L19.7 19.8C19.6 19.9 19.4 20 19.3 20 19.1 20 19 19.9 18.8 19.8L10.5 11.7Z'\n                        />\n                    </g>\n                </svg>\n            </span>\n        );\n    }\n}\n","// Copyright (c) 2015-present Mattermost, Inc. All Rights Reserved.\n// See LICENSE.txt for license information.\n\nimport React, {Component} from 'react';\nimport PropTypes from 'prop-types';\nimport {connect} from 'react-redux';\n\nimport {saveSearchScrollPosition, saveSearchBarText, searchTextUpdate} from 'mattermost-redux/actions/gifs';\nimport {getTheme} from 'mattermost-redux/selectors/entities/preferences';\nimport {changeOpacity, makeStyleFromTheme} from 'mattermost-redux/utils/theme_utils';\n\nimport GifSearchIcon from 'components/svg/gif_search_icon';\nimport GifSearchClearIcon from 'components/svg/gif_search_clear_icon';\nimport LocalizedInput from 'components/localized_input/localized_input';\nimport {t} from 'utils/i18n.jsx';\n\nimport './SearchBar.scss';\n\nfunction mapStateToProps(state) {\n    return {\n        ...state.entities.gifs.categories,\n        ...state.entities.gifs.search,\n        theme: getTheme(state),\n        appProps: state.entities.gifs.app,\n    };\n}\n\nconst mapDispatchToProps = ({\n    saveSearchBarText,\n    saveSearchScrollPosition,\n    searchTextUpdate,\n});\n\nconst getStyle = makeStyleFromTheme((theme) => {\n    return {\n        background: {\n            backgroundColor: theme.centerChannelBg,\n        },\n        icon: {\n            fill: changeOpacity(theme.centerChannelColor, 0.4),\n        },\n        inputBackground: {\n            backgroundColor: theme.centerChannelBg,\n        },\n        input: {\n            borderColor: changeOpacity(theme.centerChannelColor, 0.12),\n        },\n    };\n});\n\nexport class SearchBar extends Component {\n    static propTypes = {\n        searchBarText: PropTypes.string,\n        tagsList: PropTypes.array,\n        theme: PropTypes.object.isRequired,\n        onTrending: PropTypes.func,\n        onSearch: PropTypes.func,\n        onCategories: PropTypes.func,\n        action: PropTypes.string,\n        saveSearchScrollPosition: PropTypes.func,\n        saveSearchBarText: PropTypes.func,\n        searchTextUpdate: PropTypes.func,\n    }\n\n    constructor(props) {\n        super(props);\n\n        this.state = {\n            inputFocused: false,\n        };\n\n        this.searchTimeout = null;\n        this.props.saveSearchBarText('');\n        this.props.searchTextUpdate('');\n    }\n\n    componentDidUpdate(prevProps) {\n        const {searchBarText} = this.props;\n\n        if (searchBarText !== prevProps.searchBarText) {\n            if (searchBarText === 'trending') {\n                this.updateSearchInputValue('');\n            } else {\n                this.updateSearchInputValue(searchBarText);\n            }\n        }\n    }\n\n    /**\n     * Returns text request with hyphens\n     */\n    parseSearchText = (searchText) => {\n        return searchText.trim().split(/ +/).join('-');\n    }\n\n    removeExtraSpaces = (searchText) => {\n        return searchText.trim().split(/ +/).join(' ');\n    }\n\n    updateSearchInputValue = (searchText) => {\n        this.searchInput.value = searchText;\n        this.props.saveSearchBarText(searchText);\n    }\n\n    handleSubmit = (event) => {\n        event.preventDefault();\n        this.triggerSearch(this.searchInput.value);\n        this.searchInput.blur();\n    }\n\n    triggerSearch = (searchText) => {\n        const {onSearch} = this.props;\n        this.props.searchTextUpdate(this.parseSearchText(searchText));\n        onSearch();\n        this.props.saveSearchScrollPosition(0);\n    }\n\n    handleChange = (event) => {\n        clearTimeout(this.searchTimeout);\n\n        const searchText = event.target.value;\n\n        const {onCategories, action} = this.props;\n        this.props.saveSearchBarText(searchText);\n\n        if (searchText === '') {\n            onCategories();\n        } else if (action !== 'reactions' || !this.isFilteredTags(searchText)) {\n            // not reactions page or there's no reactions for this search request\n            this.searchTimeout = setTimeout(() => {\n                this.triggerSearch(searchText);\n            }, 500);\n        }\n    }\n\n    focusInput = () => {\n        this.setState({inputFocused: true});\n    }\n\n    blurInput = () => {\n        this.setState({inputFocused: false});\n    }\n\n    /**\n     * Checks if there're reactions for a current searchText\n     */\n    isFilteredTags = (searchText) => {\n        var text = this.removeExtraSpaces(searchText);\n\n        const {tagsList} = this.props;\n        const substr = text.toLowerCase();\n        const filteredTags = tagsList && tagsList.length ? tagsList.filter((tag) => {\n            if (!text || tag.tagName.indexOf(substr) !== -1) {\n                return tag;\n            }\n            return '';\n        }) : [];\n\n        return Boolean(filteredTags.length);\n    }\n\n    clearSearchHandle = () => {\n        const {action, onTrending, onCategories} = this.props;\n        this.updateSearchInputValue('');\n        if (action === 'reactions') {\n            onCategories();\n        } else {\n            onTrending();\n        }\n    }\n\n    shouldComponentUpdate(nextProps, nextState) {\n        return ((!nextProps.searchBarText && this.props.searchBarText) ||\n            (nextProps.searchBarText && !this.props.searchBarText) ||\n            (nextState.inputFocused !== this.state.inputFocused));\n    }\n\n    render() {\n        const style = getStyle(this.props.theme);\n        const {searchBarText} = this.props;\n        const clearSearchButton = searchBarText ?\n            (\n                <GifSearchClearIcon\n                    className='ic-clear-search'\n                    style={style.icon}\n                    onClick={this.clearSearchHandle}\n                />\n            ) : null;\n\n        return (\n            <form\n                className='gfycat-search'\n                method='get'\n                target='_top'\n                noValidate=''\n                onSubmit={this.handleSubmit}\n            >\n                <div\n                    className='search-bar'\n                    style={style.background}\n                >\n                    <div\n                        className='search-input-bg'\n                        style={style.inputBackground}\n                    />\n                    <LocalizedInput\n                        className='search-input'\n                        name='searchText'\n                        autoFocus={true}\n                        placeholder={{id: t('gif_picker.gfycat'), defaultMessage: 'Search Gfycat'}}\n                        onChange={this.handleChange}\n                        autoComplete='off'\n                        autoCapitalize='off'\n                        onFocus={this.focusInput}\n                        onBlur={this.blurInput}\n                        ref={(input) => {\n                            this.searchInput = input;\n                            return input;\n                        }}\n                        style={style.input}\n                    />\n                    <GifSearchIcon\n                        className='ic ic-search'\n                        style={style.icon}\n                    />\n                    {clearSearchButton}\n                </div>\n                <button\n                    type='submit'\n                    className='submit-button'\n                />\n            </form>\n        );\n    }\n}\n\nexport default connect(mapStateToProps, mapDispatchToProps)(SearchBar);\n\n","// Copyright (c) 2015-present Mattermost, Inc. All Rights Reserved.\n// See LICENSE.txt for license information.\n\nimport React from 'react';\n\nexport default class GifTrendingIcon extends React.PureComponent {\n    render() {\n        return (\n            <span {...this.props}>\n                <svg\n                    className='ic-svg ic-trending-svg'\n                    width='11px'\n                    height='15px'\n                    viewBox='0 0 11 15'\n                    version='1.1'\n                >\n                    <g\n                        id='Finalized-Design'\n                        stroke='none'\n                        fill='inherit'\n                    >\n                        <g\n                            id='GfyCat---Gycat-Tab'\n                            transform='translate(-1212.000000, -619.000000)'\n                            fill='inherit'\n                        >\n                            <g\n                                id='modal---emojis'\n                                transform='translate(1147.000000, 542.000000)'\n                            >\n                                <g\n                                    id='tabs---gfycat'\n                                    transform='translate(1.000000, 68.000000)'\n                                >\n                                    <g id='tab---trending---selected'>\n                                        <path\n                                            d='M69.90625,10.4062776 C69.90625,10.9531513 70.0976562,11.4909106 70.4804688,12.019555 C70.6992188,12.32945 71.1276043,12.7760638 71.765625,13.3593956 C72.3489582,13.9062693 72.7773438,14.3346538 73.0507812,14.6445488 C73.5065106,15.1731932 73.8528644,15.7109525 74.0898438,16.2578262 C74.3632812,16.9505327 74.5,17.6979271 74.5,18.5000083 C74.5,19.4479229 74.2630207,20.3229208 73.7890625,21.1250021 C73.3151043,21.9270834 72.6770832,22.565103 71.875,23.03906 C71.0729168,23.5130171 70.1979168,23.7499958 69.25,23.7499958 C68.3020832,23.7499958 67.4270832,23.5130171 66.625,23.03906 C65.8229168,22.565103 65.1848957,21.9270834 64.7109375,21.1250021 C64.2369793,20.3229208 64,19.4479229 64,18.5000083 C64,17.6432397 64.2005207,16.8320436 64.6015625,16.0664204 C65.0026043,15.3007972 65.5494793,14.6718925 66.2421875,14.1797061 C66.4609375,14.0338733 66.6888019,14.0247585 66.9257812,14.1523625 C67.1627606,14.2799665 67.28125,14.4713723 67.28125,14.7265798 L67.28125,17.6250104 C67.28125,17.9349054 67.3860676,18.1946704 67.5957031,18.4043054 C67.8053387,18.6139405 68.0651043,18.7187578 68.375,18.7187578 C68.6848957,18.7187578 68.9446613,18.6139405 69.1542969,18.4043054 C69.3639324,18.1946704 69.46875,17.9349054 69.46875,17.6250104 C69.46875,17.4427191 69.4049481,17.2330844 69.2773438,16.9961057 C69.2044269,16.8320436 69.0677082,16.576836 68.8671875,16.2304825 C68.4661457,15.5742341 68.1835938,15.0547041 68.0195312,14.6718925 C67.7643231,13.9791859 67.6640625,13.2955938 67.71875,12.6211161 C67.8098957,11.7825763 68.1380207,10.9258077 68.703125,10.0508097 C68.8125,9.86851837 68.9628906,9.76825847 69.1542969,9.75002921 C69.3457031,9.73179994 69.5188801,9.78648731 69.6738281,9.91409132 C69.8287762,10.0416953 69.90625,10.2057574 69.90625,10.4062776 Z M69.2499875,22.437499 C69.9609233,22.437499 70.6171717,22.259765 71.2187328,21.9042971 C71.8202939,21.5488292 72.2988083,21.0703147 72.6542762,20.4687537 C73.0097441,19.8671926 73.1874781,19.2109441 73.1874781,18.5000083 C73.1874781,17.880218 73.0781034,17.3060006 72.8593539,16.7773562 C72.6588337,16.3398572 72.376282,15.9023583 72.0116996,15.4648593 C71.7929502,15.1914225 71.4329248,14.8131683 70.9316241,14.3300964 C70.4303233,13.8470245 70.070298,13.4687703 69.8515485,13.1953335 C69.4869662,12.7760638 69.2135294,12.3567937 69.031238,11.937524 C68.8671759,12.5573143 68.8945196,13.1953335 69.1132691,13.8515819 C69.2408731,14.2343935 69.5143099,14.7812672 69.9335796,15.492203 C70.2252457,15.9661601 70.4166515,16.321628 70.507797,16.5586067 C70.6900884,16.9414183 70.7812338,17.2968862 70.7812338,17.6250104 C70.7812338,18.2812589 70.5442551,18.8463618 70.070298,19.3203189 C69.596341,19.794276 69.031238,20.0312547 68.3749896,20.0312547 C67.7187411,20.0312547 67.1536382,19.794276 66.6796811,19.3203189 C66.205724,18.8463618 65.9687453,18.2812589 65.9687453,17.6250104 L65.9687453,16.0937641 C65.7682251,16.403659 65.60872,16.7819136 65.4902308,17.228527 C65.3717417,17.6751404 65.3124969,18.0989675 65.3124969,18.5000083 C65.3124969,19.2109441 65.4902308,19.8671926 65.8456987,20.4687537 C66.2011666,21.0703147 66.6796811,21.5488292 67.2812422,21.9042971 C67.8828032,22.259765 68.5390517,22.437499 69.2499875,22.437499 Z'\n                                            id='icon---trending'\n                                        />\n                                    </g>\n                                </g>\n                            </g>\n                        </g>\n                    </g>\n                </svg>\n            </span>\n        );\n    }\n}\n","// Copyright (c) 2015-present Mattermost, Inc. All Rights Reserved.\n// See LICENSE.txt for license information.\n\nimport React from 'react';\n\nexport default class GifReactionsIcon extends React.PureComponent {\n    render() {\n        return (\n            <span {...this.props}>\n                <svg\n                    className='ic-svg ic-reactions-svg'\n                    width='14px'\n                    height='14px'\n                    viewBox='0 0 14 14'\n                    version='1.1'\n                >\n                    <g\n                        id='Finalized-Design'\n                        stroke='none'\n                        fill='inherit'\n                    >\n                        <g\n                            id='GfyCat---Gycat-Tab'\n                            transform='translate(-1348.000000, -620.000000)'\n                            fill='inherit'\n                        >\n                            <g\n                                id='modal---emojis'\n                                transform='translate(1147.000000, 542.000000)'\n                            >\n                                <g\n                                    id='tabs---gfycat'\n                                    transform='translate(1.000000, 68.000000)'\n                                >\n                                    <g\n                                        id='tab---category---deselected'\n                                        transform='translate(138.000000, 0.000000)'\n                                    >\n                                        <path\n                                            d='M62,16 L62,10 L68,10 L68,16 L62,16 Z M64,12 L64,14 L66,14 L66,12 L64,12 Z M70,24 L70,18 L76,18 L76,24 L70,24 Z M72,20 L72,22 L74,22 L74,20 L72,20 Z M70,10 L76,10 L76,16 L70,16 L70,10 Z M74,14 L74,12 L72,12 L72,14 L74,14 Z M62,24 L62,18 L68,18 L68,24 L62,24 Z M64,20 L64,22 L66,22 L66,20 L64,20 Z'\n                                            id='icon---categories'\n                                        />\n                                    </g>\n                                </g>\n                            </g>\n                        </g>\n                    </g>\n                </svg>\n            </span>\n        );\n    }\n}\n","// Copyright (c) 2015-present Mattermost, Inc. All Rights Reserved.\n// See LICENSE.txt for license information.\n\nimport React, {PureComponent} from 'react';\nimport PropTypes from 'prop-types';\nimport {connect} from 'react-redux';\n\nimport {saveSearchBarText, searchTextUpdate} from 'mattermost-redux/actions/gifs';\nimport {getTheme} from 'mattermost-redux/selectors/entities/preferences';\nimport {changeOpacity, makeStyleFromTheme} from 'mattermost-redux/utils/theme_utils';\n\nimport constants from 'components/gif_picker/utils/constants';\nimport SearchBar from 'components/gif_picker/components/SearchBar';\nimport GifTrendingIcon from 'components/svg/gif_trending_icon';\nimport GifReactionsIcon from 'components/svg/gif_reactions_icon';\nimport './Header.scss';\n\nfunction mapStateToProps(state) {\n    return {\n        theme: getTheme(state),\n    };\n}\n\nconst mapDispatchToProps = ({\n    saveSearchBarText,\n    searchTextUpdate,\n});\n\nconst getStyle = makeStyleFromTheme((theme) => {\n    return {\n        background: {\n            backgroundColor: theme.centerChannelBg,\n        },\n        header: {\n            borderBottomColor: changeOpacity(theme.centerChannelColor, 0.2),\n        },\n        icon: {\n            fill: changeOpacity(theme.centerChannelColor, 0.3),\n        },\n        iconActive: {\n            fill: theme.centerChannelColor,\n        },\n        iconHover: {\n            fill: changeOpacity(theme.centerChannelColor, 0.8),\n        },\n    };\n});\n\nexport class Header extends PureComponent {\n    static propTypes = {\n        action: PropTypes.string,\n        appProps: PropTypes.object,\n        saveSearchBarText: PropTypes.func,\n        searchTextUpdate: PropTypes.func,\n        theme: PropTypes.object.isRequired,\n    }\n\n    constructor(props) {\n        super(props);\n        this.state = {\n            hovering: '',\n        };\n    }\n\n    render() {\n        const style = getStyle(this.props.theme);\n\n        return (\n            <header\n                className='header-container'\n                style={style.background}\n            >\n                <SearchBar {...this.props}/>\n                <nav\n                    className='nav-bar'\n                    style={style.header}\n                >\n                    {this.renderTabs(this.props, style)}\n                </nav>\n            </header>\n        );\n    }\n\n    renderTabs(props, style) {\n        const {appProps, onTrending, onCategories} = props;\n        const {header} = appProps;\n        return header.tabs.map((tab, index) => {\n            let link;\n            if (tab === constants.Tab.TRENDING) {\n                link = this.renderTab('trending', onTrending, GifTrendingIcon, index, style);\n            } else if (tab === constants.Tab.REACTIONS) {\n                link = this.renderTab('reactions', onCategories, GifReactionsIcon, index, style);\n            }\n            return link;\n        });\n    }\n\n    renderTab(name, callback, Icon, index, style) {\n        var props = this.props;\n        const {action} = props;\n        function callbackWrapper() {\n            props.searchTextUpdate('');\n            props.saveSearchBarText('');\n            callback();\n        }\n        return (\n            <a\n                onClick={callbackWrapper}\n                onMouseOver={() => {\n                    this.setState({hovering: name});\n                }}\n                onMouseOut={() => {\n                    this.setState({hovering: ''});\n                }}\n                style={{cursor: 'pointer'}}\n                key={index}\n            >\n                <div style={{paddingTop: '2px'}}>\n                    <Icon\n                        style={(() => {\n                            if (this.state.hovering === name) {\n                                return style.iconHover;\n                            }\n                            return action === name ? style.iconActive : style.icon;\n                        })()}\n                    />\n                </div>\n            </a>\n        );\n    }\n}\n\nexport default connect(mapStateToProps, mapDispatchToProps)(Header);\n","// Copyright (c) 2015-present Mattermost, Inc. All Rights Reserved.\n// See LICENSE.txt for license information.\n\nimport React, {PureComponent} from 'react';\nimport PropTypes from 'prop-types';\nimport {connect} from 'react-redux';\n\nimport {saveAppProps} from 'mattermost-redux/actions/gifs';\n\nimport Header from 'components/gif_picker/components/Header';\n\nconst mapDispatchToProps = ({\n    saveAppProps,\n});\n\nexport class App extends PureComponent {\n    static propTypes = {\n        appProps: PropTypes.object,\n        action: PropTypes.string,\n        onCategories: PropTypes.func,\n        onSearch: PropTypes.func,\n        onTrending: PropTypes.func,\n        children: PropTypes.object,\n        saveAppProps: PropTypes.func,\n        authenticateSdk: PropTypes.func,\n    }\n\n    constructor(props) {\n        super(props);\n        const {appProps} = this.props;\n        this.props.saveAppProps(appProps);\n    }\n\n    render() {\n        const {\n            appProps,\n            action,\n            onCategories,\n            onSearch,\n            onTrending,\n            children,\n        } = this.props;\n        const appClassName = 'main-container ' + (appProps.appClassName || '');\n        return (\n            <div className={appClassName}>\n                <Header\n                    appProps={appProps}\n                    action={action}\n                    onCategories={onCategories}\n                    onSearch={onSearch}\n                    onTrending={onTrending}\n                />\n                <div className='component-container'>\n                    {children}\n                </div>\n            </div>\n        );\n    }\n}\n\nexport default connect(null, mapDispatchToProps)(App);\n","// Copyright (c) 2015-present Mattermost, Inc. All Rights Reserved.\n// See LICENSE.txt for license information.\n\nimport React, {PureComponent} from 'react';\nimport PropTypes from 'prop-types';\n\nexport default class InfiniteScroll extends PureComponent {\n    static propTypes = {\n        children: PropTypes.array,\n        element: PropTypes.string,\n        hasMore: PropTypes.bool,\n        initialLoad: PropTypes.bool,\n        loader: PropTypes.object,\n        loadMore: PropTypes.func.isRequired,\n        pageStart: PropTypes.number,\n        threshold: PropTypes.number,\n        useWindow: PropTypes.bool,\n        isReverse: PropTypes.bool,\n        containerHeight: PropTypes.number,\n        scrollPosition: PropTypes.number,\n    }\n\n    static defaultProps = {\n        element: 'div',\n        hasMore: false,\n        initialLoad: true,\n        pageStart: 0,\n        threshold: 250,\n        useWindow: true,\n        isReverse: false,\n        containerHeight: null,\n        scrollPosition: null,\n    }\n\n    constructor(props) {\n        super(props);\n\n        this.scrollListener = this.scrollListener.bind(this);\n    }\n\n    componentDidMount() {\n        this.pageLoaded = this.props.pageStart;\n        this.attachScrollListener();\n        this.setScrollPosition();\n    }\n\n    componentDidUpdate() {\n        this.attachScrollListener();\n    }\n\n    render() {\n        const {\n            children,\n            element,\n            hasMore,\n            initialLoad, // eslint-disable-line no-unused-vars\n            loader,\n            loadMore, // eslint-disable-line no-unused-vars\n            pageStart, // eslint-disable-line no-unused-vars\n            threshold, // eslint-disable-line no-unused-vars\n            useWindow, // eslint-disable-line no-unused-vars\n            isReverse, // eslint-disable-line no-unused-vars\n            scrollPosition, // eslint-disable-line no-unused-vars\n            containerHeight,\n            ...props\n        } = this.props;\n\n        props.ref = (node) => {\n            this.scrollComponent = node;\n        };\n\n        const elementProps = containerHeight ? {...props, style: {height: containerHeight}} : props;\n\n        return React.createElement(element, elementProps, children, hasMore && (loader || this.defaultLoader));\n    }\n\n    calculateTopPosition(el) {\n        if (!el) {\n            return 0;\n        }\n        return el.offsetTop + this.calculateTopPosition(el.offsetParent);\n    }\n\n    setScrollPosition() {\n        const {scrollPosition} = this.props;\n        if (scrollPosition !== null) {\n            window.scrollTo(0, scrollPosition);\n        }\n    }\n\n    scrollListener() {\n        const el = this.scrollComponent;\n        const scrollEl = window;\n\n        let offset;\n        if (this.props.useWindow) {\n            var scrollTop = ('pageYOffset' in scrollEl) ? scrollEl.pageYOffset : (document.documentElement || document.body.parentNode || document.body).scrollTop;\n            if (this.props.isReverse) {\n                offset = scrollTop;\n            } else {\n                offset = this.calculateTopPosition(el) + (el.offsetHeight - scrollTop - window.innerHeight);\n            }\n        } else if (this.props.isReverse) {\n            offset = el.parentNode.scrollTop;\n        } else {\n            offset = el.scrollHeight - el.parentNode.scrollTop - el.parentNode.clientHeight;\n        }\n\n        if (offset < Number(this.props.threshold)) {\n            this.detachScrollListener();\n\n            // Call loadMore after detachScrollListener to allow for non-async loadMore functions\n            if (typeof this.props.loadMore === 'function') {\n                this.props.loadMore(this.pageLoaded += 1);\n            }\n        }\n    }\n\n    attachScrollListener() {\n        if (!this.props.hasMore) {\n            return;\n        }\n\n        let scrollEl = window;\n        if (this.props.useWindow === false) {\n            scrollEl = this.scrollComponent.parentNode;\n        }\n\n        scrollEl.addEventListener('scroll', this.scrollListener);\n        scrollEl.addEventListener('resize', this.scrollListener);\n\n        if (this.props.initialLoad) {\n            this.scrollListener();\n        }\n    }\n\n    detachScrollListener() {\n        var scrollEl = window;\n        if (this.props.useWindow === false) {\n            scrollEl = this.scrollComponent.parentNode;\n        }\n\n        scrollEl.removeEventListener('scroll', this.scrollListener);\n        scrollEl.removeEventListener('resize', this.scrollListener);\n    }\n\n    componentWillUnmount() {\n        this.detachScrollListener();\n    }\n\n    // Set a defaut loader for all your `InfiniteScroll` components\n    setDefaultLoader(loader) {\n        this.defaultLoader = loader;\n    }\n}\n","// Copyright (c) 2015-present Mattermost, Inc. All Rights Reserved.\n// See LICENSE.txt for license information.\n\nimport React, {PureComponent} from 'react';\nimport PropTypes from 'prop-types';\nimport {connect} from 'react-redux';\n\nimport {requestCategoriesList, requestCategoriesListIfNeeded, saveSearchBarText, saveSearchScrollPosition, searchTextUpdate} from 'mattermost-redux/actions/gifs';\nimport {getTheme} from 'mattermost-redux/selectors/entities/preferences';\nimport {changeOpacity, makeStyleFromTheme} from 'mattermost-redux/utils/theme_utils';\n\nimport {trackEvent} from 'actions/diagnostics_actions.jsx';\nimport * as PostUtils from 'utils/post_utils.jsx';\n\nimport InfiniteScroll from 'components/gif_picker/components/InfiniteScroll';\n\nimport './Categories.scss';\n\nfunction mapStateToProps(state) {\n    return {\n        ...state.entities.gifs.categories,\n        ...state.entities.gifs.cache,\n        theme: getTheme(state),\n        appProps: state.entities.gifs.app,\n        searchText: state.entities.gifs.search.searchText,\n        searchBarText: state.entities.gifs.search.searchBarText,\n        hasImageProxy: state.entities.general.config.HasImageProxy,\n    };\n}\n\nconst mapDispatchToProps = ({\n    saveSearchBarText,\n    saveSearchScrollPosition,\n    searchTextUpdate,\n    requestCategoriesList,\n    requestCategoriesListIfNeeded,\n});\n\nconst getStyle = makeStyleFromTheme((theme) => {\n    return {\n        background: {\n            backgroundColor: changeOpacity(theme.centerChannelColor, 0.05),\n        },\n    };\n});\n\nexport class Categories extends PureComponent {\n    static propTypes = {\n        appProps: PropTypes.object,\n        gifs: PropTypes.object,\n        hasMore: PropTypes.bool,\n        onSearch: PropTypes.func,\n        onTrending: PropTypes.func,\n        requestCategoriesList: PropTypes.func,\n        requestCategoriesListIfNeeded: PropTypes.func,\n        saveSearchBarText: PropTypes.func,\n        saveSearchScrollPosition: PropTypes.func,\n        searchTextUpdate: PropTypes.func,\n        searchBarText: PropTypes.string,\n        tagsList: PropTypes.array,\n        hasImageProxy: PropTypes.string,\n        theme: PropTypes.object.isRequired,\n    }\n\n    componentDidMount() {\n        window.scrollTo(0, 0);\n        this.props.requestCategoriesListIfNeeded();\n        this.sendImpressions();\n    }\n\n    sendImpressions = () => {\n        const {tagsList} = this.props;\n        const gfycats = tagsList.map((tag) => {\n            return {gfyId: tag.gfyId};\n        });\n\n        if (gfycats.length) {\n            trackEvent('gfycat', 'views', {context: 'category_list', count: gfycats.length});\n        }\n    }\n\n    componentWillUnmount() {\n        this.props.saveSearchScrollPosition(0);\n    }\n\n    filterTagsList = () => {\n        const {searchBarText, tagsList} = this.props;\n\n        const substr = searchBarText.toLowerCase().trim().split(/ +/).join(' ');\n        return tagsList && tagsList.length ? tagsList.filter((tag) => {\n            if (!searchBarText || tag.tagName.indexOf(substr) !== -1) {\n                return tag;\n            }\n            return '';\n        }) : [];\n    }\n\n    loadMore = () => {\n        this.props.requestCategoriesList();\n    }\n\n    render() {\n        const style = getStyle(this.props.theme);\n\n        const {hasMore, tagsList, gifs, onSearch, onTrending, hasImageProxy} = this.props;\n\n        const content = tagsList && tagsList.length ? this.filterTagsList(tagsList).map((item, index) => {\n            const {tagName, gfyId} = item;\n\n            if (!gifs[gfyId]) {\n                return null;\n            }\n\n            const gfyItem = gifs[gfyId];\n            const {max1mbGif, avgColor} = gfyItem;\n            const url = PostUtils.getImageSrc(max1mbGif, hasImageProxy === 'true');\n            const searchText = tagName.replace(/\\s/g, '-');\n            const backgroundImage = {backgroundImage: `url(${url}`};\n            const backgroundColor = {backgroundColor: avgColor};\n            const props = this.props;\n            function callback() {\n                props.searchTextUpdate(tagName);\n                props.saveSearchBarText(tagName);\n                if (searchText === 'trending') {\n                    onTrending();\n                } else {\n                    onSearch();\n                }\n            }\n            return (\n                <a\n                    onClick={callback}\n                    key={index}\n                >\n                    <div className='category-container'>\n                        <div\n                            className='category'\n                            style={{...backgroundImage, ...backgroundColor}}\n                        >\n                            <div className='category-name'>{tagName}</div>\n                        </div>\n                    </div>\n                </a>\n            );\n        }) : [];\n\n        return content && content.length ? (\n            <div\n                className='categories-container'\n                style={style.background}\n            >\n                <InfiniteScroll\n                    hasMore={hasMore}\n                    loadMore={this.loadMore}\n                    threshold={1}\n                >\n                    {content}\n                </InfiniteScroll>\n            </div>\n        ) : (\n            <div\n                className='categories-container'\n                style={style.background}\n            />\n        );\n    }\n}\n\nexport default connect(mapStateToProps, mapDispatchToProps)(Categories);\n","// Copyright (c) 2015-present Mattermost, Inc. All Rights Reserved.\n// See LICENSE.txt for license information.\n\nimport React, {PureComponent} from 'react';\nimport {connect} from 'react-redux';\n\nimport PropTypes from 'prop-types';\n\nimport './SearchItem.scss';\nimport * as PostUtils from 'utils/post_utils.jsx';\n\nfunction mapStateToProps(state) {\n    return {\n        hasImageProxy: state.entities.general.config.HasImageProxy,\n    };\n}\n\nexport class SearchItem extends PureComponent {\n    static propTypes = {\n        gfyItem: PropTypes.object,\n        top: PropTypes.string,\n        left: PropTypes.string,\n        itemWidth: PropTypes.number,\n        itemClickHandler: PropTypes.func,\n        hasImageProxy: PropTypes.string,\n    }\n\n    render() {\n        const {\n            gfyItem,\n            top,\n            left,\n            itemWidth,\n            itemClickHandler,\n        } = this.props;\n\n        const {width, height, max1mbGif, avgColor} = gfyItem;\n        const {hasImageProxy} = this.props;\n        const url = PostUtils.getImageSrc(max1mbGif, hasImageProxy === 'true');\n\n        const backgroundImage = {backgroundImage: `url(${url})`};\n        const backgroundColor = {backgroundColor: avgColor};\n        const paddingBottom = {paddingBottom: ((itemWidth / width) * height) + 'px'};\n\n        return (\n            <div\n                className='search-item-wrapper'\n                style={{top, left, width: itemWidth ? `${itemWidth}px` : ''}}\n            >\n                <div\n                    className='search-item'\n                    style={{...backgroundImage, ...backgroundColor, ...paddingBottom}}\n                    onClick={() => itemClickHandler(gfyItem)}\n                />\n            </div>\n        );\n    }\n}\n\nexport default connect(mapStateToProps)(SearchItem);\n","// Copyright (c) 2015-present Mattermost, Inc. All Rights Reserved.\n// See LICENSE.txt for license information.\n\nimport React, {PureComponent} from 'react';\nimport PropTypes from 'prop-types';\nimport {connect} from 'react-redux';\n\nimport {saveSearchScrollPosition} from 'mattermost-redux/actions/gifs';\nimport {getTheme} from 'mattermost-redux/selectors/entities/preferences';\nimport {changeOpacity, makeStyleFromTheme} from 'mattermost-redux/utils/theme_utils';\n\nimport {trackEvent} from 'actions/diagnostics_actions.jsx';\n\nimport InfiniteScroll from 'components/gif_picker/components/InfiniteScroll';\nimport SearchItem from 'components/gif_picker/components/SearchItem';\n\nimport './SearchGrid.scss';\n\nconst ITEMS_PADDING = 8;\nconst NUMBER_OF_COLUMNS_PORTRAIT = 2;\nconst NUMBER_OF_COLUMNS_LANDSCAPE = 2;\nconst WEBKIT_SCROLLBAR_WIDTH = 8;\n\nfunction mapStateToProps(state) {\n    return {\n        ...state.entities.gifs.cache,\n        ...state.entities.gifs.search,\n        theme: getTheme(state),\n        appProps: state.entities.gifs.app,\n    };\n}\n\nconst mapDispatchToProps = ({\n    saveSearchScrollPosition,\n});\n\nconst getStyle = makeStyleFromTheme((theme) => {\n    return {\n        background: {\n            backgroundColor: changeOpacity(theme.centerChannelColor, 0.05),\n        },\n    };\n});\n\nexport class SearchGrid extends PureComponent {\n    static propTypes = {\n        appProps: PropTypes.object,\n        gifs: PropTypes.object,\n        resultsByTerm: PropTypes.object,\n        containerClassName: PropTypes.string,\n        keyword: PropTypes.string, // searchText, tagName\n        handleItemClick: PropTypes.func,\n        onCategories: PropTypes.func,\n        loadMore: PropTypes.func,\n        numberOfColumns: PropTypes.number,\n        scrollPosition: PropTypes.number,\n        saveSearchScrollPosition: PropTypes.func,\n        theme: PropTypes.object.isRequired,\n    }\n\n    constructor(props) {\n        super(props);\n        this.state = {\n            containerWidth: null,\n        };\n        this.scrollPosition = this.props.scrollPosition;\n        this.setNumberOfColumns();\n\n        /**\n         * Inital values for columns heights\n         */\n        this.columnsHeights = Array(this.numberOfColumns).fill(0);\n\n        /**\n         * Items padding value\n         */\n        this.padding = ITEMS_PADDING;\n    }\n\n    componentDidMount() {\n        this.container = document.getElementById('search-grid-container');\n        // eslint-disable-next-line react/no-did-mount-set-state\n        this.setState({\n            ...this.state,\n            containerWidth: this.container.offsetWidth - WEBKIT_SCROLLBAR_WIDTH,\n        });\n        window.addEventListener('resize', this.resizeHandler);\n        window.addEventListener('scroll', this.scrollHandler);\n    }\n\n    componentDidUpdate(prevProps) {\n        if (prevProps.keyword !== this.props.keyword) {\n            window.scrollTo(0, 0);\n        }\n    }\n\n    componentWillUnmount() {\n        const {keyword} = this.props;\n        if (keyword !== 'trending') {\n            this.props.saveSearchScrollPosition(this.scrollPosition);\n        }\n\n        window.removeEventListener('resize', this.resizeHandler);\n        window.removeEventListener('scroll', this.scrollHandler);\n    }\n\n    setNumberOfColumns = () => {\n        if (window.matchMedia('(orientation: portrait)').matches) {\n            this.numberOfColumns = NUMBER_OF_COLUMNS_PORTRAIT;\n        } else {\n            this.numberOfColumns = NUMBER_OF_COLUMNS_LANDSCAPE;\n        }\n    }\n\n    itemClickHandler = (gfyItem) => {\n        const {keyword, handleItemClick} = this.props;\n        this.props.saveSearchScrollPosition(this.scrollPosition);\n\n        trackEvent('gfycat', 'shares', {gfyid: gfyItem.gfyId, keyword});\n        handleItemClick(gfyItem);\n    }\n\n    minHeightColumnIndex = () => {\n        return this.columnsHeights.indexOf(Math.min(...this.columnsHeights));\n    }\n\n    maxHeightColumnIndex = () => {\n        return this.columnsHeights.indexOf(Math.max(...this.columnsHeights));\n    }\n\n    maxColumnHeight = () => {\n        return Math.max(...this.columnsHeights);\n    }\n\n    resizeHandler = () => {\n        if (this.state.containerWidth !== this.container.offsetWidth - WEBKIT_SCROLLBAR_WIDTH) {\n            this.setNumberOfColumns();\n            this.setState({\n                ...this.state,\n                containerWidth: this.container.offsetWidth - WEBKIT_SCROLLBAR_WIDTH,\n            });\n            this.columnsHeights = Array(this.numberOfColumns).fill(0);\n        }\n    }\n\n    scrollHandler = () => {\n        this.scrollPosition = window.scrollY;\n    }\n\n    render() {\n        const style = getStyle(this.props.theme);\n        const {\n            containerClassName,\n            gifs,\n            keyword,\n            resultsByTerm,\n            scrollPosition,\n            loadMore,\n            onCategories,\n        } = this.props;\n\n        const {containerWidth} = this.state;\n        const {moreRemaining, items = [], isEmpty} = resultsByTerm[keyword] ? resultsByTerm[keyword] : {};\n\n        /**\n         * Columns 'left' values\n         */\n        const columnWidth = parseInt(containerWidth / this.numberOfColumns, 10);\n        const leftPosition = Array(this.numberOfColumns).fill(0).map((item, index) => this.padding + ((index * columnWidth) - (index * (this.padding / 2))));\n\n        this.columnsHeights = Array(this.numberOfColumns).fill(this.padding);\n\n        // Item width in %\n        //const itemWidth = this.numberOfColumns === NUMBER_OF_COLUMNS_PORTRAIT ? 100 / NUMBER_OF_COLUMNS_PORTRAIT : 100 / this.numberOfColumns;\n        const itemWidth = 140;\n\n        const searchItems = containerWidth && items.length ?\n            items.map((item, index) => {\n                const gfyItem = gifs[item];\n                const {gfyId} = gfyItem;\n\n                // Position calculation\n                const colIndex = this.minHeightColumnIndex();\n                const top = this.columnsHeights[colIndex] + 'px';\n                const left = leftPosition[colIndex] + 'px';\n                const itemHeight = ((itemWidth / gfyItem.width) * gfyItem.height) + this.padding;\n                this.columnsHeights[colIndex] += itemHeight;\n\n                return (\n                    <SearchItem\n                        gfyItem={gfyItem}\n                        top={top}\n                        left={left}\n                        itemWidth={itemWidth}\n                        itemClickHandler={this.itemClickHandler}\n                        key={`${index}-${gfyId}`}\n                    />\n                );\n            }) : null;\n\n        this.containerHeight = this.maxColumnHeight();\n\n        const content = searchItems ? (\n            <InfiniteScroll\n                className='search-grid-infinite-scroll'\n                pageStart={0}\n                loadMore={loadMore}\n                initialLoad={false}\n                hasMore={moreRemaining}\n                threshold={1}\n                containerHeight={this.containerHeight}\n                scrollPosition={scrollPosition}\n                useWindow={false}\n            >\n                {searchItems}\n            </InfiniteScroll>\n        ) : null;\n\n        const emptySearch = isEmpty ? (\n            <div className='empty-search'>\n                <div className='empty-search-image'/>\n                <p>{'0 Gifs found for '}<strong>{keyword}</strong></p>\n                <a onClick={onCategories}>\n                    <div className='empty-search-button'>{'Go to Reactions'}</div>\n                </a>\n            </div>\n        ) : null;\n\n        return (\n            <div\n                id='search-grid-container'\n                className={`search-grid-container ${containerClassName}`}\n                style={style.background}\n            >\n                {content}\n                {emptySearch}\n            </div>\n        );\n    }\n}\n\nexport default connect(mapStateToProps, mapDispatchToProps)(SearchGrid);\n","// Copyright (c) 2015-present Mattermost, Inc. All Rights Reserved.\n// See LICENSE.txt for license information.\n\nimport {connect} from 'react-redux';\n\nimport {saveSearchScrollPosition} from 'mattermost-redux/actions/gifs';\n\nimport SearchGrid from './SearchGrid';\n\nfunction mapStateToProps(state) {\n    return {\n        ...state.entities.gifs.cache,\n        ...state.entities.gifs.search,\n        appProps: state.entities.gifs.app,\n    };\n}\n\nfunction mapDispatchToProps() {\n    return {\n        saveSearchScrollPosition,\n    };\n}\n\nexport default connect(mapStateToProps, mapDispatchToProps)(SearchGrid);\n","// Copyright (c) 2015-present Mattermost, Inc. All Rights Reserved.\n// See LICENSE.txt for license information.\n\nimport React, {PureComponent} from 'react';\nimport PropTypes from 'prop-types';\nimport {connect} from 'react-redux';\n\nimport {searchIfNeededInitial, searchGfycat} from 'mattermost-redux/actions/gifs';\n\nimport SearchGrid from 'components/gif_picker/components/SearchGrid';\n\nfunction mapStateToProps(state) {\n    return {\n        ...state.entities.gifs.search,\n    };\n}\n\nconst mapDispatchToProps = ({\n    searchGfycat,\n    searchIfNeededInitial,\n});\n\nexport class Search extends PureComponent {\n    static propTypes = {\n        handleItemClick: PropTypes.func,\n        onCategories: PropTypes.func,\n        searchText: PropTypes.string,\n        searchIfNeededInitial: PropTypes.func,\n        searchGfycat: PropTypes.func,\n    }\n\n    componentDidMount() {\n        const {searchText} = this.props;\n        this.props.searchIfNeededInitial(searchText.split('-').join(' '));\n    }\n\n    componentDidUpdate(prevProps) {\n        const {searchText} = this.props;\n        if (prevProps.searchText !== searchText) {\n            this.props.searchIfNeededInitial(searchText.split('-').join(' '));\n        }\n    }\n\n    loadMore = () => {\n        const {searchText} = this.props;\n        this.props.searchGfycat({searchText});\n    }\n\n    render() {\n        const {handleItemClick, searchText, onCategories} = this.props;\n\n        return (\n            <SearchGrid\n                keyword={searchText}\n                handleItemClick={handleItemClick}\n                onCategories={onCategories}\n                loadMore={this.loadMore}\n            />\n        );\n    }\n}\n\nexport default connect(mapStateToProps, mapDispatchToProps)(Search);\n","// Copyright (c) 2015-present Mattermost, Inc. All Rights Reserved.\n// See LICENSE.txt for license information.\n\nimport React, {PureComponent} from 'react';\nimport PropTypes from 'prop-types';\nimport {connect} from 'react-redux';\n\nimport {\n    searchCategory,\n    searchIfNeededInitial,\n    saveSearchScrollPosition,\n} from 'mattermost-redux/actions/gifs';\n\nimport SearchGrid from 'components/gif_picker/components/SearchGrid';\n\nconst mapDispatchToProps = ({\n    searchCategory,\n    searchIfNeededInitial,\n    saveSearchScrollPosition,\n});\n\nexport class Trending extends PureComponent {\n    static propTypes = {\n        handleItemClick: PropTypes.func,\n        onCategories: PropTypes.func,\n        searchCategory: PropTypes.func,\n        searchIfNeededInitial: PropTypes.func,\n        saveSearchScrollPosition: PropTypes.func,\n    }\n\n    componentDidMount() {\n        this.props.searchIfNeededInitial('trending');\n    }\n\n    componentWillUnmount() {\n        this.props.saveSearchScrollPosition(0);\n    }\n\n    loadMore = () => {\n        this.props.searchCategory({tagName: 'trending'});\n    }\n\n    render() {\n        const {handleItemClick, onCategories} = this.props;\n        return (\n            <SearchGrid\n                keyword='trending'\n                handleItemClick={handleItemClick}\n                onCategories={onCategories}\n                loadMore={this.loadMore}\n            />\n        );\n    }\n}\n\nexport default connect(null, mapDispatchToProps)(Trending);\n","// Copyright (c) 2015-present Mattermost, Inc. All Rights Reserved.\n// See LICENSE.txt for license information.\n\nimport React from 'react';\nimport PropTypes from 'prop-types';\n\nimport PureRenderMixin from 'react-addons-pure-render-mixin';\n\nimport App from 'components/gif_picker/components/App';\nimport Categories from 'components/gif_picker/components/Categories';\nimport Search from 'components/gif_picker/components/Search';\nimport Trending from 'components/gif_picker/components/Trending';\nimport constants from 'components/gif_picker/utils/constants';\n\nexport const appProps = {\n    appName: constants.appName.mattermost,\n    basePath: '/mattermost',\n    itemTapType: constants.ItemTapAction.SHARE,\n    appClassName: 'gfycat',\n    shareEvent: 'shareMattermost',\n    appId: 'mattermostwebviews',\n    enableHistory: true,\n    header: {\n        tabs: [constants.Tab.TRENDING, constants.Tab.REACTIONS],\n        displayText: false,\n    },\n};\n\nexport default class GifPicker extends React.Component {\n    static propTypes = {\n        onGifClick: PropTypes.func.isRequired,\n    }\n\n    constructor(props) {\n        super(props);\n\n        // All props are primitives or treated as immutable\n        this.shouldComponentUpdate = PureRenderMixin.shouldComponentUpdate.bind(this);\n\n        this.handleTrending = this.handleTrending.bind(this);\n        this.handleCategories = this.handleCategories.bind(this);\n        this.handleSearch = this.handleSearch.bind(this);\n        this.handleItemClick = this.handleItemClick.bind(this);\n\n        this.state = {\n            action: 'trending',\n        };\n    }\n\n    handleTrending() {\n        this.setState({\n            action: 'trending',\n        });\n    }\n\n    handleCategories() {\n        this.setState({\n            action: 'reactions',\n        });\n    }\n\n    handleSearch() {\n        this.setState({\n            action: 'search',\n        });\n    }\n\n    handleItemClick(gif) {\n        this.props.onGifClick(gif.max5mbGif);\n    }\n\n    render() {\n        const {action} = this.state;\n        let component;\n        switch (action) {\n        case 'reactions':\n            component = (\n                <Categories\n                    appProps={appProps}\n                    onTrending={this.handleTrending}\n                    onSearch={this.handleSearch}\n                />\n            );\n            break;\n        case 'search':\n            component = (\n                <Search\n                    appProps={appProps}\n                    onCategories={this.handleCategories}\n                    handleItemClick={this.handleItemClick}\n                />\n            );\n            break;\n        case 'trending':\n            component = (\n                <Trending\n                    appProps={appProps}\n                    onCategories={this.handleCategories}\n                    handleItemClick={this.handleItemClick}\n                />\n            );\n            break;\n        }\n        return (\n            <div>\n                <App\n                    appProps={appProps}\n                    action={action}\n                    onTrending={this.handleTrending}\n                    onCategories={this.handleCategories}\n                    onSearch={this.handleSearch}\n                >\n                    {component}\n                </App>\n            </div>\n        );\n    }\n}\n","// Copyright (c) 2015-present Mattermost, Inc. All Rights Reserved.\n// See LICENSE.txt for license information.\n\nimport React from 'react';\n\nexport default class EmojiIcon extends React.PureComponent {\n    render() {\n        return (\n            <span {...this.props}>\n                <svg\n                    width='16px'\n                    height='16px'\n                    viewBox='0 0 15 15'\n                    role='icon'\n                    aria-label='Emoji icon'\n                >\n                    <g\n                        stroke='none'\n                        strokeWidth='1'\n                        fill='inherit'\n                        fillRule='evenodd'\n                    >\n                        <g\n                            transform='translate(-1071.000000, -954.000000)'\n                            fill='inherit'\n                        >\n                            <g transform='translate(25.000000, 937.000000)'>\n                                <g transform='translate(1046.000000, 17.000000)'>\n                                    <path d='M7.5,0.0852272727 C3.405,0.0852272727 0.0852272727,3.405 0.0852272727,7.5 C0.0852272727,11.595 3.405,14.9147727 7.5,14.9147727 C11.595,14.9147727 14.9147727,11.595 14.9147727,7.5 C14.9147727,3.405 11.595,0.0852272727 7.5,0.0852272727 Z M7.5,14.0663436 C3.87926951,14.0663436 0.933656417,11.1207305 0.933656417,7.5 C0.933656417,3.87926951 3.87926951,0.933656417 7.5,0.933656417 C11.1207305,0.933656417 14.0663436,3.87926951 14.0663436,7.5 C14.0663436,11.1207305 11.1207305,14.0663436 7.5,14.0663436 Z'/>\n                                    <path d='M11.7732955,8.95397727 C12.0119318,8.90488636 12.2159659,9.11778409 12.1684091,9.35676136 C11.8063636,11.1790909 9.85346591,12.5710227 7.49846591,12.5710227 C5.15096591,12.5710227 3.20284091,11.1877841 2.83193182,9.37397727 C2.78181818,9.129375 2.99267045,8.911875 3.23744318,8.96198864 C4.85369318,9.29232955 10.1786932,9.28142045 11.7732955,8.95397727 Z'/>\n                                    <ellipse\n                                        cx='4.94318182'\n                                        cy='5.50431818'\n                                        rx='1'\n                                        ry='1.06534091'\n                                    />\n                                    <ellipse\n                                        cx='10.0568182'\n                                        cy='5.50431818'\n                                        rx='1'\n                                        ry='1.06534091'\n                                    />\n                                </g>\n                            </g>\n                        </g>\n                    </g>\n                </svg>\n            </span>\n        );\n    }\n}\n","// Copyright (c) 2015-present Mattermost, Inc. All Rights Reserved.\n// See LICENSE.txt for license information.\n\nimport React from 'react';\n\nexport default class GfycatIcon extends React.PureComponent {\n    render() {\n        return (\n            <span {...this.props}>\n                <svg\n                    width='22px'\n                    height='14px'\n                    viewBox='0 0 22 14'\n                >\n                    <g\n                        stroke='none'\n                        strokeWidth='1'\n                        fill='inherit'\n                        fillRule='evenodd'\n                    >\n                        <g\n                            transform='translate(-1344.000000, -552.000000)'\n                            fill='inherit'\n                        >\n                            <g transform='translate(1147.000000, 542.000000)'>\n                                <g transform='translate(1.000000, 1.000000)'>\n                                    <g transform='translate(138.000000, 0.000000)'>\n                                        <path d='M63.6748519,23 L62.2292481,23 C61.8176589,23 61.4619872,22.8510143 61.1631497,22.5539741 C60.8633954,22.2569338 60.71306,21.8993681 60.71306,21.4831393 C60.71306,21.0678417 60.8597287,20.710276 61.1539829,20.4132358 C61.4473204,20.1161955 61.800242,19.9672098 62.2118312,19.9672098 L63.6565183,19.9672098 C64.0681075,19.9672098 64.4182791,19.8219488 64.7061166,19.5304955 C64.993954,19.2390422 65.1378727,18.8917193 65.1378727,18.4866644 L65.1378727,15.4371134 C65.1378727,15.0208846 64.993954,14.6670436 64.7061166,14.3755903 C64.4182791,14.084137 64.0745243,13.938876 63.6748519,13.938876 C63.2632628,13.938876 62.9103411,14.0869305 62.6170036,14.3849019 C62.3227494,14.6819421 62.1760807,15.0329897 62.1760807,15.4371134 C62.1760807,15.7294978 62.3016658,16.0563352 62.5519193,16.4185567 L62.575753,16.4530096 C62.8269232,16.8143 62.9515917,17.1420685 62.9515917,17.4344529 C62.9515917,17.8506817 62.8049229,18.2073163 62.5115854,18.5043565 C62.2173313,18.8023279 61.8653263,18.9503824 61.4537371,18.9503824 C60.7836443,18.9503824 60.2198863,18.5164616 59.7615465,17.6486199 C59.373791,16.9232458 59.1794549,16.1857665 59.1794549,15.4371134 C59.1794549,14.188427 59.6176278,13.1213169 60.4930568,12.234852 C61.3684859,11.3493183 62.4226675,10.9060858 63.6565183,10.9060858 C64.8912858,10.9060858 65.9482175,11.3493183 66.8300633,12.234852 C67.7109925,13.1213169 68.1519154,14.188427 68.1519154,15.4371134 L68.1519154,18.4866644 C68.1519154,19.7353508 67.7137425,20.7996674 66.8383134,21.6796142 C65.9628844,22.559561 64.9087028,23 63.6748519,23 Z M80,15.9269039 C80,16.3068174 79.8689148,16.6317925 79.6076611,16.9027602 C79.3454907,17.173728 79.0319863,17.3096774 78.6653144,17.3096774 L76.8438719,17.3096774 L76.8438719,18.6589292 C76.8438719,19.0388427 76.7127867,19.3638178 76.4506164,19.6347855 C76.1893627,19.9057532 75.8749415,20.0417027 75.5082697,20.0417027 C75.1315143,20.0417027 74.8125098,19.9057532 74.5503394,19.6347855 C74.2890857,19.3638178 74.1580005,19.0388427 74.1580005,18.6589292 L74.1580005,13.1464583 C74.1580005,12.00858 74.5485061,11.0355171 75.3276838,10.2272697 C76.1077782,9.41995344 77.0473748,9.01582973 78.1473904,9.01582973 L78.6653144,9.01582973 C79.0319863,9.01582973 79.3454907,9.15177918 79.6076611,9.42274692 C79.8689148,9.69371467 80,10.0186897 80,10.3986033 C80,10.7775856 79.8689148,11.1034919 79.6076611,11.3744596 C79.3454907,11.6454273 79.0319863,11.7804456 78.6653144,11.7804456 L78.162974,11.7804456 C77.7963021,11.7804456 77.481881,11.9163951 77.2206273,12.1873628 C76.9584569,12.4583306 76.8282884,12.7777187 76.8282884,13.1464583 L76.8282884,14.5450615 L78.6653144,14.5450615 C79.0319863,14.5450615 79.3454907,14.681011 79.6076611,14.9519787 C79.8689148,15.2229465 80,15.5479215 80,15.9269039 Z M72.6344789,18.6589292 C72.6344789,19.0388427 72.5043104,19.3638178 72.24214,19.6347855 C71.9808863,19.9057532 71.6664652,20.0417027 71.2997933,20.0417027 C70.9340382,20.0417027 70.616867,19.9057532 70.3501132,19.6347855 C70.0833594,19.3638178 69.9495242,19.0388427 69.9495242,18.6589292 L69.9495242,14.170735 C69.9495242,13.7917526 70.0806094,13.4667775 70.3418631,13.1958098 C70.6040335,12.9239109 70.9175379,12.7888926 71.2842098,12.7888926 C71.6508817,12.7888926 71.9671361,12.9239109 72.2348066,13.1958098 C72.5015604,13.4667775 72.6344789,13.7917526 72.6344789,14.170735 L72.6344789,18.6589292 Z M58.3370263,12.5356169 C58.1023563,11.7441304 58.0042716,10.9163286 58.0042716,10.9163286 C57.9721878,10.6937812 58.1243566,10.547589 58.3425264,10.5904223 C58.3425264,10.5904223 58.5350291,10.6267376 58.8017829,10.6807449 C59.0767868,10.7375457 59.4324585,10.8139009 59.7404628,10.8921184 C60.3473048,11.0448287 60.95323,11.2720319 60.95323,11.2720319 C60.95323,11.2720319 60.2904706,11.6621882 59.7239626,12.3018956 C59.1565379,12.9406718 58.8650338,13.8420353 58.8650338,13.8420353 C58.8650338,13.8420353 58.5716963,13.3280346 58.3370263,12.5356169 Z M69.088762,12.5356169 C69.323432,11.7441304 69.4224334,10.9163286 69.4224334,10.9163286 C69.4536005,10.6937812 69.3014317,10.547589 69.0832619,10.5904223 C69.0832619,10.5904223 68.2921674,10.7384769 67.6853254,10.8921184 C67.0794002,11.0448287 66.4725583,11.2720319 66.4725583,11.2720319 C66.4725583,11.2720319 67.1353177,11.6621882 67.7027424,12.3018956 C68.2692504,12.9406718 68.5616712,13.8420353 68.5616712,13.8420353 C68.5616712,13.8420353 68.8550087,13.3280346 69.088762,12.5356169 Z M72.6344789,10.3818424 C72.6344789,10.7617559 72.5043104,11.086731 72.24214,11.3576987 C71.9808863,11.6286664 71.6664652,11.7646159 71.2997933,11.7646159 C70.9340382,11.7646159 70.616867,11.6286664 70.3501132,11.3576987 C70.0833594,11.086731 69.9495242,10.7617559 69.9495242,10.3818424 C69.9495242,10.00286 70.0806094,9.67788494 70.3418631,9.40691719 C70.6040335,9.13594945 70.9175379,9 71.2842098,9 C71.6508817,9 71.9671361,9.13594945 72.2348066,9.40691719 C72.5015604,9.67788494 72.6344789,10.00286 72.6344789,10.3818424 Z'/>\n                                    </g>\n                                </g>\n                            </g>\n                        </g>\n                    </g>\n                </svg>\n            </span>\n        );\n    }\n}\n","// Copyright (c) 2015-present Mattermost, Inc. All Rights Reserved.\n// See LICENSE.txt for license information.\n\nimport PropTypes from 'prop-types';\nimport React from 'react';\nimport {FormattedMessage} from 'react-intl';\n\nexport default class EmojiPickerHeader extends React.PureComponent {\n    static propTypes = {\n        handleEmojiPickerClose: PropTypes.func.isRequired,\n    };\n\n    render() {\n        return (\n            <div className='emoji-picker__header modal-header'>\n                <button\n                    type='button'\n                    className='close emoji-picker__header-close-button'\n                    onClick={this.props.handleEmojiPickerClose}\n                >\n                    <span aria-hidden='true'>{'×'}</span>\n                    <span className='sr-only'>\n                        <FormattedMessage\n                            id={'emoji_picker.close'}\n                            defaultMessage={'Close'}\n                        />\n                    </span>\n                </button>\n                <h4 className='modal-title emoji-picker__header-title'>\n                    <FormattedMessage\n                        id={'emoji_picker.header'}\n                        defaultMessage={'Emoji Picker'}\n                    />\n                </h4>\n            </div>\n        );\n    }\n}\n","// Copyright (c) 2015-present Mattermost, Inc. All Rights Reserved.\n// See LICENSE.txt for license information.\n\nexport function compareEmojis(emojiA, emojiB, searchedName) {\n    const aName = emojiA.name || emojiA.aliases[0];\n    const bName = emojiB.name || emojiB.aliases[0];\n\n    // Have the emojis that contain the search appear first\n    const aPrefix = aName.startsWith(searchedName);\n    const bPrefix = bName.startsWith(searchedName);\n\n    if (aPrefix === bPrefix) {\n        return aName.localeCompare(bName);\n    } else if (aPrefix) {\n        return -1;\n    }\n\n    return 1;\n}","// Copyright (c) 2015-present Mattermost, Inc. All Rights Reserved.\n// See LICENSE.txt for license information.\n\nimport PropTypes from 'prop-types';\nimport React from 'react';\n\nexport default class EmojiPickerCategory extends React.Component {\n    static propTypes = {\n        category: PropTypes.string.isRequired,\n        icon: PropTypes.node.isRequired,\n        onCategoryClick: PropTypes.func.isRequired,\n        selected: PropTypes.bool.isRequired,\n        enable: PropTypes.bool.isRequired,\n    }\n\n    constructor(props) {\n        super(props);\n        this.handleClick = this.handleClick.bind(this);\n    }\n    shouldComponentUpdate(nextProps) {\n        return nextProps.selected !== this.props.selected ||\n            nextProps.enable !== this.props.enable;\n    }\n\n    handleClick(e) {\n        e.preventDefault();\n        this.props.onCategoryClick(this.props.category);\n    }\n\n    render() {\n        let className = 'emoji-picker__category';\n        if (this.props.selected) {\n            className += ' emoji-picker__category--selected';\n        }\n\n        if (!this.props.enable) {\n            className += ' disable';\n        }\n\n        return (\n            <a\n                className={className}\n                href='#'\n                onClick={this.handleClick}\n                aria-label={this.props.category}\n            >\n                {this.props.icon}\n            </a>\n        );\n    }\n}\n","// Copyright (c) 2015-present Mattermost, Inc. All Rights Reserved.\n// See LICENSE.txt for license information.\n\nimport PropTypes from 'prop-types';\nimport React from 'react';\nimport debounce from 'lodash/debounce';\nimport {getEmojiImageUrl} from 'mattermost-redux/utils/emoji_utils';\nimport {intlShape} from 'react-intl';\n\nimport imgTrans from 'images/img_trans.gif';\n\nconst SCROLLING_ADDITIONAL_VISUAL_SPACING = 10; // to make give the emoji some visual 'breathing room'\nconst EMOJI_LAZY_LOAD_SCROLL_THROTTLE = 150;\n\nexport default class EmojiPickerItem extends React.Component {\n    static propTypes = {\n        emoji: PropTypes.object.isRequired,\n        onItemOver: PropTypes.func.isRequired,\n        onItemClick: PropTypes.func.isRequired,\n        category: PropTypes.string.isRequired,\n        isSelected: PropTypes.bool,\n        categoryIndex: PropTypes.number.isRequired,\n        emojiIndex: PropTypes.number.isRequired,\n        containerRef: PropTypes.any,\n        containerTop: PropTypes.number.isRequired,\n        containerBottom: PropTypes.number.isRequired,\n    };\n\n    static contextTypes = {\n        intl: intlShape.isRequired,\n    };\n\n    shouldComponentUpdate(nextProps) {\n        return nextProps.isSelected !== this.props.isSelected;\n    }\n\n    emojiItemRef = (emojiItem) => {\n        this.emojiItem = emojiItem;\n    };\n\n    emojiName = () => {\n        const {formatMessage} = this.context.intl;\n        return formatMessage({\n            id: 'emoji_picker_item.emoji_aria_label',\n            defaultMessage: '{emojiName} emoji',\n        },\n        {\n            emojiName: this.props.emoji.aliases[0].replace(/_/g, ' '),\n        });\n    }\n\n    UNSAFE_componentWillReceiveProps(nextProps) { // eslint-disable-line camelcase\n        if (!this.props.isSelected && nextProps.isSelected) {\n            const topOfTheEmojiItem = this.emojiItem.offsetTop;\n            const bottomOfTheEmojiItem = topOfTheEmojiItem + this.emojiItem.offsetHeight;\n            const {containerRef, containerTop, containerBottom} = nextProps;\n            if (topOfTheEmojiItem < containerTop) {\n                containerRef.scrollTop = topOfTheEmojiItem - SCROLLING_ADDITIONAL_VISUAL_SPACING;\n            } else if (bottomOfTheEmojiItem > containerBottom) {\n                containerRef.scrollTop = (bottomOfTheEmojiItem - containerRef.offsetHeight) + SCROLLING_ADDITIONAL_VISUAL_SPACING;\n            }\n        }\n    }\n\n    handleMouseOver = () => {\n        if (!this.props.isSelected) {\n            this.props.onItemOver(this.props.categoryIndex, this.props.emojiIndex);\n        }\n    };\n\n    handleMouseOverThrottle = debounce(this.handleMouseOver, EMOJI_LAZY_LOAD_SCROLL_THROTTLE, {leading: true, trailing: true});\n\n    handleClick = () => {\n        this.props.onItemClick(this.props.emoji);\n    };\n\n    render() {\n        const {emoji} = this.props;\n\n        let itemClassName = 'emoji-picker__item';\n        if (this.props.isSelected) {\n            itemClassName += ' selected';\n        }\n\n        let spriteClassName = 'emojisprite';\n        spriteClassName += ' emoji-category-' + emoji.category + '-' + emoji.batch;\n        spriteClassName += ' emoji-' + emoji.filename;\n\n        let image;\n        if (emoji.category && emoji.batch) {\n            image = (\n                <img\n                    alt={'emoji image'}\n                    onMouseOver={this.handleMouseOverThrottle}\n                    src={imgTrans}\n                    className={spriteClassName}\n                    onClick={this.handleClick}\n                    id={'emoji-' + emoji.filename}\n                    aria-label={this.emojiName()}\n                    role='button'\n                />\n            );\n        } else {\n            image = (\n                <img\n                    alt={'custom emoji image'}\n                    onMouseOver={this.handleMouseOver}\n                    src={getEmojiImageUrl(emoji)}\n                    className={'emoji-category--custom'}\n                    onClick={this.handleClick}\n                />\n            );\n        }\n\n        return (\n            <div\n                className={itemClassName}\n                ref={this.emojiItemRef}\n            >\n                <div>\n                    {image}\n                </div>\n            </div>\n        );\n    }\n}\n","// Copyright (c) 2015-present Mattermost, Inc. All Rights Reserved.\n// See LICENSE.txt for license information.\n\nimport PropTypes from 'prop-types';\nimport React from 'react';\nimport {FormattedMessage} from 'react-intl';\n\nexport default class EmojiPickerCategorySection extends React.PureComponent {\n    static propTypes = {\n        categoryName: PropTypes.string.isRequired,\n        children: PropTypes.any,\n        updateCategoryOffset: PropTypes.func.isRequired,\n    };\n\n    componentDidMount() {\n        this.props.updateCategoryOffset(this.props.categoryName, this.div.offsetTop);\n    }\n    divRef = (div) => {\n        this.div = div;\n    };\n\n    render() {\n        return (\n            <div\n                ref={this.divRef}\n            >\n                <div className='emoji-picker-items__container'>\n                    <div\n                        className='emoji-picker__category-header'\n                        id={`emojipickercat-${this.props.categoryName}`}\n                    >\n                        <FormattedMessage id={'emoji_picker.' + this.props.categoryName}/>\n                    </div>\n                </div>\n                <div className='emoji-picker-items__container'>\n                    {this.props.children}\n                </div>\n            </div>\n        );\n    }\n}\n","// Copyright (c) 2015-present Mattermost, Inc. All Rights Reserved.\n// See LICENSE.txt for license information.\n\nimport PropTypes from 'prop-types';\nimport React from 'react';\nimport {FormattedMessage} from 'react-intl';\nimport {getEmojiImageUrl} from 'mattermost-redux/utils/emoji_utils';\n\nimport imgTrans from 'images/img_trans.gif';\n\nexport default class EmojiPickerPreview extends React.Component {\n    static propTypes = {\n        emoji: PropTypes.object,\n    }\n\n    render() {\n        const emoji = this.props.emoji;\n\n        if (emoji) {\n            let name;\n            let aliases;\n            let previewImage;\n\n            if (emoji.aliases && emoji.category && emoji.batch) {\n                // This is a system emoji which only has a list of aliases\n                name = emoji.aliases[0];\n                aliases = emoji.aliases;\n\n                previewImage = (\n                    <span className='sprite-preview'>\n                        <img\n                            alt={'emoji category image'}\n                            src={imgTrans}\n                            className={'emojisprite-preview emoji-category-' + emoji.category + '-' + emoji.batch + ' emoji-' + emoji.filename}\n                        />\n                    </span>\n                );\n            } else {\n                // This is a custom emoji that matches the model on the server\n                name = emoji.name;\n                aliases = [emoji.name];\n                previewImage = (\n                    <img\n                        alt={'emoji preview image'}\n                        className='emoji-picker__preview-image'\n                        src={getEmojiImageUrl(emoji)}\n                    />\n                );\n            }\n\n            return (\n                <div className='emoji-picker__preview'>\n                    <div className='emoji-picker__preview-image-box'>\n                        {previewImage}\n                    </div>\n                    <div className='emoji-picker__preview-image-label-box'>\n                        <span className='emoji-picker__preview-name'>{name}</span>\n                        <span className='emoji-picker__preview-aliases'>\n                            {':' + aliases[0] + ':'}\n                        </span>\n                    </div>\n                </div>\n            );\n        }\n\n        return (\n            <div className='emoji-picker__preview emoji-picker__preview-placeholder'>\n                <FormattedMessage\n                    id='emoji_picker.emojiPicker'\n                    defaultMessage='Emoji Picker'\n                />\n            </div>\n        );\n    }\n}\n","// Copyright (c) 2015-present Mattermost, Inc. All Rights Reserved.\n// See LICENSE.txt for license information.\n\nimport PropTypes from 'prop-types';\nimport React from 'react';\nimport {FormattedMessage} from 'react-intl';\nimport throttle from 'lodash/throttle';\n\nimport * as Emoji from 'utils/emoji.jsx';\nimport {compareEmojis} from 'utils/emoji_utils.jsx';\nimport {t} from 'utils/i18n';\nimport imgTrans from 'images/img_trans.gif';\n\nimport LocalizedInput from 'components/localized_input/localized_input';\n\nimport EmojiPickerCategory from './components/emoji_picker_category';\nimport EmojiPickerItem from './components/emoji_picker_item';\nimport EmojiPickerCategorySection from './emoji_picker_category_section';\nimport EmojiPickerPreview from './components/emoji_picker_preview';\n\nconst CATEGORY_SEARCH_RESULTS = 'searchResults';\nt('emoji_picker.searchResults');\n\nconst EMOJI_HEIGHT = 27;\n\n// If this changes, the spaceRequiredAbove and spaceRequiredBelow props passed to the EmojiPickerOverlay must be updated\nconst EMOJI_CONTAINER_HEIGHT = 290;\nconst EMOJI_CONTAINER_STYLE = {\n    height: EMOJI_CONTAINER_HEIGHT,\n};\n\nconst EMOJI_LAZY_LOAD_BUFFER = 75;\nconst EMOJI_PER_ROW = 9; // needs to match variable `$emoji-per-row` in _variables.scss\nconst EMOJI_TO_LOAD_PER_UPDATE = 135;\nconst SYSTEM_EMOJIS_COUNT = 1476;\nconst EMOJI_LAZY_LOAD_SCROLL_THROTTLE = 100;\n\nconst CATEGORIES = {\n    recent: {\n        name: 'recent',\n        className: 'fa fa-clock-o',\n        id: t('emoji_picker.recent'),\n        message: 'Recently Used',\n        offset: 0,\n    },\n    people: {\n        name: 'people',\n        className: 'fa fa-smile-o',\n        id: t('emoji_picker.people'),\n        message: 'People',\n        offset: 0,\n    },\n    nature: {\n        name: 'nature',\n        className: 'fa fa-leaf',\n        id: t('emoji_picker.nature'),\n        message: 'Nature',\n        offset: 0,\n    },\n    foods: {\n        name: 'foods',\n        className: 'fa fa-cutlery',\n        id: t('emoji_picker.foods'),\n        message: 'Foods',\n        offset: 0,\n    },\n    activity: {\n        name: 'activity',\n        className: 'fa fa-futbol-o',\n        id: t('emoji_picker.activity'),\n        message: 'Activity',\n        offset: 0,\n    },\n    places: {\n        name: 'places',\n        className: 'fa fa-plane',\n        id: t('emoji_picker.places'),\n        message: 'Places',\n        offset: 0,\n    },\n    objects: {\n        name: 'objects',\n        className: 'fa fa-lightbulb-o',\n        id: t('emoji_picker.objects'),\n        message: 'Objects',\n        offset: 0,\n    },\n    symbols: {\n        name: 'symbols',\n        className: 'fa fa-heart-o',\n        id: t('emoji_picker.symbols'),\n        message: 'Symbols',\n        offset: 0,\n    },\n    flags: {\n        name: 'flags',\n        className: 'fa fa-flag-o',\n        id: t('emoji_picker.flags'),\n        message: 'Flags',\n        offset: 0,\n    },\n    custom: {\n        name: 'custom',\n        className: 'fa fa-at',\n        id: t('emoji_picker.custom'),\n        message: 'Custom',\n        offset: 0,\n    },\n};\n\nfunction getEmojiFilename(emoji) {\n    return emoji.filename || emoji.id;\n}\n\nexport function filterEmojiSearchInput(input) {\n    return input.toLowerCase().replace(/^:|:$/g, '');\n}\n\nconst EMOJIS_PER_PAGE = 200;\nconst LOAD_MORE_AT_PIXELS_FROM_BOTTOM = 500;\n\nexport default class EmojiPicker extends React.PureComponent {\n    static propTypes = {\n        listHeight: PropTypes.number,\n        onEmojiClose: PropTypes.func.isRequired,\n        onEmojiClick: PropTypes.func.isRequired,\n        customEmojisEnabled: PropTypes.bool,\n        emojiMap: PropTypes.object.isRequired,\n        recentEmojis: PropTypes.array.isRequired,\n        customEmojiPage: PropTypes.number.isRequired,\n        visible: PropTypes.bool,\n        actions: PropTypes.shape({\n            getCustomEmojis: PropTypes.func.isRequired,\n            searchCustomEmojis: PropTypes.func.isRequired,\n            incrementEmojiPickerPage: PropTypes.func.isRequired,\n        }).isRequired,\n    };\n\n    static defaultProps = {\n        listHeight: 245,\n        customEmojiPage: 0,\n        customEmojisEnabled: false,\n    };\n\n    constructor(props) {\n        super(props);\n\n        this.handleCategoryClick = this.handleCategoryClick.bind(this);\n        this.handleFilterChange = this.handleFilterChange.bind(this);\n        this.handleItemOver = this.handleItemOver.bind(this);\n        this.handleItemClick = this.handleItemClick.bind(this);\n        this.handleKeyDown = this.handleKeyDown.bind(this);\n        this.handleCategoryKeyDown = this.handleCategoryKeyDown.bind(this);\n        this.handleScroll = this.handleScroll.bind(this);\n        this.handleScrollThrottle = throttle(this.handleScroll, EMOJI_LAZY_LOAD_SCROLL_THROTTLE, {leading: false, trailing: true});\n        this.updateCategoryOffset = this.updateCategoryOffset.bind(this);\n\n        this.divHeight = 0;\n        this.missingPages = true;\n        this.loadingMoreEmojis = false;\n        this.state = {\n            allEmojis: {},\n            categories: CATEGORIES,\n            filter: '',\n            cursor: [0, 0], // categoryIndex, emojiIndex\n            divTopOffset: 0,\n            emojisToShow: SYSTEM_EMOJIS_COUNT,\n        };\n    }\n\n    UNSAFE_componentWillMount() { // eslint-disable-line camelcase\n        if (this.props.customEmojiPage === 0) {\n            this.loadMoreCustomEmojis();\n        }\n        this.getEmojis();\n    }\n\n    componentDidMount() {\n        // Delay taking focus because this briefly renders offscreen when using an Overlay\n        // so focusing it immediately on mount can cause weird scrolling\n        requestAnimationFrame(() => {\n            if (this.searchInput) {\n                this.searchInput.focus();\n            }\n        });\n        this.divHeight = this.emojiPickerContainer.offsetHeight;\n    }\n\n    UNSAFE_componentWillUpdate(nextProps, nextState) { // eslint-disable-line camelcase\n        if (this.state.divTopOffset === nextState.divTopOffset) {\n            return;\n        }\n\n        if (this.lastVisibleEmoji) {\n            const difference = this.lastVisibleEmoji.offsetTop - (nextState.divTopOffset + EMOJI_CONTAINER_HEIGHT + EMOJI_LAZY_LOAD_BUFFER);\n            if (difference <= 0) {\n                const numToLoad = EMOJI_TO_LOAD_PER_UPDATE + Math.ceil((difference / EMOJI_HEIGHT) * EMOJI_PER_ROW * -1);\n                this.setState((state) => ({\n                    emojisToShow: state.emojisToShow + numToLoad,\n                }));\n            }\n        }\n\n        if (!this.missingPages || !this.emojiPickerContainer) {\n            return;\n        }\n\n        const pixelsFromBottom = this.emojiPickerContainer.scrollHeight - nextState.divTopOffset - this.emojiPickerContainer.clientHeight;\n        if (pixelsFromBottom <= LOAD_MORE_AT_PIXELS_FROM_BOTTOM) {\n            this.loadMoreCustomEmojis();\n        }\n    }\n\n    UNSAFE_componentWillReceiveProps(nextProps) { // eslint-disable-line camelcase\n        if (this.props.emojiMap !== nextProps.emojiMap) {\n            this.getEmojis(nextProps);\n        }\n    }\n\n    loadMoreCustomEmojis = async () => {\n        if (!this.props.customEmojisEnabled || this.loadingMoreEmojis) {\n            return;\n        }\n\n        this.loadingMoreEmojis = true;\n\n        const {data} = await this.props.actions.getCustomEmojis(this.props.customEmojiPage, EMOJIS_PER_PAGE);\n        if (!data) {\n            this.loadingMoreEmojis = false;\n            return;\n        }\n\n        if (data.length < EMOJIS_PER_PAGE) {\n            this.missingPages = false;\n            this.loadingMoreEmojis = false;\n            return;\n        }\n\n        await this.props.actions.incrementEmojiPickerPage();\n\n        this.loadingMoreEmojis = false;\n    }\n\n    componentDidUpdate(prevProps) {\n        if (this.props.visible && !prevProps.visible) {\n            this.searchInput.focus();\n        }\n    }\n\n    lastVisibleEmojiRef = (lastVisibleEmoji) => {\n        this.lastVisibleEmoji = lastVisibleEmoji;\n    };\n    emojiPickerContainerRef = (emojiPickerContainer) => {\n        this.emojiPickerContainer = emojiPickerContainer;\n    };\n    emojiSearchInput = (input) => {\n        this.searchInput = input;\n    };\n\n    handleCategoryClick(categoryName) {\n        this.setState({\n            cursor: [Object.keys(this.state.categories).indexOf(categoryName), 0],\n            divTopOffset: this.state.categories[categoryName].offset,\n        });\n        this.emojiPickerContainer.scrollTop = this.state.categories[categoryName].offset;\n        this.searchInput.focus();\n    }\n\n    handleFilterChange(e) {\n        e.preventDefault();\n        const filter = filterEmojiSearchInput(e.target.value);\n\n        if (this.props.customEmojisEnabled && filter && filter.trim() !== '') {\n            this.props.actions.searchCustomEmojis(filter);\n        }\n\n        this.setState(() => ({\n            filter,\n            cursor: [0, 0],\n        }));\n    }\n\n    handleItemOver(categoryIndex, emojiIndex) {\n        this.setState({\n            cursor: [categoryIndex, emojiIndex],\n        });\n    }\n\n    handleItemClick(emoji) {\n        this.props.onEmojiClick(emoji);\n    }\n\n    handleCategoryKeyDown(e) {\n        switch (e.key) {\n        case 'ArrowRight':\n            e.preventDefault();\n            this.selectNextEmoji();\n            this.searchInput.focus();\n            break;\n        case 'ArrowLeft':\n            e.preventDefault();\n            this.selectPrevEmoji();\n            this.searchInput.focus();\n            break;\n        case 'ArrowUp':\n            e.preventDefault();\n            this.selectPrevEmoji(EMOJI_PER_ROW);\n            this.searchInput.focus();\n            break;\n        case 'ArrowDown':\n            e.preventDefault();\n            this.selectNextEmoji(EMOJI_PER_ROW);\n            this.searchInput.focus();\n            break;\n        }\n    }\n\n    handleKeyDown(e) {\n        switch (e.key) {\n        case 'ArrowRight':\n            e.preventDefault();\n            this.selectNextEmoji();\n            break;\n        case 'ArrowLeft':\n            e.preventDefault();\n            this.selectPrevEmoji();\n            break;\n        case 'ArrowUp':\n            e.preventDefault();\n            this.selectPrevEmoji(EMOJI_PER_ROW);\n            break;\n        case 'ArrowDown':\n            e.preventDefault();\n            this.selectNextEmoji(EMOJI_PER_ROW);\n            break;\n        case 'Enter':\n            e.preventDefault();\n            if (this.getCurrentEmojiByCursor(this.state.cursor)) {\n                this.props.onEmojiClick(this.getCurrentEmojiByCursor(this.state.cursor));\n            }\n            break;\n        }\n    }\n\n    handleScroll() {\n        if (this.emojiPickerContainer) {\n            this.setState({divTopOffset: this.emojiPickerContainer.scrollTop});\n        }\n    }\n\n    selectNextEmoji(offset = 1) {\n        const {cursor} = this.state;\n\n        // try moving to next emoji in index\n        let newCursor = [cursor[0], cursor[1] + offset];\n        if (this.getCurrentEmojiByCursor(newCursor)) {\n            this.setState({cursor: newCursor});\n            return;\n        }\n\n        // try moving to next category\n        newCursor = [cursor[0] + 1, 0];\n        if (this.getCurrentEmojiByCursor(newCursor)) {\n            this.setState({cursor: newCursor});\n        }\n    }\n\n    selectPrevEmoji(offset = 1) {\n        const {cursor} = this.state;\n\n        // try moving to prev emoji in index\n        let newCursor = [cursor[0], cursor[1] - offset];\n        if (this.getCurrentEmojiByCursor(newCursor)) {\n            this.setState({cursor: newCursor});\n            return;\n        }\n\n        // try moving to end of prev category\n        if (cursor[0] !== 0) {\n            const newCategory = this.getCategoryByIndex(cursor[0] - 1);\n            const lastVisibleEmojiInNewCategory = this.state.categories[newCategory.name].emojiIds.length - 1;\n            newCursor = [cursor[0] - 1, lastVisibleEmojiInNewCategory];\n            if (this.getCurrentEmojiByCursor(newCursor)) {\n                this.setState({cursor: newCursor});\n            }\n        }\n    }\n\n    getCategoryByIndex(index) {\n        if (this.state.filter && index !== 0) {\n            return null;\n        }\n        return this.getCategoriesByKey(Object.keys(this.state.categories)[index]);\n    }\n\n    getCurrentEmojiByCursor(cursor) {\n        const category = this.getCategoryByIndex(cursor[0]);\n        if (!category) {\n            return null;\n        }\n        return this.getEmojisByCategory(category)[cursor[1]];\n    }\n\n    getCategoriesByKey(key) {\n        return this.state.filter ? {\n            id: CATEGORY_SEARCH_RESULTS,\n            name: CATEGORY_SEARCH_RESULTS,\n        } : this.state.categories[key];\n    }\n\n    sortEmojis(emojis) {\n        const {recentEmojis: recentEmojisProps} = this.props;\n        const recentEmojis = [];\n        const emojisMinusRecent = [];\n\n        Object.values(emojis).forEach((emoji) => {\n            let emojiArray = emojisMinusRecent;\n            for (let i = 0; i < emoji.aliases.length; i++) {\n                if (recentEmojisProps.includes(emoji.aliases[i].toLowerCase())) {\n                    emojiArray = recentEmojis;\n                }\n            }\n\n            emojiArray.push(emoji);\n        });\n\n        const sortEmojisHelper = (a, b) => {\n            return compareEmojis(a, b, this.state.filter);\n        };\n\n        recentEmojis.sort(sortEmojisHelper);\n\n        emojisMinusRecent.sort(sortEmojisHelper);\n\n        return [\n            ...recentEmojis,\n            ...emojisMinusRecent,\n        ];\n    }\n\n    getEmojisByCategory(category) {\n        if (this.state.filter) {\n            const emojis = Object.values(this.state.allEmojis).filter((emoji) => {\n                for (let i = 0; i < emoji.aliases.length; i++) {\n                    if (emoji.aliases[i].toLowerCase().includes(this.state.filter)) {\n                        return true;\n                    }\n                }\n\n                return false;\n            });\n\n            return this.sortEmojis(emojis);\n        }\n        return this.state.categories[category.name].emojiIds.map((emojiId) =>\n            this.state.allEmojis[emojiId]);\n    }\n\n    getCurrentEmojiName() {\n        const emoji = this.getCurrentEmojiByCursor(this.state.cursor);\n        if (!emoji) {\n            return '';\n        }\n\n        return emoji.aliases[0].replace(/_/g, ' ');\n    }\n\n    getEmojis(props = this.props) {\n        const {categories, allEmojis} = this.state;\n        const emojiMap = props.emojiMap;\n        const customEmojiMap = emojiMap.customEmojis;\n\n        for (const category of Object.keys(categories)) {\n            let categoryEmojis = [];\n            if (category === 'recent') {\n                const recentEmojis = [...this.props.recentEmojis].reverse();\n                categoryEmojis = recentEmojis.filter((name) => {\n                    return emojiMap.has(name);\n                }).map((name) => {\n                    return emojiMap.get(name);\n                });\n            } else {\n                const indices = Emoji.EmojiIndicesByCategory.get(category) || [];\n                categoryEmojis = indices.map((index) => Emoji.Emojis[index]);\n                if (category === 'custom') {\n                    categoryEmojis = categoryEmojis.concat([...customEmojiMap.values()]);\n                }\n            }\n            categories[category].emojiIds = categoryEmojis.map((emoji) => getEmojiFilename(emoji));\n            for (let i = 0; i < categoryEmojis.length; i++) {\n                const currentEmoji = categoryEmojis[i];\n                const fileName = getEmojiFilename(currentEmoji);\n                allEmojis[fileName] = {\n                    ...currentEmoji,\n                    visible: false,\n                    offset: null,\n                };\n                if (!currentEmoji.filename) {\n                    // if custom emoji, set proper attributes\n                    allEmojis[fileName] = {\n                        ...allEmojis[fileName],\n                        aliases: [currentEmoji.name],\n                        category: 'custom',\n                        filename: fileName,\n                    };\n                }\n            }\n        }\n        this.setState({\n            categories,\n            allEmojis,\n        });\n    }\n\n    getCurrentEmojiCategoryName() {\n        const categories = Object.keys(this.state.categories);\n        let currentCategoryName = '';\n        for (let i = categories.length - 1; i >= 0; i--) {\n            // go through in reverse so that you get the last category that matches\n            const category = this.state.categories[categories[i]];\n            if (this.state.divTopOffset > category.offset - 20) {\n                currentCategoryName = categories[i];\n                break;\n            }\n        }\n        return currentCategoryName;\n    }\n\n    emojiCategories() {\n        const categories = this.state.categories;\n        const categoryKeys = Object.keys(categories);\n        const currentCategoryName = this.state.filter ? categoryKeys[0] : this.getCurrentEmojiCategoryName();\n        const emojiPickerCategories = categoryKeys.map((categoryName) => {\n            const category = categories[categoryName];\n            return (\n                <EmojiPickerCategory\n                    key={'header-' + category.name}\n                    category={category.name}\n                    icon={\n                        <FormattedMessage\n                            id={category.id}\n                            defaultMessage={category.message}\n                        >\n                            {(title) => (\n                                <i\n                                    className={category.className}\n                                    title={title}\n                                />\n                            )}\n                        </FormattedMessage>\n                    }\n                    onCategoryClick={this.handleCategoryClick}\n                    selected={currentCategoryName === category.name}\n                    enable={!this.state.filter}\n                />\n            );\n        });\n        return (\n            <div\n                className='emoji-picker__categories'\n                onKeyDown={this.handleCategoryKeyDown}\n            >\n                {emojiPickerCategories}\n            </div>\n        );\n    }\n\n    emojiSearch() {\n        return (\n            <div className='emoji-picker__search-container'>\n                <span className='fa fa-search emoji-picker__search-icon'/>\n                <FormattedMessage\n                    id='emoji_picker.search_emoji'\n                    defaultMessage='Search for an emoji'\n                >\n                    {(ariaLabel) => (\n                        <LocalizedInput\n                            aria-label={ariaLabel}\n                            ref={this.emojiSearchInput}\n                            className='emoji-picker__search'\n                            type='text'\n                            onChange={this.handleFilterChange}\n                            onKeyDown={this.handleKeyDown}\n                            placeholder={{id: t('emoji_picker.search'), defaultMessage: 'Search Emoji'}}\n                        />\n                    )}\n                </FormattedMessage>\n            </div>\n        );\n    }\n\n    emojiCurrentResults() {\n        const {filter} = this.state;\n        const categories = filter ? [CATEGORY_SEARCH_RESULTS] : Object.keys(this.state.categories);\n        let numEmojisLoaded = 0;\n\n        let categoryComponents = [];\n        for (let i = 0; i < categories.length; i++) {\n            const category = this.getCategoriesByKey(categories[i]);\n            const emojis = this.getEmojisByCategory(category);\n            const items = this.emojiCurrentResultsItems(i, emojis, numEmojisLoaded);\n            numEmojisLoaded += items.length;\n            categoryComponents = [...categoryComponents, (\n                <EmojiPickerCategorySection\n                    key={category.id}\n                    categoryName={category.name}\n                    updateCategoryOffset={this.updateCategoryOffset}\n                    role='application'\n                >\n                    {items}\n                </EmojiPickerCategorySection>\n            )];\n        }\n\n        return (\n            <div\n                ref={this.emojiPickerContainerRef}\n                onScroll={this.handleScrollThrottle}\n                className='emoji-picker__items'\n                style={EMOJI_CONTAINER_STYLE}\n            >\n                <div className='emoji-picker__container'>\n                    {categoryComponents}\n                </div>\n            </div>\n        );\n    }\n    emojiCurrentResultsItems = (categoryIndex, emojis, currentEmojiLoadedCount) => {\n        const {cursor, emojisToShow} = this.state;\n        let numEmojisLoaded = currentEmojiLoadedCount;\n\n        return emojis.map((emoji, emojiIndex) => {\n            numEmojisLoaded++;\n\n            // set ref on first unloaded emoji\n            let ref;\n            if (numEmojisLoaded === emojisToShow) {\n                ref = this.lastVisibleEmojiRef;\n            }\n            if (numEmojisLoaded >= emojisToShow) {\n                return (\n                    <div\n                        key={numEmojisLoaded}\n                        className='emoji-picker__item'\n                        ref={ref}\n                    >\n                        <img\n                            alt={'emoji image'}\n                            src={imgTrans}\n                            className='emojisprite'\n                        />\n                    </div>\n                );\n            }\n            return (\n                <EmojiPickerItem\n                    key={emoji.filename + ':' + emojiIndex}\n                    emoji={emoji}\n                    onItemOver={this.handleItemOver}\n                    onItemClick={this.handleItemClick}\n                    onItemUnmount={emoji}\n                    category={emoji.category}\n                    isSelected={cursor[0] === (categoryIndex) && cursor[1] === emojiIndex}\n                    categoryIndex={categoryIndex}\n                    emojiIndex={emojiIndex}\n                    containerRef={this.emojiPickerContainer}\n                    containerTop={this.state.divTopOffset}\n                    containerBottom={this.state.divTopOffset + this.divHeight}\n                />\n            );\n        });\n    };\n\n    updateCategoryOffset(categoryName, offset) {\n        if (categoryName !== CATEGORY_SEARCH_RESULTS) {\n            this.setState((state) => ({\n                categories: {\n                    ...state.categories,\n                    [categoryName]: {\n                        ...state.categories[categoryName],\n                        offset,\n                    },\n                }}));\n        }\n    }\n\n    render() {\n        return (\n            <div\n                className='emoji-picker__inner'\n                role='application'\n            >\n                <div\n                    aria-live='assertive'\n                    className='sr-only'\n                >\n                    <FormattedMessage\n                        id='emoji_picker_item.emoji_aria_label'\n                        defaultMessage='{emojiName} emoji'\n                        values={{\n                            emojiName: this.getCurrentEmojiName(),\n                        }}\n                    />\n                </div>\n                {this.emojiSearch()}\n                {this.emojiCategories()}\n                {this.emojiCurrentResults()}\n                <EmojiPickerPreview emoji={this.getCurrentEmojiByCursor(this.state.cursor)}/>\n            </div>\n        );\n    }\n}\n","// Copyright (c) 2015-present Mattermost, Inc. All Rights Reserved.\n// See LICENSE.txt for license information.\n\nimport {connect} from 'react-redux';\nimport {bindActionCreators} from 'redux';\n\nimport {getCustomEmojis, searchCustomEmojis} from 'mattermost-redux/actions/emojis';\n\nimport {incrementEmojiPickerPage} from 'actions/emoji_actions.jsx';\nimport {getEmojiMap, getRecentEmojis} from 'selectors/emojis';\n\nimport EmojiPicker from './emoji_picker.jsx';\n\nfunction mapStateToProps(state) {\n    return {\n        customEmojisEnabled: state.entities.general.config.EnableCustomEmoji === 'true',\n        customEmojiPage: state.views.emoji.emojiPickerCustomPage,\n        emojiMap: getEmojiMap(state),\n        recentEmojis: getRecentEmojis(state),\n    };\n}\n\nfunction mapDispatchToProps(dispatch) {\n    return {\n        actions: bindActionCreators({\n            getCustomEmojis,\n            searchCustomEmojis,\n            incrementEmojiPickerPage,\n        }, dispatch),\n    };\n}\n\nexport default connect(mapStateToProps, mapDispatchToProps)(EmojiPicker);\n","// Copyright (c) 2015-present Mattermost, Inc. All Rights Reserved.\n// See LICENSE.txt for license information.\n\nimport PropTypes from 'prop-types';\nimport React, {PureComponent} from 'react';\nimport {Tab, Tabs} from 'react-bootstrap';\n\nimport GifPicker from 'components/gif_picker/gif_picker.jsx';\nimport EmojiIcon from 'components/svg/emoji_icon';\nimport GfycatIcon from 'components/svg/gfycat_icon';\n\nimport EmojiPickerHeader from './components/emoji_picker_header';\n\nimport EmojiPicker from './';\n\nexport default class EmojiPickerTabs extends PureComponent {\n    static propTypes = {\n        style: PropTypes.object,\n        rightOffset: PropTypes.number,\n        topOffset: PropTypes.number,\n        placement: PropTypes.oneOf(['top', 'bottom', 'left']),\n        customEmojis: PropTypes.object,\n        onEmojiClose: PropTypes.func.isRequired,\n        onEmojiClick: PropTypes.func.isRequired,\n        onGifClick: PropTypes.func,\n        enableGifPicker: PropTypes.bool,\n    };\n\n    static defaultProps = {\n        rightOffset: 0,\n        topOffset: 0,\n    };\n\n    constructor(props) {\n        super(props);\n\n        this.state = {\n            emojiTabVisible: true,\n        };\n    }\n\n    handleEnterEmojiTab = () => {\n        this.setState({\n            emojiTabVisible: true,\n        });\n    };\n\n    handleExitEmojiTab = () => {\n        this.setState({\n            emojiTabVisible: false,\n        });\n    };\n\n    handleEmojiPickerClose = () => {\n        this.props.onEmojiClose();\n    }\n\n    render() {\n        let pickerStyle;\n        if (this.props.style && !(this.props.style.left === 0 && this.props.style.top === 0)) {\n            if (this.props.placement === 'top' || this.props.placement === 'bottom') {\n                // Only take the top/bottom position passed by React Bootstrap since we want to be right-aligned\n                pickerStyle = {\n                    top: this.props.style.top,\n                    bottom: this.props.style.bottom,\n                    right: this.props.rightOffset,\n                };\n            } else {\n                pickerStyle = {...this.props.style};\n            }\n\n            if (pickerStyle.top) {\n                pickerStyle.top += this.props.topOffset;\n            }\n        }\n\n        let pickerClass = 'emoji-picker';\n        if (this.props.placement === 'bottom') {\n            pickerClass += ' bottom';\n        }\n\n        if (this.props.enableGifPicker && typeof this.props.onGifClick != 'undefined') {\n            return (\n                <Tabs\n                    defaultActiveKey={1}\n                    id='emoji-picker-tabs'\n                    style={pickerStyle}\n                    className={pickerClass}\n                    justified={true}\n                >\n                    <EmojiPickerHeader handleEmojiPickerClose={this.handleEmojiPickerClose}/>\n                    <Tab\n                        eventKey={1}\n                        onEnter={this.handleEnterEmojiTab}\n                        onExit={this.handleExitEmojiTab}\n                        title={<EmojiIcon/>}\n                    >\n                        <EmojiPicker\n                            style={this.props.style}\n                            onEmojiClose={this.props.onEmojiClose}\n                            onEmojiClick={this.props.onEmojiClick}\n                            customEmojis={this.props.customEmojis}\n                            visible={this.state.emojiTabVisible}\n                        />\n                    </Tab>\n                    <Tab\n                        eventKey={2}\n                        title={<GfycatIcon/>}\n                        mountOnEnter={true}\n                        unmountOnExit={true}\n                    >\n                        <GifPicker\n                            onGifClick={this.props.onGifClick}\n                        />\n                    </Tab>\n                </Tabs>\n            );\n        }\n        return (\n            <div\n                id='emojiPicker'\n                style={pickerStyle}\n                className={`a11y__popup ${pickerClass} emoji-picker--single`}\n            >\n                <EmojiPickerHeader handleEmojiPickerClose={this.handleEmojiPickerClose}/>\n                <EmojiPicker\n                    style={this.props.style}\n                    onEmojiClose={this.props.onEmojiClose}\n                    onEmojiClick={this.props.onEmojiClick}\n                    customEmojis={this.props.customEmojis}\n                />\n            </div>\n        );\n    }\n}\n","// Copyright (c) 2015-present Mattermost, Inc. All Rights Reserved.\n// See LICENSE.txt for license information.\n\nimport PropTypes from 'prop-types';\nimport React from 'react';\nimport {Overlay} from 'react-bootstrap';\n\nimport {popOverOverlayPosition} from 'utils/position_utils.jsx';\nimport {Constants} from 'utils/constants.jsx';\n\nimport EmojiPickerTabs from './emoji_picker_tabs.jsx';\n\nexport default class EmojiPickerOverlay extends React.PureComponent {\n    // An emoji picker in the center channel is contained within the post list, so it needs space\n    // above for the channel header and below for the post textbox\n    static CENTER_SPACE_REQUIRED_ABOVE = 476;\n    static CENTER_SPACE_REQUIRED_BELOW = 497;\n\n    // An emoji picker in the RHS isn't constrained by the RHS, so it just needs space to fit\n    // the emoji picker itself\n    static RHS_SPACE_REQUIRED_ABOVE = 420;\n    static RHS_SPACE_REQUIRED_BELOW = 420;\n\n    static propTypes = {\n        show: PropTypes.bool.isRequired,\n        container: PropTypes.func,\n        target: PropTypes.func.isRequired,\n        onEmojiClick: PropTypes.func.isRequired,\n        onGifClick: PropTypes.func,\n        onHide: PropTypes.func.isRequired,\n        topOffset: PropTypes.number,\n        spaceRequiredAbove: PropTypes.number,\n        spaceRequiredBelow: PropTypes.number,\n        enableGifPicker: PropTypes.bool,\n    };\n\n    // Reasonable defaults calculated from from the center channel\n    static defaultProps = {\n        spaceRequiredAbove: EmojiPickerOverlay.CENTER_SPACE_REQUIRED_ABOVE,\n        spaceRequiredBelow: EmojiPickerOverlay.CENTER_SPACE_REQUIRED_BELOW,\n        enableGifPicker: false,\n    };\n\n    constructor(props) {\n        super(props);\n\n        this.state = {\n            placement: 'top',\n            rightOffset: Constants.DEFAULT_EMOJI_PICKER_RIGHT_OFFSET,\n        };\n    }\n\n    UNSAFE_componentWillUpdate(nextProps) { // eslint-disable-line camelcase\n        if (nextProps.show && !this.props.show) {\n            const targetBounds = nextProps.target().getBoundingClientRect();\n            const placement = popOverOverlayPosition(targetBounds, window.innerHeight, {above: nextProps.spaceRequiredAbove, below: nextProps.spaceRequiredBelow});\n\n            this.setState({placement, rightOffset: this.emojiPickerPosition()});\n        }\n    }\n\n    emojiPickerPosition() {\n        const emojiTrigger = this.props.target();\n        let rightOffset = Constants.DEFAULT_EMOJI_PICKER_RIGHT_OFFSET;\n        if (emojiTrigger) {\n            rightOffset = window.innerWidth - emojiTrigger.getBoundingClientRect().left - Constants.DEFAULT_EMOJI_PICKER_LEFT_OFFSET;\n\n            if (rightOffset < Constants.DEFAULT_EMOJI_PICKER_RIGHT_OFFSET) {\n                rightOffset = Constants.DEFAULT_EMOJI_PICKER_RIGHT_OFFSET;\n            }\n        }\n\n        return rightOffset;\n    }\n\n    render() {\n        return (\n            <Overlay\n                show={this.props.show}\n                placement={this.state.placement}\n                rootClose={true}\n                container={this.props.container}\n                onHide={this.props.onHide}\n                target={this.props.target}\n                animation={false}\n            >\n                <EmojiPickerTabs\n                    enableGifPicker={this.props.enableGifPicker}\n                    onEmojiClose={this.props.onHide}\n                    onEmojiClick={this.props.onEmojiClick}\n                    onGifClick={this.props.onGifClick}\n                    rightOffset={this.state.rightOffset}\n                    topOffset={this.props.topOffset}\n                />\n            </Overlay>\n        );\n    }\n}\n","// Copyright (c) 2015-present Mattermost, Inc. All Rights Reserved.\n// See LICENSE.txt for license information.\n\nimport PropTypes from 'prop-types';\nimport React from 'react';\nimport {intlShape} from 'react-intl';\n\nimport {Posts} from 'mattermost-redux/constants';\n\nimport {t} from 'utils/i18n';\n\nimport Markdown from 'components/markdown';\n\nconst typeMessage = {\n    [Posts.POST_TYPES.ADD_TO_CHANNEL]: {\n        id: t('last_users_message.added_to_channel.type'),\n        defaultMessage: 'were **added to the channel** by {actor}.',\n    },\n    [Posts.POST_TYPES.JOIN_CHANNEL]: {\n        id: t('last_users_message.joined_channel.type'),\n        defaultMessage: '**joined the channel**.',\n    },\n    [Posts.POST_TYPES.LEAVE_CHANNEL]: {\n        id: t('last_users_message.left_channel.type'),\n        defaultMessage: '**left the channel**.',\n    },\n    [Posts.POST_TYPES.REMOVE_FROM_CHANNEL]: {\n        id: t('last_users_message.removed_from_channel.type'),\n        defaultMessage: 'were **removed from the channel**.',\n    },\n    [Posts.POST_TYPES.ADD_TO_TEAM]: {\n        id: t('last_users_message.added_to_team.type'),\n        defaultMessage: 'were **added to the team** by {actor}.',\n    },\n    [Posts.POST_TYPES.JOIN_TEAM]: {\n        id: t('last_users_message.joined_team.type'),\n        defaultMessage: '**joined the team**.',\n    },\n    [Posts.POST_TYPES.LEAVE_TEAM]: {\n        id: t('last_users_message.left_team.type'),\n        defaultMessage: '**left the team**.',\n    },\n    [Posts.POST_TYPES.REMOVE_FROM_TEAM]: {\n        id: t('last_users_message.removed_from_team.type'),\n        defaultMessage: 'were **removed from the team**.',\n    },\n};\n\nexport default class LastUsers extends React.PureComponent {\n    static propTypes = {\n        actor: PropTypes.string,\n        expandedLocale: PropTypes.object.isRequired,\n        formatOptions: PropTypes.object.isRequired,\n        postType: PropTypes.string.isRequired,\n        usernames: PropTypes.array.isRequired,\n    };\n\n    static contextTypes = {\n        intl: intlShape,\n    };\n\n    constructor(props) {\n        super(props);\n\n        this.state = {\n            expand: false,\n        };\n    }\n\n    handleOnClick = (e) => {\n        e.preventDefault();\n\n        this.setState({expand: true});\n    }\n\n    renderMessage = (formattedMessage) => {\n        return (\n            <Markdown\n                message={formattedMessage}\n                options={this.props.formatOptions}\n            />\n        );\n    }\n\n    render() {\n        const {formatMessage} = this.context.intl;\n        const {expand} = this.state;\n        const {\n            actor,\n            expandedLocale,\n            postType,\n            usernames,\n        } = this.props;\n\n        const firstUser = usernames[0];\n        const lastIndex = usernames.length - 1;\n        const lastUser = usernames[lastIndex];\n\n        if (expand) {\n            const formattedMessage = formatMessage(expandedLocale, {\n                users: usernames.slice(0, lastIndex).join(', '),\n                lastUser,\n                actor,\n            });\n\n            return this.renderMessage(formattedMessage);\n        }\n\n        const firstUserMessage = formatMessage(\n            {id: 'last_users_message.first', defaultMessage: '{firstUser} and '},\n            {firstUser}\n        );\n\n        const otherUsersMessage = formatMessage(\n            {id: 'last_users_message.others', defaultMessage: '{numOthers} others '},\n            {numOthers: lastIndex}\n        );\n\n        const actorMessage = formatMessage(\n            {id: typeMessage[postType].id, defaultMessage: typeMessage[postType].defaultMessage},\n            {actor}\n        );\n\n        return (\n            <span>\n                {this.renderMessage(firstUserMessage)}\n                <a onClick={this.handleOnClick}>\n                    {otherUsersMessage}\n                </a>\n                {this.renderMessage(actorMessage)}\n            </span>\n        );\n    }\n}\n","// Copyright (c) 2015-present Mattermost, Inc. All Rights Reserved.\n// See LICENSE.txt for license information.\n\nimport PropTypes from 'prop-types';\nimport React from 'react';\nimport {intlShape} from 'react-intl';\n\nimport {Posts} from 'mattermost-redux/constants';\n\nimport {t} from 'utils/i18n';\n\nimport Markdown from 'components/markdown';\n\nimport LastUsers from './last_users';\n\nconst {\n    JOIN_CHANNEL, ADD_TO_CHANNEL, REMOVE_FROM_CHANNEL, LEAVE_CHANNEL,\n    JOIN_TEAM, ADD_TO_TEAM, REMOVE_FROM_TEAM, LEAVE_TEAM,\n} = Posts.POST_TYPES;\n\nconst postTypeMessage = {\n    [JOIN_CHANNEL]: {\n        one: {\n            id: t('combined_system_message.joined_channel.one'),\n            defaultMessage: '{firstUser} **joined the channel**.',\n        },\n        one_you: {\n            id: t('combined_system_message.joined_channel.one_you'),\n            defaultMessage: 'You **joined the channel**.',\n        },\n        two: {\n            id: t('combined_system_message.joined_channel.two'),\n            defaultMessage: '{firstUser} and {secondUser} **joined the channel**.',\n        },\n        many_expanded: {\n            id: t('combined_system_message.joined_channel.many_expanded'),\n            defaultMessage: '{users} and {lastUser} **joined the channel**.',\n        },\n    },\n    [ADD_TO_CHANNEL]: {\n        one: {\n            id: t('combined_system_message.added_to_channel.one'),\n            defaultMessage: '{firstUser} **added to the channel** by {actor}.',\n        },\n        one_you: {\n            id: t('combined_system_message.added_to_channel.one_you'),\n            defaultMessage: 'You were **added to the channel** by {actor}.',\n        },\n        two: {\n            id: t('combined_system_message.added_to_channel.two'),\n            defaultMessage: '{firstUser} and {secondUser} **added to the channel** by {actor}.',\n        },\n        many_expanded: {\n            id: t('combined_system_message.added_to_channel.many_expanded'),\n            defaultMessage: '{users} and {lastUser} were **added to the channel** by {actor}.',\n        },\n    },\n    [REMOVE_FROM_CHANNEL]: {\n        one: {\n            id: t('combined_system_message.removed_from_channel.one'),\n            defaultMessage: '{firstUser} was **removed from the channel**.',\n        },\n        one_you: {\n            id: t('combined_system_message.removed_from_channel.one_you'),\n            defaultMessage: 'You were **removed from the channel**.',\n        },\n        two: {\n            id: t('combined_system_message.removed_from_channel.two'),\n            defaultMessage: '{firstUser} and {secondUser} were **removed from the channel**.',\n        },\n        many_expanded: {\n            id: t('combined_system_message.removed_from_channel.many_expanded'),\n            defaultMessage: '{users} and {lastUser} were **removed from the channel**.',\n        },\n    },\n    [LEAVE_CHANNEL]: {\n        one: {\n            id: t('combined_system_message.left_channel.one'),\n            defaultMessage: '{firstUser} **left the channel**.',\n        },\n        one_you: {\n            id: t('combined_system_message.left_channel.one_you'),\n            defaultMessage: 'You **left the channel**.',\n        },\n        two: {\n            id: t('combined_system_message.left_channel.two'),\n            defaultMessage: '{firstUser} and {secondUser} **left the channel**.',\n        },\n        many_expanded: {\n            id: t('combined_system_message.left_channel.many_expanded'),\n            defaultMessage: '{users} and {lastUser} **left the channel**.',\n        },\n    },\n    [JOIN_TEAM]: {\n        one: {\n            id: t('combined_system_message.joined_team.one'),\n            defaultMessage: '{firstUser} **joined the team**.',\n        },\n        one_you: {\n            id: t('combined_system_message.joined_team.one_you'),\n            defaultMessage: 'You **joined the team**.',\n        },\n        two: {\n            id: t('combined_system_message.joined_team.two'),\n            defaultMessage: '{firstUser} and {secondUser} **joined the team**.',\n        },\n        many_expanded: {\n            id: t('combined_system_message.joined_team.many_expanded'),\n            defaultMessage: '{users} and {lastUser} **joined the team**.',\n        },\n    },\n    [ADD_TO_TEAM]: {\n        one: {\n            id: t('combined_system_message.added_to_team.one'),\n            defaultMessage: '{firstUser} **added to the team** by {actor}.',\n        },\n        one_you: {\n            id: t('combined_system_message.added_to_team.one_you'),\n            defaultMessage: 'You were **added to the team** by {actor}.',\n        },\n        two: {\n            id: t('combined_system_message.added_to_team.two'),\n            defaultMessage: '{firstUser} and {secondUser} **added to the team** by {actor}.',\n        },\n        many_expanded: {\n            id: t('combined_system_message.added_to_team.many_expanded'),\n            defaultMessage: '{users} and {lastUser} were **added to the team** by {actor}.',\n        },\n    },\n    [REMOVE_FROM_TEAM]: {\n        one: {\n            id: t('combined_system_message.removed_from_team.one'),\n            defaultMessage: '{firstUser} was **removed from the team**.',\n        },\n        one_you: {\n            id: t('combined_system_message.removed_from_team.one_you'),\n            defaultMessage: 'You were **removed from the team**.',\n        },\n        two: {\n            id: t('combined_system_message.removed_from_team.two'),\n            defaultMessage: '{firstUser} and {secondUser} were **removed from the team**.',\n        },\n        many_expanded: {\n            id: t('combined_system_message.removed_from_team.many_expanded'),\n            defaultMessage: '{users} and {lastUser} were **removed from the team**.',\n        },\n    },\n    [LEAVE_TEAM]: {\n        one: {\n            id: t('combined_system_message.left_team.one'),\n            defaultMessage: '{firstUser} **left the team**.',\n        },\n        one_you: {\n            id: t('combined_system_message.left_team.one_you'),\n            defaultMessage: 'You **left the team**.',\n        },\n        two: {\n            id: t('combined_system_message.left_team.two'),\n            defaultMessage: '{firstUser} and {secondUser} **left the team**.',\n        },\n        many_expanded: {\n            id: t('combined_system_message.left_team.many_expanded'),\n            defaultMessage: '{users} and {lastUser} **left the team**.',\n        },\n    },\n};\n\nexport default class CombinedSystemMessage extends React.PureComponent {\n    static propTypes = {\n        allUserIds: PropTypes.array.isRequired,\n        allUsernames: PropTypes.array.isRequired,\n        currentUserId: PropTypes.string.isRequired,\n        currentUsername: PropTypes.string.isRequired,\n        messageData: PropTypes.array.isRequired,\n        showJoinLeave: PropTypes.bool.isRequired,\n        userProfiles: PropTypes.array.isRequired,\n        actions: PropTypes.shape({\n            getMissingProfilesByIds: PropTypes.func.isRequired,\n            getMissingProfilesByUsernames: PropTypes.func.isRequired,\n        }).isRequired,\n    };\n\n    static defaultProps = {\n        allUserIds: [],\n        allUsernames: [],\n    };\n\n    static contextTypes = {\n        intl: intlShape,\n    };\n\n    componentDidMount() {\n        this.loadUserProfiles(this.props.allUserIds, this.props.allUsernames);\n    }\n\n    componentDidUpdate(prevProps) {\n        const {allUserIds, allUsernames} = this.props;\n        if (allUserIds !== prevProps.allUserIds || allUsernames !== prevProps.allUsernames) {\n            this.loadUserProfiles(allUserIds, allUsernames);\n        }\n    }\n\n    loadUserProfiles = (allUserIds, allUsernames) => {\n        if (allUserIds.length > 0) {\n            this.props.actions.getMissingProfilesByIds(allUserIds);\n        }\n\n        if (allUsernames.length > 0) {\n            this.props.actions.getMissingProfilesByUsernames(allUsernames);\n        }\n    }\n\n    getAllUsernames = () => {\n        const {\n            allUserIds,\n            allUsernames,\n            currentUserId,\n            currentUsername,\n            userProfiles,\n        } = this.props;\n        const {formatMessage} = this.context.intl;\n        const usernames = userProfiles.reduce((acc, user) => {\n            acc[user.id] = user.username;\n            acc[user.username] = user.username;\n            return acc;\n        }, {});\n\n        const currentUserDisplayName = formatMessage({id: t('combined_system_message.you'), defaultMessage: 'You'});\n        if (allUserIds.includes(currentUserId)) {\n            usernames[currentUserId] = currentUserDisplayName;\n        } else if (allUsernames.includes(currentUsername)) {\n            usernames[currentUsername] = currentUserDisplayName;\n        }\n\n        return usernames;\n    }\n\n    getUsernamesByIds = (userIds = []) => {\n        const {currentUserId, currentUsername} = this.props;\n        const allUsernames = this.getAllUsernames();\n\n        const {formatMessage} = this.context.intl;\n        const someone = formatMessage({id: t('channel_loader.someone'), defaultMessage: 'Someone'});\n\n        const usernames = userIds.\n            filter((userId) => {\n                return userId !== currentUserId && userId !== currentUsername;\n            }).\n            map((userId) => {\n                return allUsernames[userId] ? `@${allUsernames[userId]}` : someone;\n            }).filter((username) => {\n                return username && username !== '';\n            });\n\n        if (userIds.includes(currentUserId)) {\n            usernames.unshift(allUsernames[currentUserId]);\n        } else if (userIds.includes(currentUsername)) {\n            usernames.unshift(allUsernames[currentUsername]);\n        }\n\n        return usernames;\n    }\n\n    renderFormattedMessage(postType, userIds, actorId) {\n        const {formatMessage} = this.context.intl;\n        const {currentUserId, currentUsername} = this.props;\n        const usernames = this.getUsernamesByIds(userIds);\n        let actor = actorId ? this.getUsernamesByIds([actorId])[0] : '';\n        if (actor && (actorId === currentUserId || actorId === currentUsername)) {\n            actor = actor.toLowerCase();\n        }\n\n        const firstUser = usernames[0];\n        const secondUser = usernames[1];\n        const numOthers = usernames.length - 1;\n\n        const options = {\n            atMentions: true,\n            mentionKeys: [{key: firstUser}, {key: secondUser}, {key: actor}],\n            mentionHighlight: false,\n            singleline: true,\n        };\n\n        if (numOthers > 1) {\n            return (\n                <LastUsers\n                    actor={actor}\n                    expandedLocale={postTypeMessage[postType].many_expanded}\n                    formatOptions={options}\n                    postType={postType}\n                    usernames={usernames}\n                />\n            );\n        }\n\n        let localeHolder;\n        if (numOthers === 0) {\n            localeHolder = postTypeMessage[postType].one;\n\n            if (\n                (userIds[0] === this.props.currentUserId || userIds[0] === this.props.currentUsername) &&\n                postTypeMessage[postType].one_you\n            ) {\n                localeHolder = postTypeMessage[postType].one_you;\n            }\n        } else if (numOthers === 1) {\n            localeHolder = postTypeMessage[postType].two;\n        }\n\n        const formattedMessage = formatMessage(localeHolder, {firstUser, secondUser, actor});\n\n        return (\n            <Markdown\n                message={formattedMessage}\n                options={options}\n            />\n        );\n    }\n\n    renderMessage(postType, userIds, actorId) {\n        return (\n            <React.Fragment key={postType + actorId}>\n                {this.renderFormattedMessage(postType, userIds, actorId)}\n                <br/>\n            </React.Fragment>\n        );\n    }\n\n    render() {\n        const {\n            currentUserId,\n            messageData,\n        } = this.props;\n\n        const content = [];\n        const removedUserIds = [];\n        for (const message of messageData) {\n            const {\n                postType,\n                actorId,\n            } = message;\n            let userIds = message.userIds;\n\n            if (!this.props.showJoinLeave && actorId !== currentUserId) {\n                const affectsCurrentUser = userIds.indexOf(currentUserId) !== -1;\n\n                if (affectsCurrentUser) {\n                    // Only show the message that the current user was added, etc\n                    userIds = [currentUserId];\n                } else {\n                    // Not something the current user did or was affected by\n                    continue;\n                }\n            }\n\n            if (postType === REMOVE_FROM_CHANNEL) {\n                removedUserIds.push(...userIds);\n                continue;\n            }\n\n            content.push(this.renderMessage(postType, userIds, actorId));\n        }\n\n        if (removedUserIds.length > 0) {\n            const uniqueRemovedUserIds = removedUserIds.filter((id, index, arr) => arr.indexOf(id) === index);\n            content.push(this.renderMessage(REMOVE_FROM_CHANNEL, uniqueRemovedUserIds, currentUserId));\n        }\n\n        return (\n            <React.Fragment>\n                {content}\n            </React.Fragment>\n        );\n    }\n}\n","// Copyright (c) 2015-present Mattermost, Inc. All Rights Reserved.\n// See LICENSE.txt for license information.\n\nimport {connect} from 'react-redux';\nimport {bindActionCreators} from 'redux';\n\nimport {getMissingProfilesByIds, getMissingProfilesByUsernames} from 'mattermost-redux/actions/users';\nimport {Preferences} from 'mattermost-redux/constants';\nimport {getBool} from 'mattermost-redux/selectors/entities/preferences';\nimport {getCurrentUser, makeGetProfilesByIdsAndUsernames} from 'mattermost-redux/selectors/entities/users';\n\nimport CombinedSystemMessage from './combined_system_message.jsx';\n\nfunction makeMapStateToProps() {\n    const getProfilesByIdsAndUsernames = makeGetProfilesByIdsAndUsernames();\n\n    return (state, ownProps) => {\n        const currentUser = getCurrentUser(state);\n        const {allUserIds, allUsernames} = ownProps;\n\n        return {\n            currentUserId: currentUser.id,\n            currentUsername: currentUser.username,\n            showJoinLeave: getBool(state, Preferences.CATEGORY_ADVANCED_SETTINGS, Preferences.ADVANCED_FILTER_JOIN_LEAVE, true),\n            userProfiles: getProfilesByIdsAndUsernames(state, {allUserIds, allUsernames}),\n        };\n    };\n}\n\nfunction mapDispatchToProps(dispatch) {\n    return {\n        actions: bindActionCreators({\n            getMissingProfilesByIds,\n            getMissingProfilesByUsernames,\n        }, dispatch),\n    };\n}\n\nexport default connect(makeMapStateToProps, mapDispatchToProps)(CombinedSystemMessage);\n","// Copyright (c) 2015-present Mattermost, Inc. All Rights Reserved.\n// See LICENSE.txt for license information.\n\nimport PropTypes from 'prop-types';\nimport React from 'react';\nimport {FormattedMessage} from 'react-intl';\n\nimport {sendAddToChannelEphemeralPost} from 'actions/global_actions.jsx';\nimport {Constants} from 'utils/constants.jsx';\nimport {t} from 'utils/i18n';\nimport AtMention from 'components/at_mention';\n\nexport default class PostAddChannelMember extends React.PureComponent {\n    static propTypes = {\n\n        /*\n        * Current user\n        */\n        currentUser: PropTypes.object.isRequired,\n\n        /*\n        * Type of current channel\n        */\n        channelType: PropTypes.string.isRequired,\n\n        /*\n        * ID of ephemeral post (at-mention's \"add to channel\" post)\n        */\n        postId: PropTypes.string.isRequired,\n\n        /*\n        * Ephemeral post (at-mention's \"add to channel\" post)\n        */\n        post: PropTypes.object.isRequired,\n\n        /*\n        * user ids to add to channel\n        */\n        userIds: PropTypes.array.isRequired,\n\n        /*\n        * usernames to add to channel\n        */\n        usernames: PropTypes.array.isRequired,\n\n        noGroupsUsernames: PropTypes.array.isRequired,\n\n        actions: PropTypes.shape({\n\n            /*\n            * Function to add members to channel\n            */\n            addChannelMember: PropTypes.func.isRequired,\n\n            /*\n            * Function to remove post (ephemeral)\n            */\n            removePost: PropTypes.func.isRequired,\n        }).isRequired,\n    }\n\n    handleAddChannelMember = () => {\n        const {currentUser, post, userIds, usernames} = this.props;\n\n        if (post && post.channel_id) {\n            let createAt = post.create_at;\n            userIds.forEach((userId, index) => {\n                createAt++;\n                this.props.actions.addChannelMember(post.channel_id, userId);\n                sendAddToChannelEphemeralPost(currentUser, usernames[index], userId, post.channel_id, post.root_id, createAt);\n            });\n\n            this.props.actions.removePost(post);\n        }\n    }\n\n    generateAtMentions(usernames = []) {\n        if (usernames.length === 1) {\n            return (\n                <AtMention mentionName={usernames[0]}/>\n            );\n        } else if (usernames.length > 1) {\n            function andSeparator(key) {\n                return (\n                    <FormattedMessage\n                        key={key}\n                        id={'post_body.check_for_out_of_channel_mentions.link.and'}\n                        defaultMessage={' and '}\n                    />\n                );\n            }\n\n            function commaSeparator(key) {\n                return <span key={key}>{', '}</span>;\n            }\n\n            return (\n                <span>\n                    {\n                        usernames.map((username) => {\n                            return (\n                                <AtMention\n                                    key={username}\n                                    mentionName={username}\n                                />\n                            );\n                        }).reduce((acc, el, idx, arr) => {\n                            if (idx === 0) {\n                                return [el];\n                            } else if (idx === arr.length - 1) {\n                                return [...acc, andSeparator(idx), el];\n                            }\n\n                            return [...acc, commaSeparator(idx), el];\n                        }, [])\n                    }\n                </span>\n            );\n        }\n\n        return '';\n    }\n\n    render() {\n        const {channelType, postId, usernames, noGroupsUsernames} = this.props;\n        if (!postId || !channelType) {\n            return null;\n        }\n\n        let linkId;\n        let linkText;\n        if (channelType === Constants.PRIVATE_CHANNEL) {\n            linkId = t('post_body.check_for_out_of_channel_mentions.link.private');\n            linkText = 'add them to this private channel';\n        } else if (channelType === Constants.OPEN_CHANNEL) {\n            linkId = t('post_body.check_for_out_of_channel_mentions.link.public');\n            linkText = 'add them to the channel';\n        }\n\n        let outOfChannelMessageID;\n        let outOfChannelMessageText;\n        const outOfChannelAtMentions = this.generateAtMentions(usernames);\n        if (usernames.length === 1) {\n            outOfChannelMessageID = t('post_body.check_for_out_of_channel_mentions.message.one');\n            outOfChannelMessageText = 'did not get notified by this mention because they are not in the channel. Would you like to ';\n        } else if (usernames.length > 1) {\n            outOfChannelMessageID = t('post_body.check_for_out_of_channel_mentions.message.multiple');\n            outOfChannelMessageText = 'did not get notified by this mention because they are not in the channel. Would you like to ';\n        }\n\n        let outOfGroupsMessageID;\n        let outOfGroupsMessageText;\n        const outOfGroupsAtMentions = this.generateAtMentions(noGroupsUsernames);\n        if (noGroupsUsernames.length) {\n            outOfGroupsMessageID = t('post_body.check_for_out_of_channel_groups_mentions.message');\n            outOfGroupsMessageText = 'did not get notified by this mention because they are not in the channel. They cannot be added to the channel because they are not a member of the linked groups. To add them to this channel, they must be added to the linked groups.';\n        }\n\n        var outOfChannelMessage = null;\n        var outOfGroupsMessage = null;\n\n        if (usernames.length) {\n            outOfChannelMessage = (\n                <p>\n                    {outOfChannelAtMentions}\n                    {' '}\n                    <FormattedMessage\n                        id={outOfChannelMessageID}\n                        defaultMessage={outOfChannelMessageText}\n                    />\n                    <a\n                        id='add_channel_member_link'\n                        onClick={this.handleAddChannelMember}\n                    >\n                        <FormattedMessage\n                            id={linkId}\n                            defaultMessage={linkText}\n                        />\n                    </a>\n                    <FormattedMessage\n                        id={'post_body.check_for_out_of_channel_mentions.message_last'}\n                        defaultMessage={'? They will have access to all message history.'}\n                    />\n                </p>\n            );\n        }\n\n        if (noGroupsUsernames.length) {\n            outOfGroupsMessage = (\n                <p>\n                    {outOfGroupsAtMentions}\n                    {' '}\n                    <FormattedMessage\n                        id={outOfGroupsMessageID}\n                        defaultMessage={outOfGroupsMessageText}\n                    />\n                </p>\n            );\n        }\n\n        return (\n            <>\n                {outOfChannelMessage}\n                {outOfGroupsMessage}\n            </>\n        );\n    }\n}\n","// Copyright (c) 2015-present Mattermost, Inc. All Rights Reserved.\n// See LICENSE.txt for license information.\n\nimport {bindActionCreators} from 'redux';\nimport {connect} from 'react-redux';\nimport {addChannelMember} from 'mattermost-redux/actions/channels';\nimport {removePost} from 'mattermost-redux/actions/posts';\nimport {getPost} from 'mattermost-redux/selectors/entities/posts';\nimport {getChannel} from 'mattermost-redux/selectors/entities/channels';\nimport {getCurrentUser} from 'mattermost-redux/selectors/entities/users';\n\nimport PostAddChannelMember from './post_add_channel_member.jsx';\n\nfunction mapStateToProps(state, ownProps) {\n    const post = getPost(state, ownProps.postId) || {};\n    let channelType = '';\n    if (post && post.channel_id) {\n        const channel = getChannel(state, post.channel_id);\n        if (channel && channel.type) {\n            channelType = channel.type;\n        }\n    }\n\n    return {\n        channelType,\n        currentUser: getCurrentUser(state),\n        post,\n    };\n}\n\nfunction mapDispatchToProps(dispatch) {\n    return {\n        actions: bindActionCreators({\n            addChannelMember,\n            removePost,\n        }, dispatch),\n    };\n}\n\nexport default connect(mapStateToProps, mapDispatchToProps)(PostAddChannelMember);\n","// Copyright (c) 2015-present Mattermost, Inc. All Rights Reserved.\n// See LICENSE.txt for license information.\n\nimport React from 'react';\nimport {FormattedMessage} from 'react-intl';\n\nimport {General, Posts} from 'mattermost-redux/constants';\n\nimport {canManageMembers} from 'utils/channel_utils.jsx';\nimport * as Utils from 'utils/utils.jsx';\n\nimport Markdown from 'components/markdown';\nimport CombinedSystemMessage from 'components/post_view/combined_system_message';\nimport PostAddChannelMember from 'components/post_view/post_add_channel_member';\n\nfunction renderUsername(value) {\n    const username = (value[0] === '@') ? value : `@${value}`;\n\n    const options = {\n        markdown: false,\n    };\n\n    return renderFormattedText(username, options);\n}\n\nfunction renderFormattedText(value, options) {\n    return (\n        <Markdown\n            message={value}\n            options={options}\n        />\n    );\n}\n\nfunction renderJoinChannelMessage(post) {\n    const username = renderUsername(post.props.username);\n\n    return (\n        <FormattedMessage\n            id='api.channel.join_channel.post_and_forget'\n            defaultMessage='{username} joined the channel.'\n            values={{username}}\n        />\n    );\n}\n\nfunction renderLeaveChannelMessage(post) {\n    const username = renderUsername(post.props.username);\n\n    return (\n        <FormattedMessage\n            id='api.channel.leave.left'\n            defaultMessage='{username} has left the channel.'\n            values={{username}}\n        />\n    );\n}\n\nfunction renderAddToChannelMessage(post) {\n    const username = renderUsername(post.props.username);\n    const addedUsername = renderUsername(post.props.addedUsername);\n\n    return (\n        <FormattedMessage\n            id='api.channel.add_member.added'\n            defaultMessage='{addedUsername} added to the channel by {username}.'\n            values={{\n                username,\n                addedUsername,\n            }}\n        />\n    );\n}\n\nfunction renderRemoveFromChannelMessage(post) {\n    const removedUsername = renderUsername(post.props.removedUsername);\n\n    return (\n        <FormattedMessage\n            id='api.channel.remove_member.removed'\n            defaultMessage='{removedUsername} was removed from the channel'\n            values={{\n                removedUsername,\n            }}\n        />\n    );\n}\n\nfunction renderJoinTeamMessage(post) {\n    const username = renderUsername(post.props.username);\n\n    return (\n        <FormattedMessage\n            id='api.team.join_team.post_and_forget'\n            defaultMessage='{username} joined the team.'\n            values={{username}}\n        />\n    );\n}\n\nfunction renderLeaveTeamMessage(post) {\n    const username = renderUsername(post.props.username);\n\n    return (\n        <FormattedMessage\n            id='api.team.leave.left'\n            defaultMessage='{username} left the team.'\n            values={{username}}\n        />\n    );\n}\n\nfunction renderAddToTeamMessage(post) {\n    const username = renderUsername(post.props.username);\n    const addedUsername = renderUsername(post.props.addedUsername);\n\n    return (\n        <FormattedMessage\n            id='api.team.add_member.added'\n            defaultMessage='{addedUsername} added to the team by {username}.'\n            values={{\n                username,\n                addedUsername,\n            }}\n        />\n    );\n}\n\nfunction renderRemoveFromTeamMessage(post) {\n    const removedUsername = renderUsername(post.props.username);\n\n    return (\n        <FormattedMessage\n            id='api.team.remove_user_from_team.removed'\n            defaultMessage='{removedUsername} was removed from the team.'\n            values={{\n                removedUsername,\n            }}\n        />\n    );\n}\n\nfunction renderHeaderChangeMessage(post) {\n    if (!post.props.username) {\n        return null;\n    }\n\n    const headerOptions = {\n        singleline: true,\n        channelNamesMap: post.props && post.props.channel_mentions,\n    };\n\n    const username = renderUsername(post.props.username);\n    const oldHeader = post.props.old_header ? renderFormattedText(post.props.old_header, headerOptions) : null;\n    const newHeader = post.props.new_header ? renderFormattedText(post.props.new_header, headerOptions) : null;\n\n    if (post.props.new_header) {\n        if (post.props.old_header) {\n            return (\n                <FormattedMessage\n                    id='api.channel.post_update_channel_header_message_and_forget.updated_from'\n                    defaultMessage='{username} updated the channel header from: {old} to: {new}'\n                    values={{\n                        username,\n                        old: oldHeader,\n                        new: newHeader,\n                    }}\n                />\n            );\n        }\n\n        return (\n            <FormattedMessage\n                id='api.channel.post_update_channel_header_message_and_forget.updated_to'\n                defaultMessage='{username} updated the channel header to: {new}'\n                values={{\n                    username,\n                    new: newHeader,\n                }}\n            />\n        );\n    } else if (post.props.old_header) {\n        return (\n            <FormattedMessage\n                id='api.channel.post_update_channel_header_message_and_forget.removed'\n                defaultMessage='{username} removed the channel header (was: {old})'\n                values={{\n                    username,\n                    old: oldHeader,\n                }}\n            />\n        );\n    }\n\n    return null;\n}\n\nfunction renderDisplayNameChangeMessage(post) {\n    if (!(post.props.username && post.props.old_displayname && post.props.new_displayname)) {\n        return null;\n    }\n\n    const username = renderUsername(post.props.username);\n    const oldDisplayName = post.props.old_displayname;\n    const newDisplayName = post.props.new_displayname;\n\n    return (\n        <FormattedMessage\n            id='api.channel.post_update_channel_displayname_message_and_forget.updated_from'\n            defaultMessage='{username} updated the channel display name from: {old} to: {new}'\n            values={{\n                username,\n                old: oldDisplayName,\n                new: newDisplayName,\n            }}\n        />\n    );\n}\n\nfunction renderConvertChannelToPrivateMessage(post) {\n    if (!(post.props.username)) {\n        return null;\n    }\n\n    const username = renderUsername(post.props.username);\n\n    return (\n        <FormattedMessage\n            id='api.channel.post_convert_channel_to_private.updated_from'\n            defaultMessage='{username} converted the channel from public to private'\n            values={{\n                username,\n            }}\n        />\n    );\n}\n\nfunction renderPurposeChangeMessage(post) {\n    if (!post.props.username) {\n        return null;\n    }\n\n    const username = renderUsername(post.props.username);\n    const oldPurpose = post.props.old_purpose;\n    const newPurpose = post.props.new_purpose;\n\n    if (post.props.new_purpose) {\n        if (post.props.old_purpose) {\n            return (\n                <FormattedMessage\n                    id='app.channel.post_update_channel_purpose_message.updated_from'\n                    defaultMessage='{username} updated the channel purpose from: {old} to: {new}'\n                    values={{\n                        username,\n                        old: oldPurpose,\n                        new: newPurpose,\n                    }}\n                />\n            );\n        }\n\n        return (\n            <FormattedMessage\n                id='app.channel.post_update_channel_purpose_message.updated_to'\n                defaultMessage='{username} updated the channel purpose to: {new}'\n                values={{\n                    username,\n                    new: newPurpose,\n                }}\n            />\n        );\n    } else if (post.props.old_purpose) {\n        return (\n            <FormattedMessage\n                id='app.channel.post_update_channel_purpose_message.removed'\n                defaultMessage='{username} removed the channel purpose (was: {old})'\n                values={{\n                    username,\n                    old: oldPurpose,\n                }}\n            />\n        );\n    }\n\n    return null;\n}\n\nfunction renderChannelDeletedMessage(post) {\n    if (!post.props.username) {\n        return null;\n    }\n\n    const username = renderUsername(post.props.username);\n\n    return (\n        <FormattedMessage\n            id='api.channel.delete_channel.archived'\n            defaultMessage='{username} has archived the channel.'\n            values={{username}}\n        />\n    );\n}\n\nfunction renderMeMessage(post) {\n    return renderFormattedText((post.props && post.props.message) ? post.props.message : post.message);\n}\n\nconst systemMessageRenderers = {\n    [Posts.POST_TYPES.JOIN_CHANNEL]: renderJoinChannelMessage,\n    [Posts.POST_TYPES.LEAVE_CHANNEL]: renderLeaveChannelMessage,\n    [Posts.POST_TYPES.ADD_TO_CHANNEL]: renderAddToChannelMessage,\n    [Posts.POST_TYPES.REMOVE_FROM_CHANNEL]: renderRemoveFromChannelMessage,\n    [Posts.POST_TYPES.JOIN_TEAM]: renderJoinTeamMessage,\n    [Posts.POST_TYPES.LEAVE_TEAM]: renderLeaveTeamMessage,\n    [Posts.POST_TYPES.ADD_TO_TEAM]: renderAddToTeamMessage,\n    [Posts.POST_TYPES.REMOVE_FROM_TEAM]: renderRemoveFromTeamMessage,\n    [Posts.POST_TYPES.HEADER_CHANGE]: renderHeaderChangeMessage,\n    [Posts.POST_TYPES.DISPLAYNAME_CHANGE]: renderDisplayNameChangeMessage,\n    [Posts.POST_TYPES.CONVERT_CHANNEL]: renderConvertChannelToPrivateMessage,\n    [Posts.POST_TYPES.PURPOSE_CHANGE]: renderPurposeChangeMessage,\n    [Posts.POST_TYPES.CHANNEL_DELETED]: renderChannelDeletedMessage,\n    [Posts.POST_TYPES.ME]: renderMeMessage,\n};\n\nexport function renderSystemMessage(post, channel) {\n    if (post.props && post.props.add_channel_member) {\n        const isUserCanManageMembers = canManageMembers(channel);\n        const isEphemeral = Utils.isPostEphemeral(post);\n\n        if ((channel.type === General.PRIVATE_CHANNEL || channel.type === General.OPEN_CHANNEL) &&\n            isUserCanManageMembers &&\n            isEphemeral\n        ) {\n            const addMemberProps = post.props.add_channel_member;\n            return (\n                <PostAddChannelMember\n                    postId={addMemberProps.post_id}\n                    userIds={addMemberProps.not_in_channel_user_ids}\n                    noGroupsUsernames={addMemberProps.not_in_groups_usernames}\n                    usernames={addMemberProps.not_in_channel_usernames}\n                />\n            );\n        }\n\n        return null;\n    } else if (systemMessageRenderers[post.type]) {\n        return systemMessageRenderers[post.type](post);\n    } else if (post.type === Posts.POST_TYPES.EPHEMERAL_ADD_TO_CHANNEL) {\n        return renderAddToChannelMessage(post);\n    } else if (post.type === Posts.POST_TYPES.COMBINED_USER_ACTIVITY) {\n        const {allUserIds, allUsernames, messageData} = post.props.user_activity;\n\n        return (\n            <CombinedSystemMessage\n                allUserIds={allUserIds}\n                allUsernames={allUsernames}\n                messageData={messageData}\n            />\n        );\n    }\n\n    return null;\n}\n","// Copyright (c) 2015-present Mattermost, Inc. All Rights Reserved.\n// See LICENSE.txt for license information.\n\nimport PropTypes from 'prop-types';\nimport React from 'react';\n\nimport Markdown from 'components/markdown';\n\nimport {renderSystemMessage} from './system_message_helpers.jsx';\n\nexport default class PostMarkdown extends React.PureComponent {\n    static propTypes = {\n\n        /*\n         * Any extra props that should be passed into the image component\n         */\n        imageProps: PropTypes.object,\n\n        /*\n         * Whether or not this text is part of the RHS\n         */\n        isRHS: PropTypes.bool,\n\n        /*\n         * The post text to be rendered\n         */\n        message: PropTypes.string.isRequired,\n\n        /*\n         * The optional post for which this message is being rendered\n         */\n        post: PropTypes.object,\n        channel: PropTypes.object,\n\n        options: PropTypes.object,\n\n        pluginHooks: PropTypes.arrayOf(PropTypes.object),\n\n        /**\n         * Whether or not to place the LinkTooltip component inside links\n         */\n        hasPluginTooltips: PropTypes.bool,\n    };\n\n    static defaultProps = {\n        isRHS: false,\n        pluginHooks: [],\n    };\n\n    render() {\n        if (this.props.post) {\n            const renderedSystemMessage = renderSystemMessage(this.props.post, this.props.channel);\n            if (renderedSystemMessage) {\n                return <div>{renderedSystemMessage}</div>;\n            }\n        }\n\n        // Proxy images if we have an image proxy and the server hasn't already rewritten the post's image URLs.\n        const proxyImages = !this.props.post || !this.props.post.message_source || this.props.post.message === this.props.post.message_source;\n        const channelNamesMap = this.props.post && this.props.post.props && this.props.post.props.channel_mentions;\n\n        let {message} = this.props;\n        const {post} = this.props;\n\n        this.props.pluginHooks.forEach((o) => {\n            if (o && o.hook && post) {\n                message = o.hook(post, message);\n            }\n        });\n\n        return (\n            <Markdown\n                imageProps={this.props.imageProps}\n                isRHS={this.props.isRHS}\n                message={message}\n                proxyImages={proxyImages}\n                options={this.props.options}\n                channelNamesMap={channelNamesMap}\n                hasPluginTooltips={this.props.hasPluginTooltips}\n                imagesMetadata={this.props.post && this.props.post.metadata && this.props.post.metadata.images}\n            />\n        );\n    }\n}\n","// Copyright (c) 2015-present Mattermost, Inc. All Rights Reserved.\n// See LICENSE.txt for license information.\n\nimport {connect} from 'react-redux';\nimport {getChannel} from 'mattermost-redux/selectors/entities/channels';\n\nimport PostMarkdown from './post_markdown';\n\nfunction mapStateToProps(state, ownProps) {\n    return {\n        channel: getChannel(state, ownProps.channelId),\n        pluginHooks: state.plugins.components.MessageWillFormat,\n        hasPluginTooltips: Boolean(state.plugins.components.LinkTooltip),\n    };\n}\n\nexport default connect(mapStateToProps)(PostMarkdown);\n","// Copyright (c) 2015-present Mattermost, Inc. All Rights Reserved.\n// See LICENSE.txt for license information.\n\nimport React from 'react';\nimport {FormattedMessage} from 'react-intl';\n\nimport * as Utils from 'utils/utils.jsx';\nimport BotBadge from 'components/widgets/badges/bot_badge.jsx';\n\nimport Suggestion from '../suggestion.jsx';\n\nexport default class AtMentionSuggestion extends Suggestion {\n    render() {\n        const isSelection = this.props.isSelection;\n        const user = this.props.item;\n\n        let username;\n        let description;\n        let icon;\n        if (user.username === 'all') {\n            username = 'all';\n            description = (\n                <FormattedMessage\n                    id='suggestion.mention.all'\n                    defaultMessage='Notifies everyone in this channel'\n                />\n            );\n            icon = (\n                <FormattedMessage\n                    id='generic_icons.member'\n                    defaultMessage='Member Icon'\n                >\n                    {(title) => (\n                        <i\n                            className='mention__image fa fa-users fa-2x'\n                            title={title}\n                        />\n                    )}\n                </FormattedMessage>\n            );\n        } else if (user.username === 'channel') {\n            username = 'channel';\n            description = (\n                <FormattedMessage\n                    id='suggestion.mention.channel'\n                    defaultMessage='Notifies everyone in this channel'\n                />\n            );\n            icon = (\n                <FormattedMessage\n                    id='generic_icons.member'\n                    defaultMessage='Member Icon'\n                >\n                    {(title) => (\n                        <i\n                            className='mention__image fa fa-users fa-2x'\n                            title={title}\n                        />\n                    )}\n                </FormattedMessage>\n            );\n        } else if (user.username === 'here') {\n            username = 'here';\n            description = (\n                <FormattedMessage\n                    id='suggestion.mention.here'\n                    defaultMessage='Notifies everyone online in this channel'\n                />\n            );\n            icon = (\n                <FormattedMessage\n                    id='generic_icons.member'\n                    defaultMessage='Member Icon'\n                >\n                    {(title) => (\n                        <i\n                            className='mention__image fa fa-users fa-2x'\n                            title={title}\n                        />\n                    )}\n                </FormattedMessage>\n            );\n        } else {\n            username = user.username;\n\n            if ((user.first_name || user.last_name) && user.nickname) {\n                description = `- ${Utils.getFullName(user)} (${user.nickname})`;\n            } else if (user.nickname) {\n                description = `- (${user.nickname})`;\n            } else if (user.first_name || user.last_name) {\n                description = `- ${Utils.getFullName(user)}`;\n            }\n\n            icon = (\n                <img\n                    alt='mention image'\n                    className='mention__image'\n                    src={Utils.imageURLForUser(user)}\n                />\n            );\n        }\n\n        let className = 'mentions__name';\n        if (isSelection) {\n            className += ' suggestion--selected';\n        }\n\n        return (\n            <div\n                className={className}\n                onClick={this.handleClick}\n                {...Suggestion.baseProps}\n            >\n                {icon}\n                <span className='mention--align'>\n                    {'@' + username}\n                </span>\n                <BotBadge\n                    show={Boolean(user.is_bot)}\n                    className='badge-autocomplete'\n                />\n                <span className='mention__fullname'>\n                    {' '}\n                    {description}\n                </span>\n            </div>\n        );\n    }\n}\n","// Copyright (c) 2015-present Mattermost, Inc. All Rights Reserved.\n// See LICENSE.txt for license information.\n\nimport AtMentionProvider from './at_mention_provider.jsx';\n\nexport default AtMentionProvider;\n","// Copyright (c) 2015-present Mattermost, Inc. All Rights Reserved.\n// See LICENSE.txt for license information.\n\nimport XRegExp from 'xregexp';\n\nimport {getSuggestionsSplitBy, getSuggestionsSplitByMultiple} from 'mattermost-redux/utils/user_utils';\n\nimport {Constants} from 'utils/constants.jsx';\n\nimport Provider from '../provider.jsx';\n\nimport AtMentionSuggestion from './at_mention_suggestion.jsx';\n\n// The AtMentionProvider provides matches for at mentions, including @here, @channel, @all,\n// users in the channel and users not in the channel. It mixes together results from the local\n// store with results fetch from the server.\nexport default class AtMentionProvider extends Provider {\n    constructor(props) {\n        super();\n\n        this.setProps(props);\n\n        this.data = null;\n    }\n\n    // setProps gives the provider additional context for matching pretexts. Ideally this would\n    // just be something akin to a connected component with access to the store itself.\n    setProps({currentUserId, profilesInChannel, profilesNotInChannel, autocompleteUsersInChannel}) {\n        this.currentUserId = currentUserId;\n        this.profilesInChannel = profilesInChannel;\n        this.profilesNotInChannel = profilesNotInChannel;\n        this.autocompleteUsersInChannel = autocompleteUsersInChannel;\n    }\n\n    // specialMentions matches one of @here, @channel or @all, unless using /msg.\n    specialMentions() {\n        if (this.latestPrefix.startsWith('/msg')) {\n            return [];\n        }\n\n        return ['here', 'channel', 'all'].filter((item) =>\n            item.startsWith(this.latestPrefix)\n        ).map((name) => ({\n            username: name,\n            type: Constants.MENTION_SPECIAL,\n        }));\n    }\n\n    // retrieves the parts of the profile that should be checked\n    // against the term\n    getProfileSuggestions(profile) {\n        const profileSuggestions = [];\n        if (!profile) {\n            return profileSuggestions;\n        }\n\n        if (profile.username) {\n            const usernameSuggestions = getSuggestionsSplitByMultiple(profile.username.toLowerCase(), Constants.AUTOCOMPLETE_SPLIT_CHARACTERS);\n            profileSuggestions.push(...usernameSuggestions);\n        }\n        [profile.first_name, profile.last_name, profile.nickname].forEach((property) => {\n            const suggestions = getSuggestionsSplitBy(property.toLowerCase(), ' ');\n            profileSuggestions.push(...suggestions);\n        });\n\n        return profileSuggestions;\n    }\n\n    // filterProfile constrains profiles to those matching the latest prefix.\n    filterProfile(profile) {\n        if (!profile) {\n            return false;\n        }\n\n        if (profile.id === this.currentUserId) {\n            return false;\n        }\n\n        const prefixLower = this.latestPrefix.toLowerCase();\n        const profileSuggestions = this.getProfileSuggestions(profile);\n\n        return profileSuggestions.some((suggestion) => suggestion.startsWith(prefixLower));\n    }\n\n    // localMembers matches up to 25 local results from the store before the server has responded.\n    localMembers() {\n        const localMembers = this.profilesInChannel.\n            filter((profile) => this.filterProfile(profile)).\n            map((profile) => ({\n                type: Constants.MENTION_MEMBERS,\n                ...profile,\n            })).\n            sort((a, b) => a.username.localeCompare(b.username)).\n            splice(0, 25);\n\n        return localMembers;\n    }\n\n    // remoteMembers matches the users listed in the channel by the server.\n    remoteMembers() {\n        if (!this.data) {\n            return [];\n        }\n\n        return (this.data.users || []).\n            filter((profile) => this.filterProfile(profile)).\n            map((profile) => ({\n                type: Constants.MENTION_MEMBERS,\n                ...profile,\n            }));\n    }\n\n    // remoteNonMembers matches users listed as not in the channel by the server.\n    // listed in the channel from local results.\n    remoteNonMembers() {\n        if (!this.data) {\n            return [];\n        }\n\n        return (this.data.out_of_channel || []).\n            filter((profile) => this.filterProfile(profile)).\n            map((profile) => ({\n                type: Constants.MENTION_NONMEMBERS,\n                ...profile,\n            }));\n    }\n\n    users() {\n        const specialMentions = this.specialMentions();\n\n        const localMembers = this.localMembers();\n\n        const localUserIds = {};\n        localMembers.forEach((item) => {\n            localUserIds[item.id] = true;\n        });\n\n        const remoteMembers = this.remoteMembers().filter((item) => !localUserIds[item.id]);\n\n        // Combine the local and remote members, sorting to mix the results together.\n        const localAndRemoteMembers = localMembers.concat(remoteMembers).sort((a, b) =>\n            a.username.localeCompare(b.username)\n        );\n\n        const remoteNonMembers = this.remoteNonMembers().filter((item) => !localUserIds[item.id]);\n\n        return localAndRemoteMembers.concat(specialMentions).concat(remoteNonMembers);\n    }\n\n    // updateMatches invokes the resultCallback with the metadata for rendering at mentions\n    updateMatches(resultCallback, users) {\n        const mentions = users.map((user) => {\n            if (user.username) {\n                return '@' + user.username;\n            }\n            return '';\n        });\n\n        resultCallback({\n            matchedPretext: `@${this.latestPrefix}`,\n            terms: mentions,\n            items: users,\n            component: AtMentionSuggestion,\n        });\n    }\n\n    handlePretextChanged(pretext, resultCallback) {\n        const captured = XRegExp.cache('(?:^|\\\\W)@([\\\\pL\\\\d\\\\-_.]*)$', 'i').exec(pretext.toLowerCase());\n        if (!captured) {\n            return false;\n        }\n\n        const prefix = captured[1];\n\n        this.startNewRequest(prefix);\n        this.updateMatches(resultCallback, this.users());\n\n        // If we haven't gotten server-side results in 500 ms, add the loading indicator.\n        let showLoadingIndicator = setTimeout(() => {\n            if (this.shouldCancelDispatch(prefix)) {\n                return;\n            }\n\n            this.updateMatches(resultCallback, this.users().concat([{\n                type: Constants.MENTION_MORE_MEMBERS,\n                loading: true,\n            }]));\n\n            showLoadingIndicator = null;\n        }, 500);\n\n        // Query the server for remote results to add to the local results.\n        this.autocompleteUsersInChannel(prefix).then(({data}) => {\n            if (showLoadingIndicator) {\n                clearTimeout(showLoadingIndicator);\n            }\n\n            if (this.shouldCancelDispatch(prefix)) {\n                return;\n            }\n\n            this.data = data;\n            this.updateMatches(resultCallback, this.users());\n        });\n\n        return true;\n    }\n}\n","// Copyright (c) 2015-present Mattermost, Inc. All Rights Reserved.\n// See LICENSE.txt for license information.\n\nimport React from 'react';\n\nimport {getMyChannels, getChannel, getMyChannelMemberships} from 'mattermost-redux/selectors/entities/channels';\n\nimport {sortChannelsByTypeAndDisplayName} from 'mattermost-redux/utils/channel_utils';\n\nimport {ChannelTypes} from 'mattermost-redux/action_types';\n\nimport {autocompleteChannels} from 'actions/channel_actions.jsx';\nimport store from 'stores/redux_store.jsx';\n\nimport {Constants} from 'utils/constants.jsx';\n\nimport Provider from './provider.jsx';\nimport Suggestion from './suggestion.jsx';\n\nclass ChannelMentionSuggestion extends Suggestion {\n    render() {\n        const isSelection = this.props.isSelection;\n        const item = this.props.item;\n\n        const channelName = item.channel.display_name;\n        const purpose = item.channel.purpose;\n\n        let className = 'mentions__name no-flex';\n        if (isSelection) {\n            className += ' suggestion--selected';\n        }\n\n        const description = '(~' + item.channel.name + ')';\n\n        return (\n            <div\n                className={className}\n                onClick={this.handleClick}\n                {...Suggestion.baseProps}\n            >\n                <div className='mention__align'>\n                    <span>\n                        {channelName}\n                    </span>\n                    <span className='mention__channelname'>\n                        {' '}\n                        {description}\n                    </span>\n                </div>\n                <div className='mention__purpose'>\n                    {purpose}\n                </div>\n            </div>\n        );\n    }\n}\n\nexport default class ChannelMentionProvider extends Provider {\n    constructor() {\n        super();\n\n        this.lastPrefixTrimmed = '';\n        this.lastPrefixWithNoResults = '';\n        this.lastCompletedWord = '';\n    }\n\n    handlePretextChanged(pretext, resultCallback) {\n        this.resetRequest();\n\n        const captured = (/\\B(~([^~\\r\\n]*))$/i).exec(pretext.toLowerCase());\n\n        if (!captured) {\n            // Not a channel mention\n            return false;\n        }\n\n        if (captured.index > 0 && pretext[captured.index - 1] === '~') {\n            // Multiple ~'s in a row so let's return and not show the autocomplete\n            return false;\n        }\n\n        const prefix = captured[2];\n\n        if (this.lastPrefixTrimmed && prefix.trim() === this.lastPrefixTrimmed) {\n            // Don't keep searching if the user keeps typing spaces\n            return true;\n        }\n\n        this.lastPrefixTrimmed = prefix.trim();\n\n        if (this.lastPrefixWithNoResults && prefix.startsWith(this.lastPrefixWithNoResults)) {\n            // Just give up since we know it won't return any results\n            return false;\n        }\n\n        if (this.lastCompletedWord && captured[0].startsWith(this.lastCompletedWord)) {\n            // It appears we're still matching a channel handle that we already completed\n            return false;\n        }\n\n        // Clear the last completed word since we've started to match new text\n        this.lastCompletedWord = '';\n\n        this.startNewRequest(prefix);\n\n        const words = prefix.toLowerCase().split(/\\s+/);\n        const wrappedChannelIds = {};\n        var wrappedChannels = [];\n        getMyChannels(store.getState()).forEach((item) => {\n            if (item.type !== 'O' || item.delete_at > 0) {\n                return;\n            }\n            const nameWords = item.name.toLowerCase().split(/\\s+/).concat(item.display_name.toLowerCase().split(/\\s+/));\n            var matched = true;\n            for (var j = 0; matched && j < words.length; j++) {\n                if (!words[j]) {\n                    continue;\n                }\n                var wordMatched = false;\n                for (var i = 0; i < nameWords.length; i++) {\n                    if (nameWords[i].startsWith(words[j])) {\n                        wordMatched = true;\n                        break;\n                    }\n                }\n                if (!wordMatched) {\n                    matched = false;\n                    break;\n                }\n            }\n            if (!matched) {\n                return;\n            }\n            wrappedChannelIds[item.id] = true;\n            wrappedChannels.push({\n                type: Constants.MENTION_CHANNELS,\n                channel: item,\n            });\n        });\n        wrappedChannels = wrappedChannels.sort((a, b) => {\n            //\n            // MM-12677 When this is migrated this needs to be fixed to pull the user's locale\n            //\n            return sortChannelsByTypeAndDisplayName('en', a.channel, b.channel);\n        });\n        const channelMentions = wrappedChannels.map((item) => '~' + item.channel.name);\n        resultCallback({\n            terms: channelMentions.concat([' ']),\n            items: wrappedChannels.concat([{\n                type: Constants.MENTION_MORE_CHANNELS,\n                loading: true,\n            }]),\n            component: ChannelMentionSuggestion,\n            matchedPretext: captured[1],\n        });\n\n        autocompleteChannels(\n            prefix,\n            (channels) => {\n                const myMembers = getMyChannelMemberships(store.getState());\n                if (this.shouldCancelDispatch(prefix)) {\n                    return;\n                }\n\n                if (channels.length === 0) {\n                    this.lastPrefixWithNoResults = prefix;\n                }\n\n                // Wrap channels in an outer object to avoid overwriting the 'type' property.\n                const wrappedMoreChannels = [];\n                const moreChannels = [];\n                channels.forEach((item) => {\n                    if (item.delete_at > 0 && !myMembers[item.id]) {\n                        return;\n                    }\n                    if (getChannel(store.getState(), item.id)) {\n                        if (!wrappedChannelIds[item.id]) {\n                            wrappedChannelIds[item.id] = true;\n                            wrappedChannels.push({\n                                type: Constants.MENTION_CHANNELS,\n                                channel: item,\n                            });\n                        }\n                        return;\n                    }\n\n                    wrappedMoreChannels.push({\n                        type: Constants.MENTION_MORE_CHANNELS,\n                        channel: item,\n                    });\n\n                    moreChannels.push(item);\n                });\n\n                wrappedChannels = wrappedChannels.sort((a, b) => {\n                    //\n                    // MM-12677 When this is migrated this needs to be fixed to pull the user's locale\n                    //\n                    return sortChannelsByTypeAndDisplayName('en', a.channel, b.channel);\n                });\n                const wrapped = wrappedChannels.concat(wrappedMoreChannels);\n                const mentions = wrapped.map((item) => '~' + item.channel.name);\n\n                store.dispatch({\n                    type: ChannelTypes.RECEIVED_CHANNELS,\n                    data: moreChannels,\n                });\n\n                resultCallback({\n                    matchedPretext: captured[1],\n                    terms: mentions,\n                    items: wrapped,\n                    component: ChannelMentionSuggestion,\n                });\n            }\n        );\n\n        return true;\n    }\n\n    handleCompleteWord(term) {\n        this.lastCompletedWord = term;\n        this.lastPrefixWithNoResults = '';\n    }\n}\n","// Copyright (c) 2015-present Mattermost, Inc. All Rights Reserved.\n// See LICENSE.txt for license information.\n\nimport React from 'react';\n\nimport {Client4} from 'mattermost-redux/client';\nimport {getCurrentTeamId} from 'mattermost-redux/selectors/entities/teams';\n\nimport store from 'stores/redux_store.jsx';\n\nimport * as UserAgent from 'utils/user_agent.jsx';\n\nimport Suggestion from './suggestion.jsx';\nimport Provider from './provider.jsx';\n\nexport class CommandSuggestion extends Suggestion {\n    render() {\n        const {item, isSelection} = this.props;\n\n        let className = 'command';\n        if (isSelection) {\n            className += ' suggestion--selected';\n        }\n\n        return (\n            <div\n                className={className}\n                onClick={this.handleClick}\n                {...Suggestion.baseProps}\n            >\n                <div className='command__title'>\n                    {item.suggestion + ' ' + item.hint}\n                </div>\n                <div className='command__desc'>\n                    {item.description}\n                </div>\n            </div>\n        );\n    }\n}\n\nexport default class CommandProvider extends Provider {\n    handlePretextChanged(pretext, resultCallback) {\n        if (pretext.startsWith('/')) {\n            const command = pretext.toLowerCase();\n            Client4.getCommandsList(getCurrentTeamId(store.getState())).then(\n                (data) => {\n                    let matches = [];\n                    data.forEach((cmd) => {\n                        if (!cmd.auto_complete) {\n                            return;\n                        }\n\n                        if (cmd.trigger !== 'shortcuts' || !UserAgent.isMobile()) {\n                            if (('/' + cmd.trigger).indexOf(command) === 0) {\n                                const s = '/' + cmd.trigger;\n                                let hint = '';\n                                if (cmd.auto_complete_hint && cmd.auto_complete_hint.length !== 0) {\n                                    hint = cmd.auto_complete_hint;\n                                }\n                                matches.push({\n                                    suggestion: s,\n                                    hint,\n                                    description: cmd.auto_complete_desc,\n                                });\n                            }\n                        }\n                    });\n\n                    matches = matches.sort((a, b) => a.suggestion.localeCompare(b.suggestion));\n\n                    // pull out the suggested commands from the returned data\n                    const terms = matches.map((suggestion) => suggestion.suggestion);\n\n                    resultCallback({\n                        matchedPretext: command,\n                        terms,\n                        items: matches,\n                        component: CommandSuggestion,\n                    });\n                }\n            ).catch(\n                () => {} //eslint-disable-line no-empty-function\n            );\n\n            return true;\n        }\n        return false;\n    }\n}\n","// Copyright (c) 2015-present Mattermost, Inc. All Rights Reserved.\n// See LICENSE.txt for license information.\n\nimport React from 'react';\n\nimport {autocompleteCustomEmojis} from 'mattermost-redux/actions/emojis';\nimport {getEmojiImageUrl} from 'mattermost-redux/utils/emoji_utils';\n\nimport {getEmojiMap, getRecentEmojis} from 'selectors/emojis';\n\nimport store from 'stores/redux_store.jsx';\n\nimport * as Emoticons from 'utils/emoticons.jsx';\nimport {compareEmojis} from 'utils/emoji_utils.jsx';\n\nimport Suggestion from './suggestion.jsx';\nimport Provider from './provider.jsx';\n\nexport const MIN_EMOTICON_LENGTH = 2;\nexport const EMOJI_CATEGORY_SUGGESTION_BLACKLIST = ['skintone'];\n\nclass EmoticonSuggestion extends Suggestion {\n    render() {\n        const text = this.props.term;\n        const emoji = this.props.item.emoji;\n\n        let className = 'emoticon-suggestion';\n        if (this.props.isSelection) {\n            className += ' suggestion--selected';\n        }\n\n        return (\n            <div\n                className={className}\n                onClick={this.handleClick}\n                {...Suggestion.baseProps}\n            >\n                <div className='pull-left'>\n                    <img\n                        alt={text}\n                        className='emoticon-suggestion__image'\n                        src={getEmojiImageUrl(emoji)}\n                        title={text}\n                    />\n                </div>\n                <div className='pull-left'>\n                    {text}\n                </div>\n            </div>\n        );\n    }\n}\n\nexport default class EmoticonProvider extends Provider {\n    handlePretextChanged(pretext, resultsCallback) {\n        // Look for the potential emoticons at the start of the text, after whitespace, and at the start of emoji reaction commands\n        const captured = (/(^|\\s|^\\+|^-)(:([^:\\s]*))$/g).exec(pretext);\n        if (!captured) {\n            return false;\n        }\n\n        const prefix = captured[1];\n        const text = captured[2];\n        const partialName = captured[3];\n\n        if (partialName.length < MIN_EMOTICON_LENGTH) {\n            return false;\n        }\n\n        // Check for text emoticons if this isn't for an emoji reaction\n        if (prefix !== '-' && prefix !== '+') {\n            for (const emoticon of Object.keys(Emoticons.emoticonPatterns)) {\n                if (Emoticons.emoticonPatterns[emoticon].test(text)) {\n                    // Don't show the autocomplete for text emoticons\n                    return false;\n                }\n            }\n        }\n\n        if (store.getState().entities.general.config.EnableCustomEmoji === 'true') {\n            store.dispatch(autocompleteCustomEmojis(partialName)).then(() => this.findAndSuggestEmojis(text, partialName, resultsCallback));\n        } else {\n            this.findAndSuggestEmojis(text, partialName, resultsCallback);\n        }\n\n        return true;\n    }\n\n    formatEmojis(emojis) {\n        return emojis.map((item) => ':' + item.name + ':');\n    }\n\n    findAndSuggestEmojis(text, partialName, resultsCallback) {\n        const recentMatched = [];\n        const matched = [];\n\n        const emojiMap = getEmojiMap(store.getState());\n        const recentEmojis = getRecentEmojis(store.getState());\n\n        // Check for named emoji\n        for (const [name, emoji] of emojiMap) {\n            if (EMOJI_CATEGORY_SUGGESTION_BLACKLIST.includes(emoji.category)) {\n                continue;\n            }\n\n            if (emoji.aliases) {\n                // This is a system emoji so it may have multiple names\n                for (const alias of emoji.aliases) {\n                    if (alias.indexOf(partialName) !== -1) {\n                        const matchedArray = recentEmojis.includes(alias) || recentEmojis.includes(name) ?\n                            recentMatched :\n                            matched;\n\n                        matchedArray.push({name: alias, emoji});\n                        break;\n                    }\n                }\n            } else if (name.indexOf(partialName) !== -1) {\n                // This is a custom emoji so it only has one name\n                if (emojiMap.hasSystemEmoji(name)) {\n                    // System emojis take precedence over custom ones\n                    continue;\n                }\n\n                const matchedArray = recentEmojis.includes(name) ?\n                    recentMatched :\n                    matched;\n\n                matchedArray.push({name, emoji});\n            }\n        }\n\n        const sortEmojisHelper = (a, b) => {\n            return compareEmojis(a, b, partialName);\n        };\n\n        recentMatched.sort(sortEmojisHelper);\n\n        matched.sort(sortEmojisHelper);\n\n        const terms = [\n            ...this.formatEmojis(recentMatched),\n            ...this.formatEmojis(matched),\n        ];\n\n        const items = [\n            ...recentMatched,\n            ...matched,\n        ];\n\n        // Required to get past the dispatch during dispatch error\n\n        resultsCallback({\n            matchedPretext: text,\n            terms,\n            items,\n            component: EmoticonSuggestion,\n        });\n    }\n}\n","// Copyright (c) 2015-present Mattermost, Inc. All Rights Reserved.\n// See LICENSE.txt for license information.\n\nimport PropTypes from 'prop-types';\nimport React from 'react';\nimport {FormattedMessage} from 'react-intl';\n\nimport AutosizeTextarea from 'components/autosize_textarea.jsx';\nimport PostMarkdown from 'components/post_markdown';\nimport AtMentionProvider from 'components/suggestion/at_mention_provider';\nimport ChannelMentionProvider from 'components/suggestion/channel_mention_provider.jsx';\nimport CommandProvider from 'components/suggestion/command_provider.jsx';\nimport EmoticonProvider from 'components/suggestion/emoticon_provider.jsx';\nimport SuggestionBox from 'components/suggestion/suggestion_box.jsx';\nimport SuggestionList from 'components/suggestion/suggestion_list.jsx';\nimport * as Utils from 'utils/utils.jsx';\n\nexport default class Textbox extends React.Component {\n    static propTypes = {\n        id: PropTypes.string.isRequired,\n        channelId: PropTypes.string,\n        value: PropTypes.string.isRequired,\n        onChange: PropTypes.func.isRequired,\n        onKeyPress: PropTypes.func.isRequired,\n        onComposition: PropTypes.func,\n        onHeightChange: PropTypes.func,\n        createMessage: PropTypes.string.isRequired,\n        onKeyDown: PropTypes.func,\n        onBlur: PropTypes.func,\n        supportsCommands: PropTypes.bool.isRequired,\n        handlePostError: PropTypes.func,\n        suggestionListStyle: PropTypes.string,\n        emojiEnabled: PropTypes.bool,\n        isRHS: PropTypes.bool,\n        characterLimit: PropTypes.number.isRequired,\n        disabled: PropTypes.bool,\n        badConnection: PropTypes.bool,\n        listenForMentionKeyClick: PropTypes.bool,\n        currentUserId: PropTypes.string.isRequired,\n        preview: PropTypes.bool,\n        profilesInChannel: PropTypes.arrayOf(PropTypes.object).isRequired,\n        profilesNotInChannel: PropTypes.arrayOf(PropTypes.object).isRequired,\n        actions: PropTypes.shape({\n            autocompleteUsersInChannel: PropTypes.func.isRequired,\n            scrollPostList: PropTypes.func.isRequired,\n        }),\n    };\n\n    static defaultProps = {\n        supportsCommands: true,\n        isRHS: false,\n        listenForMentionKeyClick: false,\n    };\n\n    constructor(props) {\n        super(props);\n\n        this.suggestionProviders = [\n            new AtMentionProvider({\n                currentUserId: this.props.currentUserId,\n                profilesInChannel: this.props.profilesInChannel,\n                profilesNotInChannel: this.props.profilesNotInChannel,\n                autocompleteUsersInChannel: (prefix) => this.props.actions.autocompleteUsersInChannel(prefix, props.channelId),\n            }),\n            new ChannelMentionProvider(),\n            new EmoticonProvider(),\n        ];\n\n        if (props.supportsCommands) {\n            this.suggestionProviders.push(new CommandProvider());\n        }\n\n        this.checkMessageLength(props.value);\n    }\n\n    handleChange = (e) => {\n        this.props.onChange(e);\n    }\n\n    componentDidUpdate(prevProps) {\n        if (!prevProps.preview && this.props.preview) {\n            this.refs.preview.focus();\n        }\n    }\n\n    checkMessageLength = (message) => {\n        if (this.props.handlePostError) {\n            if (message.length > this.props.characterLimit) {\n                const errorMessage = (\n                    <FormattedMessage\n                        id='create_post.error_message'\n                        defaultMessage='Your message is too long. Character count: {length}/{limit}'\n                        values={{\n                            length: message.length,\n                            limit: this.props.characterLimit,\n                        }}\n                    />);\n                this.props.handlePostError(errorMessage);\n            } else {\n                this.props.handlePostError(null);\n            }\n        }\n    }\n\n    handleKeyDown = (e) => {\n        if (this.props.onKeyDown) {\n            this.props.onKeyDown(e);\n        }\n    }\n\n    handleBlur = (e) => {\n        if (this.props.onBlur) {\n            this.props.onBlur(e);\n        }\n    }\n\n    handleHeightChange = (height, maxHeight) => {\n        if (this.props.onHeightChange) {\n            this.props.onHeightChange(height, maxHeight);\n        }\n        if (Utils.disableVirtList()) {\n            this.props.actions.scrollPostList();\n        }\n    }\n\n    focus = () => {\n        const textbox = this.refs.message.getTextbox();\n\n        textbox.focus();\n        Utils.placeCaretAtEnd(textbox);\n\n        // reset character count warning\n        this.checkMessageLength(textbox.value);\n    }\n\n    blur = () => {\n        const textbox = this.refs.message.getTextbox();\n        textbox.blur();\n    };\n\n    recalculateSize = () => {\n        this.refs.message.recalculateSize();\n    }\n\n    UNSAFE_componentWillReceiveProps(nextProps) { // eslint-disable-line camelcase\n        if (nextProps.channelId !== this.props.channelId ||\n            nextProps.currentUserId !== this.props.currentUserId ||\n            nextProps.profilesInChannel !== this.props.profilesInChannel ||\n            nextProps.profilesNotInChannel !== this.props.profilesNotInChannel) {\n            // Update channel id for AtMentionProvider.\n            const providers = this.suggestionProviders;\n            for (let i = 0; i < providers.length; i++) {\n                if (providers[i] instanceof AtMentionProvider) {\n                    providers[i].setProps({\n                        currentUserId: nextProps.currentUserId,\n                        profilesInChannel: nextProps.profilesInChannel,\n                        profilesNotInChannel: nextProps.profilesNotInChannel,\n                        autocompleteUsersInChannel: (prefix) => nextProps.actions.autocompleteUsersInChannel(prefix, nextProps.channelId),\n                    });\n                }\n            }\n        }\n        if (this.props.value !== nextProps.value) {\n            this.checkMessageLength(nextProps.value);\n        }\n    }\n\n    render() {\n        let preview = null;\n\n        let textboxClassName = 'form-control custom-textarea';\n        let textWrapperClass = 'textarea-wrapper';\n        if (this.props.emojiEnabled) {\n            textboxClassName += ' custom-textarea--emoji-picker';\n        }\n        if (this.props.badConnection) {\n            textboxClassName += ' bad-connection';\n        }\n        if (this.props.preview) {\n            textboxClassName += ' custom-textarea--preview';\n            textWrapperClass += ' textarea-wrapper--preview';\n\n            preview = (\n                <div\n                    tabIndex='0'\n                    ref='preview'\n                    className='form-control custom-textarea textbox-preview-area'\n                    onKeyPress={this.props.onKeyPress}\n                    onKeyDown={this.handleKeyDown}\n                    onBlur={this.handleBlur}\n                >\n                    <PostMarkdown\n                        isRHS={this.props.isRHS}\n                        message={this.props.value}\n                    />\n                </div>\n            );\n        }\n\n        return (\n            <div\n                ref='wrapper'\n                className={textWrapperClass}\n            >\n                <SuggestionBox\n                    id={this.props.id}\n                    ref='message'\n                    className={textboxClassName}\n                    spellCheck='true'\n                    placeholder={this.props.createMessage}\n                    onChange={this.handleChange}\n                    onKeyPress={this.props.onKeyPress}\n                    onKeyDown={this.handleKeyDown}\n                    onComposition={this.props.onComposition}\n                    onBlur={this.handleBlur}\n                    onHeightChange={this.handleHeightChange}\n                    style={{visibility: this.props.preview ? 'hidden' : 'visible'}}\n                    inputComponent={AutosizeTextarea}\n                    listComponent={SuggestionList}\n                    listStyle={this.props.suggestionListStyle}\n                    providers={this.suggestionProviders}\n                    channelId={this.props.channelId}\n                    value={this.props.value}\n                    renderDividers={true}\n                    isRHS={this.props.isRHS}\n                    disabled={this.props.disabled}\n                    contextId={this.props.channelId}\n                    listenForMentionKeyClick={this.props.listenForMentionKeyClick}\n                />\n                {preview}\n            </div>\n        );\n    }\n}\n","// Copyright (c) 2015-present Mattermost, Inc. All Rights Reserved.\n// See LICENSE.txt for license information.\n\nimport {bindActionCreators} from 'redux';\nimport {connect} from 'react-redux';\n\nimport {getCurrentUserId, makeGetProfilesInChannel, makeGetProfilesNotInChannel} from 'mattermost-redux/selectors/entities/users';\n\nimport {autocompleteUsersInChannel, scrollPostList} from 'actions/views/channel';\n\nimport Textbox from './textbox.jsx';\n\nconst makeMapStateToProps = () => {\n    const getProfilesInChannel = makeGetProfilesInChannel();\n    const getProfilesNotInChannel = makeGetProfilesNotInChannel();\n\n    return (state, ownProps) => ({\n        currentUserId: getCurrentUserId(state),\n        profilesInChannel: getProfilesInChannel(state, ownProps.channelId, true),\n        profilesNotInChannel: getProfilesNotInChannel(state, ownProps.channelId, true),\n    });\n};\n\nconst mapDispatchToProps = (dispatch) => ({\n    actions: bindActionCreators({\n        autocompleteUsersInChannel,\n        scrollPostList,\n    }, dispatch),\n});\n\nexport default connect(makeMapStateToProps, mapDispatchToProps, null, {withRef: true})(Textbox);\n","// Copyright (c) 2015-present Mattermost, Inc. All Rights Reserved.\n// See LICENSE.txt for license information.\n\nimport PropTypes from 'prop-types';\nimport React from 'react';\nimport {FormattedMessage} from 'react-intl';\nimport {Link} from 'react-router-dom';\n\nimport Constants from 'utils/constants.jsx';\nimport * as Utils from 'utils/utils.jsx';\n\nconst PreReleaseFeatures = Constants.PRE_RELEASE_FEATURES;\n\nexport default class TextboxLinks extends React.Component {\n    static propTypes = {\n        showPreview: PropTypes.bool,\n        characterLimit: PropTypes.number.isRequired,\n        previewMessageLink: PropTypes.string,\n        updatePreview: PropTypes.func,\n        message: PropTypes.string.isRequired,\n    };\n\n    static defaultProps = {\n        message: '',\n    };\n\n    togglePreview = (e) => {\n        e.preventDefault();\n        this.props.updatePreview(!this.props.showPreview);\n    }\n\n    render() {\n        const hasText = this.props.message && this.props.message.length > 0;\n        let editHeader;\n\n        let helpTextClass = '';\n\n        if (this.props.message && this.props.message.length > this.props.characterLimit) {\n            helpTextClass = 'hidden';\n        }\n\n        if (this.props.previewMessageLink) {\n            editHeader = (\n                <span>\n                    {this.props.previewMessageLink}\n                </span>\n            );\n        } else {\n            editHeader = (\n                <FormattedMessage\n                    id='textbox.edit'\n                    defaultMessage='Edit message'\n                />\n            );\n        }\n\n        let previewLink = null;\n        if (Utils.isFeatureEnabled(PreReleaseFeatures.MARKDOWN_PREVIEW)) {\n            previewLink = (\n                <button\n                    id='previewLink'\n                    onClick={this.togglePreview}\n                    className='style--none textbox-preview-link color--link'\n                >\n                    {this.props.showPreview ? (\n                        editHeader\n                    ) : (\n                        <FormattedMessage\n                            id='textbox.preview'\n                            defaultMessage='Preview'\n                        />\n                    )}\n                </button>\n            );\n        }\n\n        const helpText = (\n            <div\n                id='helpText'\n                style={{visibility: hasText ? 'visible' : 'hidden', opacity: hasText ? '0.45' : '0'}}\n                className='help__format-text'\n            >\n                <b>\n                    <FormattedMessage\n                        id='textbox.bold'\n                        defaultMessage='**bold**'\n                    />\n                </b>\n                <i>\n                    <FormattedMessage\n                        id='textbox.italic'\n                        defaultMessage='_italic_'\n                    />\n                </i>\n                <span>\n                    {'~~'}\n                    <strike>\n                        <FormattedMessage\n                            id='textbox.strike'\n                            defaultMessage='strike'\n                        />\n                    </strike>\n                    {'~~ '}\n                </span>\n                <span>\n                    <FormattedMessage\n                        id='textbox.inlinecode'\n                        defaultMessage='`inline code`'\n                    />\n                </span>\n                <span>\n                    <FormattedMessage\n                        id='textbox.preformatted'\n                        defaultMessage='```preformatted```'\n                    />\n                </span>\n                <span>\n                    <FormattedMessage\n                        id='textbox.quote'\n                        defaultMessage='>quote'\n                    />\n                </span>\n            </div>\n        );\n\n        return (\n            <div className={'help__text ' + helpTextClass}>\n                {helpText}\n                {previewLink}\n                <Link\n                    id='helpTextLink'\n                    target='_blank'\n                    rel='noopener noreferrer'\n                    to='/help/messaging'\n                    className='textbox-help-link'\n                >\n                    <FormattedMessage\n                        id='textbox.help'\n                        defaultMessage='Help'\n                    />\n                </Link>\n            </div>\n        );\n    }\n}\n","// Copyright (c) 2015-present Mattermost, Inc. All Rights Reserved.\n// See LICENSE.txt for license information.\n\nimport React from 'react';\nimport {Modal} from 'react-bootstrap';\nimport {FormattedMessage, intlShape} from 'react-intl';\nimport PropTypes from 'prop-types';\n\nimport {Constants, ModalIdentifiers} from 'utils/constants.jsx';\nimport * as UserAgent from 'utils/user_agent.jsx';\nimport * as Utils from 'utils/utils.jsx';\nimport DeletePostModal from 'components/delete_post_modal';\nimport EmojiPickerOverlay from 'components/emoji_picker/emoji_picker_overlay.jsx';\nimport EmojiIcon from 'components/svg/emoji_icon';\nimport Textbox from 'components/textbox';\nimport TextboxLinks from 'components/textbox/textbox_links.jsx';\n\nconst KeyCodes = Constants.KeyCodes;\n\nexport default class EditPostModal extends React.PureComponent {\n    static propTypes = {\n        canEditPost: PropTypes.bool,\n        canDeletePost: PropTypes.bool,\n        ctrlSend: PropTypes.bool,\n        config: PropTypes.object.isRequired,\n        maxPostSize: PropTypes.number.isRequired,\n        editingPost: PropTypes.shape({\n            post: PropTypes.object,\n            postId: PropTypes.string,\n            refocusId: PropTypes.string,\n            show: PropTypes.bool.isRequired,\n            title: PropTypes.string,\n            isRHS: PropTypes.bool,\n        }).isRequired,\n\n        actions: PropTypes.shape({\n            addMessageIntoHistory: PropTypes.func.isRequired,\n            editPost: PropTypes.func.isRequired,\n            hideEditPostModal: PropTypes.func.isRequired,\n            openModal: PropTypes.func.isRequired,\n        }).isRequired,\n    }\n\n    static contextTypes = {\n        intl: intlShape.isRequired,\n    };\n\n    constructor(props) {\n        super(props);\n\n        this.state = {\n            preview: false,\n            editText: '',\n            postError: '',\n            errorClass: null,\n            showEmojiPicker: false,\n        };\n    }\n\n    UNSAFE_componentWillUpdate(nextProps) { // eslint-disable-line camelcase\n        if (!this.props.editingPost.show && nextProps.editingPost.show) {\n            this.setState({\n                editText: nextProps.editingPost.post.message_source || nextProps.editingPost.post.message,\n            });\n        }\n    }\n\n    updatePreview = (newState) => {\n        this.setState({preview: newState});\n    }\n\n    getContainer = () => {\n        return this.refs.editModalBody;\n    }\n\n    toggleEmojiPicker = () => {\n        this.setState({showEmojiPicker: !this.state.showEmojiPicker});\n        if (!this.state.showEmojiPicker && this.editbox) {\n            this.editbox.focus();\n        }\n    }\n\n    hideEmojiPicker = () => {\n        this.setState({showEmojiPicker: false});\n        if (this.editbox) {\n            this.editbox.focus();\n        }\n    }\n\n    handleEmojiClick = (emoji) => {\n        const emojiAlias = emoji && (emoji.name || (emoji.aliases && emoji.aliases[0]));\n\n        if (!emojiAlias) {\n            //Oops.. There went something wrong\n            return;\n        }\n\n        if (this.state.editText === '') {\n            this.setState({editText: ':' + emojiAlias + ': '});\n        } else {\n            //check whether there is already a blank at the end of the current message\n            const newMessage = ((/\\s+$/).test(this.state.editText)) ?\n                this.state.editText + ':' + emojiAlias + ': ' : this.state.editText + ' :' + emojiAlias + ': ';\n\n            this.setState({editText: newMessage});\n        }\n\n        this.setState({showEmojiPicker: false});\n\n        if (this.editbox) {\n            this.editbox.focus();\n        }\n    }\n\n    handleGifClick = (gif) => {\n        if (this.state.editText === '') {\n            this.setState({editText: gif});\n        } else {\n            const newMessage = ((/\\s+$/).test(this.state.editText)) ? this.state.editText + gif : this.state.editText + ' ' + gif;\n            this.setState({editText: newMessage});\n        }\n        this.setState({showEmojiPicker: false});\n        this.editbox.focus();\n    }\n\n    getEditPostControls = () => {\n        return this.refs.editPostEmoji;\n    }\n\n    handlePostError = (postError) => {\n        if (this.state.postError !== postError) {\n            this.setState({postError});\n        }\n    }\n\n    handleEdit = async () => {\n        if (this.isSaveDisabled()) {\n            return;\n        }\n\n        const {actions, editingPost} = this.props;\n        const updatedPost = {\n            message: this.state.editText,\n            id: editingPost.postId,\n            channel_id: editingPost.post.channel_id,\n        };\n\n        if (this.state.postError) {\n            this.setState({errorClass: 'animation--highlight'});\n            setTimeout(() => {\n                this.setState({errorClass: null});\n            }, Constants.ANIMATION_TIMEOUT);\n            return;\n        }\n\n        if (updatedPost.message === (editingPost.post.message_source || editingPost.post.message)) {\n            // no changes so just close the modal\n            this.handleHide();\n            return;\n        }\n\n        const hasAttachment = editingPost.post.file_ids && editingPost.post.file_ids.length > 0;\n        if (updatedPost.message.trim().length === 0 && !hasAttachment) {\n            this.handleHide(false);\n\n            const deletePostModalData = {\n                ModalId: ModalIdentifiers.DELETE_POST,\n                dialogType: DeletePostModal,\n                dialogProps: {\n                    post: editingPost.post,\n                    commentCount: editingPost.commentCount,\n                    isRHS: editingPost.isRHS,\n                },\n            };\n\n            this.props.actions.openModal(deletePostModalData);\n            return;\n        }\n\n        actions.addMessageIntoHistory(updatedPost.message);\n\n        const data = await actions.editPost(updatedPost);\n        if (data) {\n            window.scrollTo(0, 0);\n        }\n\n        this.handleHide();\n    }\n\n    handleChange = (e) => {\n        const message = e.target.value;\n        this.setState({\n            editText: message,\n        });\n    }\n\n    handleEditKeyPress = (e) => {\n        if (!UserAgent.isMobile() && !this.props.ctrlSend && Utils.isKeyPressed(e, KeyCodes.ENTER) && !e.shiftKey && !e.altKey) {\n            e.preventDefault();\n            this.editbox.blur();\n            this.handleEdit();\n        } else if (this.props.ctrlSend && e.ctrlKey && Utils.isKeyPressed(e, KeyCodes.ENTER)) {\n            e.preventDefault();\n            this.editbox.blur();\n            this.handleEdit();\n        }\n    }\n\n    handleKeyDown = (e) => {\n        if (this.props.ctrlSend && Utils.isKeyPressed(e, KeyCodes.ENTER) && e.ctrlKey === true) {\n            this.handleEdit();\n        } else if (Utils.isKeyPressed(e, KeyCodes.ESCAPE) && !this.state.showEmojiPicker) {\n            this.handleHide();\n        }\n    }\n\n    handleHide = (doRefocus = true) => {\n        this.refocusId = doRefocus ? this.props.editingPost.refocusId : null;\n        this.props.actions.hideEditPostModal();\n    }\n\n    handleEntered = () => {\n        if (this.editbox) {\n            this.editbox.focus();\n            this.editbox.recalculateSize();\n        }\n    }\n\n    handleExit = () => {\n        this.setState({preview: false});\n    }\n\n    handleExited = () => {\n        const refocusId = this.refocusId;\n        if (refocusId) {\n            setTimeout(() => {\n                const element = document.getElementById(refocusId);\n                if (element) {\n                    element.focus();\n                }\n            });\n        }\n\n        this.refocusId = null;\n        this.setState({editText: '', postError: '', errorClass: null, preview: false, showEmojiPicker: false});\n    }\n\n    setEditboxRef = (ref) => {\n        if (ref && ref.getWrappedInstance) {\n            this.editbox = ref.getWrappedInstance();\n        }\n\n        if (this.editbox) {\n            this.editbox.focus();\n        }\n    }\n\n    isSaveDisabled = () => {\n        const post = this.props.editingPost.post;\n        const hasAttachments = post && post.file_ids && post.file_ids.length > 0;\n        if (hasAttachments) {\n            return !this.props.canEditPost;\n        }\n\n        if (this.state.editText !== '') {\n            return !this.props.canEditPost;\n        }\n\n        return !this.props.canDeletePost;\n    }\n\n    render() {\n        const {formatMessage} = this.context.intl;\n        const errorBoxClass = 'edit-post-footer' + (this.state.postError ? ' has-error' : '');\n        let postError = null;\n        if (this.state.postError) {\n            const postErrorClass = 'post-error' + (this.state.errorClass ? (' ' + this.state.errorClass) : '');\n            postError = (<label className={postErrorClass}>{this.state.postError}</label>);\n        }\n\n        let emojiPicker = null;\n        const emojiButtonAriaLabel = formatMessage({id: 'emoji_picker.emojiPicker', defaultMessage: 'Emoji Picker'}).toLowerCase();\n        if (this.props.config.EnableEmojiPicker === 'true' && !this.state.preview) {\n            emojiPicker = (\n                <div>\n                    <EmojiPickerOverlay\n                        show={this.state.showEmojiPicker}\n                        container={this.getContainer}\n                        target={this.getEditPostControls}\n                        onHide={this.hideEmojiPicker}\n                        onEmojiClick={this.handleEmojiClick}\n                        onGifClick={this.handleGifClick}\n                        enableGifPicker={this.props.config.EnableGifPicker === 'true'}\n                        topOffset={-20}\n                    />\n                    <button\n                        aria-label={emojiButtonAriaLabel}\n                        id='editPostEmoji'\n                        ref='editPostEmoji'\n                        className='style--none post-action'\n                        onClick={this.toggleEmojiPicker}\n                    >\n                        <EmojiIcon\n                            className='icon icon--emoji'\n\n                        />\n                    </button>\n                </div>\n            );\n        }\n\n        return (\n            <Modal\n                id='editPostModal'\n                dialogClassName='a11y__modal edit-modal'\n                show={this.props.editingPost.show}\n                onKeyDown={this.handleKeyDown}\n                onHide={this.handleHide}\n                onEntered={this.handleEntered}\n                onExit={this.handleExit}\n                onExited={this.handleExited}\n                keyboard={false}\n                role='dialog'\n                aria-labelledby='editPostModalLabel'\n            >\n                <Modal.Header closeButton={true}>\n                    <Modal.Title\n                        componentClass='h1'\n                        id='editPostModalLabel'\n                    >\n                        <FormattedMessage\n                            id='edit_post.edit'\n                            defaultMessage='Edit {title}'\n                            values={{\n                                title: this.props.editingPost.title,\n                            }}\n                        />\n                    </Modal.Title>\n                </Modal.Header>\n                <Modal.Body\n                    bsClass={`modal-body edit-modal-body${this.state.showEmojiPicker ? ' edit-modal-body--add-reaction' : ''}`}\n                    ref='editModalBody'\n                >\n                    <div className='post-create__container'>\n                        <div className='textarea-wrapper'>\n                            <Textbox\n                                tabIndex='0'\n                                onChange={this.handleChange}\n                                onKeyPress={this.handleEditKeyPress}\n                                onKeyDown={this.handleKeyDown}\n                                handlePostError={this.handlePostError}\n                                value={this.state.editText}\n                                channelId={this.props.editingPost.post && this.props.editingPost.post.channel_id}\n                                emojiEnabled={this.props.config.EnableEmojiPicker === 'true'}\n                                createMessage={Utils.localizeMessage('edit_post.editPost', 'Edit the post...')}\n                                supportsCommands={false}\n                                suggestionListStyle='bottom'\n                                id='edit_textbox'\n                                ref={this.setEditboxRef}\n                                characterLimit={this.props.maxPostSize}\n                                preview={this.state.preview}\n                            />\n                            <div className='post-body__actions'>\n                                {emojiPicker}\n                            </div>\n                        </div>\n                        <div className='post-create-footer'>\n                            <TextboxLinks\n                                characterLimit={this.props.maxPostSize}\n                                showPreview={this.state.preview}\n                                ref={this.setTextboxLinksRef}\n                                updatePreview={this.updatePreview}\n                                message={this.state.editText}\n                            />\n                            <div className={errorBoxClass}>\n                                {postError}\n                            </div>\n                        </div>\n                    </div>\n                </Modal.Body>\n                <Modal.Footer>\n                    <button\n                        type='button'\n                        className='btn btn-link'\n                        onClick={this.handleHide}\n                    >\n                        <FormattedMessage\n                            id='edit_post.cancel'\n                            defaultMessage='Cancel'\n                        />\n                    </button>\n                    <button\n                        id='editButton'\n                        type='button'\n                        className='btn btn-primary'\n                        disabled={this.isSaveDisabled()}\n                        onClick={this.handleEdit}\n                    >\n                        <FormattedMessage\n                            id='edit_post.save'\n                            defaultMessage='Save'\n                        />\n                    </button>\n                </Modal.Footer>\n            </Modal>\n        );\n    }\n}\n","// Copyright (c) 2015-present Mattermost, Inc. All Rights Reserved.\n// See LICENSE.txt for license information.\n\nimport {connect} from 'react-redux';\nimport {bindActionCreators} from 'redux';\nimport {addMessageIntoHistory} from 'mattermost-redux/actions/posts';\nimport {Preferences, Permissions} from 'mattermost-redux/constants';\nimport {getConfig} from 'mattermost-redux/selectors/entities/general';\nimport {haveIChannelPermission} from 'mattermost-redux/selectors/entities/roles';\nimport {getCurrentTeamId} from 'mattermost-redux/selectors/entities/teams';\nimport {getCurrentChannelId} from 'mattermost-redux/selectors/entities/channels';\nimport {getCurrentUserId} from 'mattermost-redux/selectors/entities/users';\nimport {getBool} from 'mattermost-redux/selectors/entities/preferences';\n\nimport {openModal} from 'actions/views/modals';\nimport {hideEditPostModal} from 'actions/post_actions';\nimport {editPost} from 'actions/views/posts';\nimport {getEditingPost} from 'selectors/posts';\nimport Constants from 'utils/constants';\n\nimport EditPostModal from './edit_post_modal.jsx';\n\nfunction mapStateToProps(state) {\n    const config = getConfig(state);\n    const editingPost = getEditingPost(state);\n    const currentUserId = getCurrentUserId(state);\n    let canDeletePost = false;\n    let canEditPost = false;\n    if (editingPost && editingPost.post && editingPost.post.user_id === currentUserId) {\n        canDeletePost = haveIChannelPermission(state, {channel: getCurrentChannelId(state), team: getCurrentTeamId(state), permission: Permissions.DELETE_POST});\n        canEditPost = haveIChannelPermission(state, {channel: getCurrentChannelId(state), team: getCurrentTeamId(state), permission: Permissions.EDIT_POST});\n    } else {\n        canDeletePost = haveIChannelPermission(state, {channel: getCurrentChannelId(state), team: getCurrentTeamId(state), permission: Permissions.DELETE_OTHERS_POSTS});\n        canEditPost = haveIChannelPermission(state, {channel: getCurrentChannelId(state), team: getCurrentTeamId(state), permission: Permissions.EDIT_OTHERS_POSTS});\n    }\n\n    return {\n        canEditPost,\n        canDeletePost,\n        ctrlSend: getBool(state, Preferences.CATEGORY_ADVANCED_SETTINGS, 'send_on_ctrl_enter'),\n        config,\n        editingPost,\n        maxPostSize: parseInt(config.MaxPostSize, 10) || Constants.DEFAULT_CHARACTER_LIMIT,\n    };\n}\n\nfunction mapDispatchToProps(dispatch) {\n    return {\n        actions: bindActionCreators({\n            addMessageIntoHistory,\n            editPost,\n            hideEditPostModal,\n            openModal,\n        }, dispatch),\n    };\n}\n\nexport default connect(mapStateToProps, mapDispatchToProps)(EditPostModal);\n","// Copyright (c) 2015-present Mattermost, Inc. All Rights Reserved.\n// See LICENSE.txt for license information.\n\nimport EventEmitter from 'events';\n\nimport Constants from 'utils/constants.jsx';\nimport AppDispatcher from '../dispatcher/app_dispatcher.jsx';\n\nconst ActionTypes = Constants.ActionTypes;\n\nclass ModalStoreClass extends EventEmitter {\n    constructor() {\n        super();\n\n        this.dispatchToken = AppDispatcher.register(this.handleEventPayload);\n    }\n\n    addModalListener = (action, callback) => {\n        this.on(action, callback);\n    }\n\n    removeModalListener = (action, callback) => {\n        this.removeListener(action, callback);\n    }\n\n    handleEventPayload = (payload) => {\n        // toggle event handlers should accept a boolean show/hide value and can accept a map of arguments\n        const {type, value, ...args} = payload.action; //eslint-disable-line no-use-before-define\n\n        switch (type) {\n        case ActionTypes.TOGGLE_SHORTCUTS_MODAL:\n        case ActionTypes.TOGGLE_IMPORT_THEME_MODAL:\n        case ActionTypes.TOGGLE_DELETE_POST_MODAL:\n        case ActionTypes.TOGGLE_GET_POST_LINK_MODAL:\n        case ActionTypes.TOGGLE_GET_TEAM_INVITE_LINK_MODAL:\n        case ActionTypes.TOGGLE_GET_PUBLIC_LINK_MODAL:\n        case ActionTypes.TOGGLE_QUICK_SWITCH_MODAL:\n        case ActionTypes.TOGGLE_CHANNEL_PURPOSE_UPDATE_MODAL:\n        case ActionTypes.TOGGLE_CHANNEL_NAME_UPDATE_MODAL:\n        case ActionTypes.TOGGLE_LEAVE_PRIVATE_CHANNEL_MODAL:\n            this.emit(type, value, args);\n            break;\n        }\n    }\n}\n\nconst ModalStore = new ModalStoreClass();\nexport default ModalStore;\n","// Copyright (c) 2015-present Mattermost, Inc. All Rights Reserved.\n// See LICENSE.txt for license information.\n\nimport PropTypes from 'prop-types';\nimport React from 'react';\nimport {Modal} from 'react-bootstrap';\nimport {FormattedMessage} from 'react-intl';\n\nimport SuccessIcon from 'components/icon/success_icon';\n\nexport default class GetLinkModal extends React.PureComponent {\n    static propTypes = {\n        show: PropTypes.bool.isRequired,\n        onHide: PropTypes.func.isRequired,\n        title: PropTypes.string.isRequired,\n        helpText: PropTypes.string,\n        link: PropTypes.string.isRequired,\n    };\n\n    static defaultProps = {\n        helpText: null,\n    };\n\n    constructor(props) {\n        super(props);\n        this.state = {\n            copiedLink: false,\n        };\n    }\n\n    onHide = () => {\n        this.setState({copiedLink: false});\n        this.props.onHide();\n    }\n\n    copyLink = () => {\n        const textarea = this.refs.textarea;\n        textarea.focus();\n        textarea.setSelectionRange(0, this.props.link.length);\n\n        try {\n            if (document.execCommand('copy')) {\n                this.setState({copiedLink: true});\n            } else {\n                this.setState({copiedLink: false});\n            }\n        } catch (err) {\n            this.setState({copiedLink: false});\n        }\n    }\n\n    render() {\n        let helpText = null;\n        if (this.props.helpText) {\n            helpText = (\n                <p>\n                    {this.props.helpText}\n                    <br/>\n                    <br/>\n                </p>\n            );\n        }\n\n        let copyLink = null;\n\n        if (document.queryCommandSupported('copy')) {\n            copyLink = (\n                <button\n                    id='linkModalCopyLink'\n                    data-copy-btn='true'\n                    type='button'\n                    className='btn btn-primary pull-left'\n                    onClick={this.copyLink}\n                >\n                    <FormattedMessage\n                        id='get_link.copy'\n                        defaultMessage='Copy Link'\n                    />\n                </button>\n            );\n        }\n\n        const linkText = (\n            <textarea\n                id='linkModalTextArea'\n                className='form-control no-resize min-height'\n                ref='textarea'\n                value={this.props.link}\n                onClick={this.copyLink}\n                readOnly={true}\n            />\n        );\n\n        let copyLinkConfirm = null;\n        if (this.state.copiedLink) {\n            copyLinkConfirm = (\n                <p className='alert alert-success alert--confirm'>\n                    <SuccessIcon/>\n                    <FormattedMessage\n                        id='get_link.clipboard'\n                        defaultMessage=' Link copied'\n                    />\n                </p>\n            );\n        }\n\n        return (\n            <Modal\n                dialogClassName='a11y__modal'\n                show={this.props.show}\n                onHide={this.onHide}\n                role='dialog'\n                aria-labelledby='getLinkModalLabel'\n            >\n                <Modal.Header\n                    id='getLinkModalLabel'\n                    closeButton={true}\n                >\n                    <h4 className='modal-title'>{this.props.title}</h4>\n                </Modal.Header>\n                <Modal.Body>\n                    {helpText}\n                    {linkText}\n                </Modal.Body>\n                <Modal.Footer>\n                    <button\n                        id='linkModalCloseButton'\n                        type='button'\n                        className='btn btn-link'\n                        onClick={this.onHide}\n                    >\n                        <FormattedMessage\n                            id='get_link.close'\n                            defaultMessage='Close'\n                        />\n                    </button>\n                    {copyLink}\n                    {copyLinkConfirm}\n                </Modal.Footer>\n            </Modal>\n        );\n    }\n}\n","// Copyright (c) 2015-present Mattermost, Inc. All Rights Reserved.\n// See LICENSE.txt for license information.\n\nimport React from 'react';\nimport PropTypes from 'prop-types';\n\nimport ModalStore from 'stores/modal_store.jsx';\nimport Constants from 'utils/constants.jsx';\nimport * as Utils from 'utils/utils.jsx';\nimport GetLinkModal from 'components/get_link_modal.jsx';\n\nexport default class GetPostLinkModal extends React.PureComponent {\n    static propTypes = {\n\n        /**\n         * URL of current team\n         */\n        currentTeamUrl: PropTypes.string.isRequired,\n    };\n\n    constructor(props) {\n        super(props);\n\n        this.handleToggle = this.handleToggle.bind(this);\n        this.hide = this.hide.bind(this);\n\n        this.state = {\n            show: false,\n            post: {},\n        };\n    }\n\n    componentDidMount() {\n        ModalStore.addModalListener(Constants.ActionTypes.TOGGLE_GET_POST_LINK_MODAL, this.handleToggle);\n    }\n\n    componentWillUnmount() {\n        ModalStore.removeModalListener(Constants.ActionTypes.TOGGLE_GET_POST_LINK_MODAL, this.handleToggle);\n    }\n\n    handleToggle(value, args) {\n        this.setState({\n            show: value,\n            post: args.post,\n        });\n    }\n\n    hide() {\n        this.setState({\n            show: false,\n        });\n    }\n\n    render() {\n        const postUrl = this.props.currentTeamUrl + '/pl/' + this.state.post.id;\n        return (\n            <GetLinkModal\n                show={this.state.show}\n                onHide={this.hide}\n                title={Utils.localizeMessage('get_post_link_modal.title', 'Copy Permalink')}\n                helpText={Utils.localizeMessage('get_post_link_modal.help', 'The link below allows authorized users to see your post.')}\n                link={postUrl}\n            />\n        );\n    }\n}\n","// Copyright (c) 2015-present Mattermost, Inc. All Rights Reserved.\n// See LICENSE.txt for license information.\n\nimport {connect} from 'react-redux';\nimport {getCurrentTeam} from 'mattermost-redux/selectors/entities/teams';\n\nimport {getSiteURL} from 'utils/url.jsx';\n\nimport GetPostLinkModal from './get_post_link_modal';\n\nfunction mapStateToProps(state) {\n    const currentTeam = getCurrentTeam(state) || {};\n    const currentTeamUrl = `${getSiteURL()}/${currentTeam.name}`;\n    return {\n        currentTeamUrl,\n    };\n}\n\nexport default connect(mapStateToProps)(GetPostLinkModal);\n","// Copyright (c) 2015-present Mattermost, Inc. All Rights Reserved.\n// See LICENSE.txt for license information.\n\nimport React from 'react';\nimport PropTypes from 'prop-types';\n\nimport ModalStore from 'stores/modal_store.jsx';\nimport Constants from 'utils/constants.jsx';\nimport * as Utils from 'utils/utils.jsx';\nimport {getSiteURL} from 'utils/url.jsx';\nimport GetLinkModal from 'components/get_link_modal.jsx';\n\nexport default class GetTeamInviteLinkModal extends React.PureComponent {\n    static propTypes = {\n\n        /**\n         * Current team object\n         */\n        currentTeam: PropTypes.object.isRequired,\n\n        /**\n         * Global config object\n         */\n        config: PropTypes.object.isRequired,\n    }\n\n    static defaultProps = {\n        currentTeam: {},\n    }\n\n    constructor(props) {\n        super(props);\n        this.state = {\n            show: false,\n        };\n    }\n\n    componentDidMount() {\n        ModalStore.addModalListener(Constants.ActionTypes.TOGGLE_GET_TEAM_INVITE_LINK_MODAL, this.handleToggle);\n    }\n\n    componentWillUnmount() {\n        ModalStore.removeModalListener(Constants.ActionTypes.TOGGLE_GET_TEAM_INVITE_LINK_MODAL, this.handleToggle);\n    }\n\n    handleToggle = (value) => {\n        this.setState({\n            show: value,\n        });\n    }\n\n    onHide = () => {\n        this.handleToggle(false);\n    }\n\n    render() {\n        const inviteUrl = getSiteURL() + '/signup_user_complete/?id=' + this.props.currentTeam.invite_id;\n\n        let helpText;\n        if (this.props.config.EnableUserCreation === 'true') {\n            helpText = Utils.localizeMessage('get_team_invite_link_modal.help', 'Send teammates the link below for them to sign-up to this team site. The Team Invite Link can be shared with multiple teammates as it does not change unless it\\'s regenerated in Team Settings by a Team Admin.');\n        } else {\n            helpText = Utils.localizeMessage('get_team_invite_link_modal.helpDisabled', 'User creation has been disabled for your team. Please ask your team administrator for details.');\n        }\n\n        return (\n            <GetLinkModal\n                show={this.state.show}\n                onHide={this.onHide}\n                title={Utils.localizeMessage('get_team_invite_link_modal.title', 'Team Invite Link')}\n                helpText={helpText}\n                link={inviteUrl}\n            />\n        );\n    }\n}\n","// Copyright (c) 2015-present Mattermost, Inc. All Rights Reserved.\n// See LICENSE.txt for license information.\nimport {connect} from 'react-redux';\nimport {getCurrentTeam} from 'mattermost-redux/selectors/entities/teams';\nimport {getConfig} from 'mattermost-redux/selectors/entities/general';\n\nimport GetTeamInviteLinkModal from './get_team_invite_link_modal.jsx';\n\nfunction mapStateToProps(state) {\n    return {\n        currentTeam: getCurrentTeam(state),\n        config: getConfig(state),\n    };\n}\n\nexport default connect(mapStateToProps)(GetTeamInviteLinkModal);\n","// Copyright (c) 2015-present Mattermost, Inc. All Rights Reserved.\n// See LICENSE.txt for license information.\n\nimport React from 'react';\nimport PropTypes from 'prop-types';\n\nimport ModalStore from 'stores/modal_store.jsx';\nimport Constants from 'utils/constants.jsx';\nimport * as Utils from 'utils/utils.jsx';\nimport GetLinkModal from 'components/get_link_modal.jsx';\n\nexport default class GetPublicLinkModal extends React.PureComponent {\n    static propTypes = {\n\n        /**\n         * Public link of the file\n         */\n        link: PropTypes.string,\n\n        actions: PropTypes.shape({\n\n            /**\n             * An action to get public link\n             */\n            getFilePublicLink: PropTypes.func.isRequired,\n        }).isRequired,\n    }\n\n    static defaultProps = {\n        link: '',\n    }\n\n    constructor(props) {\n        super(props);\n        this.state = {\n            show: false,\n            fileId: '',\n        };\n    }\n\n    componentWillUnmount() {\n        ModalStore.removeModalListener(Constants.ActionTypes.TOGGLE_GET_PUBLIC_LINK_MODAL, this.handleToggle);\n    }\n\n    componentDidMount() {\n        ModalStore.addModalListener(Constants.ActionTypes.TOGGLE_GET_PUBLIC_LINK_MODAL, this.handleToggle);\n    }\n\n    componentDidUpdate(prevProps, prevState) {\n        if (this.state.show && !prevState.show) {\n            this.props.actions.getFilePublicLink(this.state.fileId);\n        }\n    }\n\n    handleToggle = (value, args) => {\n        this.setState({\n            show: value,\n            fileId: args.fileId,\n        });\n    }\n\n    onHide = () => {\n        this.setState({\n            show: false,\n        });\n    }\n\n    render() {\n        return (\n            <GetLinkModal\n                show={this.state.show}\n                onHide={this.onHide}\n                title={Utils.localizeMessage('get_public_link_modal.title', 'Copy Public Link')}\n                helpText={Utils.localizeMessage('get_public_link_modal.help', 'The link below allows anyone to see this file without being registered on this server.')}\n                link={this.props.link}\n            />\n        );\n    }\n}\n","// Copyright (c) 2015-present Mattermost, Inc. All Rights Reserved.\n// See LICENSE.txt for license information.\nimport {connect} from 'react-redux';\nimport {bindActionCreators} from 'redux';\nimport {getFilePublicLink} from 'mattermost-redux/actions/files';\nimport * as Selectors from 'mattermost-redux/selectors/entities/files';\n\nimport GetPublicLinkModal from './get_public_link_modal.jsx';\n\nfunction mapStateToProps(state) {\n    return {\n        link: Selectors.getFilePublicLink(state).link,\n    };\n}\n\nfunction mapDispatchToProps(dispatch) {\n    return {\n        actions: bindActionCreators({\n            getFilePublicLink,\n        }, dispatch),\n    };\n}\n\nexport default connect(mapStateToProps, mapDispatchToProps)(GetPublicLinkModal);\n","// Copyright (c) 2015-present Mattermost, Inc. All Rights Reserved.\n// See LICENSE.txt for license information.\n\nimport React from 'react';\nimport PropTypes from 'prop-types';\nimport {FormattedMessage, injectIntl, intlShape} from 'react-intl';\n\nimport ModalStore from 'stores/modal_store.jsx';\nimport Constants from 'utils/constants.jsx';\nimport ConfirmModal from 'components/confirm_modal.jsx';\n\nclass LeavePrivateChannelModal extends React.Component {\n    static propTypes = {\n        actions: PropTypes.shape({\n            leaveChannel: PropTypes.func.isRequired,\n        }).isRequired,\n        intl: intlShape.isRequired,\n    };\n\n    constructor(props) {\n        super(props);\n\n        this.state = {\n            show: false,\n            channel: null,\n        };\n    }\n\n    componentDidMount() {\n        ModalStore.addModalListener(Constants.ActionTypes.TOGGLE_LEAVE_PRIVATE_CHANNEL_MODAL, this.handleToggle);\n    }\n\n    componentWillUnmount() {\n        ModalStore.removeModalListener(Constants.ActionTypes.TOGGLE_LEAVE_PRIVATE_CHANNEL_MODAL, this.handleToggle);\n    }\n\n    handleKeyPress = (e) => {\n        if (e.key === 'Enter' && this.state.show) {\n            this.handleSubmit();\n        }\n    };\n\n    handleSubmit = () => {\n        const {actions} = this.props;\n        const {channel} = this.state;\n\n        if (channel) {\n            const channelId = channel.id;\n            actions.leaveChannel(channelId).then((result) => {\n                if (result.data) {\n                    this.handleHide();\n                }\n            });\n        }\n    };\n\n    handleToggle = (value) => {\n        this.setState({\n            channel: value,\n            show: value !== null,\n        });\n    };\n\n    handleHide = () => {\n        this.setState({\n            show: false,\n            channel: null,\n        });\n    };\n\n    render() {\n        let title = '';\n        let message = '';\n        if (this.state.channel) {\n            title = (\n                <FormattedMessage\n                    id='leave_private_channel_modal.title'\n                    defaultMessage='Leave Private Channel {channel}'\n                    values={{\n                        channel: <b>{this.state.channel.display_name}</b>,\n                    }}\n                />\n            );\n\n            message = (\n                <FormattedMessage\n                    id='leave_private_channel_modal.message'\n                    defaultMessage='Are you sure you wish to leave the private channel {channel}? You must be re-invited in order to re-join this channel in the future.'\n                    values={{\n                        channel: <b>{this.state.channel.display_name}</b>,\n                    }}\n                />\n            );\n        }\n\n        const buttonClass = 'btn btn-danger';\n        const button = (\n            <FormattedMessage\n                id='leave_private_channel_modal.leave'\n                defaultMessage='Yes, leave channel'\n            />\n        );\n\n        return (\n            <ConfirmModal\n                show={this.state.show}\n                title={title}\n                message={message}\n                confirmButtonClass={buttonClass}\n                confirmButtonText={button}\n                onConfirm={this.handleSubmit}\n                onCancel={this.handleHide}\n            />\n        );\n    }\n}\n\nexport default injectIntl(LeavePrivateChannelModal);\n","// Copyright (c) 2015-present Mattermost, Inc. All Rights Reserved.\n// See LICENSE.txt for license information.\n\nimport {connect} from 'react-redux';\nimport {bindActionCreators} from 'redux';\n\nimport {leaveChannel} from 'actions/views/channel';\n\nimport LeavePrivateChannelModal from './leave_private_channel_modal.jsx';\n\nfunction mapDispatchToProps(dispatch) {\n    return {\n        actions: bindActionCreators({\n            leaveChannel,\n        }, dispatch),\n    };\n}\n\nexport default connect(null, mapDispatchToProps)(LeavePrivateChannelModal);\n","// Copyright (c) 2015-present Mattermost, Inc. All Rights Reserved.\n// See LICENSE.txt for license information.\n\nimport PropTypes from 'prop-types';\nimport React from 'react';\nimport {FormattedMessage} from 'react-intl';\nimport {Preferences} from 'mattermost-redux/constants';\n\nimport ConfirmModal from 'components/confirm_modal.jsx';\nimport {toTitleCase} from 'utils/utils.jsx';\nimport {UserStatuses} from 'utils/constants.jsx';\nimport {t} from 'utils/i18n';\n\nexport default class ResetStatusModal extends React.PureComponent {\n    static propTypes = {\n\n        /*\n         * The user's preference for whether their status is automatically reset\n         */\n        autoResetPref: PropTypes.string,\n\n        /*\n         * Props value is used to update currentUserStatus\n         */\n        currentUserStatus: PropTypes.string,\n\n        /*\n         * Props value is used to reset status from status_dropdown\n         */\n        newStatus: PropTypes.string,\n\n        /**\n         * Function called when modal is dismissed\n         */\n        onHide: PropTypes.func,\n        actions: PropTypes.shape({\n\n            /*\n             * Function to get and then reset the user's status if needed\n             */\n            autoResetStatus: PropTypes.func.isRequired,\n\n            /*\n             * Function to set the status for a user\n             */\n            setStatus: PropTypes.func.isRequired,\n\n            /*\n             * Function to save user preferences\n             */\n            savePreferences: PropTypes.func.isRequired,\n        }).isRequired,\n    };\n\n    constructor(props) {\n        super(props);\n\n        this.state = {\n            show: false,\n            currentUserStatus: {},\n            newStatus: props.newStatus || 'online',\n        };\n    }\n\n    componentDidMount() {\n        this.props.actions.autoResetStatus().then(\n            (status) => {\n                const statusIsManual = status.manual;\n                const autoResetPrefNotSet = this.props.autoResetPref === '';\n\n                this.setState({\n                    currentUserStatus: status, // Set in state until status refactor where we store 'manual' field in redux\n                    show: Boolean(status.status === UserStatuses.OUT_OF_OFFICE || (statusIsManual && autoResetPrefNotSet)),\n                });\n            }\n        );\n    }\n\n    hideModal = () => {\n        this.setState({show: false});\n    };\n\n    onConfirm = (checked) => {\n        this.hideModal();\n\n        const newStatus = {...this.state.currentUserStatus};\n        newStatus.status = this.state.newStatus;\n        this.props.actions.setStatus(newStatus);\n\n        if (checked) {\n            const pref = {category: Preferences.CATEGORY_AUTO_RESET_MANUAL_STATUS, user_id: newStatus.user_id, name: newStatus.user_id, value: 'true'};\n            this.props.actions.savePreferences(pref.user_id, [pref]);\n        }\n    };\n\n    onCancel = (checked) => {\n        this.hideModal();\n\n        if (checked) {\n            const status = {...this.state.currentUserStatus};\n            const pref = {category: Preferences.CATEGORY_AUTO_RESET_MANUAL_STATUS, user_id: status.user_id, name: status.user_id, value: 'false'};\n            this.props.actions.savePreferences(pref.user_id, [pref]);\n        }\n    };\n\n    renderModalMessage = () => {\n        if (this.props.currentUserStatus === UserStatuses.OUT_OF_OFFICE) {\n            return (\n                <FormattedMessage\n                    id={`modal.manual_status.auto_responder.message_${this.state.newStatus}`}\n                    defaultMessage='Would you like to switch your status to \"{status}\" and disable Automatic Replies?'\n                    values={{\n                        status: toTitleCase(this.state.newStatus),\n                    }}\n                />\n            );\n        }\n\n        return (\n            <FormattedMessage\n                id={`modal.manual_status.message_${this.state.newStatus}`}\n                defaultMessage='Would you like to switch your status to \"{status}\"?'\n                values={{\n                    status: toTitleCase(this.state.newStatus),\n                }}\n            />\n        );\n    };\n\n    render() {\n        const userStatus = this.state.currentUserStatus.status || '';\n        const userStatusId = 'modal.manual_status.title_' + userStatus;\n        const manualStatusTitle = (\n            <FormattedMessage\n                id={userStatusId}\n                defaultMessage='Your status is set to \"{status}\"'\n                values={{\n                    status: toTitleCase(userStatus),\n                }}\n            />\n        );\n\n        const manualStatusMessage = this.renderModalMessage();\n\n        const manualStatusButton = (\n            <FormattedMessage\n                id={`modal.manual_status.button_${this.state.newStatus}`}\n                defaultMessage='Yes, set my status to \"{status}\"'\n                values={{\n                    status: toTitleCase(this.state.newStatus),\n                }}\n            />\n        );\n        const manualStatusId = 'modal.manual_status.cancel_' + userStatus;\n        const manualStatusCancel = (\n            <FormattedMessage\n                id={manualStatusId}\n                defaultMessage='No, keep it as \"{status}\"'\n                values={{\n                    status: toTitleCase(userStatus),\n                }}\n            />\n        );\n\n        const manualStatusCheckbox = (\n            <FormattedMessage\n                id='modal.manual_status.ask'\n                defaultMessage='Do not ask me again'\n            />\n        );\n\n        const showCheckbox = this.props.currentUserStatus !== UserStatuses.OUT_OF_OFFICE;\n\n        return (\n            <ConfirmModal\n                show={this.state.show}\n                title={manualStatusTitle}\n                message={manualStatusMessage}\n                confirmButtonText={manualStatusButton}\n                onConfirm={this.onConfirm}\n                cancelButtonText={manualStatusCancel}\n                onCancel={this.onCancel}\n                onExited={this.props.onHide}\n                showCheckbox={showCheckbox}\n                checkboxText={manualStatusCheckbox}\n            />\n        );\n    }\n}\n\nt('modal.manual_status.auto_responder.message_');\nt('modal.manual_status.auto_responder.message_away');\nt('modal.manual_status.auto_responder.message_dnd');\nt('modal.manual_status.auto_responder.message_offline');\nt('modal.manual_status.auto_responder.message_online');\nt('modal.manual_status.button_');\nt('modal.manual_status.button_away');\nt('modal.manual_status.button_dnd');\nt('modal.manual_status.button_offline');\nt('modal.manual_status.button_online');\nt('modal.manual_status.cancel_');\nt('modal.manual_status.cancel_away');\nt('modal.manual_status.cancel_dnd');\nt('modal.manual_status.cancel_offline');\nt('modal.manual_status.cancel_ooo');\nt('modal.manual_status.message_');\nt('modal.manual_status.message_away');\nt('modal.manual_status.message_dnd');\nt('modal.manual_status.message_offline');\nt('modal.manual_status.message_online');\nt('modal.manual_status.title_');\nt('modal.manual_status.title_away');\nt('modal.manual_status.title_dnd');\nt('modal.manual_status.title_offline');\nt('modal.manual_status.title_ooo');\n","// Copyright (c) 2015-present Mattermost, Inc. All Rights Reserved.\n// See LICENSE.txt for license information.\n\nimport {connect} from 'react-redux';\nimport {bindActionCreators} from 'redux';\nimport {savePreferences} from 'mattermost-redux/actions/preferences';\nimport {setStatus} from 'mattermost-redux/actions/users';\nimport {Preferences} from 'mattermost-redux/constants';\nimport {get} from 'mattermost-redux/selectors/entities/preferences';\nimport {getStatusForUserId} from 'mattermost-redux/selectors/entities/users';\n\nimport {autoResetStatus} from 'actions/user_actions.jsx';\n\nimport ResetStatusModal from './reset_status_modal.jsx';\n\nfunction mapStateToProps(state) {\n    const {currentUserId} = state.entities.users;\n    return {\n        autoResetPref: get(state, Preferences.CATEGORY_AUTO_RESET_MANUAL_STATUS, currentUserId, ''),\n        currentUserStatus: getStatusForUserId(state, currentUserId),\n    };\n}\n\nfunction mapDispatchToProps(dispatch) {\n    return {\n        actions: bindActionCreators({\n            autoResetStatus,\n            setStatus,\n            savePreferences,\n        }, dispatch),\n    };\n}\n\nexport default connect(mapStateToProps, mapDispatchToProps)(ResetStatusModal);\n","// Copyright (c) 2015-present Mattermost, Inc. All Rights Reserved.\n// See LICENSE.txt for license information.\n\nimport PropTypes from 'prop-types';\nimport React from 'react';\nimport {Modal} from 'react-bootstrap';\nimport {defineMessages, injectIntl, intlShape} from 'react-intl';\n\nimport ModalStore from 'stores/modal_store.jsx';\nimport Constants from 'utils/constants.jsx';\nimport {t} from 'utils/i18n';\n\nconst allShortcuts = defineMessages({\n    mainHeader: {\n        default: {\n            id: t('shortcuts.header'),\n            defaultMessage: 'Keyboard Shortcuts\\tCtrl|/',\n        },\n        mac: {\n            id: t('shortcuts.header.mac'),\n            defaultMessage: 'Keyboard Shortcuts\\t⌘|/',\n        },\n    },\n    navHeader: {\n        id: t('shortcuts.nav.header'),\n        defaultMessage: 'Navigation',\n    },\n    navPrev: {\n        default: {\n            id: t('shortcuts.nav.prev'),\n            defaultMessage: 'Previous channel:\\tAlt|Up',\n        },\n        mac: {\n            id: t('shortcuts.nav.prev.mac'),\n            defaultMessage: 'Previous channel:\\t⌥|Up',\n        },\n    },\n    navNext: {\n        default: {\n            id: t('shortcuts.nav.next'),\n            defaultMessage: 'Next channel:\\tAlt|Down',\n        },\n        mac: {\n            id: t('shortcuts.nav.next.mac'),\n            defaultMessage: 'Next channel:\\t⌥|Down',\n        },\n    },\n    navUnreadPrev: {\n        default: {\n            id: t('shortcuts.nav.unread_prev'),\n            defaultMessage: 'Previous unread channel:\\tAlt|Shift|Up',\n        },\n        mac: {\n            id: t('shortcuts.nav.unread_prev.mac'),\n            defaultMessage: 'Previous unread channel:\\t⌥|Shift|Up',\n        },\n    },\n    navUnreadNext: {\n        default: {\n            id: t('shortcuts.nav.unread_next'),\n            defaultMessage: 'Next unread channel:\\tAlt|Shift|Down',\n        },\n        mac: {\n            id: t('shortcuts.nav.unread_next.mac'),\n            defaultMessage: 'Next unread channel:\\t⌥|Shift|Down',\n        },\n    },\n    navSwitcher: {\n        default: {\n            id: t('shortcuts.nav.switcher'),\n            defaultMessage: 'Quick channel switcher:\\tCtrl|K',\n        },\n        mac: {\n            id: t('shortcuts.nav.switcher.mac'),\n            defaultMessage: 'Quick channel switcher:\\t⌘|K',\n        },\n    },\n    navDMMenu: {\n        default: {\n            id: t('shortcuts.nav.direct_messages_menu'),\n            defaultMessage: 'Direct messages menu:\\tCtrl|Shift|K',\n        },\n        mac: {\n            id: t('shortcuts.nav.direct_messages_menu.mac'),\n            defaultMessage: 'Direct messages menu:\\t⌘|Shift|K',\n        },\n    },\n    navSettings: {\n        default: {\n            id: t('shortcuts.nav.settings'),\n            defaultMessage: 'Account settings:\\tCtrl|Shift|A',\n        },\n        mac: {\n            id: t('shortcuts.nav.settings.mac'),\n            defaultMessage: 'Account settings:\\t⌘|Shift|A',\n        },\n    },\n    navMentions: {\n        default: {\n            id: t('shortcuts.nav.recent_mentions'),\n            defaultMessage: 'Recent mentions:\\tCtrl|Shift|M',\n        },\n        mac: {\n            id: t('shortcuts.nav.recent_mentions.mac'),\n            defaultMessage: 'Recent mentions:\\t⌘|Shift|M',\n        },\n    },\n    navFocusCenter: {\n        default: {\n            id: t('shortcuts.nav.focus_center'),\n            defaultMessage: 'Set focus to input field:\\tCtrl|Shift|L',\n        },\n        mac: {\n            id: t('shortcuts.nav.focus_center.mac'),\n            defaultMessage: 'Set focus to input field:\\t⌘|Shift|L',\n        },\n    },\n    msgHeader: {\n        id: t('shortcuts.msgs.header'),\n        defaultMessage: 'Messages',\n    },\n    msgInputHeader: {\n        id: t('shortcuts.msgs.input.header'),\n        defaultMessage: 'Works inside an empty input field',\n    },\n    msgEdit: {\n        id: t('shortcuts.msgs.edit'),\n        defaultMessage: 'Edit last message in channel:\\tUp',\n    },\n    msgReply: {\n        id: t('shortcuts.msgs.reply'),\n        defaultMessage: 'Reply to last message in channel:\\tShift|Up',\n    },\n    msgReprintPrev: {\n        default: {\n            id: t('shortcuts.msgs.reprint_prev'),\n            defaultMessage: 'Reprint previous message:\\tCtrl|Up',\n        },\n        mac: {\n            id: t('shortcuts.msgs.reprint_prev.mac'),\n            defaultMessage: 'Reprint previous message:\\t⌘|Up',\n        },\n    },\n    msgReprintNext: {\n        default: {\n            id: t('shortcuts.msgs.reprint_next'),\n            defaultMessage: 'Reprint next message:\\tCtrl|Down',\n        },\n        mac: {\n            id: t('shortcuts.msgs.reprint_next.mac'),\n            defaultMessage: 'Reprint next message:\\t⌘|Down',\n        },\n    },\n    msgCompHeader: {\n        id: t('shortcuts.msgs.comp.header'),\n        defaultMessage: 'Autocomplete',\n    },\n    msgCompUsername: {\n        id: t('shortcuts.msgs.comp.username'),\n        defaultMessage: 'Username:\\t@|[a-z]|Tab',\n    },\n    msgCompChannel: {\n        id: t('shortcuts.msgs.comp.channel'),\n        defaultMessage: 'Channel:\\t~|[a-z]|Tab',\n    },\n    msgCompEmoji: {\n        id: t('shortcuts.msgs.comp.emoji'),\n        defaultMessage: 'Emoji:\\t:|[a-z]|Tab',\n    },\n    filesHeader: {\n        id: t('shortcuts.files.header'),\n        defaultMessage: 'Files',\n    },\n    filesUpload: {\n        default: {\n            id: t('shortcuts.files.upload'),\n            defaultMessage: 'Upload files:\\tCtrl|U',\n        },\n        mac: {\n            id: t('shortcuts.files.upload.mac'),\n            defaultMessage: 'Upload files:\\t⌘|U',\n        },\n    },\n    browserHeader: {\n        id: t('shortcuts.browser.header'),\n        defaultMessage: 'Built-in Browser Commands',\n    },\n    browserChannelPrev: {\n        default: {\n            id: t('shortcuts.browser.channel_prev'),\n            defaultMessage: 'Back in history:\\tAlt|Left',\n        },\n        mac: {\n            id: t('shortcuts.browser.channel_prev.mac'),\n            defaultMessage: 'Back in history:\\t⌘|[',\n        },\n    },\n    browserChannelNext: {\n        default: {\n            id: t('shortcuts.browser.channel_next'),\n            defaultMessage: 'Forward in history:\\tAlt|Right',\n        },\n        mac: {\n            id: t('shortcuts.browser.channel_next.mac'),\n            defaultMessage: 'Forward in history:\\t⌘|]',\n        },\n    },\n    browserFontIncrease: {\n        default: {\n            id: t('shortcuts.browser.font_increase'),\n            defaultMessage: 'Zoom in:\\tCtrl|+',\n        },\n        mac: {\n            id: t('shortcuts.browser.font_increase.mac'),\n            defaultMessage: 'Zoom in:\\t⌘|+',\n        },\n    },\n    browserFontDecrease: {\n        default: {\n            id: t('shortcuts.browser.font_decrease'),\n            defaultMessage: 'Zoom out:\\tCtrl|-',\n        },\n        mac: {\n            id: t('shortcuts.browser.font_decrease.mac'),\n            defaultMessage: 'Zoom out:\\t⌘|-',\n        },\n    },\n    browserInputHeader: {\n        id: t('shortcuts.browser.input.header'),\n        defaultMessage: 'Works inside an input field',\n    },\n    browserHighlightPrev: {\n        id: t('shortcuts.browser.highlight_prev'),\n        defaultMessage: 'Highlight text to the previous line:\\tShift|Up',\n    },\n    browserHighlightNext: {\n        id: t('shortcuts.browser.highlight_next'),\n        defaultMessage: 'Highlight text to the next line:\\tShift|Down',\n    },\n    browserNewline: {\n        id: t('shortcuts.browser.newline'),\n        defaultMessage: 'Create a new line:\\tShift|Enter',\n    },\n    info: {\n        id: t('shortcuts.info'),\n        defaultMessage: 'Begin a message with / for a list of all the commands at your disposal.',\n    },\n});\n\nclass ShortcutsModal extends React.PureComponent {\n    static propTypes = {\n        intl: intlShape.isRequired,\n        isMac: PropTypes.bool.isRequired,\n    }\n\n    constructor(props) {\n        super(props);\n\n        this.state = {\n            show: false,\n        };\n    }\n\n    componentDidMount() {\n        ModalStore.addModalListener(Constants.ActionTypes.TOGGLE_SHORTCUTS_MODAL, this.handleToggle);\n    }\n\n    componentWillUnmount() {\n        ModalStore.removeModalListener(Constants.ActionTypes.TOGGLE_SHORTCUTS_MODAL, this.handleToggle);\n    }\n\n    handleToggle = () => {\n        //toggles the state of shortcut dialog\n        this.setState({\n            show: !this.state.show,\n        });\n    }\n\n    handleHide = () => {\n        this.setState({show: false});\n    }\n\n    getShortcuts() {\n        const {isMac} = this.props;\n        const shortcuts = {};\n        Object.keys(allShortcuts).forEach((s) => {\n            if (isMac && allShortcuts[s].mac) {\n                shortcuts[s] = allShortcuts[s].mac;\n            } else if (!isMac && allShortcuts[s].default) {\n                shortcuts[s] = allShortcuts[s].default;\n            } else {\n                shortcuts[s] = allShortcuts[s];\n            }\n        });\n\n        return shortcuts;\n    }\n\n    render() {\n        const shortcuts = this.getShortcuts();\n        const {formatMessage} = this.props.intl;\n\n        return (\n            <Modal\n                dialogClassName='a11y__modal shortcuts-modal'\n                show={this.state.show}\n                onHide={this.handleHide}\n                onExited={this.handleHide}\n                role='dialog'\n                aria-labelledby='shortcutsModalLabel'\n            >\n                <div className='shortcuts-content'>\n                    <Modal.Header closeButton={true}>\n                        <Modal.Title\n                            componentClass='h1'\n                            id='shortcutsModalLabel'\n                        >\n                            <strong>{renderShortcut(formatMessage(shortcuts.mainHeader))}</strong>\n                        </Modal.Title>\n                    </Modal.Header>\n                    <Modal.Body ref='modalBody'>\n                        <div className='row'>\n                            <div className='col-sm-4'>\n                                <div className='section'>\n                                    <div>\n                                        <h4 className='section-title'><strong>{formatMessage(shortcuts.navHeader)}</strong></h4>\n                                        {renderShortcut(formatMessage(shortcuts.navPrev))}\n                                        {renderShortcut(formatMessage(shortcuts.navNext))}\n                                        {renderShortcut(formatMessage(shortcuts.navUnreadPrev))}\n                                        {renderShortcut(formatMessage(shortcuts.navUnreadNext))}\n                                        {renderShortcut(formatMessage(shortcuts.navSwitcher))}\n                                        {renderShortcut(formatMessage(shortcuts.navDMMenu))}\n                                        {renderShortcut(formatMessage(shortcuts.navSettings))}\n                                        {renderShortcut(formatMessage(shortcuts.navMentions))}\n                                        {renderShortcut(formatMessage(shortcuts.navFocusCenter))}\n                                    </div>\n                                </div>\n                            </div>\n                            <div className='col-sm-4'>\n                                <div className='section'>\n                                    <div>\n                                        <h4 className='section-title'><strong>{formatMessage(shortcuts.msgHeader)}</strong></h4>\n                                        <span><strong>{formatMessage(shortcuts.msgInputHeader)}</strong></span>\n                                        <div className='subsection'>\n                                            {renderShortcut(formatMessage(shortcuts.msgEdit))}\n                                            {renderShortcut(formatMessage(shortcuts.msgReply))}\n                                            {renderShortcut(formatMessage(shortcuts.msgReprintPrev))}\n                                            {renderShortcut(formatMessage(shortcuts.msgReprintNext))}\n                                        </div>\n                                        <span><strong>{formatMessage(shortcuts.msgCompHeader)}</strong></span>\n                                        <div className='subsection'>\n                                            {renderShortcut(formatMessage(shortcuts.msgCompUsername))}\n                                            {renderShortcut(formatMessage(shortcuts.msgCompChannel))}\n                                            {renderShortcut(formatMessage(shortcuts.msgCompEmoji))}\n                                        </div>\n                                    </div>\n                                </div>\n                            </div>\n                            <div className='col-sm-4'>\n                                <div className='section'>\n                                    <div>\n                                        <h4 className='section-title'><strong>{formatMessage(shortcuts.filesHeader)}</strong></h4>\n                                        {renderShortcut(formatMessage(shortcuts.filesUpload))}\n                                    </div>\n                                    <div className='section--lower'>\n                                        <h4 className='section-title'><strong>{formatMessage(shortcuts.browserHeader)}</strong></h4>\n                                        {renderShortcut(formatMessage(shortcuts.browserChannelPrev))}\n                                        {renderShortcut(formatMessage(shortcuts.browserChannelNext))}\n                                        {renderShortcut(formatMessage(shortcuts.browserFontIncrease))}\n                                        {renderShortcut(formatMessage(shortcuts.browserFontDecrease))}\n                                        <span><strong>{formatMessage(shortcuts.browserInputHeader)}</strong></span>\n                                        <div className='subsection'>\n                                            {renderShortcut(formatMessage(shortcuts.browserHighlightPrev))}\n                                            {renderShortcut(formatMessage(shortcuts.browserHighlightNext))}\n                                            {renderShortcut(formatMessage(shortcuts.browserNewline))}\n                                        </div>\n                                    </div>\n                                </div>\n                            </div>\n                        </div>\n                        <div className='info__label'>{formatMessage(shortcuts.info)}</div>\n                    </Modal.Body>\n                </div>\n            </Modal>\n        );\n    }\n}\n\nfunction renderShortcut(text) {\n    if (!text) {\n        return null;\n    }\n\n    const shortcut = text.split('\\t');\n    const description = <span>{shortcut[0]}</span>;\n\n    let keys = null;\n    if (shortcut.length > 1) {\n        keys = shortcut[1].split('|').map((key) => (\n            <span\n                className='shortcut-key'\n                key={key}\n            >\n                {key}\n            </span>\n        ));\n    }\n\n    return (\n        <div className='shortcut-line'>\n            {description}\n            {keys}\n        </div>\n    );\n}\n\nexport default injectIntl(ShortcutsModal);\n","// Copyright (c) 2015-present Mattermost, Inc. All Rights Reserved.\n// See LICENSE.txt for license information.\n\nimport PropTypes from 'prop-types';\nimport React from 'react';\nimport {FormattedMessage} from 'react-intl';\n\nimport fileOverlayImage from 'images/filesOverlay.png';\nimport overlayLogoImage from 'images/logoWhite.png';\n\nexport default function FileUploadOverlay(props) {\n    var overlayClass = 'file-overlay hidden';\n    if (props.overlayType === 'right') {\n        overlayClass += ' right-file-overlay';\n    } else if (props.overlayType === 'center') {\n        overlayClass += ' center-file-overlay';\n    }\n\n    return (\n        <div className={overlayClass}>\n            <div className='overlay__indent'>\n                <div className='overlay__circle'>\n                    <img\n                        className='overlay__files'\n                        src={fileOverlayImage}\n                        alt='Files'\n                    />\n                    <span>\n                        <FormattedMessage\n                            id='generic_icons.upload'\n                            defaultMessage='Upload Icon'\n                        >\n                            {(title) => (\n                                <i\n                                    className='fa fa-upload'\n                                    title={title}\n                                />\n                            )}\n                        </FormattedMessage>\n                        <FormattedMessage\n                            id='upload_overlay.info'\n                            defaultMessage='Drop a file to upload it.'\n                        />\n                    </span>\n                    <img\n                        className='overlay__logo'\n                        src={overlayLogoImage}\n                        width='100'\n                        alt='Logo'\n                    />\n                </div>\n            </div>\n        </div>\n    );\n}\n\nFileUploadOverlay.propTypes = {\n    overlayType: PropTypes.string,\n};\n","// Copyright (c) 2015-present Mattermost, Inc. All Rights Reserved.\n// See LICENSE.txt for license information.\n\nexport default class DelayedAction {\n    constructor(action) {\n        this.action = action;\n\n        this.timer = -1;\n\n        // bind fire since it doesn't get passed the correct this value with setTimeout\n        this.fire = this.fire.bind(this);\n    }\n\n    fire() {\n        this.action();\n\n        this.timer = -1;\n    }\n\n    fireAfter(timeout) {\n        if (this.timer >= 0) {\n            window.clearTimeout(this.timer);\n        }\n\n        this.timer = window.setTimeout(this.fire, timeout);\n    }\n\n    cancel() {\n        window.clearTimeout(this.timer);\n    }\n}\n","// Copyright (c) 2015-present Mattermost, Inc. All Rights Reserved.\n// See LICENSE.txt for license information.\n\nexport function connectionErrorCount(state) {\n    return state.views.system.websocketConnectionErrorCount;\n}\n","// Copyright (c) 2015-present Mattermost, Inc. All Rights Reserved.\n// See LICENSE.txt for license information.\n\nimport {Client4} from 'mattermost-redux/client';\nimport {unfavoriteChannel} from 'mattermost-redux/actions/channels';\nimport {savePreferences} from 'mattermost-redux/actions/preferences';\nimport {getCurrentChannel, getRedirectChannelNameForTeam} from 'mattermost-redux/selectors/entities/channels';\nimport {getCurrentUserId} from 'mattermost-redux/selectors/entities/users';\nimport {getCurrentRelativeTeamUrl, getCurrentTeamId} from 'mattermost-redux/selectors/entities/teams';\nimport {IntegrationTypes} from 'mattermost-redux/action_types';\n\nimport {openModal} from 'actions/views/modals';\nimport * as GlobalActions from 'actions/global_actions.jsx';\nimport * as PostActions from 'actions/post_actions.jsx';\n\nimport {isUrlSafe, getSiteURL} from 'utils/url.jsx';\nimport {localizeMessage, getUserIdFromChannelName} from 'utils/utils.jsx';\nimport * as UserAgent from 'utils/user_agent.jsx';\nimport {Constants, ModalIdentifiers} from 'utils/constants.jsx';\nimport {isFavoriteChannel} from 'utils/channel_utils.jsx';\nimport {browserHistory} from 'utils/browser_history';\n\nimport UserSettingsModal from 'components/user_settings/modal';\n\nexport function executeCommand(message, args) {\n    return async (dispatch, getState) => {\n        const state = getState();\n\n        let msg = message;\n\n        let cmdLength = msg.indexOf(' ');\n        if (cmdLength < 0) {\n            cmdLength = msg.length;\n        }\n        const cmd = msg.substring(0, cmdLength).toLowerCase();\n        msg = cmd + ' ' + msg.substring(cmdLength, msg.length).trim();\n\n        switch (cmd) {\n        case '/search':\n            dispatch(PostActions.searchForTerm(msg.substring(cmdLength + 1, msg.length)));\n            return {data: true};\n        case '/shortcuts':\n            if (UserAgent.isMobile()) {\n                const error = {message: localizeMessage('create_post.shortcutsNotSupported', 'Keyboard shortcuts are not supported on your device')};\n                return {error};\n            }\n\n            GlobalActions.toggleShortcutsModal();\n            return {data: true};\n        case '/leave': {\n        // /leave command not supported in reply threads.\n            if (args.channel_id && (args.root_id || args.parent_id)) {\n                GlobalActions.sendEphemeralPost('/leave is not supported in reply threads. Use it in the center channel instead.', args.channel_id, args.parent_id);\n                return {data: true};\n            }\n            const channel = getCurrentChannel(state);\n            if (channel.type === Constants.PRIVATE_CHANNEL) {\n                GlobalActions.showLeavePrivateChannelModal(channel);\n                return {data: true};\n            } else if (\n                channel.type === Constants.DM_CHANNEL ||\n                channel.type === Constants.GM_CHANNEL\n            ) {\n                let name;\n                let category;\n                if (channel.type === Constants.DM_CHANNEL) {\n                    name = getUserIdFromChannelName(channel);\n                    category = Constants.Preferences.CATEGORY_DIRECT_CHANNEL_SHOW;\n                } else {\n                    name = channel.id;\n                    category = Constants.Preferences.CATEGORY_GROUP_CHANNEL_SHOW;\n                }\n                const currentUserId = getCurrentUserId(state);\n                dispatch(savePreferences(currentUserId, [{category, name, user_id: currentUserId, value: 'false'}]));\n                if (isFavoriteChannel(channel)) {\n                    dispatch(unfavoriteChannel(channel.id));\n                }\n                const currentTeamId = getCurrentTeamId(state);\n                const redirectChannel = getRedirectChannelNameForTeam(state, currentTeamId);\n                browserHistory.push(`${getCurrentRelativeTeamUrl(state)}/channels/${redirectChannel}`);\n                return {data: true};\n            }\n            break;\n        }\n        case '/settings':\n            dispatch(openModal({ModalId: ModalIdentifiers.USER_SETTINGS, dialogType: UserSettingsModal}));\n            return {data: true};\n        case '/collapse':\n        case '/expand':\n            dispatch(PostActions.resetEmbedVisibility());\n        }\n\n        let data;\n        try {\n            data = await Client4.executeCommand(msg, args);\n        } catch (err) {\n            return {error: err};\n        }\n\n        const hasGotoLocation = data.goto_location && isUrlSafe(data.goto_location);\n\n        if (msg.trim() === '/logout') {\n            GlobalActions.emitUserLoggedOutEvent(hasGotoLocation ? data.goto_location : '/');\n            return {data: true};\n        }\n\n        if (data.trigger_id) {\n            dispatch({type: IntegrationTypes.RECEIVED_DIALOG_TRIGGER_ID, data: data.trigger_id});\n        }\n\n        if (hasGotoLocation) {\n            if (data.goto_location.startsWith('/')) {\n                browserHistory.push(data.goto_location);\n            } else if (data.goto_location.startsWith(getSiteURL())) {\n                browserHistory.push(data.goto_location.substr(getSiteURL().length));\n            } else {\n                window.open(data.goto_location);\n            }\n        }\n\n        return {data: true};\n    };\n}\n","// Copyright (c) 2015-present Mattermost, Inc. All Rights Reserved.\n// See LICENSE.txt for license information.\n\nexport function runMessageWillBePostedHooks(originalPost) {\n    return async (dispatch, getState) => {\n        const hooks = getState().plugins.components.MessageWillBePosted;\n        if (!hooks || hooks.length === 0) {\n            return {data: originalPost};\n        }\n\n        let post = originalPost;\n\n        for (const hook of hooks) {\n            const result = await hook.hook(post); // eslint-disable-line no-await-in-loop\n\n            if (result) {\n                if (result.error) {\n                    return {\n                        error: result.error,\n                    };\n                }\n\n                post = result.post;\n            }\n        }\n\n        return {data: post};\n    };\n}\n\nexport function runSlashCommandWillBePostedHooks(originalMessage, originalArgs) {\n    return async (dispatch, getState) => {\n        const hooks = getState().plugins.components.SlashCommandWillBePosted;\n        if (!hooks || hooks.length === 0) {\n            return {data: {message: originalMessage, args: originalArgs}};\n        }\n\n        let message = originalMessage;\n        let args = originalArgs;\n\n        for (const hook of hooks) {\n            const result = await hook.hook(message, args); // eslint-disable-line no-await-in-loop\n\n            if (result) {\n                if (result.error) {\n                    return {\n                        error: result.error,\n                    };\n                }\n\n                message = result.message;\n                args = result.args;\n            }\n        }\n\n        return {data: {message, args}};\n    };\n}\n","// Copyright (c) 2015-present Mattermost, Inc. All Rights Reserved.\n// See LICENSE.txt for license information.\n\nimport {createSelector} from 'reselect';\nimport {getCurrentUserId} from 'mattermost-redux/selectors/entities/users';\nimport {getCurrentTeamId} from 'mattermost-redux/selectors/entities/teams';\nimport {\n    makeGetMessageInHistoryItem,\n    makeGetCommentCountForPost,\n    getPost,\n    getPostIdsInChannel,\n} from 'mattermost-redux/selectors/entities/posts';\nimport {getCustomEmojisByName} from 'mattermost-redux/selectors/entities/emojis';\nimport {\n    removeReaction,\n    addMessageIntoHistory,\n    moveHistoryIndexBack,\n    moveHistoryIndexForward,\n} from 'mattermost-redux/actions/posts';\nimport {Posts} from 'mattermost-redux/constants';\nimport {isPostPendingOrFailed} from 'mattermost-redux/utils/post_utils';\n\nimport * as PostActions from 'actions/post_actions.jsx';\nimport {executeCommand} from 'actions/command';\nimport {runMessageWillBePostedHooks, runSlashCommandWillBePostedHooks} from 'actions/hooks';\nimport {setGlobalItem, actionOnGlobalItemsWithPrefix} from 'actions/storage';\nimport EmojiMap from 'utils/emoji_map';\nimport {getPostDraft} from 'selectors/rhs';\n\nimport * as Utils from 'utils/utils.jsx';\nimport {Constants, StoragePrefixes} from 'utils/constants.jsx';\n\nexport function clearCommentDraftUploads() {\n    return actionOnGlobalItemsWithPrefix(StoragePrefixes.COMMENT_DRAFT, (key, value) => {\n        if (value) {\n            return {...value, uploadsInProgress: []};\n        }\n        return value;\n    });\n}\n\nexport function updateCommentDraft(rootId, draft) {\n    return setGlobalItem(`${StoragePrefixes.COMMENT_DRAFT}${rootId}`, draft);\n}\n\nexport function makeOnMoveHistoryIndex(rootId, direction) {\n    const getMessageInHistory = makeGetMessageInHistoryItem(Posts.MESSAGE_TYPES.COMMENT);\n\n    return () => (dispatch, getState) => {\n        const draft = getPostDraft(getState(), StoragePrefixes.COMMENT_DRAFT, rootId);\n        if (draft.message !== '' && draft.message !== getMessageInHistory(getState())) {\n            return;\n        }\n\n        if (direction === -1) {\n            dispatch(moveHistoryIndexBack(Posts.MESSAGE_TYPES.COMMENT));\n        } else if (direction === 1) {\n            dispatch(moveHistoryIndexForward(Posts.MESSAGE_TYPES.COMMENT));\n        }\n\n        const nextMessageInHistory = getMessageInHistory(getState());\n\n        dispatch(updateCommentDraft(rootId, {...draft, message: nextMessageInHistory}));\n    };\n}\n\nexport function submitPost(channelId, rootId, draft) {\n    return async (dispatch, getState) => {\n        const state = getState();\n\n        const userId = getCurrentUserId(state);\n\n        const time = Utils.getTimestamp();\n\n        let post = {\n            file_ids: [],\n            message: draft.message,\n            channel_id: channelId,\n            root_id: rootId,\n            parent_id: rootId,\n            pending_post_id: `${userId}:${time}`,\n            user_id: userId,\n            create_at: time,\n            metadata: {},\n            props: {},\n        };\n\n        const hookResult = await dispatch(runMessageWillBePostedHooks(post));\n        if (hookResult.error) {\n            return {error: hookResult.error};\n        }\n\n        post = hookResult.data;\n\n        return dispatch(PostActions.createPost(post, draft.fileInfos));\n    };\n}\n\nexport function submitReaction(postId, action, emojiName) {\n    return (dispatch) => {\n        if (action === '+') {\n            dispatch(PostActions.addReaction(postId, emojiName));\n        } else if (action === '-') {\n            dispatch(removeReaction(postId, emojiName));\n        }\n    };\n}\n\nexport function submitCommand(channelId, rootId, draft) {\n    return async (dispatch, getState) => {\n        const state = getState();\n\n        const teamId = getCurrentTeamId(state);\n\n        let args = {\n            channel_id: channelId,\n            team_id: teamId,\n            root_id: rootId,\n            parent_id: rootId,\n        };\n\n        let {message} = draft;\n\n        const hookResult = await dispatch(runSlashCommandWillBePostedHooks(message, args));\n        if (hookResult.error) {\n            return {error: hookResult.error};\n        } else if (!hookResult.data.message && !hookResult.data.args) {\n            // do nothing with an empty return from a hook\n            return {};\n        }\n\n        message = hookResult.data.message;\n        args = hookResult.data.args;\n\n        const {error} = await dispatch(executeCommand(message, args));\n\n        if (error) {\n            if (error.sendMessage) {\n                return dispatch(submitPost(channelId, rootId, draft));\n            }\n            throw (error);\n        }\n\n        return {};\n    };\n}\n\nexport function makeOnSubmit(channelId, rootId, latestPostId) {\n    return (options = {}) => async (dispatch, getState) => {\n        const draft = getPostDraft(getState(), StoragePrefixes.COMMENT_DRAFT, rootId);\n        const {message} = draft;\n\n        dispatch(addMessageIntoHistory(message));\n\n        dispatch(updateCommentDraft(rootId, null));\n\n        const isReaction = Utils.REACTION_PATTERN.exec(message);\n\n        const emojis = getCustomEmojisByName(getState());\n        const emojiMap = new EmojiMap(emojis);\n\n        if (isReaction && emojiMap.has(isReaction[2])) {\n            dispatch(submitReaction(latestPostId, isReaction[1], isReaction[2]));\n        } else if (message.indexOf('/') === 0 && !options.ignoreSlash) {\n            await dispatch(submitCommand(channelId, rootId, draft));\n        } else {\n            dispatch(submitPost(channelId, rootId, draft));\n        }\n    };\n}\n\nfunction makeGetCurrentUsersLatestPost(channelId, rootId) {\n    return createSelector(\n        getCurrentUserId,\n        (state) => getPostIdsInChannel(state, channelId),\n        (state) => (id) => getPost(state, id),\n        (userId, postIds, getPostById) => {\n            let lastPost = null;\n\n            if (!postIds) {\n                return lastPost;\n            }\n\n            for (const id of postIds) {\n                const post = getPostById(id) || {};\n\n                // don't edit webhook posts, deleted posts, or system messages\n                if (\n                    post.user_id !== userId ||\n                    (post.props && post.props.from_webhook) ||\n                    post.state === Constants.POST_DELETED ||\n                    (post.type && post.type.startsWith(Constants.SYSTEM_MESSAGE_PREFIX)) ||\n                    isPostPendingOrFailed(post)\n                ) {\n                    continue;\n                }\n\n                if (rootId) {\n                    if (post.root_id === rootId || post.id === rootId) {\n                        lastPost = post;\n                        break;\n                    }\n                } else {\n                    lastPost = post;\n                    break;\n                }\n            }\n\n            return lastPost;\n        },\n    );\n}\n\nexport function makeOnEditLatestPost(channelId, rootId) {\n    const getCurrentUsersLatestPost = makeGetCurrentUsersLatestPost(channelId, rootId);\n    const getCommentCount = makeGetCommentCountForPost();\n\n    return () => (dispatch, getState) => {\n        const state = getState();\n\n        const lastPost = getCurrentUsersLatestPost(state);\n\n        if (!lastPost) {\n            return {data: false};\n        }\n\n        return dispatch(PostActions.setEditingPost(\n            lastPost.id,\n            getCommentCount(state, {post: lastPost}),\n            'reply_textbox',\n            Utils.localizeMessage('create_comment.commentTitle', 'Comment'),\n            true,\n        ));\n    };\n}\n","// Copyright (c) 2015-present Mattermost, Inc. All Rights Reserved.\n// See LICENSE.txt for license information.\n\nexport function parseTable(html) {\n    const el = document.createElement('div');\n    el.innerHTML = html;\n    return el.querySelector('table');\n}\n\nexport function getTable(clipboardData) {\n    if (Array.from(clipboardData.types).indexOf('text/html') === -1) {\n        return false;\n    }\n\n    const html = clipboardData.getData('text/html');\n\n    if (!(/<table/i).test(html)) {\n        return false;\n    }\n\n    const table = parseTable(html);\n    if (!table) {\n        return false;\n    }\n\n    return table;\n}\n\nfunction columnText(column) {\n    const noBreakSpace = '\\u00A0';\n    const text = column.textContent.trim().replace(/\\|/g, '\\\\|').replace(/\\n/g, ' ');\n    return text || noBreakSpace;\n}\n\nfunction tableHeaders(row) {\n    return Array.from(row.querySelectorAll('td, th')).map(columnText);\n}\n\nexport function formatMarkdownTableMessage(table, message) {\n    const rows = Array.from(table.querySelectorAll('tr'));\n\n    const headers = tableHeaders(rows.shift());\n    const spacers = headers.map(() => '---');\n    const header = `|${headers.join(' | ')}|\\n|${spacers.join(' | ')}|\\n`;\n\n    const body = rows.map((row) => {\n        return `|${Array.from(row.querySelectorAll('td')).map(columnText).join(' | ')}|`;\n    }).join('\\n');\n\n    const formattedTable = `${header}${body}\\n`;\n\n    return message ? `${message}\\n\\n${formattedTable}` : formattedTable;\n}\n","// Copyright (c) 2015-present Mattermost, Inc. All Rights Reserved.\n// See LICENSE.txt for license information.\n\nimport React from 'react';\nimport {FormattedMessage} from 'react-intl';\n\nexport default class AttachmentIcon extends React.PureComponent {\n    render() {\n        return (\n            <span {...this.props}>\n                <FormattedMessage\n                    id='generic_icons.attach'\n                    defaultMessage='Attachment Icon'\n                >\n                    {(ariaLabel) => (\n                        <svg\n                            width='18px'\n                            height='18px'\n                            viewBox='0 0 18 15'\n                            role='icon'\n                            aria-label={ariaLabel}\n                        >\n                            <g\n                                fill='inherit'\n                                fillRule='evenodd'\n                            >\n                                <g\n                                    transform='translate(-1029.000000, -954.000000)'\n                                    fillRule='nonzero'\n                                    fill='inherit'\n                                >\n                                    <g transform='translate(25.000000, 937.000000)'>\n                                        <g transform='translate(1004.000000, 17.000000)'>\n                                            <path d='M5.35,15.56 C3.98,15.56 2.61,15.039 1.567,13.997 C0.557,12.984 0,11.642 0,10.212 C0,8.783 0.557,7.44 1.566,6.429 L6.869,1.126 C8.371,-0.376 10.812,-0.375 12.314,1.125 C13.815,2.627 13.815,5.069 12.314,6.57 L7.011,11.873 C6.094,12.792 4.603,12.79 3.687,11.873 C2.771,10.958 2.771,9.467 3.687,8.551 L8.99,3.248 C9.323,2.916 9.861,2.916 10.193,3.248 C10.525,3.579 10.525,4.118 10.193,4.449 L4.89,9.752 C4.637,10.006 4.637,10.418 4.89,10.672 C5.143,10.923 5.555,10.925 5.809,10.672 L11.113,5.369 C11.952,4.53 11.952,3.166 11.113,2.327 C10.276,1.49 8.911,1.488 8.073,2.327 L2.769,7.631 C2.079,8.32 1.699,9.237 1.699,10.212 C1.699,11.188 2.079,12.104 2.768,12.794 C4.19,14.216 6.502,14.216 7.925,12.798 L7.929,12.794 C7.929,12.793 7.929,12.793 7.929,12.793 L15.355,5.369 C15.687,5.037 16.224,5.037 16.556,5.369 C16.888,5.7 16.888,6.239 16.556,6.57 L8.779,14.348 L8.761,14.332 C7.776,15.15 6.562,15.56 5.35,15.56 Z'/>\n                                        </g>\n                                    </g>\n                                </g>\n                            </g>\n                        </svg>\n                    )}\n                </FormattedMessage>\n            </span>\n        );\n    }\n}\n","// Copyright (c) 2015-present Mattermost, Inc. All Rights Reserved.\n// See LICENSE.txt for license information.\n\nimport PropTypes from 'prop-types';\nimport React from 'react';\nimport {OverlayTrigger, Tooltip} from 'react-bootstrap';\nimport {getFileDownloadUrl} from 'mattermost-redux/utils/file_utils';\n\nimport AttachmentIcon from 'components/svg/attachment_icon';\nimport {trimFilename} from 'utils/file_utils';\nimport {localizeMessage} from 'utils/utils.jsx';\n\nexport default class FilenameOverlay extends React.PureComponent {\n    static propTypes = {\n\n        /*\n         * File detailed information\n         */\n        fileInfo: PropTypes.object.isRequired,\n\n        /*\n         * Handler for when the thumbnail is clicked passed the index above\n         */\n        handleImageClick: PropTypes.func,\n\n        /*\n         * Display in compact format\n         */\n        compactDisplay: PropTypes.bool,\n\n        /*\n         * If it should display link to download on file name\n         */\n        canDownload: PropTypes.bool,\n\n        /**\n         * Optional children like download icon\n         */\n        children: PropTypes.element,\n\n        /**\n         * Optional class like for icon\n         */\n        iconClass: PropTypes.string,\n    };\n\n    render() {\n        const {\n            canDownload,\n            children,\n            compactDisplay,\n            fileInfo,\n            handleImageClick,\n            iconClass,\n        } = this.props;\n\n        const fileName = fileInfo.name;\n        const trimmedFilename = trimFilename(fileName);\n\n        let filenameOverlay;\n        if (compactDisplay) {\n            filenameOverlay = (\n                <OverlayTrigger\n                    delayShow={1000}\n                    placement='top'\n                    overlay={<Tooltip id='file-name__tooltip'>{fileName}</Tooltip>}\n                >\n                    <a\n                        href='#'\n                        onClick={handleImageClick}\n                        className='post-image__name'\n                        rel='noopener noreferrer'\n                    >\n                        <AttachmentIcon className='icon'/>\n                        {trimmedFilename}\n                    </a>\n                </OverlayTrigger>\n            );\n        } else if (canDownload) {\n            filenameOverlay = (\n                <div className={iconClass || 'post-image__name'}>\n                    <a\n                        href={getFileDownloadUrl(fileInfo.id)}\n                        aria-label={localizeMessage('view_image_popover.download', 'Download').toLowerCase()}\n                        download={fileName}\n                        target='_blank'\n                        rel='noopener noreferrer'\n                    >\n                        <OverlayTrigger\n                            delayShow={1000}\n                            placement='top'\n                            overlay={\n                                <Tooltip id='file-name__tooltip'>\n                                    {localizeMessage('view_image_popover.download', 'Download').toLowerCase()}\n                                </Tooltip>\n                            }\n                        >\n                            {children || trimmedFilename}\n                        </OverlayTrigger>\n                    </a>\n                </div>\n            );\n        } else {\n            filenameOverlay = (\n                <span className='post-image__name'>\n                    {trimmedFilename}\n                </span>\n            );\n        }\n\n        return (filenameOverlay);\n    }\n}\n","// Copyright (c) 2015-present Mattermost, Inc. All Rights Reserved.\n// See LICENSE.txt for license information.\n\nimport React from 'react';\n\nimport {FormattedMessage} from 'react-intl';\n\nexport default class RemoveIcon extends React.PureComponent {\n    render() {\n        return (\n            <FormattedMessage\n                id='generic_icons.remove'\n                defaultMessage='Remove Icon'\n            >\n                {(title) => (\n                    <i\n                        className='fa fa-remove'\n                        title={title}\n                    />\n                )}\n            </FormattedMessage>\n        );\n    }\n}\n","// Copyright (c) 2015-present Mattermost, Inc. All Rights Reserved.\n// See LICENSE.txt for license information.\n\nimport PropTypes from 'prop-types';\nimport React from 'react';\nimport {FormattedMessage} from 'react-intl';\nimport {ProgressBar} from 'react-bootstrap';\n\nimport FilenameOverlay from 'components/file_attachment/filename_overlay.jsx';\nimport RemoveIcon from 'components/icon/remove_icon';\nimport {getFileTypeFromMime} from 'utils/file_utils';\nimport * as Utils from 'utils/utils.jsx';\n\nexport default class FileProgressPreview extends React.PureComponent {\n    static propTypes = {\n        handleRemove: PropTypes.func.isRequired,\n        clientId: PropTypes.string.isRequired,\n        fileInfo: PropTypes.object,\n    };\n\n    handleRemove = () => {\n        this.props.handleRemove(this.props.clientId);\n    }\n\n    render() {\n        let percent = 0;\n        let fileNameComponent;\n        let previewImage;\n        const {fileInfo, clientId} = this.props;\n\n        if (fileInfo) {\n            percent = fileInfo.percent;\n            const percentTxt = percent && ` (${percent.toFixed(0)}%)`;\n            const fileType = getFileTypeFromMime(fileInfo.type);\n            previewImage = <div className={'file-icon ' + Utils.getIconClassName(fileType)}/>;\n\n            fileNameComponent = (\n                <React.Fragment>\n                    <FilenameOverlay\n                        fileInfo={fileInfo}\n                        index={clientId}\n                        handleImageClick={null}\n                        compactDisplay={false}\n                        canDownload={false}\n                    />\n                    <span className='post-image__uploadingTxt'>\n                        {percent === 100 ? (\n                            <FormattedMessage\n                                id='create_post.fileProcessing'\n                                defaultMessage='Processing...'\n                            />\n                        ) : (\n                            <React.Fragment>\n                                <FormattedMessage\n                                    id='admin.plugin.uploading'\n                                    defaultMessage='Uploading...'\n                                />\n                                <span>{percentTxt}</span>\n                            </React.Fragment>\n                        )}\n                    </span>\n                    {percent && (\n                        <ProgressBar\n                            className='post-image__progressBar'\n                            now={percent}\n                            active={percent === 100}\n                        />\n                    )}\n                </React.Fragment>\n            );\n        }\n\n        return (\n            <div\n                ref={clientId}\n                key={clientId}\n                className='file-preview post-image__column'\n                data-client-id={clientId}\n            >\n                <div className='post-image__thumbnail'>\n                    {previewImage}\n                </div>\n                <div className='post-image__details'>\n                    <div className='post-image__detail_wrapper'>\n                        <div className='post-image__detail'>\n                            {fileNameComponent}\n                        </div>\n                    </div>\n                    <div>\n                        <a\n                            className='file-preview__remove'\n                            onClick={this.handleRemove}\n                        >\n                            <RemoveIcon/>\n                        </a>\n                    </div>\n                </div>\n            </div>\n        );\n    }\n}\n","// Copyright (c) 2015-present Mattermost, Inc. All Rights Reserved.\n// See LICENSE.txt for license information.\n\nimport PropTypes from 'prop-types';\nimport React from 'react';\nimport {getFileThumbnailUrl, getFileUrl} from 'mattermost-redux/utils/file_utils';\n\nimport FilenameOverlay from 'components/file_attachment/filename_overlay.jsx';\nimport RemoveIcon from 'components/icon/remove_icon';\nimport Constants, {FileTypes} from 'utils/constants.jsx';\nimport * as Utils from 'utils/utils.jsx';\n\nimport FileProgressPreview from './file_progress_preview.jsx';\n\nexport default class FilePreview extends React.PureComponent {\n    static propTypes = {\n        enableSVGs: PropTypes.bool.isRequired,\n        onRemove: PropTypes.func.isRequired,\n        fileInfos: PropTypes.arrayOf(PropTypes.object).isRequired,\n        uploadsInProgress: PropTypes.array,\n        uploadsProgressPercent: PropTypes.object,\n    };\n\n    static defaultProps = {\n        fileInfos: [],\n        uploadsInProgress: [],\n        uploadsProgressPercent: {},\n    };\n\n    handleRemove = (id) => {\n        this.props.onRemove(id);\n    }\n\n    render() {\n        const previews = [];\n\n        this.props.fileInfos.forEach((info, idx) => {\n            const type = Utils.getFileType(info.extension);\n\n            let className = 'file-preview post-image__column';\n            let previewImage;\n            if (type === FileTypes.SVG && this.props.enableSVGs) {\n                previewImage = (\n                    <img\n                        alt={'file preview'}\n                        className='post-image normal'\n                        src={getFileUrl(info.id)}\n                    />\n                );\n            } else if (type === FileTypes.IMAGE) {\n                let imageClassName = 'post-image';\n\n                if (info.width < Constants.THUMBNAIL_WIDTH && info.height < Constants.THUMBNAIL_HEIGHT) {\n                    imageClassName += ' small';\n                } else {\n                    imageClassName += ' normal';\n                }\n\n                let thumbnailUrl = getFileThumbnailUrl(info.id);\n                if (Utils.isGIFImage(info.extension) && !info.has_preview_image) {\n                    thumbnailUrl = getFileUrl(info.id);\n                }\n\n                previewImage = (\n                    <div\n                        className={imageClassName}\n                        style={{\n                            backgroundImage: `url(${thumbnailUrl})`,\n                            backgroundSize: 'cover',\n                        }}\n                    />\n                );\n            } else {\n                className += ' custom-file';\n                previewImage = <div className={'file-icon ' + Utils.getIconClassName(type)}/>;\n            }\n\n            previews.push(\n                <div\n                    key={info.id}\n                    className={className}\n                >\n                    <div className='post-image__thumbnail'>\n                        {previewImage}\n                    </div>\n                    <div className='post-image__details'>\n                        <div className='post-image__detail_wrapper'>\n                            <div className='post-image__detail'>\n                                <FilenameOverlay\n                                    fileInfo={info}\n                                    index={idx}\n                                    handleImageClick={null}\n                                    compactDisplay={false}\n                                    canDownload={false}\n                                />\n                                <span className='post-image__type'>{info.extension.toUpperCase()}</span>\n                                <span className='post-image__size'>{Utils.fileSizeToString(info.size)}</span>\n                            </div>\n                        </div>\n                        <div>\n                            <a\n                                className='file-preview__remove'\n                                onClick={this.handleRemove.bind(this, info.id)}\n                            >\n                                <RemoveIcon/>\n                            </a>\n                        </div>\n                    </div>\n                </div>\n            );\n        });\n\n        this.props.uploadsInProgress.forEach((clientId) => {\n            previews.push(\n                <FileProgressPreview\n                    key={clientId}\n                    clientId={clientId}\n                    fileInfo={this.props.uploadsProgressPercent[clientId]}\n                    handleRemove={this.handleRemove}\n                />\n            );\n        });\n\n        return (\n            <div\n                className='file-preview__container'\n                ref='container'\n            >\n                {previews}\n            </div>\n        );\n    }\n}\n","// Copyright (c) 2015-present Mattermost, Inc. All Rights Reserved.\n// See LICENSE.txt for license information.\n\nimport {connect} from 'react-redux';\n\nimport {getConfig} from 'mattermost-redux/selectors/entities/general';\n\nimport FilePreview from './file_preview';\n\nfunction mapStateToProps(state) {\n    const config = getConfig(state);\n\n    return {\n        enableSVGs: config.EnableSVGs === 'true',\n    };\n}\n\nexport default connect(mapStateToProps)(FilePreview);\n","// Copyright (c) 2015-present Mattermost, Inc. All Rights Reserved.\n// See LICENSE.txt for license information.\n\nimport {batchActions} from 'redux-batched-actions';\nimport request from 'superagent';\nimport {FileTypes} from 'mattermost-redux/action_types';\nimport {getLogErrorAction} from 'mattermost-redux/actions/errors';\nimport {forceLogoutIfNecessary} from 'mattermost-redux/actions/helpers';\nimport {Client4} from 'mattermost-redux/client';\n\nimport * as Utils from 'utils/utils.jsx';\n\nexport function uploadFile(file, name, channelId, rootId, clientId) {\n    return (dispatch) => {\n        dispatch({type: FileTypes.UPLOAD_FILES_REQUEST});\n\n        return request.\n            post(Client4.getFilesRoute()).\n            set(Client4.getOptions({method: 'post'}).headers).\n            attach('files', file, name).\n            field('channel_id', channelId).\n            field('client_ids', clientId).\n            accept('application/json');\n    };\n}\n\nexport function handleFileUploadEnd(file, name, channelId, rootId, clientId, {err, res}) {\n    return (dispatch, getState) => {\n        if (err) {\n            let e;\n            if (res && res.body && res.body.id) {\n                e = res.body;\n            } else if (err.status === 0 || !err.status) {\n                e = {message: Utils.localizeMessage('file_upload.generic_error', 'There was a problem uploading your files.')};\n            } else {\n                e = {message: Utils.localizeMessage('channel_loader.unknown_error', 'We received an unexpected status code from the server.') + ' (' + err.status + ')'};\n            }\n\n            forceLogoutIfNecessary(err, dispatch, getState);\n\n            const failure = {\n                type: FileTypes.UPLOAD_FILES_FAILURE,\n                clientIds: [clientId],\n                channelId,\n                rootId,\n                error: err,\n            };\n\n            dispatch(batchActions([failure, getLogErrorAction(err)]));\n            return {error: e};\n        }\n        const data = res.body.file_infos.map((fileInfo, index) => {\n            return {\n                ...fileInfo,\n                clientId: res.body.client_ids[index],\n            };\n        });\n\n        dispatch(batchActions([\n            {\n                type: FileTypes.RECEIVED_UPLOAD_FILES,\n                data,\n                channelId,\n                rootId,\n            },\n            {\n                type: FileTypes.UPLOAD_FILES_SUCCESS,\n            },\n        ]));\n\n        return {data: res.body};\n    };\n}\n","// Copyright (c) 2015-present Mattermost, Inc. All Rights Reserved.\n// See LICENSE.txt for license information.\n\nimport $ from 'jquery';\nimport PropTypes from 'prop-types';\nimport React, {PureComponent} from 'react';\nimport ReactDOM from 'react-dom';\nimport {defineMessages, intlShape, FormattedMessage} from 'react-intl';\nimport 'jquery-dragster/jquery.dragster.js';\n\nimport Constants from 'utils/constants.jsx';\nimport DelayedAction from 'utils/delayed_action.jsx';\nimport {t} from 'utils/i18n';\nimport {\n    isIosChrome,\n    isMobileApp,\n} from 'utils/user_agent.jsx';\nimport {getTable} from 'utils/paste.jsx';\nimport {\n    clearFileInput,\n    cmdOrCtrlPressed,\n    isKeyPressed,\n    generateId,\n    isFileTransfer,\n    localizeMessage,\n} from 'utils/utils.jsx';\n\nimport MenuWrapper from 'components/widgets/menu/menu_wrapper';\nimport Menu from 'components/widgets/menu/menu';\n\nimport AttachmentIcon from 'components/svg/attachment_icon';\n\nconst holders = defineMessages({\n    limited: {\n        id: t('file_upload.limited'),\n        defaultMessage: 'Uploads limited to {count, number} files maximum. Please use additional posts for more files.',\n    },\n    filesAbove: {\n        id: t('file_upload.filesAbove'),\n        defaultMessage: 'Files above {max}MB could not be uploaded: {filenames}',\n    },\n    fileAbove: {\n        id: t('file_upload.fileAbove'),\n        defaultMessage: 'File above {max}MB could not be uploaded: {filename}',\n    },\n    zeroBytesFiles: {\n        id: t('file_upload.zeroBytesFiles'),\n        defaultMessage: 'You are uploading empty files: {filenames}',\n    },\n    zeroBytesFile: {\n        id: t('file_upload.zeroBytesFile'),\n        defaultMessage: 'You are uploading an empty file: {filename}',\n    },\n    pasted: {\n        id: t('file_upload.pasted'),\n        defaultMessage: 'Image Pasted at ',\n    },\n    uploadFile: {\n        id: t('file_upload.upload_files'),\n        defaultMessage: 'Upload files',\n    },\n});\n\nconst OVERLAY_TIMEOUT = 500;\n\nconst customStyles = {\n    left: 'inherit',\n    right: 0,\n    bottom: '100%',\n    top: 'auto',\n};\n\nexport default class FileUpload extends PureComponent {\n    static propTypes = {\n\n        /**\n         * Current channel's ID\n         */\n        currentChannelId: PropTypes.string.isRequired,\n\n        /**\n         * Current root post's ID\n         */\n        rootId: PropTypes.string,\n\n        /**\n         * Number of files to attach\n         */\n        fileCount: PropTypes.number.isRequired,\n\n        /**\n         * Function to get file upload targeted input\n         */\n        getTarget: PropTypes.func.isRequired,\n\n        locale: PropTypes.string.isRequired,\n\n        /**\n         * Function to be called when file upload input is clicked\n         */\n        onClick: PropTypes.func,\n\n        /**\n         * Function to be called when file upload is complete\n         */\n        onFileUpload: PropTypes.func,\n\n        /**\n         * Function to be called when file upload input's change event is fired\n         */\n        onFileUploadChange: PropTypes.func,\n\n        /**\n         * Function to be called when upload fails\n         */\n        onUploadError: PropTypes.func,\n\n        /**\n         * Function to be called when file upload starts\n         */\n        onUploadStart: PropTypes.func,\n\n        /**\n         * Type of the object which the uploaded file is attached to\n         */\n        postType: PropTypes.string,\n\n        /**\n         * The maximum uploaded file size.\n         */\n        maxFileSize: PropTypes.number,\n\n        /**\n         * Whether or not file upload is allowed.\n         */\n        canUploadFiles: PropTypes.bool.isRequired,\n\n        /**\n         * Plugin file upload methods to be added\n         */\n        pluginFileUploadMethods: PropTypes.arrayOf(PropTypes.object),\n        pluginFilesWillUploadHooks: PropTypes.arrayOf(PropTypes.object),\n\n        /**\n         * Function called when superAgent fires progress event.\n         */\n        onUploadProgress: PropTypes.func.isRequired,\n        actions: PropTypes.shape({\n\n            /**\n             * Function to be called to upload file\n             */\n            uploadFile: PropTypes.func.isRequired,\n\n            /**\n             * Function to be called when file is uploaded or failed\n             */\n            handleFileUploadEnd: PropTypes.func.isRequired,\n        }).isRequired,\n    };\n\n    static contextTypes = {\n        intl: intlShape,\n    };\n\n    static defaultProps = {\n        pluginFileUploadMethods: [],\n        pluginFilesWillUploadHooks: [],\n    };\n\n    constructor(props) {\n        super(props);\n        this.state = {\n            requests: {},\n            menuOpen: false,\n        };\n        this.fileInput = React.createRef();\n    }\n\n    componentDidMount() {\n        if (this.props.postType === 'post') {\n            this.registerDragEvents('.row.main', '.center-file-overlay');\n        } else if (this.props.postType === 'comment') {\n            this.registerDragEvents('.post-right__container', '.right-file-overlay');\n        }\n\n        document.addEventListener('paste', this.pasteUpload);\n        document.addEventListener('keydown', this.keyUpload);\n    }\n\n    componentWillUnmount() {\n        let target;\n        if (this.props.postType === 'post') {\n            target = $('.row.main');\n        } else {\n            target = $('.post-right__container');\n        }\n\n        document.removeEventListener('paste', this.pasteUpload);\n        document.removeEventListener('keydown', this.keyUpload);\n\n        // jquery-dragster doesn't provide a function to unregister itself so do it manually\n        target.off('dragenter dragleave dragover drop dragster:enter dragster:leave dragster:over dragster:drop');\n    }\n\n    fileUploadSuccess = (data, channelId, currentRootId) => {\n        if (data) {\n            this.props.onFileUpload(data.file_infos, data.client_ids, channelId, currentRootId);\n\n            const requests = Object.assign({}, this.state.requests);\n            for (var j = 0; j < data.client_ids.length; j++) {\n                Reflect.deleteProperty(requests, data.client_ids[j]);\n            }\n            this.setState({requests});\n        }\n    }\n\n    fileUploadFail = (err, clientId, channelId, currentRootId) => {\n        this.props.onUploadError(err, clientId, channelId, currentRootId);\n    }\n\n    pluginUploadFiles = (files) => {\n        // clear any existing errors\n        this.props.onUploadError(null);\n        this.uploadFiles(files);\n    }\n\n    checkPluginHooksAndUploadFiles = (files) => {\n        // clear any existing errors\n        this.props.onUploadError(null);\n\n        let sortedFiles = Array.from(files).sort((a, b) => a.name.localeCompare(b.name, this.props.locale, {numeric: true}));\n\n        const willUploadHooks = this.props.pluginFilesWillUploadHooks;\n        for (const h of willUploadHooks) {\n            const result = h.hook(sortedFiles, this.pluginUploadFiles);\n\n            // Display an error message if there is one but don't reject the upload\n            if (result.message) {\n                this.props.onUploadError(result.message);\n            }\n\n            sortedFiles = result.files;\n        }\n\n        if (sortedFiles) {\n            this.uploadFiles(sortedFiles);\n        }\n    }\n\n    uploadFiles = (sortedFiles) => {\n        const {currentChannelId, rootId} = this.props;\n\n        const uploadsRemaining = Constants.MAX_UPLOAD_FILES - this.props.fileCount;\n        let numUploads = 0;\n\n        // keep track of how many files have been too large\n        const tooLargeFiles = [];\n        const zeroFiles = [];\n        const clientIds = [];\n\n        for (let i = 0; i < sortedFiles.length && numUploads < uploadsRemaining; i++) {\n            if (sortedFiles[i].size > this.props.maxFileSize) {\n                tooLargeFiles.push(sortedFiles[i]);\n                continue;\n            }\n            if (sortedFiles[i].size === 0) {\n                zeroFiles.push(sortedFiles[i]);\n            }\n\n            // generate a unique id that can be used by other components to refer back to this upload\n            const clientId = generateId();\n\n            const request = this.props.actions.uploadFile(\n                sortedFiles[i],\n                sortedFiles[i].name,\n                currentChannelId,\n                rootId,\n                clientId,\n            );\n\n            request.on('progress', (progressEvent) => {\n                this.props.onUploadProgress({\n                    clientId,\n                    name: sortedFiles[i].name,\n                    percent: progressEvent.percent,\n                    type: sortedFiles[i].type,\n                });\n            });\n\n            request.end((err, res) => {\n                const {error, data} = this.props.actions.handleFileUploadEnd(\n                    sortedFiles[i],\n                    sortedFiles[i].name,\n                    currentChannelId,\n                    rootId,\n                    clientId,\n                    {err, res},\n                );\n\n                if (error) {\n                    this.fileUploadFail(error, clientId, currentChannelId, rootId);\n                } else if (data) {\n                    this.fileUploadSuccess(data, currentChannelId, rootId);\n                }\n            });\n\n            this.setState({requests: {...this.state.requests, [clientId]: request}});\n            clientIds.push(clientId);\n\n            numUploads += 1;\n        }\n\n        this.props.onUploadStart(clientIds, currentChannelId);\n\n        const {formatMessage} = this.context.intl;\n        const errors = [];\n        if (sortedFiles.length > uploadsRemaining) {\n            errors.push(formatMessage(holders.limited, {count: Constants.MAX_UPLOAD_FILES}));\n        }\n\n        if (tooLargeFiles.length > 1) {\n            var tooLargeFilenames = tooLargeFiles.map((file) => file.name).join(', ');\n\n            errors.push(formatMessage(holders.filesAbove, {max: (this.props.maxFileSize / 1048576), filenames: tooLargeFilenames}));\n        } else if (tooLargeFiles.length > 0) {\n            errors.push(formatMessage(holders.fileAbove, {max: (this.props.maxFileSize / 1048576), filename: tooLargeFiles[0].name}));\n        }\n\n        if (zeroFiles.length > 1) {\n            var zeroFilenames = zeroFiles.map((file) => file.name).join(', ');\n\n            errors.push(formatMessage(holders.zeroBytesFiles, {filenames: zeroFilenames}));\n        } else if (zeroFiles.length > 0) {\n            errors.push(formatMessage(holders.zeroBytesFile, {filename: zeroFiles[0].name}));\n        }\n\n        if (errors.length > 0) {\n            this.props.onUploadError(errors.join(', '));\n        }\n    }\n\n    handleChange = (e) => {\n        if (e.target.files.length > 0) {\n            this.checkPluginHooksAndUploadFiles(e.target.files);\n\n            clearFileInput(e.target);\n        }\n\n        this.props.onFileUploadChange();\n    }\n\n    handleDrop = (e) => {\n        if (!this.props.canUploadFiles) {\n            this.props.onUploadError(localizeMessage('file_upload.disabled', 'File attachments are disabled.'));\n            return;\n        }\n\n        this.props.onUploadError(null);\n\n        const items = e.originalEvent.dataTransfer.items || [];\n        const droppedFiles = e.originalEvent.dataTransfer.files;\n        const files = [];\n        Array.from(droppedFiles).forEach((file, index) => {\n            const item = items[index];\n            if (item && item.webkitGetAsEntry && item.webkitGetAsEntry().isDirectory) {\n                return;\n            }\n            files.push(file);\n        });\n\n        const types = e.originalEvent.dataTransfer.types;\n        if (types) {\n            // For non-IE browsers\n            if (types.includes && !types.includes('Files')) {\n                return;\n            }\n\n            // For IE browsers\n            if (types.contains && !types.contains('Files')) {\n                return;\n            }\n        }\n\n        if (files.length === 0) {\n            this.props.onUploadError(localizeMessage('file_upload.drag_folder', 'Folders cannot be uploaded. Please drag all files separately.'));\n            return;\n        }\n\n        if (files.length) {\n            this.checkPluginHooksAndUploadFiles(files);\n        }\n\n        this.props.onFileUploadChange();\n    }\n\n    registerDragEvents = (containerSelector, overlaySelector) => {\n        const self = this;\n\n        const overlay = $(overlaySelector);\n\n        const dragTimeout = new DelayedAction(() => {\n            if (!overlay.hasClass('hidden')) {\n                overlay.addClass('hidden');\n            }\n        });\n\n        let dragsterActions = {};\n        if (this.props.canUploadFiles) {\n            dragsterActions = {\n                enter(dragsterEvent, e) {\n                    var files = e.originalEvent.dataTransfer;\n\n                    if (isFileTransfer(files)) {\n                        $(overlaySelector).removeClass('hidden');\n                    }\n                },\n                leave(dragsterEvent, e) {\n                    var files = e.originalEvent.dataTransfer;\n\n                    if (isFileTransfer(files) && !overlay.hasClass('hidden')) {\n                        overlay.addClass('hidden');\n                    }\n\n                    dragTimeout.cancel();\n                },\n                over() {\n                    dragTimeout.fireAfter(OVERLAY_TIMEOUT);\n                },\n                drop(dragsterEvent, e) {\n                    if (!overlay.hasClass('hidden')) {\n                        overlay.addClass('hidden');\n                    }\n\n                    dragTimeout.cancel();\n\n                    self.handleDrop(e);\n                },\n            };\n        } else {\n            dragsterActions = {\n                drop(dragsterEvent, e) {\n                    self.handleDrop(e);\n                },\n            };\n        }\n\n        $(containerSelector).dragster(dragsterActions);\n    }\n\n    containsEventTarget = (targetElement, eventTarget) => targetElement && targetElement.contains(eventTarget);\n\n    pasteUpload = (e) => {\n        const {formatMessage} = this.context.intl;\n\n        if (!e.clipboardData || !e.clipboardData.items || getTable(e.clipboardData)) {\n            return;\n        }\n\n        const target = this.props.getTarget();\n        const textarea = ReactDOM.findDOMNode(target);\n        if (!this.containsEventTarget(textarea, e.target)) {\n            return;\n        }\n\n        this.props.onUploadError(null);\n\n        const items = [];\n        for (let i = 0; i < e.clipboardData.items.length; i++) {\n            const item = e.clipboardData.items[i];\n\n            if (item.kind !== 'file') {\n                continue;\n            }\n\n            items.push(item);\n        }\n\n        if (items && items.length > 0) {\n            if (!this.props.canUploadFiles) {\n                this.props.onUploadError(localizeMessage('file_upload.disabled', 'File attachments are disabled.'));\n                return;\n            }\n\n            const files = [];\n\n            for (let i = 0; i < items.length; i++) {\n                const file = items[i].getAsFile();\n                if (!file) {\n                    continue;\n                }\n\n                var d = new Date();\n                let hour = d.getHours();\n                hour = hour < 10 ? `0${hour}` : `${hour}`;\n\n                let minute = d.getMinutes();\n                minute = minute < 10 ? `0${minute}` : `${minute}`;\n\n                var ext = '';\n                if (file.name) {\n                    if (file.name.includes('.')) {\n                        ext = file.name.substr(file.name.lastIndexOf('.'));\n                    }\n                } else if (items[i].type.includes('/')) {\n                    ext = '.' + items[i].type.split('/')[1].toLowerCase();\n                }\n\n                const name = formatMessage(holders.pasted) + d.getFullYear() + '-' + (d.getMonth() + 1) + '-' + d.getDate() + ' ' + hour + '-' + minute + ext;\n\n                const newFile = new Blob([file], {type: file.type});\n                newFile.name = name;\n                files.push(newFile);\n            }\n\n            if (files.length > 0) {\n                this.checkPluginHooksAndUploadFiles(files);\n                this.props.onFileUploadChange();\n            }\n        }\n    }\n\n    keyUpload = (e) => {\n        if (cmdOrCtrlPressed(e) && isKeyPressed(e, Constants.KeyCodes.U)) {\n            e.preventDefault();\n\n            if (!this.props.canUploadFiles) {\n                this.props.onUploadError(localizeMessage('file_upload.disabled', 'File attachments are disabled.'));\n                return;\n            }\n            const postTextbox = this.props.postType === 'post' && document.activeElement.id === 'post_textbox';\n            const commentTextbox = this.props.postType === 'comment' && document.activeElement.id === 'reply_textbox';\n            if (postTextbox || commentTextbox) {\n                this.fileInput.current.focus();\n                this.fileInput.current.click();\n            }\n        }\n    }\n\n    cancelUpload = (clientId) => {\n        const requests = Object.assign({}, this.state.requests);\n        const request = requests[clientId];\n\n        if (request) {\n            request.abort();\n\n            Reflect.deleteProperty(requests, clientId);\n            this.setState({requests});\n        }\n    }\n\n    handleMaxUploadReached = (e) => {\n        if (e) {\n            e.preventDefault();\n        }\n\n        const {onUploadError} = this.props;\n        const {formatMessage} = this.context.intl;\n\n        onUploadError(formatMessage(holders.limited, {count: Constants.MAX_UPLOAD_FILES}));\n    }\n\n    toggleMenu = (open) => {\n        this.setState({menuOpen: open});\n    }\n\n    handleLocalFileUploaded = (e) => {\n        const uploadsRemaining = Constants.MAX_UPLOAD_FILES - this.props.fileCount;\n        if (uploadsRemaining > 0) {\n            if (this.props.onClick) {\n                this.props.onClick();\n            }\n        } else {\n            this.handleMaxUploadReached(e);\n        }\n        this.setState({menuOpen: false});\n    }\n\n    simulateInputClick = () => {\n        this.fileInput.current.click();\n    }\n\n    render() {\n        const {formatMessage} = this.context.intl;\n        let multiple = true;\n        if (isMobileApp()) {\n            // iOS WebViews don't upload videos properly in multiple mode\n            multiple = false;\n        }\n\n        let accept = '';\n        if (isIosChrome()) {\n            // iOS Chrome can't upload videos at all\n            accept = 'image/*';\n        }\n\n        const uploadsRemaining = Constants.MAX_UPLOAD_FILES - this.props.fileCount;\n\n        let bodyAction;\n        const ariaLabel = formatMessage({id: 'accessibility.button.attachment', defaultMessage: 'attachment'});\n\n        if (this.props.pluginFileUploadMethods.length === 0) {\n            bodyAction = (\n                <div>\n                    <button\n                        type='button'\n                        id='fileUploadButton'\n                        aria-label={ariaLabel}\n                        className='style--none post-action icon icon--attachment'\n                        onClick={this.simulateInputClick}\n                    >\n                        <AttachmentIcon/>\n                    </button>\n                    <input\n                        tabIndex='-1'\n                        aria-label={formatMessage(holders.uploadFile)}\n                        ref={this.fileInput}\n                        type='file'\n                        onChange={this.handleChange}\n                        onClick={this.handleLocalFileUploaded}\n                        multiple={multiple}\n                        accept={accept}\n                    />\n                </div>\n            );\n        } else {\n            const pluginFileUploadMethods = this.props.pluginFileUploadMethods.map((item) => {\n                return (\n                    <li\n                        key={item.pluginId + '_fileuploadpluginmenuitem'}\n                        onClick={() => {\n                            if (item.action) {\n                                item.action(this.checkPluginHooksAndUploadFiles);\n                            }\n                            this.setState({menuOpen: false});\n                        }}\n                    >\n                        <a href='#'>\n                            <span className='margin-right'>{item.icon}</span>\n                            {item.text}\n                        </a>\n                    </li>\n                );\n            });\n            bodyAction = (\n                <div>\n                    <input\n                        tabIndex='-1'\n                        aria-label={formatMessage(holders.uploadFile)}\n                        ref={this.fileInput}\n                        type='file'\n                        className='file-attachment-menu-item-input'\n                        onChange={this.handleChange}\n                        onClick={this.handleLocalFileUploaded}\n                        multiple={multiple}\n                        accept={accept}\n                    />\n                    <MenuWrapper>\n                        <button\n                            type='button'\n                            aria-label={ariaLabel}\n                            className='style--none post-action'\n                        >\n                            <div\n                                id='fileUploadButton'\n                                className='icon icon--attachment'\n                            >\n                                <AttachmentIcon/>\n                            </div>\n                        </button>\n                        <Menu\n                            openLeft={true}\n                            openUp={true}\n                            ariaLabel={formatMessage({id: 'file_upload.menuAriaLabel', defaultMessage: 'Upload type selector'})}\n                            customStyles={customStyles}\n                        >\n                            <li>\n                                <a\n                                    href='#'\n                                    onClick={this.simulateInputClick}\n                                >\n                                    <span className='margin-right'><i className='fa fa-laptop'/></span>\n                                    <FormattedMessage\n                                        id='yourcomputer'\n                                        defaultMessage='Your computer'\n                                    />\n                                </a>\n                            </li>\n                            {pluginFileUploadMethods}\n                        </Menu>\n                    </MenuWrapper>\n                </div>\n            );\n        }\n\n        if (!this.props.canUploadFiles) {\n            bodyAction = null;\n        }\n\n        return (\n            <div className={uploadsRemaining <= 0 ? ' style--none btn-file__disabled' : 'style--none'}>\n                {bodyAction}\n            </div>\n        );\n    }\n}\n","// Copyright (c) 2015-present Mattermost, Inc. All Rights Reserved.\n// See LICENSE.txt for license information.\n\nimport {connect} from 'react-redux';\nimport {bindActionCreators} from 'redux';\n\nimport {getCurrentChannelId} from 'mattermost-redux/selectors/entities/channels';\nimport {getConfig} from 'mattermost-redux/selectors/entities/general';\n\nimport {uploadFile, handleFileUploadEnd} from 'actions/file_actions.jsx';\nimport {getCurrentLocale} from 'selectors/i18n';\nimport {canUploadFiles} from 'utils/file_utils';\n\nimport FileUpload from './file_upload.jsx';\n\nfunction mapStateToProps(state) {\n    const config = getConfig(state);\n    const maxFileSize = parseInt(config.MaxFileSize, 10);\n\n    return {\n        currentChannelId: getCurrentChannelId(state),\n        maxFileSize,\n        canUploadFiles: canUploadFiles(config),\n        locale: getCurrentLocale(state),\n        pluginFileUploadMethods: state.plugins.components.FileUploadMethod,\n        pluginFilesWillUploadHooks: state.plugins.components.FilesWillUploadHook,\n    };\n}\n\nfunction mapDispatchToProps(dispatch) {\n    return {\n        actions: bindActionCreators({\n            uploadFile,\n            handleFileUploadEnd,\n        }, dispatch),\n    };\n}\n\nexport default connect(mapStateToProps, mapDispatchToProps, null, {withRef: true})(FileUpload);\n","// Copyright (c) 2015-present Mattermost, Inc. All Rights Reserved.\n// See LICENSE.txt for license information.\n\nimport PropTypes from 'prop-types';\nimport React from 'react';\nimport {FormattedMessage} from 'react-intl';\n\nexport default class MsgTyping extends React.Component {\n    static propTypes = {\n        typingUsers: PropTypes.array.isRequired,\n    }\n\n    getTypingText = () => {\n        let users = [];\n        let numUsers = 0;\n        if (this.props.typingUsers) {\n            users = [...this.props.typingUsers];\n            numUsers = users.length;\n        }\n\n        if (numUsers === 0) {\n            return '';\n        }\n        if (numUsers === 1) {\n            return (\n                <FormattedMessage\n                    id='msg_typing.isTyping'\n                    defaultMessage='{user} is typing...'\n                    values={{\n                        user: users[0],\n                    }}\n                />\n            );\n        }\n        const last = users.pop();\n        return (\n            <FormattedMessage\n                id='msg_typing.areTyping'\n                defaultMessage='{users} and {last} are typing...'\n                values={{\n                    users: (users.join(', ')),\n                    last,\n                }}\n            />\n        );\n    }\n\n    render() {\n        return (\n            <span className='msg-typing'>{this.getTypingText()}</span>\n        );\n    }\n}\n","// Copyright (c) 2015-present Mattermost, Inc. All Rights Reserved.\n// See LICENSE.txt for license information.\n\nimport {connect} from 'react-redux';\nimport {makeGetUsersTypingByChannelAndPost} from 'mattermost-redux/selectors/entities/typing';\n\nimport MsgTyping from './msg_typing.jsx';\n\nfunction makeMapStateToProps() {\n    const getUsersTypingByChannelAndPost = makeGetUsersTypingByChannelAndPost();\n\n    return function mapStateToProps(state, ownProps) {\n        const typingUsers = getUsersTypingByChannelAndPost(state, {channelId: ownProps.channelId, postId: ownProps.postId});\n\n        return {\n            typingUsers,\n        };\n    };\n}\n\nexport default connect(makeMapStateToProps)(MsgTyping);\n","// Copyright (c) 2015-present Mattermost, Inc. All Rights Reserved.\n// See LICENSE.txt for license information.\n\nimport PropTypes from 'prop-types';\nimport React from 'react';\nimport {Modal} from 'react-bootstrap';\nimport {FormattedMessage} from 'react-intl';\n\nexport default class PostDeletedModal extends React.Component {\n    static propTypes = {\n\n        /**\n         * Determines whether this modal should be shown or not\n         */\n        show: PropTypes.bool.isRequired,\n\n        /**\n         * Function that is called when modal is hidden\n         */\n        onHide: PropTypes.func.isRequired,\n    };\n\n    shouldComponentUpdate(nextProps) {\n        return nextProps.show !== this.props.show;\n    }\n\n    render() {\n        return (\n            <Modal\n                dialogClassName='a11y__modal'\n                show={this.props.show}\n                onHide={this.props.onHide}\n                role='dialog'\n                aria-labelledby='postDeletedModalLabel'\n            >\n                <Modal.Header closeButton={true}>\n                    <Modal.Title\n                        componentClass='h1'\n                        id='postDeletedModalLabel'\n                    >\n                        <FormattedMessage\n                            id='post_delete.notPosted'\n                            defaultMessage='Comment could not be posted'\n                        />\n                    </Modal.Title>\n                </Modal.Header>\n                <Modal.Body>\n                    <p>\n                        <FormattedMessage\n                            id='post_delete.someone'\n                            defaultMessage='Someone deleted the message on which you tried to post a comment.'\n                        />\n                    </p>\n                </Modal.Body>\n                <Modal.Footer>\n                    <button\n                        type='button'\n                        className='btn btn-primary'\n                        autoFocus={true}\n                        onClick={this.props.onHide}\n                    >\n                        <FormattedMessage\n                            id='post_delete.okay'\n                            defaultMessage='Okay'\n                        />\n                    </button>\n                </Modal.Footer>\n            </Modal>\n        );\n    }\n}\n","// Copyright (c) 2015-present Mattermost, Inc. All Rights Reserved.\n// See LICENSE.txt for license information.\n\nimport PropTypes from 'prop-types';\nimport React from 'react';\nimport {FormattedMessage} from 'react-intl';\n\nimport {isErrorInvalidSlashCommand} from 'utils/post_utils.jsx';\n\nclass MessageSubmitError extends React.PureComponent {\n    static propTypes = {\n        error: PropTypes.object.isRequired,\n        handleSubmit: PropTypes.func.isRequired,\n        submittedMessage: PropTypes.string,\n    }\n\n    renderSlashCommandError = () => {\n        if (!this.props.submittedMessage) {\n            return this.props.error.message;\n        }\n\n        const command = this.props.submittedMessage.split(' ')[0];\n        return (\n            <React.Fragment>\n                <FormattedMessage\n                    id='message_submit_error.invalidCommand'\n                    defaultMessage={'Command with a trigger of \\'{command}\\' not found. '}\n                    values={{\n                        command,\n                    }}\n                />\n                <a\n                    href='#'\n                    onClick={this.props.handleSubmit}\n                >\n                    <FormattedMessage\n                        id='message_submit_error.sendAsMessageLink'\n                        defaultMessage='Click here to send as a message.'\n                    />\n                </a>\n            </React.Fragment>\n        );\n    }\n\n    render() {\n        const error = this.props.error;\n\n        if (!error) {\n            return null;\n        }\n\n        let errorContent = error.message;\n        if (isErrorInvalidSlashCommand(error)) {\n            errorContent = this.renderSlashCommandError();\n        }\n\n        return (\n            <div className='has-error'>\n                <label className='control-label'>\n                    {errorContent}\n                </label>\n            </div>\n        );\n    }\n}\n\nexport default MessageSubmitError;\n","// Copyright (c) 2015-present Mattermost, Inc. All Rights Reserved.\n// See LICENSE.txt for license information.\n\nimport $ from 'jquery';\nimport PropTypes from 'prop-types';\nimport React from 'react';\nimport {FormattedMessage, intlShape} from 'react-intl';\n\nimport {sortFileInfos} from 'mattermost-redux/utils/file_utils';\n\nimport * as GlobalActions from 'actions/global_actions.jsx';\n\nimport Constants from 'utils/constants.jsx';\nimport * as UserAgent from 'utils/user_agent.jsx';\nimport * as Utils from 'utils/utils.jsx';\nimport {containsAtChannel, postMessageOnKeyPress, shouldFocusMainTextbox, isErrorInvalidSlashCommand} from 'utils/post_utils.jsx';\nimport {getTable, formatMarkdownTableMessage} from 'utils/paste.jsx';\n\nimport ConfirmModal from 'components/confirm_modal.jsx';\nimport EmojiPickerOverlay from 'components/emoji_picker/emoji_picker_overlay.jsx';\nimport FilePreview from 'components/file_preview';\nimport FileUpload from 'components/file_upload';\nimport MsgTyping from 'components/msg_typing';\nimport PostDeletedModal from 'components/post_deleted_modal.jsx';\nimport EmojiIcon from 'components/svg/emoji_icon';\nimport Textbox from 'components/textbox';\nimport TextboxLinks from 'components/textbox/textbox_links.jsx';\nimport FormattedMarkdownMessage from 'components/formatted_markdown_message.jsx';\nimport MessageSubmitError from 'components/message_submit_error';\n\nexport default class CreateComment extends React.PureComponent {\n    static propTypes = {\n\n        /**\n         * The channel for which this comment is a part of\n         */\n        channelId: PropTypes.string.isRequired,\n\n        /**\n         * The number of channel members\n         */\n        channelMembersCount: PropTypes.number.isRequired,\n\n        /**\n         * The id of the parent post\n         */\n        rootId: PropTypes.string.isRequired,\n\n        /**\n         * True if the root message was deleted\n         */\n        rootDeleted: PropTypes.bool.isRequired,\n\n        /**\n         * The current history message selected\n         */\n        messageInHistory: PropTypes.string,\n\n        /**\n         * The current draft of the comment\n         */\n        draft: PropTypes.shape({\n            message: PropTypes.string.isRequired,\n            uploadsInProgress: PropTypes.array.isRequired,\n            fileInfos: PropTypes.array.isRequired,\n        }).isRequired,\n\n        /**\n         * Whether the submit button is enabled\n         */\n        enableAddButton: PropTypes.bool.isRequired,\n\n        /**\n         * Force message submission on CTRL/CMD + ENTER\n         */\n        codeBlockOnCtrlEnter: PropTypes.bool,\n\n        /**\n         * Set to force form submission on CTRL/CMD + ENTER instead of ENTER\n         */\n        ctrlSend: PropTypes.bool,\n\n        /**\n         * The id of the latest post in this channel\n         */\n        latestPostId: PropTypes.string,\n        locale: PropTypes.string.isRequired,\n\n        /**\n         * A function returning a ref to the sidebar\n         */\n        getSidebarBody: PropTypes.func,\n\n        /**\n         * Create post error id\n         */\n        createPostErrorId: PropTypes.string,\n\n        /**\n         * Called to clear file uploads in progress\n         */\n        clearCommentDraftUploads: PropTypes.func.isRequired,\n\n        /**\n         * Called when comment draft needs to be updated\n         */\n        onUpdateCommentDraft: PropTypes.func.isRequired,\n\n        /**\n         * Called when comment draft needs to be updated for an specific root ID\n         */\n        updateCommentDraftWithRootId: PropTypes.func.isRequired,\n\n        /**\n         * Called when submitting the comment\n         */\n        onSubmit: PropTypes.func.isRequired,\n\n        /**\n         * Called when resetting comment message history index\n         */\n        onResetHistoryIndex: PropTypes.func.isRequired,\n\n        /**\n         * Called when navigating back through comment message history\n         */\n        onMoveHistoryIndexBack: PropTypes.func.isRequired,\n\n        /**\n         * Called when navigating forward through comment message history\n         */\n        onMoveHistoryIndexForward: PropTypes.func.isRequired,\n\n        /**\n         * Called to initiate editing the user's latest post\n         */\n        onEditLatestPost: PropTypes.func.isRequired,\n\n        /**\n         * Function to get the users timezones in the channel\n         */\n        getChannelTimezones: PropTypes.func.isRequired,\n\n        /**\n         * Reset state of createPost request\n         */\n        resetCreatePostRequest: PropTypes.func.isRequired,\n\n        /**\n         * Set if channel is read only\n         */\n        readOnlyChannel: PropTypes.bool,\n\n        /**\n         * Set if @channel should warn in this channel.\n         */\n        enableConfirmNotificationsToChannel: PropTypes.bool.isRequired,\n\n        /**\n         * Set if the emoji picker is enabled.\n         */\n        enableEmojiPicker: PropTypes.bool.isRequired,\n\n        /**\n         * Set if the gif picker is enabled.\n         */\n        enableGifPicker: PropTypes.bool.isRequired,\n\n        /**\n         * Set if the connection may be bad to warn user\n         */\n        badConnection: PropTypes.bool.isRequired,\n\n        /**\n         * The maximum length of a post\n         */\n        maxPostSize: PropTypes.number.isRequired,\n        rhsExpanded: PropTypes.bool.isRequired,\n\n        /**\n         * To check if the timezones are enable on the server.\n         */\n        isTimezoneEnabled: PropTypes.bool.isRequired,\n\n        /**\n         * The last time, if any, when the selected post changed. Will be 0 if no post selected.\n         */\n        selectedPostFocussedAt: PropTypes.number.isRequired,\n    }\n\n    static contextTypes = {\n        intl: intlShape.isRequired,\n    };\n\n    constructor(props) {\n        super(props);\n\n        this.state = {\n            showPostDeletedModal: false,\n            showConfirmModal: false,\n            showEmojiPicker: false,\n            showPreview: false,\n            draft: {\n                message: '',\n                uploadsInProgress: [],\n                fileInfos: [],\n            },\n            channelTimezoneCount: 0,\n            uploadsProgressPercent: {},\n            renderScrollbar: false,\n        };\n\n        this.lastBlurAt = 0;\n        this.draftsForPost = {};\n        this.doInitialScrollToBottom = false;\n    }\n\n    UNSAFE_componentWillMount() { // eslint-disable-line camelcase\n        this.props.clearCommentDraftUploads();\n        this.props.onResetHistoryIndex();\n        this.setState({draft: {...this.props.draft, uploadsInProgress: []}});\n    }\n\n    componentDidMount() {\n        this.focusTextbox();\n        document.addEventListener('paste', this.pasteHandler);\n        document.addEventListener('keydown', this.focusTextboxIfNecessary);\n\n        // When draft.message is not empty, set doInitialScrollToBottom to true so that\n        // on next component update, the actual this.scrollToBottom() will be called.\n        // This is made so that the this.scrollToBottom() will be called only once.\n        if (this.props.draft.message !== '') {\n            this.doInitialScrollToBottom = true;\n        }\n    }\n\n    componentWillUnmount() {\n        this.props.resetCreatePostRequest();\n        document.removeEventListener('paste', this.pasteHandler);\n        document.removeEventListener('keydown', this.focusTextboxIfNecessary);\n    }\n\n    UNSAFE_componentWillReceiveProps(newProps) { // eslint-disable-line camelcase\n        if (newProps.createPostErrorId === 'api.post.create_post.root_id.app_error' && newProps.createPostErrorId !== this.props.createPostErrorId) {\n            this.showPostDeletedModal();\n        }\n        if (newProps.rootId !== this.props.rootId) {\n            this.setState({draft: {...newProps.draft, uploadsInProgress: []}});\n        }\n\n        if (this.props.messageInHistory !== newProps.messageInHistory) {\n            this.setState({draft: newProps.draft});\n        }\n    }\n\n    componentDidUpdate(prevProps, prevState) {\n        if (prevState.draft.uploadsInProgress.length < this.state.draft.uploadsInProgress.length) {\n            this.scrollToBottom();\n        }\n\n        // Focus on textbox when emoji picker is closed\n        if (prevState.showEmojiPicker && !this.state.showEmojiPicker) {\n            this.focusTextbox();\n        }\n\n        if (prevProps.rootId !== this.props.rootId || prevProps.selectedPostFocussedAt !== this.props.selectedPostFocussedAt) {\n            this.focusTextbox();\n        }\n\n        if (this.doInitialScrollToBottom) {\n            this.scrollToBottom();\n            this.doInitialScrollToBottom = false;\n        }\n    }\n\n    updatePreview = (newState) => {\n        this.setState({showPreview: newState});\n    }\n\n    focusTextboxIfNecessary = (e) => {\n        // Should only focus if RHS is expanded\n        if (!this.props.rhsExpanded) {\n            return;\n        }\n\n        // Bit of a hack to not steal focus from the channel switch modal if it's open\n        // This is a special case as the channel switch modal does not enforce focus like\n        // most modals do\n        if (document.getElementsByClassName('channel-switch-modal').length) {\n            return;\n        }\n\n        if (shouldFocusMainTextbox(e, document.activeElement)) {\n            this.focusTextbox();\n        }\n    }\n\n    pasteHandler = (e) => {\n        if (!e.clipboardData || !e.clipboardData.items || e.target.id !== 'reply_textbox') {\n            return;\n        }\n\n        const table = getTable(e.clipboardData);\n        if (!table) {\n            return;\n        }\n\n        e.preventDefault();\n\n        const {draft} = this.state;\n        const message = formatMarkdownTableMessage(table, draft.message.trim());\n        const updatedDraft = {...draft, message};\n\n        this.props.onUpdateCommentDraft(updatedDraft);\n        this.setState({draft: updatedDraft});\n    }\n\n    handleNotifyAllConfirmation = (e) => {\n        this.hideNotifyAllModal();\n        this.doSubmit(e);\n    }\n\n    hideNotifyAllModal = () => {\n        this.setState({showConfirmModal: false});\n    }\n\n    showNotifyAllModal = () => {\n        this.setState({showConfirmModal: true});\n    }\n\n    toggleEmojiPicker = () => {\n        this.setState({showEmojiPicker: !this.state.showEmojiPicker});\n    }\n\n    hideEmojiPicker = () => {\n        this.setState({showEmojiPicker: false});\n    }\n\n    handleEmojiClick = (emoji) => {\n        const emojiAlias = emoji.name || emoji.aliases[0];\n\n        if (!emojiAlias) {\n            //Oops.. There went something wrong\n            return;\n        }\n\n        const {draft} = this.state;\n\n        let newMessage = '';\n        if (draft.message === '') {\n            newMessage = `:${emojiAlias}: `;\n        } else if ((/\\s+$/).test(draft.message)) {\n            // Check whether there is already a blank at the end of the current message\n            newMessage = `${draft.message}:${emojiAlias}: `;\n        } else {\n            newMessage = `${draft.message} :${emojiAlias}: `;\n        }\n\n        const modifiedDraft = {\n            ...draft,\n            message: newMessage,\n        };\n\n        this.props.onUpdateCommentDraft(modifiedDraft);\n        this.draftsForPost[this.props.rootId] = modifiedDraft;\n\n        this.setState({\n            showEmojiPicker: false,\n            draft: modifiedDraft,\n        });\n    }\n\n    handleGifClick = (gif) => {\n        const {draft} = this.state;\n\n        let newMessage = '';\n        if (draft.message === '') {\n            newMessage = gif;\n        } else if ((/\\s+$/).test(draft.message)) {\n            // Check whether there is already a blank at the end of the current message\n            newMessage = `${draft.message}${gif} `;\n        } else {\n            newMessage = `${draft.message} ${gif} `;\n        }\n\n        const modifiedDraft = {\n            ...draft,\n            message: newMessage,\n        };\n\n        this.props.onUpdateCommentDraft(modifiedDraft);\n        this.draftsForPost[this.props.rootId] = modifiedDraft;\n\n        this.setState({\n            showEmojiPicker: false,\n            draft: modifiedDraft,\n        });\n\n        this.focusTextbox();\n    }\n\n    handlePostError = (postError) => {\n        this.setState({postError});\n    }\n\n    handleSubmit = async (e) => {\n        e.preventDefault();\n\n        const membersCount = this.props.channelMembersCount;\n        const notificationsToChannel = this.props.enableConfirmNotificationsToChannel;\n        if (notificationsToChannel &&\n            membersCount > Constants.NOTIFY_ALL_MEMBERS &&\n            containsAtChannel(this.state.draft.message)) {\n            if (this.props.isTimezoneEnabled) {\n                const {data} = await this.props.getChannelTimezones(this.props.channelId);\n                if (data) {\n                    this.setState({channelTimezoneCount: data.length});\n                } else {\n                    this.setState({channelTimezoneCount: 0});\n                }\n            }\n            this.showNotifyAllModal();\n            return;\n        }\n\n        await this.doSubmit(e);\n    }\n\n    doSubmit = async (e) => {\n        if (e) {\n            e.preventDefault();\n        }\n\n        const {draft} = this.state;\n        const enableAddButton = this.shouldEnableAddButton();\n\n        if (!enableAddButton) {\n            return;\n        }\n\n        if (draft.uploadsInProgress.length > 0) {\n            return;\n        }\n\n        if (this.state.postError) {\n            this.setState({errorClass: 'animation--highlight'});\n            setTimeout(() => {\n                this.setState({errorClass: null});\n            }, Constants.ANIMATION_TIMEOUT);\n            return;\n        }\n\n        if (this.props.rootDeleted) {\n            this.showPostDeletedModal();\n            return;\n        }\n\n        const fasterThanHumanWillClick = 150;\n        const forceFocus = (Date.now() - this.lastBlurAt < fasterThanHumanWillClick);\n        this.focusTextbox(forceFocus);\n\n        const serverError = this.state.serverError;\n        let ignoreSlash = false;\n        if (isErrorInvalidSlashCommand(serverError) && draft.message === serverError.submittedMessage) {\n            ignoreSlash = true;\n        }\n\n        const options = {ignoreSlash};\n\n        try {\n            await this.props.onSubmit(options);\n\n            this.setState({\n                postError: null,\n                serverError: null,\n            });\n        } catch (err) {\n            if (isErrorInvalidSlashCommand(err)) {\n                this.props.onUpdateCommentDraft(draft);\n            }\n            err.submittedMessage = draft.message;\n            this.setState({serverError: err});\n            return;\n        }\n\n        this.setState({draft: {...this.props.draft, uploadsInProgress: []}});\n    }\n\n    commentMsgKeyPress = (e) => {\n        const {\n            ctrlSend,\n            codeBlockOnCtrlEnter,\n        } = this.props;\n\n        const {allowSending, withClosedCodeBlock, message} = postMessageOnKeyPress(e, this.state.draft.message, ctrlSend, codeBlockOnCtrlEnter);\n\n        if (allowSending) {\n            e.persist();\n            if (this.refs.textbox) {\n                this.refs.textbox.getWrappedInstance().blur();\n            }\n\n            if (withClosedCodeBlock && message) {\n                const {draft} = this.state;\n                const updatedDraft = {...draft, message};\n                this.props.onUpdateCommentDraft(updatedDraft);\n                this.setState({draft: updatedDraft}, () => this.handleSubmit(e));\n                this.draftsForPost[this.props.rootId] = updatedDraft;\n            } else {\n                this.handleSubmit(e);\n            }\n\n            this.updatePreview(false);\n            setTimeout(() => {\n                this.focusTextbox();\n            });\n        }\n\n        this.emitTypingEvent();\n    }\n\n    emitTypingEvent = () => {\n        const {channelId, rootId} = this.props;\n        GlobalActions.emitLocalUserTypingEvent(channelId, rootId);\n    }\n\n    scrollToBottom = () => {\n        const $el = $('.post-right__scroll');\n        if ($el[0]) {\n            $el.parent().scrollTop($el[0].scrollHeight);\n        }\n    }\n\n    handleChange = (e) => {\n        const message = e.target.value;\n\n        let serverError = this.state.serverError;\n        if (isErrorInvalidSlashCommand(serverError)) {\n            serverError = null;\n        }\n\n        const {draft} = this.state;\n        const updatedDraft = {...draft, message};\n        this.props.onUpdateCommentDraft(updatedDraft);\n        this.setState({draft: updatedDraft, serverError}, () => {\n            this.scrollToBottom();\n        });\n        this.draftsForPost[this.props.rootId] = updatedDraft;\n    }\n\n    handleKeyDown = (e) => {\n        if (\n            (this.props.ctrlSend || this.props.codeBlockOnCtrlEnter) &&\n            Utils.isKeyPressed(e, Constants.KeyCodes.ENTER) &&\n            (e.ctrlKey || e.metaKey)\n        ) {\n            this.updatePreview(false);\n            this.commentMsgKeyPress(e);\n            return;\n        }\n\n        const {draft} = this.state;\n        const {message} = draft;\n\n        if (!e.ctrlKey && !e.metaKey && !e.altKey && !e.shiftKey && Utils.isKeyPressed(e, Constants.KeyCodes.UP) && message === '') {\n            e.preventDefault();\n            if (this.refs.textbox) {\n                this.refs.textbox.getWrappedInstance().blur();\n            }\n\n            const {data: canEditNow} = this.props.onEditLatestPost();\n            if (!canEditNow) {\n                this.focusTextbox(true);\n            }\n        }\n\n        if ((e.ctrlKey || e.metaKey) && !e.altKey && !e.shiftKey) {\n            if (Utils.isKeyPressed(e, Constants.KeyCodes.UP)) {\n                e.preventDefault();\n                this.props.onMoveHistoryIndexBack();\n            } else if (Utils.isKeyPressed(e, Constants.KeyCodes.DOWN)) {\n                e.preventDefault();\n                this.props.onMoveHistoryIndexForward();\n            }\n        }\n    }\n\n    handleFileUploadChange = () => {\n        this.focusTextbox();\n    }\n\n    handleUploadStart = (clientIds) => {\n        const {draft} = this.state;\n        const uploadsInProgress = [...draft.uploadsInProgress, ...clientIds];\n\n        const modifiedDraft = {\n            ...draft,\n            uploadsInProgress,\n        };\n        this.props.onUpdateCommentDraft(modifiedDraft);\n        this.setState({draft: modifiedDraft});\n        this.draftsForPost[this.props.rootId] = modifiedDraft;\n\n        // this is a bit redundant with the code that sets focus when the file input is clicked,\n        // but this also resets the focus after a drag and drop\n        this.focusTextbox();\n    }\n\n    handleUploadProgress = ({clientId, name, percent, type}) => {\n        const uploadsProgressPercent = {...this.state.uploadsProgressPercent, [clientId]: {percent, name, type}};\n        this.setState({uploadsProgressPercent});\n    }\n\n    handleFileUploadComplete = (fileInfos, clientIds, channelId, rootId) => {\n        const draft = this.draftsForPost[rootId];\n        const uploadsInProgress = [...draft.uploadsInProgress];\n        const newFileInfos = sortFileInfos([...draft.fileInfos, ...fileInfos], this.props.locale);\n\n        // remove each finished file from uploads\n        for (let i = 0; i < clientIds.length; i++) {\n            const index = uploadsInProgress.indexOf(clientIds[i]);\n\n            if (index !== -1) {\n                uploadsInProgress.splice(index, 1);\n            }\n        }\n\n        const modifiedDraft = {\n            ...draft,\n            fileInfos: newFileInfos,\n            uploadsInProgress,\n        };\n        this.props.updateCommentDraftWithRootId(rootId, modifiedDraft);\n        this.draftsForPost[rootId] = modifiedDraft;\n        if (this.props.rootId === rootId) {\n            this.setState({draft: modifiedDraft});\n        }\n\n        // Focus on preview if needed/possible - if user has switched teams since starting the file upload,\n        // the preview will be undefined and the switch will fail\n        if (typeof this.refs.preview != 'undefined' && this.refs.preview) {\n            this.refs.preview.refs.container.scrollIntoView();\n        }\n    }\n\n    handleUploadError = (err, clientId = -1, rootId = -1) => {\n        if (clientId !== -1) {\n            const draft = {...this.draftsForPost[rootId]};\n            const uploadsInProgress = [...draft.uploadsInProgress];\n\n            const index = uploadsInProgress.indexOf(clientId);\n            if (index !== -1) {\n                uploadsInProgress.splice(index, 1);\n            }\n\n            const modifiedDraft = {\n                ...draft,\n                uploadsInProgress,\n            };\n            this.props.updateCommentDraftWithRootId(rootId, modifiedDraft);\n            this.draftsForPost[rootId] = modifiedDraft;\n            if (this.props.rootId === rootId) {\n                this.setState({draft: modifiedDraft});\n            }\n        }\n\n        let serverError = err;\n        if (err && typeof err === 'string') {\n            serverError = new Error(err);\n        }\n\n        this.setState({serverError});\n    }\n\n    removePreview = (id) => {\n        const {draft} = this.state;\n        const fileInfos = [...draft.fileInfos];\n        const uploadsInProgress = [...draft.uploadsInProgress];\n\n        // Clear previous errors\n        this.handleUploadError(null);\n\n        // id can either be the id of an uploaded file or the client id of an in progress upload\n        let index = fileInfos.findIndex((info) => info.id === id);\n        if (index === -1) {\n            index = uploadsInProgress.indexOf(id);\n\n            if (index !== -1) {\n                uploadsInProgress.splice(index, 1);\n\n                if (this.refs.fileUpload && this.refs.fileUpload.getWrappedInstance()) {\n                    this.refs.fileUpload.getWrappedInstance().cancelUpload(id);\n                }\n            }\n        } else {\n            fileInfos.splice(index, 1);\n        }\n\n        const modifiedDraft = {\n            ...draft,\n            fileInfos,\n            uploadsInProgress,\n        };\n\n        this.props.onUpdateCommentDraft(modifiedDraft);\n        this.setState({draft: modifiedDraft});\n        this.draftsForPost[this.props.rootId] = modifiedDraft;\n\n        this.handleFileUploadChange();\n    }\n\n    getFileCount = () => {\n        const {\n            draft: {\n                fileInfos,\n                uploadsInProgress,\n            },\n        } = this.state;\n        return fileInfos.length + uploadsInProgress.length;\n    }\n\n    getFileUploadTarget = () => {\n        return this.refs.textbox.getWrappedInstance();\n    }\n\n    getCreateCommentControls = () => {\n        return this.refs.createCommentControls;\n    }\n\n    shouldEnableAddButton = () => {\n        if (this.props.enableAddButton) {\n            return true;\n        }\n\n        return isErrorInvalidSlashCommand(this.state.serverError);\n    }\n\n    focusTextbox = (keepFocus = false) => {\n        if (this.refs.textbox && (keepFocus || !UserAgent.isMobile())) {\n            this.refs.textbox.getWrappedInstance().focus();\n        }\n    }\n\n    showPostDeletedModal = () => {\n        this.setState({\n            showPostDeletedModal: true,\n        });\n    }\n\n    hidePostDeletedModal = () => {\n        this.setState({\n            showPostDeletedModal: false,\n        });\n\n        this.props.resetCreatePostRequest();\n    }\n\n    handleBlur = () => {\n        this.lastBlurAt = Date.now();\n    }\n\n    handleHeightChange = (height, maxHeight) => {\n        this.setState({renderScrollbar: height > maxHeight});\n    }\n\n    render() {\n        const {draft} = this.state;\n        const {readOnlyChannel} = this.props;\n        const {formatMessage} = this.context.intl;\n        const enableAddButton = this.shouldEnableAddButton();\n        const {renderScrollbar} = this.state;\n        const ariaLabelReplyInput = Utils.localizeMessage('accessibility.sections.rhsFooter', 'reply input region');\n\n        const notifyAllTitle = (\n            <FormattedMessage\n                id='notify_all.title.confirm'\n                defaultMessage='Confirm sending notifications to entire channel'\n            />\n        );\n\n        const notifyAllConfirm = (\n            <FormattedMessage\n                id='notify_all.confirm'\n                defaultMessage='Confirm'\n            />\n        );\n\n        let notifyAllMessage = '';\n        if (this.state.channelTimezoneCount && this.props.isTimezoneEnabled) {\n            notifyAllMessage = (\n                <FormattedMarkdownMessage\n                    id='notify_all.question_timezone'\n                    defaultMessage='By using @all or @channel you are about to send notifications to **{totalMembers} people** in **{timezones, number} {timezones, plural, one {timezone} other {timezones}}**. Are you sure you want to do this?'\n                    values={{\n                        totalMembers: this.props.channelMembersCount - 1,\n                        timezones: this.state.channelTimezoneCount,\n                    }}\n                />\n            );\n        } else {\n            notifyAllMessage = (\n                <FormattedMessage\n                    id='notify_all.question'\n                    defaultMessage='By using @all or @channel you are about to send notifications to {totalMembers} people. Are you sure you want to do this?'\n                    values={{\n                        totalMembers: this.props.channelMembersCount - 1,\n                    }}\n                />\n            );\n        }\n\n        let serverError = null;\n        if (this.state.serverError) {\n            serverError = (\n                <MessageSubmitError\n                    id='postServerError'\n                    error={this.state.serverError}\n                    submittedMessage={this.state.serverError.submittedMessage}\n                    handleSubmit={this.handleSubmit}\n                />\n            );\n        }\n\n        let postError = null;\n        if (this.state.postError) {\n            const postErrorClass = 'post-error' + (this.state.errorClass ? (' ' + this.state.errorClass) : '');\n            postError = <label className={postErrorClass}>{this.state.postError}</label>;\n        }\n\n        let preview = null;\n        if (!readOnlyChannel && (draft.fileInfos.length > 0 || draft.uploadsInProgress.length > 0)) {\n            preview = (\n                <FilePreview\n                    fileInfos={draft.fileInfos}\n                    onRemove={this.removePreview}\n                    uploadsInProgress={draft.uploadsInProgress}\n                    uploadsProgressPercent={this.state.uploadsProgressPercent}\n                    ref='preview'\n                />\n            );\n        }\n\n        let uploadsInProgressText = null;\n        if (draft.uploadsInProgress.length > 0) {\n            uploadsInProgressText = (\n                <span className='pull-right post-right-comments-upload-in-progress'>\n                    {draft.uploadsInProgress.length === 1 ? (\n                        <FormattedMessage\n                            id='create_comment.file'\n                            defaultMessage='File uploading'\n                        />\n                    ) : (\n                        <FormattedMessage\n                            id='create_comment.files'\n                            defaultMessage='Files uploading'\n                        />\n                    )}\n                </span>\n            );\n        }\n\n        let addButtonClass = 'btn btn-primary comment-btn pull-right';\n        if (!enableAddButton) {\n            addButtonClass += ' disabled';\n        }\n\n        let fileUpload;\n        if (!readOnlyChannel && !this.state.showPreview) {\n            fileUpload = (\n                <FileUpload\n                    ref='fileUpload'\n                    fileCount={this.getFileCount()}\n                    getTarget={this.getFileUploadTarget}\n                    onFileUploadChange={this.handleFileUploadChange}\n                    onUploadStart={this.handleUploadStart}\n                    onFileUpload={this.handleFileUploadComplete}\n                    onUploadError={this.handleUploadError}\n                    onUploadProgress={this.handleUploadProgress}\n                    rootId={this.props.rootId}\n                    postType='comment'\n                />\n            );\n        }\n\n        let emojiPicker = null;\n        const emojiButtonAriaLabel = formatMessage({id: 'emoji_picker.emojiPicker', defaultMessage: 'Emoji Picker'}).toLowerCase();\n\n        if (this.props.enableEmojiPicker && !readOnlyChannel && !this.state.showPreview) {\n            emojiPicker = (\n                <div>\n                    <EmojiPickerOverlay\n                        show={this.state.showEmojiPicker}\n                        target={this.getCreateCommentControls}\n                        onHide={this.hideEmojiPicker}\n                        onEmojiClose={this.hideEmojiPicker}\n                        onEmojiClick={this.handleEmojiClick}\n                        onGifClick={this.handleGifClick}\n                        enableGifPicker={this.props.enableGifPicker}\n                        topOffset={55}\n                    />\n                    <button\n                        aria-label={emojiButtonAriaLabel}\n                        type='button'\n                        onClick={this.toggleEmojiPicker}\n                        className='style--none emoji-picker__container post-action'\n                    >\n                        <EmojiIcon className={'icon icon--emoji emoji-rhs ' + (this.state.showEmojiPicker ? 'active' : '')}/>\n                    </button>\n                </div>\n            );\n        }\n\n        let createMessage;\n        if (readOnlyChannel) {\n            createMessage = Utils.localizeMessage('create_post.read_only', 'This channel is read-only. Only members with permission can post here.');\n        } else {\n            createMessage = Utils.localizeMessage('create_comment.addComment', 'Add a comment...');\n        }\n\n        let scrollbarClass = '';\n        if (renderScrollbar) {\n            scrollbarClass = ' scroll';\n        }\n\n        return (\n            <form onSubmit={this.handleSubmit}>\n                <div\n                    role='application'\n                    id='rhsFooter'\n                    aria-label={ariaLabelReplyInput}\n                    tabIndex='-1'\n                    className={`post-create a11y__region${scrollbarClass}`}\n                    data-a11y-sort-order='4'\n                >\n                    <div\n                        id={this.props.rootId}\n                        className='post-create-body comment-create-body'\n                    >\n                        <div className='post-body__cell'>\n                            <Textbox\n                                onChange={this.handleChange}\n                                onKeyPress={this.commentMsgKeyPress}\n                                onKeyDown={this.handleKeyDown}\n                                onComposition={this.emitTypingEvent}\n                                onHeightChange={this.handleHeightChange}\n                                handlePostError={this.handlePostError}\n                                value={readOnlyChannel ? '' : draft.message}\n                                onBlur={this.handleBlur}\n                                createMessage={createMessage}\n                                emojiEnabled={this.props.enableEmojiPicker}\n                                initialText=''\n                                channelId={this.props.channelId}\n                                isRHS={true}\n                                popoverMentionKeyClick={true}\n                                id='reply_textbox'\n                                ref='textbox'\n                                disabled={readOnlyChannel}\n                                characterLimit={this.props.maxPostSize}\n                                preview={this.state.showPreview}\n                                badConnection={this.props.badConnection}\n                                listenForMentionKeyClick={true}\n                            />\n                            <span\n                                ref='createCommentControls'\n                                className='post-body__actions'\n                            >\n                                {fileUpload}\n                                {emojiPicker}\n                            </span>\n                        </div>\n                    </div>\n                    <div\n                        className='post-create-footer'\n                    >\n                        <div className='d-flex justify-content-between'>\n                            <MsgTyping\n                                channelId={this.props.channelId}\n                                postId={this.props.rootId}\n                            />\n                            <TextboxLinks\n                                characterLimit={this.props.maxPostSize}\n                                showPreview={this.state.showPreview}\n                                updatePreview={this.updatePreview}\n                                message={readOnlyChannel ? '' : this.state.message}\n                            />\n                        </div>\n                        <div>\n                            <input\n                                type='button'\n                                disabled={!enableAddButton}\n                                className={addButtonClass}\n                                value={formatMessage({id: 'create_comment.comment', defaultMessage: 'Add Comment'})}\n                                onClick={this.handleSubmit}\n                            />\n                            {uploadsInProgressText}\n                            {postError}\n                            {preview}\n                            {serverError}\n                        </div>\n                    </div>\n                </div>\n                <PostDeletedModal\n                    show={this.state.showPostDeletedModal}\n                    onHide={this.hidePostDeletedModal}\n                />\n                <ConfirmModal\n                    title={notifyAllTitle}\n                    message={notifyAllMessage}\n                    confirmButtonText={notifyAllConfirm}\n                    show={this.state.showConfirmModal}\n                    onConfirm={this.handleNotifyAllConfirmation}\n                    onCancel={this.hideNotifyAllModal}\n                />\n            </form>\n        );\n    }\n}\n","// Copyright (c) 2015-present Mattermost, Inc. All Rights Reserved.\n// See LICENSE.txt for license information.\n\nimport {connect} from 'react-redux';\nimport {bindActionCreators} from 'redux';\nimport {getConfig} from 'mattermost-redux/selectors/entities/general';\nimport {isCurrentUserSystemAdmin} from 'mattermost-redux/selectors/entities/users';\nimport {getBool} from 'mattermost-redux/selectors/entities/preferences';\nimport {getAllChannelStats} from 'mattermost-redux/selectors/entities/channels';\nimport {makeGetMessageInHistoryItem} from 'mattermost-redux/selectors/entities/posts';\nimport {resetCreatePostRequest, resetHistoryIndex} from 'mattermost-redux/actions/posts';\nimport {getChannelTimezones} from 'mattermost-redux/actions/channels';\nimport {Preferences, Posts} from 'mattermost-redux/constants';\n\nimport {connectionErrorCount} from 'selectors/views/system';\n\nimport {Constants, StoragePrefixes} from 'utils/constants.jsx';\nimport {getCurrentLocale} from 'selectors/i18n';\n\nimport {\n    clearCommentDraftUploads,\n    updateCommentDraft,\n    makeOnMoveHistoryIndex,\n    makeOnSubmit,\n    makeOnEditLatestPost,\n} from 'actions/views/create_comment';\nimport {getPostDraft, getIsRhsExpanded, getSelectedPostFocussedAt} from 'selectors/rhs';\n\nimport CreateComment from './create_comment.jsx';\n\nfunction makeMapStateToProps() {\n    const getMessageInHistoryItem = makeGetMessageInHistoryItem(Posts.MESSAGE_TYPES.COMMENT);\n\n    return (state, ownProps) => {\n        const err = state.requests.posts.createPost.error || {};\n\n        const draft = getPostDraft(state, StoragePrefixes.COMMENT_DRAFT, ownProps.rootId);\n        const enableAddButton = draft.message.trim().length !== 0 || draft.fileInfos.length !== 0;\n\n        const channelMembersCount = getAllChannelStats(state)[ownProps.channelId] ? getAllChannelStats(state)[ownProps.channelId].member_count : 1;\n        const messageInHistory = getMessageInHistoryItem(state);\n\n        const channel = state.entities.channels.channels[ownProps.channelId] || {};\n\n        const config = getConfig(state);\n        const enableConfirmNotificationsToChannel = config.EnableConfirmNotificationsToChannel === 'true';\n        const enableEmojiPicker = config.EnableEmojiPicker === 'true';\n        const enableGifPicker = config.EnableGifPicker === 'true';\n        const badConnection = connectionErrorCount(state) > 1;\n        const isTimezoneEnabled = config.ExperimentalTimezone === 'true';\n\n        return {\n            draft,\n            messageInHistory,\n            enableAddButton,\n            channelMembersCount,\n            codeBlockOnCtrlEnter: getBool(state, Preferences.CATEGORY_ADVANCED_SETTINGS, 'code_block_ctrl_enter', true),\n            ctrlSend: getBool(state, Preferences.CATEGORY_ADVANCED_SETTINGS, 'send_on_ctrl_enter'),\n            createPostErrorId: err.server_error_id,\n            readOnlyChannel: !isCurrentUserSystemAdmin(state) && config.ExperimentalTownSquareIsReadOnly === 'true' && channel.name === Constants.DEFAULT_CHANNEL,\n            enableConfirmNotificationsToChannel,\n            enableEmojiPicker,\n            enableGifPicker,\n            locale: getCurrentLocale(state),\n            maxPostSize: parseInt(config.MaxPostSize, 10) || Constants.DEFAULT_CHARACTER_LIMIT,\n            rhsExpanded: getIsRhsExpanded(state),\n            badConnection,\n            isTimezoneEnabled,\n            selectedPostFocussedAt: getSelectedPostFocussedAt(state),\n        };\n    };\n}\n\nfunction makeOnUpdateCommentDraft(rootId) {\n    return (draft) => updateCommentDraft(rootId, draft);\n}\n\nfunction makeMapDispatchToProps() {\n    let onUpdateCommentDraft;\n    let onSubmit;\n    let onMoveHistoryIndexBack;\n    let onMoveHistoryIndexForward;\n    let onEditLatestPost;\n\n    function onResetHistoryIndex() {\n        return resetHistoryIndex(Posts.MESSAGE_TYPES.COMMENT);\n    }\n\n    let rootId;\n    let channelId;\n    let latestPostId;\n\n    return (dispatch, ownProps) => {\n        if (rootId !== ownProps.rootId) {\n            onUpdateCommentDraft = makeOnUpdateCommentDraft(ownProps.rootId);\n            onMoveHistoryIndexBack = makeOnMoveHistoryIndex(ownProps.rootId, -1);\n            onMoveHistoryIndexForward = makeOnMoveHistoryIndex(ownProps.rootId, 1);\n        }\n\n        if (rootId !== ownProps.rootId || channelId !== ownProps.channelId) {\n            onEditLatestPost = makeOnEditLatestPost(ownProps.channelId, ownProps.rootId);\n        }\n\n        if (rootId !== ownProps.rootId || channelId !== ownProps.channelId || latestPostId !== ownProps.latestPostId) {\n            onSubmit = makeOnSubmit(ownProps.channelId, ownProps.rootId, ownProps.latestPostId);\n        }\n\n        rootId = ownProps.rootId;\n        channelId = ownProps.channelId;\n        latestPostId = ownProps.latestPostId;\n\n        return bindActionCreators({\n            clearCommentDraftUploads,\n            onUpdateCommentDraft,\n            updateCommentDraftWithRootId: updateCommentDraft,\n            onSubmit,\n            onResetHistoryIndex,\n            onMoveHistoryIndexBack,\n            onMoveHistoryIndexForward,\n            onEditLatestPost,\n            resetCreatePostRequest,\n            getChannelTimezones,\n        }, dispatch);\n    };\n}\n\nexport default connect(makeMapStateToProps, makeMapDispatchToProps)(CreateComment);\n","// Copyright (c) 2015-present Mattermost, Inc. All Rights Reserved.\n// See LICENSE.txt for license information.\n\nimport PropTypes from 'prop-types';\nimport React from 'react';\nimport {FormattedDate} from 'react-intl';\n\nexport default class DateSeparator extends React.PureComponent {\n    static propTypes = {\n        date: PropTypes.oneOfType([\n            PropTypes.number,\n            PropTypes.instanceOf(Date),\n        ]).isRequired,\n        timeZone: PropTypes.string,\n        enableTimezone: PropTypes.bool,\n    }\n\n    render() {\n        const {\n            date,\n            enableTimezone,\n            timeZone,\n        } = this.props;\n        const timezoneProps = enableTimezone && timeZone ? {timeZone} : {};\n\n        return (\n            <div\n                className='date-separator'\n            >\n                <hr className='separator__hr'/>\n                <div className='separator__text'>\n                    <FormattedDate\n                        {...timezoneProps}\n                        value={date}\n                        weekday='short'\n                        month='short'\n                        day='2-digit'\n                        year='numeric'\n                    />\n                </div>\n            </div>\n        );\n    }\n}\n","// Copyright (c) 2015-present Mattermost, Inc. All Rights Reserved.\n// See LICENSE.txt for license information.\n\nimport {connect} from 'react-redux';\n\nimport {getCurrentUserId} from 'mattermost-redux/selectors/entities/users';\nimport {getUserTimezone} from 'mattermost-redux/selectors/entities/timezone';\nimport {getUserCurrentTimezone} from 'mattermost-redux/utils/timezone_utils';\n\nimport {areTimezonesEnabledAndSupported} from 'selectors/general';\n\nimport DateSeparator from './date_separator';\n\nfunction mapStateToProps(state, props) {\n    const currentUserId = getCurrentUserId(state);\n\n    let userTimezone;\n    if (props.userTimezone) {\n        userTimezone = props.userTimezone;\n    } else {\n        userTimezone = getUserTimezone(state, currentUserId);\n    }\n\n    return {\n        enableTimezone: areTimezonesEnabledAndSupported(state),\n        timeZone: getUserCurrentTimezone(userTimezone),\n    };\n}\n\nexport default connect(mapStateToProps)(DateSeparator);\n","// Copyright (c) 2015-present Mattermost, Inc. All Rights Reserved.\n// See LICENSE.txt for license information.\n\nimport PropTypes from 'prop-types';\nimport React from 'react';\nimport {FormattedDate} from 'react-intl';\n\nexport default class FloatingTimestamp extends React.PureComponent {\n    static propTypes = {\n        isScrolling: PropTypes.bool.isRequired,\n        isMobile: PropTypes.bool,\n        createAt: PropTypes.oneOfType([\n            PropTypes.instanceOf(Date),\n            PropTypes.number,\n        ]).isRequired,\n        isRhsPost: PropTypes.bool,\n    }\n\n    render() {\n        if (!this.props.isMobile) {\n            return <noscript/>;\n        }\n\n        if (this.props.createAt === 0) {\n            return <noscript/>;\n        }\n\n        const dateString = (\n            <FormattedDate\n                value={this.props.createAt}\n                weekday='short'\n                day='2-digit'\n                month='short'\n                year='numeric'\n            />\n        );\n\n        let className = 'post-list__timestamp';\n        if (this.props.isScrolling) {\n            className += ' scrolling';\n        }\n\n        if (this.props.isRhsPost) {\n            className += ' rhs';\n        }\n\n        return (\n            <div className={className}>\n                <div>\n                    <span>{dateString}</span>\n                </div>\n            </div>\n        );\n    }\n}\n","// Copyright (c) 2015-present Mattermost, Inc. All Rights Reserved.\n// See LICENSE.txt for license information.\n\nimport {connect} from 'react-redux';\n\nimport {getPost} from 'mattermost-redux/selectors/entities/posts';\nimport * as PostListUtils from 'mattermost-redux/utils/post_list';\n\nimport FloatingTimestamp from './floating_timestamp';\n\nfunction mapStateToProps(state, ownProps) {\n    let postId = ownProps.postId;\n    if (PostListUtils.isCombinedUserActivityPost(postId)) {\n        const combinedIds = PostListUtils.getPostIdsForCombinedUserActivityPost(postId);\n\n        postId = combinedIds[combinedIds.length - 1];\n    }\n\n    const post = getPost(state, postId);\n\n    return {\n        createAt: post ? post.create_at : 0,\n    };\n}\n\nexport default connect(mapStateToProps)(FloatingTimestamp);\n","// Copyright (c) 2015-present Mattermost, Inc. All Rights Reserved.\n// See LICENSE.txt for license information.\n\nimport PropTypes from 'prop-types';\nimport React from 'react';\n\nexport default class ChannelPermissionGate extends React.Component {\n    static defaultProps = {\n        invert: false,\n    }\n\n    static propTypes = {\n\n        /**\n         * Channel to check the permission\n         */\n        channelId: PropTypes.string,\n\n        /**\n         * Team to check the permission\n         */\n        teamId: PropTypes.string,\n\n        /**\n         * Permissions enough to pass the gate (binary OR)\n         */\n        permissions: PropTypes.arrayOf(PropTypes.string).isRequired,\n\n        /**\n         * Has permission\n         */\n        hasPermission: PropTypes.bool.isRequired,\n\n        /**\n         * Invert the permission (used for else)\n         */\n        invert: PropTypes.bool.isRequired,\n\n        /**\n         * Content protected by the permissions gate\n         */\n        children: PropTypes.node.isRequired,\n    };\n\n    render() {\n        if (this.props.hasPermission && !this.props.invert) {\n            return this.props.children;\n        }\n        if (!this.props.hasPermission && this.props.invert) {\n            return this.props.children;\n        }\n        return null;\n    }\n}\n","// Copyright (c) 2015-present Mattermost, Inc. All Rights Reserved.\n// See LICENSE.txt for license information.\n\nimport {connect} from 'react-redux';\n\nimport {haveIChannelPermission} from 'mattermost-redux/selectors/entities/roles';\n\nimport ChannelPermissionGate from './channel_permission_gate.jsx';\n\nfunction mapStateToProps(state, ownProps) {\n    if (!ownProps.channelId || ownProps.teamId === null || typeof ownProps.teamId === 'undefined') {\n        return {hasPermission: false};\n    }\n\n    for (const permission of ownProps.permissions) {\n        if (haveIChannelPermission(state, {channel: ownProps.channelId, team: ownProps.teamId, permission})) {\n            return {hasPermission: true};\n        }\n    }\n\n    return {hasPermission: false};\n}\n\nexport default connect(mapStateToProps)(ChannelPermissionGate);\n","// Copyright (c) 2015-present Mattermost, Inc. All Rights Reserved.\n// See LICENSE.txt for license information.\n\nimport PropTypes from 'prop-types';\nimport React, {Component} from 'react';\nimport {FormattedMessage} from 'react-intl';\nimport {OverlayTrigger, Tooltip} from 'react-bootstrap';\n\nimport Permissions from 'mattermost-redux/constants/permissions';\n\nimport {showGetPostLinkModal} from 'actions/global_actions.jsx';\nimport {Locations, ModalIdentifiers, UNSET_POST_EDIT_TIME_LIMIT} from 'utils/constants.jsx';\nimport DeletePostModal from 'components/delete_post_modal';\nimport DelayedAction from 'utils/delayed_action.jsx';\nimport * as PostUtils from 'utils/post_utils.jsx';\nimport * as Utils from 'utils/utils.jsx';\nimport ChannelPermissionGate from 'components/permissions_gates/channel_permission_gate';\n\nimport Pluggable from 'plugins/pluggable';\n\nimport Menu from 'components/widgets/menu/menu.jsx';\nimport MenuWrapper from 'components/widgets/menu/menu_wrapper.jsx';\nimport MenuItemAction from 'components/widgets/menu/menu_items/menu_item_action.jsx';\n\nconst MENU_BOTTOM_MARGIN = 80;\n\nexport default class DotMenu extends Component {\n    static propTypes = {\n        post: PropTypes.object.isRequired,\n        teamId: PropTypes.string,\n        location: PropTypes.oneOf([Locations.CENTER, Locations.RHS_ROOT, Locations.RHS_COMMENT, Locations.SEARCH]).isRequired,\n        commentCount: PropTypes.number,\n        isFlagged: PropTypes.bool,\n        handleCommentClick: PropTypes.func,\n        handleDropdownOpened: PropTypes.func,\n        handleAddReactionClick: PropTypes.func,\n        isReadOnly: PropTypes.bool,\n        pluginMenuItems: PropTypes.arrayOf(PropTypes.object),\n        isLicensed: PropTypes.bool.isRequired,\n        postEditTimeLimit: PropTypes.string.isRequired,\n        enableEmojiPicker: PropTypes.bool.isRequired,\n        actions: PropTypes.shape({\n\n            /**\n             * Function flag the post\n             */\n            flagPost: PropTypes.func.isRequired,\n\n            /**\n             * Function to unflag the post\n             */\n            unflagPost: PropTypes.func.isRequired,\n\n            /**\n             * Function to set the editing post\n             */\n            setEditingPost: PropTypes.func.isRequired,\n\n            /**\n             * Function to pin the post\n             */\n            pinPost: PropTypes.func.isRequired,\n\n            /**\n             * Function to unpin the post\n             */\n            unpinPost: PropTypes.func.isRequired,\n\n            /**\n             * Function to open a modal\n             */\n            openModal: PropTypes.func.isRequired,\n        }).isRequired,\n    }\n\n    static defaultProps = {\n        post: {},\n        commentCount: 0,\n        isFlagged: false,\n        isReadOnly: false,\n        pluginMenuItems: [],\n        location: Locations.CENTER,\n        enableEmojiPicker: false,\n    }\n\n    constructor(props) {\n        super(props);\n\n        this.editDisableAction = new DelayedAction(this.handleEditDisable);\n\n        this.state = {\n            openUp: false,\n        };\n\n        this.buttonRef = React.createRef();\n    }\n\n    disableCanEditPostByTime() {\n        const {post, isLicensed, postEditTimeLimit} = this.props;\n        const canEdit = PostUtils.canEditPost(post);\n\n        if (canEdit && isLicensed) {\n            if (String(postEditTimeLimit) !== String(UNSET_POST_EDIT_TIME_LIMIT)) {\n                const milliseconds = 1000;\n                const timeLeft = (post.create_at + (postEditTimeLimit * milliseconds)) - Utils.getTimestamp();\n                if (timeLeft > 0) {\n                    this.editDisableAction.fireAfter(timeLeft + milliseconds);\n                }\n            }\n        }\n    }\n\n    componentDidMount() {\n        this.disableCanEditPostByTime();\n    }\n\n    static getDerivedStateFromProps(props) {\n        return {\n            canDelete: PostUtils.canDeletePost(props.post) && !props.isReadOnly,\n            canEdit: PostUtils.canEditPost(props.post) && !props.isReadOnly,\n        };\n    }\n\n    componentWillUnmount() {\n        this.editDisableAction.cancel();\n    }\n\n    handleEditDisable = () => {\n        this.setState({canEdit: false});\n    }\n\n    handleFlagMenuItemActivated = () => {\n        if (this.props.isFlagged) {\n            this.props.actions.unflagPost(this.props.post.id);\n        } else {\n            this.props.actions.flagPost(this.props.post.id);\n        }\n    }\n\n    // listen to clicks/taps on add reaction menu item and pass to parent handler\n    handleAddReactionMenuItemActivated = (e) => {\n        e.preventDefault();\n\n        // to be safe, make sure the handler function has been defined\n        if (this.props.handleAddReactionClick) {\n            this.props.handleAddReactionClick();\n        }\n    }\n\n    handlePermalinkMenuItemActivated = (e) => {\n        e.preventDefault();\n        showGetPostLinkModal(this.props.post);\n    }\n\n    handlePinMenuItemActivated = () => {\n        if (this.props.post.is_pinned) {\n            this.props.actions.unpinPost(this.props.post.id);\n        } else {\n            this.props.actions.pinPost(this.props.post.id);\n        }\n    }\n\n    handleDeleteMenuItemActivated = (e) => {\n        e.preventDefault();\n\n        const deletePostModalData = {\n            ModalId: ModalIdentifiers.DELETE_POST,\n            dialogType: DeletePostModal,\n            dialogProps: {\n                post: this.props.post,\n                commentCount: this.props.commentCount,\n                isRHS: this.props.location === Locations.RHS_ROOT || this.props.location === Locations.RHS_COMMENT,\n            },\n        };\n\n        this.props.actions.openModal(deletePostModalData);\n    }\n\n    handleEditMenuItemActivated = () => {\n        this.props.actions.setEditingPost(\n            this.props.post.id,\n            this.props.commentCount,\n            this.props.location === Locations.CENTER ? 'post_textbox' : 'reply_textbox',\n            this.props.post.root_id ? Utils.localizeMessage('rhs_comment.comment', 'Comment') : Utils.localizeMessage('create_post.post', 'Post'),\n            this.props.location === Locations.RHS_ROOT || this.props.location === Locations.RHS_COMMENT,\n        );\n    }\n\n    tooltip = (\n        <Tooltip\n            id='dotmenu-icon-tooltip'\n            className='hidden-xs'\n        >\n            <FormattedMessage\n                id='post_info.dot_menu.tooltip.more_actions'\n                defaultMessage='More Actions'\n            />\n        </Tooltip>\n    )\n\n    refCallback = (ref) => {\n        if (ref) {\n            const rect = ref.rect();\n            const y = rect.y || rect.top;\n            const height = rect.height;\n            const windowHeight = window.innerHeight;\n            if ((y + height) > (windowHeight - MENU_BOTTOM_MARGIN)) {\n                this.setState({openUp: true});\n            }\n        }\n    }\n\n    render() {\n        const isSystemMessage = PostUtils.isSystemMessage(this.props.post);\n        const isMobile = Utils.isMobile();\n\n        const pluginItems = this.props.pluginMenuItems.\n            filter((item) => {\n                return item.filter ? item.filter(this.props.post.id) : item;\n            }).\n            map((item) => {\n                return (\n                    <MenuItemAction\n                        key={item.id + '_pluginmenuitem'}\n                        text={item.text}\n                        onClick={() => {\n                            if (item.action) {\n                                item.action(this.props.post.id);\n                            }\n                        }}\n                    />\n                );\n            });\n\n        if (!this.state.canDelete && !this.state.canEdit && pluginItems.length === 0 && isSystemMessage) {\n            return null;\n        }\n\n        return (\n            <MenuWrapper onToggle={this.props.handleDropdownOpened}>\n                <OverlayTrigger\n                    className='hidden-xs'\n                    delayShow={500}\n                    placement='top'\n                    overlay={this.tooltip}\n                    rootClose={true}\n                >\n                    <button\n                        id={`${this.props.location}_button_${this.props.post.id}`}\n                        aria-label={Utils.localizeMessage('post_info.dot_menu.tooltip.more_actions', 'More Actions').toLowerCase()}\n                        className='post__dropdown color--link style--none'\n                        type='button'\n                        aria-expanded='false'\n                    />\n                </OverlayTrigger>\n                <Menu\n                    id={`${this.props.location}_dropdown_${this.props.post.id}`}\n                    openLeft={true}\n                    openUp={this.state.openUp}\n                    ref={this.refCallback}\n                    ariaLabel={Utils.localizeMessage('post_info.menuAriaLabel', 'Post extra options')}\n                >\n                    <ChannelPermissionGate\n                        channelId={this.props.post.channel_id}\n                        teamId={this.props.teamId}\n                        permissions={[Permissions.ADD_REACTION]}\n                    >\n                        <MenuItemAction\n                            show={isMobile && !isSystemMessage && !this.props.isReadOnly && this.props.enableEmojiPicker}\n                            text={Utils.localizeMessage('rhs_root.mobile.add_reaction', 'Add Reaction')}\n                            onClick={this.handleAddReactionMenuItemActivated}\n                        />\n                    </ChannelPermissionGate>\n                    <MenuItemAction\n                        show={isMobile && !isSystemMessage && this.props.isFlagged}\n                        text={Utils.localizeMessage('rhs_root.mobile.unflag', 'Unflag')}\n                        onClick={this.handleFlagMenuItemActivated}\n                    />\n                    <MenuItemAction\n                        show={isMobile && !isSystemMessage && !this.props.isFlagged}\n                        text={Utils.localizeMessage('rhs_root.mobile.flag', 'Flag')}\n                        onClick={this.handleFlagMenuItemActivated}\n                    />\n                    <MenuItemAction\n                        show={!isSystemMessage && this.props.location === Locations.CENTER}\n                        text={Utils.localizeMessage('post_info.reply', 'Reply')}\n                        onClick={this.props.handleCommentClick}\n                    />\n                    <MenuItemAction\n                        show={!isSystemMessage}\n                        text={Utils.localizeMessage('post_info.permalink', 'Permalink')}\n                        onClick={this.handlePermalinkMenuItemActivated}\n                    />\n                    <MenuItemAction\n                        id={`unpin_post_${this.props.post.id}`}\n                        show={!isSystemMessage && !this.props.isReadOnly && this.props.post.is_pinned}\n                        text={Utils.localizeMessage('post_info.unpin', 'Unpin')}\n                        onClick={this.handlePinMenuItemActivated}\n                    />\n                    <MenuItemAction\n                        id={`pin_post_${this.props.post.id}`}\n                        show={!isSystemMessage && !this.props.isReadOnly && !this.props.post.is_pinned}\n                        text={Utils.localizeMessage('post_info.pin', 'Pin')}\n                        onClick={this.handlePinMenuItemActivated}\n                    />\n                    <MenuItemAction\n                        id={`delete_post_${this.props.post.id}`}\n                        show={this.state.canDelete}\n                        text={Utils.localizeMessage('post_info.del', 'Delete')}\n                        onClick={this.handleDeleteMenuItemActivated}\n                    />\n                    <MenuItemAction\n                        id={`edit_post_${this.props.post.id}`}\n                        show={this.state.canEdit}\n                        text={Utils.localizeMessage('post_info.edit', 'Edit')}\n                        onClick={this.handleEditMenuItemActivated}\n                    />\n                    {pluginItems}\n                    <Pluggable\n                        postId={this.props.post.id}\n                        pluggableName='PostDropdownMenuItem'\n                    />\n                </Menu>\n            </MenuWrapper>\n        );\n    }\n}\n","// Copyright (c) 2015-present Mattermost, Inc. All Rights Reserved.\n// See LICENSE.txt for license information.\n\nimport {connect} from 'react-redux';\nimport {bindActionCreators} from 'redux';\nimport {getCurrentTeamId} from 'mattermost-redux/selectors/entities/teams';\n\nimport {getLicense, getConfig} from 'mattermost-redux/selectors/entities/general';\n\nimport {openModal} from 'actions/views/modals';\nimport {\n    flagPost,\n    unflagPost,\n    pinPost,\n    unpinPost,\n    setEditingPost,\n} from 'actions/post_actions.jsx';\n\nimport DotMenu from './dot_menu.jsx';\n\nfunction mapStateToProps(state) {\n    return {\n        postEditTimeLimit: getConfig(state).PostEditTimeLimit,\n        isLicensed: getLicense(state).IsLicensed === 'true',\n        teamId: getCurrentTeamId(state),\n        pluginMenuItems: state.plugins.components.PostDropdownMenu,\n    };\n}\n\nfunction mapDispatchToProps(dispatch) {\n    return {\n        actions: bindActionCreators({\n            flagPost,\n            unflagPost,\n            setEditingPost,\n            pinPost,\n            unpinPost,\n            openModal,\n        }, dispatch),\n    };\n}\n\nexport default connect(mapStateToProps, mapDispatchToProps)(DotMenu);\n","// Copyright (c) 2015-present Mattermost, Inc. All Rights Reserved.\n// See LICENSE.txt for license information.\n\nimport React from 'react';\nimport {FormattedMessage} from 'react-intl';\n\nexport default class DownloadIcon extends React.PureComponent {\n    render() {\n        return (\n            <span {...this.props}>\n                <FormattedMessage\n                    id='generic_icons.download'\n                    defaultMessage='Download Icon'\n                >\n                    {(ariaLabel) => (\n                        <svg\n                            width='40px'\n                            height='40px'\n                            viewBox='0 0 42 42'\n                            role='icon'\n                            aria-label={ariaLabel}\n                        >\n                            <g\n                                stroke='inherit'\n                                strokeWidth='1'\n                                fill='none'\n                                fillRule='evenodd'\n                            >\n                                <g transform='translate(-986.000000, -1142.000000)'>\n                                    <g transform='translate(50.000000, 1034.000000)'>\n                                        <g transform='translate(539.000000, 54.000000)'>\n                                            <g transform='translate(398.000000, 55.000000)'>\n                                                <g\n                                                    transform='translate(11.000000, 11.000000)'\n                                                    fillRule='nonzero'\n                                                    fill='inherit'\n                                                >\n                                                    <path d='M8.7345,14.1405 C8.74725,14.1525 8.763,14.15775 8.7765,14.16825 C8.802,14.18775 8.82675,14.20875 8.85675,14.22075 C8.9025,14.24025 8.95125,14.25 9,14.25 C9.04875,14.25 9.0975,14.24025 9.14325,14.22075 C9.18975,14.20125 9.23175,14.17275 9.267,14.1375 L13.764,9.6405 C13.91025,9.49425 13.91025,9.2565 13.764,9.11025 C13.61775,8.964 13.38,8.964 13.23375,9.11025 L9.375,12.969 L9.375,0.375 C9.375,0.168 9.207,0 9,0 C8.793,0 8.625,0.168 8.625,0.375 L8.625,12.9705 L4.76475,9.11025 C4.6185,8.964 4.38075,8.964 4.2345,9.11025 C4.08825,9.2565 4.08825,9.49425 4.2345,9.6405 L8.7345,14.1405 Z M17.25,13.5 C17.043,13.5 16.875,13.668 16.875,13.875 L16.875,17.25 L1.125,17.25 L1.125,13.875 C1.125,13.668 0.957,13.5 0.75,13.5 C0.543,13.5 0.375,13.668 0.375,13.875 L0.375,17.625 C0.375,17.832 0.543,18 0.75,18 L17.25,18 C17.457,18 17.625,17.832 17.625,17.625 L17.625,13.875 C17.625,13.668 17.457,13.5 17.25,13.5 Z'/>\n                                                </g>\n                                            </g>\n                                        </g>\n                                    </g>\n                                </g>\n                            </g>\n                        </svg>\n                    )}\n                </FormattedMessage>\n            </span>\n        );\n    }\n}\n","// Copyright (c) 2015-present Mattermost, Inc. All Rights Reserved.\n// See LICENSE.txt for license information.\n\nimport PropTypes from 'prop-types';\nimport React from 'react';\n\nimport {getFileThumbnailUrl, getFileUrl} from 'mattermost-redux/utils/file_utils';\n\nimport Constants, {FileTypes} from 'utils/constants.jsx';\nimport {\n    getFileType,\n    getIconClassName,\n    isGIFImage,\n} from 'utils/utils.jsx';\n\nexport default class FileThumbnail extends React.PureComponent {\n    static propTypes = {\n        enableSVGs: PropTypes.bool.isRequired,\n        fileInfo: PropTypes.object.isRequired,\n    }\n\n    render() {\n        const {fileInfo} = this.props;\n        const type = getFileType(fileInfo.extension);\n\n        let thumbnail;\n        if (type === FileTypes.IMAGE) {\n            let className = 'post-image';\n\n            if (fileInfo.width < Constants.THUMBNAIL_WIDTH && fileInfo.height < Constants.THUMBNAIL_HEIGHT) {\n                className += ' small';\n            } else {\n                className += ' normal';\n            }\n\n            let thumbnailUrl = getFileThumbnailUrl(fileInfo.id);\n            if (isGIFImage(fileInfo.extension) && !fileInfo.has_preview_image) {\n                thumbnailUrl = getFileUrl(fileInfo.id);\n            }\n\n            return (\n                <div\n                    className={className}\n                    style={{\n                        backgroundImage: `url(${thumbnailUrl})`,\n                        backgroundSize: 'cover',\n                    }}\n                />\n            );\n        } else if (fileInfo.extension === FileTypes.SVG && this.props.enableSVGs) {\n            thumbnail = (\n                <img\n                    alt={'file thumbnail image'}\n                    className='post-image normal'\n                    src={getFileUrl(fileInfo.id)}\n                />\n            );\n        } else {\n            thumbnail = <div className={'file-icon ' + getIconClassName(type)}/>;\n        }\n\n        return thumbnail;\n    }\n}\n","// Copyright (c) 2015-present Mattermost, Inc. All Rights Reserved.\n// See LICENSE.txt for license information.\n\nimport {connect} from 'react-redux';\n\nimport {getConfig} from 'mattermost-redux/selectors/entities/general';\n\nimport FileThumbnail from './file_thumbnail';\n\nfunction mapStateToProps(state) {\n    return {\n        enableSVGs: getConfig(state).EnableSVGs === 'true',\n    };\n}\n\nexport default connect(mapStateToProps)(FileThumbnail);\n","// Copyright (c) 2015-present Mattermost, Inc. All Rights Reserved.\n// See LICENSE.txt for license information.\n\nimport PropTypes from 'prop-types';\nimport React from 'react';\nimport {getFileThumbnailUrl, getFileUrl} from 'mattermost-redux/utils/file_utils';\n\nimport {FileTypes} from 'utils/constants.jsx';\nimport {\n    trimFilename,\n} from 'utils/file_utils';\nimport {\n    fileSizeToString,\n    getFileType,\n    loadImage,\n    localizeMessage,\n} from 'utils/utils.jsx';\n\nimport DownloadIcon from 'components/svg/download_icon';\n\nimport FilenameOverlay from './filename_overlay.jsx';\nimport FileThumbnail from './file_thumbnail';\n\nexport default class FileAttachment extends React.PureComponent {\n    static propTypes = {\n\n        /*\n         * File detailed information\n         */\n        fileInfo: PropTypes.object.isRequired,\n\n        /*\n         * The index of this attachment preview in the parent FileAttachmentList\n         */\n        index: PropTypes.number.isRequired,\n\n        /*\n         * Handler for when the thumbnail is clicked passed the index above\n         */\n        handleImageClick: PropTypes.func,\n\n        /*\n         * Display in compact format\n         */\n        compactDisplay: PropTypes.bool,\n\n        canDownloadFiles: PropTypes.bool,\n        enableSVGs: PropTypes.bool.isRequired,\n    };\n\n    constructor(props) {\n        super(props);\n\n        this.state = {\n            loaded: getFileType(props.fileInfo.extension) !== FileTypes.IMAGE,\n        };\n    }\n\n    componentDidMount() {\n        this.mounted = true;\n        this.loadFiles();\n    }\n\n    UNSAFE_componentWillReceiveProps(nextProps) { // eslint-disable-line camelcase\n        if (nextProps.fileInfo.id !== this.props.fileInfo.id) {\n            const extension = nextProps.fileInfo.extension;\n\n            this.setState({\n                loaded: getFileType(extension) !== FileTypes.IMAGE && !(nextProps.enableSVGs && extension === FileTypes.SVG),\n            });\n        }\n    }\n\n    componentDidUpdate(prevProps) {\n        if (!this.state.loaded && this.props.fileInfo.id !== prevProps.fileInfo.id) {\n            this.loadFiles();\n        }\n    }\n\n    componentWillUnmount() {\n        this.mounted = false;\n    }\n\n    loadFiles = () => {\n        const fileInfo = this.props.fileInfo;\n        const fileType = getFileType(fileInfo.extension);\n\n        if (fileType === FileTypes.IMAGE) {\n            const thumbnailUrl = getFileThumbnailUrl(fileInfo.id);\n\n            loadImage(thumbnailUrl, this.handleImageLoaded);\n        } else if (fileInfo.extension === FileTypes.SVG && this.props.enableSVGs) {\n            loadImage(getFileUrl(fileInfo.id), this.handleImageLoaded);\n        }\n    }\n\n    handleImageLoaded = () => {\n        if (this.mounted) {\n            this.setState({\n                loaded: true,\n            });\n        }\n    }\n\n    onAttachmentClick = (e) => {\n        e.preventDefault();\n        if (this.props.handleImageClick) {\n            this.props.handleImageClick(this.props.index);\n        }\n    }\n\n    render() {\n        const {\n            compactDisplay,\n            fileInfo,\n        } = this.props;\n\n        const trimmedFilename = trimFilename(fileInfo.name);\n        let fileThumbnail;\n        let fileDetail;\n        const ariaLabelImage = `${localizeMessage('file_attachment.thumbnail', 'file thumbnail')} ${fileInfo.name}`.toLowerCase();\n\n        if (!compactDisplay) {\n            fileThumbnail = (\n                <a\n                    aria-label={ariaLabelImage}\n                    className='post-image__thumbnail'\n                    href='#'\n                    onClick={this.onAttachmentClick}\n                >\n                    {this.state.loaded ? (\n                        <FileThumbnail fileInfo={fileInfo}/>\n                    ) : (\n                        <div className='post-image__load'/>\n                    )}\n                </a>\n            );\n\n            fileDetail = (\n                <div\n                    className='post-image__detail_wrapper'\n                    onClick={this.onAttachmentClick}\n                >\n                    <div className='post-image__detail'>\n                        <span className={'post-image__name'}>\n                            {trimmedFilename}\n                        </span>\n                        <span className='post-image__type'>{fileInfo.extension.toUpperCase()}</span>\n                        <span className='post-image__size'>{fileSizeToString(fileInfo.size)}</span>\n                    </div>\n                </div>\n            );\n        }\n\n        let filenameOverlay;\n        if (this.props.canDownloadFiles) {\n            filenameOverlay = (\n                <FilenameOverlay\n                    fileInfo={fileInfo}\n                    compactDisplay={compactDisplay}\n                    canDownload={this.props.canDownloadFiles}\n                    handleImageClick={this.onAttachmentClick}\n                    iconClass={'post-image__download'}\n                >\n                    <DownloadIcon/>\n                </FilenameOverlay>\n            );\n        }\n\n        return (\n            <div className='post-image__column'>\n                {fileThumbnail}\n                <div className='post-image__details'>\n                    {fileDetail}\n                    {filenameOverlay}\n                </div>\n            </div>\n        );\n    }\n}\n","// Copyright (c) 2015-present Mattermost, Inc. All Rights Reserved.\n// See LICENSE.txt for license information.\n\nimport {connect} from 'react-redux';\nimport {getConfig} from 'mattermost-redux/selectors/entities/general';\n\nimport {canDownloadFiles} from 'utils/file_utils.jsx';\n\nimport FileAttachment from './file_attachment.jsx';\n\nfunction mapStateToProps(state) {\n    const config = getConfig(state);\n\n    return {\n        canDownloadFiles: canDownloadFiles(config),\n        enableSVGs: config.EnableSVGs === 'true',\n    };\n}\n\nexport default connect(mapStateToProps)(FileAttachment);\n","// Copyright (c) 2015-present Mattermost, Inc. All Rights Reserved.\n// See LICENSE.txt for license information.\n\nimport $ from 'jquery';\nimport PropTypes from 'prop-types';\nimport React from 'react';\nimport ReactDOM from 'react-dom';\n\nimport Constants from 'utils/constants.jsx';\nimport * as Utils from 'utils/utils.jsx';\n\nimport FileInfoPreview from 'components/file_info_preview';\n\nexport default class AudioVideoPreview extends React.PureComponent {\n    static propTypes = {\n\n        /**\n        * Compare file types\n        */\n        fileInfo: PropTypes.object.isRequired,\n\n        /**\n        *  URL of pdf file to output and compare to update props url\n        */\n        fileUrl: PropTypes.string.isRequired,\n    }\n\n    constructor(props) {\n        super(props);\n\n        this.handleFileInfoChanged = this.handleFileInfoChanged.bind(this);\n        this.handleLoadError = this.handleLoadError.bind(this);\n\n        this.stop = this.stop.bind(this);\n\n        this.state = {\n            canPlay: true,\n        };\n    }\n\n    UNSAFE_componentWillMount() { // eslint-disable-line camelcase\n        this.handleFileInfoChanged(this.props.fileInfo);\n    }\n\n    componentDidMount() {\n        if (this.refs.source) {\n            $(ReactDOM.findDOMNode(this.refs.source)).one('error', this.handleLoadError);\n        }\n    }\n\n    UNSAFE_componentWillReceiveProps(nextProps) { // eslint-disable-line camelcase\n        if (this.props.fileUrl !== nextProps.fileUrl) {\n            this.handleFileInfoChanged(nextProps.fileInfo);\n        }\n    }\n\n    handleFileInfoChanged(fileInfo) {\n        let video = ReactDOM.findDOMNode(this.refs.video);\n        if (!video) {\n            video = document.createElement('video');\n        }\n\n        const canPlayType = video.canPlayType(fileInfo.mime_type);\n\n        this.setState({\n            canPlay: canPlayType === 'probably' || canPlayType === 'maybe',\n        });\n    }\n\n    componentDidUpdate() {\n        if (this.refs.source) {\n            $(ReactDOM.findDOMNode(this.refs.source)).one('error', this.handleLoadError);\n        }\n    }\n\n    handleLoadError() {\n        this.setState({\n            canPlay: false,\n        });\n    }\n\n    stop() {\n        if (this.refs.video) {\n            const video = ReactDOM.findDOMNode(this.refs.video);\n            video.pause();\n            video.currentTime = 0;\n        }\n    }\n\n    render() {\n        if (!this.state.canPlay) {\n            return (\n                <FileInfoPreview\n                    fileInfo={this.props.fileInfo}\n                    fileUrl={this.props.fileUrl}\n                />\n            );\n        }\n\n        let width = Constants.WEB_VIDEO_WIDTH;\n        let height = Constants.WEB_VIDEO_HEIGHT;\n        if (Utils.isMobile()) {\n            width = Constants.MOBILE_VIDEO_WIDTH;\n            height = Constants.MOBILE_VIDEO_HEIGHT;\n        }\n\n        // add a key to the video to prevent React from using an old video source while a new one is loading\n        return (\n            <video\n                key={this.props.fileInfo.id}\n                ref='video'\n                data-setup='{}'\n                controls='controls'\n                width={width}\n                height={height}\n            >\n                <source\n                    ref='source'\n                    src={this.props.fileUrl}\n                />\n            </video>\n        );\n    }\n}\n","// Copyright (c) 2015-present Mattermost, Inc. All Rights Reserved.\n// See LICENSE.txt for license information.\n\nimport $ from 'jquery';\nimport PropTypes from 'prop-types';\nimport React from 'react';\n\nimport Constants from 'utils/constants.jsx';\nimport * as SyntaxHighlighting from 'utils/syntax_highlighting.jsx';\n\nimport LoadingSpinner from 'components/widgets/loading/loading_spinner.jsx';\nimport FileInfoPreview from 'components/file_info_preview';\n\nexport default class CodePreview extends React.Component {\n    constructor(props) {\n        super(props);\n\n        this.updateStateFromProps = this.updateStateFromProps.bind(this);\n        this.handleReceivedError = this.handleReceivedError.bind(this);\n        this.handleReceivedCode = this.handleReceivedCode.bind(this);\n\n        this.state = {\n            code: '',\n            lang: '',\n            loading: true,\n            success: true,\n        };\n    }\n\n    componentDidMount() {\n        this.updateStateFromProps(this.props);\n    }\n\n    UNSAFE_componentWillReceiveProps(nextProps) { // eslint-disable-line camelcase\n        if (this.props.fileUrl !== nextProps.fileUrl) {\n            this.updateStateFromProps(nextProps);\n        }\n    }\n\n    updateStateFromProps(props) {\n        const usedLanguage = SyntaxHighlighting.getLanguageFromFileExtension(props.fileInfo.extension);\n\n        if (!usedLanguage || props.fileInfo.size > Constants.CODE_PREVIEW_MAX_FILE_SIZE) {\n            this.setState({code: '', lang: '', loading: false, success: false});\n            return;\n        }\n\n        this.setState({code: '', lang: usedLanguage, loading: true});\n\n        $.ajax({\n            async: true,\n            url: props.fileUrl,\n            type: 'GET',\n            dataType: 'text',\n            error: this.handleReceivedError,\n            success: this.handleReceivedCode,\n        });\n    }\n\n    handleReceivedCode(data) {\n        let code = data;\n        if (data.nodeName === '#document') {\n            code = new XMLSerializer().serializeToString(data);\n        }\n        this.setState({\n            code,\n            loading: false,\n            success: true,\n        });\n    }\n\n    handleReceivedError() {\n        this.setState({loading: false, success: false});\n    }\n\n    static supports(fileInfo) {\n        return Boolean(SyntaxHighlighting.getLanguageFromFileExtension(fileInfo.extension));\n    }\n\n    render() {\n        if (this.state.loading) {\n            return (\n                <div className='view-image__loading'>\n                    <LoadingSpinner/>\n                </div>\n            );\n        }\n\n        if (!this.state.success) {\n            return (\n                <FileInfoPreview\n                    fileInfo={this.props.fileInfo}\n                    fileUrl={this.props.fileUrl}\n                />\n            );\n        }\n\n        // add line numbers when viewing a code file preview\n        const lines = this.state.code.match(/\\r\\n|\\r|\\n|$/g).length;\n        let strlines = '';\n        for (let i = 1; i <= lines; i++) {\n            if (strlines) {\n                strlines += '\\n' + i;\n            } else {\n                strlines += i;\n            }\n        }\n\n        const language = SyntaxHighlighting.getLanguageName(this.state.lang);\n\n        const highlighted = SyntaxHighlighting.highlight(this.state.lang, this.state.code);\n\n        return (\n            <div className='post-code'>\n                <span className='post-code__language'>\n                    {`${this.props.fileInfo.name} - ${language}`}\n                </span>\n                <div className='post-code__container'>\n                    <code className='hljs'>\n                        <table>\n                            <tbody>\n                                <tr>\n                                    <td className='post-code__lineno'>{strlines}</td>\n                                    <td dangerouslySetInnerHTML={{__html: highlighted}}/>\n                                </tr>\n                            </tbody>\n                        </table>\n                    </code>\n                </div>\n            </div>\n        );\n    }\n}\n\nCodePreview.propTypes = {\n    fileInfo: PropTypes.object.isRequired,\n    fileUrl: PropTypes.string.isRequired,\n};\n","// Copyright (c) 2015-present Mattermost, Inc. All Rights Reserved.\n// See LICENSE.txt for license information.\n\nimport PropTypes from 'prop-types';\nimport React from 'react';\nimport {getFilePreviewUrl, getFileDownloadUrl} from 'mattermost-redux/utils/file_utils';\n\nexport default function ImagePreview({fileInfo, canDownloadFiles}) {\n    const {has_preview_image: hasPreviewImage, id, link} = fileInfo;\n    const fileUrl = link || getFileDownloadUrl(id);\n    const previewUrl = hasPreviewImage ? getFilePreviewUrl(id) : fileUrl;\n\n    if (!canDownloadFiles) {\n        return <img src={previewUrl}/>;\n    }\n\n    return (\n        <a\n            href={fileUrl}\n            target='_blank'\n            rel='noopener noreferrer'\n            download={true}\n        >\n            <img\n                alt={'preview url image'}\n                src={previewUrl}\n            />\n        </a>\n    );\n}\n\nImagePreview.propTypes = {\n    fileInfo: PropTypes.object.isRequired,\n    canDownloadFiles: PropTypes.bool.isRequired,\n};\n","// Copyright (c) 2015-present Mattermost, Inc. All Rights Reserved.\n// See LICENSE.txt for license information.\n\nimport PropTypes from 'prop-types';\nimport React from 'react';\nimport {FormattedMessage} from 'react-intl';\n\nexport default class PopoverBar extends React.PureComponent {\n    static propTypes = {\n        show: PropTypes.bool.isRequired,\n        fileIndex: PropTypes.number.isRequired,\n        totalFiles: PropTypes.number.isRequired,\n        filename: PropTypes.string.isRequired,\n        fileURL: PropTypes.string.isRequired,\n        showPublicLink: PropTypes.bool,\n        enablePublicLink: PropTypes.bool.isRequired,\n        canDownloadFiles: PropTypes.bool.isRequired,\n        isExternalFile: PropTypes.bool.isRequired,\n        onGetPublicLink: PropTypes.func,\n        isDesktopApp: PropTypes.bool.isRequired,\n    };\n\n    static defaultProps = {\n        show: false,\n        fileIndex: 0,\n        totalFiles: 0,\n        filename: '',\n        fileURL: '',\n        showPublicLink: true,\n    };\n\n    render() {\n        var publicLink = '';\n        if (this.props.enablePublicLink && this.props.showPublicLink) {\n            publicLink = (\n                <div>\n                    <a\n                        href='#'\n                        className='public-link text'\n                        data-title='Public Image'\n                        onClick={this.props.onGetPublicLink}\n                    >\n                        <FormattedMessage\n                            id='view_image_popover.publicLink'\n                            defaultMessage='Get Public Link'\n                        />\n                    </a>\n                    <span className='text'>{' | '}</span>\n                </div>\n            );\n        }\n\n        var footerClass = 'modal-button-bar';\n        if (this.props.show) {\n            footerClass += ' footer--show';\n        }\n\n        let downloadLinks = null;\n        if (this.props.canDownloadFiles) {\n            const shouldOpenFile = this.props.isExternalFile && !this.props.isDesktopApp;\n\n            let downloadLinkText;\n            const downloadLinkProps = {};\n            if (shouldOpenFile) {\n                downloadLinkText = (\n                    <FormattedMessage\n                        id='view_image_popover.open'\n                        defaultMessage='Open'\n                    />\n                );\n            } else {\n                downloadLinkText = (\n                    <FormattedMessage\n                        id='view_image_popover.download'\n                        defaultMessage='Download'\n                    />\n                );\n\n                downloadLinkProps.download = this.props.filename;\n            }\n\n            downloadLinks = (\n                <div className='image-links'>\n                    {publicLink}\n                    <a\n                        href={this.props.fileURL}\n                        className='text'\n                        target='_blank'\n                        rel='noopener noreferrer'\n                        {...downloadLinkProps}\n                    >\n                        {downloadLinkText}\n                    </a>\n                </div>\n            );\n        }\n\n        return (\n            <div\n                ref='imageFooter'\n                className={footerClass}\n            >\n                <span className='pull-left text'>\n                    <FormattedMessage\n                        id='view_image_popover.file'\n                        defaultMessage='File {count, number} of {total, number}'\n                        values={{\n                            count: (this.props.fileIndex + 1),\n                            total: this.props.totalFiles,\n                        }}\n                    />\n                </span>\n                {downloadLinks}\n            </div>\n        );\n    }\n}\n","// Copyright (c) 2015-present Mattermost, Inc. All Rights Reserved.\n// See LICENSE.txt for license information.\n\nimport {connect} from 'react-redux';\n\nimport {isDesktopApp} from 'utils/user_agent.jsx';\n\nimport PopoverBar from './popover_bar.jsx';\n\nfunction mapStateToProps() {\n    return {\n        isDesktopApp: isDesktopApp(),\n    };\n}\n\nexport default connect(mapStateToProps)(PopoverBar);\n","// Copyright (c) 2015-present Mattermost, Inc. All Rights Reserved.\n// See LICENSE.txt for license information.\n\nimport PropTypes from 'prop-types';\nimport React from 'react';\nimport {Modal} from 'react-bootstrap';\nimport {getFilePreviewUrl, getFileUrl, getFileDownloadUrl} from 'mattermost-redux/utils/file_utils';\n\nimport * as GlobalActions from 'actions/global_actions';\nimport Constants, {FileTypes} from 'utils/constants';\nimport * as Utils from 'utils/utils';\nimport AudioVideoPreview from 'components/audio_video_preview';\nimport CodePreview from 'components/code_preview';\nimport FileInfoPreview from 'components/file_info_preview';\nimport LoadingImagePreview from 'components/loading_image_preview';\nimport {AsyncComponent} from 'components/async_load.jsx';\nimport loadPDFPreview from 'bundle-loader?lazy!components/pdf_preview';\n\nimport ImagePreview from './image_preview';\nimport PopoverBar from './popover_bar';\n\nconst KeyCodes = Constants.KeyCodes;\n\nexport default class ViewImageModal extends React.PureComponent {\n    static propTypes = {\n\n        /**\n         * The post the files are attached to\n         */\n        post: PropTypes.object.isRequired,\n\n        /**\n         * Set whether to show this modal or not\n         */\n        show: PropTypes.bool.isRequired,\n\n        /**\n         * Function to call when this modal is dismissed\n         **/\n        onModalDismissed: PropTypes.func.isRequired,\n\n        /**\n         * List of FileInfo to view\n         **/\n        fileInfos: PropTypes.arrayOf(PropTypes.object).isRequired,\n\n        /**\n         * The index number of starting image\n         **/\n        startIndex: PropTypes.number.isRequired,\n\n        canDownloadFiles: PropTypes.bool.isRequired,\n        enablePublicLink: PropTypes.bool.isRequired,\n        pluginFilePreviewComponents: PropTypes.arrayOf(PropTypes.object),\n    };\n\n    static defaultProps = {\n        show: false,\n        fileInfos: [],\n        startIndex: 0,\n        pluginFilePreviewComponents: [],\n    };\n\n    constructor(props) {\n        super(props);\n\n        this.state = {\n            imageIndex: this.props.startIndex,\n            imageHeight: '100%',\n            loaded: Utils.fillArray(false, this.props.fileInfos.length),\n            progress: Utils.fillArray(0, this.props.fileInfos.length),\n            showFooter: false,\n        };\n    }\n\n    handleNext = (e) => {\n        if (e) {\n            e.stopPropagation();\n        }\n        let id = this.state.imageIndex + 1;\n        if (id > this.props.fileInfos.length - 1) {\n            id = 0;\n        }\n        this.showImage(id);\n    }\n\n    handlePrev = (e) => {\n        if (e) {\n            e.stopPropagation();\n        }\n        let id = this.state.imageIndex - 1;\n        if (id < 0) {\n            id = this.props.fileInfos.length - 1;\n        }\n        this.showImage(id);\n    }\n\n    handleKeyPress = (e) => {\n        if (Utils.isKeyPressed(e, KeyCodes.RIGHT)) {\n            this.handleNext();\n        } else if (Utils.isKeyPressed(e, KeyCodes.LEFT)) {\n            this.handlePrev();\n        }\n    }\n\n    onModalShown = (nextProps) => {\n        document.addEventListener('keyup', this.handleKeyPress);\n\n        this.showImage(nextProps.startIndex);\n    }\n\n    onModalHidden = () => {\n        document.addEventListener('keyup', this.handleKeyPress);\n\n        if (this.refs.video) {\n            this.refs.video.stop();\n        }\n    }\n\n    UNSAFE_componentWillReceiveProps(nextProps) { // eslint-disable-line camelcase\n        if (nextProps.show === true && this.props.show === false) {\n            this.onModalShown(nextProps);\n        } else if (nextProps.show === false && this.props.show === true) {\n            this.onModalHidden();\n        }\n\n        if (this.props.fileInfos.length !== nextProps.fileInfos.length) {\n            this.setState({\n                loaded: Utils.fillArray(false, nextProps.fileInfos.length),\n                progress: Utils.fillArray(0, nextProps.fileInfos.length),\n            });\n        }\n    }\n\n    showImage = (id) => {\n        this.setState({imageIndex: id});\n\n        const imageHeight = window.innerHeight - 100;\n        this.setState({imageHeight});\n\n        if (!this.state.loaded[id]) {\n            this.loadImage(id);\n        }\n    }\n\n    loadImage = (index) => {\n        const fileInfo = this.props.fileInfos[index];\n        const fileType = Utils.getFileType(fileInfo.extension);\n\n        if (fileType === FileTypes.IMAGE && Boolean(fileInfo.id)) {\n            let previewUrl;\n            if (fileInfo.has_image_preview) {\n                previewUrl = getFilePreviewUrl(fileInfo.id);\n            } else {\n                // some images (eg animated gifs) just show the file itself and not a preview\n                previewUrl = getFileUrl(fileInfo.id);\n            }\n\n            Utils.loadImage(\n                previewUrl,\n                () => this.handleImageLoaded(index),\n                (completedPercentage) => this.handleImageProgress(index, completedPercentage)\n            );\n        } else {\n            // there's nothing to load for non-image files\n            this.handleImageLoaded(index);\n        }\n    }\n\n    handleImageLoaded = (index) => {\n        this.setState((prevState) => {\n            return {\n                loaded: {\n                    ...prevState.loaded,\n                    [index]: true,\n                },\n            };\n        });\n    }\n\n    handleImageProgress = (index, completedPercentage) => {\n        this.setState((prevState) => {\n            return {\n                progress: {\n                    ...prevState.progress,\n                    [index]: completedPercentage,\n                },\n            };\n        });\n    }\n\n    handleGetPublicLink = () => {\n        this.props.onModalDismissed();\n\n        GlobalActions.showGetPublicLinkModal(this.props.fileInfos[this.state.imageIndex].id);\n    }\n\n    onMouseEnterImage = () => {\n        this.setState({showFooter: true});\n    }\n\n    onMouseLeaveImage = () => {\n        this.setState({showFooter: false});\n    }\n\n    render() {\n        if (this.props.fileInfos.length < 1 || this.props.fileInfos.length - 1 < this.state.imageIndex) {\n            return null;\n        }\n\n        const fileInfo = this.props.fileInfos[this.state.imageIndex];\n        const showPublicLink = !fileInfo.link;\n        const fileName = fileInfo.link || fileInfo.name;\n        const fileUrl = fileInfo.link || getFileUrl(fileInfo.id);\n        const fileDownloadUrl = fileInfo.link || getFileDownloadUrl(fileInfo.id);\n        const isExternalFile = !fileInfo.id;\n\n        let content;\n        if (this.state.loaded[this.state.imageIndex]) {\n            const fileType = Utils.getFileType(fileInfo.extension);\n\n            if (fileType === FileTypes.IMAGE || fileType === FileTypes.SVG) {\n                content = (\n                    <ImagePreview\n                        fileInfo={fileInfo}\n                        canDownloadFiles={this.props.canDownloadFiles}\n                    />\n                );\n            } else if (fileType === FileTypes.VIDEO || fileType === FileTypes.AUDIO) {\n                content = (\n                    <AudioVideoPreview\n                        fileInfo={fileInfo}\n                        fileUrl={fileUrl}\n                    />\n                );\n            } else if (fileInfo && fileInfo.extension && fileInfo.extension === FileTypes.PDF) {\n                content = (\n                    <AsyncComponent\n                        doLoad={loadPDFPreview}\n                        fileInfo={fileInfo}\n                        fileUrl={fileUrl}\n                    />\n                );\n            } else if (CodePreview.supports(fileInfo)) {\n                content = (\n                    <CodePreview\n                        fileInfo={fileInfo}\n                        fileUrl={fileUrl}\n                    />\n                );\n            } else {\n                content = (\n                    <FileInfoPreview\n                        fileInfo={fileInfo}\n                        fileUrl={fileUrl}\n                    />\n                );\n            }\n        } else {\n            // display a progress indicator when the preview for an image is still loading\n            const loading = Utils.localizeMessage('view_image.loading', 'Loading');\n            const progress = Math.floor(this.state.progress[this.state.imageIndex]);\n\n            content = (\n                <LoadingImagePreview\n                    loading={loading}\n                    progress={progress}\n                />\n            );\n        }\n\n        for (const preview of this.props.pluginFilePreviewComponents) {\n            if (preview.override(fileInfo, this.props.post)) {\n                content = (\n                    <preview.component\n                        fileInfo={fileInfo}\n                        post={this.props.post}\n                    />\n                );\n                break;\n            }\n        }\n\n        let leftArrow = null;\n        let rightArrow = null;\n        if (this.props.fileInfos.length > 1) {\n            leftArrow = (\n                <a\n                    id='previewArrowLeft'\n                    ref='previewArrowLeft'\n                    className='modal-prev-bar'\n                    href='#'\n                    onClick={this.handlePrev}\n                >\n                    <i className='image-control image-prev'/>\n                </a>\n            );\n\n            rightArrow = (\n                <a\n                    id='previewArrowRight'\n                    ref='previewArrowRight'\n                    className='modal-next-bar'\n                    href='#'\n                    onClick={this.handleNext}\n                >\n                    <i className='image-control image-next'/>\n                </a>\n            );\n        }\n\n        let closeButtonClass = 'modal-close';\n        if (this.state.showFooter) {\n            closeButtonClass += ' modal-close--show';\n        }\n\n        return (\n            <Modal\n                show={this.props.show}\n                onHide={this.props.onModalDismissed}\n                className='modal-image'\n                dialogClassName='a11y__modal modal-image'\n                role='dialog'\n                aria-labelledby='viewImageModalLabel'\n            >\n                <Modal.Body>\n                    <div\n                        className={'modal-image__wrapper'}\n                        onClick={this.props.onModalDismissed}\n                    >\n                        <div\n                            onMouseEnter={this.onMouseEnterImage}\n                            onMouseLeave={this.onMouseLeaveImage}\n                            onClick={(e) => e.stopPropagation()}\n                        >\n                            <Modal.Title\n                                componentClass='h1'\n                                id='viewImageModalLabel'\n                                className='hide'\n                            >\n                                {fileName}\n                            </Modal.Title>\n                            <div\n                                className={closeButtonClass}\n                                onClick={this.props.onModalDismissed}\n                            />\n                            <div className='modal-image__content'>\n                                {content}\n                            </div>\n                            <PopoverBar\n                                show={this.state.showFooter}\n                                showPublicLink={showPublicLink}\n                                fileIndex={this.state.imageIndex}\n                                totalFiles={this.props.fileInfos.length}\n                                filename={fileName}\n                                fileURL={fileDownloadUrl}\n                                enablePublicLink={this.props.enablePublicLink}\n                                canDownloadFiles={this.props.canDownloadFiles}\n                                isExternalFile={isExternalFile}\n                                onGetPublicLink={this.handleGetPublicLink}\n                            />\n                        </div>\n                    </div>\n                    {leftArrow}\n                    {rightArrow}\n                </Modal.Body>\n            </Modal>\n        );\n    }\n}\n","// Copyright (c) 2015-present Mattermost, Inc. All Rights Reserved.\n// See LICENSE.txt for license information.\n\nimport {connect} from 'react-redux';\nimport {getConfig} from 'mattermost-redux/selectors/entities/general';\nimport {getPost} from 'mattermost-redux/selectors/entities/posts';\n\nimport {canDownloadFiles} from 'utils/file_utils.jsx';\n\nimport ViewImage from './view_image.jsx';\n\nfunction mapStateToProps(state, ownProps) {\n    const config = getConfig(state);\n\n    return {\n        canDownloadFiles: canDownloadFiles(config),\n        enablePublicLink: config.EnablePublicLink === 'true',\n        pluginFilePreviewComponents: state.plugins.components.FilePreview,\n        post: ownProps.post || getPost(state, ownProps.postId),\n    };\n}\n\nexport default connect(mapStateToProps)(ViewImage);\n","// Copyright (c) 2015-present Mattermost, Inc. All Rights Reserved.\n// See LICENSE.txt for license information.\n\nimport PropTypes from 'prop-types';\nimport React from 'react';\n\nimport {getFilePreviewUrl, getFileUrl} from 'mattermost-redux/utils/file_utils';\n\nimport SizeAwareImage from 'components/size_aware_image';\nimport {FileTypes} from 'utils/constants.jsx';\nimport {\n    getFileType,\n} from 'utils/utils';\n\nimport ViewImageModal from 'components/view_image';\n\nconst PREVIEW_IMAGE_MIN_DIMENSION = 50;\n\nexport default class SingleImageView extends React.PureComponent {\n    static propTypes = {\n        postId: PropTypes.string.isRequired,\n        fileInfo: PropTypes.object.isRequired,\n        isRhsOpen: PropTypes.bool.isRequired,\n        isEmbedVisible: PropTypes.bool,\n        actions: PropTypes.shape({\n            toggleEmbedVisibility: PropTypes.func.isRequired,\n        }).isRequired,\n    };\n\n    static defaultProps = {\n        fileInfo: {},\n    };\n\n    constructor(props) {\n        super(props);\n        this.state = {\n            loaded: false,\n            showPreviewModal: false,\n            dimensions: {\n                width: props.fileInfo.width,\n                height: props.fileInfo.height,\n            },\n        };\n    }\n\n    componentDidMount() {\n        this.mounted = true;\n    }\n\n    static getDerivedStateFromProps(props, state) {\n        if ((props.fileInfo.width !== state.dimensions.width) || props.fileInfo.height !== state.dimensions.height) {\n            return {\n                dimensions: {\n                    width: props.fileInfo.width,\n                    height: props.fileInfo.height,\n                },\n            };\n        }\n        return null;\n    }\n\n    componentWillUnmount() {\n        this.mounted = false;\n    }\n\n    imageLoaded = () => {\n        if (this.mounted) {\n            this.setState({loaded: true});\n        }\n    }\n\n    handleImageClick = (e) => {\n        e.preventDefault();\n        this.setState({showPreviewModal: true});\n    }\n\n    showPreviewModal = () => {\n        this.setState({showPreviewModal: false});\n    }\n\n    toggleEmbedVisibility = () => {\n        this.props.actions.toggleEmbedVisibility(this.props.postId);\n    }\n\n    render() {\n        const {fileInfo} = this.props;\n        const {\n            loaded,\n        } = this.state;\n\n        const {has_preview_image: hasPreviewImage, id} = fileInfo;\n        const fileURL = getFileUrl(id);\n        const previewURL = hasPreviewImage ? getFilePreviewUrl(id) : fileURL;\n\n        const previewHeight = fileInfo.height;\n        const previewWidth = fileInfo.width;\n\n        let minPreviewClass = '';\n        if (\n            previewWidth < PREVIEW_IMAGE_MIN_DIMENSION ||\n            previewHeight < PREVIEW_IMAGE_MIN_DIMENSION\n        ) {\n            minPreviewClass = 'min-preview ';\n\n            if (previewHeight > previewWidth) {\n                minPreviewClass += 'min-preview--portrait ';\n            }\n        }\n\n        const toggle = (\n            <button\n                key='toggle'\n                className='style--none post__embed-visibility color--link'\n                data-expanded={this.props.isEmbedVisible}\n                aria-label='Toggle Embed Visibility'\n                onClick={this.toggleEmbedVisibility}\n            />\n        );\n\n        const fileHeader = (\n            <div className='image-name'>\n                {toggle}\n                <div onClick={this.handleImageClick}>\n                    {fileInfo.name}\n                </div>\n            </div>\n        );\n\n        let viewImageModal;\n        let fadeInClass = '';\n\n        const fileType = getFileType(fileInfo.extension);\n        let styleIfSvgWithDimensions = {};\n        let imageContainerStyle = {};\n        let svgClass = '';\n        if (fileType === FileTypes.SVG) {\n            svgClass = 'svg';\n            if (this.state.dimensions.height) {\n                styleIfSvgWithDimensions = {\n                    width: '100%',\n                };\n            } else {\n                imageContainerStyle = {\n                    height: 350,\n                    maxWidth: '100%',\n                };\n            }\n        }\n\n        if (loaded) {\n            viewImageModal = (\n                <ViewImageModal\n                    show={this.state.showPreviewModal}\n                    onModalDismissed={this.showPreviewModal}\n                    fileInfos={[fileInfo]}\n                    postId={this.props.postId}\n                />\n            );\n\n            fadeInClass = 'image-fade-in';\n        }\n\n        return (\n            <div\n                className={`${'file-view--single'}`}\n            >\n                <div\n                    className='file__image'\n                >\n                    {fileHeader}\n                    {this.props.isEmbedVisible &&\n                    <div\n                        className='image-container'\n                        style={imageContainerStyle}\n                    >\n                        <div\n                            className={`image-loaded ${fadeInClass} ${svgClass}`}\n                            style={styleIfSvgWithDimensions}\n                        >\n                            <SizeAwareImage\n                                onClick={this.handleImageClick}\n                                className={minPreviewClass}\n                                src={previewURL}\n                                dimensions={this.state.dimensions}\n                                fileInfo={this.props.fileInfo}\n                                onImageLoaded={this.imageLoaded}\n                                showLoader={this.props.isEmbedVisible}\n                            />\n                        </div>\n                    </div>\n                    }\n                    {viewImageModal}\n                </div>\n            </div>\n        );\n    }\n}\n","// Copyright (c) 2015-present Mattermost, Inc. All Rights Reserved.\n// See LICENSE.txt for license information.\n\nimport {connect} from 'react-redux';\nimport {bindActionCreators} from 'redux';\n\nimport {toggleEmbedVisibility} from 'actions/post_actions';\n\nimport {getIsRhsOpen} from 'selectors/rhs';\n\nimport SingleImageView from 'components/single_image_view/single_image_view.jsx';\n\nfunction mapStateToProps(state) {\n    const isRhsOpen = getIsRhsOpen(state);\n\n    return {\n        isRhsOpen,\n    };\n}\n\nfunction mapDispatchToProps(dispatch) {\n    return {\n        actions: bindActionCreators({\n            toggleEmbedVisibility,\n        }, dispatch),\n    };\n}\n\nexport default connect(mapStateToProps, mapDispatchToProps)(SingleImageView);\n","// Copyright (c) 2015-present Mattermost, Inc. All Rights Reserved.\n// See LICENSE.txt for license information.\n\nimport PropTypes from 'prop-types';\nimport React from 'react';\n\nimport {sortFileInfos} from 'mattermost-redux/utils/file_utils';\n\nimport {FileTypes} from 'utils/constants.jsx';\nimport {getFileType} from 'utils/utils';\n\nimport FileAttachment from 'components/file_attachment';\nimport SingleImageView from 'components/single_image_view';\nimport ViewImageModal from 'components/view_image';\n\nexport default class FileAttachmentList extends React.Component {\n    static propTypes = {\n\n        /*\n         * The post the files are attached to\n         */\n        post: PropTypes.object.isRequired,\n\n        /*\n         * The number of files attached to the post\n         */\n        fileCount: PropTypes.number.isRequired,\n\n        /*\n         * Sorted array of metadata for each file attached to the post\n         */\n        fileInfos: PropTypes.arrayOf(PropTypes.object),\n\n        compactDisplay: PropTypes.bool,\n        enableSVGs: PropTypes.bool,\n        isEmbedVisible: PropTypes.bool,\n        locale: PropTypes.string.isRequired,\n    }\n\n    constructor(props) {\n        super(props);\n\n        this.handleImageClick = this.handleImageClick.bind(this);\n\n        this.state = {showPreviewModal: false, startImgIndex: 0};\n    }\n\n    handleImageClick(indexClicked) {\n        this.setState({showPreviewModal: true, startImgIndex: indexClicked});\n    }\n\n    hidePreviewModal = () => {\n        this.setState({showPreviewModal: false});\n    }\n\n    render() {\n        const {\n            compactDisplay,\n            enableSVGs,\n            fileInfos,\n            fileCount,\n            locale,\n        } = this.props;\n\n        if (compactDisplay === false) {\n            if (fileInfos && fileInfos.length === 1) {\n                const fileType = getFileType(fileInfos[0].extension);\n\n                if (fileType === FileTypes.IMAGE || (fileType === FileTypes.SVG && enableSVGs)) {\n                    return (\n                        <SingleImageView\n                            fileInfo={fileInfos[0]}\n                            isEmbedVisible={this.props.isEmbedVisible}\n                            postId={this.props.post.id}\n                        />\n                    );\n                }\n            } else if (fileCount === 1 && this.props.isEmbedVisible) {\n                return (\n                    <div style={style.minHeightPlaceholder}/>\n                );\n            }\n        }\n\n        const sortedFileInfos = sortFileInfos(fileInfos, locale);\n        const postFiles = [];\n        if (sortedFileInfos && sortedFileInfos.length > 0) {\n            for (let i = 0; i < sortedFileInfos.length; i++) {\n                const fileInfo = sortedFileInfos[i];\n                postFiles.push(\n                    <FileAttachment\n                        key={fileInfo.id}\n                        fileInfo={sortedFileInfos[i]}\n                        index={i}\n                        handleImageClick={this.handleImageClick}\n                        compactDisplay={compactDisplay}\n                    />\n                );\n            }\n        } else if (fileCount > 0) {\n            for (let i = 0; i < fileCount; i++) {\n                // Add a placeholder to avoid pop-in once we get the file infos for this post\n                postFiles.push(\n                    <div\n                        key={`fileCount-${i}`}\n                        className='post-image__column post-image__column--placeholder'\n                    />\n                );\n            }\n        }\n\n        return (\n            <React.Fragment>\n                <div className='post-image__columns clearfix'>\n                    {postFiles}\n                </div>\n                <ViewImageModal\n                    show={this.state.showPreviewModal}\n                    onModalDismissed={this.hidePreviewModal}\n                    startIndex={this.state.startImgIndex}\n                    fileInfos={sortedFileInfos}\n                    postId={this.props.post.id}\n                />\n            </React.Fragment>\n        );\n    }\n}\n\nconst style = {\n    minHeightPlaceholder: {minHeight: '385px'},\n};\n","// Copyright (c) 2015-present Mattermost, Inc. All Rights Reserved.\n// See LICENSE.txt for license information.\n\nimport {connect} from 'react-redux';\n\nimport {makeGetFilesForPost} from 'mattermost-redux/selectors/entities/files';\nimport {getConfig} from 'mattermost-redux/selectors/entities/general';\n\nimport {getCurrentLocale} from 'selectors/i18n';\nimport {isEmbedVisible} from 'selectors/posts';\n\nimport FileAttachmentList from './file_attachment_list.jsx';\n\nfunction makeMapStateToProps() {\n    const selectFilesForPost = makeGetFilesForPost();\n\n    return function mapStateToProps(state, ownProps) {\n        const postId = ownProps.post ? ownProps.post.id : '';\n        const fileInfos = selectFilesForPost(state, postId);\n\n        let fileCount = 0;\n        if (ownProps.post.metadata && ownProps.post.metadata.files) {\n            fileCount = (ownProps.post.metadata.files || []).length;\n        } else if (ownProps.post.file_ids) {\n            fileCount = ownProps.post.file_ids.length;\n        } else if (ownProps.post.filenames) {\n            fileCount = ownProps.post.filenames.length;\n        }\n\n        return {\n            enableSVGs: getConfig(state).EnableSVGs === 'true',\n            fileInfos,\n            fileCount,\n            isEmbedVisible: isEmbedVisible(state, ownProps.post.id),\n            locale: getCurrentLocale(state),\n        };\n    };\n}\n\nexport default connect(makeMapStateToProps)(FileAttachmentList);\n","// Copyright (c) 2015-present Mattermost, Inc. All Rights Reserved.\n// See LICENSE.txt for license information.\n\nimport PropTypes from 'prop-types';\nimport React from 'react';\n\nimport ProfilePicture from 'components/profile_picture';\nimport MattermostLogo from 'components/svg/mattermost_logo';\n\nimport Constants, {UserStatuses} from 'utils/constants';\nimport * as PostUtils from 'utils/post_utils';\nimport * as Utils from 'utils/utils';\n\nexport default class PostProfilePicture extends React.PureComponent {\n    static propTypes = {\n        compactDisplay: PropTypes.bool.isRequired,\n        enablePostIconOverride: PropTypes.bool.isRequired,\n        hasImageProxy: PropTypes.bool.isRequired,\n        isBusy: PropTypes.bool,\n        isRHS: PropTypes.bool,\n        post: PropTypes.object.isRequired,\n        status: PropTypes.string,\n        user: PropTypes.object,\n        isBot: PropTypes.bool,\n        postIconOverrideURL: PropTypes.string,\n    };\n\n    static defaultProps = {\n        status: UserStatuses.OFFLINE,\n    };\n\n    getProfilePictureURL = () => {\n        const {post, user} = this.props;\n\n        if (user && user.id === post.user_id) {\n            return Utils.imageURLForUser(user);\n        } else if (post.user_id) {\n            return Utils.imageURLForUser(post.user_id);\n        }\n\n        return '';\n    };\n\n    getStatus = (fromAutoResponder, fromWebhook, user) => {\n        if (fromAutoResponder || fromWebhook || (user && user.is_bot)) {\n            return '';\n        }\n\n        return this.props.status;\n    };\n\n    getPostIconURL = (defaultURL, fromAutoResponder, fromWebhook) => {\n        const {enablePostIconOverride, hasImageProxy, post} = this.props;\n        const postProps = post.props;\n        let postIconOverrideURL = '';\n        let useUserIcon = '';\n        if (postProps) {\n            postIconOverrideURL = postProps.override_icon_url;\n            useUserIcon = postProps.use_user_icon;\n        }\n\n        if (this.props.compactDisplay) {\n            return '';\n        }\n\n        if (!fromAutoResponder && fromWebhook && !useUserIcon && enablePostIconOverride) {\n            if (postIconOverrideURL && postIconOverrideURL !== '') {\n                return PostUtils.getImageSrc(postIconOverrideURL, hasImageProxy);\n            }\n\n            return Constants.DEFAULT_WEBHOOK_LOGO;\n        }\n\n        return defaultURL;\n    };\n\n    render() {\n        const {\n            compactDisplay,\n            isBusy,\n            isRHS,\n            post,\n            user,\n            isBot,\n        } = this.props;\n\n        const isSystemMessage = PostUtils.isSystemMessage(post);\n        const fromWebhook = PostUtils.isFromWebhook(post);\n\n        if (isSystemMessage && !compactDisplay && !fromWebhook && !isBot) {\n            return <MattermostLogo className='icon'/>;\n        }\n        const fromAutoResponder = PostUtils.fromAutoResponder(post);\n\n        const hasMention = !fromAutoResponder && !fromWebhook;\n        const profileSrc = this.getProfilePictureURL();\n        const src = this.getPostIconURL(profileSrc, fromAutoResponder, fromWebhook);\n\n        const overrideIconEmoji = post.props ? post.props.override_icon_emoji : '';\n        const isEmoji = typeof overrideIconEmoji == 'string' && overrideIconEmoji !== '';\n        const status = this.getStatus(fromAutoResponder, fromWebhook, user);\n\n        return (\n            <ProfilePicture\n                hasMention={hasMention}\n                isBusy={isBusy}\n                isRHS={isRHS}\n                src={src}\n                profileSrc={profileSrc}\n                isEmoji={isEmoji}\n                status={status}\n                userId={user ? user.id : null}\n                username={user ? user.username : null}\n            />\n        );\n    }\n}\n","// Copyright (c) 2015-present Mattermost, Inc. All Rights Reserved.\n// See LICENSE.txt for license information.\n\nimport {connect} from 'react-redux';\n\nimport {getConfig} from 'mattermost-redux/selectors/entities/general';\nimport {getUser, getStatusForUserId} from 'mattermost-redux/selectors/entities/users';\n\nimport PostProfilePicture from './post_profile_picture';\n\nfunction mapStateToProps(state, ownProps) {\n    const config = getConfig(state);\n    const user = getUser(state, ownProps.userId);\n\n    return {\n        enablePostIconOverride: config.EnablePostIconOverride === 'true',\n        hasImageProxy: config.HasImageProxy === 'true',\n        status: getStatusForUserId(state, ownProps.userId),\n        isBot: Boolean(user && user.is_bot),\n        user,\n    };\n}\n\nexport default connect(mapStateToProps)(PostProfilePicture);\n","// Copyright (c) 2015-present Mattermost, Inc. All Rights Reserved.\n// See LICENSE.txt for license information.\n\nimport PropTypes from 'prop-types';\nimport React from 'react';\nimport {FormattedMessage} from 'react-intl';\n\nexport default class FailedPostOptions extends React.PureComponent {\n    static propTypes = {\n        post: PropTypes.object.isRequired,\n        actions: PropTypes.shape({\n            createPost: PropTypes.func.isRequired,\n            removePost: PropTypes.func.isRequired,\n        }).isRequired,\n    }\n\n    retryPost = (e) => {\n        e.preventDefault();\n\n        const post = {...this.props.post};\n        Reflect.deleteProperty(post, 'id');\n        this.props.actions.createPost(post);\n    }\n\n    cancelPost = (e) => {\n        e.preventDefault();\n\n        this.props.actions.removePost(this.props.post);\n    }\n\n    render() {\n        return (\n            <span className='pending-post-actions'>\n                <a\n                    className='post-retry'\n                    href='#'\n                    onClick={this.retryPost}\n                >\n                    <FormattedMessage\n                        id='pending_post_actions.retry'\n                        defaultMessage='Retry'\n                    />\n                </a>\n                {' - '}\n                <a\n                    className='post-cancel'\n                    href='#'\n                    onClick={this.cancelPost}\n                >\n                    <FormattedMessage\n                        id='pending_post_actions.cancel'\n                        defaultMessage='Cancel'\n                    />\n                </a>\n            </span>\n        );\n    }\n}\n","// Copyright (c) 2015-present Mattermost, Inc. All Rights Reserved.\n// See LICENSE.txt for license information.\n\nimport {connect} from 'react-redux';\nimport {bindActionCreators} from 'redux';\nimport {removePost} from 'mattermost-redux/actions/posts';\n\nimport {createPost} from 'actions/post_actions.jsx';\n\nimport FailedPostOptions from './failed_post_options.jsx';\n\nfunction mapDispatchToProps(dispatch) {\n    return {\n        actions: bindActionCreators({\n            createPost,\n            removePost,\n        }, dispatch),\n    };\n}\n\nexport default connect(null, mapDispatchToProps)(FailedPostOptions);\n","// Copyright (c) 2015-present Mattermost, Inc. All Rights Reserved.\n// See LICENSE.txt for license information.\n\nimport React from 'react';\nimport {FormattedMessage} from 'react-intl';\n\nexport default class FlagIcon extends React.PureComponent {\n    render() {\n        return (\n            <span {...this.props}>\n                <FormattedMessage\n                    id='generic_icons.flag'\n                    defaultMessage='Flag Icon'\n                >\n                    {(ariaLabel) => (\n                        <svg\n                            width='14px'\n                            height='14px'\n                            viewBox='0 0 16 16'\n                            role='icon'\n                            aria-label={ariaLabel}\n                        >\n                            <g\n                                stroke='none'\n                                strokeWidth='1'\n                                fill='inherit'\n                                fillRule='evenodd'\n                            >\n                                <g\n                                    transform='translate(-1106.000000, -33.000000)'\n                                    fillRule='nonzero'\n                                    fill='inherit'\n                                >\n                                    <g>\n                                        <g transform='translate(1096.000000, 22.000000)'>\n                                            <g transform='translate(10.000000, 11.000000)'>\n                                                <path d='M8,1 L2,1 C2,0.447 1.553,0 1,0 C0.447,0 0,0.447 0,1 L0,15.5 C0,15.776 0.224,16 0.5,16 L1.5,16 C1.776,16 2,15.776 2,15.5 L2,11 L7,11 L7,12 C7,12.553 7.447,13 8,13 L15,13 C15.553,13 16,12.553 16,12 L16,4 C16,3.447 15.553,3 15,3 L9,3 L9,2 C9,1.447 8.553,1 8,1 Z M9,11 L9,9.5 C9,9.224 8.776,9 8.5,9 L2,9 L2,3 L7,3 L7,4.5 C7,4.776 7.224,5 7.5,5 L14,5 L14,11 L9,11 Z'/>\n                                            </g>\n                                        </g>\n                                    </g>\n                                </g>\n                            </g>\n                        </svg>\n                    )}\n                </FormattedMessage>\n            </span>\n        );\n    }\n}\n","// Copyright (c) 2015-present Mattermost, Inc. All Rights Reserved.\n// See LICENSE.txt for license information.\n\nimport React from 'react';\nimport {FormattedMessage} from 'react-intl';\n\nexport default class FlagIconFilled extends React.PureComponent {\n    render() {\n        return (\n            <span {...this.props}>\n                <FormattedMessage\n                    id='generic_icons.flagged'\n                    defaultMessage='Flagged Icon'\n                >\n                    {(ariaLabel) => (\n                        <svg\n                            width='16px'\n                            height='16px'\n                            viewBox='0 0 16 16'\n                            role='icon'\n                            aria-label={ariaLabel}\n                        >\n                            <g\n                                stroke='none'\n                                strokeWidth='1'\n                                fill='inherit'\n                                fillRule='evenodd'\n                            >\n                                <g\n                                    transform='translate(-1073.000000, -33.000000)'\n                                    fillRule='nonzero'\n                                    fill='inherit'\n                                >\n                                    <g transform='translate(-1.000000, 0.000000)'>\n                                        <g transform='translate(1064.000000, 22.000000)'>\n                                            <g transform='translate(10.000000, 11.000000)'>\n                                                <path d='M8,1 L2,1 C2,0.447 1.553,0 1,0 C0.447,0 0,0.447 0,1 L0,15.5 C0,15.776 0.224,16 0.5,16 L1.5,16 C1.776,16 2,15.776 2,15.5 L2,11 L7,11 L7,12 C7,12.553 7.447,13 8,13 L15,13 C15.553,13 16,12.553 16,12 L16,4 C16,3.447 15.553,3 15,3 L9,3 L9,2 C9,1.447 8.553,1 8,1 Z'/>\n                                            </g>\n                                        </g>\n                                    </g>\n                                </g>\n                            </g>\n                        </svg>\n                    )}\n                </FormattedMessage>\n            </span>\n        );\n    }\n}\n","// Copyright (c) 2015-present Mattermost, Inc. All Rights Reserved.\n// See LICENSE.txt for license information.\n\nimport PropTypes from 'prop-types';\nimport React from 'react';\nimport {OverlayTrigger, Tooltip} from 'react-bootstrap';\nimport {FormattedMessage} from 'react-intl';\n\nimport FlagIcon from 'components/svg/flag_icon';\nimport FlagIconFilled from 'components/svg/flag_icon_filled';\nimport Constants, {Locations, A11yCustomEventTypes} from 'utils/constants.jsx';\nimport {localizeMessage} from 'utils/utils.jsx';\nimport {t} from 'utils/i18n';\n\nexport default class PostFlagIcon extends React.PureComponent {\n    static propTypes = {\n        location: PropTypes.oneOf([Locations.CENTER, Locations.RHS_ROOT, Locations.RHS_COMMENT, Locations.SEARCH]).isRequired,\n        postId: PropTypes.string.isRequired,\n        isFlagged: PropTypes.bool.isRequired,\n        isEphemeral: PropTypes.bool,\n        actions: PropTypes.shape({\n            flagPost: PropTypes.func.isRequired,\n            unflagPost: PropTypes.func.isRequired,\n        }).isRequired,\n    };\n\n    static defaultProps = {\n        isEphemeral: false,\n        location: Locations.CENTER,\n    };\n\n    constructor() {\n        super();\n\n        this.buttonRef = React.createRef();\n\n        this.state = {\n            a11yActive: false,\n        };\n    }\n\n    componentDidMount() {\n        if (this.buttonRef.current) {\n            this.buttonRef.current.addEventListener(A11yCustomEventTypes.ACTIVATE, this.handleA11yActivateEvent);\n            this.buttonRef.current.addEventListener(A11yCustomEventTypes.DEACTIVATE, this.handleA11yDeactivateEvent);\n        }\n    }\n    componentWillUnmount() {\n        if (this.buttonRef.current) {\n            this.buttonRef.current.removeEventListener(A11yCustomEventTypes.ACTIVATE, this.handleA11yActivateEvent);\n            this.buttonRef.current.removeEventListener(A11yCustomEventTypes.DEACTIVATE, this.handleA11yDeactivateEvent);\n        }\n    }\n\n    componentDidUpdate() {\n        if (this.state.a11yActive && this.buttonRef.current) {\n            this.buttonRef.current.dispatchEvent(new Event(A11yCustomEventTypes.UPDATE));\n        }\n    }\n\n    handlePress = (e) => {\n        e.preventDefault();\n\n        const {\n            actions,\n            isFlagged,\n            postId,\n        } = this.props;\n\n        if (isFlagged) {\n            actions.unflagPost(postId);\n        } else {\n            actions.flagPost(postId);\n        }\n    }\n\n    handleA11yActivateEvent = () => {\n        this.setState({a11yActive: true});\n    }\n\n    handleA11yDeactivateEvent = () => {\n        this.setState({a11yActive: false});\n    }\n\n    render() {\n        if (this.props.isEphemeral) {\n            return null;\n        }\n\n        const isFlagged = this.props.isFlagged;\n\n        const flagVisible = isFlagged ? 'visible' : '';\n\n        let flagIcon;\n        if (isFlagged) {\n            flagIcon = <FlagIconFilled className='icon'/>;\n        } else {\n            flagIcon = <FlagIcon className='icon'/>;\n        }\n\n        return (\n            <button\n                ref={this.buttonRef}\n                id={`${this.props.location}_flagIcon_${this.props.postId}`}\n                aria-label={isFlagged ? localizeMessage('flag_post.unflag', 'Unflag').toLowerCase() : localizeMessage('flag_post.flag', 'Flag for follow up').toLowerCase()}\n                className={'style--none flag-icon__container ' + flagVisible}\n                onClick={this.handlePress}\n            >\n                <OverlayTrigger\n                    key={'flagtooltipkey' + flagVisible}\n                    delayShow={Constants.OVERLAY_TIME_DELAY}\n                    placement='top'\n                    overlay={\n                        <Tooltip id='flagTooltip'>\n                            <FormattedMessage\n                                id={isFlagged ? t('flag_post.unflag') : t('flag_post.flag')}\n                                defaultMessage={isFlagged ? 'Unflag' : 'Flag for follow up'}\n                            />\n                        </Tooltip>\n                    }\n                >\n                    {flagIcon}\n                </OverlayTrigger>\n            </button>\n        );\n    }\n}\n","// Copyright (c) 2015-present Mattermost, Inc. All Rights Reserved.\n// See LICENSE.txt for license information.\n\nimport {connect} from 'react-redux';\nimport {bindActionCreators} from 'redux';\n\nimport {flagPost, unflagPost} from 'actions/post_actions.jsx';\n\nimport PostFlagIcon from './post_flag_icon';\n\nfunction mapDispatchToProps(dispatch) {\n    return {\n        actions: bindActionCreators({\n            flagPost,\n            unflagPost,\n        }, dispatch),\n    };\n}\n\nexport default connect(null, mapDispatchToProps)(PostFlagIcon);\n","// Copyright (c) 2015-present Mattermost, Inc. All Rights Reserved.\n// See LICENSE.txt for license information.\n\nimport PropTypes from 'prop-types';\nimport React from 'react';\nimport {Link} from 'react-router-dom';\n\nimport * as GlobalActions from 'actions/global_actions.jsx';\nimport {isMobile} from 'utils/user_agent.jsx';\nimport {Locations} from 'utils/constants.jsx';\nimport {isMobile as isMobileView} from 'utils/utils.jsx';\nimport LocalDateTime from 'components/local_date_time';\n\nexport default class PostTime extends React.PureComponent {\n    static propTypes = {\n\n        /*\n         * If true, time will be rendered as a permalink to the post\n         */\n        isPermalink: PropTypes.bool.isRequired,\n\n        /*\n         * The time to display\n         */\n        eventTime: PropTypes.number.isRequired,\n\n        location: PropTypes.oneOf([Locations.CENTER, Locations.RHS_ROOT, Locations.RHS_COMMENT, Locations.SEARCH]).isRequired,\n\n        /*\n         * The post id of posting being rendered\n         */\n        postId: PropTypes.string,\n        teamUrl: PropTypes.string,\n    };\n\n    static defaultProps = {\n        eventTime: 0,\n        location: Locations.CENTER,\n    };\n\n    handleClick = () => {\n        if (isMobileView()) {\n            GlobalActions.emitCloseRightHandSide();\n        }\n    };\n\n    render() {\n        const localDateTime = (\n            <LocalDateTime\n                eventTime={this.props.eventTime}\n            />\n        );\n        if (isMobile() || !this.props.isPermalink) {\n            return (\n                <div\n                    role='presentation'\n                    className='post__permalink'\n                >\n                    {localDateTime}\n                </div>\n            );\n        }\n\n        const {\n            location,\n            postId,\n            teamUrl,\n        } = this.props;\n\n        return (\n            <Link\n                role='presentation'\n                id={`${location}_time_${postId}`}\n                to={`${teamUrl}/pl/${postId}`}\n                className='post__permalink'\n                onClick={this.handleClick}\n            >\n                {localDateTime}\n            </Link>\n        );\n    }\n}\n","// Copyright (c) 2015-present Mattermost, Inc. All Rights Reserved.\n// See LICENSE.txt for license information.\n\nimport {connect} from 'react-redux';\nimport {getCurrentRelativeTeamUrl} from 'mattermost-redux/selectors/entities/teams';\n\nimport PostTime from './post_time.jsx';\n\nfunction mapStateToProps(state) {\n    return {\n        teamUrl: getCurrentRelativeTeamUrl(state),\n    };\n}\n\nexport default connect(mapStateToProps)(PostTime);\n","// Copyright (c) 2015-present Mattermost, Inc. All Rights Reserved.\n// See LICENSE.txt for license information.\n\nimport PropTypes from 'prop-types';\nimport React from 'react';\nimport {OverlayTrigger, Tooltip} from 'react-bootstrap';\nimport {FormattedMessage} from 'react-intl';\n\nimport Permissions from 'mattermost-redux/constants/permissions';\n\nimport {Locations} from 'utils/constants.jsx';\nimport {localizeMessage} from 'utils/utils.jsx';\n\nimport ChannelPermissionGate from 'components/permissions_gates/channel_permission_gate';\nimport EmojiIcon from 'components/svg/emoji_icon';\nimport EmojiPickerOverlay from 'components/emoji_picker/emoji_picker_overlay.jsx';\n\nconst TOP_OFFSET = -7;\n\nexport default class PostReaction extends React.PureComponent {\n    static propTypes = {\n        channelId: PropTypes.string,\n        postId: PropTypes.string.isRequired,\n        teamId: PropTypes.string.isRequired,\n        getDotMenuRef: PropTypes.func.isRequired,\n        location: PropTypes.oneOf([Locations.CENTER, Locations.RHS_ROOT, Locations.RHS_COMMENT]).isRequired,\n        showEmojiPicker: PropTypes.bool.isRequired,\n        toggleEmojiPicker: PropTypes.func.isRequired,\n        actions: PropTypes.shape({\n            addReaction: PropTypes.func.isRequired,\n        }).isRequired,\n    };\n\n    static defaultProps = {\n        location: Locations.CENTER,\n        showEmojiPicker: false,\n    };\n\n    handleAddEmoji = (emoji) => {\n        this.setState({showEmojiPicker: false});\n        const emojiName = emoji.name || emoji.aliases[0];\n        this.props.actions.addReaction(this.props.postId, emojiName);\n        this.props.toggleEmojiPicker();\n    };\n\n    render() {\n        const {\n            channelId,\n            location,\n            postId,\n            showEmojiPicker,\n            teamId,\n        } = this.props;\n\n        let spaceRequiredAbove;\n        let spaceRequiredBelow;\n        if (location === Locations.RHS_ROOT || location === Locations.RHS_COMMENT) {\n            spaceRequiredAbove = EmojiPickerOverlay.RHS_SPACE_REQUIRED_ABOVE;\n            spaceRequiredBelow = EmojiPickerOverlay.RHS_SPACE_REQUIRED_BELOW;\n        }\n\n        return (\n            <ChannelPermissionGate\n                channelId={channelId}\n                teamId={teamId}\n                permissions={[Permissions.ADD_REACTION]}\n            >\n                <div>\n                    <EmojiPickerOverlay\n                        show={showEmojiPicker}\n                        target={this.props.getDotMenuRef}\n                        onHide={this.props.toggleEmojiPicker}\n                        onEmojiClose={this.props.toggleEmojiPicker}\n                        onEmojiClick={this.handleAddEmoji}\n                        topOffset={TOP_OFFSET}\n                        spaceRequiredAbove={spaceRequiredAbove}\n                        spaceRequiredBelow={spaceRequiredBelow}\n                    />\n                    <button\n                        id={`${location}_reaction_${postId}`}\n                        aria-label={localizeMessage('post_info.tooltip.add_reactions', 'Add Reaction').toLowerCase()}\n                        className='reacticon__container color--link style--none'\n                        onClick={this.props.toggleEmojiPicker}\n                    >\n                        <OverlayTrigger\n                            className='hidden-xs'\n                            delayShow={500}\n                            placement='top'\n                            overlay={\n                                <Tooltip\n                                    id='reaction-icon-tooltip'\n                                    className='hidden-xs'\n                                >\n                                    <FormattedMessage\n                                        id='post_info.tooltip.add_reactions'\n                                        defaultMessage='Add Reaction'\n                                    />\n                                </Tooltip>\n                            }\n                        >\n                            <EmojiIcon className='icon icon--emoji'/>\n                        </OverlayTrigger>\n                    </button>\n                </div>\n            </ChannelPermissionGate>\n        );\n    }\n}\n","// Copyright (c) 2015-present Mattermost, Inc. All Rights Reserved.\n// See LICENSE.txt for license information.\n\nimport {connect} from 'react-redux';\nimport {bindActionCreators} from 'redux';\n\nimport {addReaction} from 'actions/post_actions.jsx';\n\nimport PostReaction from './post_reaction';\n\nfunction mapDispatchToProps(dispatch) {\n    return {\n        actions: bindActionCreators({\n            addReaction,\n        }, dispatch),\n    };\n}\n\nexport default connect(null, mapDispatchToProps)(PostReaction);\n","// Copyright (c) 2015-present Mattermost, Inc. All Rights Reserved.\n// See LICENSE.txt for license information.\n\nimport PropTypes from 'prop-types';\nimport React from 'react';\nimport {OverlayTrigger, Tooltip} from 'react-bootstrap';\nimport {FormattedMessage} from 'react-intl';\n\nimport * as Utils from 'utils/utils.jsx';\n\nexport default class Reaction extends React.PureComponent {\n    static propTypes = {\n\n        /*\n         * The post to render the reaction for\n         */\n        post: PropTypes.object.isRequired,\n\n        /*\n         * The user id of the logged in user\n         */\n        currentUserId: PropTypes.string.isRequired,\n\n        /*\n         * The name of the emoji for the reaction\n         */\n        emojiName: PropTypes.string.isRequired,\n\n        /*\n         * The number of reactions to this post for this emoji\n         */\n        reactionCount: PropTypes.number.isRequired,\n\n        /*\n         * Array of users who reacted to this post\n         */\n        profiles: PropTypes.array.isRequired,\n\n        /*\n         * The number of users not in the profile list who have reacted with this emoji\n         */\n        otherUsersCount: PropTypes.number.isRequired,\n\n        /*\n         * Array of reactions by user\n         */\n        reactions: PropTypes.arrayOf(PropTypes.object).isRequired,\n\n        /*\n         * True if the user has the permission to add a reaction in this channel\n         */\n        canAddReaction: PropTypes.bool.isRequired,\n\n        /*\n         * True if user has the permission to remove his own reactions in this channel\n         */\n        canRemoveReaction: PropTypes.bool.isRequired,\n\n        /*\n         * The URL of the emoji image\n         */\n        emojiImageUrl: PropTypes.string.isRequired,\n\n        actions: PropTypes.shape({\n\n            /*\n             * Function to add a reaction to a post\n             */\n            addReaction: PropTypes.func.isRequired,\n\n            /*\n             * Function to get non-loaded profiles by id\n             */\n            getMissingProfilesByIds: PropTypes.func.isRequired,\n\n            /*\n             * Function to remove a reaction from a post\n             */\n            removeReaction: PropTypes.func.isRequired,\n        }),\n    }\n\n    handleAddReaction = (e) => {\n        e.preventDefault();\n        const {actions, post, emojiName} = this.props;\n        actions.addReaction(post.id, emojiName);\n    }\n\n    handleRemoveReaction = (e) => {\n        e.preventDefault();\n        this.props.actions.removeReaction(this.props.post.id, this.props.emojiName);\n    }\n\n    loadMissingProfiles = () => {\n        const ids = this.props.reactions.map((reaction) => reaction.user_id);\n        this.props.actions.getMissingProfilesByIds(ids);\n    }\n\n    render() {\n        if (!this.props.emojiImageUrl) {\n            return null;\n        }\n\n        let currentUserReacted = false;\n        const users = [];\n        const otherUsersCount = this.props.otherUsersCount;\n        for (const user of this.props.profiles) {\n            if (user.id === this.props.currentUserId) {\n                currentUserReacted = true;\n            } else {\n                users.push(Utils.getDisplayNameByUser(user));\n            }\n        }\n\n        // Sort users in alphabetical order with \"you\" being first if the current user reacted\n        users.sort();\n        if (currentUserReacted) {\n            users.unshift(Utils.localizeMessage('reaction.you', 'You'));\n        }\n\n        let names;\n        if (otherUsersCount > 0) {\n            if (users.length > 0) {\n                names = (\n                    <FormattedMessage\n                        id='reaction.usersAndOthersReacted'\n                        defaultMessage='{users} and {otherUsers, number} other {otherUsers, plural, one {user} other {users}}'\n                        values={{\n                            users: users.join(', '),\n                            otherUsers: otherUsersCount,\n                        }}\n                    />\n                );\n            } else {\n                names = (\n                    <FormattedMessage\n                        id='reaction.othersReacted'\n                        defaultMessage='{otherUsers, number} {otherUsers, plural, one {user} other {users}}'\n                        values={{\n                            otherUsers: otherUsersCount,\n                        }}\n                    />\n                );\n            }\n        } else if (users.length > 1) {\n            names = (\n                <FormattedMessage\n                    id='reaction.usersReacted'\n                    defaultMessage='{users} and {lastUser}'\n                    values={{\n                        users: users.slice(0, -1).join(', '),\n                        lastUser: users[users.length - 1],\n                    }}\n                />\n            );\n        } else {\n            names = users[0];\n        }\n\n        let reactionVerb;\n        if (users.length + otherUsersCount > 1) {\n            if (currentUserReacted) {\n                reactionVerb = (\n                    <FormattedMessage\n                        id='reaction.reactionVerb.youAndUsers'\n                        defaultMessage='reacted'\n                    />\n                );\n            } else {\n                reactionVerb = (\n                    <FormattedMessage\n                        id='reaction.reactionVerb.users'\n                        defaultMessage='reacted'\n                    />\n                );\n            }\n        } else if (currentUserReacted) {\n            reactionVerb = (\n                <FormattedMessage\n                    id='reaction.reactionVerb.you'\n                    defaultMessage='reacted'\n                />\n            );\n        } else {\n            reactionVerb = (\n                <FormattedMessage\n                    id='reaction.reactionVerb.user'\n                    defaultMessage='reacted'\n                />\n            );\n        }\n\n        const tooltip = (\n            <FormattedMessage\n                id='reaction.reacted'\n                defaultMessage='{users} {reactionVerb} with {emoji}'\n                values={{\n                    users: <b>{names}</b>,\n                    reactionVerb,\n                    emoji: <b>{':' + this.props.emojiName + ':'}</b>,\n                }}\n            />\n        );\n\n        let handleClick;\n        let clickTooltip;\n        let className = 'post-reaction';\n        const emojiNameWithSpaces = this.props.emojiName.replace(/_/g, ' ');\n        let ariaLabelEmoji = `${Utils.localizeMessage('reaction.reactWidth.ariaLabel', 'react with')} ${emojiNameWithSpaces}`;\n        if (currentUserReacted) {\n            if (this.props.canRemoveReaction) {\n                handleClick = this.handleRemoveReaction;\n                ariaLabelEmoji = `${Utils.localizeMessage('reaction.removeReact.ariaLabel', 'remove reaction')} ${emojiNameWithSpaces}`;\n                clickTooltip = (\n                    <FormattedMessage\n                        id='reaction.clickToRemove'\n                        defaultMessage='(click to remove)'\n                    />\n                );\n            } else {\n                className += ' post-reaction--read-only';\n            }\n\n            className += ' post-reaction--current-user';\n        } else if (!currentUserReacted && this.props.canAddReaction) {\n            handleClick = this.handleAddReaction;\n            clickTooltip = (\n                <FormattedMessage\n                    id='reaction.clickToAdd'\n                    defaultMessage='(click to add)'\n                />\n            );\n        } else {\n            className += ' post-reaction--read-only';\n        }\n\n        return (\n            <button\n                id={`postReaction-${this.props.post.id}-${this.props.emojiName}`}\n                aria-label={ariaLabelEmoji}\n                className={`style--none ${className}`}\n                onClick={handleClick}\n            >\n                <OverlayTrigger\n                    delayShow={1000}\n                    placement='top'\n                    shouldUpdatePosition={true}\n                    overlay={\n                        <Tooltip id={`${this.props.post.id}-${this.props.emojiName}-reaction`}>\n                            {tooltip}\n                            <br/>\n                            {clickTooltip}\n                        </Tooltip>\n                    }\n                    onEnter={this.loadMissingProfiles}\n                >\n                    <span>\n                        <span\n                            className='post-reaction__emoji emoticon'\n                            style={{backgroundImage: 'url(' + this.props.emojiImageUrl + ')'}}\n                        />\n                        <span\n                            className='post-reaction__count'\n                        >\n                            {this.props.reactionCount}\n                        </span>\n                    </span>\n                </OverlayTrigger>\n            </button>\n        );\n    }\n}\n","// Copyright (c) 2015-present Mattermost, Inc. All Rights Reserved.\n// See LICENSE.txt for license information.\n\nimport {connect} from 'react-redux';\nimport {bindActionCreators} from 'redux';\n\nimport {removeReaction} from 'mattermost-redux/actions/posts';\nimport {getMissingProfilesByIds} from 'mattermost-redux/actions/users';\nimport {getCurrentUserId, makeGetProfilesForReactions, getCurrentUser} from 'mattermost-redux/selectors/entities/users';\nimport {getChannel} from 'mattermost-redux/selectors/entities/channels';\nimport {getCustomEmojisByName} from 'mattermost-redux/selectors/entities/emojis';\nimport {getEmojiImageUrl} from 'mattermost-redux/utils/emoji_utils';\nimport {haveIChannelPermission} from 'mattermost-redux/selectors/entities/roles';\nimport Permissions from 'mattermost-redux/constants/permissions';\nimport Constants from 'mattermost-redux/constants/general';\nimport {getConfig, getLicense} from 'mattermost-redux/selectors/entities/general';\n\nimport {addReaction} from 'actions/post_actions.jsx';\n\nimport * as Emoji from 'utils/emoji.jsx';\n\nimport Reaction from './reaction.jsx';\n\nfunction makeMapStateToProps() {\n    const getProfilesForReactions = makeGetProfilesForReactions();\n\n    return function mapStateToProps(state, ownProps) {\n        const config = getConfig(state);\n        const license = getLicense(state);\n        const me = getCurrentUser(state);\n\n        const profiles = getProfilesForReactions(state, ownProps.reactions);\n        let emoji;\n        if (Emoji.EmojiIndicesByAlias.has(ownProps.emojiName)) {\n            emoji = Emoji.Emojis[Emoji.EmojiIndicesByAlias.get(ownProps.emojiName)];\n        } else {\n            const emojis = getCustomEmojisByName(state);\n            emoji = emojis.get(ownProps.emojiName);\n        }\n\n        let emojiImageUrl = '';\n        if (emoji) {\n            emojiImageUrl = getEmojiImageUrl(emoji);\n        }\n        const channel = getChannel(state, ownProps.post.channel_id) || {};\n        const channelIsArchived = channel.delete_at !== 0;\n        const teamId = channel.team_id;\n\n        let canAddReaction = false;\n        let canRemoveReaction = false;\n\n        if (!channelIsArchived) {\n            canAddReaction = checkReactionAction(state, teamId, ownProps.post.channel_id, channel.name, config, license, me, Permissions.REMOVE_REACTION);\n            canRemoveReaction = checkReactionAction(state, teamId, ownProps.post.channel_id, channel.name, config, license, me, Permissions.ADD_REACTION);\n        }\n\n        return {\n            profiles,\n            otherUsersCount: ownProps.reactions.length - profiles.length,\n            currentUserId: getCurrentUserId(state),\n            reactionCount: ownProps.reactions.length,\n            canAddReaction,\n            canRemoveReaction,\n            emojiImageUrl,\n        };\n    };\n}\n\nfunction mapDispatchToProps(dispatch) {\n    return {\n        actions: bindActionCreators({\n            addReaction,\n            removeReaction,\n            getMissingProfilesByIds,\n        }, dispatch),\n    };\n}\n\nfunction checkReactionAction(state, teamId, channelId, channelName, config, license, user, permission) {\n    if (!haveIChannelPermission(state, {team: teamId, channel: channelId, permission})) {\n        return false;\n    }\n\n    if (channelName === Constants.DEFAULT_CHANNEL && config.ExperimentalTownSquareIsReadOnly === 'true' && license.IsLicensed === 'true' && !user.roles.includes('system_admin')) {\n        return false;\n    }\n\n    return true;\n}\n\nexport default connect(makeMapStateToProps, mapDispatchToProps)(Reaction);\n","// Copyright (c) 2015-present Mattermost, Inc. All Rights Reserved.\n// See LICENSE.txt for license information.\n\nimport PropTypes from 'prop-types';\nimport React from 'react';\nimport {OverlayTrigger, Tooltip} from 'react-bootstrap';\nimport {FormattedMessage} from 'react-intl';\nimport Permissions from 'mattermost-redux/constants/permissions';\n\nimport Constants from 'utils/constants.jsx';\nimport Reaction from 'components/post_view/reaction';\nimport EmojiPickerOverlay from 'components/emoji_picker/emoji_picker_overlay.jsx';\nimport ChannelPermissionGate from 'components/permissions_gates/channel_permission_gate';\nimport {disableVirtList, localizeMessage} from 'utils/utils.jsx';\n\nconst DEFAULT_EMOJI_PICKER_RIGHT_OFFSET = 15;\nconst EMOJI_PICKER_WIDTH_OFFSET = 260;\n\nexport default class ReactionList extends React.PureComponent {\n    static propTypes = {\n\n        /**\n         * The post to render reactions for\n         */\n        post: PropTypes.object.isRequired,\n\n        /*\n         * The id of the team which belongs the post\n         */\n        teamId: PropTypes.string,\n\n        /**\n         * The reactions to render\n         */\n        reactions: PropTypes.object,\n\n        /**\n         * Whether to show the emoji picker.\n         */\n        enableEmojiPicker: PropTypes.bool.isRequired,\n\n        actions: PropTypes.shape({\n\n            /**\n             * Function to add a reaction to the post\n             */\n            addReaction: PropTypes.func.isRequired,\n\n            /**\n             * Function used for correcting scroll when component is updated with first reaction\n             */\n            scrollPostList: PropTypes.func.isRequired,\n        }),\n    }\n\n    constructor(props) {\n        super(props);\n\n        this.state = {\n            showEmojiPicker: false,\n        };\n    }\n\n    componentDidUpdate(prevProps) {\n        if (this.props.reactions !== prevProps.reactions && disableVirtList()) {\n            this.props.actions.scrollPostList();\n        }\n    }\n\n    getTarget = () => {\n        return this.refs.addReactionButton;\n    }\n\n    handleEmojiClick = (emoji) => {\n        this.setState({showEmojiPicker: false});\n        const emojiName = emoji.name || emoji.aliases[0];\n        this.props.actions.addReaction(this.props.post.id, emojiName);\n    }\n\n    hideEmojiPicker = () => {\n        this.setState({showEmojiPicker: false});\n    }\n\n    toggleEmojiPicker = () => {\n        this.setState({showEmojiPicker: !this.state.showEmojiPicker});\n    }\n\n    render() {\n        const reactionsByName = new Map();\n        const emojiNames = [];\n\n        if (this.props.reactions) {\n            for (const reaction of Object.values(this.props.reactions)) {\n                const emojiName = reaction.emoji_name;\n\n                if (reactionsByName.has(emojiName)) {\n                    reactionsByName.get(emojiName).push(reaction);\n                } else {\n                    emojiNames.push(emojiName);\n                    reactionsByName.set(emojiName, [reaction]);\n                }\n            }\n        }\n\n        if (reactionsByName.size === 0) {\n            return null;\n        }\n\n        const reactions = emojiNames.map((emojiName) => {\n            return (\n                <Reaction\n                    key={emojiName}\n                    post={this.props.post}\n                    emojiName={emojiName}\n                    reactions={reactionsByName.get(emojiName) || []}\n                />\n            );\n        });\n\n        const addReactionButton = this.getTarget();\n        let rightOffset = DEFAULT_EMOJI_PICKER_RIGHT_OFFSET;\n        if (addReactionButton) {\n            rightOffset = window.innerWidth - addReactionButton.getBoundingClientRect().right - EMOJI_PICKER_WIDTH_OFFSET;\n\n            if (rightOffset < 0) {\n                rightOffset = DEFAULT_EMOJI_PICKER_RIGHT_OFFSET;\n            }\n        }\n\n        let emojiPicker = null;\n        if (this.props.enableEmojiPicker) {\n            const addReactionTooltip = (\n                <Tooltip id='addReactionTooltip'>\n                    <FormattedMessage\n                        id='reaction_list.addReactionTooltip'\n                        defaultMessage='Add reaction'\n                    />\n                </Tooltip>\n            );\n\n            emojiPicker = (\n                <span className='emoji-picker__container'>\n                    <EmojiPickerOverlay\n                        show={this.state.showEmojiPicker}\n                        target={this.getTarget}\n                        onHide={this.hideEmojiPicker}\n                        onEmojiClose={this.hideEmojiPicker}\n                        onEmojiClick={this.handleEmojiClick}\n                        rightOffset={rightOffset}\n                        topOffset={-5}\n                    />\n                    <OverlayTrigger\n                        placement='top'\n                        delayShow={Constants.OVERLAY_TIME_DELAY}\n                        overlay={addReactionTooltip}\n                    >\n                        <ChannelPermissionGate\n                            channelId={this.props.post.channel_id}\n                            teamId={this.props.teamId}\n                            permissions={[Permissions.ADD_REACTION]}\n                        >\n                            <button\n                                aria-label={localizeMessage('reaction.add.ariaLabel', 'add reaction')}\n                                className='style--none post-reaction'\n                                onClick={this.toggleEmojiPicker}\n                            >\n                                <span\n                                    id={`addReaction-${this.props.post.id}`}\n                                    className='post-reaction__add'\n                                    ref='addReactionButton'\n                                >\n                                    {'+'}\n                                </span>\n                            </button>\n                        </ChannelPermissionGate>\n                    </OverlayTrigger>\n                </span>\n            );\n        }\n\n        let addReactionClassName = 'post-add-reaction';\n        if (this.state.showEmojiPicker) {\n            addReactionClassName += ' post-add-reaction-emoji-picker-open';\n        }\n\n        return (\n            <div\n                aria-label={localizeMessage('reaction.container.ariaLabel', 'reactions')}\n                className='post-reaction-list'\n            >\n                {reactions}\n                <div className={addReactionClassName}>\n                    {emojiPicker}\n                </div>\n            </div>\n        );\n    }\n}\n","// Copyright (c) 2015-present Mattermost, Inc. All Rights Reserved.\n// See LICENSE.txt for license information.\n\nimport {connect} from 'react-redux';\nimport {bindActionCreators} from 'redux';\n\nimport {getChannel} from 'mattermost-redux/selectors/entities/channels';\nimport {makeGetReactionsForPost} from 'mattermost-redux/selectors/entities/posts';\nimport {getConfig} from 'mattermost-redux/selectors/entities/general';\n\nimport {addReaction} from 'actions/post_actions.jsx';\nimport {scrollPostList} from 'actions/views/channel';\n\nimport ReactionList from './reaction_list.jsx';\n\nfunction makeMapStateToProps() {\n    const getReactionsForPost = makeGetReactionsForPost();\n\n    return function mapStateToProps(state, ownProps) {\n        const config = getConfig(state);\n        const enableEmojiPicker = config.EnableEmojiPicker === 'true' && !ownProps.isReadOnly;\n\n        const channel = getChannel(state, ownProps.post.channel_id) || {};\n        const teamId = channel.team_id;\n\n        return {\n            teamId,\n            reactions: getReactionsForPost(state, ownProps.post.id),\n            enableEmojiPicker,\n        };\n    };\n}\n\nfunction mapDispatchToProps(dispatch) {\n    return {\n        actions: bindActionCreators({\n            addReaction,\n            scrollPostList,\n        }, dispatch),\n    };\n}\n\nexport default connect(makeMapStateToProps, mapDispatchToProps)(ReactionList);\n","// Copyright (c) 2015-present Mattermost, Inc. All Rights Reserved.\n// See LICENSE.txt for license information.\n\nimport PropTypes from 'prop-types';\nimport React from 'react';\n\nimport {localizeMessage} from 'utils/utils.jsx';\n\nconst MAX_POST_HEIGHT = 600;\nconst MAX_ATTACHMENT_TEXT_HEIGHT = 200;\nconst MARGIN_CHANGE_FOR_COMPACT_POST = 22;\n\nexport default class ShowMore extends React.PureComponent {\n    static propTypes = {\n        children: PropTypes.node,\n        checkOverflow: PropTypes.number,\n        isAttachmentText: PropTypes.bool,\n        isRHSExpanded: PropTypes.bool.isRequired,\n        isRHSOpen: PropTypes.bool.isRequired,\n        text: PropTypes.string,\n        compactDisplay: PropTypes.bool.isRequired,\n    }\n    constructor(props) {\n        super(props);\n        this.maxHeight = this.props.isAttachmentText ? MAX_ATTACHMENT_TEXT_HEIGHT : MAX_POST_HEIGHT;\n        this.state = {\n            isCollapsed: true,\n            isOverflow: false,\n        };\n    }\n\n    componentDidMount() {\n        this.checkTextOverflow();\n\n        window.addEventListener('resize', this.handleResize);\n    }\n\n    componentDidUpdate(prevProps) {\n        if (\n            this.props.text !== prevProps.text ||\n            this.props.isRHSExpanded !== prevProps.isRHSExpanded ||\n            this.props.isRHSOpen !== prevProps.isRHSOpen ||\n            this.props.checkOverflow !== prevProps.checkOverflow\n        ) {\n            this.checkTextOverflow();\n        }\n    }\n\n    componentWillUnmount() {\n        window.removeEventListener('resize', this.handleResize);\n        if (this.overflowRef) {\n            window.cancelAnimationFrame(this.overflowRef);\n        }\n    }\n\n    toggleCollapse = (e) => {\n        e.preventDefault();\n        this.setState((prevState) => {\n            return {\n                isCollapsed: !prevState.isCollapsed,\n            };\n        });\n    };\n\n    checkTextOverflow = () => {\n        if (this.overflowRef) {\n            window.cancelAnimationFrame(this.overflowRef);\n        }\n        this.overflowRef = window.requestAnimationFrame(() => {\n            const textContainer = this.refs.textContainer;\n            let isOverflow = false;\n\n            if (textContainer && textContainer.scrollHeight > this.maxHeight) {\n                isOverflow = true;\n            }\n\n            if (isOverflow !== this.state.isOverflow) {\n                this.setState({\n                    isOverflow,\n                });\n            }\n        });\n    };\n\n    handleResize = () => {\n        this.checkTextOverflow();\n    };\n\n    render() {\n        const {\n            isCollapsed,\n            isOverflow,\n        } = this.state;\n\n        const {\n            children,\n            isAttachmentText,\n            compactDisplay,\n        } = this.props;\n\n        let className = 'post-message';\n        let collapsedMaxHeightStyle;\n        if (isCollapsed) {\n            collapsedMaxHeightStyle = this.maxHeight;\n            className += ' post-message--collapsed';\n        } else {\n            className += ' post-message--expanded';\n        }\n\n        let collapseGradientClass = 'post-collapse__gradient';\n        let collapseShowMoreClass = 'post-collapse__show-more';\n        if (isAttachmentText) {\n            collapseGradientClass = 'post-attachment-collapse__gradient';\n            collapseShowMoreClass = 'post-attachment-collapse__show-more';\n        }\n\n        let attachmentTextOverflow = null;\n        if (isOverflow) {\n            if (!isAttachmentText && isCollapsed && compactDisplay) {\n                collapsedMaxHeightStyle -= MARGIN_CHANGE_FOR_COMPACT_POST;\n            }\n\n            let showIcon = 'fa fa-angle-up';\n            let showText = localizeMessage('post_info.message.show_less', 'Show Less');\n            if (isCollapsed) {\n                showIcon = 'fa fa-angle-down';\n                showText = localizeMessage('post_info.message.show_more', 'Show More');\n            }\n\n            attachmentTextOverflow = (\n                <div className='post-collapse'>\n                    <div\n                        id='collapseGradient'\n                        className={collapseGradientClass}\n                    />\n                    <div className={collapseShowMoreClass}>\n                        <div className='post-collapse__show-more-line'/>\n                        <button\n                            id='showMoreButton'\n                            className='post-collapse__show-more-button'\n                            onClick={this.toggleCollapse}\n                        >\n                            <span className={showIcon}/>\n                            {showText}\n                        </button>\n                        <div className='post-collapse__show-more-line'/>\n                    </div>\n                </div>\n            );\n\n            className += ' post-message--overflow';\n        }\n\n        return (\n            <div className={className}>\n                <div\n                    style={{maxHeight: collapsedMaxHeightStyle}}\n                    className='post-message__text-container'\n                    ref='textContainer'\n                >\n                    {children}\n                </div>\n                {attachmentTextOverflow}\n            </div>\n        );\n    }\n}\n","// Copyright (c) 2015-present Mattermost, Inc. All Rights Reserved.\n// See LICENSE.txt for license information.\n\nimport {connect} from 'react-redux';\nimport {get} from 'mattermost-redux/selectors/entities/preferences';\n\nimport {getIsRhsExpanded, getIsRhsOpen} from 'selectors/rhs';\nimport {Preferences} from 'utils/constants.jsx';\n\nimport ShowMore from './show_more';\n\nfunction mapStateToProps(state) {\n    return {\n        isRHSExpanded: getIsRhsExpanded(state),\n        isRHSOpen: getIsRhsOpen(state),\n        compactDisplay: get(state, Preferences.CATEGORY_DISPLAY_SETTINGS, Preferences.MESSAGE_DISPLAY, Preferences.MESSAGE_DISPLAY_DEFAULT) === Preferences.MESSAGE_DISPLAY_COMPACT,\n    };\n}\n\nexport default connect(mapStateToProps)(ShowMore);\n","// Copyright (c) 2015-present Mattermost, Inc. All Rights Reserved.\n// See LICENSE.txt for license information.\n\nimport PropTypes from 'prop-types';\nimport React from 'react';\n\nimport Markdown from 'components/markdown';\n\nexport default class ActionButton extends React.PureComponent {\n    static propTypes = {\n        action: PropTypes.object.isRequired,\n        handleAction: PropTypes.func.isRequired,\n    }\n\n    render() {\n        const {action, handleAction} = this.props;\n        return (\n            <button\n                data-action-id={action.id}\n                data-action-cookie={action.cookie}\n                key={action.id}\n                onClick={handleAction}\n            >\n                <Markdown\n                    message={action.name}\n                    options={{\n                        mentionHighlight: false,\n                        markdown: false,\n                        autolinkedUrlSchemes: [],\n                    }}\n                />\n            </button>\n        );\n    }\n}\n","// Copyright (c) 2015-present Mattermost, Inc. All Rights Reserved.\n// See LICENSE.txt for license information.\n\nimport PropTypes from 'prop-types';\nimport React from 'react';\n\nimport MenuActionProvider from 'components/suggestion/menu_action_provider';\nimport GenericUserProvider from 'components/suggestion/generic_user_provider.jsx';\nimport GenericChannelProvider from 'components/suggestion/generic_channel_provider.jsx';\nimport AutocompleteSelector from 'components/widgets/settings/autocomplete_selector';\n\nexport default class ActionMenu extends React.PureComponent {\n    static propTypes = {\n        postId: PropTypes.string.isRequired,\n        action: PropTypes.object.isRequired,\n        selected: PropTypes.object,\n        actions: PropTypes.shape({\n            selectAttachmentMenuAction: PropTypes.func.isRequired,\n        }).isRequired,\n    }\n\n    constructor(props) {\n        super(props);\n\n        const action = props.action;\n        this.providers = [];\n        if (action) {\n            if (action.data_source === 'users') {\n                this.providers = [new GenericUserProvider()];\n            } else if (action.data_source === 'channels') {\n                this.providers = [new GenericChannelProvider()];\n            } else if (action.options) {\n                this.providers = [new MenuActionProvider(action.options)];\n            }\n        }\n\n        let selected;\n        let value = '';\n\n        if (action.default_option && action.options) {\n            selected = action.options.find((option) => option.value === action.default_option);\n            value = selected ? selected.text : '';\n        }\n\n        this.state = {\n            selected,\n            value,\n        };\n    }\n\n    static getDerivedStateFromProps(props, state) {\n        if (props.selected && props.selected !== state.selected) {\n            return {\n                value: props.selected.text,\n                selected: props.selected,\n            };\n        }\n\n        return null;\n    }\n\n    handleSelected = (selected) => {\n        if (!selected) {\n            return;\n        }\n\n        const {action} = this.props;\n\n        let value = '';\n        let text = '';\n        if (action.data_source === 'users') {\n            text = selected.username;\n            value = selected.id;\n        } else if (action.data_source === 'channels') {\n            text = selected.display_name;\n            value = selected.id;\n        } else {\n            text = selected.text;\n            value = selected.value;\n        }\n\n        this.props.actions.selectAttachmentMenuAction(this.props.postId, this.props.action.id, this.props.action.cookie, this.props.action.data_source, text, value);\n\n        this.setState({value: text});\n    }\n\n    render() {\n        const {action} = this.props;\n\n        return (\n            <AutocompleteSelector\n                providers={this.providers}\n                onSelected={this.handleSelected}\n                placeholder={action.name}\n                inputClassName='post-attachment-dropdown'\n                value={this.state.value}\n            />\n        );\n    }\n}\n","// Copyright (c) 2015-present Mattermost, Inc. All Rights Reserved.\n// See LICENSE.txt for license information.\n\nimport {connect} from 'react-redux';\nimport {bindActionCreators} from 'redux';\n\nimport {selectAttachmentMenuAction} from 'actions/views/posts';\n\nimport ActionMenu from './action_menu.jsx';\n\nfunction mapStateToProps(state, ownProps) {\n    const actions = state.views.posts.menuActions[ownProps.postId];\n    const selected = actions && actions[ownProps.action && ownProps.action.id];\n\n    return {\n        selected,\n    };\n}\n\nfunction mapDispatchToProps(dispatch) {\n    return {\n        actions: bindActionCreators({\n            selectAttachmentMenuAction,\n        }, dispatch),\n    };\n}\n\nexport default connect(mapStateToProps, mapDispatchToProps)(ActionMenu);\n","// Copyright (c) 2015-present Mattermost, Inc. All Rights Reserved.\n// See LICENSE.txt for license information.\n\nimport {getScheme} from 'utils/url';\n\nimport RemoveMarkdown from './remove_markdown';\n\nexport default class LinkOnlyRenderer extends RemoveMarkdown {\n    link(href, title, text) {\n        let outHref = href;\n\n        if (!getScheme(href)) {\n            outHref = `http://${outHref}`;\n        }\n\n        let output = `<a class=\"theme markdown__link\" href=\"${outHref}\" target=\"_blank\"`;\n\n        if (title) {\n            output += ' title=\"' + title + '\"';\n        }\n\n        output += `>${text}</a>`;\n\n        return output;\n    }\n}\n","// Copyright (c) 2015-present Mattermost, Inc. All Rights Reserved.\n// See LICENSE.txt for license information.\n\nimport PropTypes from 'prop-types';\nimport React from 'react';\n\nimport {isUrlSafe} from 'utils/url';\nimport {handleFormattedTextClick} from 'utils/utils';\n\nimport ExternalImage from 'components/external_image';\nimport Markdown from 'components/markdown';\nimport ShowMore from 'components/post_view/show_more';\nimport SizeAwareImage from 'components/size_aware_image';\n\nimport ActionButton from '../action_button';\nimport ActionMenu from '../action_menu';\nimport LinkOnlyRenderer from 'utils/markdown/link_only_renderer';\n\nexport default class MessageAttachment extends React.PureComponent {\n    static propTypes = {\n\n        /**\n         * The post id\n         */\n        postId: PropTypes.string.isRequired,\n\n        /**\n         * The attachment to render\n         */\n        attachment: PropTypes.object.isRequired,\n\n        /**\n         * Options specific to text formatting\n         */\n        options: PropTypes.object,\n\n        /**\n         * images object for dimensions\n         */\n        imagesMetadata: PropTypes.object,\n\n        actions: PropTypes.shape({\n            doPostActionWithCookie: PropTypes.func.isRequired,\n        }).isRequired,\n    }\n\n    constructor(props) {\n        super(props);\n\n        this.state = {\n            checkOverflow: 0,\n        };\n\n        this.imageProps = {\n            onImageLoaded: this.handleHeightReceived,\n        };\n    }\n\n    componentDidMount() {\n        this.mounted = true;\n    }\n\n    componentWillUnmount() {\n        this.mounted = false;\n    }\n\n    handleHeightReceivedForThumbUrl = ({height}) => {\n        const {attachment} = this.props;\n        if (!this.props.imagesMetadata || (this.props.imagesMetadata && !this.props.imagesMetadata[attachment.thumb_url])) {\n            this.handleHeightReceived(height);\n        }\n    }\n\n    handleHeightReceivedForImageUrl = ({height}) => {\n        const {attachment} = this.props;\n        if (!this.props.imagesMetadata || (this.props.imagesMetadata && !this.props.imagesMetadata[attachment.image_url])) {\n            this.handleHeightReceived(height);\n        }\n    }\n\n    handleHeightReceived = (height) => {\n        if (!this.mounted) {\n            return;\n        }\n\n        if (height > 0) {\n            // Increment checkOverflow to indicate change in height\n            // and recompute textContainer height at ShowMore component\n            // and see whether overflow text of show more/less is necessary or not.\n            this.setState((prevState) => {\n                return {checkOverflow: prevState.checkOverflow + 1};\n            });\n        }\n    };\n\n    renderPostActions = () => {\n        const actions = this.props.attachment.actions;\n        if (!actions || !actions.length) {\n            return '';\n        }\n\n        const content = [];\n\n        actions.forEach((action) => {\n            if (!action.id || !action.name) {\n                return;\n            }\n\n            switch (action.type) {\n            case 'select':\n                content.push(\n                    <ActionMenu\n                        key={action.id}\n                        postId={this.props.postId}\n                        action={action}\n                    />\n                );\n                break;\n            case 'button':\n            default:\n                content.push(\n                    <ActionButton\n                        key={action.id}\n                        action={action}\n                        handleAction={this.handleAction}\n                    />\n                );\n                break;\n            }\n        });\n\n        return (\n            <div\n                className='attachment-actions'\n            >\n                {content}\n            </div>\n        );\n    };\n\n    handleAction = (e) => {\n        e.preventDefault();\n        const actionId = e.currentTarget.getAttribute('data-action-id');\n        const actionCookie = e.currentTarget.getAttribute('data-action-cookie');\n\n        this.props.actions.doPostActionWithCookie(this.props.postId, actionId, actionCookie);\n    };\n\n    getFieldsTable = () => {\n        const fields = this.props.attachment.fields;\n        if (!fields || !fields.length) {\n            return '';\n        }\n\n        const fieldTables = [];\n\n        let headerCols = [];\n        let bodyCols = [];\n        let rowPos = 0;\n        let lastWasLong = false;\n        let nrTables = 0;\n        const markdown = {markdown: false, mentionHighlight: false};\n\n        fields.forEach((field, i) => {\n            if (rowPos === 2 || !(field.short === true) || lastWasLong) {\n                fieldTables.push(\n                    <table\n                        className='attachment-fields'\n                        key={'attachment__table__' + nrTables}\n                    >\n                        <thead>\n                            <tr>\n                                {headerCols}\n                            </tr>\n                        </thead>\n                        <tbody>\n                            <tr>\n                                {bodyCols}\n                            </tr>\n                        </tbody>\n                    </table>\n                );\n                headerCols = [];\n                bodyCols = [];\n                rowPos = 0;\n                nrTables += 1;\n                lastWasLong = false;\n            }\n            headerCols.push(\n                <th\n                    className='attachment-field__caption'\n                    key={'attachment__field-caption-' + i + '__' + nrTables}\n                    width='50%'\n                >\n                    <Markdown\n                        message={field.title}\n                        options={markdown}\n                    />\n                </th>\n            );\n\n            bodyCols.push(\n                <td\n                    className='attachment-field'\n                    key={'attachment__field-' + i + '__' + nrTables}\n                >\n                    <Markdown message={field.value}/>\n                </td>\n            );\n            rowPos += 1;\n            lastWasLong = !(field.short === true);\n        });\n        if (headerCols.length > 0) { // Flush last fields\n            fieldTables.push(\n                <table\n                    className='attachment-fields'\n                    key={'attachment__table__' + nrTables}\n                >\n                    <thead>\n                        <tr>\n                            {headerCols}\n                        </tr>\n                    </thead>\n                    <tbody>\n                        <tr>\n                            {bodyCols}\n                        </tr>\n                    </tbody>\n                </table>\n            );\n        }\n        return (\n            <div>\n                {fieldTables}\n            </div>\n        );\n    };\n\n    render() {\n        const {attachment, options} = this.props;\n        let preTextClass = '';\n\n        let preText;\n        if (attachment.pretext) {\n            preTextClass = 'attachment--pretext';\n            preText = (\n                <div className='attachment__thumb-pretext'>\n                    <Markdown message={attachment.pretext}/>\n                </div>\n            );\n        }\n\n        let author = [];\n        if (attachment.author_name || attachment.author_icon) {\n            if (attachment.author_icon) {\n                author.push(\n                    <ExternalImage\n                        key={'attachment__author-icon'}\n                        src={attachment.author_icon}\n                        imageMetadata={this.props.imagesMetadata[attachment.author_icon]}\n                    >\n                        {(iconUrl) => (\n                            <img\n                                alt={'attachment author icon'}\n                                className='attachment__author-icon'\n                                src={iconUrl}\n                                height='14'\n                                width='14'\n                            />\n                        )}\n                    </ExternalImage>\n                );\n            }\n            if (attachment.author_name) {\n                author.push(\n                    <span\n                        className='attachment__author-name'\n                        key={'attachment__author-name'}\n                    >\n                        {attachment.author_name}\n                    </span>\n                );\n            }\n        }\n        if (attachment.author_link && isUrlSafe(attachment.author_link)) {\n            author = (\n                <a\n                    href={attachment.author_link}\n                    target='_blank'\n                    rel='noopener noreferrer'\n                >\n                    {author}\n                </a>\n            );\n        }\n\n        let title;\n        if (attachment.title) {\n            if (attachment.title_link && isUrlSafe(attachment.title_link)) {\n                title = (\n                    <h1 className='attachment__title'>\n                        <a\n                            className='attachment__title-link'\n                            href={attachment.title_link}\n                            target='_blank'\n                            rel='noopener noreferrer'\n                        >\n                            {attachment.title}\n                        </a>\n                    </h1>\n                );\n            } else {\n                title = (\n                    <h1 className='attachment__title'>\n                        <Markdown\n                            message={attachment.title}\n                            options={{\n                                mentionHighlight: false,\n                                renderer: new LinkOnlyRenderer(),\n                                autolinkedUrlSchemes: [],\n                            }}\n                        />\n                    </h1>\n                );\n            }\n        }\n\n        let attachmentText;\n        if (attachment.text) {\n            attachmentText = (\n                <ShowMore\n                    checkOverflow={this.state.checkOverflow}\n                    isAttachmentText={true}\n                    text={attachment.text}\n                >\n                    <Markdown\n                        message={attachment.text || ''}\n                        options={options}\n                        imageProps={this.imageProps}\n                    />\n                </ShowMore>\n            );\n        }\n\n        let image;\n        if (attachment.image_url) {\n            const imageMetadata = this.props.imagesMetadata[attachment.image_url];\n\n            image = (\n                <div className='attachment__image-container'>\n                    <ExternalImage\n                        src={attachment.image_url}\n                        imageMetadata={imageMetadata}\n                    >\n                        {(imageUrl) => (\n                            <SizeAwareImage\n                                className='attachment__image'\n                                onImageLoaded={this.handleHeightReceivedForImageUrl}\n                                src={imageUrl}\n                                dimensions={imageMetadata}\n                            />\n                        )}\n                    </ExternalImage>\n                </div>\n            );\n        }\n\n        let thumb;\n        if (attachment.thumb_url) {\n            const thumbMetadata = this.props.imagesMetadata[attachment.thumb_url];\n\n            thumb = (\n                <div className='attachment__thumb-container'>\n                    <ExternalImage\n                        src={attachment.thumb_url}\n                        imageMetadata={thumbMetadata}\n                    >\n                        {(thumbUrl) => (\n                            <SizeAwareImage\n                                onImageLoaded={this.handleHeightReceivedForThumbUrl}\n                                src={thumbUrl}\n                                dimensions={thumbMetadata}\n                            />\n                        )}\n                    </ExternalImage>\n                </div>\n            );\n        }\n\n        const fields = this.getFieldsTable();\n        const actions = this.renderPostActions();\n\n        let useBorderStyle;\n        if (attachment.color && attachment.color[0] === '#') {\n            useBorderStyle = {borderLeftColor: attachment.color};\n        }\n\n        return (\n            <div\n                className={'attachment ' + preTextClass}\n                ref='attachment'\n            >\n                {preText}\n                <div className='attachment__content'>\n                    <div\n                        className={useBorderStyle ? 'clearfix attachment__container' : 'clearfix attachment__container attachment__container--' + attachment.color}\n                        style={useBorderStyle}\n                    >\n                        {author}\n                        {title}\n                        <div>\n                            <div\n                                className={thumb ? 'attachment__body' : 'attachment__body attachment__body--no_thumb'}\n                                onClick={handleFormattedTextClick}\n                            >\n                                {attachmentText}\n                                {image}\n                                {fields}\n                                {actions}\n                            </div>\n                            {thumb}\n                            <div style={style.footer}/>\n                        </div>\n                    </div>\n                </div>\n            </div>\n        );\n    }\n}\n\nconst style = {\n    footer: {clear: 'both'},\n};\n","// Copyright (c) 2015-present Mattermost, Inc. All Rights Reserved.\n// See LICENSE.txt for license information.\n\nimport {connect} from 'react-redux';\nimport {bindActionCreators} from 'redux';\n\nimport {doPostActionWithCookie} from 'mattermost-redux/actions/posts';\n\nimport MessageAttachment from './message_attachment';\n\nfunction mapDispatchToProps(dispatch) {\n    return {\n        actions: bindActionCreators({\n            doPostActionWithCookie,\n        }, dispatch),\n    };\n}\n\nexport default connect(null, mapDispatchToProps)(MessageAttachment);\n","// Copyright (c) 2015-present Mattermost, Inc. All Rights Reserved.\n// See LICENSE.txt for license information.\n\nimport PropTypes from 'prop-types';\nimport React from 'react';\n\nimport MessageAttachment from './message_attachment';\n\nexport default class MessageAttachmentList extends React.PureComponent {\n    static propTypes = {\n\n        /**\n         * The post id\n         */\n        postId: PropTypes.string.isRequired,\n\n        /**\n         * Array of attachments to render\n         */\n        attachments: PropTypes.array.isRequired,\n\n        /**\n         * Options specific to text formatting\n         */\n        options: PropTypes.object,\n\n        /**\n         * Images object used for creating placeholders to prevent scroll popup\n         */\n        imagesMetadata: PropTypes.object,\n    }\n\n    static defaultProps = {\n        imagesMetadata: {},\n    }\n\n    render() {\n        const content = [];\n        this.props.attachments.forEach((attachment, i) => {\n            content.push(\n                <MessageAttachment\n                    attachment={attachment}\n                    postId={this.props.postId}\n                    key={'att_' + i}\n                    options={this.props.options}\n                    imagesMetadata={this.props.imagesMetadata}\n                />\n            );\n        });\n\n        return (\n            <div\n                id={`messageAttachmentList_${this.props.postId}`}\n                className='attachment__list'\n            >\n                {content}\n            </div>\n        );\n    }\n}\n","// Copyright (c) 2015-present Mattermost, Inc. All Rights Reserved.\n// See LICENSE.txt for license information.\n\nexport function getDistanceBW2Points(point1, point2, xAttr = 'x', yAttr = 'y') {\n    return Math.sqrt(Math.pow(point1[xAttr] - point2[xAttr], 2) + Math.pow(point1[yAttr] - point2[yAttr], 2));\n}\n\n/**\n  * Funtion to return nearest point of given pivot point.\n  * It return two points one nearest and other nearest but having both coorditanes smaller than the given point's coordinates.\n  */\nexport function getNearestPoint(pivotPoint, points, xAttr = 'x', yAttr = 'y') {\n    var nearestPoint = {};\n    for (const point of points) {\n        if (typeof nearestPoint[xAttr] === 'undefined' || typeof nearestPoint[yAttr] === 'undefined') {\n            nearestPoint = point;\n        } else if (getDistanceBW2Points(point, pivotPoint, xAttr, yAttr) < getDistanceBW2Points(nearestPoint, pivotPoint, xAttr, yAttr)) {\n        // Check for bestImage\n            nearestPoint = point;\n        }\n    }\n    return nearestPoint;\n}\n","// Copyright (c) 2015-present Mattermost, Inc. All Rights Reserved.\n// See LICENSE.txt for license information.\n\nimport PropTypes from 'prop-types';\nimport React from 'react';\n\nimport ExternalImage from 'components/external_image';\nimport SizeAwareImage from 'components/size_aware_image';\n\nimport {PostTypes} from 'utils/constants.jsx';\nimport {useSafeUrl} from 'utils/url';\nimport {isSystemMessage} from 'utils/post_utils.jsx';\n\nimport {getNearestPoint} from './get_nearest_point';\n\nconst DIMENSIONS_NEAREST_POINT_IMAGE = {\n    height: 80,\n    width: 80,\n};\n\nexport default class PostAttachmentOpenGraph extends React.PureComponent {\n    static propTypes = {\n\n        /**\n         * The link to display the open graph data for\n         */\n        link: PropTypes.string.isRequired,\n\n        /**\n         * The ID of the current user\n         */\n        currentUserId: PropTypes.string,\n\n        /**\n         * The post where this link is included\n         */\n        post: PropTypes.object,\n\n        /**\n         * The open graph data to render\n         */\n        openGraphData: PropTypes.object,\n\n        /**\n         * Whether or not the server has link previews enabled.\n         */\n        enableLinkPreviews: PropTypes.bool.isRequired,\n\n        /**\n         * Whether or not the user has link previews enabled.\n         */\n        previewEnabled: PropTypes.bool.isRequired,\n\n        /**\n         * Whether or not the image in the OpenGraph preview has been collapsed.\n         */\n        isEmbedVisible: PropTypes.bool,\n\n        toggleEmbedVisibility: PropTypes.func.isRequired,\n\n        actions: PropTypes.shape({\n            editPost: PropTypes.func.isRequired,\n        }).isRequired,\n    }\n\n    getImageMetadata = (imageUrl) => {\n        if (!imageUrl) {\n            return null;\n        }\n\n        const imagesMetadata = this.props.post.metadata.images;\n        if (!imagesMetadata) {\n            return null;\n        }\n\n        return imagesMetadata[imageUrl];\n    }\n\n    isLargeImage = (dimensions) => {\n        if (!dimensions) {\n            return false;\n        }\n\n        const {height, width} = dimensions;\n\n        const largeImageMinRatio = 16 / 9;\n        const largeImageMinWidth = 150;\n\n        const imageRatio = width / height;\n\n        return width >= largeImageMinWidth && imageRatio >= largeImageMinRatio;\n    }\n\n    renderImageToggle() {\n        return (\n            <button\n                className={'style--none post__embed-visibility color--link'}\n                data-expanded={this.props.isEmbedVisible}\n                aria-label='Toggle Embed Visibility'\n                onClick={this.props.toggleEmbedVisibility}\n            />\n        );\n    }\n\n    renderLargeImage(imageUrl, imageMetadata) {\n        if (!this.props.isEmbedVisible) {\n            return null;\n        }\n\n        return (\n            <ExternalImage\n                src={imageUrl}\n                imageMetadata={imageMetadata}\n            >\n                {(safeImageUrl) => (\n                    <SizeAwareImage\n                        className='attachment__image attachment__image--opengraph large_image'\n                        src={safeImageUrl}\n                        dimensions={imageMetadata}\n                    />\n                )}\n            </ExternalImage>\n        );\n    }\n\n    renderSmallImage(imageUrl, imageMetadata) {\n        if (!this.props.isEmbedVisible) {\n            return null;\n        }\n\n        return (\n            <div className='attachment__image__container--opengraph'>\n                <ExternalImage\n                    src={imageUrl}\n                    imageMetadata={imageMetadata}\n                >\n                    {(safeImageUrl) => (\n                        <SizeAwareImage\n                            className='attachment__image attachment__image--opengraph'\n                            src={safeImageUrl}\n                            dimensions={imageMetadata}\n                        />\n                    )}\n                </ExternalImage>\n            </div>\n        );\n    }\n\n    truncateText(text) {\n        const maxLength = 300;\n        const ellipsis = '...';\n\n        if (text && text.length > maxLength) {\n            return text.substring(0, maxLength - ellipsis.length) + ellipsis;\n        }\n        return text;\n    }\n\n    handleRemovePreview = async () => {\n        const props = Object.assign({}, this.props.post.props);\n        props[PostTypes.REMOVE_LINK_PREVIEW] = 'true';\n\n        const patchedPost = ({\n            id: this.props.post.id,\n            props,\n        });\n\n        return this.props.actions.editPost(patchedPost);\n    }\n\n    hasPreviewBeenRemoved() {\n        const {post} = this.props;\n\n        if (!post || !post.props) {\n            return false;\n        }\n\n        return post.props[PostTypes.REMOVE_LINK_PREVIEW] === 'true';\n    }\n\n    render() {\n        if (!this.props.previewEnabled || !this.props.enableLinkPreviews) {\n            return null;\n        }\n\n        if (!this.props.post || isSystemMessage(this.props.post)) {\n            return null;\n        }\n\n        if (this.hasPreviewBeenRemoved()) {\n            return null;\n        }\n\n        const data = this.props.openGraphData;\n        if (!data) {\n            return null;\n        }\n\n        const imageUrl = getBestImageUrl(data, this.props.post.metadata.images);\n        const imageMetadata = this.getImageMetadata(imageUrl);\n        const hasLargeImage = this.isLargeImage(imageMetadata);\n\n        let removePreviewButton;\n        if (this.props.currentUserId === this.props.post.user_id) {\n            removePreviewButton = (\n                <button\n                    id='removePreviewButton'\n                    type='button'\n                    className='btn-close'\n                    aria-label='Close'\n                    onClick={this.handleRemovePreview}\n                >\n                    <span aria-hidden='true'>{'×'}</span>\n                </button>\n            );\n        }\n\n        let body;\n        if (data.description || imageUrl) {\n            body = (\n                <div className={'attachment__body attachment__body--opengraph'}>\n                    <div>\n                        {this.truncateText(data.description)}\n                        {' '}\n                        {imageUrl && hasLargeImage && this.renderImageToggle()}\n                    </div>\n                    {(imageUrl && hasLargeImage) && this.renderLargeImage(imageUrl, imageMetadata)}\n                </div>\n            );\n        }\n\n        return (\n            <div className='attachment attachment--opengraph'>\n                <div className='attachment__content'>\n                    <div className={'clearfix attachment__container attachment__container--opengraph'}>\n                        <div className={'attachment__body__wrap attachment__body__wrap--opengraph'}>\n                            <span className='sitename'>{this.truncateText(data.site_name)}</span>\n                            {removePreviewButton}\n                            <h1 className={'attachment__title attachment__title--opengraph' + (data.title ? '' : ' is-url')}>\n                                <a\n                                    className='attachment__title-link attachment__title-link--opengraph'\n                                    href={useSafeUrl(data.url || this.props.link)}\n                                    target='_blank'\n                                    rel='noopener noreferrer'\n                                    title={data.title || data.url || this.props.link}\n                                >\n                                    {this.truncateText(data.title || data.url || this.props.link)}\n                                </a>\n                            </h1>\n                            {body}\n                        </div>\n                        {(imageUrl && !hasLargeImage) && this.renderSmallImage(imageUrl, imageMetadata)}\n                    </div>\n                </div>\n            </div>\n        );\n    }\n}\n\nexport function getBestImageUrl(openGraphData, imagesMetadata) {\n    if (!openGraphData || !openGraphData.images || openGraphData.images.length === 0) {\n        return null;\n    }\n\n    // Get the dimensions from the post metadata if they weren't provided by the website as part of the OpenGraph data\n    const images = openGraphData.images.map((image) => {\n        const imageUrl = image.secure_url || image.url;\n\n        if ((image.width && image.height) || !(imagesMetadata && imagesMetadata[imageUrl])) {\n            // The image already includes dimensions or we don't have the missing dimensions\n            return image;\n        }\n\n        return {\n            ...image,\n            height: image.height || imagesMetadata[imageUrl].height,\n            width: image.width || imagesMetadata[imageUrl].width,\n        };\n    });\n\n    const bestImage = getNearestPoint(DIMENSIONS_NEAREST_POINT_IMAGE, images, 'width', 'height');\n    return bestImage.secure_url || bestImage.url;\n}\n","// Copyright (c) 2015-present Mattermost, Inc. All Rights Reserved.\n// See LICENSE.txt for license information.\n\nimport {connect} from 'react-redux';\nimport {bindActionCreators} from 'redux';\nimport {getConfig} from 'mattermost-redux/selectors/entities/general';\nimport {getOpenGraphMetadataForUrl} from 'mattermost-redux/selectors/entities/posts';\nimport {getBool} from 'mattermost-redux/selectors/entities/preferences';\nimport {getCurrentUserId} from 'mattermost-redux/selectors/entities/users';\n\nimport {editPost} from 'actions/views/posts';\n\nimport {Preferences} from 'utils/constants';\n\nimport PostAttachmentOpenGraph from './post_attachment_opengraph.jsx';\n\nfunction mapStateToProps(state, ownProps) {\n    const config = getConfig(state);\n\n    return {\n        currentUserId: getCurrentUserId(state),\n        enableLinkPreviews: config.EnableLinkPreviews === 'true',\n        openGraphData: getOpenGraphMetadataForUrl(state, ownProps.link),\n        previewEnabled: getBool(state, Preferences.CATEGORY_DISPLAY_SETTINGS, Preferences.LINK_PREVIEW_DISPLAY, true),\n    };\n}\n\nfunction mapDispatchToProps(dispatch) {\n    return {\n        actions: bindActionCreators({\n            editPost,\n        }, dispatch),\n    };\n}\n\nexport default connect(mapStateToProps, mapDispatchToProps)(PostAttachmentOpenGraph);\n","// Copyright (c) 2015-present Mattermost, Inc. All Rights Reserved.\n// See LICENSE.txt for license information.\n\nimport PropTypes from 'prop-types';\nimport React from 'react';\n\nimport ExternalImage from 'components/external_image';\nimport SizeAwareImage from 'components/size_aware_image';\nimport ViewImageModal from 'components/view_image';\n\nexport default class PostImage extends React.PureComponent {\n    static propTypes = {\n        imageMetadata: PropTypes.object.isRequired,\n        link: PropTypes.string.isRequired,\n        post: PropTypes.object.isRequired,\n    }\n\n    constructor(props) {\n        super(props);\n\n        this.state = {\n            showModal: false,\n        };\n    }\n\n    showModal = (e) => {\n        e.preventDefault();\n\n        this.setState({showModal: true});\n    }\n\n    hideModal = () => {\n        this.setState({showModal: false});\n    }\n\n    render() {\n        return (\n            <div className='post__embed-container'>\n                <ExternalImage\n                    src={this.props.link}\n                    imageMetadata={this.props.imageMetadata}\n                >\n                    {(safeLink) => (\n                        <React.Fragment>\n                            <SizeAwareImage\n                                className='img-div attachment__image cursor--pointer'\n                                src={safeLink}\n                                dimensions={this.props.imageMetadata}\n                                showLoader={true}\n                                onClick={this.showModal}\n                            />\n                            <ViewImageModal\n                                show={this.state.showModal}\n                                onModalDismissed={this.hideModal}\n                                post={this.props.post}\n                                startIndex={0}\n                                fileInfos={[{\n                                    has_preview_image: false,\n                                    link: safeLink,\n                                    extension: this.props.imageMetadata.format,\n                                }]}\n                            />\n                        </React.Fragment>\n                    )}\n                </ExternalImage>\n            </div>\n        );\n    }\n}\n","// Copyright (c) 2015-present Mattermost, Inc. All Rights Reserved.\n// See LICENSE.txt for license information.\n\nimport PostImage from './post_image.jsx';\n\nexport default PostImage;\n","// Copyright (c) 2015-present Mattermost, Inc. All Rights Reserved.\n// See LICENSE.txt for license information.\n\nimport PropTypes from 'prop-types';\nimport React from 'react';\n\nimport ExternalImage from 'components/external_image';\n\nconst ytRegex = /(?:http|https):\\/\\/(?:www\\.|m\\.)?(?:(?:youtube\\.com\\/(?:(?:v\\/)|(?:(?:watch|embed\\/watch)(?:\\/|.*v=))|(?:embed\\/)|(?:user\\/[^/]+\\/u\\/[0-9]\\/)))|(?:youtu\\.be\\/))([^#&?]*)/;\n\nexport default class YoutubeVideo extends React.PureComponent {\n    static propTypes = {\n        link: PropTypes.string.isRequired,\n        show: PropTypes.bool.isRequired,\n        metadata: PropTypes.object,\n    }\n\n    constructor(props) {\n        super(props);\n\n        this.state = {\n            playing: false,\n        };\n    }\n\n    UNSAFE_componentWillMount() { // eslint-disable-line camelcase\n        this.updateStateFromProps(this.props);\n    }\n\n    UNSAFE_componentWillReceiveProps(nextProps) { // eslint-disable-line camelcase\n        this.updateStateFromProps(nextProps);\n    }\n\n    updateStateFromProps = (props) => {\n        const link = props.link;\n\n        const match = link.trim().match(ytRegex);\n        if (!match || match[1].length !== 11) {\n            return;\n        }\n\n        if (props.show === false) {\n            this.stop();\n        }\n\n        this.setState({\n            videoId: match[1],\n            time: this.handleYoutubeTime(link),\n        });\n    }\n\n    handleYoutubeTime(link) {\n        const timeRegex = /[\\\\?&](t|start|time_continue)=([0-9]+h)?([0-9]+m)?([0-9]+s?)/;\n\n        const time = link.match(timeRegex);\n        if (!time || !time[0]) {\n            return '';\n        }\n\n        const hours = time[2] ? time[2].match(/([0-9]+)h/) : null;\n        const minutes = time[3] ? time[3].match(/([0-9]+)m/) : null;\n        const seconds = time[4] ? time[4].match(/([0-9]+)s?/) : null;\n\n        let ticks = 0;\n\n        if (hours && hours[1]) {\n            ticks += parseInt(hours[1], 10) * 3600;\n        }\n\n        if (minutes && minutes[1]) {\n            ticks += parseInt(minutes[1], 10) * 60;\n        }\n\n        if (seconds && seconds[1]) {\n            ticks += parseInt(seconds[1], 10);\n        }\n\n        return '&start=' + ticks.toString();\n    }\n\n    play = () => {\n        this.setState({playing: true});\n    }\n\n    stop = () => {\n        this.setState({playing: false});\n    }\n\n    render() {\n        const {metadata} = this.props;\n\n        const header = (\n            <h4>\n                <span className='video-type'>{'YouTube - '}</span>\n                <span className='video-title'>\n                    <a\n                        href={this.props.link}\n                        target='blank'\n                        rel='noopener noreferrer'\n                    >\n                        {metadata.title}\n                    </a>\n                </span>\n            </h4>\n        );\n\n        let content;\n\n        if (this.state.playing) {\n            content = (\n                <iframe\n                    src={'https://www.youtube.com/embed/' + this.state.videoId + '?autoplay=1&autohide=1&border=0&wmode=opaque&fs=1&enablejsapi=1' + this.state.time}\n                    width='480px'\n                    height='360px'\n                    type='text/html'\n                    frameBorder='0'\n                    allowFullScreen='allowfullscreen'\n                />\n            );\n        } else {\n            const image = metadata.images[0];\n\n            content = (\n                <div className='embed-responsive video-div__placeholder'>\n                    <div className='video-thumbnail__container'>\n                        <ExternalImage src={image.secure_url || image.url}>\n                            {(safeUrl) => (\n                                <img\n                                    src={safeUrl}\n                                    alt='youtube video thumbnail'\n                                    className='video-thumbnail'\n                                />\n                            )}\n                        </ExternalImage>\n                        <div className='block'>\n                            <span className='play-button'><span/></span>\n                        </div>\n                    </div>\n                </div>\n            );\n        }\n\n        return (\n            <div\n                className='post__embed-container'\n            >\n                <div>\n                    {header}\n                    <div\n                        className='video-div embed-responsive-item'\n                        onClick={this.play}\n                    >\n                        {content}\n                    </div>\n                </div>\n            </div>\n        );\n    }\n\n    static isYoutubeLink(link) {\n        return link.trim().match(ytRegex);\n    }\n}\n","// Copyright (c) 2015-present Mattermost, Inc. All Rights Reserved.\n// See LICENSE.txt for license information.\n\nimport {connect} from 'react-redux';\nimport {getCurrentChannelId} from 'mattermost-redux/selectors/entities/channels';\nimport {getConfig} from 'mattermost-redux/selectors/entities/general';\nimport {getOpenGraphMetadataForUrl} from 'mattermost-redux/selectors/entities/posts';\n\nimport YoutubeVideo from './youtube_video';\n\nfunction mapStateToProps(state, ownProps) {\n    const config = getConfig(state);\n\n    return {\n        currentChannelId: getCurrentChannelId(state),\n        googleDeveloperKey: config.GoogleDeveloperKey,\n        hasImageProxy: config.HasImageProxy === 'true',\n        metadata: getOpenGraphMetadataForUrl(state, ownProps.link),\n    };\n}\n\nexport default connect(mapStateToProps)(YoutubeVideo);\n","// Copyright (c) 2015-present Mattermost, Inc. All Rights Reserved.\n// See LICENSE.txt for license information.\n\nimport PropTypes from 'prop-types';\nimport React from 'react';\n\nimport MessageAttachmentList from 'components/post_view/message_attachments/message_attachment_list';\nimport PostAttachmentOpenGraph from 'components/post_view/post_attachment_opengraph';\nimport PostImage from 'components/post_view/post_image';\nimport YoutubeVideo from 'components/youtube_video';\n\nexport default class PostBodyAdditionalContent extends React.PureComponent {\n    static propTypes = {\n\n        /**\n         * The post to render the content of\n         */\n        post: PropTypes.object.isRequired,\n\n        /**\n         * The post's message\n         */\n        children: PropTypes.element,\n\n        /**\n         * Flag passed down to PostBodyAdditionalContent for determining if post embed is visible\n         */\n        isEmbedVisible: PropTypes.bool,\n\n        /**\n         * Options specific to text formatting\n         */\n        options: PropTypes.object,\n\n        actions: PropTypes.shape({\n            toggleEmbedVisibility: PropTypes.func.isRequired,\n        }).isRequired,\n    }\n\n    toggleEmbedVisibility = () => {\n        this.props.actions.toggleEmbedVisibility(this.props.post.id);\n    }\n\n    getEmbed = () => {\n        const {metadata} = this.props.post;\n        if (!metadata || !metadata.embeds || metadata.embeds.length === 0) {\n            return null;\n        }\n\n        return metadata.embeds[0];\n    }\n\n    isEmbedToggleable = (embed) => {\n        return embed.type === 'image' || (embed.type === 'opengraph' && YoutubeVideo.isYoutubeLink(embed.url));\n    }\n\n    renderEmbed = (embed) => {\n        switch (embed.type) {\n        case 'image':\n            if (!this.props.isEmbedVisible) {\n                return null;\n            }\n\n            return (\n                <PostImage\n                    imageMetadata={this.props.post.metadata.images[embed.url]}\n                    link={embed.url}\n                    post={this.props.post}\n                />\n            );\n\n        case 'message_attachment': {\n            let attachments = [];\n            if (this.props.post.props && this.props.post.props.attachments) {\n                attachments = this.props.post.props.attachments;\n            }\n\n            return (\n                <MessageAttachmentList\n                    attachments={attachments}\n                    postId={this.props.post.id}\n                    options={this.props.options}\n                    imagesMetadata={this.props.post.metadata.images}\n                />\n            );\n        }\n\n        case 'opengraph':\n            if (YoutubeVideo.isYoutubeLink(embed.url)) {\n                if (!this.props.isEmbedVisible) {\n                    return null;\n                }\n\n                return (\n                    <YoutubeVideo\n                        link={embed.url}\n                        show={this.props.isEmbedVisible}\n                    />\n                );\n            }\n\n            return (\n                <PostAttachmentOpenGraph\n                    link={embed.url}\n                    isEmbedVisible={this.props.isEmbedVisible}\n                    post={this.props.post}\n                    toggleEmbedVisibility={this.toggleEmbedVisibility}\n                />\n            );\n\n        default:\n            return null;\n        }\n    }\n\n    renderToggle = (prependToggle) => {\n        return (\n            <button\n                key='toggle'\n                className={`style--none post__embed-visibility color--link ${prependToggle ? 'pull-left' : ''}`}\n                data-expanded={this.props.isEmbedVisible}\n                aria-label='Toggle Embed Visibility'\n                onClick={this.toggleEmbedVisibility}\n            />\n        );\n    }\n\n    render() {\n        const embed = this.getEmbed();\n\n        if (embed) {\n            const toggleable = this.isEmbedToggleable(embed);\n            const prependToggle = (/^\\s*https?:\\/\\/.*$/).test(this.props.post.message);\n\n            return (\n                <div>\n                    {(toggleable && prependToggle) && this.renderToggle(true)}\n                    {this.props.children}\n                    {(toggleable && !prependToggle) && this.renderToggle(false)}\n                    {this.renderEmbed(embed)}\n                </div>\n            );\n        }\n\n        return this.props.children;\n    }\n}\n","// Copyright (c) 2015-present Mattermost, Inc. All Rights Reserved.\n// See LICENSE.txt for license information.\n\nimport {connect} from 'react-redux';\nimport {bindActionCreators} from 'redux';\n\nimport {toggleEmbedVisibility} from 'actions/post_actions';\n\nimport {isEmbedVisible} from 'selectors/posts';\n\nimport PostBodyAdditionalContent from './post_body_additional_content';\n\nfunction mapStateToProps(state, ownProps) {\n    return {\n        isEmbedVisible: isEmbedVisible(state, ownProps.post.id),\n    };\n}\n\nfunction mapDispatchToProps(dispatch) {\n    return {\n        actions: bindActionCreators({\n            toggleEmbedVisibility,\n        }, dispatch),\n    };\n}\n\nexport default connect(mapStateToProps, mapDispatchToProps)(PostBodyAdditionalContent);\n","// Copyright (c) 2015-present Mattermost, Inc. All Rights Reserved.\n// See LICENSE.txt for license information.\n\nimport PropTypes from 'prop-types';\nimport React from 'react';\nimport {FormattedMessage} from 'react-intl';\nimport {Posts} from 'mattermost-redux/constants';\n\nimport * as PostUtils from 'utils/post_utils';\nimport * as Utils from 'utils/utils';\n\nimport PostMarkdown from 'components/post_markdown';\nimport Pluggable from 'plugins/pluggable';\nimport ShowMore from 'components/post_view/show_more';\n\nexport default class PostMessageView extends React.PureComponent {\n    static propTypes = {\n\n        /*\n         * The post to render the message for\n         */\n        post: PropTypes.object.isRequired,\n\n        /*\n         * Set to enable Markdown formatting\n         */\n        enableFormatting: PropTypes.bool,\n\n        /*\n         * Options specific to text formatting\n         */\n        options: PropTypes.object,\n\n        /**\n         * Set to render post body compactly\n         */\n        compactDisplay: PropTypes.bool,\n\n        /**\n         * Flags if the post_message_view is for the RHS (Reply).\n         */\n        isRHS: PropTypes.bool,\n\n        /**\n         * Whether or not the RHS is visible\n         */\n        isRHSOpen: PropTypes.bool,\n\n        /**\n         * Whether or not the RHS is expanded\n         */\n        isRHSExpanded: PropTypes.bool,\n\n        /*\n         * Logged in user's theme\n         */\n        theme: PropTypes.object.isRequired,\n\n        /*\n         * Post type components from plugins\n         */\n        pluginPostTypes: PropTypes.object,\n    };\n\n    static defaultProps = {\n        options: {},\n        isRHS: false,\n        pluginPostTypes: {},\n    };\n\n    constructor(props) {\n        super(props);\n\n        this.state = {\n            collapse: true,\n            hasOverflow: false,\n            checkOverflow: 0,\n        };\n\n        this.imageProps = {\n            onImageLoaded: this.handleHeightReceived,\n        };\n    }\n\n    handleHeightReceived = (height) => {\n        if (height > 0) {\n            // Increment checkOverflow to indicate change in height\n            // and recompute textContainer height at ShowMore component\n            // and see whether overflow text of show more/less is necessary or not.\n            this.setState((prevState) => {\n                return {checkOverflow: prevState.checkOverflow + 1};\n            });\n        }\n    };\n\n    renderDeletedPost() {\n        return (\n            <p>\n                <FormattedMessage\n                    id='post_body.deleted'\n                    defaultMessage='(message deleted)'\n                />\n            </p>\n        );\n    }\n\n    renderEditedIndicator() {\n        if (!PostUtils.isEdited(this.props.post)) {\n            return null;\n        }\n\n        return (\n            <span\n                id={`postEdited_${this.props.post.id}`}\n                className='post-edited__indicator'\n            >\n                <FormattedMessage\n                    id='post_message_view.edited'\n                    defaultMessage='(edited)'\n                />\n            </span>\n        );\n    }\n\n    render() {\n        const {\n            post,\n            enableFormatting,\n            options,\n            pluginPostTypes,\n            compactDisplay,\n            isRHS,\n            theme,\n        } = this.props;\n\n        if (post.state === Posts.POST_DELETED) {\n            return this.renderDeletedPost();\n        }\n\n        if (!enableFormatting) {\n            return <span>{post.message}</span>;\n        }\n\n        const postType = post.props && post.props.type ? post.props.type : post.type;\n\n        if (pluginPostTypes.hasOwnProperty(postType)) {\n            const PluginComponent = pluginPostTypes[postType].component;\n            return (\n                <PluginComponent\n                    post={post}\n                    compactDisplay={compactDisplay}\n                    isRHS={isRHS}\n                    theme={theme}\n                />\n            );\n        }\n\n        let message = post.message;\n        const isEphemeral = Utils.isPostEphemeral(post);\n        if (compactDisplay && isEphemeral) {\n            const visibleMessage = Utils.localizeMessage('post_info.message.visible.compact', ' (Only visible to you)');\n            message = message.concat(visibleMessage);\n        }\n\n        return (\n            <ShowMore\n                checkOverflow={this.state.checkOverflow}\n                text={message}\n            >\n                <div\n                    aria-readonly='true'\n                    tabIndex='0'\n                    id={`postMessageText_${post.id}`}\n                    className='post-message__text'\n                    onClick={Utils.handleFormattedTextClick}\n                >\n                    <PostMarkdown\n                        message={message}\n                        imageProps={this.imageProps}\n                        isRHS={isRHS}\n                        options={options}\n                        post={post}\n                        channelId={post.channel_id}\n                    />\n                </div>\n                {this.renderEditedIndicator()}\n                <Pluggable\n                    pluggableName='PostMessageAttachment'\n                    postId={post.id}\n                    onHeightChange={this.handleHeightReceived}\n                />\n            </ShowMore>\n        );\n    }\n}\n","// Copyright (c) 2015-present Mattermost, Inc. All Rights Reserved.\n// See LICENSE.txt for license information.\n\nimport {connect} from 'react-redux';\nimport {Preferences} from 'mattermost-redux/constants';\nimport {getTheme, getBool} from 'mattermost-redux/selectors/entities/preferences';\n\nimport {getIsRhsExpanded, getIsRhsOpen} from 'selectors/rhs';\n\nimport PostMessageView from './post_message_view.jsx';\n\nfunction mapStateToProps(state) {\n    return {\n        enableFormatting: getBool(state, Preferences.CATEGORY_ADVANCED_SETTINGS, 'formatting', true),\n        isRHSExpanded: getIsRhsExpanded(state),\n        isRHSOpen: getIsRhsOpen(state),\n        pluginPostTypes: state.plugins.postTypes,\n        theme: getTheme(state),\n    };\n}\n\nexport default connect(mapStateToProps)(PostMessageView);\n","// Copyright (c) 2015-present Mattermost, Inc. All Rights Reserved.\n// See LICENSE.txt for license information.\n\nimport React from 'react';\nimport {Posts} from 'mattermost-redux/constants';\n\nimport PostBodyAdditionalContent from 'components/post_view/post_body_additional_content';\nimport PostMessageView from 'components/post_view/post_message_view';\n\nexport default function MessageWithAdditionalContent({post, previewCollapsed, previewEnabled, isEmbedVisible, pluginPostTypes}) {\n    const hasPlugin = post.type && pluginPostTypes.hasOwnProperty(post.type);\n    let msg;\n    const messageWrapper = (\n        <PostMessageView\n            post={post}\n            isRHS={true}\n            hasMention={true}\n        />\n    );\n    if (post.state === Posts.POST_DELETED || hasPlugin) {\n        msg = messageWrapper;\n    } else {\n        msg = (\n            <PostBodyAdditionalContent\n                post={post}\n                previewCollapsed={previewCollapsed}\n                previewEnabled={previewEnabled}\n                isEmbedVisible={isEmbedVisible}\n            >\n                {messageWrapper}\n            </PostBodyAdditionalContent>\n        );\n    }\n    return msg;\n}\n","// Copyright (c) 2015-present Mattermost, Inc. All Rights Reserved.\n// See LICENSE.txt for license information.\n\nimport React from 'react';\nimport {FormattedMessage} from 'react-intl';\n\nexport default class InfoSmallIcon extends React.PureComponent {\n    render() {\n        return (\n            <span {...this.props}>\n                <FormattedMessage\n                    id='generic_icons.info'\n                    defaultMessage='Info Icon'\n                >\n                    {(ariaLabel) => (\n                        <svg\n                            className='svg-text-color'\n                            aria-label={ariaLabel}\n                            width='24px'\n                            height='24px'\n                            viewBox='0 0 24 24'\n                            version='1.1'\n                        >\n                            <g\n                                stroke='none'\n                                strokeWidth='1'\n                                fill='inherit'\n                                fillRule='evenodd'\n                            >\n                                <g\n                                    transform='translate(-1015.000000, -516.000000)'\n                                    fill='inherit'\n                                >\n                                    <path d='M1027,540 C1020.37258,540 1015,534.627417 1015,528 C1015,521.372583 1020.37258,516 1027,516 C1033.62742,516 1039,521.372583 1039,528 C1039,534.627417 1033.62742,540 1027,540 Z M1027,527 C1025.89543,527 1025,527.895431 1025,529 L1025,533 C1025,534.104569 1025.89543,535 1027,535 C1028.10457,535 1029,534.104569 1029,533 L1029,529 C1029,527.895431 1028.10457,527 1027,527 Z M1027,525 C1028.10457,525 1029,524.104569 1029,523 C1029,521.895431 1028.10457,521 1027,521 C1025.89543,521 1025,521.895431 1025,523 C1025,524.104569 1025.89543,525 1027,525 Z'/>\n                                </g>\n                            </g>\n                        </svg>\n                    )}\n                </FormattedMessage>\n            </span>\n        );\n    }\n}\n","// Copyright (c) 2015-present Mattermost, Inc. All Rights Reserved.\n// See LICENSE.txt for license information.\n\nimport PropTypes from 'prop-types';\nimport React, {PureComponent} from 'react';\nimport {OverlayTrigger} from 'react-bootstrap';\n\nimport {imageURLForUser, isMobile} from 'utils/utils.jsx';\n\nimport ProfilePopover from 'components/profile_popover';\nimport BotBadge from 'components/widgets/badges/bot_badge.jsx';\n\nexport default class UserProfile extends PureComponent {\n    static propTypes = {\n        disablePopover: PropTypes.bool,\n        displayName: PropTypes.string,\n        hasMention: PropTypes.bool,\n        hideStatus: PropTypes.bool,\n        isBusy: PropTypes.bool,\n        isRHS: PropTypes.bool,\n        overwriteName: PropTypes.node,\n        user: PropTypes.object,\n        userId: PropTypes.string,\n    };\n\n    static defaultProps = {\n        disablePopover: false,\n        hasMention: false,\n        hideStatus: false,\n        isRHS: false,\n        overwriteImage: '',\n        overwriteName: '',\n    };\n\n    hideProfilePopover = () => {\n        this.refs.overlay.hide();\n    }\n\n    render() {\n        const {\n            disablePopover,\n            displayName,\n            isBusy,\n            isRHS,\n            hasMention,\n            hideStatus,\n            overwriteName,\n            user,\n            userId,\n        } = this.props;\n\n        const name = overwriteName || displayName || '...';\n        if (disablePopover) {\n            return <div className='user-popover'>{name}</div>;\n        }\n\n        let placement = 'right';\n        if (isRHS && !isMobile()) {\n            placement = 'left';\n        }\n\n        let profileImg = '';\n        if (user) {\n            profileImg = imageURLForUser(user);\n        }\n\n        return (\n            <React.Fragment>\n                <OverlayTrigger\n                    ref='overlay'\n                    trigger='click'\n                    placement={placement}\n                    rootClose={true}\n                    overlay={\n                        <ProfilePopover\n                            userId={userId}\n                            src={profileImg}\n                            isBusy={isBusy}\n                            hide={this.hideProfilePopover}\n                            hideStatus={hideStatus}\n                            isRHS={isRHS}\n                            hasMention={hasMention}\n                        />\n                    }\n                >\n                    <button\n                        aria-label={name.toLowerCase()}\n                        className='user-popover style--none'\n                    >\n                        {name}\n                    </button>\n                </OverlayTrigger>\n                <BotBadge\n                    show={Boolean(user && user.is_bot)}\n                    className='badge-popoverlist'\n                />\n            </React.Fragment>\n        );\n    }\n}\n","// Copyright (c) 2015-present Mattermost, Inc. All Rights Reserved.\n// See LICENSE.txt for license information.\n\nimport {connect} from 'react-redux';\n\nimport {getUser, makeGetDisplayName} from 'mattermost-redux/selectors/entities/users';\n\nimport UserProfile from './user_profile';\n\nfunction makeMapStateToProps() {\n    const getDisplayName = makeGetDisplayName();\n\n    return (state, ownProps) => {\n        return {\n            displayName: getDisplayName(state, ownProps.userId),\n            user: getUser(state, ownProps.userId),\n        };\n    };\n}\n\nexport default connect(makeMapStateToProps)(UserProfile);\n","// Copyright (c) 2015-present Mattermost, Inc. All Rights Reserved.\n// See LICENSE.txt for license information.\n\nimport PropTypes from 'prop-types';\nimport React from 'react';\nimport {FormattedMessage, intlShape} from 'react-intl';\nimport {OverlayTrigger, Tooltip} from 'react-bootstrap';\nimport {Posts} from 'mattermost-redux/constants/index';\nimport {\n    isPostEphemeral,\n    isPostPendingOrFailed,\n} from 'mattermost-redux/utils/post_utils';\n\nimport Constants, {Locations, A11yCustomEventTypes} from 'utils/constants.jsx';\nimport * as PostUtils from 'utils/post_utils.jsx';\nimport {isMobile} from 'utils/utils.jsx';\nimport DotMenu from 'components/dot_menu';\nimport FileAttachmentListContainer from 'components/file_attachment_list';\nimport PostProfilePicture from 'components/post_profile_picture';\nimport FailedPostOptions from 'components/post_view/failed_post_options';\nimport PostFlagIcon from 'components/post_view/post_flag_icon';\nimport PostTime from 'components/post_view/post_time';\nimport PostReaction from 'components/post_view/post_reaction';\nimport ReactionList from 'components/post_view/reaction_list';\nimport MessageWithAdditionalContent from 'components/message_with_additional_content';\nimport BotBadge from 'components/widgets/badges/bot_badge.jsx';\nimport Badge from 'components/widgets/badges/badge.jsx';\nimport InfoSmallIcon from 'components/svg/info_small_icon';\n\nimport UserProfile from 'components/user_profile';\n\nexport default class RhsComment extends React.PureComponent {\n    static propTypes = {\n        post: PropTypes.object,\n        teamId: PropTypes.string.isRequired,\n        currentUserId: PropTypes.string.isRequired,\n        compactDisplay: PropTypes.bool,\n        author: PropTypes.string,\n        reactions: PropTypes.object,\n        isFlagged: PropTypes.bool,\n        isBusy: PropTypes.bool,\n        removePost: PropTypes.func.isRequired,\n        previewCollapsed: PropTypes.string.isRequired,\n        previewEnabled: PropTypes.bool.isRequired,\n        isEmbedVisible: PropTypes.bool,\n        enableEmojiPicker: PropTypes.bool.isRequired,\n        enablePostUsernameOverride: PropTypes.bool.isRequired,\n        isReadOnly: PropTypes.bool.isRequired,\n        pluginPostTypes: PropTypes.object,\n        channelIsArchived: PropTypes.bool.isRequired,\n        isConsecutivePost: PropTypes.bool,\n        handleCardClick: PropTypes.func,\n    };\n\n    static contextTypes = {\n        intl: intlShape.isRequired,\n    };\n\n    constructor(props) {\n        super(props);\n\n        this.postRef = React.createRef();\n\n        this.state = {\n            showEmojiPicker: false,\n            dropdownOpened: false,\n            hover: false,\n            a11yActive: false,\n            currentAriaLabel: '',\n        };\n    }\n\n    componentDidMount() {\n        if (this.postRef.current) {\n            this.postRef.current.addEventListener(A11yCustomEventTypes.ACTIVATE, this.handleA11yActivateEvent);\n            this.postRef.current.addEventListener(A11yCustomEventTypes.DEACTIVATE, this.handleA11yDeactivateEvent);\n        }\n    }\n    componentWillUnmount() {\n        if (this.postRef.current) {\n            this.postRef.current.removeEventListener(A11yCustomEventTypes.ACTIVATE, this.handleA11yActivateEvent);\n            this.postRef.current.removeEventListener(A11yCustomEventTypes.DEACTIVATE, this.handleA11yDeactivateEvent);\n        }\n    }\n\n    componentDidUpdate() {\n        if (this.state.a11yActive) {\n            this.postRef.current.dispatchEvent(new Event(A11yCustomEventTypes.UPDATE));\n        }\n    }\n\n    removePost = () => {\n        this.props.removePost(this.props.post);\n    };\n\n    createRemovePostButton = () => {\n        return (\n            <button\n                className='post__remove theme color--link style--none'\n                type='button'\n                onClick={this.removePost}\n            >\n                {'×'}\n            </button>\n        );\n    };\n\n    renderPostTime = () => {\n        const post = this.props.post;\n\n        const isPermalink = !(Posts.POST_DELETED === post.state || isPostPendingOrFailed(post));\n\n        return (\n            <PostTime\n                isPermalink={isPermalink}\n                eventTime={post.create_at}\n                postId={post.id}\n                location={Locations.RHS_COMMENT}\n            />\n        );\n    };\n\n    toggleEmojiPicker = () => {\n        const showEmojiPicker = !this.state.showEmojiPicker;\n\n        this.setState({\n            showEmojiPicker,\n        });\n    };\n\n    getClassName = (post, isSystemMessage) => {\n        let className = 'post post--thread same--root post--comment';\n\n        if (this.props.currentUserId === post.user_id) {\n            className += ' current--user';\n        }\n\n        if (isSystemMessage) {\n            className += ' post--system';\n        }\n\n        if (this.props.compactDisplay) {\n            className += ' post--compact';\n        }\n\n        if (post.is_pinned) {\n            className += ' post--pinned';\n        }\n\n        if (this.state.dropdownOpened || this.state.showEmojiPicker) {\n            className += ' post--hovered';\n        }\n\n        if (this.props.isConsecutivePost) {\n            className += ' same--user';\n        }\n\n        return className;\n    };\n\n    handleDropdownOpened = (isOpened) => {\n        this.setState({\n            dropdownOpened: isOpened,\n        });\n    };\n\n    getDotMenuRef = () => {\n        return this.refs.dotMenu;\n    };\n\n    setHover = () => {\n        this.setState({hover: true});\n    }\n\n    unsetHover = () => {\n        this.setState({hover: false});\n    }\n\n    handleA11yActivateEvent = () => {\n        this.setState({a11yActive: true});\n    }\n\n    handleA11yDeactivateEvent = () => {\n        this.setState({a11yActive: false});\n    }\n\n    handlePostFocus = () => {\n        const {post, author, reactions, isFlagged} = this.props;\n        this.setState({currentAriaLabel: PostUtils.createAriaLabelForPost(post, author, isFlagged, reactions, this.context.intl)});\n    }\n\n    render() {\n        const {post, isConsecutivePost, isReadOnly, channelIsArchived} = this.props;\n\n        const isPostDeleted = post && post.state === Posts.POST_DELETED;\n        const isEphemeral = isPostEphemeral(post);\n        const isSystemMessage = PostUtils.isSystemMessage(post);\n        const fromAutoResponder = PostUtils.fromAutoResponder(post);\n\n        let botIndicator;\n        let profilePicture;\n        let visibleMessage;\n\n        let userProfile = null;\n        if (this.props.compactDisplay || isMobile()) {\n            userProfile = (\n                <UserProfile\n                    userId={post.user_id}\n                    isBusy={this.props.isBusy}\n                    isRHS={true}\n                    hasMention={true}\n                />\n            );\n        }\n\n        if (!isConsecutivePost) {\n            userProfile = (\n                <UserProfile\n                    userId={post.user_id}\n                    isBusy={this.props.isBusy}\n                    isRHS={true}\n                    hasMention={true}\n                />\n            );\n\n            profilePicture = (\n                <PostProfilePicture\n                    compactDisplay={this.props.compactDisplay}\n                    isBusy={this.props.isBusy}\n                    isRHS={true}\n                    post={post}\n                    userId={post.user_id}\n                />\n            );\n\n            if (post.props && post.props.from_webhook) {\n                if (post.props.override_username && this.props.enablePostUsernameOverride) {\n                    userProfile = (\n                        <UserProfile\n                            userId={post.user_id}\n                            hideStatus={true}\n                            overwriteName={post.props.override_username}\n                            disablePopover={true}\n                        />\n                    );\n                } else {\n                    userProfile = (\n                        <UserProfile\n                            userId={post.user_id}\n                            hideStatus={true}\n                            disablePopover={true}\n                        />\n                    );\n                }\n\n                botIndicator = (<BotBadge className='col col__name'/>);\n            } else if (fromAutoResponder) {\n                userProfile = (\n                    <span className='auto-responder'>\n                        <UserProfile\n                            userId={post.user_id}\n                            hideStatus={true}\n                            isBusy={this.props.isBusy}\n                            isRHS={true}\n                            hasMention={true}\n                        />\n                    </span>\n                );\n                botIndicator = (\n                    <Badge className='col col__name'>\n                        <FormattedMessage\n                            id='post_info.auto_responder'\n                            defaultMessage='AUTOMATIC REPLY'\n                        />\n                    </Badge>\n                );\n            } else if (isSystemMessage) {\n                userProfile = (\n                    <UserProfile\n                        overwriteName={\n                            <FormattedMessage\n                                id='post_info.system'\n                                defaultMessage='System'\n                            />\n                        }\n                        overwriteImage={Constants.SYSTEM_MESSAGE_PROFILE_IMAGE}\n                        disablePopover={true}\n                    />\n                );\n\n                visibleMessage = (\n                    <span className='post__visibility'>\n                        <FormattedMessage\n                            id='post_info.message.visible'\n                            defaultMessage='(Only visible to you)'\n                        />\n                    </span>\n                );\n            }\n        }\n\n        let failedPostOptions;\n        let postClass = '';\n\n        if (post.failed) {\n            postClass += ' post-failed';\n            failedPostOptions = <FailedPostOptions post={this.props.post}/>;\n        }\n\n        if (PostUtils.isEdited(this.props.post)) {\n            postClass += ' post--edited';\n        }\n\n        let fileAttachment = null;\n        if (post.file_ids && post.file_ids.length > 0) {\n            fileAttachment = (\n                <FileAttachmentListContainer\n                    post={post}\n                    compactDisplay={this.props.compactDisplay}\n                />\n            );\n        }\n\n        let postReaction;\n        if (!isReadOnly && !isEphemeral && !post.failed && !isSystemMessage && this.props.enableEmojiPicker && !channelIsArchived) {\n            postReaction = (\n                <PostReaction\n                    channelId={post.channel_id}\n                    postId={post.id}\n                    teamId={this.props.teamId}\n                    getDotMenuRef={this.getDotMenuRef}\n                    location={Locations.RHS_COMMENT}\n                    showEmojiPicker={this.state.showEmojiPicker}\n                    toggleEmojiPicker={this.toggleEmojiPicker}\n                />\n            );\n        }\n\n        let options;\n        if (isEphemeral) {\n            options = (\n                <div className='col col__remove'>\n                    {this.createRemovePostButton()}\n                </div>\n            );\n        } else if (isPostDeleted) {\n            options = null;\n        } else if (!isSystemMessage && (isMobile() || this.state.hover || this.state.a11yActive || this.state.dropdownOpened || this.state.showEmojiPicker)) {\n            const dotMenu = (\n                <DotMenu\n                    post={this.props.post}\n                    location={Locations.RHS_COMMENT}\n                    isFlagged={this.props.isFlagged}\n                    handleDropdownOpened={this.handleDropdownOpened}\n                    handleAddReactionClick={this.toggleEmojiPicker}\n                    isReadOnly={isReadOnly || channelIsArchived}\n                    enableEmojiPicker={this.props.enableEmojiPicker}\n                />\n            );\n\n            options = (\n                <div\n                    ref='dotMenu'\n                    className='col col__reply'\n                >\n                    {dotMenu}\n                    {postReaction}\n                </div>\n            );\n        }\n\n        let pinnedBadge;\n        if (post.is_pinned) {\n            pinnedBadge = (\n                <span className='post__pinned-badge'>\n                    <FormattedMessage\n                        id='post_info.pinned'\n                        defaultMessage='Pinned'\n                    />\n                </span>\n            );\n        }\n\n        let flagIcon = null;\n        if (this.state.hover || this.state.a11yActive || this.state.dropdownOpened || this.state.showEmojiPicker || this.props.isFlagged) {\n            flagIcon = (\n                <PostFlagIcon\n                    location={Locations.RHS_COMMENT}\n                    postId={post.id}\n                    isFlagged={this.props.isFlagged}\n                    isEphemeral={isEphemeral}\n                />\n            );\n        }\n        const postTime = this.renderPostTime();\n\n        let postInfoIcon;\n        if (post.props && post.props.card) {\n            postInfoIcon = (\n                <OverlayTrigger\n                    delayShow={Constants.OVERLAY_TIME_DELAY}\n                    placement='top'\n                    overlay={\n                        <Tooltip>\n                            <FormattedMessage\n                                id='post_info.info.view_additional_info'\n                                defaultMessage='View additional info'\n                            />\n                        </Tooltip>\n                    }\n                >\n                    <button\n                        className='card-icon__container icon--show style--none'\n                        onClick={(e) => {\n                            e.preventDefault();\n                            this.props.handleCardClick(this.props.post);\n                        }}\n                    >\n                        <InfoSmallIcon\n                            className='icon icon__info'\n                            aria-hidden='true'\n                        />\n                    </button>\n                </OverlayTrigger>\n            );\n        }\n\n        return (\n            <div\n                role='listitem'\n                ref={this.postRef}\n                id={'rhsPost_' + post.id}\n                tabIndex='-1'\n                className={`a11y__section ${this.getClassName(post, isSystemMessage)}`}\n                onMouseOver={this.setHover}\n                onMouseLeave={this.unsetHover}\n                aria-label={this.state.currentAriaLabel}\n                onFocus={this.handlePostFocus}\n            >\n                <div\n                    role='application'\n                    className='post__content'\n                >\n                    <div className='post__img'>\n                        {profilePicture}\n                    </div>\n                    <div>\n                        <div className='post__header'>\n                            <div className='col col__name'>\n                                {userProfile}\n                                {botIndicator}\n                            </div>\n                            <div className='col'>\n                                {postTime}\n                                {pinnedBadge}\n                                {postInfoIcon}\n                                {flagIcon}\n                                {visibleMessage}\n                            </div>\n                            {options}\n                        </div>\n                        <div className='post__body' >\n                            <div className={postClass}>\n                                {failedPostOptions}\n                                <MessageWithAdditionalContent\n                                    post={post}\n                                    previewCollapsed={this.props.previewCollapsed}\n                                    previewEnabled={this.props.previewEnabled}\n                                    isEmbedVisible={this.props.isEmbedVisible}\n                                    pluginPostTypes={this.props.pluginPostTypes}\n                                />\n                            </div>\n                            {fileAttachment}\n                            <ReactionList\n                                post={post}\n                                isReadOnly={isReadOnly || channelIsArchived}\n                            />\n                        </div>\n                    </div>\n                </div>\n            </div>\n        );\n    }\n}\n","// Copyright (c) 2015-present Mattermost, Inc. All Rights Reserved.\n// See LICENSE.txt for license information.\n\nimport {connect} from 'react-redux';\nimport {Posts} from 'mattermost-redux/constants';\nimport {isChannelReadOnlyById} from 'mattermost-redux/selectors/entities/channels';\nimport {getCurrentTeamId} from 'mattermost-redux/selectors/entities/teams';\nimport {makeGetReactionsForPost, getPost} from 'mattermost-redux/selectors/entities/posts';\nimport {makeGetDisplayName} from 'mattermost-redux/selectors/entities/users';\nimport {getConfig} from 'mattermost-redux/selectors/entities/general';\nimport {get} from 'mattermost-redux/selectors/entities/preferences';\nimport {isSystemMessage} from 'mattermost-redux/utils/post_utils';\n\nimport {Preferences} from 'utils/constants.jsx';\nimport {isEmbedVisible} from 'selectors/posts';\n\nimport RhsComment from './rhs_comment.jsx';\n\nfunction isConsecutivePost(state, ownProps) {\n    const post = ownProps.post;\n    const previousPost = ownProps.previousPostId && getPost(state, ownProps.previousPostId);\n\n    let consecutivePost = false;\n\n    if (previousPost) {\n        const postFromWebhook = Boolean(post.props && post.props.from_webhook);\n        const prevPostFromWebhook = Boolean(previousPost.props && previousPost.props.from_webhook);\n        if (previousPost && previousPost.user_id === post.user_id &&\n            post.create_at - previousPost.create_at <= Posts.POST_COLLAPSE_TIMEOUT &&\n            !postFromWebhook && !prevPostFromWebhook &&\n            !isSystemMessage(post) && !isSystemMessage(previousPost) &&\n            (previousPost.root_id === post.root_id || previousPost.id === post.root_id)) {\n            // The last post and this post were made by the same user within some time\n            consecutivePost = true;\n        }\n    }\n    return consecutivePost;\n}\n\nfunction mapStateToProps(state, ownProps) {\n    const getReactionsForPost = makeGetReactionsForPost();\n    const getDisplayName = makeGetDisplayName();\n\n    const config = getConfig(state);\n    const enableEmojiPicker = config.EnableEmojiPicker === 'true';\n    const enablePostUsernameOverride = config.EnablePostUsernameOverride === 'true';\n    const teamId = ownProps.teamId || getCurrentTeamId(state);\n    const channel = state.entities.channels.channels[ownProps.post.channel_id];\n\n    return {\n        author: getDisplayName(state, ownProps.post.user_id),\n        reactions: getReactionsForPost(state, ownProps.post.id),\n        enableEmojiPicker,\n        enablePostUsernameOverride,\n        isEmbedVisible: isEmbedVisible(state, ownProps.post.id),\n        isReadOnly: isChannelReadOnlyById(state, ownProps.post.channel_id),\n        teamId,\n        pluginPostTypes: state.plugins.postTypes,\n        channelIsArchived: channel.delete_at !== 0,\n        isConsecutivePost: isConsecutivePost(state, ownProps),\n        isFlagged: get(state, Preferences.CATEGORY_FLAGGED_POST, ownProps.post.id, null) != null,\n        compactDisplay: get(state, Preferences.CATEGORY_DISPLAY_SETTINGS, Preferences.MESSAGE_DISPLAY, Preferences.MESSAGE_DISPLAY_DEFAULT) === Preferences.MESSAGE_DISPLAY_COMPACT,\n    };\n}\n\nexport default connect(mapStateToProps)(RhsComment);\n","// Copyright (c) 2015-present Mattermost, Inc. All Rights Reserved.\n// See LICENSE.txt for license information.\n\nimport PropTypes from 'prop-types';\nimport React from 'react';\nimport {OverlayTrigger, Tooltip} from 'react-bootstrap';\nimport {FormattedMessage} from 'react-intl';\n\nimport Constants, {RHSStates} from 'utils/constants.jsx';\n\nexport default class RhsHeaderPost extends React.Component {\n    static propTypes = {\n        previousRhsState: PropTypes.oneOf(\n            Object.values(RHSStates)\n        ),\n        actions: PropTypes.shape({\n            showMentions: PropTypes.func,\n            showSearchResults: PropTypes.func,\n            showFlaggedPosts: PropTypes.func,\n            showPinnedPosts: PropTypes.func,\n            closeRightHandSide: PropTypes.func,\n            toggleRhsExpanded: PropTypes.func,\n        }),\n    };\n\n    handleBack = (e) => {\n        e.preventDefault();\n\n        switch (this.props.previousRhsState) {\n        case RHSStates.SEARCH:\n            this.props.actions.showSearchResults();\n            break;\n        case RHSStates.MENTION:\n            this.props.actions.showMentions();\n            break;\n        case RHSStates.FLAG:\n            this.props.actions.showFlaggedPosts();\n            break;\n        case RHSStates.PIN:\n            this.props.actions.showPinnedPosts();\n            break;\n        default:\n            break;\n        }\n    }\n\n    render() {\n        let back;\n        const closeSidebarTooltip = (\n            <Tooltip id='closeSidebarTooltip'>\n                <FormattedMessage\n                    id='rhs_header.closeSidebarTooltip'\n                    defaultMessage='Close Sidebar'\n                />\n            </Tooltip>\n        );\n\n        let backToResultsTooltip;\n\n        switch (this.props.previousRhsState) {\n        case RHSStates.SEARCH:\n        case RHSStates.MENTION:\n            backToResultsTooltip = (\n                <Tooltip id='backToResultsTooltip'>\n                    <FormattedMessage\n                        id='rhs_header.backToResultsTooltip'\n                        defaultMessage='Back to Search Results'\n                    />\n                </Tooltip>\n            );\n            break;\n        case RHSStates.FLAG:\n            backToResultsTooltip = (\n                <Tooltip id='backToResultsTooltip'>\n                    <FormattedMessage\n                        id='rhs_header.backToFlaggedTooltip'\n                        defaultMessage='Back to Flagged Posts'\n                    />\n                </Tooltip>\n            );\n            break;\n        case RHSStates.PIN:\n            backToResultsTooltip = (\n                <Tooltip id='backToResultsTooltip'>\n                    <FormattedMessage\n                        id='rhs_header.backToPinnedTooltip'\n                        defaultMessage='Back to Pinned Posts'\n                    />\n                </Tooltip>\n            );\n            break;\n        }\n\n        const expandSidebarTooltip = (\n            <Tooltip id='expandSidebarTooltip'>\n                <FormattedMessage\n                    id='rhs_header.expandSidebarTooltip'\n                    defaultMessage='Expand Sidebar'\n                />\n            </Tooltip>\n        );\n\n        const shrinkSidebarTooltip = (\n            <Tooltip id='shrinkSidebarTooltip'>\n                <FormattedMessage\n                    id='rhs_header.shrinkSidebarTooltip'\n                    defaultMessage='Shrink Sidebar'\n                />\n            </Tooltip>\n        );\n\n        if (backToResultsTooltip) {\n            back = (\n                <a\n                    href='#'\n                    onClick={this.handleBack}\n                    className='sidebar--right__back'\n                >\n                    <OverlayTrigger\n                        delayShow={Constants.OVERLAY_TIME_DELAY}\n                        placement='top'\n                        overlay={backToResultsTooltip}\n                    >\n                        <FormattedMessage\n                            id='generic_icons.back'\n                            defaultMessage='Back Icon'\n                        >\n                            {(ariaLabel) => (\n                                <i\n                                    className='fa fa-angle-left'\n                                    aria-label={ariaLabel}\n                                />\n                            )}\n                        </FormattedMessage>\n                    </OverlayTrigger>\n                </a>\n            );\n        }\n\n        return (\n            <div className='sidebar--right__header'>\n                <span className='sidebar--right__title'>\n                    {back}\n                    <FormattedMessage\n                        id='rhs_header.details'\n                        defaultMessage='Message Details'\n                    />\n                </span>\n                <div className='pull-right'>\n                    <button\n                        type='button'\n                        className='sidebar--right__expand'\n                        aria-label='Expand'\n                        onClick={this.props.actions.toggleRhsExpanded}\n                    >\n                        <OverlayTrigger\n                            delayShow={Constants.OVERLAY_TIME_DELAY}\n                            placement='top'\n                            overlay={expandSidebarTooltip}\n                        >\n                            <FormattedMessage\n                                id='rhs_header.expandSidebarTooltip.icon'\n                                defaultMessage='Expand Sidebar Icon'\n                            >\n                                {(ariaLabel) => (\n                                    <i\n                                        className='fa fa-expand'\n                                        aria-label={ariaLabel}\n                                    />\n                                )}\n                            </FormattedMessage>\n                        </OverlayTrigger>\n                        <OverlayTrigger\n                            delayShow={Constants.OVERLAY_TIME_DELAY}\n                            placement='top'\n                            overlay={shrinkSidebarTooltip}\n                        >\n                            <FormattedMessage\n                                id='rhs_header.expandTooltip.icon'\n                                defaultMessage='Shrink Sidebar Icon'\n                            >\n                                {(ariaLabel) => (\n                                    <i\n                                        className='fa fa-compress'\n                                        aria-label={ariaLabel}\n                                    />\n                                )}\n                            </FormattedMessage>\n                        </OverlayTrigger>\n                    </button>\n                    <button\n                        id='rhsCloseButton'\n                        type='button'\n                        className='sidebar--right__close'\n                        aria-label='Close'\n                        onClick={this.props.actions.closeRightHandSide}\n                    >\n\n                        <OverlayTrigger\n                            delayShow={Constants.OVERLAY_TIME_DELAY}\n                            placement='top'\n                            overlay={closeSidebarTooltip}\n                        >\n                            <FormattedMessage\n                                id='rhs_header.closeTooltip.icon'\n                                defaultMessage='Close Sidebar Icon'\n                            >\n                                {(ariaLabel) => (\n                                    <i\n                                        className='fa fa-sign-out'\n                                        aria-label={ariaLabel}\n                                    />\n                                )}\n                            </FormattedMessage>\n                        </OverlayTrigger>\n                    </button>\n                </div>\n            </div>\n        );\n    }\n}\n","// Copyright (c) 2015-present Mattermost, Inc. All Rights Reserved.\n// See LICENSE.txt for license information.\n\nimport {connect} from 'react-redux';\nimport {bindActionCreators} from 'redux';\n\nimport {\n    showMentions,\n    showSearchResults,\n    showFlaggedPosts,\n    showPinnedPosts,\n    closeRightHandSide,\n    toggleRhsExpanded,\n} from 'actions/views/rhs';\n\nimport RhsHeaderPost from './rhs_header_post.jsx';\n\nfunction mapDispatchToProps(dispatch) {\n    return {\n        actions: bindActionCreators({\n            showSearchResults,\n            showMentions,\n            showFlaggedPosts,\n            showPinnedPosts,\n            closeRightHandSide,\n            toggleRhsExpanded,\n        }, dispatch),\n    };\n}\n\nexport default connect(null, mapDispatchToProps)(RhsHeaderPost);\n","// Copyright (c) 2015-present Mattermost, Inc. All Rights Reserved.\n// See LICENSE.txt for license information.\n\nimport PropTypes from 'prop-types';\nimport React from 'react';\nimport {FormattedMessage, intlShape} from 'react-intl';\nimport {OverlayTrigger, Tooltip} from 'react-bootstrap';\nimport {Posts} from 'mattermost-redux/constants';\nimport * as ReduxPostUtils from 'mattermost-redux/utils/post_utils';\n\nimport Constants, {Locations} from 'utils/constants.jsx';\nimport * as PostUtils from 'utils/post_utils.jsx';\nimport * as Utils from 'utils/utils.jsx';\nimport DotMenu from 'components/dot_menu';\nimport FileAttachmentListContainer from 'components/file_attachment_list';\nimport PostProfilePicture from 'components/post_profile_picture';\nimport PostFlagIcon from 'components/post_view/post_flag_icon';\nimport ReactionList from 'components/post_view/reaction_list';\nimport PostTime from 'components/post_view/post_time';\nimport PostReaction from 'components/post_view/post_reaction';\nimport MessageWithAdditionalContent from 'components/message_with_additional_content';\nimport BotBadge from 'components/widgets/badges/bot_badge.jsx';\nimport InfoSmallIcon from 'components/svg/info_small_icon';\n\nimport UserProfile from 'components/user_profile';\n\nexport default class RhsRootPost extends React.PureComponent {\n    static propTypes = {\n        post: PropTypes.object.isRequired,\n        teamId: PropTypes.string.isRequired,\n        currentUserId: PropTypes.string.isRequired,\n        compactDisplay: PropTypes.bool,\n        commentCount: PropTypes.number.isRequired,\n        author: PropTypes.string,\n        reactions: PropTypes.object,\n        isFlagged: PropTypes.bool,\n        previewCollapsed: PropTypes.string,\n        previewEnabled: PropTypes.bool,\n        isBusy: PropTypes.bool,\n        isEmbedVisible: PropTypes.bool,\n        enableEmojiPicker: PropTypes.bool.isRequired,\n        enablePostUsernameOverride: PropTypes.bool.isRequired,\n        isReadOnly: PropTypes.bool.isRequired,\n        pluginPostTypes: PropTypes.object,\n        channelIsArchived: PropTypes.bool.isRequired,\n        channelType: PropTypes.string,\n        channelDisplayName: PropTypes.string,\n        handleCardClick: PropTypes.func.isRequired,\n    };\n\n    static contextTypes = {\n        intl: intlShape.isRequired,\n    };\n\n    static defaultProps = {\n        commentCount: 0,\n    };\n\n    constructor(props) {\n        super(props);\n\n        this.state = {\n            showEmojiPicker: false,\n            testStateObj: true,\n            dropdownOpened: false,\n            currentAriaLabel: '',\n        };\n    }\n\n    renderPostTime = (isEphemeral) => {\n        const post = this.props.post;\n\n        if (post.type === Constants.PostTypes.FAKE_PARENT_DELETED) {\n            return null;\n        }\n\n        const isPermalink = !(isEphemeral ||\n            Posts.POST_DELETED === post.state ||\n            ReduxPostUtils.isPostPendingOrFailed(post));\n\n        return (\n            <PostTime\n                isPermalink={isPermalink}\n                eventTime={post.create_at}\n                postId={post.id}\n                location={Locations.RHS_ROOT}\n            />\n        );\n    };\n\n    toggleEmojiPicker = () => {\n        const showEmojiPicker = !this.state.showEmojiPicker;\n\n        this.setState({\n            showEmojiPicker,\n        });\n    };\n\n    getClassName = (post, isSystemMessage) => {\n        let className = 'post post--root post--thread';\n        if (this.props.currentUserId === post.user_id) {\n            className += ' current--user';\n        }\n\n        if (isSystemMessage) {\n            className += ' post--system';\n        }\n\n        if (this.props.compactDisplay) {\n            className += ' post--compact';\n        }\n\n        if (post.is_pinned) {\n            className += ' post--pinned';\n        }\n\n        if (this.state.dropdownOpened || this.state.showEmojiPicker) {\n            className += ' post--hovered';\n        }\n\n        return className;\n    };\n\n    handleDropdownOpened = (isOpened) => {\n        this.setState({\n            dropdownOpened: isOpened,\n        });\n    };\n\n    handlePostFocus = () => {\n        const {post, author, reactions, isFlagged} = this.props;\n        this.setState({currentAriaLabel: PostUtils.createAriaLabelForPost(post, author, isFlagged, reactions, this.context.intl)});\n    }\n\n    getDotMenuRef = () => {\n        return this.refs.dotMenu;\n    };\n\n    render() {\n        const {post, isReadOnly, teamId, channelIsArchived, channelType, channelDisplayName} = this.props;\n\n        const isPostDeleted = post && post.state === Posts.POST_DELETED;\n        const isEphemeral = Utils.isPostEphemeral(post);\n        const isSystemMessage = PostUtils.isSystemMessage(post);\n\n        let channelName;\n        if (channelType === 'D') {\n            channelName = (\n                <FormattedMessage\n                    id='rhs_root.direct'\n                    defaultMessage='Direct Message'\n                />\n            );\n        } else {\n            channelName = channelDisplayName;\n        }\n\n        let postReaction;\n        if (!isReadOnly && !isEphemeral && !post.failed && !isSystemMessage && this.props.enableEmojiPicker && !channelIsArchived) {\n            postReaction = (\n                <PostReaction\n                    channelId={post.channel_id}\n                    postId={post.id}\n                    teamId={teamId}\n                    getDotMenuRef={this.getDotMenuRef}\n                    location={Locations.RHS_ROOT}\n                    showEmojiPicker={this.state.showEmojiPicker}\n                    toggleEmojiPicker={this.toggleEmojiPicker}\n                />\n            );\n        }\n\n        let fileAttachment = null;\n        if (post.file_ids && post.file_ids.length > 0) {\n            fileAttachment = (\n                <FileAttachmentListContainer\n                    post={post}\n                    compactDisplay={this.props.compactDisplay}\n                />\n            );\n        }\n\n        let userProfile;\n        let botIndicator;\n        if (isSystemMessage) {\n            userProfile = (\n                <UserProfile\n                    overwriteName={\n                        <FormattedMessage\n                            id='post_info.system'\n                            defaultMessage='System'\n                        />\n                    }\n                    overwriteImage={Constants.SYSTEM_MESSAGE_PROFILE_IMAGE}\n                    disablePopover={true}\n                />\n            );\n        } else if (post.props && post.props.from_webhook) {\n            if (post.props.override_username && this.props.enablePostUsernameOverride) {\n                userProfile = (\n                    <UserProfile\n                        key={post.user_id}\n                        userId={post.user_id}\n                        hideStatus={true}\n                        overwriteName={post.props.override_username}\n                        disablePopover={true}\n                    />\n                );\n            } else {\n                userProfile = (\n                    <UserProfile\n                        key={post.user_id}\n                        userId={post.user_id}\n                        hideStatus={true}\n                        disablePopover={true}\n                    />\n                );\n            }\n\n            botIndicator = <BotBadge/>;\n        } else {\n            userProfile = (\n                <UserProfile\n                    key={post.user_id}\n                    userId={post.user_id}\n                    isBusy={this.props.isBusy}\n                    isRHS={true}\n                    hasMention={true}\n                />\n            );\n        }\n\n        let postClass = '';\n        if (PostUtils.isEdited(this.props.post)) {\n            postClass += ' post--edited';\n        }\n\n        let pinnedBadge;\n        if (post.is_pinned) {\n            pinnedBadge = (\n                <span className='post__pinned-badge'>\n                    <FormattedMessage\n                        id='post_info.pinned'\n                        defaultMessage='Pinned'\n                    />\n                </span>\n            );\n        }\n\n        const dotMenu = (\n            <DotMenu\n                post={this.props.post}\n                location={Locations.RHS_ROOT}\n                isFlagged={this.props.isFlagged}\n                handleDropdownOpened={this.handleDropdownOpened}\n                handleAddReactionClick={this.toggleEmojiPicker}\n                commentCount={this.props.commentCount}\n                isReadOnly={isReadOnly || channelIsArchived}\n                enableEmojiPicker={this.props.enableEmojiPicker}\n            />\n        );\n\n        let dotMenuContainer;\n        if (!isPostDeleted && this.props.post.type !== Constants.PostTypes.FAKE_PARENT_DELETED) {\n            dotMenuContainer = (\n                <div\n                    ref='dotMenu'\n                    className='col col__reply'\n                >\n                    {dotMenu}\n                    {postReaction}\n                </div>\n            );\n        }\n\n        let postFlagIcon;\n        const showFlagIcon = !isEphemeral && !post.failed && !isSystemMessage;\n        if (showFlagIcon) {\n            postFlagIcon = (\n                <PostFlagIcon\n                    location={Locations.RHS_ROOT}\n                    postId={post.id}\n                    isFlagged={this.props.isFlagged}\n                />\n            );\n        }\n\n        let postInfoIcon;\n        if (this.props.post.props && this.props.post.props.card) {\n            postInfoIcon = (\n                <OverlayTrigger\n                    delayShow={Constants.OVERLAY_TIME_DELAY}\n                    placement='top'\n                    overlay={\n                        <Tooltip>\n                            <FormattedMessage\n                                id='post_info.info.view_additional_info'\n                                defaultMessage='View additional info'\n                            />\n                        </Tooltip>\n                    }\n                >\n                    <button\n                        className='card-icon__container icon--show style--none'\n                        onClick={(e) => {\n                            e.preventDefault();\n                            this.props.handleCardClick(this.props.post);\n                        }}\n                    >\n                        <InfoSmallIcon\n                            className='icon icon__info'\n                            aria-hidden='true'\n                        />\n                    </button>\n                </OverlayTrigger>\n            );\n        }\n\n        return (\n            <div\n                role='listitem'\n                id={'rhsPost_' + post.id}\n                tabIndex='-1'\n                className={`thread__root a11y__section ${this.getClassName(post, isSystemMessage)}`}\n                aria-label={this.state.currentAriaLabel}\n                onFocus={this.handlePostFocus}\n            >\n                <div className='post-right-channel__name'>{channelName}</div>\n                <div\n                    role='application'\n                    className='post__content'\n                >\n                    <div className='post__img'>\n                        <PostProfilePicture\n                            compactDisplay={this.props.compactDisplay}\n                            isBusy={this.props.isBusy}\n                            isRHS={true}\n                            post={post}\n                            userId={post.user_id}\n                        />\n                    </div>\n                    <div>\n                        <div className='post__header'>\n                            <div className='col__name'>\n                                {userProfile}\n                                {botIndicator}\n                            </div>\n                            <div className='col'>\n                                {this.renderPostTime(isEphemeral)}\n                                {pinnedBadge}\n                                {postInfoIcon}\n                                {postFlagIcon}\n                            </div>\n                            {dotMenuContainer}\n                        </div>\n                        <div className='post__body'>\n                            <div className={postClass}>\n                                <MessageWithAdditionalContent\n                                    post={post}\n                                    previewCollapsed={this.props.previewCollapsed}\n                                    previewEnabled={this.props.previewEnabled}\n                                    isEmbedVisible={this.props.isEmbedVisible}\n                                    pluginPostTypes={this.props.pluginPostTypes}\n                                />\n                            </div>\n                            {fileAttachment}\n                            <ReactionList\n                                post={post}\n                                isReadOnly={isReadOnly || channelIsArchived}\n                            />\n                        </div>\n                    </div>\n                </div>\n            </div>\n        );\n    }\n}\n","// Copyright (c) 2015-present Mattermost, Inc. All Rights Reserved.\n// See LICENSE.txt for license information.\n\nimport {connect} from 'react-redux';\n\nimport {isChannelReadOnlyById, getChannel} from 'mattermost-redux/selectors/entities/channels';\nimport {getCurrentTeamId} from 'mattermost-redux/selectors/entities/teams';\nimport {makeGetReactionsForPost} from 'mattermost-redux/selectors/entities/posts';\nimport {makeGetDisplayName} from 'mattermost-redux/selectors/entities/users';\nimport {getConfig} from 'mattermost-redux/selectors/entities/general';\nimport {get} from 'mattermost-redux/selectors/entities/preferences';\n\nimport {Preferences} from 'utils/constants.jsx';\nimport {isEmbedVisible} from 'selectors/posts';\n\nimport RhsRootPost from './rhs_root_post.jsx';\n\nfunction mapStateToProps(state, ownProps) {\n    const getReactionsForPost = makeGetReactionsForPost();\n    const getDisplayName = makeGetDisplayName();\n\n    const config = getConfig(state);\n    const enableEmojiPicker = config.EnableEmojiPicker === 'true';\n    const enablePostUsernameOverride = config.EnablePostUsernameOverride === 'true';\n    const teamId = ownProps.teamId || getCurrentTeamId(state);\n    const channel = getChannel(state, ownProps.post.channel_id) || {};\n\n    return {\n        author: getDisplayName(state, ownProps.post.user_id),\n        reactions: getReactionsForPost(state, ownProps.post.id),\n        enableEmojiPicker,\n        enablePostUsernameOverride,\n        isEmbedVisible: isEmbedVisible(state, ownProps.post.id),\n        isReadOnly: isChannelReadOnlyById(state, ownProps.post.channel_id),\n        teamId,\n        pluginPostTypes: state.plugins.postTypes,\n        channelIsArchived: channel.delete_at !== 0,\n        channelType: channel.type,\n        channelDisplayName: channel.display_name,\n        isFlagged: get(state, Preferences.CATEGORY_FLAGGED_POST, ownProps.post.id, null) != null,\n        compactDisplay: get(state, Preferences.CATEGORY_DISPLAY_SETTINGS, Preferences.MESSAGE_DISPLAY, Preferences.MESSAGE_DISPLAY_DEFAULT) === Preferences.MESSAGE_DISPLAY_COMPACT,\n    };\n}\n\nexport default connect(mapStateToProps)(RhsRootPost);\n","// Copyright (c) 2015-present Mattermost, Inc. All Rights Reserved.\n// See LICENSE.txt for license information.\n\nimport $ from 'jquery';\nimport {FormattedMessage} from 'react-intl';\nimport PropTypes from 'prop-types';\nimport React from 'react';\nimport Scrollbars from 'react-custom-scrollbars';\nimport {Posts} from 'mattermost-redux/constants';\n\nimport Constants from 'utils/constants.jsx';\nimport DelayedAction from 'utils/delayed_action.jsx';\nimport * as Utils from 'utils/utils.jsx';\nimport * as UserAgent from 'utils/user_agent.jsx';\nimport CreateComment from 'components/create_comment';\nimport DateSeparator from 'components/post_view/date_separator';\nimport FloatingTimestamp from 'components/post_view/floating_timestamp';\nimport RhsComment from 'components/rhs_comment';\nimport RhsHeaderPost from 'components/rhs_header_post';\nimport RhsRootPost from 'components/rhs_root_post';\nimport FormattedMarkdownMessage from 'components/formatted_markdown_message';\n\nexport function renderView(props) {\n    return (\n        <div\n            {...props}\n            className='scrollbar--view'\n        />);\n}\n\nexport function renderThumbHorizontal(props) {\n    return (\n        <div\n            {...props}\n            className='scrollbar--horizontal'\n        />);\n}\n\nexport function renderThumbVertical(props) {\n    return (\n        <div\n            {...props}\n            className='scrollbar--vertical'\n        />);\n}\n\nexport default class RhsThread extends React.Component {\n    static propTypes = {\n        posts: PropTypes.arrayOf(PropTypes.object).isRequired,\n        channel: PropTypes.object.isRequired,\n        selected: PropTypes.object.isRequired,\n        previousRhsState: PropTypes.string,\n        currentUserId: PropTypes.string.isRequired,\n        previewCollapsed: PropTypes.string.isRequired,\n        previewEnabled: PropTypes.bool.isRequired,\n        socketConnectionStatus: PropTypes.bool.isRequired,\n        actions: PropTypes.shape({\n            removePost: PropTypes.func.isRequired,\n            selectPostCard: PropTypes.func.isRequired,\n            getPostThread: PropTypes.func.isRequired,\n        }).isRequired,\n    }\n\n    constructor(props) {\n        super(props);\n\n        this.scrollStopAction = new DelayedAction(this.handleScrollStop);\n\n        const openTime = (new Date()).getTime();\n\n        this.state = {\n            windowWidth: Utils.windowWidth(),\n            windowHeight: Utils.windowHeight(),\n            isScrolling: false,\n            topRhsPostId: 0,\n            openTime,\n        };\n    }\n\n    componentDidMount() {\n        this.scrollToBottom();\n        window.addEventListener('resize', this.handleResize);\n    }\n\n    componentWillUnmount() {\n        window.removeEventListener('resize', this.handleResize);\n    }\n\n    UNSAFE_componentWillReceiveProps(nextProps) { // eslint-disable-line camelcase\n        if (!this.props.selected || !nextProps.selected) {\n            return;\n        }\n\n        if (this.props.selected.id !== nextProps.selected.id) {\n            this.setState({\n                openTime: (new Date()).getTime(),\n            });\n        }\n    }\n\n    componentDidUpdate(prevProps) {\n        const prevPostsArray = prevProps.posts || [];\n        const curPostsArray = this.props.posts || [];\n\n        if (this.props.socketConnectionStatus && !prevProps.socketConnectionStatus) {\n            this.props.actions.getPostThread(this.props.selected.id);\n        }\n\n        if (prevPostsArray.length >= curPostsArray.length) {\n            return;\n        }\n\n        const curLastPost = curPostsArray[curPostsArray.length - 1];\n\n        if (curLastPost.user_id === this.props.currentUserId) {\n            this.scrollToBottom();\n        }\n    }\n\n    shouldComponentUpdate(nextProps, nextState) {\n        if (!Utils.areObjectsEqual(nextState.postsArray, this.props.posts)) {\n            return true;\n        }\n\n        if (!Utils.areObjectsEqual(nextState.selected, this.props.selected)) {\n            return true;\n        }\n\n        if (nextProps.previewEnabled !== this.props.previewEnabled) {\n            return true;\n        }\n\n        if (nextState.isBusy !== this.state.isBusy) {\n            return true;\n        }\n\n        if (nextState.isScrolling !== this.state.isScrolling) {\n            return true;\n        }\n\n        if (nextState.topRhsPostId !== this.state.topRhsPostId) {\n            return true;\n        }\n\n        return false;\n    }\n\n    handleResize = () => {\n        this.setState({\n            windowWidth: Utils.windowWidth(),\n            windowHeight: Utils.windowHeight(),\n        });\n\n        if (UserAgent.isMobile() && document.activeElement.id === 'reply_textbox') {\n            this.scrollToBottom();\n        }\n    }\n\n    handleCardClick = (post) => {\n        if (!post) {\n            return;\n        }\n\n        this.props.actions.selectPostCard(post);\n    }\n\n    handleCardClickPost = (post) => {\n        if (!post) {\n            return;\n        }\n\n        this.props.actions.selectPostCard(post);\n    }\n\n    onBusy = (isBusy) => {\n        this.setState({isBusy});\n    }\n\n    filterPosts = (posts, selected, openTime) => {\n        const postsArray = [];\n\n        posts.forEach((cpost) => {\n            // Do not show empherals created before sidebar has been opened\n            if (cpost.type === 'system_ephemeral' && cpost.create_at < openTime) {\n                return;\n            }\n\n            if (cpost.root_id === selected.id) {\n                postsArray.unshift(cpost);\n            }\n        });\n\n        return postsArray;\n    }\n\n    scrollToBottom = () => {\n        if ($('.post-right__scroll')[0]) {\n            $('.post-right__scroll').parent().scrollTop($('.post-right__scroll')[0].scrollHeight);\n        }\n    }\n\n    updateFloatingTimestamp = () => {\n        // skip this in non-mobile view since that's when the timestamp is visible\n        if (!Utils.isMobile()) {\n            return;\n        }\n\n        if (this.props.posts) {\n            const childNodes = this.refs.rhspostlist.childNodes;\n            const viewPort = this.refs.rhspostlist.getBoundingClientRect();\n            let topRhsPostId = '';\n            const offset = 100;\n\n            // determine the top rhs comment assuming that childNodes and postsArray are of same length\n            for (let i = 0; i < childNodes.length; i++) {\n                if ((childNodes[i].offsetTop + viewPort.top) - offset > 0) {\n                    topRhsPostId = this.props.posts[i].id;\n                    break;\n                }\n            }\n\n            if (topRhsPostId !== this.state.topRhsPostId) {\n                this.setState({\n                    topRhsPostId,\n                });\n            }\n        }\n    }\n\n    handleScroll = () => {\n        this.updateFloatingTimestamp();\n\n        if (!this.state.isScrolling) {\n            this.setState({\n                isScrolling: true,\n            });\n        }\n\n        this.scrollStopAction.fireAfter(Constants.SCROLL_DELAY);\n    }\n\n    handleScrollStop = () => {\n        this.setState({\n            isScrolling: false,\n        });\n    }\n\n    getSidebarBody = () => {\n        return this.refs.sidebarbody;\n    }\n\n    render() {\n        if (this.props.posts == null || this.props.selected == null) {\n            return (\n                <div/>\n            );\n        }\n\n        const postsArray = this.filterPosts(this.props.posts, this.props.selected, this.state.openTime);\n        const {selected, currentUserId} = this.props;\n\n        let createAt = selected.create_at;\n        if (!createAt && this.props.posts.length > 0) {\n            createAt = this.props.posts[this.props.posts.length - 1].create_at;\n        }\n        const rootPostDay = Utils.getDateForUnixTicks(createAt);\n        let previousPostDay = rootPostDay;\n\n        const commentsLists = [];\n        const postsLength = postsArray.length;\n        for (let i = 0; i < postsLength; i++) {\n            const comPost = postsArray[i];\n            const previousPostId = i > 0 ? postsArray[i - 1].id : '';\n\n            const currentPostDay = Utils.getDateForUnixTicks(comPost.create_at);\n            if (currentPostDay.toDateString() !== previousPostDay.toDateString()) {\n                previousPostDay = currentPostDay;\n                commentsLists.push(\n                    <DateSeparator\n                        key={currentPostDay}\n                        date={currentPostDay}\n                    />);\n            }\n\n            const keyPrefix = comPost.id ? comPost.id : comPost.pending_post_id;\n\n            commentsLists.push(\n                <RhsComment\n                    key={keyPrefix + 'commentKey'}\n                    ref={comPost.id}\n                    post={comPost}\n                    previousPostId={previousPostId}\n                    teamId={this.props.channel.team_id}\n                    currentUserId={currentUserId}\n                    isBusy={this.state.isBusy}\n                    removePost={this.props.actions.removePost}\n                    previewCollapsed={this.props.previewCollapsed}\n                    previewEnabled={this.props.previewEnabled}\n                    handleCardClick={this.handleCardClickPost}\n                />\n            );\n        }\n\n        let createComment;\n        const isFakeDeletedPost = selected.type === Constants.PostTypes.FAKE_PARENT_DELETED;\n        const channelIsArchived = this.props.channel.delete_at !== 0;\n        if (!isFakeDeletedPost) {\n            if (channelIsArchived) {\n                createComment = (\n                    <div className='channel-archived-warning'>\n                        <FormattedMarkdownMessage\n                            id='archivedChannelMessage'\n                            defaultMessage='You are viewing an **archived channel**. New messages cannot be posted.'\n                        />\n                    </div>\n                );\n            } else {\n                createComment = (\n                    <div className='post-create__container'>\n                        <CreateComment\n                            channelId={selected.channel_id}\n                            rootId={selected.id}\n                            rootDeleted={selected.state === Posts.POST_DELETED}\n                            latestPostId={postsLength > 0 ? postsArray[postsLength - 1].id : selected.id}\n                            getSidebarBody={this.getSidebarBody}\n                        />\n                    </div>\n                );\n            }\n        }\n\n        if (this.props.channel.type === Constants.DM_CHANNEL) {\n            const teammate = Utils.getDirectTeammate(this.props.channel.id);\n            if (teammate && teammate.delete_at) {\n                createComment = (\n                    <div\n                        className='post-create-message'\n                    >\n                        <FormattedMessage\n                            id='create_post.deactivated'\n                            defaultMessage='You are viewing an archived channel with a deactivated user.'\n                        />\n                    </div>\n                );\n            }\n        }\n\n        return (\n            <div\n                id='rhsContainer'\n                className='sidebar-right__body'\n                ref='sidebarbody'\n            >\n                <FloatingTimestamp\n                    isScrolling={this.state.isScrolling}\n                    isMobile={Utils.isMobile()}\n                    postId={this.state.topRhsPostId}\n                    isRhsPost={true}\n                />\n                <RhsHeaderPost\n                    previousRhsState={this.props.previousRhsState}\n                />\n                <Scrollbars\n                    autoHide={true}\n                    autoHideTimeout={500}\n                    autoHideDuration={500}\n                    renderThumbHorizontal={renderThumbHorizontal}\n                    renderThumbVertical={renderThumbVertical}\n                    renderView={renderView}\n                    onScroll={this.handleScroll}\n                >\n                    <div className='post-right__scroll'>\n                        <div\n                            role='application'\n                            id='rhsContent'\n                            aria-label={Utils.localizeMessage('accessibility.sections.rhsContent', 'message details complimentary region')}\n                            className='post-right__content a11y__region'\n                            data-a11y-sort-order='3'\n                            data-a11y-focus-child={true}\n                            data-a11y-order-reversed={true}\n                        >\n                            {!isFakeDeletedPost && <DateSeparator date={rootPostDay}/>}\n                            <RhsRootPost\n                                ref={selected.id}\n                                post={selected}\n                                commentCount={postsLength}\n                                teamId={this.props.channel.team_id}\n                                currentUserId={this.props.currentUserId}\n                                previewCollapsed={this.props.previewCollapsed}\n                                previewEnabled={this.props.previewEnabled}\n                                isBusy={this.state.isBusy}\n                                handleCardClick={this.handleCardClick}\n                            />\n                            {isFakeDeletedPost && rootPostDay && <DateSeparator date={rootPostDay}/>}\n                            <div\n                                ref='rhspostlist'\n                                className='post-right-comments-container'\n                            >\n                                {commentsLists}\n                            </div>\n                        </div>\n                        {createComment}\n                    </div>\n                </Scrollbars>\n            </div>\n        );\n    }\n}\n","// Copyright (c) 2015-present Mattermost, Inc. All Rights Reserved.\n// See LICENSE.txt for license information.\n\nimport {connect} from 'react-redux';\nimport {bindActionCreators} from 'redux';\nimport {getChannel} from 'mattermost-redux/selectors/entities/channels';\nimport {makeGetPostsForThread} from 'mattermost-redux/selectors/entities/posts';\nimport {get, getBool} from 'mattermost-redux/selectors/entities/preferences';\nimport {removePost, getPostThread} from 'mattermost-redux/actions/posts';\n\nimport {Preferences} from 'utils/constants.jsx';\nimport {getSelectedPost} from 'selectors/rhs.jsx';\nimport {getSocketStatus} from 'selectors/views/websocket';\nimport {selectPostCard} from 'actions/views/rhs';\n\nimport RhsThread from './rhs_thread.jsx';\n\nfunction makeMapStateToProps() {\n    const getPostsForThread = makeGetPostsForThread();\n\n    return function mapStateToProps(state) {\n        const selected = getSelectedPost(state);\n        const socketStatus = getSocketStatus(state);\n\n        let channel = null;\n        let posts = [];\n        if (selected) {\n            posts = getPostsForThread(state, {rootId: selected.id});\n            channel = getChannel(state, selected.channel_id);\n        }\n\n        const previewCollapsed = get(state, Preferences.CATEGORY_DISPLAY_SETTINGS, Preferences.COLLAPSE_DISPLAY, Preferences.COLLAPSE_DISPLAY_DEFAULT);\n\n        return {\n            selected,\n            channel,\n            posts,\n            socketConnectionStatus: socketStatus.connected,\n            previewCollapsed,\n            previewEnabled: getBool(state, Preferences.CATEGORY_DISPLAY_SETTINGS, Preferences.LINK_PREVIEW_DISPLAY, Preferences.LINK_PREVIEW_DISPLAY_DEFAULT),\n        };\n    };\n}\n\nfunction mapDispatchToProps(dispatch) {\n    return {\n        actions: bindActionCreators({\n            removePost,\n            selectPostCard,\n            getPostThread,\n        }, dispatch),\n    };\n}\n\nexport default connect(makeMapStateToProps, mapDispatchToProps)(RhsThread);\n","// Copyright (c) 2015-present Mattermost, Inc. All Rights Reserved.\n// See LICENSE.txt for license information.\n\nimport PropTypes from 'prop-types';\nimport React from 'react';\nimport {OverlayTrigger, Tooltip} from 'react-bootstrap';\nimport {FormattedMessage} from 'react-intl';\n\nimport Constants, {RHSStates} from 'utils/constants.jsx';\n\nexport default class RhsCardHeader extends React.Component {\n    static propTypes = {\n        previousRhsState: PropTypes.oneOf(Object.values(RHSStates)),\n        actions: PropTypes.shape({\n            showMentions: PropTypes.func,\n            showSearchResults: PropTypes.func,\n            showFlaggedPosts: PropTypes.func,\n            showPinnedPosts: PropTypes.func,\n            closeRightHandSide: PropTypes.func,\n            toggleRhsExpanded: PropTypes.func.isRequired,\n        }),\n    };\n\n    handleBack = (e) => {\n        e.preventDefault();\n\n        switch (this.props.previousRhsState) {\n        case RHSStates.SEARCH:\n            this.props.actions.showSearchResults();\n            break;\n        case RHSStates.MENTION:\n            this.props.actions.showMentions();\n            break;\n        case RHSStates.FLAG:\n            this.props.actions.showFlaggedPosts();\n            break;\n        case RHSStates.PIN:\n            this.props.actions.showPinnedPosts();\n            break;\n        default:\n            break;\n        }\n    }\n\n    render() {\n        let back;\n        let backToResultsTooltip;\n\n        switch (this.props.previousRhsState) {\n        case RHSStates.SEARCH:\n        case RHSStates.MENTION:\n            backToResultsTooltip = (\n                <Tooltip id='backToResultsTooltip'>\n                    <FormattedMessage\n                        id='rhs_header.backToResultsTooltip'\n                        defaultMessage='Back to Search Results'\n                    />\n                </Tooltip>\n            );\n            break;\n        case RHSStates.FLAG:\n            backToResultsTooltip = (\n                <Tooltip id='backToResultsTooltip'>\n                    <FormattedMessage\n                        id='rhs_header.backToFlaggedTooltip'\n                        defaultMessage='Back to Flagged Posts'\n                    />\n                </Tooltip>\n            );\n            break;\n        case RHSStates.PIN:\n            backToResultsTooltip = (\n                <Tooltip id='backToResultsTooltip'>\n                    <FormattedMessage\n                        id='rhs_header.backToPinnedTooltip'\n                        defaultMessage='Back to Pinned Posts'\n                    />\n                </Tooltip>\n            );\n            break;\n        }\n\n        const closeSidebarTooltip = (\n            <Tooltip id='closeSidebarTooltip'>\n                <FormattedMessage\n                    id='rhs_header.closeSidebarTooltip'\n                    defaultMessage='Close Sidebar'\n                />\n            </Tooltip>\n        );\n\n        const expandSidebarTooltip = (\n            <Tooltip id='expandSidebarTooltip'>\n                <FormattedMessage\n                    id='rhs_header.expandSidebarTooltip'\n                    defaultMessage='Expand Sidebar'\n                />\n            </Tooltip>\n        );\n\n        const shrinkSidebarTooltip = (\n            <Tooltip id='shrinkSidebarTooltip'>\n                <FormattedMessage\n                    id='rhs_header.shrinkSidebarTooltip'\n                    defaultMessage='Shrink Sidebar'\n                />\n            </Tooltip>\n        );\n\n        if (backToResultsTooltip) {\n            back = (\n                <a\n                    href='#'\n                    onClick={this.handleBack}\n                    className='sidebar--right__back'\n                >\n                    <OverlayTrigger\n                        delayShow={Constants.OVERLAY_TIME_DELAY}\n                        placement='top'\n                        overlay={backToResultsTooltip}\n                    >\n                        <FormattedMessage\n                            id='generic_icons.back'\n                            defaultMessage='Back Icon'\n                        >\n                            {(ariaLabel) => (\n                                <i\n                                    className='fa fa-angle-left'\n                                    aria-label={ariaLabel}\n                                />\n                            )}\n                        </FormattedMessage>\n                    </OverlayTrigger>\n                </a>\n            );\n        }\n\n        return (\n            <div className='sidebar--right__header'>\n                <span className='sidebar--right__title'>\n                    {back}\n                    <FormattedMessage\n                        id='search_header.title5'\n                        defaultMessage='Extra information'\n                    />\n                </span>\n                <div className='pull-right'>\n                    <button\n                        type='button'\n                        className='sidebar--right__expand'\n                        aria-label='Expand'\n                        onClick={this.props.actions.toggleRhsExpanded}\n                    >\n                        <OverlayTrigger\n                            delayShow={Constants.OVERLAY_TIME_DELAY}\n                            placement='top'\n                            overlay={expandSidebarTooltip}\n                        >\n                            <FormattedMessage\n                                id='rhs_header.expandSidebarTooltip.icon'\n                                defaultMessage='Expand Sidebar Icon'\n                            >\n                                {(ariaLabel) => (\n                                    <i\n                                        className='fa fa-expand'\n                                        aria-label={ariaLabel}\n                                    />\n                                )}\n                            </FormattedMessage>\n                        </OverlayTrigger>\n                        <OverlayTrigger\n                            delayShow={Constants.OVERLAY_TIME_DELAY}\n                            placement='top'\n                            overlay={shrinkSidebarTooltip}\n                        >\n                            <FormattedMessage\n                                id='rhs_header.expandTooltip.icon'\n                                defaultMessage='Shrink Sidebar Icon'\n                            >\n                                {(ariaLabel) => (\n                                    <i\n                                        className='fa fa-compress'\n                                        aria-label={ariaLabel}\n                                    />\n                                )}\n                            </FormattedMessage>\n                        </OverlayTrigger>\n                    </button>\n                    <button\n                        type='button'\n                        className='sidebar--right__close'\n                        aria-label='Close'\n                        onClick={this.props.actions.closeRightHandSide}\n                    >\n                        <OverlayTrigger\n                            delayShow={Constants.OVERLAY_TIME_DELAY}\n                            placement='top'\n                            overlay={closeSidebarTooltip}\n                        >\n                            <FormattedMessage\n                                id='rhs_header.closeTooltip.icon'\n                                defaultMessage='Close Sidebar Icon'\n                            >\n                                {(ariaLabel) => (\n                                    <i\n                                        className='fa fa-sign-out'\n                                        aria-label={ariaLabel}\n                                    />\n                                )}\n                            </FormattedMessage>\n                        </OverlayTrigger>\n                    </button>\n                </div>\n            </div>\n        );\n    }\n}\n","// Copyright (c) 2015-present Mattermost, Inc. All Rights Reserved.\n// See LICENSE.txt for license information.\n\nimport {connect} from 'react-redux';\nimport {bindActionCreators} from 'redux';\n\nimport {\n    showMentions,\n    showSearchResults,\n    showFlaggedPosts,\n    showPinnedPosts,\n    closeRightHandSide,\n    toggleRhsExpanded,\n} from 'actions/views/rhs';\n\nimport RshCardHeader from './rhs_card_header.jsx';\n\nfunction mapDispatchToProps(dispatch) {\n    return {\n        actions: bindActionCreators({\n            showMentions,\n            showSearchResults,\n            showFlaggedPosts,\n            showPinnedPosts,\n            closeRightHandSide,\n            toggleRhsExpanded,\n        }, dispatch),\n    };\n}\n\nexport default connect(null, mapDispatchToProps)(RshCardHeader);\n","// Copyright (c) 2015-present Mattermost, Inc. All Rights Reserved.\n// See LICENSE.txt for license information.\n\nimport PropTypes from 'prop-types';\nimport React from 'react';\nimport Scrollbars from 'react-custom-scrollbars';\nimport {FormattedMessage} from 'react-intl';\nimport {Link} from 'react-router-dom';\n\nimport DelayedAction from 'utils/delayed_action.jsx';\nimport Constants, {RHSStates} from 'utils/constants.jsx';\nimport * as Utils from 'utils/utils.jsx';\nimport RhsCardHeader from 'components/rhs_card_header';\nimport Markdown from 'components/markdown';\nimport UserProfile from 'components/user_profile';\nimport PostProfilePicture from 'components/post_profile_picture';\nimport * as GlobalActions from 'actions/global_actions.jsx';\n\nexport function renderView(props) {\n    return (\n        <div\n            {...props}\n            className='scrollbar--view'\n        />);\n}\n\nexport function renderThumbHorizontal(props) {\n    return (\n        <div\n            {...props}\n            className='scrollbar--horizontal'\n        />);\n}\n\nexport function renderThumbVertical(props) {\n    return (\n        <div\n            {...props}\n            className='scrollbar--vertical'\n        />);\n}\n\nexport default class RhsCard extends React.Component {\n    static propTypes = {\n        selected: PropTypes.object,\n        pluginPostCardTypes: PropTypes.object,\n        previousRhsState: PropTypes.oneOf(Object.values(RHSStates)),\n        enablePostUsernameOverride: PropTypes.bool,\n        teamUrl: PropTypes.string,\n    }\n\n    static defaultProps = {\n        pluginPostCardTypes: {},\n    }\n\n    constructor(props) {\n        super(props);\n\n        this.scrollStopAction = new DelayedAction(this.handleScrollStop);\n\n        this.state = {\n            isScrolling: false,\n            topRhsPostCreateAt: 0,\n        };\n    }\n\n    shouldComponentUpdate(nextProps, nextState) {\n        if (!Utils.areObjectsEqual(nextState.selected, this.props.selected)) {\n            return true;\n        }\n        if (nextState.isScrolling !== this.state.isScrolling) {\n            return true;\n        }\n        return false;\n    }\n\n    handleScroll = () => {\n        if (!this.state.isScrolling) {\n            this.setState({\n                isScrolling: true,\n            });\n        }\n\n        this.scrollStopAction.fireAfter(Constants.SCROLL_DELAY);\n    }\n\n    handleScrollStop = () => {\n        this.setState({\n            isScrolling: false,\n        });\n    }\n\n    getSidebarBody = () => {\n        return this.refs.sidebarbody;\n    }\n\n    handleClick = () => {\n        if (Utils.isMobile()) {\n            GlobalActions.emitCloseRightHandSide();\n        }\n    };\n\n    render() {\n        if (this.props.selected == null) {\n            return (<div/>);\n        }\n\n        const {selected, pluginPostCardTypes, teamUrl} = this.props;\n        const postType = selected.type;\n        let content = null;\n        if (pluginPostCardTypes.hasOwnProperty(postType)) {\n            const PluginComponent = pluginPostCardTypes[postType].component;\n            content = <PluginComponent post={selected}/>;\n        }\n\n        if (!content) {\n            content = (\n                <div className='info-card'>\n                    <Markdown message={selected.props && selected.props.card}/>\n                </div>\n            );\n        }\n\n        let user = (\n            <UserProfile\n                userId={selected.user_id}\n                hideStatus={true}\n                disablePopover={true}\n            />\n        );\n        if (selected.props.override_username && this.props.enablePostUsernameOverride) {\n            user = (\n                <UserProfile\n                    userId={selected.user_id}\n                    hideStatus={true}\n                    disablePopover={true}\n                    overwriteName={selected.props.override_username}\n                />\n            );\n        }\n        const avatar = (\n            <PostProfilePicture\n                compactDisplay={false}\n                post={selected}\n                userId={selected.user_id}\n            />\n        );\n\n        return (\n            <div\n                className='sidebar-right__body sidebar-right__card'\n                ref='sidebarbody'\n            >\n                <RhsCardHeader previousRhsState={this.props.previousRhsState}/>\n                <Scrollbars\n                    autoHide={true}\n                    autoHideTimeout={500}\n                    autoHideDuration={500}\n                    renderThumbHorizontal={renderThumbHorizontal}\n                    renderThumbVertical={renderThumbVertical}\n                    renderView={renderView}\n                    onScroll={this.handleScroll}\n                >\n                    <div className='post-right__scroll'>\n                        {content}\n                        <div className='d-flex post-card--info'>\n                            <div className='post-card--post-by overflow--ellipsis'>\n                                <FormattedMessage\n                                    id='rhs_card.message_by'\n                                    defaultMessage='Message by {avatar} {user}'\n                                    values={{user, avatar}}\n                                />\n                            </div>\n                            <div className='post-card--view-post'>\n                                <Link\n                                    to={`${teamUrl}/pl/${selected.id}`}\n                                    className='post__permalink'\n                                    onClick={this.handleClick}\n                                >\n                                    <FormattedMessage\n                                        id='rhs_card.jump'\n                                        defaultMessage='Jump'\n                                    />\n                                </Link>\n                            </div>\n                        </div>\n                    </div>\n                </Scrollbars>\n            </div>\n        );\n    }\n}\n","// Copyright (c) 2015-present Mattermost, Inc. All Rights Reserved.\n// See LICENSE.txt for license information.\n\nimport {connect} from 'react-redux';\nimport {getCurrentRelativeTeamUrl} from 'mattermost-redux/selectors/entities/teams';\nimport {getConfig} from 'mattermost-redux/selectors/entities/general';\n\nimport {getSelectedPostCard} from 'selectors/rhs.jsx';\n\nimport RhsCard from './rhs_card.jsx';\n\nfunction mapStateToProps(state) {\n    const selected = getSelectedPostCard(state);\n    const config = getConfig(state);\n    const enablePostUsernameOverride = config.EnablePostUsernameOverride === 'true';\n\n    return {\n        enablePostUsernameOverride,\n        selected,\n        pluginPostCardTypes: state.plugins.postCardTypes,\n        teamUrl: getCurrentRelativeTeamUrl(state),\n    };\n}\n\nexport default connect(mapStateToProps)(RhsCard);\n","// Copyright (c) 2015-present Mattermost, Inc. All Rights Reserved.\n// See LICENSE.txt for license information.\n\nimport React from 'react';\n\nimport {FormattedMessage} from 'react-intl';\n\nexport default class SelectIcon extends React.PureComponent {\n    render() {\n        return (\n            <FormattedMessage\n                id='generic_icons.select'\n                defaultMessage='Select Icon'\n            >\n                {(title) => (\n                    <i\n                        className='fa fa fa-plus-square'\n                        title={title}\n                    />\n                )}\n            </FormattedMessage>\n        );\n    }\n}\n","// Copyright (c) 2015-present Mattermost, Inc. All Rights Reserved.\n// See LICENSE.txt for license information.\n\nimport React from 'react';\n\nimport {sortChannelsByTypeAndDisplayName} from 'mattermost-redux/utils/channel_utils';\n\nimport {autocompleteChannelsForSearch} from 'actions/channel_actions.jsx';\nimport Constants from 'utils/constants.jsx';\nimport SelectIcon from 'components/icon/select_icon';\nimport BotBadge from 'components/widgets/badges/bot_badge.jsx';\n\nimport {getDirectTeammate} from 'utils/utils.jsx';\n\nimport Provider from './provider.jsx';\nimport Suggestion from './suggestion.jsx';\n\nfunction itemToName(item) {\n    if (item.type === Constants.DM_CHANNEL) {\n        return '@' + item.display_name;\n    }\n    if (item.type === Constants.GM_CHANNEL) {\n        return '@' + item.display_name.replace(/ /g, '');\n    }\n    return item.name;\n}\n\nclass SearchChannelSuggestion extends Suggestion {\n    render() {\n        const {item, isSelection} = this.props;\n\n        let className = 'search-autocomplete__item';\n        if (isSelection) {\n            className += ' selected a11y--focused';\n        }\n\n        const name = itemToName(item);\n\n        let tag = null;\n        if (item.type === Constants.DM_CHANNEL) {\n            const teammate = getDirectTeammate(item.id);\n            tag = (\n                <BotBadge\n                    show={Boolean(teammate && teammate.is_bot)}\n                    className='badge-popoverlist'\n                />\n            );\n        }\n\n        return (\n            <div\n                onClick={this.handleClick}\n                className={className}\n                {...Suggestion.baseProps}\n            >\n                <SelectIcon/>\n                <span className='search-autocomplete__name'>\n                    {name}\n                </span>\n                {tag}\n            </div>\n        );\n    }\n}\n\nexport default class SearchChannelProvider extends Provider {\n    handlePretextChanged(pretext, resultsCallback) {\n        const captured = (/\\b(?:in|channel):\\s*(\\S*)$/i).exec(pretext.toLowerCase());\n        if (captured) {\n            const channelPrefix = captured[1];\n\n            this.startNewRequest(channelPrefix);\n\n            autocompleteChannelsForSearch(\n                channelPrefix,\n                (data) => {\n                    if (this.shouldCancelDispatch(channelPrefix)) {\n                        return;\n                    }\n\n                    //\n                    // MM-12677 When this is migrated this needs to be fixed to pull the user's locale\n                    //\n                    const channels = data.sort(sortChannelsByTypeAndDisplayName.bind(null, 'en'));\n                    const channelNames = channels.map(itemToName);\n\n                    resultsCallback({\n                        matchedPretext: channelPrefix,\n                        terms: channelNames,\n                        items: channels,\n                        component: SearchChannelSuggestion,\n                    });\n                }\n            );\n        }\n\n        return Boolean(captured);\n    }\n}\n","// Copyright (c) 2015-present Mattermost, Inc. All Rights Reserved.\n// See LICENSE.txt for license information.\n\nimport $ from 'jquery';\nimport React from 'react';\nimport {Popover} from 'react-bootstrap';\nimport ReactDOM from 'react-dom';\nimport {FormattedMessage} from 'react-intl';\n\nimport Constants from 'utils/constants.jsx';\n\nimport SuggestionList from './suggestion_list.jsx';\n\nexport default class SearchSuggestionList extends SuggestionList {\n    static propTypes = {\n        ...SuggestionList.propTypes,\n    };\n\n    constructor(props) {\n        super(props);\n        this.suggestionReadOut = React.createRef();\n    }\n\n    generateLabel(item) {\n        if (item.username) {\n            this.currentLabel = item.username;\n            if ((item.first_name || item.last_name) && item.nickname) {\n                this.currentLabel += ` ${item.first_name} ${item.last_name} ${item.nickname}`;\n            } else if (item.nickname) {\n                this.currentLabel += ` ${item.nickname}`;\n            } else if (item.first_name || item.last_name) {\n                this.currentLabel += ` ${item.first_name} ${item.last_name}`;\n            }\n        } else if (item.type === Constants.DM_CHANNEL || item.type === Constants.GM_CHANNEL) {\n            this.currentLabel = item.display_name;\n        } else {\n            this.currentLabel = item.name;\n        }\n\n        if (this.currentLabel) {\n            this.currentLabel = this.currentLabel.toLowerCase();\n        }\n\n        this.announceLabel();\n    }\n\n    getContent() {\n        return $(ReactDOM.findDOMNode(this.refs.popover)).find('.popover-content');\n    }\n\n    renderChannelDivider(type) {\n        let text;\n        if (type === Constants.OPEN_CHANNEL) {\n            text = (\n                <FormattedMessage\n                    id='suggestion.search.public'\n                    defaultMessage='Public Channels'\n                />\n            );\n        } else if (type === Constants.PRIVATE_CHANNEL) {\n            text = (\n                <FormattedMessage\n                    id='suggestion.search.private'\n                    defaultMessage='Private Channels'\n                />\n            );\n        } else {\n            text = (\n                <FormattedMessage\n                    id='suggestion.search.direct'\n                    defaultMessage='Direct Messages'\n                />\n            );\n        }\n\n        return (\n            <div\n                key={type + '-divider'}\n                className='search-autocomplete__divider'\n            >\n                <span>{text}</span>\n            </div>\n        );\n    }\n\n    render() {\n        if (this.props.items.length === 0) {\n            return null;\n        }\n\n        const items = [];\n        for (let i = 0; i < this.props.items.length; i++) {\n            const item = this.props.items[i];\n            const term = this.props.terms[i];\n            const isSelection = term === this.props.selection;\n\n            // ReactComponent names need to be upper case when used in JSX\n            const Component = this.props.components[i];\n\n            // temporary hack to add dividers between public and private channels in the search suggestion list\n            if (this.props.renderDividers) {\n                if (i === 0 || item.type !== this.props.items[i - 1].type) {\n                    if (item.type === Constants.OPEN_CHANNEL) {\n                        items.push(this.renderChannelDivider(Constants.OPEN_CHANNEL));\n                    } else if (item.type === Constants.PRIVATE_CHANNEL) {\n                        items.push(this.renderChannelDivider(Constants.PRIVATE_CHANNEL));\n                    } else if (i === 0 || this.props.items[i - 1].type === Constants.OPEN_CHANNEL || this.props.items[i - 1].type === Constants.PRIVATE_CHANNEL) {\n                        items.push(this.renderChannelDivider(Constants.DM_CHANNEL));\n                    }\n                }\n            }\n\n            if (isSelection) {\n                this.currentItem = item;\n            }\n\n            items.push(\n                <Component\n                    key={term}\n                    ref={term}\n                    item={item}\n                    term={term}\n                    matchedPretext={this.props.matchedPretext[i]}\n                    isSelection={isSelection}\n                    onClick={this.props.onCompleteWord}\n                />\n            );\n        }\n\n        return (\n            <Popover\n                ref='popover'\n                id='search-autocomplete__popover'\n                className='search-help-popover autocomplete visible'\n                placement='bottom'\n            >\n                <div\n                    ref={this.suggestionReadOut}\n                    aria-live='polite'\n                    className='hidden-label'\n                />\n                {items}\n            </Popover>\n        );\n    }\n}\n","// Copyright (c) 2015-present Mattermost, Inc. All Rights Reserved.\n// See LICENSE.txt for license information.\n\nimport PropTypes from 'prop-types';\nimport React from 'react';\nimport {Popover} from 'react-bootstrap';\n\nexport default class SuggestionDate extends React.PureComponent {\n    static propTypes = {\n        onCompleteWord: PropTypes.func.isRequired,\n        items: PropTypes.array.isRequired,\n        terms: PropTypes.array.isRequired,\n        components: PropTypes.array.isRequired,\n        matchedPretext: PropTypes.array.isRequired,\n    };\n\n    render() {\n        if (this.props.items.length === 0) {\n            return null;\n        }\n\n        const item = this.props.items[0];\n        const term = this.props.terms[0];\n\n        // ReactComponent names need to be upper case when used in JSX\n        const Component = this.props.components[0];\n\n        const itemComponent = (\n            <Component\n                key={term}\n                ref={term}\n                item={item}\n                term={term}\n                matchedPretext={this.props.matchedPretext[0]}\n                isSelection={false}\n                onClick={this.props.onCompleteWord}\n            />\n        );\n\n        return (\n            <Popover\n                ref='popover'\n                id='search-autocomplete__popover'\n                className='search-help-popover autocomplete visible'\n                placement='bottom'\n            >\n                {itemComponent}\n            </Popover>\n        );\n    }\n}\n","// Copyright (c) 2015-present Mattermost, Inc. All Rights Reserved.\n// See LICENSE.txt for license information.\n\nimport React from 'react';\n\nimport {autocompleteUsersInTeam} from 'actions/user_actions.jsx';\nimport * as Utils from 'utils/utils.jsx';\nimport BotBadge from 'components/widgets/badges/bot_badge.jsx';\nimport SelectIcon from 'components/icon/select_icon';\n\nimport Provider from './provider.jsx';\nimport Suggestion from './suggestion.jsx';\n\nclass SearchUserSuggestion extends Suggestion {\n    render() {\n        const {item, isSelection} = this.props;\n\n        let className = 'search-autocomplete__item';\n        if (isSelection) {\n            className += ' selected a11y--focused';\n        }\n\n        const username = item.username;\n        let description = '';\n\n        if ((item.first_name || item.last_name) && item.nickname) {\n            description = `- ${Utils.getFullName(item)} (${item.nickname})`;\n        } else if (item.nickname) {\n            description = `- (${item.nickname})`;\n        } else if (item.first_name || item.last_name) {\n            description = `- ${Utils.getFullName(item)}`;\n        }\n\n        return (\n            <div\n                className={className}\n                onClick={this.handleClick}\n                {...Suggestion.baseProps}\n            >\n                <SelectIcon/>\n                <img\n                    alt={''}\n                    className='profile-img rounded'\n                    src={Utils.imageURLForUser(item)}\n                />\n                <div className='mention--align'>\n                    <span>\n                        {username}\n                    </span>\n                    <BotBadge\n                        show={Boolean(item.is_bot)}\n                        className='badge-autocomplete'\n                    />\n                    <span className='mention__fullname'>\n                        {' '}\n                        {description}\n                    </span>\n                </div>\n            </div>\n        );\n    }\n}\n\nexport default class SearchUserProvider extends Provider {\n    handlePretextChanged(pretext, resultsCallback) {\n        const captured = (/\\bfrom:\\s*(\\S*)$/i).exec(pretext.toLowerCase());\n        if (captured) {\n            const usernamePrefix = captured[1];\n\n            this.startNewRequest(usernamePrefix);\n\n            autocompleteUsersInTeam(\n                usernamePrefix,\n                (data) => {\n                    if (this.shouldCancelDispatch(usernamePrefix)) {\n                        return;\n                    }\n\n                    const users = Object.assign([], data.users);\n                    const mentions = users.map((user) => user.username);\n\n                    resultsCallback({\n                        matchedPretext: usernamePrefix,\n                        terms: mentions,\n                        items: users,\n                        component: SearchUserSuggestion,\n                    });\n                }\n            );\n        }\n\n        return Boolean(captured);\n    }\n\n    allowDividers() {\n        return false;\n    }\n}\n","// Copyright (c) 2015-present Mattermost, Inc. All Rights Reserved.\n// See LICENSE.txt for license information.\n\nimport React from 'react';\n\nimport DayPicker from 'react-day-picker';\n\nimport Provider from './provider.jsx';\nimport Suggestion from './suggestion.jsx';\n\nimport 'react-day-picker/lib/style.css';\n\nclass SearchDateSuggestion extends Suggestion {\n    constructor(props) {\n        super(props);\n        this.handleDayClick = this.handleDayClick.bind(this);\n    }\n\n    handleDayClick(day) {\n        const dayString = day.toISOString().split('T')[0];\n        this.props.onClick(dayString, this.props.matchedPretext);\n    }\n\n    render() {\n        return (\n            <DayPicker\n                onDayClick={this.handleDayClick}\n                showOutsideDays={true}\n            />\n        );\n    }\n}\n\nexport default class SearchDateProvider extends Provider {\n    handlePretextChanged(pretext, resultsCallback) {\n        const captured = (/\\b(?:on|before|after):\\s*(\\S*)$/i).exec(pretext.toLowerCase());\n        if (captured) {\n            const datePrefix = captured[1];\n\n            this.startNewRequest(datePrefix);\n\n            const dates = Object.assign([], [{label: 'Selected Date', date: datePrefix}]);\n            const terms = dates.map((date) => date.date);\n\n            resultsCallback({\n                matchedPretext: datePrefix,\n                terms,\n                items: dates,\n                component: SearchDateSuggestion,\n            });\n        }\n\n        return Boolean(captured);\n    }\n\n    allowDividers() {\n        return false;\n    }\n\n    presentationType() {\n        return 'date';\n    }\n}\n","// Copyright (c) 2015-present Mattermost, Inc. All Rights Reserved.\n// See LICENSE.txt for license information.\n\nimport PropTypes from 'prop-types';\nimport React from 'react';\nimport {FormattedMessage} from 'react-intl';\nimport {OverlayTrigger, Tooltip} from 'react-bootstrap';\n\nimport {localizeMessage} from 'utils/utils.jsx';\nimport {Constants} from 'utils/constants';\nimport {t} from 'utils/i18n';\n\nexport default function HeaderIconWrapper({\n    iconComponent,\n    ariaLabel,\n    buttonClass,\n    buttonId,\n    onClick,\n    tooltipKey,\n    tooltipText,\n}) {\n    const toolTips = {\n        flaggedPosts: {\n            class: 'text-nowrap',\n            id: 'flaggedTooltip',\n            messageID: t('channel_header.flagged'),\n            message: 'Flagged Posts',\n        },\n        pinnedPosts: {\n            class: '',\n            id: 'pinnedPostTooltip',\n            messageID: t('channel_header.pinnedPosts'),\n            message: 'Pinned Posts',\n        },\n        recentMentions: {\n            class: '',\n            id: 'recentMentionsTooltip',\n            messageID: t('channel_header.recentMentions'),\n            message: 'Recent Mentions',\n        },\n        search: {\n            class: '',\n            id: 'searchTooltip',\n            messageID: t('channel_header.search'),\n            message: 'Search',\n        },\n    };\n\n    function getTooltip(key) {\n        if (toolTips[key] == null) {\n            return null;\n        }\n\n        return (\n            <Tooltip\n                id={toolTips[key].id}\n                className={toolTips[key].class}\n            >\n                <FormattedMessage\n                    id={toolTips[key].messageID}\n                    defaultMessage={toolTips[key].message}\n                />\n            </Tooltip>\n        );\n    }\n\n    let tooltip;\n    if (tooltipKey === 'plugin' && tooltipText) {\n        tooltip = (\n            <Tooltip\n                id='pluginTooltip'\n                className=''\n            >\n                <span>{tooltipText}</span>\n            </Tooltip>\n        );\n    } else {\n        tooltip = getTooltip(tooltipKey);\n    }\n\n    let ariaLabelText;\n    if (ariaLabel) {\n        ariaLabelText = `${localizeMessage(toolTips[tooltipKey].messageID, toolTips[tooltipKey].message)}`;\n    }\n\n    if (tooltip) {\n        return (\n            <div className='flex-child'>\n                <OverlayTrigger\n                    trigger={['hover']}\n                    delayShow={Constants.OVERLAY_TIME_DELAY}\n                    placement='bottom'\n                    overlay={tooltip}\n                >\n                    <button\n                        id={buttonId}\n                        aria-label={ariaLabelText}\n                        className={buttonClass || 'channel-header__icon icon--hidden style--none'}\n                        onClick={onClick}\n                    >\n                        {iconComponent}\n                    </button>\n                </OverlayTrigger>\n            </div>\n        );\n    }\n\n    return (\n        <div className='flex-child'>\n            <button\n                id={buttonId}\n                className={buttonClass || 'channel-header__icon icon--hidden style--none'}\n                onClick={onClick}\n            >\n                {iconComponent}\n            </button>\n        </div>\n    );\n}\n\nHeaderIconWrapper.propTypes = {\n    ariaLabel: PropTypes.bool,\n    buttonClass: PropTypes.string,\n    buttonId: PropTypes.string.isRequired,\n    iconComponent: PropTypes.element.isRequired,\n    onClick: PropTypes.func.isRequired,\n    tooltipKey: PropTypes.string,\n    tooltipText: PropTypes.string,\n};\n","// Copyright (c) 2015-present Mattermost, Inc. All Rights Reserved.\n// See LICENSE.txt for license information.\n\nimport React, {PureComponent} from 'react';\nimport PropTypes from 'prop-types';\nimport {FormattedMessage} from 'react-intl';\n\nimport FormattedMarkdownMessage from 'components/formatted_markdown_message.jsx';\n\nexport default class SearchHint extends PureComponent {\n    static propTypes = {\n        withTitle: PropTypes.bool,\n    }\n\n    render() {\n        return (\n            <React.Fragment>\n                {this.props.withTitle &&\n                <h4>\n                    <FormattedMessage\n                        id='search_bar.usage.title'\n                        defaultMessage='Search Options'\n                    />\n                </h4>\n                }\n                <FormattedMarkdownMessage\n                    id='search_bar.usage.tips'\n                    defaultMessage='* Use **\"quotation marks\"** to search for phrases\\n* Use **from:** to find posts from specific users and **in:** to find posts in specific channels\\n* Use **on:** to find posts on a specific date\\n* Use **before:** to find posts before a specific date\\n* Use **after:** to find posts after a specific date'\n                />\n            </React.Fragment>\n        );\n    }\n}\n","// Copyright (c) 2015-present Mattermost, Inc. All Rights Reserved.\n// See LICENSE.txt for license information.\n\nimport React from 'react';\nimport {FormattedMessage} from 'react-intl';\n\nexport default class MentionsIcon extends React.PureComponent {\n    render() {\n        return (\n            <span {...this.props}>\n                <FormattedMessage\n                    id='generic_icons.mention'\n                    defaultMessage='Mention Icon'\n                >\n                    {(ariaLabel) => (\n                        <svg\n                            width='14px'\n                            height='14px'\n                            viewBox='0 0 20 20'\n                            version='1.1'\n                            role='icon'\n                            aria-label={ariaLabel}\n                        >\n                            <g\n                                stroke='none'\n                                strokeWidth='1'\n                                fill='inherit'\n                                fillRule='evenodd'\n                            >\n                                <g\n                                    transform='translate(-1057.000000, -31.000000)'\n                                    fill='inherit'\n                                >\n                                    <g>\n                                        <g transform='translate(1049.000000, 22.000000)'>\n                                            <path d='M17.4296875,15.8867188 C15.9882812,15.8867188 15.1210938,17.0351562 15.1210938,18.96875 C15.1210938,20.8789062 15.9882812,22.0507812 17.4179688,22.0507812 C18.8945312,22.0507812 19.84375,20.8554688 19.84375,18.96875 C19.84375,17.0820312 18.90625,15.8867188 17.4296875,15.8867188 Z M17.8398438,9.125 C23.3242188,9.125 27.25,12.59375 27.25,17.7734375 C27.25,21.5117188 25.5625,23.9609375 22.7734375,23.9609375 C21.4023438,23.9609375 20.265625,23.1992188 20.078125,22.0390625 L19.9609375,22.0390625 C19.46875,23.2226562 18.4140625,23.8789062 17.0429688,23.8789062 C14.6054687,23.8789062 12.9648438,21.8867188 12.9648438,18.9101562 C12.9648438,16.0625 14.6171875,14.09375 16.9960938,14.09375 C18.25,14.09375 19.3632812,14.7382812 19.8085938,15.7460938 L19.9375,15.7460938 L19.9375,14.328125 L21.9179688,14.328125 L21.9179688,20.984375 C21.9179688,21.7578125 22.328125,22.2851562 23.171875,22.2851562 C24.4726562,22.2851562 25.421875,20.6679688 25.421875,17.8320312 C25.421875,13.5664062 22.2929688,10.7421875 17.7109375,10.7421875 C13.1640625,10.7421875 9.90625,14.140625 9.90625,18.96875 C9.90625,24.1367188 13.3515625,27.0429688 18.109375,27.0429688 C19.5625,27.0429688 21.0507812,26.84375 21.7773438,26.5390625 L21.7773438,28.15625 C20.78125,28.484375 19.4570312,28.671875 18.0273438,28.671875 C12.2382812,28.671875 8.078125,25.109375 8.078125,18.8984375 C8.078125,13.0625 12.0859375,9.125 17.8398438,9.125 Z'/>\n                                        </g>\n                                    </g>\n                                </g>\n                            </g>\n                        </svg>\n                    )}\n                </FormattedMessage>\n            </span>\n        );\n    }\n}\n","// Copyright (c) 2015-present Mattermost, Inc. All Rights Reserved.\n// See LICENSE.txt for license information.\n\nimport PropTypes from 'prop-types';\nimport React from 'react';\nimport {Popover, OverlayTrigger, Tooltip} from 'react-bootstrap';\nimport {FormattedMessage} from 'react-intl';\n\nimport Constants from 'utils/constants.jsx';\nimport * as Utils from 'utils/utils.jsx';\nimport SearchChannelProvider from 'components/suggestion/search_channel_provider.jsx';\nimport SearchSuggestionList from 'components/suggestion/search_suggestion_list.jsx';\nimport SuggestionDate from 'components/suggestion/suggestion_date.jsx';\nimport SearchUserProvider from 'components/suggestion/search_user_provider.jsx';\nimport SearchDateProvider from 'components/suggestion/search_date_provider.jsx';\nimport SuggestionBox from 'components/suggestion/suggestion_box.jsx';\nimport HeaderIconWrapper from 'components/channel_header/components/header_icon_wrapper';\nimport SearchHint from 'components/search_hint/search_hint';\nimport FlagIcon from 'components/svg/flag_icon';\nimport MentionsIcon from 'components/svg/mentions_icon';\nimport SearchIcon from 'components/svg/search_icon';\nimport LoadingSpinner from 'components/widgets/loading/loading_spinner.jsx';\n\nconst {KeyCodes} = Constants;\n\nexport default class SearchBar extends React.Component {\n    static propTypes = {\n        isSearchingTerm: PropTypes.bool,\n        searchTerms: PropTypes.string,\n        isMentionSearch: PropTypes.bool,\n        isFlaggedPosts: PropTypes.bool,\n        showMentionFlagBtns: PropTypes.bool,\n        isFocus: PropTypes.bool,\n        actions: PropTypes.shape({\n            updateSearchTerms: PropTypes.func,\n            showSearchResults: PropTypes.func,\n            showMentions: PropTypes.func,\n            showFlaggedPosts: PropTypes.func,\n            closeRightHandSide: PropTypes.func,\n        }),\n    };\n\n    static defaultProps = {\n        showMentionFlagBtns: true,\n        isFocus: false,\n    };\n\n    constructor() {\n        super();\n\n        this.state = {\n            focused: false,\n        };\n\n        this.suggestionProviders = [new SearchChannelProvider(), new SearchUserProvider(), new SearchDateProvider()];\n    }\n\n    componentDidMount() {\n        if (Utils.isMobile()) {\n            setTimeout(() => {\n                const element = document.querySelector('.app__body .sidebar--menu');\n                if (element) {\n                    element.classList.remove('visible');\n                }\n            });\n        }\n    }\n\n    handleClose = () => {\n        this.props.actions.closeRightHandSide();\n    }\n\n    handleKeyDown = (e) => {\n        if (Utils.isKeyPressed(e, KeyCodes.ESCAPE)) {\n            e.stopPropagation();\n            e.preventDefault();\n        }\n    }\n\n    handleChange = (e) => {\n        var term = e.target.value;\n        this.props.actions.updateSearchTerms(term);\n    }\n\n    handleUserBlur = () => {\n        // add time out so that the pinned and member buttons are clickable\n        // when focus is released from the search box.\n        setTimeout(() => {\n            this.setState({focused: false});\n        }, 200);\n    }\n\n    handleClear = () => {\n        this.props.actions.updateSearchTerms('');\n    }\n\n    handleUserFocus = () => {\n        this.setState({focused: true});\n    }\n\n    handleSearch = async (terms) => {\n        if (terms.length) {\n            const {error} = await this.props.actions.showSearchResults();\n\n            if (!error) {\n                this.handleSearchOnSuccess();\n            }\n        }\n    }\n\n    handleSearchOnSuccess = () => {\n        if (Utils.isMobile() && this.search) {\n            this.search.value = '';\n        }\n    }\n\n    handleSubmit = (e) => {\n        e.preventDefault();\n        const terms = this.props.searchTerms.trim();\n\n        if (terms.length === 0) {\n            return;\n        }\n\n        this.handleSearch(terms);\n\n        this.search.blur();\n    }\n\n    searchMentions = (e) => {\n        e.preventDefault();\n        if (this.props.isMentionSearch) {\n            // Close\n            this.props.actions.closeRightHandSide();\n        } else {\n            this.props.actions.showMentions();\n        }\n    }\n\n    getFlagged = (e) => {\n        e.preventDefault();\n        if (this.props.isFlaggedPosts) {\n            this.props.actions.closeRightHandSide();\n        } else {\n            this.props.actions.showFlaggedPosts();\n        }\n    }\n\n    renderHintPopover() {\n        if (Utils.isMobile()) {\n            return null;\n        }\n\n        let helpClass = 'search-help-popover';\n        if (!this.props.searchTerms && this.state.focused) {\n            helpClass += ' visible';\n        }\n\n        return (\n            <Popover\n                id='searchbar-help-popup'\n                placement='bottom'\n                className={helpClass}\n            >\n                <SearchHint withTitle={true}/>\n            </Popover>\n        );\n    }\n\n    getSearch = (node) => {\n        this.search = node;\n    }\n\n    render() {\n        let mentionBtn;\n        let flagBtn;\n        if (this.props.showMentionFlagBtns) {\n            var mentionBtnClass = this.props.isMentionSearch ? 'active' : '';\n\n            mentionBtn = (\n                <HeaderIconWrapper\n                    iconComponent={\n                        <MentionsIcon\n                            className='icon icon__mentions'\n                            aria-hidden='true'\n                        />\n                    }\n                    buttonClass={'channel-header__icon style--none ' + mentionBtnClass}\n                    buttonId={'channelHeaderMentionButton'}\n                    onClick={this.searchMentions}\n                    tooltipKey={'recentMentions'}\n                />\n            );\n\n            var flagBtnClass = this.props.isFlaggedPosts ? 'active' : '';\n\n            flagBtn = (\n                <HeaderIconWrapper\n                    iconComponent={\n                        <FlagIcon className='icon icon__flag'/>\n                    }\n                    buttonClass={'channel-header__icon style--none ' + flagBtnClass}\n                    buttonId={'channelHeaderFlagButton'}\n                    onClick={this.getFlagged}\n                    tooltipKey={'flaggedPosts'}\n                />\n            );\n        }\n\n        const showClear = !this.props.isSearchingTerm && this.props.searchTerms && this.props.searchTerms.trim() !== '';\n\n        let searchFormClass = 'search__form';\n        if (this.state.focused) {\n            searchFormClass += ' focused';\n        }\n\n        const searchClearTooltip = (\n            <Tooltip id='searchClearTooltip'>\n                <FormattedMessage\n                    id='search_bar.clear'\n                    defaultMessage='Clear search query'\n                />\n            </Tooltip>\n        );\n\n        return (\n            <div className='sidebar-right__table'>\n                <div className='sidebar-collapse__container'>\n                    <div\n                        id='sidebarCollapse'\n                        className='sidebar-collapse'\n                        onClick={this.handleClose}\n                    >\n                        <FormattedMessage\n                            id='generic_icons.back'\n                            defaultMessage='Back Icon'\n                        >\n                            {(title) => (\n                                <span\n                                    className='fa fa-2x fa-angle-left'\n                                    title={title}\n                                />\n                            )}\n                        </FormattedMessage>\n                    </div>\n                </div>\n                <div\n                    id='searchFormContainer'\n                    className='search-form__container'\n                >\n                    <form\n                        role='application'\n                        className={searchFormClass}\n                        onSubmit={this.handleSubmit}\n                        style={style.searchForm}\n                        autoComplete='off'\n                    >\n                        <SearchIcon\n                            id='searchIcon'\n                            className='search__icon'\n                            aria-hidden='true'\n                        />\n                        <SuggestionBox\n                            ref={this.getSearch}\n                            id='searchBox'\n                            tabIndex='0'\n                            className='search-bar a11y__region'\n                            data-a11y-sort-order='8'\n                            aria-describedby='searchbar-help-popup'\n                            placeholder={Utils.localizeMessage('search_bar.search', 'Search')}\n                            value={this.props.searchTerms}\n                            onFocus={this.handleUserFocus}\n                            onBlur={this.handleUserBlur}\n                            onChange={this.handleChange}\n                            onKeyDown={this.handleKeyDown}\n                            listComponent={SearchSuggestionList}\n                            dateComponent={SuggestionDate}\n                            providers={this.suggestionProviders}\n                            type='search'\n                            autoFocus={this.props.isFocus && this.props.searchTerms === ''}\n                            delayInputUpdate={true}\n                            renderDividers={true}\n                        />\n                        {showClear &&\n                            <div\n                                id='searchClearButton'\n                                className='sidebar__search-clear visible'\n                                onClick={this.handleClear}\n                            >\n                                <OverlayTrigger\n                                    delayShow={Constants.OVERLAY_TIME_DELAY}\n                                    placement='bottom'\n                                    overlay={searchClearTooltip}\n                                >\n                                    <span\n                                        className='sidebar__search-clear-x'\n                                        aria-hidden='true'\n                                    >\n                                        {'×'}\n                                    </span>\n                                </OverlayTrigger>\n                            </div>}\n                        {this.props.isSearchingTerm && <LoadingSpinner/>}\n                        {this.renderHintPopover()}\n                    </form>\n                </div>\n                {mentionBtn}\n                {flagBtn}\n            </div>\n        );\n    }\n}\n\nconst style = {\n    searchForm: {overflow: 'visible'},\n};\n","// Copyright (c) 2015-present Mattermost, Inc. All Rights Reserved.\n// See LICENSE.txt for license information.\n\nimport {connect} from 'react-redux';\nimport {bindActionCreators} from 'redux';\n\nimport {\n    updateSearchTerms,\n    showSearchResults,\n    showMentions,\n    showFlaggedPosts,\n    closeRightHandSide,\n} from 'actions/views/rhs';\nimport {getRhsState, getSearchTerms, getIsSearchingTerm} from 'selectors/rhs';\nimport {RHSStates} from 'utils/constants.jsx';\n\nimport SearchBar from './search_bar.jsx';\n\nfunction mapStateToProps(state) {\n    const rhsState = getRhsState(state);\n\n    return {\n        isSearchingTerm: getIsSearchingTerm(state),\n        searchTerms: getSearchTerms(state),\n        isMentionSearch: rhsState === RHSStates.MENTION,\n        isFlaggedPosts: rhsState === RHSStates.FLAG,\n    };\n}\n\nfunction mapDispatchToProps(dispatch) {\n    return {\n        actions: bindActionCreators({\n            updateSearchTerms,\n            showSearchResults,\n            showMentions,\n            showFlaggedPosts,\n            closeRightHandSide,\n        }, dispatch),\n    };\n}\n\nexport default connect(mapStateToProps, mapDispatchToProps)(SearchBar);\n","// Copyright (c) 2015-present Mattermost, Inc. All Rights Reserved.\n// See LICENSE.txt for license information.\n\nimport PropTypes from 'prop-types';\nimport React from 'react';\nimport {OverlayTrigger, Tooltip} from 'react-bootstrap';\nimport {FormattedMessage} from 'react-intl';\n\nimport Constants from 'utils/constants.jsx';\n\nexport default class SearchResultsHeader extends React.Component {\n    static propTypes = {\n        children: PropTypes.element,\n        actions: PropTypes.shape({\n            closeRightHandSide: PropTypes.func,\n            toggleRhsExpanded: PropTypes.func.isRequired,\n        }),\n    };\n\n    render() {\n        const closeSidebarTooltip = (\n            <Tooltip id='closeSidebarTooltip'>\n                <FormattedMessage\n                    id='rhs_header.closeSidebarTooltip'\n                    defaultMessage='Close Sidebar'\n                />\n            </Tooltip>\n        );\n\n        const expandSidebarTooltip = (\n            <Tooltip id='expandSidebarTooltip'>\n                <FormattedMessage\n                    id='rhs_header.expandSidebarTooltip'\n                    defaultMessage='Expand Sidebar'\n                />\n            </Tooltip>\n        );\n\n        const shrinkSidebarTooltip = (\n            <Tooltip id='shrinkSidebarTooltip'>\n                <FormattedMessage\n                    id='rhs_header.shrinkSidebarTooltip'\n                    defaultMessage='Shrink Sidebar'\n                />\n            </Tooltip>\n        );\n\n        return (\n            <div className='sidebar--right__header'>\n                <span className='sidebar--right__title'>{this.props.children}</span>\n                <div className='pull-right'>\n                    <button\n                        type='button'\n                        className='sidebar--right__expand'\n                        aria-label='Expand'\n                        onClick={this.props.actions.toggleRhsExpanded}\n                    >\n                        <OverlayTrigger\n                            delayShow={Constants.OVERLAY_TIME_DELAY}\n                            placement='top'\n                            overlay={expandSidebarTooltip}\n                        >\n                            <FormattedMessage\n                                id='rhs_header.expandSidebarTooltip.icon'\n                                defaultMessage='Expand Sidebar Icon'\n                            >\n                                {(ariaLabel) => (\n                                    <i\n                                        className='fa fa-expand'\n                                        aria-label={ariaLabel}\n                                    />\n                                )}\n                            </FormattedMessage>\n                        </OverlayTrigger>\n                        <OverlayTrigger\n                            delayShow={Constants.OVERLAY_TIME_DELAY}\n                            placement='top'\n                            overlay={shrinkSidebarTooltip}\n                        >\n                            <FormattedMessage\n                                id='rhs_header.expandTooltip.icon'\n                                defaultMessage='Shrink Sidebar Icon'\n                            >\n                                {(ariaLabel) => (\n                                    <i\n                                        className='fa fa-compress'\n                                        aria-label={ariaLabel}\n                                    />\n                                )}\n                            </FormattedMessage>\n                        </OverlayTrigger>\n                    </button>\n                    <button\n                        id='searchResultsCloseButton'\n                        type='button'\n                        className='sidebar--right__close'\n                        aria-label='Close'\n                        onClick={this.props.actions.closeRightHandSide}\n                    >\n                        <OverlayTrigger\n                            delayShow={Constants.OVERLAY_TIME_DELAY}\n                            placement='top'\n                            overlay={closeSidebarTooltip}\n                        >\n                            <FormattedMessage\n                                id='rhs_header.closeTooltip.icon'\n                                defaultMessage='Close Sidebar Icon'\n                            >\n                                {(ariaLabel) => (\n                                    <i\n                                        className='fa fa-sign-out'\n                                        aria-label={ariaLabel}\n                                    />\n                                )}\n                            </FormattedMessage>\n                        </OverlayTrigger>\n                    </button>\n                </div>\n            </div>\n        );\n    }\n}\n","// Copyright (c) 2015-present Mattermost, Inc. All Rights Reserved.\n// See LICENSE.txt for license information.\n\nimport {connect} from 'react-redux';\nimport {bindActionCreators} from 'redux';\n\nimport {\n    closeRightHandSide,\n    toggleRhsExpanded,\n} from 'actions/views/rhs';\n\nimport SearchResultsHeader from './search_results_header.jsx';\n\nfunction mapDispatchToProps(dispatch) {\n    return {\n        actions: bindActionCreators({\n            closeRightHandSide,\n            toggleRhsExpanded,\n        }, dispatch),\n    };\n}\n\nexport default connect(null, mapDispatchToProps)(SearchResultsHeader);\n","// Copyright (c) 2015-present Mattermost, Inc. All Rights Reserved.\n// See LICENSE.txt for license information.\n\nimport React from 'react';\nimport {FormattedMessage} from 'react-intl';\n\nexport default class ReplyIcon extends React.PureComponent {\n    render() {\n        return (\n            <span {...this.props}>\n                <FormattedMessage\n                    id='generic_icons.reply'\n                    defaultMessage='Reply Icon'\n                >\n                    {(ariaLabel) => (\n                        <svg\n                            id='Layer_1'\n                            x='0px'\n                            y='0px'\n                            width='17px'\n                            height='17px'\n                            viewBox='-158 242 18 18'\n                            style={style}\n                            role='icon'\n                            aria-label={ariaLabel}\n                        >\n                            <path d='M-142.2,252.6c-2-3-4.8-4.7-8.3-4.8v-3.3c0-0.2-0.1-0.3-0.2-0.3s-0.3,0-0.4,0.1l-6.9,6.2c-0.1,0.1-0.1,0.2-0.1,0.3 c0,0.1,0,0.2,0.1,0.3l6.9,6.4c0.1,0.1,0.3,0.1,0.4,0.1c0.1-0.1,0.2-0.2,0.2-0.4v-3.8c4.2,0,7.4,0.4,9.6,4.4c0.1,0.1,0.2,0.2,0.3,0.2 c0,0,0.1,0,0.1,0c0.2-0.1,0.3-0.3,0.2-0.4C-140.2,257.3-140.6,255-142.2,252.6z M-150.8,252.5c-0.2,0-0.4,0.2-0.4,0.4v3.3l-6-5.5 l6-5.3v2.8c0,0.2,0.2,0.4,0.4,0.4c3.3,0,6,1.5,8,4.5c0.5,0.8,0.9,1.6,1.2,2.3C-144,252.8-147.1,252.5-150.8,252.5z'/>\n                        </svg>\n                    )}\n                </FormattedMessage>\n            </span>\n        );\n    }\n}\n\nconst style = {\n    enableBackground: 'new -158 242 18 18',\n};\n","// Copyright (c) 2015-present Mattermost, Inc. All Rights Reserved.\n// See LICENSE.txt for license information.\n\nimport PropTypes from 'prop-types';\nimport React from 'react';\nimport {OverlayTrigger, Tooltip} from 'react-bootstrap';\nimport {FormattedMessage} from 'react-intl';\n\nimport {Locations} from 'utils/constants.jsx';\nimport {localizeMessage} from 'utils/utils.jsx';\n\nimport ReplyIcon from 'components/svg/reply_icon';\n\nexport default class CommentIcon extends React.PureComponent {\n    static propTypes = {\n        location: PropTypes.oneOf([Locations.CENTER, Locations.SEARCH]).isRequired,\n        handleCommentClick: PropTypes.func.isRequired,\n        searchStyle: PropTypes.string,\n        commentCount: PropTypes.number,\n        postId: PropTypes.string,\n        extraClass: PropTypes.string,\n    };\n\n    static defaultProps = {\n        searchStyle: '',\n        commentCount: 0,\n        extraClass: '',\n        location: Locations.CENTER,\n    };\n\n    render() {\n        let commentCountSpan = '';\n        let iconStyle = 'comment-icon__container';\n        if (this.props.commentCount > 0) {\n            iconStyle += ' icon--show';\n            commentCountSpan = (\n                <span className='comment-count'>\n                    {this.props.commentCount}\n                </span>\n            );\n        } else if (this.props.searchStyle !== '') {\n            iconStyle = iconStyle + ' ' + this.props.searchStyle;\n        }\n\n        const tooltip = (\n            <Tooltip\n                id='comment-icon-tooltip'\n                className='hidden-xs'\n            >\n                <FormattedMessage\n                    id='post_info.comment_icon.tooltip.reply'\n                    defaultMessage='Reply'\n                />\n            </Tooltip>\n        );\n\n        return (\n            <button\n                id={`${this.props.location}_commentIcon_${this.props.postId}`}\n                aria-label={localizeMessage('post_info.comment_icon.tooltip.reply', 'Reply').toLowerCase()}\n                className={iconStyle + ' color--link style--none ' + this.props.extraClass}\n                onClick={this.props.handleCommentClick}\n            >\n                <OverlayTrigger\n                    className='hidden-xs'\n                    delayShow={500}\n                    placement='top'\n                    overlay={tooltip}\n                >\n                    <span className='d-flex'>\n                        <ReplyIcon className='comment-icon'/>\n                        {commentCountSpan}\n                    </span>\n                </OverlayTrigger>\n            </button>\n        );\n    }\n}\n","// Copyright (c) 2015-present Mattermost, Inc. All Rights Reserved.\n// See LICENSE.txt for license information.\n\nimport React from 'react';\nimport PropTypes from 'prop-types';\nimport {FormattedMessage} from 'react-intl';\nimport {Posts} from 'mattermost-redux/constants/index';\nimport * as ReduxPostUtils from 'mattermost-redux/utils/post_utils';\nimport {OverlayTrigger, Tooltip} from 'react-bootstrap';\n\nimport PostMessageContainer from 'components/post_view/post_message_view';\nimport FileAttachmentListContainer from 'components/file_attachment_list';\nimport CommentIcon from 'components/common/comment_icon.jsx';\nimport DotMenu from 'components/dot_menu';\nimport PostProfilePicture from 'components/post_profile_picture';\nimport UserProfile from 'components/user_profile';\nimport DateSeparator from 'components/post_view/date_separator';\nimport PostBodyAdditionalContent from 'components/post_view/post_body_additional_content';\nimport PostFlagIcon from 'components/post_view/post_flag_icon';\nimport ArchiveIcon from 'components/svg/archive_icon';\nimport PostTime from 'components/post_view/post_time';\nimport {browserHistory} from 'utils/browser_history';\nimport BotBadge from 'components/widgets/badges/bot_badge.jsx';\nimport InfoSmallIcon from 'components/svg/info_small_icon';\n\nimport Constants, {Locations} from 'utils/constants.jsx';\nimport * as PostUtils from 'utils/post_utils.jsx';\nimport * as Utils from 'utils/utils.jsx';\n\nexport default class SearchResultsItem extends React.PureComponent {\n    static propTypes = {\n\n        /**\n        *  Data used for rendering post\n        */\n        post: PropTypes.object,\n\n        /**\n        * An array of strings in this post that were matched by the search\n        */\n        matches: PropTypes.array,\n\n        channelId: PropTypes.string,\n        channelName: PropTypes.string,\n        channelType: PropTypes.string,\n        channelIsArchived: PropTypes.bool,\n\n        /**\n        *  Flag for determining result display setting\n        */\n        compactDisplay: PropTypes.bool,\n\n        /**\n        *  Flag for highlighting mentions\n        */\n        isMentionSearch: PropTypes.bool,\n\n        /**\n        *  Flag for highlighting search term\n        */\n        term: PropTypes.string,\n\n        /**\n        *  Flag for determining result flag state\n        */\n        isFlagged: PropTypes.bool,\n\n        /**\n        *  Data used creating URl for jump to post\n        */\n        currentTeamName: PropTypes.string,\n\n        /**\n        *  Data used for delete in DotMenu\n        */\n        commentCountForPost: PropTypes.number,\n\n        /**\n         * Whether post username overrides are to be respected.\n         */\n        enablePostUsernameOverride: PropTypes.bool.isRequired,\n\n        /**\n         * Is the search results item from a bot.\n         */\n        isBot: PropTypes.bool.isRequired,\n\n        /**\n        *  Function used for closing LHS\n        */\n        actions: PropTypes.shape({\n            closeRightHandSide: PropTypes.func.isRequired,\n            selectPost: PropTypes.func.isRequired,\n            selectPostCard: PropTypes.func.isRequired,\n            setRhsExpanded: PropTypes.func.isRequired,\n        }).isRequired,\n    };\n\n    static defaultProps = {\n        isBot: false,\n        channelIsArchived: false,\n    };\n\n    constructor(props) {\n        super(props);\n\n        this.state = {\n            dropdownOpened: false,\n        };\n    }\n\n    handleFocusRHSClick = (e) => {\n        e.preventDefault();\n        this.props.actions.selectPost(this.props.post);\n    };\n\n    handleJumpClick = () => {\n        if (Utils.isMobile()) {\n            this.props.actions.closeRightHandSide();\n        }\n\n        this.props.actions.setRhsExpanded(false);\n        browserHistory.push(`/${this.props.currentTeamName}/pl/${this.props.post.id}`);\n    };\n\n    handleCardClick = (post) => {\n        if (!post) {\n            return;\n        }\n\n        this.props.actions.selectPostCard(post);\n    }\n\n    handleDropdownOpened = (isOpened) => {\n        this.setState({\n            dropdownOpened: isOpened,\n        });\n    };\n\n    renderPostTime = () => {\n        const post = this.props.post;\n\n        const isPermalink = !(Posts.POST_DELETED === post.state ||\n            ReduxPostUtils.isPostPendingOrFailed(post));\n\n        return (\n            <PostTime\n                isPermalink={isPermalink}\n                eventTime={post.create_at}\n                postId={post.id}\n                location={Locations.SEARCH}\n            />\n        );\n    };\n\n    getClassName = () => {\n        let className = 'post post--thread';\n\n        if (this.props.compactDisplay) {\n            className += ' post--compact';\n        }\n\n        if (this.state.dropdownOpened) {\n            className += ' post--hovered';\n        }\n\n        return className;\n    };\n\n    render() {\n        const {post, channelIsArchived, channelId, channelType} = this.props;\n        let {channelName} = this.props;\n\n        if (channelType === Constants.DM_CHANNEL) {\n            channelName = (\n                <FormattedMessage\n                    id='search_item.direct'\n                    defaultMessage='Direct Message (with {username})'\n                    values={{\n                        username: Utils.getDisplayNameByUser(Utils.getDirectTeammate(channelId)),\n                    }}\n                />\n            );\n        }\n\n        let overrideUsername;\n        let disableProfilePopover = false;\n        if (post.props &&\n            post.props.from_webhook &&\n            post.props.override_username &&\n            this.props.enablePostUsernameOverride) {\n            overrideUsername = post.props.override_username;\n            disableProfilePopover = true;\n        }\n\n        const profilePic = (\n            <PostProfilePicture\n                compactDisplay={this.props.compactDisplay}\n                post={post}\n                userId={post.user_id}\n            />\n        );\n\n        const profilePicContainer = (<div className='post__img'>{profilePic}</div>);\n\n        let postClass = '';\n        if (PostUtils.isEdited(this.props.post)) {\n            postClass += ' post--edited';\n        }\n\n        let fileAttachment = null;\n        if (post.file_ids && post.file_ids.length > 0) {\n            fileAttachment = (\n                <FileAttachmentListContainer\n                    post={post}\n                    compactDisplay={this.props.compactDisplay}\n                />\n            );\n        }\n\n        let message;\n        let flagContent;\n        let postInfoIcon;\n        let rhsControls;\n        if (post.state === Constants.POST_DELETED || post.state === Posts.POST_DELETED) {\n            message = (\n                <p>\n                    <FormattedMessage\n                        id='post_body.deleted'\n                        defaultMessage='(message deleted)'\n                    />\n                </p>\n            );\n        } else {\n            flagContent = (\n                <PostFlagIcon\n                    location={Locations.SEARCH}\n                    postId={post.id}\n                    isFlagged={this.props.isFlagged}\n                />\n            );\n\n            if (post.props && post.props.card) {\n                postInfoIcon = (\n                    <OverlayTrigger\n                        delayShow={Constants.OVERLAY_TIME_DELAY}\n                        placement='top'\n                        overlay={\n                            <Tooltip>\n                                <FormattedMessage\n                                    id='post_info.info.view_additional_info'\n                                    defaultMessage='View additional info'\n                                />\n                            </Tooltip>\n                        }\n                    >\n                        <button\n                            className='card-icon__container icon--show style--none'\n                            onClick={(e) => {\n                                e.preventDefault();\n                                this.handleCardClick(this.props.post);\n                            }}\n                        >\n                            <InfoSmallIcon\n                                className='icon icon__info'\n                                aria-hidden='true'\n                            />\n                        </button>\n                    </OverlayTrigger>\n                );\n            }\n\n            rhsControls = (\n                <div className='col__controls col__reply'>\n                    <DotMenu\n                        post={post}\n                        location={Locations.SEARCH}\n                        isFlagged={this.props.isFlagged}\n                        handleDropdownOpened={this.handleDropdownOpened}\n                        commentCount={this.props.commentCountForPost}\n                        isReadOnly={channelIsArchived || null}\n                    />\n                    <CommentIcon\n                        location={Locations.SEARCH}\n                        handleCommentClick={this.handleFocusRHSClick}\n                        postId={post.id}\n                        searchStyle={'search-item__comment'}\n                    />\n                    <a\n                        onClick={this.handleJumpClick}\n                        className='search-item__jump'\n                    >\n                        <FormattedMessage\n                            id='search_item.jump'\n                            defaultMessage='Jump'\n                        />\n                    </a>\n                </div>\n            );\n\n            message = (\n                <PostBodyAdditionalContent\n                    post={post}\n                    options={{\n                        searchTerm: this.props.term,\n                        searchMatches: this.props.matches,\n                    }}\n                >\n                    <PostMessageContainer\n                        post={post}\n                        options={{\n                            searchTerm: this.props.term,\n                            searchMatches: this.props.matches,\n                            mentionHighlight: this.props.isMentionSearch,\n                        }}\n                    />\n                </PostBodyAdditionalContent>\n            );\n        }\n\n        let pinnedBadge;\n        if (post.is_pinned) {\n            pinnedBadge = (\n                <span className='post__pinned-badge'>\n                    <FormattedMessage\n                        id='post_info.pinned'\n                        defaultMessage='Pinned'\n                    />\n                </span>\n            );\n        }\n\n        const currentPostDay = Utils.getDateForUnixTicks(post.create_at);\n\n        return (\n            <div\n                data-testid='search-item-container'\n                className='search-item__container'\n            >\n                <DateSeparator date={currentPostDay}/>\n                <div className={this.getClassName()}>\n                    <div className='search-channel__name'>\n                        {channelName}\n                        {channelIsArchived &&\n                            <span className='search-channel__archived'>\n                                <ArchiveIcon className='icon icon__archive channel-header-archived-icon svg-text-color'/>\n                                <FormattedMessage\n                                    id='search_item.channelArchived'\n                                    defaultMessage='Archived'\n                                />\n                            </span>\n                        }\n                    </div>\n                    <div\n                        role='application'\n                        className='post__content'\n                    >\n                        {profilePicContainer}\n                        <div>\n                            <div className='post__header'>\n                                <div className='col col__name'>\n                                    <UserProfile\n                                        userId={post.user_id}\n                                        overwriteName={overrideUsername}\n                                        disablePopover={disableProfilePopover}\n                                        isRHS={true}\n                                    />\n                                    <BotBadge show={Boolean(post.props && post.props.from_webhook && !this.props.isBot)}/>\n                                </div>\n                                <div className='col'>\n                                    {this.renderPostTime()}\n                                    {pinnedBadge}\n                                    {postInfoIcon}\n                                    {flagContent}\n                                </div>\n                                {rhsControls}\n                            </div>\n                            <div className='search-item-snippet post__body'>\n                                <div className={postClass}>\n                                    {message}\n                                    {fileAttachment}\n                                </div>\n                            </div>\n                        </div>\n                    </div>\n                </div>\n            </div>\n        );\n    }\n}\n","// Copyright (c) 2015-present Mattermost, Inc. All Rights Reserved.\n// See LICENSE.txt for license information.\n\nimport {connect} from 'react-redux';\nimport {bindActionCreators} from 'redux';\nimport {getChannel} from 'mattermost-redux/selectors/entities/channels';\nimport {getConfig} from 'mattermost-redux/selectors/entities/general';\nimport {getUser} from 'mattermost-redux/selectors/entities/users';\nimport {makeGetCommentCountForPost} from 'mattermost-redux/selectors/entities/posts';\nimport {getMyPreferences} from 'mattermost-redux/selectors/entities/preferences';\nimport {getCurrentTeam} from 'mattermost-redux/selectors/entities/teams';\nimport {isPostFlagged} from 'mattermost-redux/utils/post_utils';\n\nimport {\n    closeRightHandSide,\n    selectPostFromRightHandSideSearch,\n    selectPostCardFromRightHandSideSearch,\n    setRhsExpanded,\n} from 'actions/views/rhs';\n\nimport SearchResultsItem from './search_results_item.jsx';\n\nfunction mapStateToProps() {\n    const getCommentCountForPost = makeGetCommentCountForPost();\n\n    return (state, ownProps) => {\n        const config = getConfig(state);\n        const preferences = getMyPreferences(state);\n        const enablePostUsernameOverride = config.EnablePostUsernameOverride === 'true';\n        const {post} = ownProps;\n        const user = getUser(state, post.user_id);\n        const channel = getChannel(state, post.channel_id) || {delete_at: 0};\n\n        return {\n            channelId: channel.id,\n            channelName: channel.display_name,\n            channelType: channel.type,\n            channelIsArchived: channel.delete_at !== 0,\n            currentTeamName: getCurrentTeam(state).name,\n            commentCountForPost: getCommentCountForPost(state, {post}),\n            enablePostUsernameOverride,\n            isFlagged: isPostFlagged(post.id, preferences),\n            isBot: user ? user.is_bot : false,\n        };\n    };\n}\n\nfunction mapDispatchToProps(dispatch) {\n    return {\n        actions: bindActionCreators({\n            closeRightHandSide,\n            selectPost: selectPostFromRightHandSideSearch,\n            selectPostCard: selectPostCardFromRightHandSideSearch,\n            setRhsExpanded,\n        }, dispatch),\n    };\n}\n\nexport default connect(mapStateToProps, mapDispatchToProps)(SearchResultsItem);\n","// Copyright (c) 2015-present Mattermost, Inc. All Rights Reserved.\n// See LICENSE.txt for license information.\n\nimport React, {PureComponent} from 'react';\nimport PropTypes from 'prop-types';\nimport {FormattedMessage} from 'react-intl';\n\nexport default class DataRetentionHint extends PureComponent {\n    static propTypes = {\n        dataRetentionMessageRetentionDays: PropTypes.string,\n    }\n\n    render() {\n        return (\n            <li>\n                <FormattedMessage\n                    id='search_results.usage.dataRetention'\n                    defaultMessage='Only messages posted in the last {days} days are returned. Contact your System Administrator for more detail.'\n                    values={{\n                        days: this.props.dataRetentionMessageRetentionDays,\n                    }}\n                />\n            </li>\n        );\n    }\n}\n","// Copyright (c) 2015-present Mattermost, Inc. All Rights Reserved.\n// See LICENSE.txt for license information.\n\nimport React, {PureComponent} from 'react';\nimport PropTypes from 'prop-types';\nimport {FormattedMessage} from 'react-intl';\n\nimport FlagIcon from 'components/svg/flag_icon';\n\nimport DataRetentionHint from './data_retention_hint';\n\nexport default class FlagPostSearchHint extends PureComponent {\n    static propTypes = {\n        dataRetentionEnableMessageDeletion: PropTypes.bool,\n        dataRetentionMessageRetentionDays: PropTypes.string,\n    }\n\n    render() {\n        return (\n            <React.Fragment>\n                <ul>\n                    <li>\n                        <FormattedMessage\n                            id='search_results.usageFlag1'\n                            defaultMessage=\"You haven't flagged any messages yet.\"\n                        />\n                    </li>\n                    <li>\n                        <FormattedMessage\n                            id='search_results.usageFlag2'\n                            defaultMessage='You can add a flag to messages and comments by clicking the {flagIcon} icon next to the timestamp.'\n                            values={{\n                                flagIcon: <FlagIcon className='usage__icon'/>,\n                            }}\n                        />\n                    </li>\n                    <li>\n                        <FormattedMessage\n                            id='search_results.usageFlag4'\n                            defaultMessage='Flags are a way to mark messages for follow up. Your flags are personal, and cannot be seen by other users.'\n                        />\n                    </li>\n                    {this.props.dataRetentionEnableMessageDeletion &&\n                        <DataRetentionHint dataRetentionMessageRetentionDays={this.props.dataRetentionMessageRetentionDays}/>\n                    }\n                </ul>\n            </React.Fragment>\n        );\n    }\n}\n","// Copyright (c) 2015-present Mattermost, Inc. All Rights Reserved.\n// See LICENSE.txt for license information.\n\nimport React, {PureComponent} from 'react';\nimport PropTypes from 'prop-types';\nimport {FormattedMessage} from 'react-intl';\n\nimport DataRetentionHint from './data_retention_hint';\n\nexport default class PinPostSearchHint extends PureComponent {\n    static propTypes = {\n        dataRetentionEnableMessageDeletion: PropTypes.bool,\n        dataRetentionMessageRetentionDays: PropTypes.string,\n    }\n\n    render() {\n        return (\n            <React.Fragment>\n                <h4 id='noResultsMessage'>\n                    <FormattedMessage\n                        id='search_results.noResults'\n                        defaultMessage='No results found. Try again?'\n                    />\n                </h4>\n                <ul>\n                    <li>\n                        <FormattedMessage\n                            id='search_results.noResults.partialPhraseSuggestion'\n                            defaultMessage='If you&#39;re searching a partial phrase (ex. searching \"rea\", looking for \"reach\" or \"reaction\"), append a * to your search term.'\n                        />\n                    </li>\n                    <li>\n                        <FormattedMessage\n                            id='search_results.noResults.stopWordsSuggestion'\n                            defaultMessage='Two letter searches and common words like \"this\", \"a\" and \"is\" won&#39;t appear in search results due to the excessive results returned.'\n                        />\n                    </li>\n                    {this.props.dataRetentionEnableMessageDeletion &&\n                        <DataRetentionHint dataRetentionMessageRetentionDays={this.props.dataRetentionMessageRetentionDays}/>\n                    }\n                </ul>\n            </React.Fragment>\n        );\n    }\n}\n","// Copyright (c) 2015-present Mattermost, Inc. All Rights Reserved.\n// See LICENSE.txt for license information.\n\nimport React, {PureComponent} from 'react';\nimport PropTypes from 'prop-types';\nimport {FormattedMessage} from 'react-intl';\n\nimport DataRetentionHint from './data_retention_hint';\n\nexport default class PinPostSearchHint extends PureComponent {\n    static propTypes = {\n        dataRetentionEnableMessageDeletion: PropTypes.bool,\n        dataRetentionMessageRetentionDays: PropTypes.string,\n    }\n\n    render() {\n        return (\n            <React.Fragment>\n                <ul>\n                    <li>\n                        <FormattedMessage\n                            id='search_results.usagePin1'\n                            defaultMessage='There are no pinned messages yet.'\n                        />\n                    </li>\n                    <li>\n                        <FormattedMessage\n                            id='search_results.usagePin2'\n                            defaultMessage='All members of this channel can pin important or useful messages.'\n                        />\n                    </li>\n                    <li>\n                        <FormattedMessage\n                            id='search_results.usagePin3'\n                            defaultMessage='Pinned messages are visible to all channel members.'\n                        />\n                    </li>\n                    <li>\n                        <FormattedMessage\n                            id='search_results.usagePin4'\n                            defaultMessage={'To pin a message: Go to the message that you want to pin and click [...] > \"Pin to channel\".'}\n                        />\n                    </li>\n                    {this.props.dataRetentionEnableMessageDeletion &&\n                        <DataRetentionHint dataRetentionMessageRetentionDays={this.props.dataRetentionMessageRetentionDays}/>\n                    }\n                </ul>\n            </React.Fragment>\n        );\n    }\n}\n","// Copyright (c) 2015-present Mattermost, Inc. All Rights Reserved.\n// See LICENSE.txt for license information.\n\nimport PropTypes from 'prop-types';\nimport React from 'react';\nimport Scrollbars from 'react-custom-scrollbars';\n\nimport {FormattedMessage} from 'react-intl';\n\nimport {debounce} from 'mattermost-redux/actions/helpers';\n\nimport * as Utils from 'utils/utils.jsx';\n\nimport SearchResultsHeader from 'components/search_results_header';\nimport SearchResultsItem from 'components/search_results_item';\nimport SearchHint from 'components/search_hint/search_hint';\nimport FlagPostSearchHint from 'components/search_hint/flag_post_search_hint';\nimport NoResultSearchHint from 'components/search_hint/no_result_search_hint';\nimport PinPostSearchHint from 'components/search_hint/pin_post_search_hint';\nimport LoadingSpinner from 'components/widgets/loading/loading_wrapper.jsx';\n\nconst GET_MORE_BUFFER = 30;\n\nexport function renderView(props) {\n    return (\n        <div\n            {...props}\n            className='scrollbar--view'\n        />);\n}\n\nexport function renderThumbHorizontal(props) {\n    return (\n        <div\n            {...props}\n            className='scrollbar--horizontal'\n        />);\n}\n\nexport function renderThumbVertical(props) {\n    return (\n        <div\n            {...props}\n            className='scrollbar--vertical'\n        />);\n}\n\nexport function shouldRenderFromPropsAndState(props, nextProps, state, nextState) {\n    // Shallow compare for all props except 'results'\n    for (const key in nextProps) {\n        if (!nextProps.hasOwnProperty(key) || key === 'results') {\n            continue;\n        }\n\n        if (nextProps[key] !== props[key]) {\n            return true;\n        }\n    }\n\n    // Shallow compare state\n    for (const key in nextState) {\n        if (!nextState.hasOwnProperty(key)) {\n            continue;\n        }\n\n        if (nextState[key] !== state[key]) {\n            return true;\n        }\n    }\n\n    // Here we do a slightly deeper compare on 'results' because it is frequently a new\n    // array but without any actual changes\n    const results = props.results;\n    const nextResults = nextProps.results;\n\n    if (results.length !== nextResults.length) {\n        return true;\n    }\n\n    for (let i = 0; i < results.length; i++) {\n        // Only need a shallow compare on each post\n        if (results[i] !== nextResults[i]) {\n            return true;\n        }\n    }\n\n    return false;\n}\n\nexport default class SearchResults extends React.Component {\n    static propTypes = {\n        results: PropTypes.array,\n        matches: PropTypes.object,\n        currentUser: PropTypes.object,\n        searchTerms: PropTypes.string,\n        isSearchingTerm: PropTypes.bool,\n        isSearchingFlaggedPost: PropTypes.bool,\n        isSearchingPinnedPost: PropTypes.bool,\n        isSearchGettingMore: PropTypes.bool,\n        isSearchAtEnd: PropTypes.bool,\n        compactDisplay: PropTypes.bool,\n        isMentionSearch: PropTypes.bool,\n        isFlaggedPosts: PropTypes.bool,\n        isPinnedPosts: PropTypes.bool,\n        isCard: PropTypes.bool,\n        channelDisplayName: PropTypes.string.isRequired,\n        dataRetentionEnableMessageDeletion: PropTypes.bool.isRequired,\n        dataRetentionMessageRetentionDays: PropTypes.string,\n        isOpened: PropTypes.bool,\n        actions: PropTypes.shape({\n            getMorePostsForSearch: PropTypes.func.isRequired,\n        }),\n    };\n\n    static defaultProps = {\n        matches: {},\n        currentUser: {},\n    };\n\n    constructor(props) {\n        super(props);\n\n        this.state = {\n            windowWidth: Utils.windowWidth(),\n            windowHeight: Utils.windowHeight(),\n        };\n    }\n\n    componentDidMount() {\n        this.scrollToTop();\n        window.addEventListener('resize', this.handleResize);\n    }\n\n    componentWillUnmount() {\n        window.removeEventListener('resize', this.handleResize);\n    }\n\n    shouldComponentUpdate(nextProps, nextState) {\n        return shouldRenderFromPropsAndState(this.props, nextProps, this.state, nextState);\n    }\n\n    componentDidUpdate(prevProps) {\n        if (this.props.searchTerms !== prevProps.searchTerms) {\n            this.scrollToTop();\n        }\n    }\n\n    handleResize = () => {\n        this.setState({\n            windowWidth: Utils.windowWidth(),\n            windowHeight: Utils.windowHeight(),\n        });\n    }\n\n    scrollToTop = () => {\n        this.refs.scrollbars.scrollToTop();\n    }\n\n    handleScroll = () => {\n        if (!this.props.isFlaggedPosts && !this.props.isPinnedPosts && !this.props.isSearchingTerm && !this.props.isSearchGettingMore) {\n            const scrollHeight = this.refs.scrollbars.getScrollHeight();\n            const scrollTop = this.refs.scrollbars.getScrollTop();\n            const clientHeight = this.refs.scrollbars.getClientHeight();\n            if ((scrollTop + clientHeight + GET_MORE_BUFFER) >= scrollHeight) {\n                this.loadMorePosts();\n            }\n        }\n    }\n\n    loadMorePosts = debounce(() => {\n        this.props.actions.getMorePostsForSearch();\n    }, 100);\n\n    render() {\n        const results = this.props.results;\n        const noResults = (!results || results.length === 0);\n        const searchTerms = this.props.searchTerms;\n\n        let ctls = null;\n        let loadingMorePostsComponent = null;\n\n        if (\n            this.props.isSearchingTerm ||\n            this.props.isSearchingFlaggedPost ||\n            this.props.isSearchingPinnedPost ||\n            !this.props.isOpened\n        ) {\n            ctls = (\n                <div className='sidebar--right__subheader'>\n                    <div className='sidebar--right__loading'>\n                        <LoadingSpinner text={Utils.localizeMessage('search_header.loading', 'Searching')}/>\n                    </div>\n                </div>\n            );\n        } else if (this.props.isFlaggedPosts && noResults) {\n            ctls = (\n                <div className='sidebar--right__subheader'>\n                    <FlagPostSearchHint\n                        dataRetentionEnableMessageDeletion={this.props.dataRetentionEnableMessageDeletion}\n                        dataRetentionMessageRetentionDays={this.props.dataRetentionMessageRetentionDays}\n                    />\n                </div>\n            );\n        } else if (this.props.isPinnedPosts && noResults) {\n            ctls = (\n                <div className='sidebar--right__subheader'>\n                    <PinPostSearchHint\n                        dataRetentionEnableMessageDeletion={this.props.dataRetentionEnableMessageDeletion}\n                        dataRetentionMessageRetentionDays={this.props.dataRetentionMessageRetentionDays}\n                    />\n                </div>\n            );\n        } else if (!searchTerms && noResults) {\n            ctls = (\n                <div className='sidebar--right__subheader'>\n                    <SearchHint/>\n                </div>\n            );\n        } else if (noResults) {\n            ctls = (\n                <div className='sidebar--right__subheader'>\n                    <NoResultSearchHint\n                        dataRetentionEnableMessageDeletion={this.props.dataRetentionEnableMessageDeletion}\n                        dataRetentionMessageRetentionDays={this.props.dataRetentionMessageRetentionDays}\n                    />\n                </div>\n            );\n        } else {\n            let sortedResults;\n            if (this.props.isPinnedPosts) {\n                sortedResults = [...results];\n                sortedResults.sort((postA, postB) => postB.create_at - postA.create_at);\n            } else {\n                sortedResults = results;\n            }\n\n            ctls = sortedResults.map((post) => {\n                return (\n                    <SearchResultsItem\n                        key={post.id}\n                        compactDisplay={this.props.compactDisplay}\n                        post={post}\n                        matches={this.props.matches[post.id]}\n                        term={(!this.props.isFlaggedPosts && !this.props.isPinnedPosts && !this.props.isMentionSearch) ? searchTerms : ''}\n                        isMentionSearch={this.props.isMentionSearch}\n                    />\n                );\n            }, this);\n\n            if (!this.props.isSearchAtEnd && !this.props.isFlaggedPosts && !this.props.isPinnedPosts) {\n                loadingMorePostsComponent = (\n                    <div className='loading-screen'>\n                        <div className='loading__content'>\n                            <div className='round round-1'/>\n                            <div className='round round-2'/>\n                            <div className='round round-3'/>\n                        </div>\n                    </div>\n                );\n            }\n        }\n\n        var formattedTitle = (\n            <FormattedMessage\n                id='search_header.results'\n                defaultMessage='Search Results'\n            />\n        );\n\n        if (this.props.isMentionSearch) {\n            formattedTitle = (\n                <FormattedMessage\n                    id='search_header.title2'\n                    defaultMessage='Recent Mentions'\n                />\n            );\n        } else if (this.props.isFlaggedPosts) {\n            formattedTitle = (\n                <FormattedMessage\n                    id='search_header.title3'\n                    defaultMessage='Flagged Posts'\n                />\n            );\n        } else if (this.props.isPinnedPosts) {\n            formattedTitle = (\n                <FormattedMessage\n                    id='search_header.title4'\n                    defaultMessage='Pinned posts in {channelDisplayName}'\n                    values={{\n                        channelDisplayName: this.props.channelDisplayName,\n                    }}\n                />\n            );\n        } else if (this.props.isCard) {\n            formattedTitle = (\n                <FormattedMessage\n                    id='search_header.title5'\n                    defaultMessage='Extra information'\n                />\n            );\n        }\n\n        return (\n            <div className='sidebar-right__body'>\n                <SearchResultsHeader>\n                    {formattedTitle}\n                </SearchResultsHeader>\n                <Scrollbars\n                    ref='scrollbars'\n                    autoHide={true}\n                    autoHideTimeout={500}\n                    autoHideDuration={500}\n                    renderThumbHorizontal={renderThumbHorizontal}\n                    renderThumbVertical={renderThumbVertical}\n                    renderView={renderView}\n                    onScroll={this.handleScroll}\n                >\n                    <div\n                        id='search-items-container'\n                        className='search-items-container'\n                    >\n                        {ctls}\n                        {loadingMorePostsComponent}\n                    </div>\n                </Scrollbars>\n            </div>\n        );\n    }\n}\n","// Copyright (c) 2015-present Mattermost, Inc. All Rights Reserved.\n// See LICENSE.txt for license information.\n\nimport {connect} from 'react-redux';\nimport {bindActionCreators} from 'redux';\n\nimport {getMorePostsForSearch} from 'mattermost-redux/actions/search';\nimport {getChannel} from 'mattermost-redux/selectors/entities/channels';\nimport {getConfig} from 'mattermost-redux/selectors/entities/general';\nimport {getSearchMatches, getSearchResults} from 'mattermost-redux/selectors/entities/posts';\nimport * as PreferenceSelectors from 'mattermost-redux/selectors/entities/preferences';\nimport {getCurrentUser} from 'mattermost-redux/selectors/entities/users';\nimport {getCurrentSearchForCurrentTeam} from 'mattermost-redux/selectors/entities/search';\n\nimport {\n    getSearchResultsTerms,\n    getIsSearchingTerm,\n    getIsSearchingFlaggedPost,\n    getIsSearchingPinnedPost,\n    getIsSearchGettingMore,\n} from 'selectors/rhs';\nimport {Preferences} from 'utils/constants.jsx';\n\nimport SearchResults from './search_results.jsx';\n\nfunction makeMapStateToProps() {\n    let results;\n    let posts;\n\n    return function mapStateToProps(state) {\n        const config = getConfig(state);\n\n        const dataRetentionEnableMessageDeletion = config.DataRetentionEnableMessageDeletion === 'true';\n        const dataRetentionMessageRetentionDays = config.DataRetentionMessageRetentionDays;\n        const viewArchivedChannels = config.ExperimentalViewArchivedChannels === 'true';\n\n        const newResults = getSearchResults(state);\n\n        // Cache posts and channels\n        if (newResults && newResults !== results) {\n            results = newResults;\n\n            posts = [];\n            results.forEach((post) => {\n                if (!post) {\n                    return;\n                }\n\n                const channel = getChannel(state, post.channel_id);\n                if (channel && channel.delete_at !== 0 && !viewArchivedChannels) {\n                    return;\n                }\n\n                posts.push(post);\n            });\n        }\n\n        const currentSearch = getCurrentSearchForCurrentTeam(state) || {};\n\n        return {\n            results: posts,\n            matches: getSearchMatches(state),\n            currentUser: getCurrentUser(state),\n            searchTerms: getSearchResultsTerms(state),\n            isSearchingTerm: getIsSearchingTerm(state),\n            isSearchingFlaggedPost: getIsSearchingFlaggedPost(state),\n            isSearchingPinnedPost: getIsSearchingPinnedPost(state),\n            isSearchGettingMore: getIsSearchGettingMore(state),\n            isSearchAtEnd: currentSearch.isEnd,\n            compactDisplay: PreferenceSelectors.get(state, Preferences.CATEGORY_DISPLAY_SETTINGS, Preferences.MESSAGE_DISPLAY, Preferences.MESSAGE_DISPLAY_DEFAULT) === Preferences.MESSAGE_DISPLAY_COMPACT,\n            dataRetentionEnableMessageDeletion,\n            dataRetentionMessageRetentionDays,\n        };\n    };\n}\n\nfunction mapDispatchToProps(dispatch) {\n    return {\n        actions: bindActionCreators({\n            getMorePostsForSearch,\n        }, dispatch),\n    };\n}\n\nexport default connect(makeMapStateToProps, mapDispatchToProps)(SearchResults);\n","// Copyright (c) 2015-present Mattermost, Inc. All Rights Reserved.\n// See LICENSE.txt for license information.\n\nimport PropTypes from 'prop-types';\nimport React from 'react';\n\nimport SearchResultsHeader from 'components/search_results_header';\n\nimport Pluggable from 'plugins/pluggable';\n\nexport default class RhsPlugin extends React.PureComponent {\n    static propTypes = {\n        title: PropTypes.oneOfType([\n            PropTypes.string,\n            PropTypes.object,\n        ]),\n        pluggableId: PropTypes.string.isRequired,\n    }\n\n    render() {\n        return (\n            <div\n                id='rhsContainer'\n                className='sidebar-right__body'\n                ref='sidebarbody'\n            >\n                <SearchResultsHeader>\n                    {this.props.title}\n                </SearchResultsHeader>\n                <Pluggable\n                    pluggableName='RightHandSidebarComponent'\n                    pluggableId={this.props.pluggableId}\n                />\n            </div>\n        );\n    }\n}\n","\n// Copyright (c) 2015-present Mattermost, Inc. All Rights Reserved.\n// See LICENSE.txt for license information.\n\nimport {connect} from 'react-redux';\n\nimport {getPluginId} from 'selectors/rhs';\n\nimport RHSPlugin from './rhs_plugin.jsx';\n\nfunction mapStateToProps(state) {\n    const rhsPlugins = state.plugins.components.RightHandSidebarComponent;\n    const pluginId = getPluginId(state);\n\n    const plugin = rhsPlugins.find((element) => element.id === pluginId);\n    const pluginName = plugin ? plugin.title : '';\n\n    return {\n        title: pluginName,\n        pluggableId: pluginId,\n    };\n}\n\nexport default connect(mapStateToProps)(RHSPlugin);\n","// Copyright (c) 2015-present Mattermost, Inc. All Rights Reserved.\n// See LICENSE.txt for license information.\n\nimport PropTypes from 'prop-types';\nimport React from 'react';\nimport classNames from 'classnames';\n\nimport {trackEvent} from 'actions/diagnostics_actions.jsx';\nimport Constants from 'utils/constants.jsx';\nimport * as Utils from 'utils/utils.jsx';\n\nimport FileUploadOverlay from 'components/file_upload_overlay.jsx';\nimport RhsThread from 'components/rhs_thread';\nimport RhsCard from 'components/rhs_card';\nimport SearchBar from 'components/search_bar';\nimport SearchResults from 'components/search_results';\n\nimport RhsPlugin from 'plugins/rhs_plugin';\n\nexport default class SidebarRight extends React.PureComponent {\n    static propTypes = {\n        isExpanded: PropTypes.bool.isRequired,\n        isOpen: PropTypes.bool.isRequired,\n        currentUserId: PropTypes.string.isRequired,\n        channel: PropTypes.object,\n        postRightVisible: PropTypes.bool,\n        postCardVisible: PropTypes.bool,\n        searchVisible: PropTypes.bool,\n        isMentionSearch: PropTypes.bool,\n        isFlaggedPosts: PropTypes.bool,\n        isPinnedPosts: PropTypes.bool,\n        isPluginView: PropTypes.bool,\n        previousRhsState: PropTypes.string,\n        actions: PropTypes.shape({\n            setRhsExpanded: PropTypes.func.isRequired,\n            showPinnedPosts: PropTypes.func.isRequired,\n            scrollPostList: PropTypes.func.isRequired,\n        }),\n    };\n\n    constructor(props) {\n        super(props);\n\n        this.sidebarRight = React.createRef();\n        this.state = {\n            isOpened: false,\n        };\n    }\n\n    componentDidMount() {\n        window.addEventListener('resize', this.determineTransition);\n        this.determineTransition();\n    }\n\n    componentWillUnmount() {\n        window.removeEventListener('resize', this.determineTransition);\n        if (this.sidebarRight.current) {\n            this.sidebarRight.current.removeEventListener('transitionend', this.onFinishTransition);\n        }\n    }\n\n    componentDidUpdate(prevProps) {\n        const wasOpen = prevProps.searchVisible || prevProps.postRightVisible;\n        const isOpen = this.props.searchVisible || this.props.postRightVisible;\n\n        if (!wasOpen && isOpen) {\n            trackEvent('ui', 'ui_rhs_opened');\n            if (Utils.disableVirtList()) {\n                setTimeout(this.props.actions.scrollPostList, 0);\n            }\n        }\n\n        const {actions, isPinnedPosts, channel} = this.props;\n        if (isPinnedPosts && prevProps.isPinnedPosts === isPinnedPosts && channel.id !== prevProps.channel.id) {\n            actions.showPinnedPosts(channel.id);\n        }\n    }\n\n    determineTransition = () => {\n        const transitionInfo = window.getComputedStyle(this.sidebarRight.current).getPropertyValue('transition');\n        const hasTransition = Boolean(transitionInfo) && transitionInfo !== 'all 0s ease 0s';\n\n        if (this.sidebarRight.current && hasTransition) {\n            this.setState({isOpened: this.props.isOpen});\n            this.sidebarRight.current.addEventListener('transitionend', this.onFinishTransition);\n        } else {\n            this.setState({isOpened: true});\n            if (this.sidebarRight.current) {\n                this.sidebarRight.current.removeEventListener('transitionend', this.onFinishTransition);\n            }\n        }\n    }\n\n    onFinishTransition = (e) => {\n        if (e.propertyName === 'transform') {\n            this.setState({isOpened: this.props.isOpen});\n        }\n    }\n\n    onShrink = () => {\n        this.props.actions.setRhsExpanded(false);\n    };\n\n    render() {\n        const {\n            channel,\n            currentUserId,\n            isFlaggedPosts,\n            isMentionSearch,\n            isPinnedPosts,\n            postRightVisible,\n            postCardVisible,\n            previousRhsState,\n            searchVisible,\n            isPluginView,\n        } = this.props;\n\n        let content = null;\n        let expandedClass = '';\n\n        if (this.props.isExpanded) {\n            expandedClass = 'sidebar--right--expanded';\n        }\n\n        var searchForm = null;\n        if (currentUserId) {\n            searchForm = <SearchBar isFocus={searchVisible && !isFlaggedPosts && !isPinnedPosts}/>;\n        }\n\n        let channelDisplayName = '';\n        if (channel) {\n            if (channel.type === Constants.DM_CHANNEL || channel.type === Constants.GM_CHANNEL) {\n                channelDisplayName = Utils.localizeMessage('rhs_root.direct', 'Direct Message');\n            } else {\n                channelDisplayName = channel.display_name;\n            }\n        }\n\n        if (searchVisible) {\n            content = (\n                <div className='sidebar--right__content'>\n                    <div className='search-bar__container channel-header alt'>{searchForm}</div>\n                    <SearchResults\n                        isMentionSearch={isMentionSearch}\n                        isFlaggedPosts={isFlaggedPosts}\n                        isPinnedPosts={isPinnedPosts}\n                        toggleSize={this.toggleSize}\n                        shrink={this.onShrink}\n                        channelDisplayName={channelDisplayName}\n                        isOpened={this.state.isOpened}\n                    />\n                </div>\n            );\n        } else if (postRightVisible) {\n            content = (\n                <div className='post-right__container'>\n                    <FileUploadOverlay overlayType='right'/>\n                    <div className='search-bar__container channel-header alt'>{searchForm}</div>\n                    <RhsThread\n                        previousRhsState={previousRhsState}\n                        currentUserId={currentUserId}\n                        toggleSize={this.toggleSize}\n                        shrink={this.onShrink}\n                    />\n                </div>\n            );\n        } else if (isPluginView) {\n            content = (\n                <div className='post-right__container'>\n                    <div className='search-bar__container channel-header alt'>{searchForm}</div>\n                    <RhsPlugin/>\n                </div>\n            );\n        } else if (postCardVisible) {\n            content = (\n                <div className='post-right__container'>\n                    <div className='search-bar__container channel-header alt'>{searchForm}</div>\n                    <RhsCard previousRhsState={previousRhsState}/>\n                </div>\n            );\n        }\n\n        if (!content) {\n            expandedClass = '';\n        }\n\n        return (\n            <div\n                className={classNames('sidebar--right', expandedClass, {'move--left': this.props.isOpen})}\n                id='sidebar-right'\n                ref={this.sidebarRight}\n            >\n                <div\n                    onClick={this.onShrink}\n                    className='sidebar--right__bg'\n                />\n                <div className='sidebar-right-container'>\n                    {content}\n                </div>\n            </div>\n        );\n    }\n}\n","// Copyright (c) 2015-present Mattermost, Inc. All Rights Reserved.\n// See LICENSE.txt for license information.\n\nimport {connect} from 'react-redux';\nimport {bindActionCreators} from 'redux';\nimport {getCurrentUserId} from 'mattermost-redux/selectors/entities/users';\nimport {getChannel} from 'mattermost-redux/selectors/entities/channels';\nimport {getPost} from 'mattermost-redux/selectors/entities/posts';\n\nimport {scrollPostList} from 'actions/views/channel';\nimport {setRhsExpanded, showPinnedPosts} from 'actions/views/rhs';\nimport {\n    getIsRhsExpanded,\n    getIsRhsOpen,\n    getRhsState,\n    getSelectedPostId,\n    getSelectedPostCardId,\n    getSelectedChannelId,\n    getPreviousRhsState,\n} from 'selectors/rhs';\nimport {RHSStates} from 'utils/constants.jsx';\n\nimport SidebarRight from './sidebar_right.jsx';\n\nfunction mapStateToProps(state) {\n    const rhsState = getRhsState(state);\n\n    const channelId = getSelectedChannelId(state);\n\n    let channel = null;\n    if (channelId) {\n        channel = getChannel(state, channelId);\n        if (channel == null) {\n            // the permalink view is not really tied to a particular channel but still needs it\n            const {focusedPostId} = state.views.channel;\n            const post = getPost(state, focusedPostId);\n\n            // the post take some time before being available on page load\n            if (post != null) {\n                channel = getChannel(state, post.channel_id);\n            }\n        }\n    }\n\n    return {\n        isExpanded: getIsRhsExpanded(state),\n        isOpen: getIsRhsOpen(state),\n        channel,\n        currentUserId: getCurrentUserId(state),\n        postRightVisible: Boolean(getSelectedPostId(state)),\n        postCardVisible: Boolean(getSelectedPostCardId(state)),\n        searchVisible: Boolean(rhsState) && rhsState !== RHSStates.PLUGIN,\n        previousRhsState: getPreviousRhsState(state),\n        isMentionSearch: rhsState === RHSStates.MENTION,\n        isFlaggedPosts: rhsState === RHSStates.FLAG,\n        isPinnedPosts: rhsState === RHSStates.PIN,\n        isPluginView: rhsState === RHSStates.PLUGIN,\n    };\n}\n\nfunction mapDispatchToProps(dispatch) {\n    return {\n        actions: bindActionCreators({\n            setRhsExpanded,\n            showPinnedPosts,\n            scrollPostList,\n        }, dispatch),\n    };\n}\n\nexport default connect(mapStateToProps, mapDispatchToProps)(SidebarRight);\n","// Copyright (c) 2015-present Mattermost, Inc. All Rights Reserved.\n// See LICENSE.txt for license information.\n\nimport PropTypes from 'prop-types';\nimport React from 'react';\nimport {Overlay} from 'react-bootstrap';\nimport {FormattedMessage} from 'react-intl';\n\nimport {trackEvent} from 'actions/diagnostics_actions.jsx';\nimport Constants from 'utils/constants.jsx';\nimport tutorialGif from 'images/tutorialTip.gif';\nimport tutorialGifWhite from 'images/tutorialTipWhite.gif';\n\nconst Preferences = Constants.Preferences;\nconst TutorialSteps = Constants.TutorialSteps;\n\nexport default class TutorialTip extends React.Component {\n    static propTypes = {\n        currentUserId: PropTypes.string.isRequired,\n        step: PropTypes.number.isRequired,\n        screens: PropTypes.array.isRequired,\n        placement: PropTypes.string.isRequired,\n        overlayClass: PropTypes.string,\n        diagnosticsTag: PropTypes.string,\n        actions: PropTypes.shape({\n            closeRhsMenu: PropTypes.func.isRequired,\n            savePreferences: PropTypes.func.isRequired,\n        }),\n    }\n\n    static defaultProps = {\n        overlayClass: '',\n    }\n\n    constructor(props) {\n        super(props);\n\n        this.state = {currentScreen: 0, show: false};\n    }\n\n    show = () => {\n        this.setState({show: true});\n    }\n\n    hide = () => {\n        this.setState({show: false});\n    }\n\n    handleNext = () => {\n        if (this.state.currentScreen < this.props.screens.length - 1) {\n            this.setState({currentScreen: this.state.currentScreen + 1});\n            return;\n        }\n\n        if (this.props.diagnosticsTag) {\n            let tag = this.props.diagnosticsTag;\n\n            if (this.props.screens.length > 1) {\n                tag += '_' + (this.state.currentScreen + 1).toString();\n            }\n\n            if (this.state.currentScreen === this.props.screens.length - 1) {\n                tag += '_okay';\n            } else {\n                tag += '_next';\n            }\n\n            trackEvent('tutorial', tag);\n        }\n\n        const {currentUserId, actions} = this.props;\n        const {closeRhsMenu, savePreferences} = actions;\n\n        const preferences = [{\n            user_id: currentUserId,\n            category: Preferences.TUTORIAL_STEP,\n            name: currentUserId,\n            value: (this.props.step + 1).toString(),\n        }];\n\n        closeRhsMenu();\n        this.hide();\n\n        savePreferences(currentUserId, preferences);\n    }\n\n    skipTutorial = (e) => {\n        e.preventDefault();\n\n        if (this.props.diagnosticsTag) {\n            let tag = this.props.diagnosticsTag;\n            if (this.props.screens.length > 1) {\n                tag += '_' + this.state.currentScreen;\n            }\n            tag += '_skip';\n            trackEvent('tutorial', tag);\n        }\n\n        const {currentUserId, actions} = this.props;\n        const preferences = [{\n            user_id: currentUserId,\n            category: Preferences.TUTORIAL_STEP,\n            name: currentUserId,\n            value: TutorialSteps.FINISHED.toString(),\n        }];\n\n        actions.savePreferences(currentUserId, preferences);\n    }\n\n    handleCircleClick = (e, screen) => {\n        e.preventDefault();\n        this.setState({currentScreen: screen});\n    }\n\n    getTarget = () => {\n        return this.refs.target;\n    }\n\n    render() {\n        const buttonText = this.state.currentScreen === this.props.screens.length - 1 ? (\n            <FormattedMessage\n                id='tutorial_tip.ok'\n                defaultMessage='Okay'\n            />\n        ) : (\n            <FormattedMessage\n                id='tutorial_tip.next'\n                defaultMessage='Next'\n            />\n        );\n\n        const dots = [];\n        if (this.props.screens.length > 1) {\n            for (let i = 0; i < this.props.screens.length; i++) {\n                let className = 'circle';\n                if (i === this.state.currentScreen) {\n                    className += ' active';\n                }\n\n                dots.push(\n                    <a\n                        href='#'\n                        key={'dotactive' + i}\n                        className={className}\n                        data-screen={i}\n                        onClick={(e) => this.handleCircleClick(e, i)}\n                    />\n                );\n            }\n        }\n\n        var tutorialGifImage = tutorialGif;\n        if (this.props.overlayClass === 'tip-overlay--header' || this.props.overlayClass === 'tip-overlay--sidebar' || this.props.overlayClass === 'tip-overlay--header--up') {\n            tutorialGifImage = tutorialGifWhite;\n        }\n\n        return (\n            <div\n                id='tipButton'\n                className={'tip-div ' + this.props.overlayClass}\n                onClick={this.show}\n            >\n                <img\n                    alt={'tutorial tip'}\n                    className='tip-button'\n                    src={tutorialGifImage}\n                    width='35'\n                    onClick={this.show}\n                    ref='target'\n                />\n\n                <Overlay\n                    show={this.state.show}\n                >\n                    <div className='tip-backdrop'/>\n                </Overlay>\n\n                <Overlay\n                    placement={this.props.placement}\n                    show={this.state.show}\n                    rootClose={true}\n                    onHide={this.hide}\n                    target={this.getTarget}\n                >\n                    <div className={'tip-overlay ' + this.props.overlayClass}>\n                        <div className='arrow'/>\n                        {this.props.screens[this.state.currentScreen]}\n                        <div className='tutorial__footer'>\n                            <div className='tutorial__circles'>{dots}</div>\n                            <div className='text-right'>\n                                <button\n                                    id='tipNextButton'\n                                    className='btn btn-primary'\n                                    onClick={this.handleNext}\n                                >\n                                    {buttonText}\n                                </button>\n                                <div className='tip-opt'>\n                                    <FormattedMessage\n                                        id='tutorial_tip.seen'\n                                        defaultMessage='Seen this before? '\n                                    />\n                                    <a\n                                        href='#'\n                                        onClick={this.skipTutorial}\n                                    >\n                                        <FormattedMessage\n                                            id='tutorial_tip.out'\n                                            defaultMessage='Opt out of these tips.'\n                                        />\n                                    </a>\n                                </div>\n                            </div>\n                        </div>\n                    </div>\n                </Overlay>\n            </div>\n        );\n    }\n}\n","// Copyright (c) 2015-present Mattermost, Inc. All Rights Reserved.\n// See LICENSE.txt for license information.\nimport {connect} from 'react-redux';\nimport {bindActionCreators} from 'redux';\n\nimport {getCurrentUserId} from 'mattermost-redux/selectors/entities/users';\nimport {getInt} from 'mattermost-redux/selectors/entities/preferences';\nimport {savePreferences} from 'mattermost-redux/actions/preferences';\n\nimport {closeMenu as closeRhsMenu} from 'actions/views/rhs';\nimport {Preferences} from 'utils/constants.jsx';\n\nimport TutorialTip from './tutorial_tip.jsx';\n\nfunction mapStateToProps(state) {\n    const currentUserId = getCurrentUserId(state);\n    return {\n        currentUserId,\n        step: getInt(state, Preferences.TUTORIAL_STEP, currentUserId, 0),\n    };\n}\n\nfunction mapDispatchToProps(dispatch) {\n    return {\n        actions: bindActionCreators({\n            closeRhsMenu,\n            savePreferences,\n        }, dispatch),\n    };\n}\n\nexport default connect(mapStateToProps, mapDispatchToProps)(TutorialTip);\n","// Copyright (c) 2015-present Mattermost, Inc. All Rights Reserved.\n// See LICENSE.txt for license information.\nimport React from 'react';\nimport PropTypes from 'prop-types';\nimport {FormattedMessage} from 'react-intl';\n\nimport FormattedMarkdownMessage from 'components/formatted_markdown_message.jsx';\n\nimport TutorialTip from './tutorial_tip';\n\nconst MenuTutorialTip = ({toggleFunc, onBottom}) => {\n    const screens = [];\n\n    screens.push(\n        <div>\n            <h4>\n                <FormattedMessage\n                    id='sidebar_header.tutorial.title'\n                    defaultMessage='Main Menu'\n                />\n            </h4>\n            <p>\n                <FormattedMarkdownMessage\n                    id='sidebar_header.tutorial.body1'\n                    defaultMessage='The **Main Menu** is where you can **Invite New Members**, access your **Account Settings** and set your **Theme Color**.'\n                />\n            </p>\n            <p>\n                <FormattedMarkdownMessage\n                    id='sidebar_header.tutorial.body2'\n                    defaultMessage='Team administrators can also access their **Team Settings** from this menu.'\n                />\n            </p>\n            <p>\n                <FormattedMarkdownMessage\n                    id='sidebar_header.tutorial.body3'\n                    defaultMessage='System administrators will find a **System Console** option to administrate the entire system.'\n                />\n            </p>\n        </div>\n    );\n\n    let placement = 'right';\n    let arrow = 'left';\n    if (onBottom) {\n        placement = 'bottom';\n        arrow = 'up';\n    }\n\n    return (\n        <div\n            onClick={toggleFunc}\n        >\n            <TutorialTip\n                placement={placement}\n                screens={screens}\n                overlayClass={'tip-overlay--header--' + arrow}\n                diagnosticsTag='tutorial_tip_3_main_menu'\n            />\n        </div>\n    );\n};\n\nMenuTutorialTip.propTypes = {\n    toggleFunc: PropTypes.func,\n    onBottom: PropTypes.bool.isRequired,\n};\n\nexport default MenuTutorialTip;\n","// Copyright (c) 2015-present Mattermost, Inc. All Rights Reserved.\n// See LICENSE.txt for license information.\n\nimport React from 'react';\nimport {Modal} from 'react-bootstrap';\nimport ReactDOM from 'react-dom';\nimport {defineMessages, FormattedMessage, injectIntl, intlShape} from 'react-intl';\nimport PropTypes from 'prop-types';\n\nimport {isEmail} from 'mattermost-redux/utils/helpers';\n\nimport * as GlobalActions from 'actions/global_actions.jsx';\nimport Constants from 'utils/constants.jsx';\nimport * as utils from 'utils/utils.jsx';\nimport {t} from 'utils/i18n';\n\nimport ConfirmModal from 'components/confirm_modal.jsx';\nimport LoadingWrapper from 'components/widgets/loading/loading_wrapper.jsx';\n\nimport FormattedMarkdownMessage from 'components/formatted_markdown_message.jsx';\nimport LocalizedInput from 'components/localized_input/localized_input';\n\nconst holders = defineMessages({\n    emailError: {\n        id: t('invite_member.emailError'),\n        defaultMessage: 'Please enter a valid email address',\n    },\n    firstname: {\n        id: t('invite_member.firstname'),\n        defaultMessage: 'First name',\n    },\n    lastname: {\n        id: t('invite_member.lastname'),\n        defaultMessage: 'Last name',\n    },\n    modalTitle: {\n        id: t('invite_member.modalTitle'),\n        defaultMessage: 'Discard Invitations?',\n    },\n    modalMessage: {\n        id: t('invite_member.modalMessage'),\n        defaultMessage: 'You have unsent invitations, are you sure you want to discard them?',\n    },\n    modalButton: {\n        id: t('invite_member.modalButton'),\n        defaultMessage: 'Yes, Discard',\n    },\n});\n\nclass InviteMemberModal extends React.PureComponent {\n    static propTypes = {\n        intl: intlShape.isRequired,\n        enableUserCreation: PropTypes.bool.isRequired,\n        currentUser: PropTypes.object.isRequired,\n        defaultChannelName: PropTypes.string.isRequired,\n        teamType: PropTypes.string.isRequired,\n        teamId: PropTypes.string.isRequired,\n        onHide: PropTypes.func.isRequired,\n        actions: PropTypes.shape({\n            sendEmailInvitesToTeam: PropTypes.func.isRequired,\n        }).isRequired,\n    }\n\n    constructor(props) {\n        super(props);\n\n        this.state = {\n            show: true,\n            inviteIds: [0],\n            idCount: 0,\n            emailErrors: {},\n            firstNameErrors: {},\n            lastNameErrors: {},\n            showConfirmModal: false,\n            isSendingEmails: false,\n        };\n    }\n\n    onHide = () => {\n        this.setState({show: false});\n    }\n\n    handleSubmit = async () => {\n        const inviteIds = this.state.inviteIds;\n        const count = inviteIds.length;\n        const invites = [];\n        const emails = [];\n        const emailErrors = {...this.state.emailErrors};\n        const firstNameErrors = {...this.state.firstNameErrors};\n        const lastNameErrors = {...this.state.lastNameErrors};\n        let valid = true;\n\n        for (let i = 0; i < count; i++) {\n            const invite = {};\n            const index = inviteIds[i];\n            invite.email = ReactDOM.findDOMNode(this.refs['email' + index]).value.trim();\n            invite.firstName = ReactDOM.findDOMNode(this.refs['first_name' + index]).value.trim();\n            invite.lastName = ReactDOM.findDOMNode(this.refs['last_name' + index]).value.trim();\n            if (invite.email !== '' || index === 0) {\n                if (!invite.email || !isEmail(invite.email)) {\n                    emailErrors[index] = this.props.intl.formatMessage(holders.emailError);\n                    valid = false;\n                } else {\n                    emailErrors[index] = '';\n                }\n                invites.push(invite);\n            }\n        }\n\n        this.setState({emailErrors, firstNameErrors, lastNameErrors});\n\n        if (!valid || invites.length === 0) {\n            return;\n        }\n\n        invites.forEach((i) => {\n            emails.push(i.email);\n        });\n\n        this.setState({isSendingEmails: true});\n\n        const {data, error} = await this.props.actions.sendEmailInvitesToTeam(this.props.teamId, emails);\n        if (data) {\n            this.handleHide(false);\n            this.setState({isSendingEmails: false});\n        } else if (error) {\n            if (error.id === 'api.team.invite_members.already.app_error') {\n                emailErrors[error.detailed_error] = error.message;\n                this.setState({emailErrors});\n            } else {\n                this.setState({serverError: error.message});\n            }\n\n            this.setState({isSendingEmails: false});\n        }\n    }\n\n    handleHide = (requireConfirm) => {\n        if (requireConfirm) {\n            var notEmpty = false;\n            for (var i = 0; i < this.state.inviteIds.length; i++) {\n                var index = this.state.inviteIds[i];\n                if (ReactDOM.findDOMNode(this.refs['email' + index]).value.trim() !== '') {\n                    notEmpty = true;\n                    break;\n                }\n            }\n\n            if (notEmpty) {\n                this.setState({\n                    showConfirmModal: true,\n                });\n\n                return;\n            }\n        }\n\n        this.clearFields();\n\n        this.setState({\n            show: false,\n            showConfirmModal: false,\n        });\n    }\n\n    addInviteFields = () => {\n        const count = this.state.idCount + 1;\n        const inviteIds = [...this.state.inviteIds];\n        inviteIds.push(count);\n        this.setState({inviteIds, idCount: count});\n    }\n\n    clearFields = () => {\n        var inviteIds = this.state.inviteIds;\n\n        for (var i = 0; i < inviteIds.length; i++) {\n            var index = inviteIds[i];\n            ReactDOM.findDOMNode(this.refs['email' + index]).value = '';\n            ReactDOM.findDOMNode(this.refs['first_name' + index]).value = '';\n            ReactDOM.findDOMNode(this.refs['last_name' + index]).value = '';\n        }\n\n        this.setState({\n            inviteIds: [0],\n            idCount: 0,\n            emailErrors: {},\n            firstNameErrors: {},\n            lastNameErrors: {},\n        });\n    }\n\n    removeInviteFields = (inviteId) => {\n        let count = this.state.idCount;\n        const inviteIds = this.state.inviteIds.filter((id) => id !== inviteId);\n        if (!inviteIds.length) {\n            inviteIds.push(++count);\n        }\n        this.setState({inviteIds, idCount: count});\n    }\n\n    showGetTeamInviteLinkModal = () => {\n        this.handleHide(false);\n\n        GlobalActions.showGetTeamInviteLinkModal();\n    }\n\n    handleKeyDown = (e) => {\n        if (utils.isKeyPressed(e, Constants.KeyCodes.ENTER)) {\n            e.preventDefault();\n            this.handleSubmit();\n        }\n    }\n\n    hideConfirmModal = () => {\n        this.setState({showConfirmModal: false});\n    }\n\n    render() {\n        const {currentUser} = this.props;\n        const {formatMessage} = this.props.intl;\n\n        if (currentUser != null && this.props.teamType != null) {\n            var inviteSections = [];\n            var inviteIds = this.state.inviteIds;\n            for (var i = 0; i < inviteIds.length; i++) {\n                var index = inviteIds[i];\n                var emailError = null;\n                if (this.state.emailErrors[index]) {\n                    emailError = <label className='control-label'>{this.state.emailErrors[index]}</label>;\n                }\n                var firstNameError = null;\n                if (this.state.firstNameErrors[index]) {\n                    firstNameError = <label className='control-label'>{this.state.firstNameErrors[index]}</label>;\n                }\n                var lastNameError = null;\n                if (this.state.lastNameErrors[index]) {\n                    lastNameError = <label className='control-label'>{this.state.lastNameErrors[index]}</label>;\n                }\n\n                var removeButton = null;\n                if (index) {\n                    removeButton = (\n                        <div>\n                            <button\n                                type='button'\n                                className='btn btn-link remove__member'\n                                onClick={this.removeInviteFields.bind(this, index)}\n                            >\n                                <span\n                                    className='fa fa-trash'\n                                    title={formatMessage({id: 'generic_icons.remove', defaultMessage: 'Remove Icon'})}\n                                />\n                            </button>\n                        </div>\n                    );\n                }\n                var emailClass = 'form-group invite';\n                if (emailError) {\n                    emailClass += ' has-error';\n                }\n\n                var nameFields = null;\n\n                var firstNameClass = 'form-group';\n                if (firstNameError) {\n                    firstNameClass += ' has-error';\n                }\n                var lastNameClass = 'form-group';\n                if (lastNameError) {\n                    lastNameClass += ' has-error';\n                }\n                nameFields = (\n                    <div className='row row--invite'>\n                        <div className='col-sm-6'>\n                            <div className={firstNameClass}>\n                                <LocalizedInput\n                                    onKeyDown={this.handleKeyDown}\n                                    type='text'\n                                    className='form-control'\n                                    ref={'first_name' + index}\n                                    placeholder={holders.firstname}\n                                    maxLength='64'\n                                    disabled={!this.props.enableUserCreation}\n                                    spellCheck='false'\n                                />\n                                {firstNameError}\n                            </div>\n                        </div>\n                        <div className='col-sm-6'>\n                            <div className={lastNameClass}>\n                                <LocalizedInput\n                                    onKeyDown={this.handleKeyDown}\n                                    type='text'\n                                    className='form-control'\n                                    ref={'last_name' + index}\n                                    placeholder={holders.lastname}\n                                    maxLength='64'\n                                    disabled={!this.props.enableUserCreation}\n                                    spellCheck='false'\n                                />\n                                {lastNameError}\n                            </div>\n                        </div>\n                    </div>\n                );\n\n                inviteSections[index] = (\n                    <div key={'key' + index}>\n                        {removeButton}\n                        <div className={emailClass}>\n                            <input\n                                onKeyUp={this.displayNameKeyUp}\n                                onKeyDown={this.handleKeyDown}\n                                type='text'\n                                ref={'email' + index}\n                                className='form-control'\n                                placeholder='email@domain.com'\n                                maxLength='64'\n                                disabled={!this.props.enableUserCreation}\n                                spellCheck='false'\n                                autoFocus={true}\n                            />\n                            {emailError}\n                        </div>\n                        {nameFields}\n                    </div>\n                );\n            }\n\n            var serverError = null;\n            if (this.state.serverError) {\n                serverError = <div className='form-group has-error'><label className='control-label'>{this.state.serverError}</label></div>;\n            }\n\n            var content = null;\n            var sendButton = null;\n\n            if (this.props.enableUserCreation) {\n                content = (\n                    <div>\n                        {serverError}\n                        <button\n                            type='button'\n                            className='btn btn-link'\n                            onClick={this.addInviteFields}\n                        >\n                            <FormattedMessage\n                                id='invite_member.addAnother'\n                                defaultMessage='Add another'\n                            />\n                        </button>\n                        <br/>\n                        <br/>\n                        <span>\n                            <FormattedMarkdownMessage\n                                id='invite_member.autoJoin'\n                                defaultMessage='People invited automatically join the **{channel}** channel.'\n                                values={{\n                                    channel: this.props.defaultChannelName,\n                                }}\n                            />\n                        </span>\n                    </div>\n                );\n\n                var sendButtonLabel = (\n                    <FormattedMessage\n                        id='invite_member.send'\n                        defaultMessage='Send Invitation'\n                    />\n                );\n                if (this.state.inviteIds.length > 1) {\n                    sendButtonLabel = (\n                        <FormattedMessage\n                            id='invite_member.send2'\n                            defaultMessage='Send Invitations'\n                        />\n                    );\n                }\n\n                sendButton = (\n                    <button\n                        onClick={this.handleSubmit}\n                        type='button'\n                        className='btn btn-primary'\n                        disabled={this.state.isSendingEmails}\n                    >\n                        <LoadingWrapper\n                            loading={this.state.isSendingEmails}\n                            text={utils.localizeMessage('invite_member.sending', ' Sending')}\n                        >\n                            {sendButtonLabel}\n                        </LoadingWrapper>\n                    </button>\n                );\n            } else if (this.props.enableUserCreation) {\n                var teamInviteLink = null;\n                if (currentUser && this.props.teamType === 'O') {\n                    var link = (\n                        <button\n                            className='color--link style--none'\n                            onClick={this.showGetTeamInviteLinkModal}\n                        >\n                            <FormattedMessage\n                                id='invite_member.inviteLink'\n                                defaultMessage='Team Invite Link'\n                            />\n                        </button>\n                    );\n\n                    teamInviteLink = (\n                        <p>\n                            <FormattedMessage\n                                id='invite_member.teamInviteLink'\n                                defaultMessage='You can also invite people using the {link}.'\n                                values={{\n                                    link,\n                                }}\n                            />\n                        </p>\n                    );\n                }\n\n                content = (\n                    <div>\n                        <p>\n                            <FormattedMessage\n                                id='invite_member.content'\n                                defaultMessage='Email is currently disabled for your team, and email invitations cannot be sent. Contact your System Administrator to enable email and email invitations.'\n                            />\n                        </p>\n                        {teamInviteLink}\n                    </div>\n                );\n            } else {\n                content = (\n                    <div>\n                        <p>\n                            <FormattedMessage\n                                id='invite_member.disabled'\n                                defaultMessage='User creation has been disabled for your team. Please ask your Team Administrator for details.'\n                            />\n                        </p>\n                    </div>\n                );\n            }\n\n            return (\n                <div>\n                    <Modal\n                        dialogClassName='a11y__modal modal-invite-member'\n                        show={this.state.show}\n                        onHide={this.handleHide.bind(this, true)}\n                        onExited={this.props.onHide}\n                        enforceFocus={!this.state.showConfirmModal}\n                        backdrop={this.state.isSendingEmails ? 'static' : true}\n                        role='dialog'\n                        aria-labelledby='inviteMemberModalLabel'\n                    >\n                        <Modal.Header closeButton={!this.state.isSendingEmails}>\n                            <Modal.Title\n                                componentClass='h1'\n                                id='inviteMemberModalLabel'\n                            >\n                                <FormattedMessage\n                                    id='invite_member.newMember'\n                                    defaultMessage='Send Email Invite'\n                                />\n                            </Modal.Title>\n                        </Modal.Header>\n                        <Modal.Body ref='modalBody'>\n                            <form>\n                                {inviteSections}\n                            </form>\n                            {content}\n                        </Modal.Body>\n                        <Modal.Footer>\n                            <button\n                                type='button'\n                                className='btn btn-link'\n                                onClick={this.handleHide.bind(this, true)}\n                                disabled={this.state.isSendingEmails}\n                            >\n                                <FormattedMessage\n                                    id='invite_member.cancel'\n                                    defaultMessage='Cancel'\n                                />\n                            </button>\n                            {sendButton}\n                        </Modal.Footer>\n                    </Modal>\n                    <ConfirmModal\n                        title={formatMessage(holders.modalTitle)}\n                        message={formatMessage(holders.modalMessage)}\n                        confirmButtonText={formatMessage(holders.modalButton)}\n                        show={this.state.showConfirmModal}\n                        onConfirm={this.handleHide.bind(this, false)}\n                        onCancel={this.hideConfirmModal}\n                    />\n                </div>\n            );\n        }\n\n        return null;\n    }\n}\n\nexport default injectIntl(InviteMemberModal);\n","// Copyright (c) 2015-present Mattermost, Inc. All Rights Reserved.\n// See LICENSE.txt for license information.\n\nimport {connect} from 'react-redux';\nimport {bindActionCreators} from 'redux';\n\nimport {sendEmailInvitesToTeam} from 'mattermost-redux/actions/teams';\nimport {getConfig} from 'mattermost-redux/selectors/entities/general';\nimport {getChannelsNameMapInCurrentTeam} from 'mattermost-redux/selectors/entities/channels';\nimport {getCurrentUser} from 'mattermost-redux/selectors/entities/users';\nimport {getCurrentTeam} from 'mattermost-redux/selectors/entities/teams';\n\nimport Constants from 'utils/constants';\n\nimport InviteMemberModal from './invite_member_modal.jsx';\n\nfunction mapStateToProps(state) {\n    const config = getConfig(state);\n\n    const enableUserCreation = config.EnableUserCreation === 'true';\n\n    const defaultChannel = getChannelsNameMapInCurrentTeam(state)[Constants.DEFAULT_CHANNEL];\n    const team = getCurrentTeam(state);\n\n    return {\n        enableUserCreation,\n        currentUser: getCurrentUser(state),\n        defaultChannelName: defaultChannel ? defaultChannel.display_name : '',\n        teamType: team ? team.type : '',\n        teamId: team ? team.id : '',\n    };\n}\n\nfunction mapDispatchToProps(dispatch) {\n    return {\n        actions: bindActionCreators({\n            sendEmailInvitesToTeam,\n        }, dispatch),\n    };\n}\n\nexport default connect(mapStateToProps, mapDispatchToProps)(InviteMemberModal);\n","// Copyright (c) 2015-present Mattermost, Inc. All Rights Reserved.\n// See LICENSE.txt for license information.\n\nimport React from 'react';\nimport {FormattedMessage} from 'react-intl';\n\nexport default class LeaveTeamIcon extends React.PureComponent {\n    render() {\n        return (\n            <span {...this.props}>\n                <FormattedMessage\n                    id='navbar_dropdown.leave.icon'\n                    defaultMessage='Leave Team Icon'\n                >\n                    {(ariaLabel) => (\n                        <svg\n                            width='100%'\n                            height='100%'\n                            viewBox='0 0 164 164'\n                            style={style}\n                            role='icon'\n                            aria-label={ariaLabel}\n                        >\n                            <path d='M26.023,164L26.023,7.035L26.022,0.32L137.658,0.32L137.658,164L124.228,164L124.228, 13.749L39.452,13.749L39.452,164L26.023, 164ZM118.876,164L118.876,18.619L58.137,32.918L58.137,149.701L118.876,164Z'/>\n                        </svg>\n                    )}\n                </FormattedMessage>\n            </span>\n        );\n    }\n}\n\nconst style = {\n    fillRule: 'evenodd',\n    clipRule: 'evenodd',\n    strokeLinejoin: 'round',\n    strokeMiterlimit: 1.41421,\n};\n","// Copyright (c) 2015-present Mattermost, Inc. All Rights Reserved.\n// See LICENSE.txt for license information.\n\nimport React from 'react';\nimport {Modal} from 'react-bootstrap';\nimport {FormattedMessage, injectIntl, intlShape} from 'react-intl';\nimport PropTypes from 'prop-types';\n\nimport Constants from 'utils/constants.jsx';\nimport {isKeyPressed} from 'utils/utils';\n\nclass LeaveTeamModal extends React.PureComponent {\n    static propTypes = {\n\n        /**\n         * Current user id.\n         */\n        currentUserId: PropTypes.string.isRequired,\n\n        /**\n         * Current team id.\n         */\n        currentTeamId: PropTypes.string.isRequired,\n\n        /**\n         * hide action\n         */\n\n        onHide: PropTypes.func.isRequired,\n\n        /**\n         * show or hide modal\n         */\n\n        show: PropTypes.bool.isRequired,\n\n        intl: intlShape.isRequired,\n\n        actions: PropTypes.shape({\n\n            /**\n             * An action to remove user from team\n             */\n\n            leaveTeam: PropTypes.func.isRequired,\n\n            /**\n             * An action to toggle the right menu\n             */\n\n            toggleSideBarRightMenu: PropTypes.func.isRequired,\n        }),\n    };\n\n    componentDidMount() {\n        if (this.props.show) {\n            document.addEventListener('keypress', this.handleKeyPress);\n        }\n    }\n\n    componentWillUnmount() {\n        document.removeEventListener('keypress', this.handleKeyPress);\n    }\n\n    handleKeyPress = (e) => {\n        if (isKeyPressed(e, Constants.KeyCodes.ENTER)) {\n            this.handleSubmit(e);\n        }\n    };\n\n    handleSubmit = () => {\n        this.props.onHide();\n        this.props.actions.leaveTeam(this.props.currentTeamId, this.props.currentUserId);\n        this.props.actions.toggleSideBarRightMenu();\n    };\n\n    render() {\n        return (\n            <Modal\n                dialogClassName='a11y__modal'\n                className='modal-confirm'\n                show={this.props.show}\n                onHide={this.props.onHide}\n                id='leaveTeamModal'\n                role='dialog'\n                aria-labelledby='leaveTeamModalLabel'\n            >\n                <Modal.Header closeButton={false}>\n                    <Modal.Title\n                        componentClass='h1'\n                        id='leaveTeamModalLabel'\n                    >\n                        <FormattedMessage\n                            id='leave_team_modal.title'\n                            defaultMessage='Leave the team?'\n                        />\n                    </Modal.Title>\n                </Modal.Header>\n                <Modal.Body>\n                    <FormattedMessage\n                        id='leave_team_modal.desc'\n                        defaultMessage='You will be removed from all public and private channels.  If the team is private you will not be able to rejoin the team.  Are you sure?'\n                    />\n                </Modal.Body>\n                <Modal.Footer>\n                    <button\n                        type='button'\n                        className='btn btn-link'\n                        onClick={this.props.onHide}\n                        id='leaveTeamNo'\n                    >\n                        <FormattedMessage\n                            id='leave_team_modal.no'\n                            defaultMessage='No'\n                        />\n                    </button>\n                    <button\n                        type='button'\n                        className='btn btn-danger'\n                        onClick={this.handleSubmit}\n                        id='leaveTeamYes'\n                    >\n                        <FormattedMessage\n                            id='leave_team_modal.yes'\n                            defaultMessage='Yes'\n                        />\n                    </button>\n                </Modal.Footer>\n            </Modal>\n        );\n    }\n}\n\nexport default injectIntl(LeaveTeamModal);\n","// Copyright (c) 2015-present Mattermost, Inc. All Rights Reserved.\n// See LICENSE.txt for license information.\n\nimport {connect} from 'react-redux';\nimport {bindActionCreators} from 'redux';\nimport {getCurrentUserId} from 'mattermost-redux/selectors/entities/users';\nimport {getCurrentTeamId} from 'mattermost-redux/selectors/entities/teams';\nimport {removeUserFromTeam as leaveTeam} from 'mattermost-redux/actions/teams';\n\nimport {toggleSideBarRightMenuAction} from 'actions/global_actions.jsx';\nimport {ModalIdentifiers} from 'utils/constants';\n\nimport {isModalOpen} from 'selectors/views/modals';\n\nimport LeaveTeamModal from './leave_team_modal.jsx';\n\nfunction mapStateToProps(state) {\n    const modalId = ModalIdentifiers.LEAVE_TEAM;\n    const currentUserId = getCurrentUserId(state);\n    const currentTeamId = getCurrentTeamId(state);\n    const show = isModalOpen(state, modalId);\n    return {\n        currentUserId,\n        currentTeamId,\n        show,\n    };\n}\n\nfunction mapDispatchToProps(dispatch) {\n    return {\n        actions: bindActionCreators({\n            leaveTeam,\n            toggleSideBarRightMenu: toggleSideBarRightMenuAction,\n        }, dispatch),\n    };\n}\n\nexport default connect(mapStateToProps, mapDispatchToProps)(LeaveTeamModal);\n","// Copyright (c) 2015-present Mattermost, Inc. All Rights Reserved.\n// See LICENSE.txt for license information.\n\nimport PropTypes from 'prop-types';\nimport React from 'react';\n\nimport SearchableUserList from './searchable_user_list.jsx';\n\nexport default class SearchableUserListContainer extends React.Component {\n    static propTypes = {\n        users: PropTypes.arrayOf(PropTypes.object),\n        usersPerPage: PropTypes.number,\n        total: PropTypes.number,\n        extraInfo: PropTypes.object,\n        nextPage: PropTypes.func.isRequired,\n        search: PropTypes.func.isRequired,\n        actions: PropTypes.arrayOf(PropTypes.func),\n        actionProps: PropTypes.object,\n        actionUserProps: PropTypes.object,\n        focusOnMount: PropTypes.bool,\n    };\n\n    constructor(props) {\n        super(props);\n\n        this.handleTermChange = this.handleTermChange.bind(this);\n\n        this.nextPage = this.nextPage.bind(this);\n        this.previousPage = this.previousPage.bind(this);\n        this.search = this.search.bind(this);\n\n        this.state = {\n            term: '',\n            page: 0,\n        };\n    }\n\n    handleTermChange(term) {\n        this.setState({term});\n    }\n\n    nextPage() {\n        this.setState({page: this.state.page + 1});\n\n        this.props.nextPage(this.state.page + 1);\n    }\n\n    previousPage() {\n        this.setState({page: this.state.page - 1});\n    }\n\n    search(term) {\n        this.props.search(term);\n\n        if (term !== '') {\n            this.setState({page: 0});\n        }\n    }\n\n    render() {\n        return (\n            <SearchableUserList\n                {...this.props}\n                nextPage={this.nextPage}\n                previousPage={this.previousPage}\n                search={this.search}\n                page={this.state.page}\n                term={this.state.term}\n                onTermChange={this.handleTermChange}\n            />\n        );\n    }\n}\n","// Copyright (c) 2015-present Mattermost, Inc. All Rights Reserved.\n// See LICENSE.txt for license information.\n\nimport React from 'react';\n\nimport {FormattedMessage} from 'react-intl';\n\nexport default class DropdownIcon extends React.PureComponent {\n    render() {\n        return (\n            <FormattedMessage\n                id='generic_icons.dropdown'\n                defaultMessage='Dropdown Icon'\n            >\n                {(title) => (\n                    <i\n                        className='fa fa-angle-down'\n                        title={title}\n                    />\n                )}\n            </FormattedMessage>\n        );\n    }\n}\n","// Copyright (c) 2015-present Mattermost, Inc. All Rights Reserved.\n// See LICENSE.txt for license information.\n\nimport PropTypes from 'prop-types';\nimport React from 'react';\nimport {FormattedMessage} from 'react-intl';\n\nimport {browserHistory} from 'utils/browser_history';\nimport * as Utils from 'utils/utils.jsx';\nimport ConfirmModal from 'components/confirm_modal.jsx';\nimport DropdownIcon from 'components/icon/dropdown_icon';\n\nimport Menu from 'components/widgets/menu/menu';\nimport MenuWrapper from 'components/widgets/menu/menu_wrapper';\nimport MenuItemAction from 'components/widgets/menu/menu_items/menu_item_action';\n\nconst ROWS_FROM_BOTTOM_TO_OPEN_UP = 3;\n\nexport default class TeamMembersDropdown extends React.Component {\n    static propTypes = {\n        user: PropTypes.object.isRequired,\n        currentUser: PropTypes.object.isRequired,\n        teamMember: PropTypes.object.isRequired,\n        teamUrl: PropTypes.string.isRequired,\n        currentTeam: PropTypes.object.isRequired,\n        index: PropTypes.number.isRequired,\n        totalUsers: PropTypes.number.isRequired,\n        actions: PropTypes.shape({\n            getMyTeamMembers: PropTypes.func.isRequired,\n            getMyTeamUnreads: PropTypes.func.isRequired,\n            getUser: PropTypes.func.isRequired,\n            getTeamMember: PropTypes.func.isRequired,\n            getTeamStats: PropTypes.func.isRequired,\n            getChannelStats: PropTypes.func.isRequired,\n            updateTeamMemberSchemeRoles: PropTypes.func.isRequired,\n            removeUserFromTeamAndGetStats: PropTypes.func.isRequired,\n            updateUserActive: PropTypes.func.isRequired,\n        }).isRequired,\n    }\n\n    constructor(props) {\n        super(props);\n\n        this.state = {\n            serverError: null,\n            showDemoteModal: false,\n            user: null,\n            role: null,\n        };\n    }\n\n    handleMakeMember = async () => {\n        const me = this.props.currentUser;\n        if (this.props.user.id === me.id && me.roles.includes('system_admin')) {\n            this.handleDemote(this.props.user, 'team_user');\n        } else {\n            const {error} = await this.props.actions.updateTeamMemberSchemeRoles(this.props.teamMember.team_id, this.props.user.id, true, false);\n            if (error) {\n                this.setState({serverError: error.message});\n            } else {\n                this.props.actions.getUser(this.props.user.id);\n                this.props.actions.getTeamMember(this.props.teamMember.team_id, this.props.user.id);\n                if (this.props.user.id === me.id) {\n                    await this.props.actions.getMyTeamMembers();\n                    this.props.actions.getMyTeamUnreads();\n                }\n            }\n        }\n    }\n\n    handleRemoveFromTeam = async () => {\n        const {error} = await this.props.actions.removeUserFromTeamAndGetStats(this.props.teamMember.team_id, this.props.user.id);\n        if (error) {\n            this.setState({serverError: error.message});\n        }\n    }\n\n    handleMakeAdmin = async () => {\n        const me = this.props.currentUser;\n        if (this.props.user.id === me.id && me.roles.includes('system_admin')) {\n            this.handleDemote(this.props.user, 'team_user team_admin');\n        } else {\n            const {error} = await this.props.actions.updateTeamMemberSchemeRoles(this.props.teamMember.team_id, this.props.user.id, true, true);\n            if (error) {\n                this.setState({serverError: error.message});\n            } else {\n                this.props.actions.getUser(this.props.user.id);\n                this.props.actions.getTeamMember(this.props.teamMember.team_id, this.props.user.id);\n            }\n        }\n    }\n\n    handleDemote = (user, role, newRole) => {\n        this.setState({\n            serverError: this.state.serverError,\n            showDemoteModal: true,\n            user,\n            role,\n            newRole,\n        });\n    }\n\n    handleDemoteCancel = () => {\n        this.setState({\n            serverError: null,\n            showDemoteModal: false,\n            user: null,\n            role: null,\n            newRole: null,\n        });\n    }\n\n    handleDemoteSubmit = async () => {\n        const {error} = await this.props.actions.updateTeamMemberSchemeRoles(this.props.teamMember.team_id, this.props.user.id, true, false);\n        if (error) {\n            this.setState({serverError: error.message});\n        } else {\n            this.props.actions.getUser(this.props.user.id);\n            browserHistory.push(this.props.teamUrl);\n        }\n    }\n\n    render() {\n        let serverError = null;\n        if (this.state.serverError) {\n            serverError = (\n                <div className='has-error'>\n                    <label className='has-error control-label'>{this.state.serverError}</label>\n                </div>\n            );\n        }\n\n        const {currentTeam, teamMember, user} = this.props;\n\n        let currentRoles = (\n            <FormattedMessage\n                id='team_members_dropdown.member'\n                defaultMessage='Member'\n            />\n        );\n\n        if ((teamMember.roles.length > 0 && Utils.isAdmin(teamMember.roles)) || teamMember.scheme_admin) {\n            currentRoles = (\n                <FormattedMessage\n                    id='team_members_dropdown.teamAdmin'\n                    defaultMessage='Team Admin'\n                />\n            );\n        }\n\n        if (user.roles.length > 0 && Utils.isSystemAdmin(user.roles)) {\n            currentRoles = (\n                <FormattedMessage\n                    id='team_members_dropdown.systemAdmin'\n                    defaultMessage='System Admin'\n                />\n            );\n        }\n\n        const me = this.props.currentUser;\n        let showMakeMember = (Utils.isAdmin(teamMember.roles) || teamMember.scheme_admin) && !Utils.isSystemAdmin(user.roles);\n        let showMakeAdmin = !Utils.isAdmin(teamMember.roles) && !Utils.isSystemAdmin(user.roles) && !teamMember.scheme_admin;\n\n        if (user.delete_at > 0) {\n            currentRoles = (\n                <FormattedMessage\n                    id='team_members_dropdown.inactive'\n                    defaultMessage='Inactive'\n                />\n            );\n            showMakeMember = false;\n            showMakeAdmin = false;\n        }\n\n        const canRemoveFromTeam = user.id !== me.id && !currentTeam.group_constrained;\n\n        let makeDemoteModal = null;\n        if (user.id === me.id) {\n            const title = (\n                <FormattedMessage\n                    id='team_members_dropdown.confirmDemoteRoleTitle'\n                    defaultMessage='Confirm demotion from System Admin role'\n                />\n            );\n\n            const message = (\n                <div>\n                    <FormattedMessage\n                        id='team_members_dropdown.confirmDemoteDescription'\n                        defaultMessage=\"If you demote yourself from the System Admin role and there is not another user with System Admin privileges, you'll need to re-assign a System Admin by accessing the Mattermost server through a terminal and running the following command.\"\n                    />\n                    <br/>\n                    <br/>\n                    <FormattedMessage\n                        id='team_members_dropdown.confirmDemotionCmd'\n                        defaultMessage='platform roles system_admin {username}'\n                        vallues={{\n                            username: me.username,\n                        }}\n                    />\n                    {serverError}\n                </div>\n            );\n\n            const confirmButton = (\n                <FormattedMessage\n                    id='team_members_dropdown.confirmDemotion'\n                    defaultMessage='Confirm Demotion'\n                />\n            );\n\n            makeDemoteModal = (\n                <ConfirmModal\n                    show={this.state.showDemoteModal}\n                    title={title}\n                    message={message}\n                    confirmButtonText={confirmButton}\n                    onConfirm={this.handleDemoteSubmit}\n                    onCancel={this.handleDemoteCancel}\n                />\n            );\n        }\n\n        if (!canRemoveFromTeam && !showMakeAdmin && !showMakeMember) {\n            return <div>{currentRoles}</div>;\n        }\n\n        const {index, totalUsers} = this.props;\n        let openUp = false;\n        if (totalUsers > ROWS_FROM_BOTTOM_TO_OPEN_UP && totalUsers - index <= ROWS_FROM_BOTTOM_TO_OPEN_UP) {\n            openUp = true;\n        }\n\n        return (\n            <MenuWrapper>\n                <button\n                    id={`teamMembersDropdown_${user.username}`}\n                    className='dropdown-toggle theme color--link style--none'\n                    type='button'\n                    aria-expanded='true'\n                >\n                    <span>{currentRoles} </span>\n                    <DropdownIcon/>\n                </button>\n                <div>\n                    <Menu\n                        openLeft={true}\n                        openUp={openUp}\n                        ariaLabel={Utils.localizeMessage('team_members_dropdown.menuAriaLabel', 'Team member role change')}\n                    >\n                        <MenuItemAction\n                            id='removeFromTeam'\n                            show={canRemoveFromTeam}\n                            onClick={this.handleRemoveFromTeam}\n                            text={Utils.localizeMessage('team_members_dropdown.leave_team', 'Remove From Team')}\n                        />\n                        <MenuItemAction\n                            show={showMakeAdmin}\n                            onClick={this.handleMakeAdmin}\n                            text={Utils.localizeMessage('team_members_dropdown.makeAdmin', 'Make Team Admin')}\n                        />\n                        <MenuItemAction\n                            show={showMakeMember}\n                            onClick={this.handleMakeMember}\n                            text={Utils.localizeMessage('team_members_dropdown.makeMember', 'Make Member')}\n                        />\n                    </Menu>\n                    {makeDemoteModal}\n                    {serverError}\n                </div>\n            </MenuWrapper>\n        );\n    }\n}\n","// Copyright (c) 2015-present Mattermost, Inc. All Rights Reserved.\n// See LICENSE.txt for license information.\n\nimport {connect} from 'react-redux';\nimport {bindActionCreators} from 'redux';\n\nimport {getChannelStats} from 'mattermost-redux/actions/channels';\nimport {\n    getMyTeamMembers,\n    getMyTeamUnreads,\n    getTeamStats,\n    getTeamMember,\n    updateTeamMemberSchemeRoles,\n} from 'mattermost-redux/actions/teams';\nimport {getUser, updateUserActive} from 'mattermost-redux/actions/users';\nimport {getCurrentUser} from 'mattermost-redux/selectors/entities/users';\nimport {getCurrentChannelId} from 'mattermost-redux/selectors/entities/channels';\nimport {getCurrentRelativeTeamUrl, getCurrentTeam} from 'mattermost-redux/selectors/entities/teams';\n\nimport {removeUserFromTeamAndGetStats} from 'actions/team_actions.jsx';\n\nimport TeamMembersDropdown from './team_members_dropdown.jsx';\n\nfunction mapStateToProps(state) {\n    return {\n        currentUser: getCurrentUser(state),\n        currentChannelId: getCurrentChannelId(state),\n        teamUrl: getCurrentRelativeTeamUrl(state),\n        currentTeam: getCurrentTeam(state),\n    };\n}\n\nfunction mapDispatchToProps(dispatch) {\n    return {\n        actions: bindActionCreators({\n            getMyTeamMembers,\n            getMyTeamUnreads,\n            getUser,\n            getTeamMember,\n            getTeamStats,\n            getChannelStats,\n            updateUserActive,\n            updateTeamMemberSchemeRoles,\n            removeUserFromTeamAndGetStats,\n        }, dispatch),\n    };\n}\n\nexport default connect(mapStateToProps, mapDispatchToProps)(TeamMembersDropdown);\n","// Copyright (c) 2015-present Mattermost, Inc. All Rights Reserved.\n// See LICENSE.txt for license information.\n\nimport PropTypes from 'prop-types';\nimport React from 'react';\n\nimport Constants from 'utils/constants.jsx';\nimport * as UserAgent from 'utils/user_agent.jsx';\n\nimport SearchableUserList from 'components/searchable_user_list/searchable_user_list_container.jsx';\nimport TeamMembersDropdown from 'components/team_members_dropdown';\n\nconst USERS_PER_PAGE = 50;\n\nexport default class MemberListTeam extends React.Component {\n    static propTypes = {\n        searchTerm: PropTypes.string.isRequired,\n        users: PropTypes.arrayOf(PropTypes.object).isRequired,\n        teamMembers: PropTypes.object.isRequired,\n        currentTeamId: PropTypes.string.isRequired,\n        totalTeamMembers: PropTypes.number.isRequired,\n        canManageTeamMembers: PropTypes.bool,\n        actions: PropTypes.shape({\n            searchProfiles: PropTypes.func.isRequired,\n            getTeamStats: PropTypes.func.isRequired,\n            loadProfilesAndTeamMembers: PropTypes.func.isRequired,\n            loadStatusesForProfilesList: PropTypes.func.isRequired,\n            loadTeamMembersForProfilesList: PropTypes.func.isRequired,\n            setModalSearchTerm: PropTypes.func.isRequired,\n        }).isRequired,\n    }\n\n    constructor(props) {\n        super(props);\n\n        this.searchTimeoutId = 0;\n\n        this.state = {\n            loading: true,\n        };\n    }\n\n    componentDidMount() {\n        this.props.actions.loadProfilesAndTeamMembers(0, Constants.PROFILE_CHUNK_SIZE, this.props.currentTeamId).then(({data}) => {\n            if (data) {\n                this.loadComplete();\n            }\n        });\n\n        this.props.actions.getTeamStats(this.props.currentTeamId);\n    }\n\n    componentWillUnmount() {\n        this.props.actions.setModalSearchTerm('');\n    }\n\n    UNSAFE_componentWillReceiveProps(nextProps) { // eslint-disable-line camelcase\n        if (this.props.searchTerm !== nextProps.searchTerm) {\n            clearTimeout(this.searchTimeoutId);\n\n            const searchTerm = nextProps.searchTerm;\n            if (searchTerm === '') {\n                this.loadComplete();\n                this.searchTimeoutId = '';\n                return;\n            }\n\n            const searchTimeoutId = setTimeout(\n                async () => {\n                    const {\n                        loadStatusesForProfilesList,\n                        loadTeamMembersForProfilesList,\n                        searchProfiles,\n                    } = nextProps.actions;\n                    const {data} = await searchProfiles(searchTerm, {team_id: nextProps.currentTeamId});\n\n                    if (searchTimeoutId !== this.searchTimeoutId) {\n                        return;\n                    }\n\n                    this.setState({loading: true});\n\n                    loadStatusesForProfilesList(data);\n                    loadTeamMembersForProfilesList(data, nextProps.currentTeamId).then(({data: membersLoaded}) => {\n                        if (membersLoaded) {\n                            this.loadComplete();\n                        }\n                    });\n                },\n                Constants.SEARCH_TIMEOUT_MILLISECONDS\n            );\n\n            this.searchTimeoutId = searchTimeoutId;\n        }\n    }\n\n    loadComplete = () => {\n        this.setState({loading: false});\n    }\n\n    nextPage = (page) => {\n        this.props.actions.loadProfilesAndTeamMembers(page + 1, USERS_PER_PAGE);\n    }\n\n    search = (term) => {\n        this.props.actions.setModalSearchTerm(term);\n    }\n\n    render() {\n        let teamMembersDropdown = null;\n        if (this.props.canManageTeamMembers) {\n            teamMembersDropdown = [TeamMembersDropdown];\n        }\n\n        const teamMembers = this.props.teamMembers;\n        const users = this.props.users;\n        const actionUserProps = {};\n\n        let usersToDisplay;\n        if (this.state.loading) {\n            usersToDisplay = null;\n        } else {\n            usersToDisplay = [];\n\n            for (let i = 0; i < users.length; i++) {\n                const user = users[i];\n\n                if (teamMembers[user.id] && user.delete_at === 0) {\n                    usersToDisplay.push(user);\n                    actionUserProps[user.id] = {\n                        teamMember: teamMembers[user.id],\n                    };\n                }\n            }\n        }\n\n        return (\n            <SearchableUserList\n                users={usersToDisplay}\n                usersPerPage={USERS_PER_PAGE}\n                total={this.props.totalTeamMembers}\n                nextPage={this.nextPage}\n                search={this.search}\n                actions={teamMembersDropdown}\n                actionUserProps={actionUserProps}\n                focusOnMount={!UserAgent.isMobile()}\n            />\n        );\n    }\n}\n","// Copyright (c) 2015-present Mattermost, Inc. All Rights Reserved.\n// See LICENSE.txt for license information.\n\nimport {connect} from 'react-redux';\nimport {bindActionCreators} from 'redux';\n\nimport {getTeamStats} from 'mattermost-redux/actions/teams';\nimport {haveITeamPermission} from 'mattermost-redux/selectors/entities/roles';\nimport {getMembersInCurrentTeam, getCurrentTeamStats} from 'mattermost-redux/selectors/entities/teams';\nimport {getProfilesInCurrentTeam, searchProfilesInCurrentTeam} from 'mattermost-redux/selectors/entities/users';\nimport {Permissions} from 'mattermost-redux/constants';\nimport {searchProfiles} from 'mattermost-redux/actions/users';\n\nimport {loadStatusesForProfilesList} from 'actions/status_actions.jsx';\nimport {loadProfilesAndTeamMembers, loadTeamMembersForProfilesList} from 'actions/user_actions.jsx';\nimport {setModalSearchTerm} from 'actions/views/search';\n\nimport MemberListTeam from './member_list_team.jsx';\n\nfunction mapStateToProps(state, ownProps) {\n    const canManageTeamMembers = haveITeamPermission(state, {team: ownProps.teamId, permission: Permissions.MANAGE_TEAM_ROLES});\n\n    const searchTerm = state.views.search.modalSearch;\n\n    let users;\n    if (searchTerm) {\n        users = searchProfilesInCurrentTeam(state, searchTerm);\n    } else {\n        users = getProfilesInCurrentTeam(state);\n    }\n\n    const stats = getCurrentTeamStats(state) || {active_member_count: 0};\n\n    return {\n        searchTerm,\n        users,\n        teamMembers: getMembersInCurrentTeam(state) || {},\n        currentTeamId: state.entities.teams.currentTeamId,\n        totalTeamMembers: stats.active_member_count,\n        canManageTeamMembers,\n    };\n}\n\nfunction mapDispatchToProps(dispatch) {\n    return {\n        actions: bindActionCreators({\n            searchProfiles,\n            getTeamStats,\n            loadProfilesAndTeamMembers,\n            loadStatusesForProfilesList,\n            loadTeamMembersForProfilesList,\n            setModalSearchTerm,\n        }, dispatch),\n    };\n}\n\nexport default connect(mapStateToProps, mapDispatchToProps)(MemberListTeam);\n","// Copyright (c) 2015-present Mattermost, Inc. All Rights Reserved.\n// See LICENSE.txt for license information.\n\nimport PropTypes from 'prop-types';\nimport React from 'react';\nimport {Modal} from 'react-bootstrap';\nimport {FormattedMessage} from 'react-intl';\n\nimport MemberListTeam from 'components/member_list_team';\n\nexport default class TeamMembersModal extends React.PureComponent {\n    static propTypes = {\n        show: PropTypes.bool.isRequired,\n        currentTeam: PropTypes.object.isRequired,\n        onHide: PropTypes.func.isRequired,\n        onLoad: PropTypes.func,\n    }\n\n    componentDidMount() {\n        if (this.props.onLoad) {\n            this.props.onLoad();\n        }\n    }\n\n    onHide = () => {\n        this.props.onHide();\n    }\n\n    render() {\n        let teamDisplayName = '';\n        if (this.props.currentTeam) {\n            teamDisplayName = this.props.currentTeam.display_name;\n        }\n\n        return (\n            <Modal\n                dialogClassName='a11y__modal more-modal'\n                show={this.props.show}\n                onHide={this.onHide}\n                onExited={this.props.onHide}\n                role='dialog'\n                aria-labelledby='teamMemberModalLabel'\n            >\n                <Modal.Header closeButton={true}>\n                    <Modal.Title\n                        componentClass='h1'\n                        id='teamMemberModalLabel'\n                    >\n                        <FormattedMessage\n                            id='team_member_modal.members'\n                            defaultMessage='{team} Members'\n                            values={{\n                                team: teamDisplayName,\n                            }}\n                        />\n                    </Modal.Title>\n                </Modal.Header>\n                <Modal.Body>\n                    <MemberListTeam\n                        teamId={this.props.currentTeam.id}\n                    />\n                </Modal.Body>\n            </Modal>\n        );\n    }\n}\n","// Copyright (c) 2015-present Mattermost, Inc. All Rights Reserved.\n// See LICENSE.txt for license information.\n\nimport {connect} from 'react-redux';\nimport {getCurrentTeam} from 'mattermost-redux/selectors/entities/teams';\n\nimport {ModalIdentifiers} from 'utils/constants';\nimport {isModalOpen} from 'selectors/views/modals';\n\nimport TeamMembersModal from './team_members_modal.jsx';\n\nfunction mapStateToProps(state) {\n    const modalId = ModalIdentifiers.TEAM_MEMBERS;\n    return {\n        currentTeam: getCurrentTeam(state),\n        show: isModalOpen(state, modalId),\n    };\n}\n\nexport default connect(mapStateToProps)(TeamMembersModal);\n","// Copyright (c) 2015-present Mattermost, Inc. All Rights Reserved.\n// See LICENSE.txt for license information.\n\nimport $ from 'jquery';\nimport PropTypes from 'prop-types';\nimport React from 'react';\nimport {FormattedMessage, FormattedDate} from 'react-intl';\n\nimport Constants from 'utils/constants.jsx';\nimport * as Utils from 'utils/utils.jsx';\nimport SettingItemMax from 'components/setting_item_max.jsx';\nimport SettingItemMin from 'components/setting_item_min';\nimport SettingPicture from 'components/setting_picture.jsx';\nimport BackIcon from 'components/icon/back_icon';\nimport LocalizedInput from 'components/localized_input/localized_input';\nimport FormattedMarkdownMessage from 'components/formatted_markdown_message';\n\nimport {t} from 'utils/i18n.jsx';\n\nconst ACCEPTED_TEAM_IMAGE_TYPES = ['image/jpeg', 'image/png', 'image/bmp'];\n\nexport default class GeneralTab extends React.Component {\n    static propTypes = {\n        updateSection: PropTypes.func.isRequired,\n        team: PropTypes.object.isRequired,\n        activeSection: PropTypes.string.isRequired,\n        closeModal: PropTypes.func.isRequired,\n        collapseModal: PropTypes.func.isRequired,\n        maxFileSize: PropTypes.number.isRequired,\n        actions: PropTypes.shape({\n            patchTeam: PropTypes.func.isRequired,\n            regenerateTeamInviteId: PropTypes.func.isRequired,\n            removeTeamIcon: PropTypes.func.isRequired,\n            setTeamIcon: PropTypes.func.isRequired,\n        }).isRequired,\n        canInviteTeamMembers: PropTypes.bool.isRequired,\n    }\n\n    constructor(props) {\n        super(props);\n\n        this.updateSection = this.updateSection.bind(this);\n        this.handleNameSubmit = this.handleNameSubmit.bind(this);\n        this.handleAllowedDomainsSubmit = this.handleAllowedDomainsSubmit.bind(this);\n        this.handleInviteIdSubmit = this.handleInviteIdSubmit.bind(this);\n        this.handleOpenInviteSubmit = this.handleOpenInviteSubmit.bind(this);\n        this.handleDescriptionSubmit = this.handleDescriptionSubmit.bind(this);\n        this.handleTeamIconSubmit = this.handleTeamIconSubmit.bind(this);\n        this.handleClose = this.handleClose.bind(this);\n\n        this.updateName = this.updateName.bind(this);\n        this.updateDescription = this.updateDescription.bind(this);\n        this.updateTeamIcon = this.updateTeamIcon.bind(this);\n        this.updateAllowedDomains = this.updateAllowedDomains.bind(this);\n        this.handleOpenInviteRadio = this.handleOpenInviteRadio.bind(this);\n\n        this.state = this.setupInitialState(props);\n    }\n\n    updateSection(section) {\n        if ($('.section-max').length) {\n            $('.settings-modal .modal-body').scrollTop(0).perfectScrollbar('update');\n        }\n        this.setState(this.setupInitialState(this.props));\n        this.props.updateSection(section);\n    }\n\n    setupInitialState(props) {\n        const team = props.team;\n\n        return {\n            name: team.display_name,\n            invite_id: team.invite_id,\n            allow_open_invite: team.allow_open_invite,\n            description: team.description,\n            allowed_domains: team.allowed_domains,\n            serverError: '',\n            clientError: '',\n            teamIconFile: null,\n            loadingIcon: false,\n            submitActive: false,\n        };\n    }\n\n    UNSAFE_componentWillReceiveProps(nextProps) { // eslint-disable-line camelcase\n        this.setState({\n            name: nextProps.team.display_name,\n            description: nextProps.team.description,\n            allowed_domains: nextProps.team.allowed_domains,\n            invite_id: nextProps.team.invite_id,\n            allow_open_invite: nextProps.team.allow_open_invite,\n        });\n    }\n\n    handleOpenInviteRadio(openInvite) {\n        this.setState({allow_open_invite: openInvite});\n    }\n\n    handleAllowedDomainsSubmit = async () => {\n        var state = {serverError: '', clientError: ''};\n\n        var data = {...this.props.team};\n        data.allowed_domains = this.state.allowed_domains;\n\n        const {error} = await this.props.actions.patchTeam(data);\n\n        if (error) {\n            state.serverError = error.message;\n            this.setState(state);\n        } else {\n            this.updateSection('');\n        }\n    }\n\n    handleOpenInviteSubmit = async () => {\n        var state = {serverError: '', clientError: ''};\n\n        var data = {...this.props.team};\n        data.allow_open_invite = this.state.allow_open_invite;\n\n        const {error} = await this.props.actions.patchTeam(data);\n\n        if (error) {\n            state.serverError = error.message;\n            this.setState(state);\n        } else {\n            this.updateSection('');\n        }\n    }\n\n    handleNameSubmit = async () => {\n        var state = {serverError: '', clientError: ''};\n        let valid = true;\n\n        const name = this.state.name.trim();\n\n        if (!name) {\n            state.clientError = Utils.localizeMessage('general_tab.required', 'This field is required');\n            valid = false;\n        } else if (name.length < Constants.MIN_TEAMNAME_LENGTH) {\n            state.clientError = (\n                <FormattedMessage\n                    id='general_tab.teamNameRestrictions'\n                    defaultMessage='Team Name must be {min} or more characters up to a maximum of {max}. You can add a longer team description.'\n                    values={{\n                        min: Constants.MIN_TEAMNAME_LENGTH,\n                        max: Constants.MAX_TEAMNAME_LENGTH,\n                    }}\n                />\n            );\n\n            valid = false;\n        } else {\n            state.clientError = '';\n        }\n\n        this.setState(state);\n\n        if (!valid) {\n            return;\n        }\n\n        var data = {...this.props.team};\n        data.display_name = this.state.name;\n\n        const {error} = await this.props.actions.patchTeam(data);\n\n        if (error) {\n            state.serverError = error.message;\n            this.setState(state);\n        } else {\n            this.updateSection('');\n        }\n    }\n\n    handleInviteIdSubmit = async () => {\n        const state = {serverError: '', clientError: ''};\n        this.setState(state);\n\n        const {error} = await this.props.actions.regenerateTeamInviteId(this.props.team.id);\n\n        if (error) {\n            state.serverError = error.message;\n            this.setState(state);\n        } else {\n            this.updateSection('');\n        }\n    }\n\n    handleClose() {\n        this.updateSection('');\n    }\n\n    handleDescriptionSubmit = async () => {\n        var state = {serverError: '', clientError: ''};\n        let valid = true;\n\n        const description = this.state.description.trim();\n        if (description === this.props.team.description) {\n            state.clientError = Utils.localizeMessage('general_tab.chooseDescription', 'Please choose a new description for your team');\n            valid = false;\n        } else {\n            state.clientError = '';\n        }\n\n        this.setState(state);\n\n        if (!valid) {\n            return;\n        }\n\n        var data = {...this.props.team};\n        data.description = this.state.description;\n\n        const {error} = await this.props.actions.patchTeam(data);\n\n        if (error) {\n            state.serverError = error.message;\n            this.setState(state);\n        } else {\n            this.updateSection('');\n        }\n    }\n\n    handleTeamIconSubmit = async () => {\n        if (!this.state.teamIconFile) {\n            return;\n        }\n\n        if (!this.state.submitActive) {\n            return;\n        }\n\n        this.setState({\n            loadingIcon: true,\n            clientError: '',\n            serverError: '',\n        });\n\n        const {error} = await this.props.actions.setTeamIcon(this.props.team.id, this.state.teamIconFile);\n\n        if (error) {\n            this.setState({\n                loadingIcon: false,\n                serverError: error.message,\n            });\n        } else {\n            this.setState({\n                loadingIcon: false,\n                submitActive: false,\n            });\n            this.updateSection('');\n        }\n    }\n\n    handleTeamIconRemove = async () => {\n        this.setState({\n            loadingIcon: true,\n            clientError: '',\n            serverError: '',\n        });\n\n        const {error} = await this.props.actions.removeTeamIcon(this.props.team.id);\n\n        if (error) {\n            this.setState({\n                loadingIcon: false,\n                serverError: error.message,\n            });\n        } else {\n            this.setState({\n                loadingIcon: false,\n                submitActive: false,\n            });\n            this.updateSection('');\n        }\n    }\n\n    componentDidMount() {\n        $('#team_settings').on('hidden.bs.modal', this.handleClose);\n    }\n\n    componentWillUnmount() {\n        $('#team_settings').off('hidden.bs.modal', this.handleClose);\n    }\n\n    handleUpdateSection = (section) => {\n        this.updateSection(section);\n    }\n\n    updateName(e) {\n        this.setState({name: e.target.value});\n    }\n\n    updateDescription(e) {\n        this.setState({description: e.target.value});\n    }\n\n    updateTeamIcon(e) {\n        if (e && e.target && e.target.files && e.target.files[0]) {\n            const file = e.target.files[0];\n\n            if (!ACCEPTED_TEAM_IMAGE_TYPES.includes(file.type)) {\n                this.setState({\n                    clientError: Utils.localizeMessage('general_tab.teamIconInvalidFileType', 'Only BMP, JPG or PNG images may be used for team icons'),\n                });\n            } else if (file.size > this.props.maxFileSize) {\n                this.setState({\n                    clientError: Utils.localizeMessage('general_tab.teamIconTooLarge', 'Unable to upload team icon. File is too large.'),\n                });\n            } else {\n                this.setState({\n                    teamIconFile: e.target.files[0],\n                    clientError: '',\n                    submitActive: true,\n                });\n            }\n        } else {\n            this.setState({\n                teamIconFile: null,\n                clientError: Utils.localizeMessage('general_tab.teamIconError', 'An error occurred while selecting the image.'),\n            });\n        }\n    }\n\n    updateAllowedDomains(e) {\n        this.setState({allowed_domains: e.target.value});\n    }\n\n    render() {\n        const team = this.props.team;\n\n        let clientError = null;\n        let serverError = null;\n\n        if (this.state.clientError) {\n            clientError = this.state.clientError;\n        }\n        if (this.state.serverError) {\n            serverError = this.state.serverError;\n        }\n\n        let openInviteSection;\n        if (this.props.activeSection === 'open_invite') {\n            let inputs;\n\n            if (team.group_constrained) {\n                inputs = [\n                    <div key='userOpenInviteOptions'>\n                        <div>\n                            <FormattedMarkdownMessage\n                                id='team_settings.openInviteDescription.groupConstrained'\n                                defaultMessage='No, members of this team are added and removed by linked groups. [Learn More](!https://mattermost.com/pl/default-ldap-group-constrained-team-channel.html)'\n                            />\n                        </div>\n                    </div>,\n                ];\n            } else {\n                inputs = [\n                    <fieldset key='userOpenInviteOptions'>\n                        <div className='radio'>\n                            <label>\n                                <input\n                                    id='teamOpenInvite'\n                                    name='userOpenInviteOptions'\n                                    type='radio'\n                                    defaultChecked={this.state.allow_open_invite}\n                                    onChange={this.handleOpenInviteRadio.bind(this, true)}\n                                />\n                                <FormattedMessage\n                                    id='general_tab.yes'\n                                    defaultMessage='Yes'\n                                />\n                            </label>\n                            <br/>\n                        </div>\n                        <div className='radio'>\n                            <label>\n                                <input\n                                    id='teamOpenInviteNo'\n                                    name='userOpenInviteOptions'\n                                    type='radio'\n                                    defaultChecked={!this.state.allow_open_invite}\n                                    onChange={this.handleOpenInviteRadio.bind(this, false)}\n                                />\n                                <FormattedMessage\n                                    id='general_tab.no'\n                                    defaultMessage='No'\n                                />\n                            </label>\n                            <br/>\n                        </div>\n                        <div className='margin-top x3'>\n                            <FormattedMessage\n                                id='general_tab.openInviteDesc'\n                                defaultMessage='When allowed, a link to this team will be included on the landing page allowing anyone with an account to join this team.'\n                            />\n                        </div>\n                    </fieldset>,\n                ];\n            }\n\n            openInviteSection = (\n                <SettingItemMax\n                    title={Utils.localizeMessage('general_tab.openInviteTitle', 'Allow any user with an account on this server to join this team')}\n                    inputs={inputs}\n                    submit={this.handleOpenInviteSubmit}\n                    serverError={serverError}\n                    updateSection={this.handleUpdateSection}\n                />\n            );\n        } else {\n            let describe = '';\n            if (this.state.allow_open_invite === true) {\n                describe = Utils.localizeMessage('general_tab.yes', 'Yes');\n            } else if (team.group_constrained) {\n                describe = Utils.localizeMessage('team_settings.openInviteSetting.groupConstrained', 'No, members of this team are added and removed by linked groups.');\n            } else {\n                describe = Utils.localizeMessage('general_tab.no', 'No');\n            }\n\n            openInviteSection = (\n                <SettingItemMin\n                    title={Utils.localizeMessage('general_tab.openInviteTitle', 'Allow any user with an account on this server to join this team')}\n                    describe={describe}\n                    updateSection={this.handleUpdateSection}\n                    section={'open_invite'}\n                />\n            );\n        }\n\n        let inviteSection;\n\n        if (this.props.activeSection === 'invite_id' && this.props.canInviteTeamMembers) {\n            const inputs = [];\n\n            inputs.push(\n                <div key='teamInviteSetting'>\n                    <div className='row'>\n                        <label className='col-sm-5 control-label visible-xs-block'/>\n                        <div className='col-sm-12'>\n                            <input\n                                id='teamInviteId'\n                                autoFocus={true}\n                                className='form-control'\n                                type='text'\n                                value={this.state.invite_id}\n                                maxLength='32'\n                                onFocus={Utils.moveCursorToEnd}\n                                readOnly={true}\n                            />\n                        </div>\n                    </div>\n                    <div className='setting-list__hint'>\n                        <FormattedMessage\n                            id='general_tab.codeLongDesc'\n                            defaultMessage='The Invite Code is used as part of the URL in the team invitation link created by {getTeamInviteLink} in the main menu. Regenerating creates a new team invitation link and invalidates the previous link.'\n                            values={{\n                                getTeamInviteLink: (\n                                    <strong>\n                                        <FormattedMessage\n                                            id='general_tab.getTeamInviteLink'\n                                            defaultMessage='Get Team Invite Link'\n                                        />\n                                    </strong>\n                                ),\n                            }}\n                        />\n                    </div>\n                </div>\n            );\n\n            inviteSection = (\n                <SettingItemMax\n                    title={Utils.localizeMessage('general_tab.codeTitle', 'Invite Code')}\n                    inputs={inputs}\n                    submit={this.handleInviteIdSubmit}\n                    serverError={serverError}\n                    clientError={clientError}\n                    updateSection={this.handleUpdateSection}\n                    saveButtonText={Utils.localizeMessage('general_tab.regenerate', 'Regenerate')}\n                />\n            );\n        } else if (this.props.canInviteTeamMembers) {\n            inviteSection = (\n                <SettingItemMin\n                    title={Utils.localizeMessage('general_tab.codeTitle', 'Invite Code')}\n                    describe={Utils.localizeMessage('general_tab.codeDesc', \"Click 'Edit' to regenerate Invite Code.\")}\n                    updateSection={this.handleUpdateSection}\n                    section={'invite_id'}\n                />\n            );\n        }\n\n        let nameSection;\n\n        if (this.props.activeSection === 'name') {\n            const inputs = [];\n\n            let teamNameLabel = (\n                <FormattedMessage\n                    id='general_tab.teamName'\n                    defaultMessage='Team Name'\n                />\n            );\n            if (Utils.isMobile()) {\n                teamNameLabel = '';\n            }\n\n            inputs.push(\n                <div\n                    key='teamNameSetting'\n                    className='form-group'\n                >\n                    <label className='col-sm-5 control-label'>{teamNameLabel}</label>\n                    <div className='col-sm-7'>\n                        <input\n                            id='teamName'\n                            autoFocus={true}\n                            className='form-control'\n                            type='text'\n                            maxLength={Constants.MAX_TEAMNAME_LENGTH.toString()}\n                            onChange={this.updateName}\n                            value={this.state.name}\n                            onFocus={Utils.moveCursorToEnd}\n                        />\n                    </div>\n                </div>\n            );\n\n            const nameExtraInfo = <span>{Utils.localizeMessage('general_tab.teamNameInfo', 'Set the name of the team as it appears on your sign-in screen and at the top of the left-hand sidebar.')}</span>;\n\n            nameSection = (\n                <SettingItemMax\n                    title={Utils.localizeMessage('general_tab.teamName', 'Team Name')}\n                    inputs={inputs}\n                    submit={this.handleNameSubmit}\n                    serverError={serverError}\n                    clientError={clientError}\n                    updateSection={this.handleUpdateSection}\n                    extraInfo={nameExtraInfo}\n                />\n            );\n        } else {\n            var describe = this.state.name;\n\n            nameSection = (\n                <SettingItemMin\n                    title={Utils.localizeMessage('general_tab.teamName', 'Team Name')}\n                    describe={describe}\n                    updateSection={this.handleUpdateSection}\n                    section={'name'}\n                />\n            );\n        }\n\n        let descriptionSection;\n\n        if (this.props.activeSection === 'description') {\n            const inputs = [];\n\n            let teamDescriptionLabel = (\n                <FormattedMessage\n                    id='general_tab.teamDescription'\n                    defaultMessage='Team Description'\n                />\n            );\n            if (Utils.isMobile()) {\n                teamDescriptionLabel = '';\n            }\n\n            inputs.push(\n                <div\n                    key='teamDescriptionSetting'\n                    className='form-group'\n                >\n                    <label className='col-sm-5 control-label'>{teamDescriptionLabel}</label>\n                    <div className='col-sm-7'>\n                        <input\n                            id='teamDescription'\n                            autoFocus={true}\n                            className='form-control'\n                            type='text'\n                            maxLength={Constants.MAX_TEAMDESCRIPTION_LENGTH.toString()}\n                            onChange={this.updateDescription}\n                            value={this.state.description}\n                            onFocus={Utils.moveCursorToEnd}\n                        />\n                    </div>\n                </div>\n            );\n\n            const descriptionExtraInfo = <span>{Utils.localizeMessage('general_tab.teamDescriptionInfo', 'Team description provides additional information to help users select the right team. Maximum of 50 characters.')}</span>;\n\n            descriptionSection = (\n                <SettingItemMax\n                    title={Utils.localizeMessage('general_tab.teamDescription', 'Team Description')}\n                    inputs={inputs}\n                    submit={this.handleDescriptionSubmit}\n                    serverError={serverError}\n                    clientError={clientError}\n                    updateSection={this.handleUpdateSection}\n                    extraInfo={descriptionExtraInfo}\n                />\n            );\n        } else {\n            let describemsg = '';\n            if (this.state.description) {\n                describemsg = this.state.description;\n            } else {\n                describemsg = (\n                    <FormattedMessage\n                        id='general_tab.emptyDescription'\n                        defaultMessage=\"Click 'Edit' to add a team description.\"\n                    />\n                );\n            }\n            descriptionSection = (\n                <SettingItemMin\n                    title={Utils.localizeMessage('general_tab.teamDescription', 'Team Description')}\n                    describe={describemsg}\n                    updateSection={this.handleUpdateSection}\n                    section={'description'}\n                />\n            );\n        }\n\n        let teamIconSection;\n        if (this.props.activeSection === 'team_icon') {\n            teamIconSection = (\n                <SettingPicture\n                    imageContext='team'\n                    title={Utils.localizeMessage('general_tab.teamIcon', 'Team Icon')}\n                    src={Utils.imageURLForTeam(team)}\n                    file={this.state.teamIconFile}\n                    serverError={this.state.serverError}\n                    clientError={this.state.clientError}\n                    loadingPicture={this.state.loadingIcon}\n                    submitActive={this.state.submitActive}\n                    updateSection={(e) => {\n                        this.updateSection('');\n                        e.preventDefault();\n                    }}\n                    onFileChange={this.updateTeamIcon}\n                    onSubmit={this.handleTeamIconSubmit}\n                    onRemove={this.handleTeamIconRemove}\n                />\n            );\n        } else {\n            let minMessage;\n\n            if (team.last_team_icon_update) {\n                minMessage = (\n                    <FormattedMessage\n                        id='general_tab.teamIconLastUpdated'\n                        defaultMessage='Image last updated {date}'\n                        values={{\n                            date: (\n                                <FormattedDate\n                                    value={new Date(team.last_team_icon_update)}\n                                    day='2-digit'\n                                    month='short'\n                                    year='numeric'\n                                />\n                            ),\n                        }}\n                    />\n                );\n            } else {\n                minMessage = Utils.isMobile() ?\n                    Utils.localizeMessage('general_tab.teamIconEditHintMobile', 'Click to upload an image') :\n                    Utils.localizeMessage('general_tab.teamIconEditHint', 'Click \\'Edit\\' to upload an image.');\n            }\n\n            teamIconSection = (\n                <SettingItemMin\n                    title={Utils.localizeMessage('general_tab.teamIcon', 'Team Icon')}\n                    describe={minMessage}\n                    section={'team_icon'}\n                    updateSection={this.handleUpdateSection}\n                />\n            );\n        }\n\n        let allowedDomainsSection;\n\n        if (this.props.activeSection === 'allowed_domains') {\n            const inputs = [];\n\n            inputs.push(\n                <div\n                    key='allowedDomainsSetting'\n                    className='form-group'\n                >\n                    <div className='col-sm-12'>\n                        <LocalizedInput\n                            id='allowedDomains'\n                            autoFocus={true}\n                            className='form-control'\n                            type='text'\n                            onChange={this.updateAllowedDomains}\n                            value={this.state.allowed_domains}\n                            onFocus={Utils.moveCursorToEnd}\n                            placeholder={{id: t('general_tab.AllowedDomainsExample'), defaultMessage: 'corp.mattermost.com, mattermost.org'}}\n                        />\n                    </div>\n                </div>\n            );\n\n            const allowedDomainsInfo = <span>{Utils.localizeMessage('general_tab.AllowedDomainsInfo', 'Users can only join the team if their email matches a specific domain (e.g. \"mattermost.org\") or list of comma-separated domains (e.g. \"corp.mattermost.com, mattermost.org\").')}</span>;\n\n            allowedDomainsSection = (\n                <SettingItemMax\n                    title={Utils.localizeMessage('general_tab.allowedDomains', 'Allow only users with a specific email domain to join this team')}\n                    inputs={inputs}\n                    submit={this.handleAllowedDomainsSubmit}\n                    serverError={serverError}\n                    clientError={clientError}\n                    updateSection={this.handleUpdateSection}\n                    extraInfo={allowedDomainsInfo}\n                />\n            );\n        } else {\n            let describemsg = '';\n            if (this.state.allowed_domains) {\n                describemsg = this.state.allowed_domains;\n            } else {\n                describemsg = (\n                    <FormattedMessage\n                        id='general_tab.allowedDomainsEdit'\n                        defaultMessage=\"Click 'Edit' to add an email domain whitelist.\"\n                    />\n                );\n            }\n            allowedDomainsSection = (\n                <SettingItemMin\n                    title={Utils.localizeMessage('general_tab.allowedDomains', 'allowedDomains')}\n                    describe={describemsg}\n                    updateSection={this.handleUpdateSection}\n                    section={'allowed_domains'}\n                />\n            );\n        }\n\n        return (\n            <div>\n                <div className='modal-header'>\n                    <button\n                        id='closeButton'\n                        type='button'\n                        className='close'\n                        data-dismiss='modal'\n                        aria-label='Close'\n                        onClick={this.props.closeModal}\n                    >\n                        <span aria-hidden='true'>{'×'}</span>\n                    </button>\n                    <h4\n                        className='modal-title'\n                        ref='title'\n                    >\n                        <div className='modal-back'>\n                            <span onClick={this.props.collapseModal}>\n                                <BackIcon/>\n                            </span>\n                        </div>\n                        <FormattedMessage\n                            id='general_tab.title'\n                            defaultMessage='General Settings'\n                        />\n                    </h4>\n                </div>\n                <div\n                    ref='wrapper'\n                    className='user-settings'\n                >\n                    <h3 className='tab-header'>\n                        <FormattedMessage\n                            id='general_tab.title'\n                            defaultMessage='General Settings'\n                        />\n                    </h3>\n                    <div className='divider-dark first'/>\n                    {nameSection}\n                    <div className='divider-light'/>\n                    {descriptionSection}\n                    <div className='divider-light'/>\n                    {teamIconSection}\n                    {!team.group_constrained &&\n                        <>\n                            <div className='divider-light'/>\n                            {allowedDomainsSection}\n                        </>\n                    }\n                    <div className='divider-light'/>\n                    {openInviteSection}\n                    {!team.group_constrained &&\n                        <>\n                            <div className='divider-light'/>\n                            {inviteSection}\n                        </>\n                    }\n                    <div className='divider-dark'/>\n                </div>\n            </div>\n        );\n    }\n}\n","// Copyright (c) 2015-present Mattermost, Inc. All Rights Reserved.\n// See LICENSE.txt for license information.\n\nimport {bindActionCreators} from 'redux';\nimport {connect} from 'react-redux';\n\nimport {getConfig} from 'mattermost-redux/selectors/entities/general';\nimport {patchTeam, removeTeamIcon, setTeamIcon, regenerateTeamInviteId} from 'mattermost-redux/actions/teams';\nimport {Permissions} from 'mattermost-redux/constants';\nimport {haveITeamPermission} from 'mattermost-redux/selectors/entities/roles';\n\nimport TeamGeneralTab from './team_general_tab.jsx';\n\nfunction mapStateToProps(state, ownProps) {\n    const config = getConfig(state);\n    const maxFileSize = parseInt(config.MaxFileSize, 10);\n\n    const canInviteTeamMembers = haveITeamPermission(state, {team: ownProps.team.id, permission: Permissions.INVITE_USER});\n\n    return {\n        maxFileSize,\n        canInviteTeamMembers,\n    };\n}\n\nfunction mapDispatchToProps(dispatch) {\n    return {\n        actions: bindActionCreators({\n            patchTeam,\n            regenerateTeamInviteId,\n            removeTeamIcon,\n            setTeamIcon,\n        }, dispatch),\n    };\n}\n\nexport default connect(mapStateToProps, mapDispatchToProps)(TeamGeneralTab);\n","// Copyright (c) 2015-present Mattermost, Inc. All Rights Reserved.\n// See LICENSE.txt for license information.\n\nimport $ from 'jquery';\nimport PropTypes from 'prop-types';\nimport React from 'react';\nimport ReactDOM from 'react-dom';\nimport {FormattedMessage} from 'react-intl';\n\nexport default class SettingsUpload extends React.Component {\n    constructor(props) {\n        super(props);\n\n        this.doFileSelect = this.doFileSelect.bind(this);\n        this.doSubmit = this.doSubmit.bind(this);\n\n        this.state = {\n            clientError: this.props.clientError,\n            serverError: this.props.serverError,\n            filename: '',\n        };\n    }\n\n    UNSAFE_componentWillReceiveProps() { // eslint-disable-line camelcase\n        this.setState({\n            clientError: this.props.clientError,\n            serverError: this.props.serverError,\n        });\n    }\n\n    doFileSelect(e) {\n        e.preventDefault();\n        var filename = $(e.target).val();\n        if (filename.substring(3, 11) === 'fakepath') {\n            filename = filename.substring(12);\n        }\n        this.setState({\n            clientError: '',\n            serverError: '',\n            filename,\n        });\n    }\n\n    doSubmit(e) {\n        e.preventDefault();\n        var inputnode = ReactDOM.findDOMNode(this.refs.uploadinput);\n        if (inputnode.files && inputnode.files[0]) {\n            this.props.submit(inputnode.files[0]);\n        } else {\n            this.setState({clientError: true});\n        }\n    }\n\n    render() {\n        let clientError = null;\n        if (this.state.clientError) {\n            clientError = (\n                <div className='file-status'>\n                    <FormattedMessage\n                        id='setting_upload.noFile'\n                        defaultMessage='No file selected.'\n                    />\n                </div>\n            );\n        }\n        let serverError = null;\n        if (this.state.serverError) {\n            serverError = (\n                <div className='file-status'>{this.state.serverError}</div>\n            );\n        }\n        let fileNameText = null;\n        let submitButtonClass = 'btn btn-sm btn-primary disabled';\n        if (this.state.filename) {\n            fileNameText = (\n                <div className='file-status file-name'>{this.state.filename}</div>\n            );\n            submitButtonClass = 'btn btn-sm btn-primary';\n        }\n\n        return (\n            <ul className='section-max'>\n                <li className='col-sm-12 section-title'>{this.props.title}</li>\n                <li className='col-sm-offset-3 col-sm-9'>{this.props.helpText}</li>\n                <li className='col-sm-offset-3 col-sm-9'>\n                    <ul className='setting-list'>\n                        <li className='setting-list-item'>\n                            <span className='btn btn-sm btn-primary btn-file sel-btn'>\n                                <FormattedMessage\n                                    id='setting_upload.select'\n                                    defaultMessage='Select file'\n                                />\n                                <input\n                                    ref='uploadinput'\n                                    accept={this.props.fileTypesAccepted}\n                                    type='file'\n                                    onChange={this.doFileSelect}\n                                />\n                            </span>\n                            <a\n                                className={submitButtonClass}\n                                onClick={this.doSubmit}\n                            >\n                                <FormattedMessage\n                                    id='setting_upload.import'\n                                    defaultMessage='Import'\n                                />\n                            </a>\n                            {fileNameText}\n                            {serverError}\n                            {clientError}\n                        </li>\n                    </ul>\n                </li>\n            </ul>\n        );\n    }\n}\n\nSettingsUpload.propTypes = {\n    title: PropTypes.string.isRequired,\n    submit: PropTypes.func.isRequired,\n    fileTypesAccepted: PropTypes.string.isRequired,\n    clientError: PropTypes.string,\n    serverError: PropTypes.string,\n    helpText: PropTypes.object,\n};\n","// Copyright (c) 2015-present Mattermost, Inc. All Rights Reserved.\n// See LICENSE.txt for license information.\n\nimport React from 'react';\nimport PropTypes from 'prop-types';\nimport {defineMessages, FormattedMessage, injectIntl, intlShape} from 'react-intl';\n\nimport * as utils from 'utils/utils.jsx';\nimport {t} from 'utils/i18n';\n\nimport LoadingSpinner from 'components/widgets/loading/loading_spinner.jsx';\n\nimport BackIcon from 'components/icon/back_icon';\nimport SettingUpload from 'components/setting_upload.jsx';\nimport SuccessIcon from 'components/icon/success_icon';\nimport WarningIcon from 'components/icon/warning_icon';\n\nconst holders = defineMessages({\n    importSlack: {\n        id: t('team_import_tab.importSlack'),\n        defaultMessage: 'Import from Slack (Beta)',\n    },\n});\n\nclass TeamImportTab extends React.Component {\n    constructor(props) {\n        super(props);\n\n        this.onImportFailure = this.onImportFailure.bind(this);\n        this.onImportSuccess = this.onImportSuccess.bind(this);\n        this.doImportSlack = this.doImportSlack.bind(this);\n\n        this.state = {\n            status: 'ready',\n            link: '',\n        };\n    }\n\n    onImportFailure() {\n        this.setState({status: 'fail'});\n    }\n\n    onImportSuccess(data) {\n        this.setState({status: 'done', link: 'data:application/octet-stream;charset=utf-8,' + encodeURIComponent(atob(data.results))});\n    }\n\n    doImportSlack(file) {\n        this.setState({status: 'in-progress', link: ''});\n        utils.importSlack(file, this.onImportSuccess, this.onImportFailure);\n    }\n\n    render() {\n        const {formatMessage} = this.props.intl;\n        const uploadDocsLink = (\n            <a\n                href='https://docs.mattermost.com/administration/migrating.html#migrating-from-slack'\n                target='_blank'\n                rel='noopener noreferrer'\n            >\n                <FormattedMessage\n                    id='team_import_tab.importHelpDocsLink'\n                    defaultMessage='documentation'\n                />\n            </a>\n        );\n\n        const uploadExportInstructions = (\n            <strong>\n                <FormattedMessage\n                    id='team_import_tab.importHelpExportInstructions'\n                    defaultMessage='Slack > Administration > Workspace settings > Import/Export Data > Export > Start Export'\n                />\n            </strong>\n        );\n\n        const uploadExporterLink = (\n            <a\n                href='https://github.com/grundleborg/slack-advanced-exporter'\n                target='_blank'\n                rel='noopener noreferrer'\n            >\n                <FormattedMessage\n                    id='team_import_tab.importHelpExporterLink'\n                    defaultMessage='Slack Advanced Exporter'\n                />\n            </a>\n        );\n\n        const importCliLink = (\n            <a\n                href='https://docs.mattermost.com/administration/migrating.html#migrating-from-slack-using-the-mattermost-cli'\n                target='_blank'\n                rel='noopener noreferrer'\n            >\n                <FormattedMessage\n                    id='team_import_tab.importHelpCliDocsLink'\n                    defaultMessage='CLI tool for Slack import'\n                />\n            </a>\n        );\n\n        const uploadHelpText = (\n            <div>\n                <p>\n                    <FormattedMessage\n                        id='team_import_tab.importHelpLine1'\n                        defaultMessage=\"Slack import to Mattermost supports importing of messages in your Slack team's public channels.\"\n                    />\n                </p>\n                <p>\n                    <FormattedMessage\n                        id='team_import_tab.importHelpLine2'\n                        defaultMessage='To import a team from Slack, go to {exportInstructions}. See {uploadDocsLink} to learn more.'\n                        values={{\n                            exportInstructions: uploadExportInstructions,\n                            uploadDocsLink,\n                        }}\n                    />\n                </p>\n                <p>\n                    <FormattedMessage\n                        id='team_import_tab.importHelpLine3'\n                        defaultMessage='To import posts with attached files, see {slackAdvancedExporterLink} for details.'\n                        values={{\n                            slackAdvancedExporterLink: uploadExporterLink,\n                        }}\n                    />\n                </p>\n                <p>\n                    <FormattedMessage\n                        id='team_import_tab.importHelpLine4'\n                        defaultMessage='For Slack teams with over 10,000 messages, we recommend using the {cliLink}.'\n                        values={{\n                            cliLink: importCliLink,\n                        }}\n                    />\n                </p>\n            </div>\n        );\n\n        const uploadSection = (\n            <SettingUpload\n                title={formatMessage(holders.importSlack)}\n                submit={this.doImportSlack}\n                helpText={uploadHelpText}\n                fileTypesAccepted='.zip'\n            />\n        );\n\n        let messageSection;\n        switch (this.state.status) {\n        case 'ready':\n            messageSection = '';\n            break;\n        case 'in-progress':\n            messageSection = (\n                <p className='confirm-import alert alert-warning'>\n                    <LoadingSpinner text={utils.localizeMessage('team_import_tab.importing', 'Importing...')}/>\n                </p>\n            );\n            break;\n        case 'done':\n            messageSection = (\n                <p className='confirm-import alert alert-success'>\n                    <SuccessIcon/>\n                    <FormattedMessage\n                        id='team_import_tab.successful'\n                        defaultMessage=' Import successful: '\n                    />\n                    <a\n                        href={this.state.link}\n                        download='MattermostImportSummary.txt'\n                    >\n                        <FormattedMessage\n                            id='team_import_tab.summary'\n                            defaultMessage='View Summary'\n                        />\n                    </a>\n                </p>\n            );\n            break;\n        case 'fail':\n            messageSection = (\n                <p className='confirm-import alert alert-warning'>\n                    <WarningIcon/>\n                    <FormattedMessage\n                        id='team_import_tab.failure'\n                        defaultMessage=' Import failure: '\n                    />\n                    <a\n                        href={this.state.link}\n                        download='MattermostImportSummary.txt'\n                    >\n                        <FormattedMessage\n                            id='team_import_tab.summary'\n                            defaultMessage='View Summary'\n                        />\n                    </a>\n                </p>\n            );\n            break;\n        }\n\n        return (\n            <div>\n                <div className='modal-header'>\n                    <button\n                        type='button'\n                        className='close'\n                        data-dismiss='modal'\n                        aria-label='Close'\n                        onClick={this.props.closeModal}\n                    >\n                        <span aria-hidden='true'>{'×'}</span>\n                    </button>\n                    <h4\n                        className='modal-title'\n                        ref='title'\n                    >\n                        <div className='modal-back'>\n                            <span onClick={this.props.collapseModal}>\n                                <BackIcon/>\n                            </span>\n                        </div>\n                        <FormattedMessage\n                            id='team_import_tab.import'\n                            defaultMessage='Import'\n                        />\n                    </h4>\n                </div>\n                <div\n                    ref='wrapper'\n                    className='user-settings'\n                >\n                    <h3 className='tab-header'>\n                        <FormattedMessage\n                            id='team_import_tab.import'\n                            defaultMessage='Import'\n                        />\n                    </h3>\n                    <div className='divider-dark first'/>\n                    {uploadSection}\n                    <div className='divider-dark'/>\n                    {messageSection}\n                </div>\n            </div>\n        );\n    }\n}\n\nTeamImportTab.propTypes = {\n    intl: intlShape.isRequired,\n    closeModal: PropTypes.func.isRequired,\n    collapseModal: PropTypes.func.isRequired,\n};\n\nexport default injectIntl(TeamImportTab);\n","// Copyright (c) 2015-present Mattermost, Inc. All Rights Reserved.\n// See LICENSE.txt for license information.\n\nimport PropTypes from 'prop-types';\nimport React from 'react';\n\nimport GeneralTab from 'components/team_general_tab';\nimport ImportTab from 'components/team_import_tab.jsx';\n\nconst TeamSettings = ({activeTab, activeSection, updateSection, closeModal, collapseModal, team}) => {\n    if (!team) {\n        return null;\n    }\n\n    let result;\n    switch (activeTab) {\n    case 'general':\n        result = (\n            <div>\n                <GeneralTab\n                    team={team}\n                    activeSection={activeSection}\n                    updateSection={updateSection}\n                    closeModal={closeModal}\n                    collapseModal={collapseModal}\n                />\n            </div>\n        );\n        break;\n    case 'import':\n        result = (\n            <div>\n                <ImportTab\n                    team={team}\n                    activeSection={activeSection}\n                    updateSection={updateSection}\n                    closeModal={closeModal}\n                    collapseModal={collapseModal}\n                />\n            </div>\n        );\n        break;\n    default:\n        result = (\n            <div/>\n        );\n        break;\n    }\n\n    return result;\n};\n\nTeamSettings.defaultProps = {\n    activeTab: '',\n    activeSection: '',\n};\n\nTeamSettings.propTypes = {\n    activeTab: PropTypes.string.isRequired,\n    activeSection: PropTypes.string.isRequired,\n    updateSection: PropTypes.func.isRequired,\n    closeModal: PropTypes.func.isRequired,\n    collapseModal: PropTypes.func.isRequired,\n    team: PropTypes.object.isRequired,\n};\n\nexport default TeamSettings;","// Copyright (c) 2015-present Mattermost, Inc. All Rights Reserved.\n// See LICENSE.txt for license information.\n\nimport {connect} from 'react-redux';\n\nimport {getCurrentTeam} from 'mattermost-redux/selectors/entities/teams';\n\nimport TeamSettings from './team_settings.jsx';\n\nfunction mapStateToProps(state) {\n    return {\n        team: getCurrentTeam(state),\n    };\n}\n\nexport default connect(mapStateToProps)(TeamSettings);","// Copyright (c) 2015-present Mattermost, Inc. All Rights Reserved.\n// See LICENSE.txt for license information.\n\nimport $ from 'jquery';\nimport React from 'react';\nimport PropTypes from 'prop-types';\nimport ReactDOM from 'react-dom';\nimport {Modal} from 'react-bootstrap';\nimport {FormattedMessage} from 'react-intl';\n\nimport * as Utils from 'utils/utils.jsx';\nimport {AsyncComponent} from 'components/async_load';\nimport loadSettingsSidebar from 'bundle-loader?lazy!components/settings_sidebar.jsx';\n\nimport TeamSettings from 'components/team_settings';\n\nexport default class TeamSettingsModal extends React.Component {\n    static propTypes = {\n        show: PropTypes.bool,\n        onHide: PropTypes.func,\n    };\n\n    constructor(props) {\n        super(props);\n\n        this.state = {\n            activeTab: 'general',\n            activeSection: '',\n        };\n    }\n\n    componentDidMount() {\n        if (!Utils.isMobile()) {\n            $('.settings-modal .settings-content').perfectScrollbar();\n        }\n    }\n\n    updateTab = (tab) => {\n        this.setState({\n            activeTab: tab,\n            activeSection: '',\n        });\n\n        if (!Utils.isMobile()) {\n            $('.settings-modal .modal-body').scrollTop(0).perfectScrollbar('update');\n        }\n    }\n\n    updateSection = (section) => {\n        if ($('.section-max').length) {\n            $('.settings-modal .modal-body').scrollTop(0).perfectScrollbar('update');\n        }\n\n        this.setState({activeSection: section});\n    }\n\n    closeModal = () => {\n        this.props.onHide();\n    }\n\n    collapseModal = () => {\n        $(ReactDOM.findDOMNode(this.refs.modalBody)).closest('.modal-dialog').removeClass('display--content');\n\n        this.setState({\n            active_tab: '',\n            active_section: '',\n        });\n    }\n\n    handleHide = () => {\n        this.props.onHide();\n    }\n\n    // called after the dialog is fully hidden and faded out\n    handleHidden = () => {\n        this.setState({\n            activeTab: 'general',\n            activeSection: '',\n        });\n    }\n\n    render() {\n        const tabs = [];\n        tabs.push({name: 'general', uiName: Utils.localizeMessage('team_settings_modal.generalTab', 'General'), icon: 'icon fa fa-cog', iconTitle: Utils.localizeMessage('generic_icons.settings', 'Settings Icon')});\n        tabs.push({name: 'import', uiName: Utils.localizeMessage('team_settings_modal.importTab', 'Import'), icon: 'icon fa fa-upload', iconTitle: Utils.localizeMessage('generic_icons.upload', 'Upload Icon')});\n\n        return (\n            <Modal\n                dialogClassName='a11y__modal settings-modal settings-modal--action'\n                show={this.props.show}\n                onHide={this.handleHide}\n                onExited={this.handleHidden}\n                role='dialog'\n                aria-labelledby='teamSettingsModalLabel'\n            >\n                <Modal.Header\n                    id='teamSettingsModalLabel'\n                    closeButton={true}\n                >\n                    <Modal.Title componentClass='h1'>\n                        <FormattedMessage\n                            id='team_settings_modal.title'\n                            defaultMessage='Team Settings'\n                        />\n                    </Modal.Title>\n                </Modal.Header>\n                <Modal.Body ref='modalBody'>\n                    <div className='settings-table'>\n                        <div className='settings-links'>\n                            <AsyncComponent\n                                doLoad={loadSettingsSidebar}\n                                tabs={tabs}\n                                activeTab={this.state.activeTab}\n                                updateTab={this.updateTab}\n                            />\n                        </div>\n                        <div className='settings-content minimize-settings'>\n                            <TeamSettings\n                                activeTab={this.state.activeTab}\n                                activeSection={this.state.activeSection}\n                                updateSection={this.updateSection}\n                                closeModal={this.closeModal}\n                                collapseModal={this.collapseModal}\n                            />\n                        </div>\n                    </div>\n                </Modal.Body>\n            </Modal>\n        );\n    }\n}\n","// Copyright (c) 2015-present Mattermost, Inc. All Rights Reserved.\n// See LICENSE.txt for license information.\n\nimport {connect} from 'react-redux';\n\nimport {ModalIdentifiers} from 'utils/constants';\nimport {isModalOpen} from 'selectors/views/modals';\n\nimport TeamSettingsModal from './team_settings_modal.jsx';\n\nfunction mapStateToProps(state) {\n    const modalId = ModalIdentifiers.TEAM_SETTINGS;\n    return {\n        show: isModalOpen(state, modalId),\n    };\n}\n\nexport default connect(mapStateToProps)(TeamSettingsModal);\n","// Copyright (c) 2015-present Mattermost, Inc. All Rights Reserved.\n// See LICENSE.txt for license information.\n\nimport PropTypes from 'prop-types';\nimport React from 'react';\nimport {Modal} from 'react-bootstrap';\nimport {FormattedMessage} from 'react-intl';\nimport {Client4} from 'mattermost-redux/client';\n\nimport Constants from 'utils/constants.jsx';\nimport {displayEntireNameForUser, localizeMessage} from 'utils/utils.jsx';\n\nimport MultiSelect from 'components/multiselect/multiselect.jsx';\nimport ProfilePicture from 'components/profile_picture.jsx';\nimport AddIcon from 'components/icon/add_icon';\nimport BotBadge from 'components/widgets/badges/bot_badge.jsx';\n\nconst USERS_PER_PAGE = 50;\nconst MAX_SELECTABLE_VALUES = 20;\n\nexport default class AddUsersToTeam extends React.Component {\n    static propTypes = {\n        currentTeamName: PropTypes.string.isRequired,\n        currentTeamId: PropTypes.string.isRequired,\n        currentTeamGroupConstrained: PropTypes.bool,\n        searchTerm: PropTypes.string.isRequired,\n        users: PropTypes.array.isRequired,\n        onHide: PropTypes.func,\n        actions: PropTypes.shape({\n            getProfilesNotInTeam: PropTypes.func.isRequired,\n            setModalSearchTerm: PropTypes.func.isRequired,\n            searchProfiles: PropTypes.func.isRequired,\n            addUsersToTeam: PropTypes.func.isRequired,\n            loadStatusesForProfilesList: PropTypes.func.isRequired,\n        }).isRequired,\n    }\n\n    static defaultProps = {\n        currentTeamGroupConstrained: false,\n    }\n\n    constructor(props) {\n        super(props);\n\n        this.searchTimeoutId = 0;\n\n        this.state = {\n            values: [],\n            show: true,\n            search: false,\n            saving: false,\n            addError: null,\n            loadingUsers: true,\n        };\n    }\n\n    componentDidMount() {\n        this.props.actions.getProfilesNotInTeam(this.props.currentTeamId, this.props.currentTeamGroupConstrained, 0, USERS_PER_PAGE * 2).then(() => {\n            this.setUsersLoadingState(false);\n        });\n    }\n\n    UNSAFE_componentWillReceiveProps(nextProps) { // eslint-disable-line camelcase\n        if (this.props.searchTerm !== nextProps.searchTerm) {\n            clearTimeout(this.searchTimeoutId);\n\n            const searchTerm = nextProps.searchTerm;\n            if (searchTerm === '') {\n                return;\n            }\n\n            this.searchTimeoutId = setTimeout(\n                async () => {\n                    this.setUsersLoadingState(true);\n                    const {data} = await this.props.actions.searchProfiles(searchTerm, {not_in_team_id: this.props.currentTeamId, group_constrained: this.props.currentTeamGroupConstrained});\n                    if (data) {\n                        this.props.actions.loadStatusesForProfilesList(data);\n                    }\n                    this.setUsersLoadingState(false);\n                },\n                Constants.SEARCH_TIMEOUT_MILLISECONDS\n            );\n        }\n    }\n\n    handleHide = () => {\n        this.props.actions.setModalSearchTerm('');\n        this.setState({show: false});\n    }\n\n    handleExit = () => {\n        if (this.props.onHide) {\n            this.props.onHide();\n        }\n    }\n\n    handleResponse = (err) => {\n        let addError = null;\n        if (err && err.message) {\n            addError = err.message;\n        }\n\n        this.setState({\n            saving: false,\n            addError,\n        });\n    }\n\n    handleSubmit = async (e) => {\n        if (e) {\n            e.preventDefault();\n        }\n\n        const userIds = this.state.values.map((v) => v.id);\n        if (userIds.length === 0) {\n            return;\n        }\n\n        this.setState({saving: true});\n\n        const {error} = await this.props.actions.addUsersToTeam(this.props.currentTeamId, userIds);\n        this.handleResponse(error);\n        if (!error) {\n            this.handleHide();\n        }\n    }\n\n    addValue = (value) => {\n        const values = Object.assign([], this.state.values);\n        const userIds = values.map((v) => v.id);\n        if (value && value.id && userIds.indexOf(value.id) === -1) {\n            values.push(value);\n        }\n\n        this.setState({values});\n    }\n\n    setUsersLoadingState = (loadingState) => {\n        this.setState({\n            loadingUsers: loadingState,\n        });\n    }\n\n    handlePageChange = (page, prevPage) => {\n        if (page > prevPage) {\n            this.setUsersLoadingState(true);\n            this.props.actions.getProfilesNotInTeam(this.props.currentTeamId, this.props.currentTeamGroupConstrained, page + 1, USERS_PER_PAGE).then(() => {\n                this.setUsersLoadingState(false);\n            });\n        }\n    }\n\n    handleDelete = (values) => {\n        this.setState({values});\n    }\n\n    search = (term) => {\n        this.props.actions.setModalSearchTerm(term);\n    }\n\n    renderAriaLabel = (option) => {\n        if (!option) {\n            return null;\n        }\n        return option.username;\n    }\n\n    renderOption = (option, isSelected, onAdd) => {\n        var rowSelected = '';\n        if (isSelected) {\n            rowSelected = 'more-modal__row--selected';\n        }\n\n        let email = option.email;\n        if (option.is_bot) {\n            email = null;\n        }\n\n        return (\n            <div\n                key={option.id}\n                ref={isSelected ? 'selected' : option.id}\n                className={'more-modal__row clickable ' + rowSelected}\n                onClick={() => onAdd(option)}\n            >\n                <ProfilePicture\n                    src={Client4.getProfilePictureUrl(option.id, option.last_picture_update)}\n                    width='32'\n                    height='32'\n                />\n                <div\n                    className='more-modal__details'\n                >\n                    <div className='more-modal__name'>\n                        {displayEntireNameForUser(option)}\n                        <BotBadge\n                            show={Boolean(option.is_bot)}\n                            className='badge-popoverlist'\n                        />\n                    </div>\n                    <div className='more-modal__description'>\n                        {email}\n                    </div>\n                </div>\n                <div className='more-modal__actions'>\n                    <div className='more-modal__actions--round'>\n                        <AddIcon/>\n                    </div>\n                </div>\n            </div>\n        );\n    }\n\n    renderValue(props) {\n        return props.data.username;\n    }\n\n    render() {\n        const numRemainingText = (\n            <div id='numPeopleRemaining'>\n                <FormattedMessage\n                    id='multiselect.numPeopleRemaining'\n                    defaultMessage='Use ↑↓ to browse, ↵ to select. You can add {num, number} more {num, plural, one {person} other {people}}. '\n                    values={{\n                        num: MAX_SELECTABLE_VALUES - this.state.values.length,\n                    }}\n                />\n            </div>\n        );\n\n        const buttonSubmitText = localizeMessage('multiselect.add', 'Add');\n        const buttonSubmitLoadingText = localizeMessage('multiselect.adding', 'Adding...');\n\n        let users = [];\n        if (this.props.users) {\n            users = this.props.users.filter((user) => user.delete_at === 0);\n        }\n\n        let addError = null;\n        if (this.state.addError) {\n            addError = (<div className='has-error col-sm-12'><label className='control-label font-weight--normal'>{this.state.addError}</label></div>);\n        }\n\n        return (\n            <Modal\n                id='addUsersToTeamModal'\n                dialogClassName={'a11y__modal more-modal more-direct-channels'}\n                show={this.state.show}\n                onHide={this.handleHide}\n                onExited={this.handleExit}\n                role='dialog'\n                aria-labelledby='addTeamModalLabel'\n            >\n                <Modal.Header closeButton={true}>\n                    <Modal.Title\n                        componentClass='h1'\n                        id='addTeamModalLabel'\n                    >\n                        <FormattedMessage\n                            id='add_users_to_team.title'\n                            defaultMessage='Add New Members To {teamName} Team'\n                            values={{\n                                teamName: (\n                                    <strong>{this.props.currentTeamName}</strong>\n                                ),\n                            }}\n                        />\n                    </Modal.Title>\n                </Modal.Header>\n                <Modal.Body\n                    role='application'\n                >\n                    {addError}\n                    <MultiSelect\n                        key='addUsersToTeamKey'\n                        options={users}\n                        optionRenderer={this.renderOption}\n                        values={this.state.values}\n                        valueRenderer={this.renderValue}\n                        ariaLabelRenderer={this.renderAriaLabel}\n                        perPage={USERS_PER_PAGE}\n                        handlePageChange={this.handlePageChange}\n                        handleInput={this.search}\n                        handleDelete={this.handleDelete}\n                        handleAdd={this.addValue}\n                        handleSubmit={this.handleSubmit}\n                        maxValues={MAX_SELECTABLE_VALUES}\n                        numRemainingText={numRemainingText}\n                        buttonSubmitText={buttonSubmitText}\n                        buttonSubmitLoadingText={buttonSubmitLoadingText}\n                        saving={this.state.saving}\n                        loading={this.state.loadingUsers}\n                        placeholderText={localizeMessage('multiselect.placeholder', 'Search and add members')}\n                    />\n                </Modal.Body>\n            </Modal>\n        );\n    }\n}\n","// Copyright (c) 2015-present Mattermost, Inc. All Rights Reserved.\n// See LICENSE.txt for license information.\n\nimport {connect} from 'react-redux';\nimport {bindActionCreators} from 'redux';\nimport {getProfilesNotInTeam, searchProfiles} from 'mattermost-redux/actions/users';\nimport {getCurrentTeam} from 'mattermost-redux/selectors/entities/teams';\nimport {searchProfilesNotInCurrentTeam, getProfilesNotInCurrentTeam} from 'mattermost-redux/selectors/entities/users';\n\nimport {loadStatusesForProfilesList} from 'actions/status_actions.jsx';\nimport {addUsersToTeam} from 'actions/team_actions.jsx';\nimport {setModalSearchTerm} from 'actions/views/search';\n\nimport {ModalIdentifiers} from 'utils/constants';\nimport {isModalOpen} from 'selectors/views/modals';\n\nimport AddUsersToTeam from './add_users_to_team.jsx';\n\nfunction mapStateToProps(state) {\n    const searchTerm = state.views.search.modalSearch;\n\n    let users;\n    if (searchTerm) {\n        users = searchProfilesNotInCurrentTeam(state, searchTerm, true);\n    } else {\n        users = getProfilesNotInCurrentTeam(state);\n    }\n\n    const team = getCurrentTeam(state) || {};\n    const modalId = ModalIdentifiers.ADD_USER_TO_TEAM;\n\n    return {\n        currentTeamName: team.display_name,\n        currentTeamId: team.id,\n        currentTeamGroupConstrained: team.group_constrained,\n        searchTerm,\n        users,\n        show: isModalOpen(state, modalId),\n    };\n}\n\nfunction mapDispatchToProps(dispatch) {\n    return {\n        actions: bindActionCreators({\n            getProfilesNotInTeam,\n            setModalSearchTerm,\n            searchProfiles,\n            addUsersToTeam,\n            loadStatusesForProfilesList,\n        }, dispatch),\n    };\n}\n\nexport default connect(mapStateToProps, mapDispatchToProps)(AddUsersToTeam);\n","// Copyright (c) 2015-present Mattermost, Inc. All Rights Reserved.\n// See LICENSE.txt for license information.\n\nimport React from 'react';\nimport PropTypes from 'prop-types';\nimport {Link} from 'react-router-dom';\n\nimport menuItem from './menu_item.jsx';\n\nexport const MenuItemLinkImpl = ({to, text}) => <Link to={to}>{text}</Link>;\nMenuItemLinkImpl.propTypes = {\n    to: PropTypes.string.isRequired,\n    text: PropTypes.oneOfType([PropTypes.string, PropTypes.node]).isRequired,\n};\n\nconst MenuItemLink = menuItem(MenuItemLinkImpl);\nMenuItemLink.displayName = 'MenuItemLink';\n\nexport default MenuItemLink;\n","// Copyright (c) 2015-present Mattermost, Inc. All Rights Reserved.\n// See LICENSE.txt for license information.\n\nimport PropTypes from 'prop-types';\nimport React from 'react';\nimport {Modal} from 'react-bootstrap';\nimport {FormattedMessage} from 'react-intl';\n\nimport LoadingScreen from 'components/loading_screen.jsx';\n\nexport const DEFAULT_NUM_PER_PAGE = 50;\n\nexport default class ListModal extends React.PureComponent {\n    static propTypes = {\n\n        /**\n         * loadItems is a function that receives the params (pageNumber, searchTerm) and should return an object\n         * with the shape {items: [], totalCount: 0}.\n         * items: an array of objects that are passed to each renderRow function.\n         * totalCount: an integer representing the total number of items as displayed in the pagination text.\n         *\n         * Example:\n         *     const loadItems = async (pageNumber, searchTerm) => {\n         *         const {data} = await loadFromServer(searchTerm, pageNumber, PER_PAGE);\n         *         return {\n         *             items: data.users,\n         *             totalCount: data.total,\n         *         };\n         *     };\n         */\n        loadItems: PropTypes.func.isRequired,\n\n        /**\n         * renderRow is a function that receives the params (item, listModal) and should return JSX.\n         * item: an object as returned by each entry in the loadItems function's 'items' array.\n         * listModal: the instance of the ListModal component class.\n         *\n         * Example:\n         *     const renderRow = (item, listModal) => <div>{item.id}</div>;\n         */\n        renderRow: PropTypes.func.isRequired,\n\n        /**\n         * onHide (optional) a function to be invoked when the modal is closed.\n         */\n        onHide: PropTypes.func,\n\n        /**\n         * titleText (optional) a string to show at the top bar of the modal.\n         */\n        titleText: PropTypes.string,\n\n        /**\n         * searchPlaceholderText (optional) a string to show as a placeholder in the search input.\n         */\n        searchPlaceholderText: PropTypes.string,\n\n        /**\n         * titleBarButtonText (optional) a string representing a title bar button text.\n         */\n        titleBarButtonText: PropTypes.string,\n\n        /**\n         * titleBarButtonOnClick (optional) a func to handle title button bar clicks.\n         */\n        titleBarButtonOnClick: PropTypes.func,\n\n        /**\n         * numPerPage (optional) a number setting how many items per page should be displayed. Defaults to\n         * DEFAULT_NUM_PER_PAGE.\n         */\n        numPerPage: PropTypes.number,\n\n        /**\n         * show (optional) a boolean setting to hide the modal via props rather then unmounting it.\n         */\n        show: PropTypes.bool,\n    };\n\n    static defaultProps = {\n        show: true,\n    };\n\n    constructor(props) {\n        super(props);\n\n        this.numPerPage = props.numPerPage || DEFAULT_NUM_PER_PAGE;\n\n        this.state = {\n            show: true,\n            page: 0,\n            items: [],\n            totalCount: 0,\n            loading: true,\n            searchTerm: '',\n        };\n    }\n\n    async componentWillMount() {\n        const {totalCount, items} = await this.props.loadItems(0, '');\n        this.setState({totalCount, items, loading: false});\n    }\n\n    handleHide = () => {\n        this.setState({show: false});\n    }\n\n    handleExit = () => {\n        if (this.props.onHide) {\n            this.props.onHide();\n        }\n    }\n\n    renderRows() {\n        if (this.state.loading) {\n            return (\n                <div>\n                    <LoadingScreen\n                        position='absolute'\n                        key='loading'\n                    />\n                </div>\n            );\n        }\n        return this.state.items.map((item) => (\n            this.props.renderRow(item, this)\n        ));\n    }\n\n    onNext = () => {\n        const nextPage = this.state.page + 1;\n        this.onPageChange(nextPage);\n    }\n\n    onPrev = () => {\n        const prevPage = this.state.page - 1;\n        this.onPageChange(prevPage);\n    }\n\n    onPageChange = async (page) => {\n        this.setState({loading: true});\n        const result = await this.props.loadItems(page, this.state.searchTerm);\n        this.setState({page, items: result.items, loading: false});\n    }\n\n    onSearchInput = async (event) => {\n        const {target} = event;\n        const searchTerm = target.value;\n        this.setState({loading: true, searchTerm});\n        const result = await this.props.loadItems(0, searchTerm);\n        const {items, totalCount} = result;\n        this.setState({loading: false, items, totalCount});\n    }\n\n    paginationRange() {\n        let startCount = (this.state.page * this.numPerPage) + 1;\n        const endCount = (startCount + this.state.items.length) - 1;\n        if (endCount === 0) {\n            startCount = 0;\n        }\n        return {startCount, endCount};\n    }\n\n    render() {\n        if (!this.props.show) {\n            return null;\n        }\n        const {endCount, startCount} = this.paginationRange();\n        return (\n            <div>\n                <Modal\n                    dialogClassName='a11y__modal more-modal more-modal--action'\n                    show={this.state.show}\n                    onHide={this.handleHide}\n                    onExited={this.handleExit}\n                >\n                    <Modal.Header closeButton={true}>\n                        <Modal.Title componentClass='h1'>\n                            <span className='name'>{this.props.titleText}</span>\n                        </Modal.Title>\n                        {this.props.titleBarButtonText && this.props.titleBarButtonOnClick &&\n                            <a\n                                className='btn btn-md btn-primary'\n                                href='#'\n                                onClick={this.props.titleBarButtonOnClick}\n                            >\n                                {this.props.titleBarButtonText}\n                            </a>}\n                    </Modal.Header>\n                    <Modal.Body>\n                        <div className='filtered-user-list'>\n                            <div className='filter-row'>\n                                <div className='col-xs-12'>\n                                    <input\n                                        id='searchUsersInput'\n                                        className='form-control filter-textbox'\n                                        placeholder={this.props.searchPlaceholderText}\n                                        onChange={this.onSearchInput}\n                                    />\n                                </div>\n                                <div className='col-sm-12'>\n                                    <span className='member-count pull-left'>\n                                        <FormattedMessage\n                                            id='list_modal.paginatorCount'\n                                            defaultMessage='{startCount, number} - {endCount, number} of {total, number} total'\n                                            values={{\n                                                startCount,\n                                                endCount,\n                                                total: this.state.totalCount,\n                                            }}\n                                        />\n                                    </span>\n                                </div>\n                            </div>\n                            <div className='more-modal__list'>\n                                <div>\n                                    {this.renderRows()}\n                                </div>\n                            </div>\n                            <div className='filter-controls'>\n                                {this.state.page > 0 &&\n                                <button\n                                    onClick={this.onPrev}\n                                    className='btn btn-link filter-control filter-control__prev'\n                                >\n                                    <FormattedMessage\n                                        id='filtered_user_list.prev'\n                                        defaultMessage='Previous'\n                                    />\n                                </button>}\n                                {(this.state.items.length >= this.props.numPerPage) && endCount !== this.state.totalCount &&\n                                <button\n                                    onClick={this.onNext}\n                                    className='btn btn-link filter-control filter-control__next'\n                                >\n                                    <FormattedMessage\n                                        id='filtered_user_list.next'\n                                        defaultMessage='Next'\n                                    />\n                                </button>}\n                            </div>\n                        </div>\n                    </Modal.Body>\n                </Modal>\n            </div >\n        );\n    }\n}\n","// Copyright (c) 2015-present Mattermost, Inc. All Rights Reserved.\n// See LICENSE.txt for license information.\n\nimport PropTypes from 'prop-types';\nimport React from 'react';\nimport {FormattedMessage, intlShape} from 'react-intl';\n\nimport {Groups} from 'mattermost-redux/constants';\n\nimport ConfirmModal from 'components/confirm_modal.jsx';\n\nimport AddGroupsToTeamModal from 'components/add_groups_to_team_modal';\n\nimport {ModalIdentifiers} from 'utils/constants.jsx';\n\nimport ListModal, {DEFAULT_NUM_PER_PAGE} from 'components/list_modal.jsx';\n\nimport groupsAvatar from 'images/groups-avatar.png';\n\nexport default class TeamGroupsManageModal extends React.PureComponent {\n    static propTypes = {\n        team: PropTypes.object.isRequired,\n        actions: PropTypes.shape({\n            getGroupsAssociatedToTeam: PropTypes.func.isRequired,\n            unlinkGroupSyncable: PropTypes.func.isRequired,\n            closeModal: PropTypes.func.isRequired,\n            openModal: PropTypes.func.isRequired,\n        }).isRequired,\n    };\n\n    static contextTypes = {\n        intl: intlShape,\n    };\n\n    state = {\n        showConfirmModal: false,\n        item: {member_count: 0},\n        listModal: null,\n    };\n\n    loadItems = async (pageNumber, searchTerm) => {\n        const {data} = await this.props.actions.getGroupsAssociatedToTeam(this.props.team.id, searchTerm, pageNumber, DEFAULT_NUM_PER_PAGE);\n        return {\n            items: data.groups,\n            totalCount: data.totalGroupCount,\n        };\n    };\n\n    handleDeleteCanceled = () => {\n        this.setState({showConfirmModal: false});\n    };\n\n    handleDeleteConfirmed = () => {\n        this.setState({showConfirmModal: false});\n        const {item, listModal} = this.state;\n        this.props.actions.unlinkGroupSyncable(item.id, this.props.team.id, Groups.SYNCABLE_TYPE_TEAM).then(async () => {\n            listModal.setState({loading: true});\n            const {items} = await listModal.props.loadItems(listModal.setState.page, listModal.state.searchTerm);\n            listModal.setState({loading: false, items});\n        });\n    };\n\n    onClickRemoveGroup = (item, listModal) => {\n        this.setState({showConfirmModal: true, item, listModal});\n    };\n\n    onClickConfirmRemoveGroup = (item, listModal) => this.props.actions.unlinkGroupSyncable(item.id, this.props.team.id, Groups.SYNCABLE_TYPE_TEAM).then(async () => {\n        listModal.setState({loading: true});\n        const {items} = await listModal.props.loadItems(listModal.setState.page, listModal.state.searchTerm);\n        listModal.setState({loading: false, items});\n    });\n\n    onHide = () => {\n        this.props.actions.closeModal(ModalIdentifiers.MANAGE_TEAM_GROUPS);\n    };\n\n    titleButtonOnClick = () => {\n        this.onHide();\n        this.props.actions.openModal({modalId: ModalIdentifiers.ADD_GROUPS_TO_TEAM, dialogType: AddGroupsToTeamModal});\n    };\n\n    renderRow = (item, listModal) => {\n        return (\n            <div\n                key={item.id}\n                className='more-modal__row'\n            >\n                <img\n                    className='more-modal__image'\n                    src={groupsAvatar}\n                    alt='group picture'\n                    width='32'\n                    height='32'\n                />\n                <div className='more-modal__details'>\n                    <div className='more-modal__name'>{item.display_name} {'-'} <span>\n                        <FormattedMessage\n                            id='numMembers'\n                            defaultMessage='{num, number} {num, plural, one {member} other {members}}'\n                            values={{\n                                num: item.member_count,\n                            }}\n                        /></span>\n                    </div>\n                </div>\n                <div className='more-modal__actions'>\n                    <button\n                        id='removeMember'\n                        type='button'\n                        className='btn btn-danger btn-message'\n                        onClick={() => this.onClickRemoveGroup(item, listModal)}\n                    >\n                        <FormattedMessage\n                            id='group_list_modal.removeGroupButton'\n                            defaultMessage='Remove Group'\n                        />\n                    </button>\n                </div>\n            </div>\n        );\n    };\n\n    render() {\n        const {formatMessage} = this.context.intl;\n        const memberCount = this.state.item.member_count;\n        return (\n            <>\n                <ListModal\n                    show={!this.state.showConfirmModal}\n                    titleText={formatMessage({id: 'groups', defaultMessage: '{team} Groups'}, {team: this.props.team.display_name})}\n                    searchPlaceholderText={formatMessage({id: 'manage_team_groups_modal.search_placeholder', defaultMessage: 'Search groups'})}\n                    renderRow={this.renderRow}\n                    loadItems={this.loadItems}\n                    onHide={this.onHide}\n                    titleBarButtonText={formatMessage({id: 'group_list_modal.addGroupButton', defaultMessage: 'Add Groups'})}\n                    titleBarButtonOnClick={this.titleButtonOnClick}\n                />\n                <ConfirmModal\n                    show={this.state.showConfirmModal}\n                    title={formatMessage({id: 'remove_group_confirm_title', defaultMessage: 'Remove Group and {memberCount, number} {memberCount, plural, one {Member} other {Members}}'}, {memberCount})}\n                    message={formatMessage({id: 'remove_group_confirm_message', defaultMessage: '{memberCount, number} {memberCount, plural, one {member} other {members}} associated to this group will be removed from the team on the next scheduled AD/LDAP synchronization. Are you sure you wish to remove this group and {memberCount} {memberCount, plural, one {member} other {members}}?'}, {memberCount})}\n                    confirmButtonText={formatMessage({id: 'remove_group_confirm_button', defaultMessage: 'Yes, Remove Group and {memberCount, plural, one {Member} other {Members}}'}, {memberCount})}\n                    onConfirm={this.handleDeleteConfirmed}\n                    onCancel={this.handleDeleteCanceled}\n                />\n            </>\n        );\n    }\n}\n","// Copyright (c) 2015-present Mattermost, Inc. All Rights Reserved.\n// See LICENSE.txt for license information.\n\nimport {bindActionCreators} from 'redux';\nimport {connect} from 'react-redux';\nimport {getGroupsAssociatedToTeam, unlinkGroupSyncable} from 'mattermost-redux/actions/groups';\n\nimport {closeModal, openModal} from 'actions/views/modals';\n\nimport TeamGroupsManageModal from './team_groups_manage_modal';\n\nconst mapStateToProps = (state, ownProps) => {\n    return {\n        team: state.entities.teams.teams[ownProps.teamID],\n    };\n};\n\nconst mapDispatchToProps = (dispatch) => ({\n    actions: bindActionCreators({\n        getGroupsAssociatedToTeam,\n        closeModal,\n        openModal,\n        unlinkGroupSyncable,\n    }, dispatch),\n});\n\nexport default connect(mapStateToProps, mapDispatchToProps)(TeamGroupsManageModal);\n","// Copyright (c) 2015-present Mattermost, Inc. All Rights Reserved.\n// See LICENSE.txt for license information.\n\nimport PropTypes from 'prop-types';\nimport React from 'react';\nimport {Permissions} from 'mattermost-redux/constants';\nimport {intlShape} from 'react-intl';\n\nimport * as GlobalActions from 'actions/global_actions.jsx';\nimport {Constants, ModalIdentifiers} from 'utils/constants.jsx';\nimport {cmdOrCtrlPressed, isKeyPressed, localizeMessage} from 'utils/utils';\nimport {useSafeUrl} from 'utils/url';\nimport * as UserAgent from 'utils/user_agent.jsx';\nimport InviteMemberModal from 'components/invite_member_modal';\n\nimport TeamPermissionGate from 'components/permissions_gates/team_permission_gate';\nimport SystemPermissionGate from 'components/permissions_gates/system_permission_gate';\n\nimport LeaveTeamIcon from 'components/svg/leave_team_icon';\n\nimport LeaveTeamModal from 'components/leave_team_modal';\nimport UserSettingsModal from 'components/user_settings/modal';\nimport TeamMembersModal from 'components/team_members_modal';\nimport TeamSettingsModal from 'components/team_settings_modal';\nimport AboutBuildModal from 'components/about_build_modal';\nimport AddUsersToTeam from 'components/add_users_to_team';\nimport AddGroupsToTeamModal from 'components/add_groups_to_team_modal';\n\nimport Menu from 'components/widgets/menu/menu.jsx';\nimport MenuGroup from 'components/widgets/menu/menu_group.jsx';\nimport MenuItemAction from 'components/widgets/menu/menu_items/menu_item_action.jsx';\nimport MenuItemExternalLink from 'components/widgets/menu/menu_items/menu_item_external_link.jsx';\nimport MenuItemLink from 'components/widgets/menu/menu_items/menu_item_link.jsx';\nimport MenuItemToggleModalRedux from 'components/widgets/menu/menu_items/menu_item_toggle_modal_redux.jsx';\nimport TeamGroupsManageModal from 'components/team_groups_manage_modal';\n\nexport default class MainMenu extends React.PureComponent {\n    static propTypes = {\n        mobile: PropTypes.bool.isRequired,\n        id: PropTypes.string,\n        teamId: PropTypes.string,\n        teamType: PropTypes.string,\n        teamName: PropTypes.string,\n        siteName: PropTypes.string,\n        currentUser: PropTypes.object,\n        appDownloadLink: PropTypes.string,\n        enableCommands: PropTypes.bool.isRequired,\n        enableCustomEmoji: PropTypes.bool.isRequired,\n        canCreateOrDeleteCustomEmoji: PropTypes.bool.isRequired,\n        enableIncomingWebhooks: PropTypes.bool.isRequired,\n        enableOAuthServiceProvider: PropTypes.bool.isRequired,\n        enableOutgoingWebhooks: PropTypes.bool.isRequired,\n        enableUserCreation: PropTypes.bool.isRequired,\n        enableEmailInvitations: PropTypes.bool.isRequired,\n        experimentalPrimaryTeam: PropTypes.string,\n        helpLink: PropTypes.string,\n        reportAProblemLink: PropTypes.string,\n        moreTeamsToJoin: PropTypes.bool.isRequired,\n        pluginMenuItems: PropTypes.arrayOf(PropTypes.object),\n        isMentionSearch: PropTypes.bool,\n        teamIsGroupConstrained: PropTypes.bool.isRequired,\n        actions: PropTypes.shape({\n            openModal: PropTypes.func.isRequred,\n            showMentions: PropTypes.func,\n            showFlaggedPosts: PropTypes.func,\n            closeRightHandSide: PropTypes.func.isRequired,\n            closeRhsMenu: PropTypes.func.isRequired,\n        }).isRequired,\n    };\n\n    static defaultProps = {\n        teamType: '',\n        mobile: false,\n        pluginMenuItems: [],\n    };\n\n    static contextTypes = {\n        intl: intlShape.isRequired,\n    };\n\n    toggleShortcutsModal = (e) => {\n        e.preventDefault();\n        GlobalActions.toggleShortcutsModal();\n    }\n\n    showGetTeamInviteLinkModal = (e) => {\n        e.preventDefault();\n        GlobalActions.showGetTeamInviteLinkModal();\n    }\n\n    componentDidMount() {\n        document.addEventListener('keydown', this.handleKeyDown);\n    }\n\n    componentWillUnmount() {\n        document.removeEventListener('keydown', this.handleKeyDown);\n    }\n\n    handleKeyDown = (e) => {\n        if (cmdOrCtrlPressed(e) && e.shiftKey && isKeyPressed(e, Constants.KeyCodes.A)) {\n            this.props.actions.openModal({ModalId: ModalIdentifiers.USER_SETTINGS, dialogType: UserSettingsModal});\n        }\n    }\n\n    handleEmitUserLoggedOutEvent = () => {\n        GlobalActions.emitUserLoggedOutEvent();\n    }\n\n    getFlagged = (e) => {\n        e.preventDefault();\n        this.props.actions.showFlaggedPosts();\n        this.props.actions.closeRhsMenu();\n    }\n\n    searchMentions = (e) => {\n        e.preventDefault();\n\n        if (this.props.isMentionSearch) {\n            this.props.actions.closeRightHandSide();\n        } else {\n            this.props.actions.closeRhsMenu();\n            this.props.actions.showMentions();\n        }\n    }\n\n    render() {\n        const {currentUser, teamIsGroupConstrained} = this.props;\n\n        if (!currentUser) {\n            return null;\n        }\n\n        const {formatMessage} = this.context.intl;\n\n        const pluginItems = this.props.pluginMenuItems.map((item) => {\n            return (\n                <MenuItemAction\n                    id={item.id + '_pluginmenuitem'}\n                    key={item.id + '_pluginmenuitem'}\n                    onClick={() => {\n                        if (item.action) {\n                            item.action();\n                        }\n                    }}\n                    text={item.text}\n                    icon={this.props.mobile && item.mobileIcon}\n                />\n            );\n        });\n\n        return (\n            <Menu\n                mobile={this.props.mobile}\n                id={this.props.id}\n                ariaLabel={localizeMessage('navbar_dropdown.menuAriaLabel', 'main menu')}\n            >\n                <MenuGroup>\n                    <MenuItemAction\n                        id='recentMentions'\n                        show={this.props.mobile}\n                        onClick={this.searchMentions}\n                        icon={this.props.mobile && <i className='mentions'>{'@'}</i>}\n                        text={localizeMessage('sidebar_right_menu.recentMentions', 'Recent Mentions')}\n                    />\n                    <MenuItemAction\n                        id='flaggedPosts'\n                        show={this.props.mobile}\n                        onClick={this.getFlagged}\n                        icon={this.props.mobile && <i className='fa fa-flag'/>}\n                        text={localizeMessage('sidebar_right_menu.flagged', 'Flagged Posts')}\n                    />\n                </MenuGroup>\n                <MenuGroup>\n                    <MenuItemToggleModalRedux\n                        id='accountSettings'\n                        modalId={ModalIdentifiers.USER_SETTINGS}\n                        dialogType={UserSettingsModal}\n                        text={localizeMessage('navbar_dropdown.accountSettings', 'Account Settings')}\n                        icon={this.props.mobile && <i className='fa fa-cog'/>}\n                    />\n                </MenuGroup>\n                <MenuGroup>\n                    <TeamPermissionGate\n                        teamId={this.props.teamId}\n                        permissions={[Permissions.MANAGE_TEAM]}\n                    >\n                        <MenuItemToggleModalRedux\n                            id='addGroupsToTeam'\n                            show={teamIsGroupConstrained}\n                            modalId={ModalIdentifiers.ADD_GROUPS_TO_TEAM}\n                            dialogType={AddGroupsToTeamModal}\n                            text={localizeMessage('navbar_dropdown.addGroupsToTeam', 'Add Groups to Team')}\n                            icon={this.props.mobile && <i className='fa fa-user-plus'/>}\n                        />\n                    </TeamPermissionGate>\n                    <TeamPermissionGate\n                        teamId={this.props.teamId}\n                        permissions={[Permissions.ADD_USER_TO_TEAM]}\n                    >\n                        <MenuItemToggleModalRedux\n                            id='addUsersToTeam'\n                            show={teamIsGroupConstrained}\n                            modalId={ModalIdentifiers.ADD_USER_TO_TEAM}\n                            dialogType={AddUsersToTeam}\n                            text={localizeMessage('navbar_dropdown.addMemberToTeam', 'Add Members to Team')}\n                            icon={this.props.mobile && <i className='fa fa-user-plus'/>}\n                        />\n                    </TeamPermissionGate>\n                </MenuGroup>\n                <MenuGroup>\n                    <TeamPermissionGate\n                        teamId={this.props.teamId}\n                        permissions={[Permissions.ADD_USER_TO_TEAM]}\n                    >\n                        <TeamPermissionGate\n                            teamId={this.props.teamId}\n                            permissions={[Permissions.INVITE_USER]}\n                        >\n                            <MenuItemToggleModalRedux\n                                id='sendEmailInvite'\n                                show={this.props.enableEmailInvitations && !teamIsGroupConstrained}\n                                modalId={ModalIdentifiers.EMAIL_INVITE}\n                                dialogType={InviteMemberModal}\n                                text={localizeMessage('navbar_dropdown.inviteMember', 'Send Email Invite')}\n                                icon={this.props.mobile && <i className='fa fa-user-plus'/>}\n                            />\n                        </TeamPermissionGate>\n                        <TeamPermissionGate\n                            teamId={this.props.teamId}\n                            permissions={[Permissions.INVITE_USER]}\n                        >\n                            <MenuItemAction\n                                id='getTeamInviteLink'\n                                show={this.props.teamType === Constants.OPEN_TEAM && this.props.enableUserCreation && !teamIsGroupConstrained}\n                                onClick={this.showGetTeamInviteLinkModal}\n                                text={localizeMessage('navbar_dropdown.teamLink', 'Get Team Invite Link')}\n                                icon={this.props.mobile && <i className='fa fa-link'/>}\n                            />\n                        </TeamPermissionGate>\n                        <MenuItemToggleModalRedux\n                            id='addUsersToTeam'\n                            show={!teamIsGroupConstrained}\n                            modalId={ModalIdentifiers.ADD_USER_TO_TEAM}\n                            dialogType={AddUsersToTeam}\n                            text={localizeMessage('navbar_dropdown.addMemberToTeam', 'Add Members to Team')}\n                            icon={this.props.mobile && <i className='fa fa-user-plus'/>}\n                        />\n                    </TeamPermissionGate>\n                </MenuGroup>\n                <MenuGroup>\n                    <TeamPermissionGate\n                        teamId={this.props.teamId}\n                        permissions={[Permissions.MANAGE_TEAM]}\n                    >\n                        <MenuItemToggleModalRedux\n                            id='teamSettings'\n                            modalId={ModalIdentifiers.TEAM_SETTINGS}\n                            dialogType={TeamSettingsModal}\n                            text={localizeMessage('navbar_dropdown.teamSettings', 'Team Settings')}\n                            icon={this.props.mobile && <i className='fa fa-globe'/>}\n                        />\n                    </TeamPermissionGate>\n                    <TeamPermissionGate\n                        teamId={this.props.teamId}\n                        permissions={[Permissions.MANAGE_TEAM]}\n                    >\n                        <MenuItemToggleModalRedux\n                            id='manageGroups'\n                            show={teamIsGroupConstrained}\n                            modalId={ModalIdentifiers.MANAGE_TEAM_GROUPS}\n                            dialogProps={{\n                                teamID: this.props.teamId,\n                            }}\n                            dialogType={TeamGroupsManageModal}\n                            text={localizeMessage('navbar_dropdown.manageGroups', 'Manage Groups')}\n                            icon={this.props.mobile && <i className='fa fa-user-plus'/>}\n                        />\n                    </TeamPermissionGate>\n                    <TeamPermissionGate\n                        teamId={this.props.teamId}\n                        permissions={[Permissions.REMOVE_USER_FROM_TEAM, Permissions.MANAGE_TEAM_ROLES]}\n                    >\n                        <MenuItemToggleModalRedux\n                            id='manageMembers'\n                            modalId={ModalIdentifiers.TEAM_MEMBERS}\n                            dialogType={TeamMembersModal}\n                            text={localizeMessage('navbar_dropdown.manageMembers', 'Manage Members')}\n                            icon={this.props.mobile && <i className='fa fa-users'/>}\n                        />\n                    </TeamPermissionGate>\n                    <TeamPermissionGate\n                        teamId={this.props.teamId}\n                        permissions={[Permissions.REMOVE_USER_FROM_TEAM, Permissions.MANAGE_TEAM_ROLES]}\n                        invert={true}\n                    >\n                        <MenuItemToggleModalRedux\n                            id='viewMembers'\n                            modalId={ModalIdentifiers.TEAM_MEMBERS}\n                            dialogType={TeamMembersModal}\n                            text={localizeMessage('navbar_dropdown.viewMembers', 'View Members')}\n                            icon={this.props.mobile && <i className='fa fa-users'/>}\n                        />\n                    </TeamPermissionGate>\n                </MenuGroup>\n                <MenuGroup>\n                    <SystemPermissionGate permissions={[Permissions.CREATE_TEAM]}>\n                        <MenuItemLink\n                            id='createTeam'\n                            to='/create_team'\n                            text={localizeMessage('navbar_dropdown.create', 'Create a New Team')}\n                            icon={this.props.mobile && <i className='fa fa-plus-square'/>}\n                        />\n                    </SystemPermissionGate>\n                    <MenuItemLink\n                        id='joinTeam'\n                        show={!this.props.experimentalPrimaryTeam && this.props.moreTeamsToJoin}\n                        to='/select_team'\n                        text={localizeMessage('navbar_dropdown.join', 'Join Another Team')}\n                        icon={this.props.mobile && <i className='fa fa-plus-square'/>}\n                    />\n                    <MenuItemToggleModalRedux\n                        id='leaveTeam'\n                        show={!teamIsGroupConstrained && this.props.experimentalPrimaryTeam !== this.props.teamName}\n                        modalId={ModalIdentifiers.LEAVE_TEAM}\n                        dialogType={LeaveTeamModal}\n                        text={localizeMessage('navbar_dropdown.leave', 'Leave Team')}\n                        icon={this.props.mobile && <LeaveTeamIcon/>}\n                    />\n                </MenuGroup>\n                <MenuGroup>\n                    {pluginItems}\n                </MenuGroup>\n                <MenuGroup>\n                    <TeamPermissionGate\n                        teamId={this.props.teamId}\n                        permissions={[Permissions.MANAGE_SLASH_COMMANDS, Permissions.MANAGE_OAUTH, Permissions.MANAGE_INCOMING_WEBHOOKS, Permissions.MANAGE_OUTGOING_WEBHOOKS]}\n                    >\n                        <MenuItemLink\n                            id='integrations'\n                            show={!this.props.mobile && (this.props.enableIncomingWebhooks || this.props.enableOutgoingWebhooks || this.props.enableCommands || this.props.enableOAuthServiceProvider)}\n                            to={'/' + this.props.teamName + '/integrations'}\n                            text={localizeMessage('navbar_dropdown.integrations', 'Integrations')}\n                        />\n                    </TeamPermissionGate>\n                    <MenuItemLink\n                        id='customEmojis'\n                        show={!this.props.mobile && this.props.enableCustomEmoji && this.props.canCreateOrDeleteCustomEmoji}\n                        to={'/' + this.props.teamName + '/emoji'}\n                        text={localizeMessage('navbar_dropdown.emoji', 'Custom Emoji')}\n                    />\n                </MenuGroup>\n                <MenuGroup>\n                    <SystemPermissionGate permissions={[Permissions.MANAGE_SYSTEM]}>\n                        <MenuItemLink\n                            id='systemConsole'\n                            show={!this.props.mobile}\n                            to='/admin_console'\n                            text={localizeMessage('navbar_dropdown.console', 'System Console')}\n                            icon={this.props.mobile && <i className='fa fa-wrench'/>}\n                        />\n                    </SystemPermissionGate>\n                </MenuGroup>\n                <MenuGroup>\n                    <MenuItemExternalLink\n                        id='helpLink'\n                        show={Boolean(this.props.helpLink)}\n                        url={this.props.helpLink}\n                        text={localizeMessage('navbar_dropdown.help', 'Help')}\n                        icon={this.props.mobile && <i className='fa fa-question'/>}\n                    />\n                    <MenuItemAction\n                        id='keyboardShortcuts'\n                        show={!this.props.mobile}\n                        onClick={this.toggleShortcutsModal}\n                        text={localizeMessage('navbar_dropdown.keyboardShortcuts', 'Keyboard Shortcuts')}\n                    />\n                    <MenuItemExternalLink\n                        id='reportLink'\n                        show={Boolean(this.props.reportAProblemLink)}\n                        url={this.props.reportAProblemLink}\n                        text={localizeMessage('navbar_dropdown.report', 'Report a Problem')}\n                        icon={this.props.mobile && <i className='fa fa-phone'/>}\n                    />\n                    <MenuItemExternalLink\n                        id='nativeAppLink'\n                        show={this.props.appDownloadLink && !UserAgent.isMobileApp()}\n                        url={useSafeUrl(this.props.appDownloadLink)}\n                        text={localizeMessage('navbar_dropdown.nativeApps', 'Download Apps')}\n                        icon={this.props.mobile && <i className='fa fa-mobile'/>}\n                    />\n                    <MenuItemToggleModalRedux\n                        id='about'\n                        modalId={ModalIdentifiers.ABOUT}\n                        dialogType={AboutBuildModal}\n                        text={formatMessage({id: 'navbar_dropdown.about', defaultMessage: 'About {appTitle}'}, {appTitle: this.props.siteName || 'Mattermost'})}\n                        icon={this.props.mobile && <i className='fa fa-info'/>}\n                    />\n                </MenuGroup>\n                <MenuGroup>\n                    <MenuItemAction\n                        id='logout'\n                        onClick={this.handleEmitUserLoggedOutEvent}\n                        text={localizeMessage('navbar_dropdown.logout', 'Logout')}\n                        icon={this.props.mobile && <i className='fa fa-sign-out'/>}\n                    />\n                </MenuGroup>\n            </Menu>\n        );\n    }\n}\n","// Copyright (c) 2015-present Mattermost, Inc. All Rights Reserved.\n// See LICENSE.txt for license information.\n\nimport {connect} from 'react-redux';\nimport {bindActionCreators} from 'redux';\n\nimport {getConfig} from 'mattermost-redux/selectors/entities/general';\nimport {getMyTeams, getJoinableTeamIds, getCurrentTeam} from 'mattermost-redux/selectors/entities/teams';\nimport {getCurrentUser} from 'mattermost-redux/selectors/entities/users';\nimport {haveITeamPermission, haveISystemPermission} from 'mattermost-redux/selectors/entities/roles';\nimport {Permissions} from 'mattermost-redux/constants';\n\nimport {RHSStates} from 'utils/constants.jsx';\n\nimport {showMentions, showFlaggedPosts, closeRightHandSide, closeMenu as closeRhsMenu} from 'actions/views/rhs';\nimport {openModal} from 'actions/views/modals';\nimport {getRhsState} from 'selectors/rhs';\n\nimport MainMenu from './main_menu.jsx';\n\nfunction mapStateToProps(state) {\n    const config = getConfig(state);\n    const currentTeam = getCurrentTeam(state);\n    const currentUser = getCurrentUser(state);\n\n    const appDownloadLink = config.AppDownloadLink;\n    const enableCommands = config.EnableCommands === 'true';\n    const enableCustomEmoji = config.EnableCustomEmoji === 'true';\n    const siteName = config.SiteName;\n    const enableIncomingWebhooks = config.EnableIncomingWebhooks === 'true';\n    const enableOAuthServiceProvider = config.EnableOAuthServiceProvider === 'true';\n    const enableOutgoingWebhooks = config.EnableOutgoingWebhooks === 'true';\n    const enableUserCreation = config.EnableUserCreation === 'true';\n    const enableEmailInvitations = config.EnableEmailInvitations === 'true';\n    const experimentalPrimaryTeam = config.ExperimentalPrimaryTeam;\n    const helpLink = config.HelpLink;\n    const reportAProblemLink = config.ReportAProblemLink;\n\n    let canCreateOrDeleteCustomEmoji = (haveISystemPermission(state, {permission: Permissions.CREATE_EMOJIS}) || haveISystemPermission(state, {permission: Permissions.DELETE_EMOJIS}));\n    if (!canCreateOrDeleteCustomEmoji) {\n        for (const team of getMyTeams(state)) {\n            if (haveITeamPermission(state, {team: team.id, permission: Permissions.CREATE_EMOJIS}) || haveITeamPermission(state, {team: team.id, permission: Permissions.DELETE_EMOJIS})) {\n                canCreateOrDeleteCustomEmoji = true;\n\n                break;\n            }\n        }\n    }\n\n    const joinableTeams = getJoinableTeamIds(state);\n    const moreTeamsToJoin = joinableTeams && joinableTeams.length > 0;\n    const rhsState = getRhsState(state);\n\n    return {\n        appDownloadLink,\n        enableCommands,\n        enableCustomEmoji,\n        enableIncomingWebhooks,\n        enableOAuthServiceProvider,\n        enableOutgoingWebhooks,\n        enableUserCreation,\n        enableEmailInvitations,\n        experimentalPrimaryTeam,\n        helpLink,\n        reportAProblemLink,\n        pluginMenuItems: state.plugins.components.MainMenu,\n        canCreateOrDeleteCustomEmoji,\n        moreTeamsToJoin,\n        siteName,\n        teamId: currentTeam.id,\n        teamName: currentTeam.name,\n        teamType: currentTeam.type,\n        currentUser,\n        isMentionSearch: rhsState === RHSStates.MENTION,\n        teamIsGroupConstrained: Boolean(currentTeam.group_constrained),\n    };\n}\n\nfunction mapDispatchToProps(dispatch) {\n    return {\n        actions: bindActionCreators({\n            openModal,\n            showMentions,\n            showFlaggedPosts,\n            closeRightHandSide,\n            closeRhsMenu,\n        }, dispatch),\n    };\n}\n\nexport default connect(mapStateToProps, mapDispatchToProps)(MainMenu);\n","// Copyright (c) 2015-present Mattermost, Inc. All Rights Reserved.\n// See LICENSE.txt for license information.\n\nimport PropTypes from 'prop-types';\nimport React from 'react';\nimport {Link} from 'react-router-dom';\nimport classNames from 'classnames';\nimport {CSSTransition} from 'react-transition-group';\n\nimport * as GlobalActions from 'actions/global_actions.jsx';\nimport {Constants} from 'utils/constants.jsx';\nimport * as Utils from 'utils/utils.jsx';\nimport MenuTutorialTip from 'components/tutorial/menu_tutorial_tip';\n\nimport MainMenu from 'components/main_menu';\n\nconst ANIMATION_DURATION = 500;\n\nexport default class SidebarRightMenu extends React.PureComponent {\n    static propTypes = {\n        isOpen: PropTypes.bool.isRequired,\n        teamDisplayName: PropTypes.string,\n        showTutorialTip: PropTypes.bool.isRequired,\n        siteName: PropTypes.string,\n        actions: PropTypes.shape({\n            openRhsMenu: PropTypes.func.isRequired,\n        }),\n    };\n\n    handleEmitUserLoggedOutEvent = () => {\n        GlobalActions.emitUserLoggedOutEvent();\n    }\n\n    render() {\n        var siteName = '';\n        if (this.props.siteName != null) {\n            siteName = this.props.siteName;\n        }\n        var teamDisplayName = siteName;\n        if (this.props.teamDisplayName) {\n            teamDisplayName = this.props.teamDisplayName;\n        }\n\n        let tutorialTip = null;\n        if (this.props.showTutorialTip) {\n            tutorialTip = <MenuTutorialTip onBottom={true}/>;\n            this.props.actions.openRhsMenu();\n        }\n\n        return (\n            <div\n                className={classNames('sidebar--menu', {'move--left': this.props.isOpen && Utils.isMobile()})}\n                id='sidebar-menu'\n            >\n                <div className='team__header theme'>\n                    <Link\n                        className='team__name'\n                        to={`/channels/${Constants.DEFAULT_CHANNEL}`}\n                    >\n                        {teamDisplayName}\n                    </Link>\n                </div>\n\n                <div className='nav-pills__container mobile-main-menu'>\n                    {tutorialTip}\n                    <CSSTransition\n                        in={this.props.isOpen && Utils.isMobile()}\n                        classNames='MobileRightSidebarMenu'\n                        enter={true}\n                        exit={true}\n                        mountOnEnter={true}\n                        unmountOnExit={true}\n                        timeout={{\n                            enter: ANIMATION_DURATION,\n                            exit: ANIMATION_DURATION,\n                        }}\n                    >\n                        <MainMenu mobile={true}/>\n                    </CSSTransition>\n                </div>\n            </div>\n        );\n    }\n}\n","// Copyright (c) 2015-present Mattermost, Inc. All Rights Reserved.\n// See LICENSE.txt for license information.\n\nimport {connect} from 'react-redux';\nimport {bindActionCreators} from 'redux';\nimport {getConfig} from 'mattermost-redux/selectors/entities/general';\nimport {getCurrentUserId} from 'mattermost-redux/selectors/entities/users';\nimport {getCurrentTeam} from 'mattermost-redux/selectors/entities/teams';\nimport {getInt} from 'mattermost-redux/selectors/entities/preferences';\n\nimport {openMenu as openRhsMenu} from 'actions/views/rhs';\nimport {getIsRhsMenuOpen} from 'selectors/rhs';\nimport {Preferences, TutorialSteps} from 'utils/constants.jsx';\nimport {isMobile} from 'utils/utils.jsx';\n\nimport SidebarRightMenu from './sidebar_right_menu.jsx';\n\nfunction mapStateToProps(state) {\n    const config = getConfig(state);\n    const currentTeam = getCurrentTeam(state);\n\n    const enableTutorial = config.EnableTutorial === 'true';\n    const tutorialStep = getInt(state, Preferences.TUTORIAL_STEP, getCurrentUserId(state), TutorialSteps.FINISHED);\n\n    const siteName = config.SiteName;\n\n    return {\n        teamDisplayName: currentTeam.display_name,\n        isOpen: getIsRhsMenuOpen(state),\n        showTutorialTip: enableTutorial && isMobile() && tutorialStep === TutorialSteps.MENU_POPOVER,\n        siteName,\n    };\n}\n\nfunction mapDispatchToProps(dispatch) {\n    return {\n        actions: bindActionCreators({\n            openRhsMenu,\n        }, dispatch),\n    };\n}\n\nexport default connect(mapStateToProps, mapDispatchToProps)(SidebarRightMenu);\n","// Copyright (c) 2015-present Mattermost, Inc. All Rights Reserved.\n// See LICENSE.txt for license information.\n\nimport React from 'react';\nimport {Modal} from 'react-bootstrap';\nimport {FormattedMessage} from 'react-intl';\n\nimport ModalStore from 'stores/modal_store.jsx';\nimport Constants from 'utils/constants.jsx';\n\nconst ActionTypes = Constants.ActionTypes;\n\nexport default class ImportThemeModal extends React.Component {\n    constructor(props) {\n        super(props);\n\n        this.state = {\n            value: '',\n            inputError: '',\n            show: false,\n            callback: null,\n        };\n    }\n\n    componentDidMount() {\n        ModalStore.addModalListener(ActionTypes.TOGGLE_IMPORT_THEME_MODAL, this.updateShow);\n    }\n\n    componentWillUnmount() {\n        ModalStore.removeModalListener(ActionTypes.TOGGLE_IMPORT_THEME_MODAL, this.updateShow);\n    }\n\n    updateShow = (show, args) => {\n        this.setState({\n            show,\n            callback: args.callback,\n        });\n    }\n\n    handleSubmit = (e) => {\n        e.preventDefault();\n\n        const text = this.state.value;\n\n        if (!this.isInputValid(text)) {\n            this.setState({\n                inputError: (\n                    <FormattedMessage\n                        id='user.settings.import_theme.submitError'\n                        defaultMessage='Invalid format, please try copying and pasting in again.'\n                    />\n                ),\n            });\n            return;\n        }\n\n        const colors = text.split(',');\n        const theme = {type: 'custom'};\n\n        theme.sidebarBg = colors[0];\n        theme.sidebarText = colors[5];\n        theme.sidebarUnreadText = colors[5];\n        theme.sidebarTextHoverBg = colors[4];\n        theme.sidebarTextActiveBorder = colors[2];\n        theme.sidebarTextActiveColor = colors[3];\n        theme.sidebarHeaderBg = colors[1];\n        theme.sidebarHeaderTextColor = colors[5];\n        theme.onlineIndicator = colors[6];\n        theme.awayIndicator = '#E0B333';\n        theme.mentionBg = colors[7];\n        theme.mentionColor = '#ffffff';\n        theme.centerChannelBg = '#ffffff';\n        theme.centerChannelColor = '#333333';\n        theme.newMessageSeparator = '#F80';\n        theme.linkColor = '#2389d7';\n        theme.buttonBg = '#26a970';\n        theme.buttonColor = '#ffffff';\n        theme.mentionHighlightBg = '#fff2bb';\n        theme.mentionHighlightLink = '#2f81b7';\n        theme.codeTheme = 'github';\n\n        this.state.callback(theme);\n        this.setState({\n            show: false,\n            callback: null,\n        });\n    }\n\n    isInputValid(text) {\n        if (text.length === 0) {\n            return false;\n        }\n\n        if (text.indexOf(' ') !== -1) {\n            return false;\n        }\n\n        if (text.length > 0 && text.indexOf(',') === -1) {\n            return false;\n        }\n\n        if (text.length > 0) {\n            const colors = text.split(',');\n\n            if (colors.length !== 8) {\n                return false;\n            }\n\n            for (let i = 0; i < colors.length; i++) {\n                if (colors[i].length !== 7 && colors[i].length !== 4) {\n                    return false;\n                }\n\n                if (colors[i].charAt(0) !== '#') {\n                    return false;\n                }\n            }\n        }\n\n        return true;\n    }\n\n    handleChange = (e) => {\n        const value = e.target.value;\n        this.setState({value});\n\n        if (this.isInputValid(value)) {\n            this.setState({inputError: null});\n        } else {\n            this.setState({\n                inputError: (\n                    <FormattedMessage\n                        id='user.settings.import_theme.submitError'\n                        defaultMessage='Invalid format, please try copying and pasting in again.'\n                    />\n                ),\n            });\n        }\n    }\n\n    handleOnHide = () => {\n        this.setState({show: false});\n    }\n\n    render() {\n        return (\n            <span>\n                <Modal\n                    dialogClassName='a11y__modal'\n                    show={this.state.show}\n                    onHide={this.handleOnHide}\n                    role='dialog'\n                    aria-labelledby='importThemeModalLabel'\n                >\n                    <Modal.Header closeButton={true}>\n                        <Modal.Title\n                            componentClass='h1'\n                            id='importThemeModalLabel'\n                        >\n                            <FormattedMessage\n                                id='user.settings.import_theme.importHeader'\n                                defaultMessage='Import Slack Theme'\n                            />\n                        </Modal.Title>\n                    </Modal.Header>\n                    <form\n                        role='form'\n                        className='form-horizontal'\n                    >\n                        <Modal.Body>\n                            <p>\n                                <FormattedMessage\n                                    id='user.settings.import_theme.importBody'\n                                    defaultMessage='To import a theme, go to a Slack team and look for \"Preferences -> Sidebar Theme\". Open the custom theme option, copy the theme color values and paste them here:'\n                                />\n                            </p>\n                            <div className='form-group less'>\n                                <div className='col-sm-12'>\n                                    <input\n                                        id='themeVector'\n                                        type='text'\n                                        className='form-control'\n                                        value={this.state.value}\n                                        onChange={this.handleChange}\n                                    />\n                                    <div className='input__help'>\n                                        {this.state.inputError}\n                                    </div>\n                                </div>\n                            </div>\n                        </Modal.Body>\n                        <Modal.Footer>\n                            <button\n                                id='cancelButton'\n                                type='button'\n                                className='btn btn-link'\n                                onClick={this.handleOnHide}\n                            >\n                                <FormattedMessage\n                                    id='user.settings.import_theme.cancel'\n                                    defaultMessage='Cancel'\n                                />\n                            </button>\n                            <button\n                                id='submitButton'\n                                onClick={this.handleSubmit}\n                                type='submit'\n                                className='btn btn-primary'\n                                tabIndex='3'\n                            >\n                                <FormattedMessage\n                                    id='user.settings.import_theme.submit'\n                                    defaultMessage='Submit'\n                                />\n                            </button>\n                        </Modal.Footer>\n                    </form>\n                </Modal>\n            </span>\n        );\n    }\n}\n","// Copyright (c) 2015-present Mattermost, Inc. All Rights Reserved.\n// See LICENSE.txt for license information.\n\nexport function getIsLhsOpen(state) {\n    return state.views.lhs.isOpen;\n}\n","// Copyright (c) 2015-present Mattermost, Inc. All Rights Reserved.\n// See LICENSE.txt for license information.\n\nimport PropTypes from 'prop-types';\nimport React from 'react';\nimport {ContextMenu, ContextMenuTrigger, MenuItem} from 'react-contextmenu';\nimport {FormattedMessage} from 'react-intl';\n\nexport default class CopyUrlContextMenu extends React.Component {\n    static propTypes = {\n\n        // The child component that will be right-clicked on to show the context menu\n        children: PropTypes.element,\n\n        // The link to copy to the user's clipboard when the 'Copy' option is selected from the context menu\n        link: PropTypes.string.isRequired,\n\n        // A unique id differentiating this instance of context menu from others on the page.\n        menuId: PropTypes.string.isRequired,\n\n        siteURL: PropTypes.string.isRequired,\n\n        actions: PropTypes.shape({\n            copyToClipboard: PropTypes.func.isRequired,\n        }),\n    };\n\n    copy = () => {\n        let link = this.props.link;\n\n        // Transform relative links to absolute ones for copy and paste.\n        if (link.indexOf('http://') === -1 && link.indexOf('https://') === -1) {\n            link = this.props.siteURL + link;\n        }\n\n        this.props.actions.copyToClipboard(link);\n    }\n\n    render() {\n        const contextMenu = (\n            <ContextMenu id={'copy-url-context-menu' + this.props.menuId}>\n                <MenuItem\n                    onClick={this.copy}\n                >\n                    <FormattedMessage\n                        id='copy_url_context_menu.getChannelLink'\n                        defaultMessage='Copy Link'\n                    />\n                </MenuItem>\n            </ContextMenu>\n        );\n\n        const contextMenuTrigger = (\n            <ContextMenuTrigger id={'copy-url-context-menu' + this.props.menuId}>\n                {this.props.children}\n            </ContextMenuTrigger>\n        );\n\n        return (\n            <span>\n                {contextMenu}\n                {contextMenuTrigger}\n            </span>\n        );\n    }\n}\n","// Copyright (c) 2015-present Mattermost, Inc. All Rights Reserved.\n// See LICENSE.txt for license information.\n\nimport {connect} from 'react-redux';\nimport {getConfig} from 'mattermost-redux/selectors/entities/general';\n\nimport {copyToClipboard} from 'utils/utils';\n\nimport CopyUrlContextMenu from './copy_url_context_menu.jsx';\n\nfunction mapStateToProps(state) {\n    const config = getConfig(state);\n\n    return {\n        siteURL: config.SiteURL,\n    };\n}\n\nfunction mapDispatchToProps() {\n    return {\n        actions: {\n            copyToClipboard,\n        },\n    };\n}\n\nexport default connect(mapStateToProps, mapDispatchToProps)(CopyUrlContextMenu);\n","// Copyright (c) 2015-present Mattermost, Inc. All Rights Reserved.\n// See LICENSE.txt for license information.\n\nimport PropTypes from 'prop-types';\nimport React from 'react';\nimport {intlShape} from 'react-intl';\nimport {OverlayTrigger, Tooltip} from 'react-bootstrap';\nimport {Link} from 'react-router-dom';\n\nimport {mark, trackEvent} from 'actions/diagnostics_actions.jsx';\nimport Constants from 'utils/constants.jsx';\nimport {isDesktopApp} from 'utils/user_agent.jsx';\nimport {localizeMessage} from 'utils/utils.jsx';\nimport CopyUrlContextMenu from 'components/copy_url_context_menu';\n\n// eslint-disable-next-line react/require-optimization\nexport default class TeamButton extends React.Component {\n    constructor(props) {\n        super(props);\n\n        this.handleSwitch = this.handleSwitch.bind(this);\n        this.handleDisabled = this.handleDisabled.bind(this);\n    }\n\n    static contextTypes = {\n        intl: intlShape.isRequired,\n    };\n\n    handleSwitch(e) {\n        e.preventDefault();\n        mark('TeamLink#click');\n        trackEvent('ui', 'ui_team_sidebar_switch_team');\n        this.props.switchTeam(this.props.url);\n    }\n\n    handleDisabled(e) {\n        e.preventDefault();\n    }\n\n    render() {\n        const teamIconUrl = this.props.teamIconUrl;\n        const {formatMessage} = this.context.intl;\n\n        let teamClass = this.props.active ? 'active' : '';\n        const btnClass = this.props.btnClass;\n        const disabled = this.props.disabled ? 'team-disabled' : '';\n        const handleClick = (this.props.active || this.props.disabled) ? this.handleDisabled : this.handleSwitch;\n        let badge;\n\n        let ariaLabel = formatMessage({\n            id: 'team.button.ariaLabel',\n            defaultMessage: '{teamName} team',\n        },\n        {\n            teamName: this.props.displayName,\n        });\n\n        if (!teamClass) {\n            teamClass = this.props.unread ? 'unread' : '';\n            ariaLabel = formatMessage({\n                id: 'team.button.unread.ariaLabel',\n                defaultMessage: '{teamName} team unread',\n            },\n            {\n                teamName: this.props.displayName,\n            });\n\n            if (this.props.mentions) {\n                ariaLabel = formatMessage({\n                    id: 'team.button.mentions.ariaLabel',\n                    defaultMessage: '{teamName} team, {mentionCount} mentions',\n                },\n                {\n                    teamName: this.props.displayName,\n                    mentionCount: this.props.mentions,\n                });\n\n                badge = (\n                    <span className={'badge pull-right small'}>{this.props.mentions}</span>\n                );\n            }\n        }\n\n        ariaLabel = ariaLabel.toLowerCase();\n\n        let content = this.props.content;\n\n        if (!content) {\n            if (teamIconUrl) {\n                content = (\n                    <div className='team-btn__content'>\n                        <div\n                            className='team-btn__image'\n                            style={{backgroundImage: `url('${teamIconUrl}')`}}\n                        />\n                    </div>\n                );\n            } else {\n                let initials = this.props.displayName;\n                initials = initials ? initials.replace(/\\s/g, '').substring(0, 2) : '??';\n\n                content = (\n                    <div className='team-btn__content'>\n                        <div className='team-btn__initials'>\n                            {initials}\n                        </div>\n                    </div>\n                );\n            }\n        }\n\n        const toolTip = this.props.tip || localizeMessage('team.button.name_undefined', 'Name undefined');\n        const btn = (\n            <OverlayTrigger\n                delayShow={Constants.OVERLAY_TIME_DELAY}\n                placement={this.props.placement}\n                overlay={\n                    <Tooltip id={`tooltip-${this.props.url}`}>\n                        {toolTip}\n                    </Tooltip>\n                }\n            >\n                <div className={'team-btn ' + btnClass}>\n                    {badge}\n                    {content}\n                </div>\n            </OverlayTrigger>\n        );\n\n        let teamButton;\n        if (isDesktopApp()) {\n            teamButton = (\n                <button\n                    className={'btn btn-link ' + disabled}\n                    onClick={handleClick}\n                >\n                    {btn}\n                </button>\n            );\n\n            // if this is not a \"special\" team button, give it a context menu\n            if (!this.props.url.endsWith('create_team') && !this.props.url.endsWith('select_team')) {\n                teamButton = (\n                    <CopyUrlContextMenu\n                        link={this.props.url}\n                        menuId={this.props.url}\n                    >\n                        {teamButton}\n                    </CopyUrlContextMenu>\n                );\n            }\n        } else {\n            teamButton = (\n                <Link\n                    id={`${this.props.url.slice(1)}TeamButton`}\n                    aria-label={ariaLabel}\n                    className={disabled}\n                    to={this.props.url}\n                    onClick={handleClick}\n                >\n                    {btn}\n                </Link>\n            );\n        }\n\n        return (\n            <div\n                className={`team-container ${teamClass}`}\n            >\n                {teamButton}\n            </div>\n        );\n    }\n}\n\nTeamButton.defaultProps = {\n    btnClass: '',\n    tip: '',\n    placement: 'right',\n    active: false,\n    disabled: false,\n    unread: false,\n    mentions: 0,\n};\n\nTeamButton.propTypes = {\n    btnClass: PropTypes.string,\n    url: PropTypes.string.isRequired,\n    displayName: PropTypes.string,\n    content: PropTypes.node,\n    tip: PropTypes.node.isRequired,\n    active: PropTypes.bool,\n    disabled: PropTypes.bool,\n    unread: PropTypes.bool,\n    mentions: PropTypes.number,\n    placement: PropTypes.oneOf(['left', 'right', 'top', 'bottom']),\n    teamIconUrl: PropTypes.string,\n    switchTeam: PropTypes.func.isRequired,\n};\n","// Copyright (c) 2015-present Mattermost, Inc. All Rights Reserved.\n// See LICENSE.txt for license information.\n\nimport PropTypes from 'prop-types';\nimport React from 'react';\nimport Scrollbars from 'react-custom-scrollbars';\nimport {FormattedMessage} from 'react-intl';\nimport Permissions from 'mattermost-redux/constants/permissions';\nimport classNames from 'classnames';\n\nimport {filterAndSortTeamsByDisplayName} from 'utils/team_utils.jsx';\n\nimport * as Utils from 'utils/utils.jsx';\n\nimport SystemPermissionGate from 'components/permissions_gates/system_permission_gate';\nimport Pluggable from 'plugins/pluggable';\n\nimport TeamButton from './components/team_button.jsx';\n\nexport function renderView(props) {\n    return (\n        <div\n            {...props}\n            className='scrollbar--view'\n        />);\n}\n\nexport function renderThumbHorizontal(props) {\n    return (\n        <div\n            {...props}\n            className='scrollbar--horizontal'\n        />);\n}\n\nexport function renderThumbVertical(props) {\n    return (\n        <div\n            {...props}\n            className='scrollbar--vertical'\n        />);\n}\n\nexport default class TeamSidebar extends React.PureComponent {\n    static propTypes = {\n        myTeams: PropTypes.array.isRequired,\n        currentTeamId: PropTypes.string.isRequired,\n        moreTeamsToJoin: PropTypes.bool.isRequired,\n        myTeamMembers: PropTypes.object.isRequired,\n        isOpen: PropTypes.bool.isRequired,\n        experimentalPrimaryTeam: PropTypes.string,\n        locale: PropTypes.string.isRequired,\n        actions: PropTypes.shape({\n            getTeams: PropTypes.func.isRequired,\n            switchTeam: PropTypes.func.isRequired,\n        }).isRequired,\n    }\n\n    componentDidMount() {\n        this.props.actions.getTeams(0, 200);\n    }\n\n    render() {\n        const root = document.querySelector('#root');\n        if (this.props.myTeams.length <= 1) {\n            root.classList.remove('multi-teams');\n            return null;\n        }\n        root.classList.add('multi-teams');\n\n        const plugins = [];\n        const teams = filterAndSortTeamsByDisplayName(this.props.myTeams, this.props.locale).\n            map((team) => {\n                const member = this.props.myTeamMembers[team.id];\n                return (\n                    <TeamButton\n                        key={'switch_team_' + team.name}\n                        url={`/${team.name}`}\n                        tip={team.display_name}\n                        active={team.id === this.props.currentTeamId}\n                        displayName={team.display_name}\n                        unread={member.msg_count > 0}\n                        mentions={member.mention_count}\n                        teamIconUrl={Utils.imageURLForTeam(team)}\n                        switchTeam={this.props.actions.switchTeam}\n                    />\n                );\n            });\n\n        if (this.props.moreTeamsToJoin && !this.props.experimentalPrimaryTeam) {\n            teams.push(\n                <TeamButton\n                    btnClass='team-btn__add'\n                    key='more_teams'\n                    url='/select_team'\n                    tip={\n                        <FormattedMessage\n                            id='team_sidebar.join'\n                            defaultMessage='Other teams you can join.'\n                        />\n                    }\n                    content={'+'}\n                    switchTeam={this.props.actions.switchTeam}\n                />\n            );\n        } else {\n            teams.push(\n                <SystemPermissionGate\n                    permissions={[Permissions.CREATE_TEAM]}\n                    key='more_teams'\n                >\n                    <TeamButton\n                        btnClass='team-btn__add'\n                        url='/create_team'\n                        tip={\n                            <FormattedMessage\n                                id='navbar_dropdown.create'\n                                defaultMessage='Create a New Team'\n                            />\n                        }\n                        content={'+'}\n                        switchTeam={this.props.actions.switchTeam}\n                    />\n                </SystemPermissionGate>\n            );\n        }\n\n        plugins.push(\n            <div\n                key='team-sidebar-bottom-plugin'\n                className='team-sidebar-bottom-plugin is-empty'\n            >\n                <Pluggable pluggableName='BottomTeamSidebar'/>\n            </div>\n        );\n\n        return (\n            <div className={classNames('team-sidebar', {'move--right': this.props.isOpen})}>\n                <div className='team-wrapper'>\n                    <Scrollbars\n                        autoHide={true}\n                        autoHideTimeout={500}\n                        autoHideDuration={500}\n                        renderThumbHorizontal={renderThumbHorizontal}\n                        renderThumbVertical={renderThumbVertical}\n                        renderView={renderView}\n                        onScroll={this.handleScroll}\n                    >\n                        {teams}\n                    </Scrollbars>\n                </div>\n                {plugins}\n            </div>\n        );\n    }\n}\n","// Copyright (c) 2015-present Mattermost, Inc. All Rights Reserved.\n// See LICENSE.txt for license information.\n\nimport {connect} from 'react-redux';\nimport {bindActionCreators} from 'redux';\nimport {getTeams} from 'mattermost-redux/actions/teams';\nimport {withRouter} from 'react-router-dom';\n\nimport {getConfig} from 'mattermost-redux/selectors/entities/general';\nimport {getMyTeams, getJoinableTeamIds, getTeamMemberships, getCurrentTeamId} from 'mattermost-redux/selectors/entities/teams';\n\nimport {getCurrentLocale} from 'selectors/i18n';\nimport {getIsLhsOpen} from 'selectors/lhs';\nimport {switchTeam} from 'actions/team_actions.jsx';\n\nimport TeamSidebar from './team_sidebar_controller.jsx';\n\nfunction mapStateToProps(state) {\n    const config = getConfig(state);\n\n    const experimentalPrimaryTeam = config.ExperimentalPrimaryTeam;\n    const joinableTeams = getJoinableTeamIds(state);\n    const moreTeamsToJoin = joinableTeams && joinableTeams.length > 0;\n\n    return {\n        currentTeamId: getCurrentTeamId(state),\n        myTeams: getMyTeams(state),\n        myTeamMembers: getTeamMemberships(state),\n        isOpen: getIsLhsOpen(state),\n        experimentalPrimaryTeam,\n        locale: getCurrentLocale(state),\n        moreTeamsToJoin,\n    };\n}\n\nfunction mapDispatchToProps(dispatch) {\n    return {\n        actions: bindActionCreators({\n            getTeams,\n            switchTeam,\n        }, dispatch),\n    };\n}\n\nexport default withRouter(connect(mapStateToProps, mapDispatchToProps)(TeamSidebar));\n","// Copyright (c) 2015-present Mattermost, Inc. All Rights Reserved.\n// See LICENSE.txt for license information.\n\nimport $ from 'jquery';\nimport PropTypes from 'prop-types';\nimport React from 'react';\nimport ReactDOM from 'react-dom';\nimport {FormattedMessage} from 'react-intl';\n\nimport LoadingScreen from 'components/loading_screen';\nimport LoadingWrapper from 'components/widgets/loading/loading_wrapper.jsx';\nimport QuickInput from 'components/quick_input';\nimport * as UserAgent from 'utils/user_agent.jsx';\nimport {localizeMessage} from 'utils/utils.jsx';\nimport LocalizedInput from 'components/localized_input/localized_input';\n\nimport {t} from 'utils/i18n';\n\nconst NEXT_BUTTON_TIMEOUT_MILLISECONDS = 500;\n\nexport default class SearchableChannelList extends React.Component {\n    constructor(props) {\n        super(props);\n\n        this.createChannelRow = this.createChannelRow.bind(this);\n        this.nextPage = this.nextPage.bind(this);\n        this.previousPage = this.previousPage.bind(this);\n        this.doSearch = this.doSearch.bind(this);\n\n        this.nextTimeoutId = 0;\n\n        this.state = {\n            joiningChannel: '',\n            page: 0,\n            nextDisabled: false,\n        };\n    }\n\n    componentDidMount() {\n        // only focus the search box on desktop so that we don't cause the keyboard to open on mobile\n        if (!UserAgent.isMobile() && this.refs.filter) {\n            this.refs.filter.focus();\n        }\n    }\n\n    componentDidUpdate(prevProps, prevState) {\n        if (prevState.page !== this.state.page) {\n            $(this.refs.channelList).scrollTop(0);\n        }\n    }\n\n    UNSAFE_componentWillReceiveProps(nextProps) { // eslint-disable-line camelcase\n        if (nextProps.isSearch && !this.props.isSearch) {\n            this.setState({page: 0});\n        }\n    }\n\n    handleJoin(channel) {\n        this.setState({joiningChannel: channel.id});\n        this.props.handleJoin(\n            channel,\n            () => {\n                this.setState({joiningChannel: ''});\n            }\n        );\n    }\n\n    createChannelRow(channel) {\n        const ariaLabel = `${channel.display_name}, ${channel.purpose}`.toLowerCase();\n\n        return (\n            <div\n                className='more-modal__row'\n                key={channel.id}\n            >\n                <div className='more-modal__details'>\n                    <button\n                        onClick={this.handleJoin.bind(this, channel)}\n                        aria-label={ariaLabel}\n                        className='style--none more-modal__name'\n                    >\n                        {channel.display_name}\n                    </button>\n                    <p className='more-modal__description'>{channel.purpose}</p>\n                </div>\n                <div className='more-modal__actions'>\n                    <button\n                        onClick={this.handleJoin.bind(this, channel)}\n                        className='btn btn-primary'\n                        disabled={this.state.joiningChannel}\n                    >\n                        <LoadingWrapper\n                            loading={this.state.joiningChannel === channel.id}\n                            text={localizeMessage('more_channels.joining', 'Joining...')}\n                        >\n                            <FormattedMessage\n                                id='more_channels.join'\n                                defaultMessage='Join'\n                            />\n                        </LoadingWrapper>\n                    </button>\n                </div>\n            </div>\n        );\n    }\n\n    nextPage(e) {\n        e.preventDefault();\n        this.setState({page: this.state.page + 1, nextDisabled: true});\n        this.nextTimeoutId = setTimeout(() => this.setState({nextDisabled: false}), NEXT_BUTTON_TIMEOUT_MILLISECONDS);\n        this.props.nextPage(this.state.page + 1);\n        $(ReactDOM.findDOMNode(this.refs.channelListScroll)).scrollTop(0);\n    }\n\n    previousPage(e) {\n        e.preventDefault();\n        this.setState({page: this.state.page - 1});\n        $(ReactDOM.findDOMNode(this.refs.channelListScroll)).scrollTop(0);\n    }\n\n    doSearch() {\n        const term = this.refs.filter.value;\n        this.props.search(term);\n        if (term === '') {\n            this.setState({page: 0});\n        }\n    }\n\n    render() {\n        const channels = this.props.channels;\n        let listContent;\n        let nextButton;\n        let previousButton;\n\n        if (this.props.loading && channels.length === 0) {\n            listContent = <LoadingScreen style={{marginTop: '50%'}}/>;\n        } else if (channels.length === 0) {\n            listContent = (\n                <div className='no-channel-message'>\n                    <p className='primary-message'>\n                        <FormattedMessage\n                            id='more_channels.noMore'\n                            defaultMessage='No more channels to join'\n                        />\n                    </p>\n                    {this.props.noResultsText}\n                </div>\n            );\n        } else {\n            const pageStart = this.state.page * this.props.channelsPerPage;\n            const pageEnd = pageStart + this.props.channelsPerPage;\n            const channelsToDisplay = this.props.channels.slice(pageStart, pageEnd);\n            listContent = channelsToDisplay.map(this.createChannelRow);\n\n            if (channelsToDisplay.length >= this.props.channelsPerPage && pageEnd < this.props.channels.length) {\n                nextButton = (\n                    <button\n                        className='btn btn-link filter-control filter-control__next'\n                        onClick={this.nextPage}\n                        disabled={this.state.nextDisabled}\n                    >\n                        <FormattedMessage\n                            id='more_channels.next'\n                            defaultMessage='Next'\n                        />\n                    </button>\n                );\n            }\n\n            if (this.state.page > 0) {\n                previousButton = (\n                    <button\n                        className='btn btn-link filter-control filter-control__prev'\n                        onClick={this.previousPage}\n                    >\n                        <FormattedMessage\n                            id='more_channels.prev'\n                            defaultMessage='Previous'\n                        />\n                    </button>\n                );\n            }\n        }\n\n        let input = (\n            <div className='filter-row filter-row--full'>\n                <div className='col-sm-12'>\n                    <QuickInput\n                        id='searchChannelsTextbox'\n                        ref='filter'\n                        className='form-control filter-textbox'\n                        placeholder={{id: t('filtered_channels_list.search'), defaultMessage: 'Search channels'}}\n                        inputComponent={LocalizedInput}\n                        onInput={this.doSearch}\n                    />\n                </div>\n            </div>\n        );\n\n        if (this.props.createChannelButton) {\n            input = (\n                <div className='channel_search'>\n                    <div className='search_input'>\n                        <QuickInput\n                            id='searchChannelsTextbox'\n                            ref='filter'\n                            className='form-control filter-textbox'\n                            placeholder={{id: t('filtered_channels_list.search'), defaultMessage: 'Search channels'}}\n                            inputComponent={LocalizedInput}\n                            onInput={this.doSearch}\n                        />\n                    </div>\n                    <div className='create_button'>\n                        {this.props.createChannelButton}\n                    </div>\n                </div>\n            );\n        }\n\n        return (\n            <div className='filtered-user-list'>\n                {input}\n                <div\n                    role='application'\n                    ref='channelList'\n                    className='more-modal__list'\n                >\n                    <div ref='channelListScroll'>\n                        {listContent}\n                    </div>\n                </div>\n                <div className='filter-controls'>\n                    {previousButton}\n                    {nextButton}\n                </div>\n            </div>\n        );\n    }\n}\n\nSearchableChannelList.defaultProps = {\n    channels: [],\n    isSearch: false,\n};\n\nSearchableChannelList.propTypes = {\n    channels: PropTypes.arrayOf(PropTypes.object),\n    channelsPerPage: PropTypes.number,\n    nextPage: PropTypes.func.isRequired,\n    isSearch: PropTypes.bool,\n    search: PropTypes.func.isRequired,\n    handleJoin: PropTypes.func.isRequired,\n    noResultsText: PropTypes.object,\n    loading: PropTypes.bool,\n    createChannelButton: PropTypes.element,\n};\n","// Copyright (c) 2015-present Mattermost, Inc. All Rights Reserved.\n// See LICENSE.txt for license information.\n\nimport PropTypes from 'prop-types';\nimport React from 'react';\nimport {Modal} from 'react-bootstrap';\nimport {FormattedMessage} from 'react-intl';\nimport Permissions from 'mattermost-redux/constants/permissions';\n\nimport {browserHistory} from 'utils/browser_history';\n\nimport {getRelativeChannelURL} from 'utils/url.jsx';\n\nimport SearchableChannelList from 'components/searchable_channel_list.jsx';\nimport TeamPermissionGate from 'components/permissions_gates/team_permission_gate';\n\nconst CHANNELS_CHUNK_SIZE = 50;\nconst CHANNELS_PER_PAGE = 50;\nconst SEARCH_TIMEOUT_MILLISECONDS = 100;\n\nexport default class MoreChannels extends React.Component {\n    static propTypes = {\n        channels: PropTypes.array.isRequired,\n        currentUserId: PropTypes.string.isRequired,\n        teamId: PropTypes.string.isRequired,\n        teamName: PropTypes.string.isRequired,\n        onModalDismissed: PropTypes.func,\n        handleNewChannel: PropTypes.func,\n        channelsRequestStarted: PropTypes.bool,\n        bodyOnly: PropTypes.bool,\n        actions: PropTypes.shape({\n            getChannels: PropTypes.func.isRequired,\n            joinChannel: PropTypes.func.isRequired,\n            searchMoreChannels: PropTypes.func.isRequired,\n        }).isRequired,\n    }\n\n    constructor(props) {\n        super(props);\n\n        this.searchTimeoutId = 0;\n\n        this.state = {\n            show: true,\n            search: false,\n            searchedChannels: [],\n            serverError: null,\n            searching: false,\n        };\n    }\n\n    componentDidMount() {\n        this.props.actions.getChannels(this.props.teamId, 0, CHANNELS_CHUNK_SIZE * 2);\n    }\n\n    handleHide = () => {\n        this.setState({show: false});\n\n        if (this.props.bodyOnly) {\n            this.handleExit();\n        }\n    }\n\n    handleExit = () => {\n        if (this.props.onModalDismissed) {\n            this.props.onModalDismissed();\n        }\n    }\n\n    onChange = (force) => {\n        if (this.state.search && !force) {\n            return;\n        }\n\n        this.setState({\n            searchedChannels: [],\n            serverError: null,\n        });\n    }\n\n    nextPage = (page) => {\n        this.props.actions.getChannels(this.props.teamId, page + 1, CHANNELS_PER_PAGE);\n    }\n\n    handleJoin = (channel, done) => {\n        const {actions, currentUserId, teamId, teamName} = this.props;\n        actions.joinChannel(currentUserId, teamId, channel.id).then((result) => {\n            if (result.error) {\n                this.setState({serverError: result.error.message});\n            } else {\n                browserHistory.push(getRelativeChannelURL(teamName, channel.name));\n                this.handleHide();\n            }\n\n            if (done) {\n                done();\n            }\n        });\n    };\n\n    search = (term) => {\n        clearTimeout(this.searchTimeoutId);\n\n        if (term === '') {\n            this.onChange(true);\n            this.setState({search: false, searchedChannels: [], searching: false});\n            this.searchTimeoutId = '';\n            return;\n        }\n        this.setState({search: true, searching: true});\n\n        const searchTimeoutId = setTimeout(\n            () => {\n                this.props.actions.searchMoreChannels(term).\n                    then((result) => {\n                        if (searchTimeoutId !== this.searchTimeoutId) {\n                            return;\n                        }\n\n                        if (result.data) {\n                            this.setSearchResults(result.data);\n                        } else {\n                            this.setState({searchedChannels: [], searching: false});\n                        }\n                    }).\n                    catch(() => {\n                        this.setState({searchedChannels: [], searching: false});\n                    });\n            },\n            SEARCH_TIMEOUT_MILLISECONDS\n        );\n\n        this.searchTimeoutId = searchTimeoutId;\n    };\n\n    setSearchResults = (channels) => {\n        this.setState({searchedChannels: channels.filter((c) => c.delete_at === 0), searching: false});\n    };\n\n    render() {\n        const {\n            channels,\n            teamId,\n            channelsRequestStarted,\n            bodyOnly,\n        } = this.props;\n\n        const {\n            search,\n            searchedChannels,\n            serverError: serverErrorState,\n            show,\n            searching,\n        } = this.state;\n\n        let serverError;\n        if (serverErrorState) {\n            serverError = <div className='form-group has-error'><label className='control-label'>{serverErrorState}</label></div>;\n        }\n\n        const createNewChannelButton = (\n            <TeamPermissionGate\n                teamId={teamId}\n                permissions={[Permissions.CREATE_PUBLIC_CHANNEL, Permissions.CREATE_PRIVATE_CHANNEL]}\n            >\n                <button\n                    id='createNewChannel'\n                    type='button'\n                    className='btn btn-primary channel-create-btn'\n                    onClick={this.props.handleNewChannel}\n                >\n                    <FormattedMessage\n                        id='more_channels.create'\n                        defaultMessage='Create New Channel'\n                    />\n                </button>\n            </TeamPermissionGate>\n        );\n\n        const createChannelHelpText = (\n            <TeamPermissionGate\n                teamId={teamId}\n                permissions={[Permissions.CREATE_PUBLIC_CHANNEL, Permissions.CREATE_PRIVATE_CHANNEL]}\n            >\n                <p className='secondary-message'>\n                    <FormattedMessage\n                        id='more_channels.createClick'\n                        defaultMessage=\"Click 'Create New Channel' to make a new one\"\n                    />\n                </p>\n            </TeamPermissionGate>\n        );\n\n        const body = (\n            <React.Fragment>\n                <SearchableChannelList\n                    channels={search ? searchedChannels : channels}\n                    channelsPerPage={CHANNELS_PER_PAGE}\n                    nextPage={this.nextPage}\n                    isSearch={search}\n                    search={this.search}\n                    handleJoin={this.handleJoin}\n                    noResultsText={createChannelHelpText}\n                    loading={search ? searching : channelsRequestStarted}\n                    createChannelButton={bodyOnly && createNewChannelButton}\n                />\n                {serverError}\n            </React.Fragment>\n        );\n\n        if (bodyOnly) {\n            return body;\n        }\n\n        return (\n            <Modal\n                dialogClassName='a11y__modal more-modal more-modal--action'\n                show={show}\n                onHide={this.handleHide}\n                onExited={this.handleExit}\n                role='dialog'\n                aria-labelledby='moreChannelsModalLabel'\n            >\n                <Modal.Header closeButton={true}>\n                    <Modal.Title\n                        componentClass='h1'\n                        id='moreChannelsModalLabel'\n                    >\n                        <FormattedMessage\n                            id='more_channels.title'\n                            defaultMessage='More Channels'\n                        />\n                    </Modal.Title>\n                    {createNewChannelButton}\n                </Modal.Header>\n                <Modal.Body>\n                    {body}\n                </Modal.Body>\n            </Modal>\n        );\n    }\n}\n","// Copyright (c) 2015-present Mattermost, Inc. All Rights Reserved.\n// See LICENSE.txt for license information.\n\nimport {connect} from 'react-redux';\nimport {bindActionCreators} from 'redux';\nimport {createSelector} from 'reselect';\n\nimport {getChannels, joinChannel} from 'mattermost-redux/actions/channels';\nimport {getOtherChannels} from 'mattermost-redux/selectors/entities/channels';\nimport {getCurrentTeam} from 'mattermost-redux/selectors/entities/teams';\nimport {getCurrentUserId} from 'mattermost-redux/selectors/entities/users';\nimport {RequestStatus} from 'mattermost-redux/constants';\n\nimport {searchMoreChannels} from 'actions/channel_actions.jsx';\n\nimport MoreChannels from './more_channels.jsx';\n\nconst getNotArchivedOtherChannels = createSelector(\n    getOtherChannels,\n    (channels) => channels && channels.filter((c) => c.delete_at === 0)\n);\n\nfunction mapStateToProps(state) {\n    const team = getCurrentTeam(state) || {};\n\n    return {\n        channels: getNotArchivedOtherChannels(state) || [],\n        currentUserId: getCurrentUserId(state),\n        teamId: team.id,\n        teamName: team.name,\n        channelsRequestStarted: state.requests.channels.getChannels.status === RequestStatus.STARTED,\n    };\n}\n\nfunction mapDispatchToProps(dispatch) {\n    return {\n        actions: bindActionCreators({\n            getChannels,\n            joinChannel,\n            searchMoreChannels,\n        }, dispatch),\n    };\n}\n\nexport default connect(mapStateToProps, mapDispatchToProps)(MoreChannels);\n","// Copyright (c) 2015-present Mattermost, Inc. All Rights Reserved.\n// See LICENSE.txt for license information.\nimport PropTypes from 'prop-types';\nimport React from 'react';\n\nimport AddIcon from 'components/icon/add_icon';\n\nexport default class GroupMessageOption extends React.Component {\n    static propTypes = {\n        channel: PropTypes.object.isRequired,\n        isSelected: PropTypes.bool.isRequired,\n        onAdd: PropTypes.func.isRequired,\n    };\n\n    constructor(props) {\n        super(props);\n        this.addValue = this.addValue.bind(this);\n    }\n\n    getStyle() {\n        let className = 'mentions__name';\n        if (this.props.isSelected) {\n            className += ' suggestion--selected';\n        }\n        return className;\n    }\n\n    displayName() {\n        return this.props.channel.profiles.map((profile) => '@' + profile.username).join(', ');\n    }\n\n    addValue() {\n        this.props.onAdd(this.props.channel.profiles);\n    }\n\n    render() {\n        return (\n            <div\n                key={this.props.channel.id}\n                className={'more-modal__row clickable ' + this.getStyle()}\n                onClick={this.addValue}\n            >\n                <div className='more-modal__gm-icon bg-text-200'>\n                    {this.props.channel.profiles.length}\n                </div>\n                <div className='more-modal__details'>\n                    <div className='more-modal__name'>\n                        {this.displayName()}\n                    </div>\n                </div>\n                <div className='more-modal__actions'>\n                    <div className='more-modal__actions--round'>\n                        <AddIcon/>\n                    </div>\n                </div>\n            </div>\n        );\n    }\n}\n","// Copyright (c) 2015-present Mattermost, Inc. All Rights Reserved.\n// See LICENSE.txt for license information.\n\nimport PropTypes from 'prop-types';\nimport React from 'react';\nimport {Modal} from 'react-bootstrap';\nimport {FormattedMessage} from 'react-intl';\nimport {Client4} from 'mattermost-redux/client';\n\nimport {browserHistory} from 'utils/browser_history';\nimport Constants from 'utils/constants.jsx';\nimport {displayEntireNameForUser, localizeMessage} from 'utils/utils.jsx';\nimport MultiSelect from 'components/multiselect/multiselect.jsx';\nimport ProfilePicture from 'components/profile_picture.jsx';\nimport AddIcon from 'components/icon/add_icon';\nimport BotBadge from 'components/widgets/badges/bot_badge.jsx';\n\nimport GroupMessageOption from './group_message_option';\n\nconst USERS_PER_PAGE = 50;\nconst MAX_SELECTABLE_VALUES = Constants.MAX_USERS_IN_GM - 1;\n\nexport default class MoreDirectChannels extends React.Component {\n    static propTypes = {\n\n        currentUserId: PropTypes.string.isRequired,\n        currentTeamId: PropTypes.string.isRequired,\n        currentTeamName: PropTypes.string.isRequired,\n        searchTerm: PropTypes.string.isRequired,\n        users: PropTypes.arrayOf(PropTypes.object).isRequired,\n        groupChannels: PropTypes.arrayOf(PropTypes.object).isRequired,\n        statuses: PropTypes.object.isRequired,\n        totalCount: PropTypes.number,\n\n        /*\n         * List of current channel members of existing channel\n         */\n        currentChannelMembers: PropTypes.arrayOf(PropTypes.object),\n\n        /*\n         * Whether the modal is for existing channel or not\n         */\n        isExistingChannel: PropTypes.bool.isRequired,\n\n        /*\n         * The mode by which direct messages are restricted, if at all.\n         */\n        restrictDirectMessage: PropTypes.string,\n        onModalDismissed: PropTypes.func,\n        onHide: PropTypes.func,\n        bodyOnly: PropTypes.bool,\n        actions: PropTypes.shape({\n            getProfiles: PropTypes.func.isRequired,\n            getProfilesInTeam: PropTypes.func.isRequired,\n            getStatusesByIds: PropTypes.func.isRequired,\n            getTotalUsersStats: PropTypes.func.isRequired,\n            loadStatusesForProfilesList: PropTypes.func.isRequired,\n            loadProfilesForGroupChannels: PropTypes.func.isRequired,\n            openDirectChannelToUserId: PropTypes.func.isRequired,\n            openGroupChannelToUserIds: PropTypes.func.isRequired,\n            searchProfiles: PropTypes.func.isRequired,\n            searchGroupChannels: PropTypes.func.isRequired,\n            setModalSearchTerm: PropTypes.func.isRequired,\n        }).isRequired,\n    }\n\n    constructor(props) {\n        super(props);\n\n        this.searchTimeoutId = 0;\n\n        const values = [];\n\n        if (props.currentChannelMembers) {\n            for (let i = 0; i < props.currentChannelMembers.length; i++) {\n                const user = Object.assign({}, props.currentChannelMembers[i]);\n\n                if (user.id === props.currentUserId) {\n                    continue;\n                }\n\n                values.push(user);\n            }\n        }\n\n        this.state = {\n            values,\n            show: true,\n            search: false,\n            saving: false,\n            loadingUsers: true,\n        };\n    }\n\n    componentDidMount() {\n        this.getUserProfiles();\n        this.props.actions.getTotalUsersStats();\n        this.loadProfilesMissingStatus(this.props.users, this.props.statuses);\n    }\n\n    UNSAFE_componentWillReceiveProps(nextProps) { // eslint-disable-line camelcase\n        if (this.props.searchTerm !== nextProps.searchTerm) {\n            clearTimeout(this.searchTimeoutId);\n\n            const searchTerm = nextProps.searchTerm;\n            if (searchTerm === '') {\n                this.resetPaging();\n            } else {\n                const teamId = nextProps.restrictDirectMessage === 'any' ? '' : nextProps.currentTeamId;\n\n                this.searchTimeoutId = setTimeout(\n                    async () => {\n                        this.setUsersLoadingState(true);\n                        const [{data: profilesData}, {data: groupChannelsData}] = await Promise.all([\n                            this.props.actions.searchProfiles(searchTerm, {team_id: teamId}),\n                            this.props.actions.searchGroupChannels(searchTerm),\n                        ]);\n                        if (profilesData) {\n                            this.props.actions.loadStatusesForProfilesList(profilesData);\n                        }\n                        if (groupChannelsData) {\n                            this.props.actions.loadProfilesForGroupChannels(groupChannelsData);\n                        }\n                        this.resetPaging();\n                        this.setUsersLoadingState(false);\n                    },\n                    Constants.SEARCH_TIMEOUT_MILLISECONDS\n                );\n            }\n        }\n\n        if (\n            this.props.users.length !== nextProps.users.length ||\n            Object.keys(this.props.statuses).length !== Object.keys(nextProps.statuses).length\n        ) {\n            this.loadProfilesMissingStatus(nextProps.users, nextProps.statuses);\n        }\n    }\n\n    loadProfilesMissingStatus = (users = [], statuses = {}) => {\n        const missingStatusByIds = users.\n            filter((user) => !statuses[user.id]).\n            map((user) => user.id);\n\n        if (missingStatusByIds.length > 0) {\n            this.props.actions.getStatusesByIds(missingStatusByIds);\n        }\n    }\n\n    handleHide = () => {\n        this.props.actions.setModalSearchTerm('');\n        this.setState({show: false});\n\n        if (this.props.bodyOnly) {\n            this.handleExit();\n        }\n    }\n\n    setUsersLoadingState = (loadingState) => {\n        this.setState({\n            loadingUsers: loadingState,\n        });\n    }\n\n    handleExit = () => {\n        if (this.exitToChannel) {\n            browserHistory.push(this.exitToChannel);\n        }\n\n        if (this.props.onModalDismissed) {\n            this.props.onModalDismissed();\n        }\n\n        if (this.props.onHide) {\n            this.props.onHide();\n        }\n    }\n\n    handleSubmit = (values = this.state.values) => {\n        const {actions} = this.props;\n        if (this.state.saving) {\n            return;\n        }\n\n        const userIds = values.map((v) => v.id);\n        if (userIds.length === 0) {\n            return;\n        }\n\n        this.setState({saving: true});\n\n        const done = (result) => {\n            const {data, error} = result;\n            this.setState({saving: false});\n\n            if (!error) {\n                this.exitToChannel = '/' + this.props.currentTeamName + '/channels/' + data.name;\n                this.handleHide();\n            }\n        };\n\n        if (userIds.length === 1) {\n            actions.openDirectChannelToUserId(userIds[0]).then(done);\n        } else {\n            actions.openGroupChannelToUserIds(userIds).then(done);\n        }\n    };\n\n    addValue = (value) => {\n        if (Array.isArray(value)) {\n            this.addUsers(value);\n        } else if ('profiles' in value) {\n            this.addUsers(value.profiles);\n        } else {\n            const values = Object.assign([], this.state.values);\n\n            if (values.indexOf(value) === -1) {\n                values.push(value);\n            }\n\n            this.setState({values});\n        }\n    };\n\n    addUsers = (users) => {\n        const values = Object.assign([], this.state.values);\n        const existingUserIds = values.map((user) => user.id);\n        for (const user of users) {\n            if (existingUserIds.indexOf(user.id) !== -1) {\n                continue;\n            }\n            values.push(user);\n        }\n\n        this.setState({values});\n    };\n\n    getUserProfiles = (page) => {\n        const pageNum = page ? page + 1 : 0;\n        if (this.props.restrictDirectMessage === 'any') {\n            this.props.actions.getProfiles(pageNum, USERS_PER_PAGE * 2).then(() => {\n                this.setUsersLoadingState(false);\n            });\n        } else {\n            this.props.actions.getProfilesInTeam(this.props.currentTeamId, pageNum, USERS_PER_PAGE * 2).then(() => {\n                this.setUsersLoadingState(false);\n            });\n        }\n    }\n\n    handlePageChange = (page, prevPage) => {\n        if (page > prevPage) {\n            this.setUsersLoadingState(true);\n            this.getUserProfiles(page);\n        }\n    }\n\n    resetPaging = () => {\n        if (this.refs.multiselect) {\n            this.refs.multiselect.resetPaging();\n        }\n    }\n\n    search = (term) => {\n        this.props.actions.setModalSearchTerm(term);\n    }\n\n    handleDelete = (values) => {\n        this.setState({values});\n    }\n\n    renderAriaLabel = (option) => {\n        if (!option) {\n            return null;\n        }\n        return option.username;\n    }\n\n    renderOption = (option, isSelected, onAdd) => {\n        if (option.type && option.type === 'G') {\n            return (\n                <GroupMessageOption\n                    key={option.id}\n                    channel={option}\n                    isSelected={isSelected}\n                    onAdd={onAdd}\n                />\n            );\n        }\n\n        const displayName = displayEntireNameForUser(option);\n\n        let modalName = displayName;\n        if (option.id === this.props.currentUserId) {\n            modalName = (\n                <FormattedMessage\n                    id='more_direct_channels.directchannel.you'\n                    defaultMessage='{displayname} (you)'\n                    values={{\n                        displayname: displayName,\n                    }}\n                />\n            );\n        } else if (option.delete_at) {\n            modalName = (\n                <FormattedMessage\n                    id='more_direct_channels.directchannel.deactivated'\n                    defaultMessage='{displayname} - Deactivated'\n                    values={{\n                        displayname: displayName,\n                    }}\n                />\n            );\n        }\n\n        var rowSelected = '';\n        if (isSelected) {\n            rowSelected = 'more-modal__row--selected';\n        }\n\n        const status = option.delete_at || option.is_bot ? null : this.props.statuses[option.id];\n        const email = option.is_bot ? null : option.email;\n\n        return (\n            <div\n                key={option.id}\n                ref={isSelected ? 'selected' : option.id}\n                className={'more-modal__row clickable ' + rowSelected}\n                onClick={() => onAdd(option)}\n            >\n                <ProfilePicture\n                    src={Client4.getProfilePictureUrl(option.id, option.last_picture_update)}\n                    status={status}\n                    width='32'\n                    height='32'\n                />\n                <div\n                    className='more-modal__details'\n                >\n                    <div className='more-modal__name'>\n                        {modalName}\n                        <BotBadge\n                            show={Boolean(option.is_bot)}\n                            className='badge-popoverlist'\n                        />\n                    </div>\n                    <div className='more-modal__description'>\n                        {email}\n                    </div>\n                </div>\n                <div className='more-modal__actions'>\n                    <div className='more-modal__actions--round'>\n                        <AddIcon/>\n                    </div>\n                </div>\n            </div>\n        );\n    }\n\n    renderValue(props) {\n        return props.data.username;\n    }\n\n    handleSubmitImmediatelyOn = (value) => {\n        return value.id === this.props.currentUserId || Boolean(value.delete_at);\n    }\n\n    render() {\n        let note;\n        if (this.props.currentChannelMembers) {\n            if (this.state.values && this.state.values.length >= MAX_SELECTABLE_VALUES) {\n                note = (\n                    <FormattedMessage\n                        id='more_direct_channels.new_convo_note.full'\n                        defaultMessage={'You\\'ve reached the maximum number of people for this conversation. Consider creating a private channel instead.'}\n                    />\n                );\n            } else if (this.props.isExistingChannel) {\n                note = (\n                    <FormattedMessage\n                        id='more_direct_channels.new_convo_note'\n                        defaultMessage={'This will start a new conversation. If you\\'re adding a lot of people, consider creating a private channel instead.'}\n                    />\n                );\n            }\n        }\n\n        const buttonSubmitText = localizeMessage('multiselect.go', 'Go');\n        const buttonSubmitLoadingText = localizeMessage('multiselect.loading', 'Loading..');\n\n        const numRemainingText = (\n            <FormattedMessage\n                id='multiselect.numPeopleRemaining'\n                defaultMessage='Use ↑↓ to browse, ↵ to select. You can add {num, number} more {num, plural, one {person} other {people}}. '\n                values={{\n                    num: MAX_SELECTABLE_VALUES - this.state.values.length,\n                }}\n            />\n        );\n\n        let users = this.props.users || [];\n\n        if (this.state.values.length) {\n            users = users.filter((user) => user.delete_at === 0 && user.id !== this.props.currentUserId);\n        } else {\n            const active = [];\n            const inactive = [];\n            for (const user of users) {\n                (user.delete_at ? inactive : active).push(user);\n            }\n            users = active.concat(inactive);\n        }\n\n        const groupChannels = this.props.groupChannels || [];\n\n        const options = [...users, ...groupChannels];\n        const body = (\n            <MultiSelect\n                key='moreDirectChannelsList'\n                ref='multiselect'\n                options={options}\n                optionRenderer={this.renderOption}\n                values={this.state.values}\n                valueRenderer={this.renderValue}\n                ariaLabelRenderer={this.renderAriaLabel}\n                perPage={USERS_PER_PAGE}\n                handlePageChange={this.handlePageChange}\n                handleInput={this.search}\n                handleDelete={this.handleDelete}\n                handleAdd={this.addValue}\n                handleSubmit={this.handleSubmit}\n                noteText={note}\n                maxValues={MAX_SELECTABLE_VALUES}\n                numRemainingText={numRemainingText}\n                buttonSubmitText={buttonSubmitText}\n                buttonSubmitLoadingText={buttonSubmitLoadingText}\n                submitImmediatelyOn={this.handleSubmitImmediatelyOn}\n                saving={this.state.saving}\n                loading={this.state.loadingUsers}\n                users={this.props.users}\n                totalCount={this.props.totalCount}\n                placeholderText={localizeMessage('multiselect.placeholder', 'Search and add members')}\n            />\n        );\n\n        if (this.props.bodyOnly) {\n            return body;\n        }\n\n        return (\n            <Modal\n                dialogClassName='a11y__modal more-modal more-direct-channels'\n                show={this.state.show}\n                onHide={this.handleHide}\n                onExited={this.handleExit}\n                role='dialog'\n                aria-labelledby='moreDmModalLabel'\n            >\n                <Modal.Header closeButton={true}>\n                    <Modal.Title\n                        componentClass='h1'\n                        id='moreDmModalLabel'\n                    >\n                        <FormattedMessage\n                            id='more_direct_channels.title'\n                            defaultMessage='Direct Messages'\n                        />\n                    </Modal.Title>\n                </Modal.Header>\n                <Modal.Body\n                    role='application'\n                >\n                    {body}\n                </Modal.Body>\n                <Modal.Footer className='modal-footer--invisible'>\n                    <button\n                        id='closeModalButton'\n                        type='button'\n                        className='btn btn-link'\n                    >\n                        <FormattedMessage\n                            id='general_button.close'\n                            defaultMessage='Close'\n                        />\n                    </button>\n                </Modal.Footer>\n            </Modal>\n        );\n    }\n}\n","// Copyright (c) 2015-present Mattermost, Inc. All Rights Reserved.\n// See LICENSE.txt for license information.\n\nimport {connect} from 'react-redux';\nimport {bindActionCreators} from 'redux';\nimport {\n    getProfiles,\n    getProfilesInTeam,\n    getStatusesByIds,\n    getTotalUsersStats,\n    searchProfiles,\n} from 'mattermost-redux/actions/users';\nimport {searchGroupChannels} from 'mattermost-redux/actions/channels';\nimport {\n    getCurrentUserId,\n    getProfiles as selectProfiles,\n    getProfilesInCurrentChannel,\n    getProfilesInCurrentTeam, searchProfiles as searchProfilesSelector,\n    searchProfilesInCurrentTeam,\n    getTotalUsersStats as getTotalUsersStatsSelector,\n} from 'mattermost-redux/selectors/entities/users';\nimport {getChannelsWithUserProfiles} from 'mattermost-redux/selectors/entities/channels';\nimport {getConfig} from 'mattermost-redux/selectors/entities/general';\nimport {getCurrentTeam} from 'mattermost-redux/selectors/entities/teams';\nimport {filterProfilesMatchingTerm} from 'mattermost-redux/utils/user_utils';\nimport {memoizeResult} from 'mattermost-redux/utils/helpers';\n\nimport {openDirectChannelToUserId, openGroupChannelToUserIds} from 'actions/channel_actions';\nimport {loadStatusesForProfilesList} from 'actions/status_actions.jsx';\nimport {loadProfilesForGroupChannels} from 'actions/user_actions';\nimport {setModalSearchTerm} from 'actions/views/search';\n\nimport MoreDirectChannels from './more_direct_channels.jsx';\n\nfunction mapStateToProps(state, ownProps) {\n    const currentUserId = getCurrentUserId(state);\n    let currentChannelMembers = [];\n    if (ownProps.isExistingChannel) {\n        currentChannelMembers = getProfilesInCurrentChannel(state);\n    }\n\n    const config = getConfig(state);\n    const restrictDirectMessage = config.RestrictDirectMessage;\n\n    const searchTerm = state.views.search.modalSearch;\n\n    let users;\n    if (searchTerm) {\n        if (restrictDirectMessage === 'any') {\n            users = searchProfilesSelector(state, searchTerm, false);\n        } else {\n            users = searchProfilesInCurrentTeam(state, searchTerm, false);\n        }\n    } else if (restrictDirectMessage === 'any') {\n        users = selectProfiles(state);\n    } else {\n        users = getProfilesInCurrentTeam(state);\n    }\n\n    const filteredGroupChannels = filterGroupChannels(getChannelsWithUserProfiles(state), searchTerm);\n\n    const team = getCurrentTeam(state);\n    const stats = getTotalUsersStatsSelector(state) || {total_users_count: 0};\n\n    return {\n        currentTeamId: team.id,\n        currentTeamName: team.name,\n        searchTerm,\n        users,\n        groupChannels: filteredGroupChannels,\n        statuses: state.entities.users.statuses,\n        currentChannelMembers,\n        currentUserId,\n        restrictDirectMessage,\n        totalCount: stats.total_users_count,\n    };\n}\n\nconst filterGroupChannels = memoizeResult((channels, term) => {\n    return channels.filter((channel) => {\n        const matches = filterProfilesMatchingTerm(channel.profiles, term);\n        return matches.length > 0;\n    });\n});\n\nfunction mapDispatchToProps(dispatch) {\n    return {\n        actions: bindActionCreators({\n            getProfiles,\n            getProfilesInTeam,\n            getStatusesByIds,\n            getTotalUsersStats,\n            loadStatusesForProfilesList,\n            loadProfilesForGroupChannels,\n            openDirectChannelToUserId,\n            openGroupChannelToUserIds,\n            searchProfiles,\n            searchGroupChannels,\n            setModalSearchTerm,\n        }, dispatch),\n    };\n}\n\nexport default connect(mapStateToProps, mapDispatchToProps)(MoreDirectChannels);\n","// Copyright (c) 2015-present Mattermost, Inc. All Rights Reserved.\n// See LICENSE.txt for license information.\n\nimport React from 'react';\nimport {FormattedMessage} from 'react-intl';\n\nexport default class DraftIcon extends React.PureComponent {\n    render() {\n        return (\n            <span\n                {...this.props}\n                id='draftIcon'\n            >\n                <FormattedMessage\n                    id='generic_icons.channel.draft'\n                    defaultMessage='Channel Draft Icon'\n                >\n                    {(ariaLabel) => (\n                        <svg\n                            width='14px'\n                            height='14px'\n                            viewBox='0 0 50 51'\n                            role='icon'\n                            aria-label={ariaLabel}\n                        >\n                            <g\n                                stroke='none'\n                                strokeWidth='1'\n                                fillRule='evenodd'\n                            >\n                                <path d='M11.980198,46.7136356 L14.9834983,43.7103353 L7.22772277,35.9545597 L4.22442244,38.95786 L4.22442244,42.4892132 L8.44884488,42.4892132 L8.44884488,46.7136356 L11.980198,46.7136356 Z M29.2409241,16.0865729 C29.2409241,15.6025221 28.9989023,15.3605003 28.5148515,15.3605003 C28.2948284,15.3605003 28.1078116,15.4375072 27.9537954,15.5915234 L10.0660066,33.4793122 C9.91199043,33.6333283 9.8349835,33.8203452 9.8349835,34.0403683 C9.8349835,34.5244191 10.0770053,34.7664409 10.5610561,34.7664409 C10.7810792,34.7664409 10.968096,34.6894339 11.1221122,34.5354178 L29.009901,16.647629 C29.1639172,16.4936128 29.2409241,16.306596 29.2409241,16.0865729 Z M27.4587459,9.74993922 L41.1881188,23.4793122 L13.7293729,50.938058 L0,50.938058 L0,37.2086851 L27.4587459,9.74993922 Z M50,12.9182561 C50,14.0843785 49.5929634,15.0744676 48.7788779,15.8885531 L43.30033,21.3671009 L29.5709571,7.637728 L35.049505,2.19218345 C35.8415881,1.35609566 36.8316772,0.938058036 38.019802,0.938058036 C39.1859244,0.938058036 40.1870145,1.35609566 41.0231023,2.19218345 L48.7788779,9.91495573 C49.5929634,10.7730458 50,11.7741359 50,12.9182561 Z'/>\n                            </g>\n                        </svg>\n                    )}\n                </FormattedMessage>\n            </span>\n        );\n    }\n}\n","// Copyright (c) 2015-present Mattermost, Inc. All Rights Reserved.\n// See LICENSE.txt for license information.\n\nimport React from 'react';\nimport PropTypes from 'prop-types';\nimport {connect} from 'react-redux';\nimport {UserTypes} from 'mattermost-redux/action_types';\nimport {Client4} from 'mattermost-redux/client';\nimport {Preferences} from 'mattermost-redux/constants';\nimport {\n    getChannelsInCurrentTeam,\n    getDirectAndGroupChannels,\n    getSortedUnreadChannelIds,\n    makeGetChannel,\n    getMyChannelMemberships,\n} from 'mattermost-redux/selectors/entities/channels';\nimport {getBool, getMyPreferences} from 'mattermost-redux/selectors/entities/preferences';\nimport {getConfig} from 'mattermost-redux/selectors/entities/general';\nimport {getLastPostPerChannel} from 'mattermost-redux/selectors/entities/posts';\nimport {getCurrentTeamId} from 'mattermost-redux/selectors/entities/teams';\nimport {\n    getCurrentUserId,\n    getUserIdsInChannels,\n    getUser,\n    searchProfiles,\n} from 'mattermost-redux/selectors/entities/users';\nimport * as ChannelActions from 'mattermost-redux/actions/channels';\nimport {logError} from 'mattermost-redux/actions/errors';\n\nimport {\n    sortChannelsByTypeAndDisplayName,\n    isDirectChannelVisible,\n    isGroupChannelVisible,\n    isUnreadChannel,\n} from 'mattermost-redux/utils/channel_utils';\n\nimport BotBadge from 'components/widgets/badges/bot_badge.jsx';\n\nimport DraftIcon from 'components/svg/draft_icon';\nimport GlobeIcon from 'components/svg/globe_icon';\nimport LockIcon from 'components/svg/lock_icon';\nimport ArchiveIcon from 'components/svg/archive_icon';\nimport {getPostDraft} from 'selectors/rhs';\nimport store from 'stores/redux_store.jsx';\nimport {Constants, StoragePrefixes} from 'utils/constants.jsx';\nimport * as Utils from 'utils/utils.jsx';\n\nimport Provider from './provider.jsx';\nimport Suggestion from './suggestion.jsx';\n\nconst getState = store.getState;\n\nclass SwitchChannelSuggestion extends Suggestion {\n    static get propTypes() {\n        return {\n            ...super.propTypes,\n            channelMember: PropTypes.object,\n            hasDraft: PropTypes.bool,\n        };\n    }\n\n    render() {\n        const {item, isSelection} = this.props;\n        const channel = item.channel;\n        const channelIsArchived = channel.delete_at && channel.delete_at !== 0;\n\n        const member = this.props.channelMember;\n        let badge = null;\n        if (member) {\n            if (member.notify_props && member.mention_count > 0) {\n                badge = <span className='badge'>{member.mention_count}</span>;\n            }\n        }\n\n        let className = 'mentions__name';\n        if (isSelection) {\n            className += ' suggestion--selected';\n        }\n\n        const displayName = channel.display_name;\n        let icon = null;\n        if (channelIsArchived) {\n            icon = (\n                <ArchiveIcon className='icon icon__archive'/>\n            );\n        } else if (this.props.hasDraft) {\n            icon = (\n                <DraftIcon className='icon icon__draft icon--body'/>\n            );\n        } else if (channel.type === Constants.OPEN_CHANNEL) {\n            icon = (\n                <GlobeIcon className='icon icon__globe icon--body'/>\n            );\n        } else if (channel.type === Constants.PRIVATE_CHANNEL) {\n            icon = (\n                <LockIcon className='icon icon__lock icon--body'/>\n            );\n        } else if (channel.type === Constants.GM_CHANNEL) {\n            icon = <div className='status status--group'>{'G'}</div>;\n        } else {\n            icon = (\n                <div className='pull-left'>\n                    <img\n                        alt={''}\n                        className='mention__image'\n                        src={Utils.imageURLForUser(channel.userId)}\n                    />\n                </div>\n            );\n        }\n\n        let tag = null;\n        if (channel.type === Constants.DM_CHANNEL) {\n            var teammate = Utils.getDirectTeammate(channel.id);\n            if (Utils.isEmptyObject(teammate)) {\n                teammate = getUser(getState(), channel.userId);\n            }\n            tag = (\n                <BotBadge\n                    show={Boolean(teammate && teammate.is_bot)}\n                    className='badge-autocomplete'\n                />\n            );\n        }\n\n        return (\n            <div\n                onClick={this.handleClick}\n                className={className}\n                id={`switchChannel_${channel.name}`}\n                {...Suggestion.baseProps}\n            >\n                {icon}\n                <span>{displayName}</span>\n                {tag}\n                {badge}\n            </div>\n        );\n    }\n}\n\nfunction mapStateToPropsForSwitchChannelSuggestion(state, ownProps) {\n    const channelId = ownProps.item && ownProps.item.channel ? ownProps.item.channel.id : '';\n    const draft = channelId ? getPostDraft(state, StoragePrefixes.DRAFT, channelId) : false;\n\n    return {\n        channelMember: getMyChannelMemberships(state)[channelId],\n        hasDraft: draft && Boolean(draft.message.trim() || draft.fileInfos.length || draft.uploadsInProgress.length),\n    };\n}\n\nconst ConnectedSwitchChannelSuggestion = connect(mapStateToPropsForSwitchChannelSuggestion)(SwitchChannelSuggestion);\n\nlet prefix = '';\n\nfunction quickSwitchSorter(wrappedA, wrappedB) {\n    const aIsArchived = wrappedA.channel.delete_at ? wrappedA.channel.delete_at !== 0 : false;\n    const bIsArchived = wrappedB.channel.delete_at ? wrappedB.channel.delete_at !== 0 : false;\n    if (aIsArchived && !bIsArchived) {\n        return 1;\n    } else if (!aIsArchived && bIsArchived) {\n        return -1;\n    } else if (wrappedA.type === Constants.MENTION_CHANNELS && wrappedB.type === Constants.MENTION_MORE_CHANNELS) {\n        return -1;\n    } else if (wrappedB.type === Constants.MENTION_CHANNELS && wrappedA.type === Constants.MENTION_MORE_CHANNELS) {\n        return 1;\n    }\n\n    if (wrappedA.deactivated && !wrappedB.deactivated) {\n        return 1;\n    } else if (wrappedB.deactivated && !wrappedA.deactivated) {\n        return -1;\n    }\n\n    const a = wrappedA.channel;\n    const b = wrappedB.channel;\n\n    let aDisplayName = a.display_name.toLowerCase();\n    let bDisplayName = b.display_name.toLowerCase();\n\n    if (a.type === Constants.DM_CHANNEL) {\n        aDisplayName = aDisplayName.substring(1);\n    }\n\n    if (b.type === Constants.DM_CHANNEL) {\n        bDisplayName = bDisplayName.substring(1);\n    }\n\n    const aStartsWith = aDisplayName.startsWith(prefix);\n    const bStartsWith = bDisplayName.startsWith(prefix);\n    if ((aStartsWith && bStartsWith) || (!aStartsWith && !bStartsWith)) {\n        //\n        // MM-12677 When this is migrated this needs to be fixed to pull the user's locale\n        //\n        return sortChannelsByTypeAndDisplayName('en', a, b);\n    } else if (aStartsWith) {\n        return -1;\n    }\n\n    return 1;\n}\n\nfunction makeChannelSearchFilter(channelPrefix) {\n    const channelPrefixLower = channelPrefix.toLowerCase();\n    const curState = getState();\n    const usersInChannels = getUserIdsInChannels(curState);\n    const userSearchStrings = {};\n\n    return (channel) => {\n        let searchString = channel.display_name;\n\n        if (channel.type === Constants.GM_CHANNEL || channel.type === Constants.DM_CHANNEL) {\n            const usersInChannel = usersInChannels[channel.id] || new Set([]);\n\n            // In case the channel is a DM and the profilesInChannel is not populated\n            if (!usersInChannel.size && channel.type === Constants.DM_CHANNEL) {\n                const userId = Utils.getUserIdFromChannelId(channel.name);\n                const user = getUser(curState, userId);\n                if (user) {\n                    usersInChannel.add(userId);\n                }\n            }\n\n            for (const userId of usersInChannel) {\n                let userString = userSearchStrings[userId];\n\n                if (!userString) {\n                    const user = getUser(curState, userId);\n                    if (!user) {\n                        continue;\n                    }\n                    const {nickname, username} = user;\n                    userString = `${nickname}${username}${Utils.getFullName(user)}`;\n                    userSearchStrings[userId] = userString;\n                }\n                searchString += userString;\n            }\n        }\n\n        return searchString.toLowerCase().includes(channelPrefixLower);\n    };\n}\n\nexport default class SwitchChannelProvider extends Provider {\n    handlePretextChanged(channelPrefix, resultsCallback) {\n        if (channelPrefix) {\n            prefix = channelPrefix;\n            this.startNewRequest(channelPrefix);\n\n            // Dispatch suggestions for local data\n            const channels = getChannelsInCurrentTeam(getState()).concat(getDirectAndGroupChannels(getState()));\n            const users = Object.assign([], searchProfiles(getState(), channelPrefix, false));\n            this.formatChannelsAndDispatch(channelPrefix, resultsCallback, channels, users, true);\n\n            // Fetch data from the server and dispatch\n            this.fetchUsersAndChannels(channelPrefix, resultsCallback);\n        } else {\n            this.formatUnreadChannelsAndDispatch(resultsCallback);\n        }\n\n        return true;\n    }\n\n    async fetchUsersAndChannels(channelPrefix, resultsCallback) {\n        const state = getState();\n        const teamId = getCurrentTeamId(state);\n        if (!teamId) {\n            return;\n        }\n\n        const config = getConfig(state);\n        let usersAsync;\n        if (config.RestrictDirectMessage === 'team') {\n            usersAsync = Client4.autocompleteUsers(channelPrefix, teamId, '');\n        } else {\n            usersAsync = Client4.autocompleteUsers(channelPrefix, '', '');\n        }\n\n        const channelsAsync = ChannelActions.searchChannels(teamId, channelPrefix)(store.dispatch, store.getState);\n\n        let usersFromServer = [];\n        let channelsFromServer = [];\n        try {\n            usersFromServer = await usersAsync;\n            const {data} = await channelsAsync;\n            channelsFromServer = data;\n        } catch (err) {\n            store.dispatch(logError(err));\n        }\n\n        if (this.shouldCancelDispatch(channelPrefix)) {\n            return;\n        }\n\n        const users = Object.assign([], searchProfiles(state, channelPrefix, false)).concat(usersFromServer.users);\n        const currentUserId = getCurrentUserId(state);\n        store.dispatch({\n            type: UserTypes.RECEIVED_PROFILES_LIST,\n            data: users.filter((user) => user.id !== currentUserId),\n        });\n\n        const channels = getChannelsInCurrentTeam(state).concat(getDirectAndGroupChannels(state)).concat(channelsFromServer);\n        this.formatChannelsAndDispatch(channelPrefix, resultsCallback, channels, users);\n    }\n\n    userWrappedChannel(user, channel) {\n        let displayName = `@${user.username}`;\n\n        if ((user.first_name || user.last_name) && user.nickname) {\n            displayName += ` - ${Utils.getFullName(user)} (${user.nickname})`;\n        } else if (user.nickname) {\n            displayName += ` - (${user.nickname})`;\n        } else if (user.first_name || user.last_name) {\n            displayName += ` - ${Utils.getFullName(user)}`;\n        }\n\n        if (user.delete_at) {\n            displayName += ' - ' + Utils.localizeMessage('channel_switch_modal.deactivated', 'Deactivated');\n        }\n\n        return {\n            channel: {\n                display_name: displayName,\n                name: user.username,\n                id: channel ? channel.id : user.id,\n                userId: user.id,\n                update_at: user.update_at,\n                type: Constants.DM_CHANNEL,\n                last_picture_update: user.last_picture_update || 0,\n            },\n            name: user.username,\n            deactivated: user.delete_at,\n        };\n    }\n\n    formatChannelsAndDispatch(channelPrefix, resultsCallback, allChannels, users, skipNotInChannel = false) {\n        const channels = [];\n\n        const members = getMyChannelMemberships(getState());\n\n        if (this.shouldCancelDispatch(channelPrefix)) {\n            return;\n        }\n\n        const completedChannels = {};\n\n        const channelFilter = makeChannelSearchFilter(channelPrefix);\n\n        const state = getState();\n        const config = getConfig(state);\n        const viewArchivedChannels = config.ExperimentalViewArchivedChannels === 'true';\n\n        for (const id of Object.keys(allChannels)) {\n            const channel = allChannels[id];\n\n            if (completedChannels[channel.id]) {\n                continue;\n            }\n\n            if (channelFilter(channel)) {\n                const newChannel = Object.assign({}, channel);\n                const channelIsArchived = channel.delete_at !== 0;\n\n                let wrappedChannel = {channel: newChannel, name: newChannel.name, deactivated: false};\n                if (!viewArchivedChannels && channelIsArchived) {\n                    continue;\n                } else if (channelIsArchived && members[channel.id]) {\n                    wrappedChannel.type = Constants.ARCHIVED_CHANNEL;\n                } else if (channelIsArchived && !members[channel.id]) {\n                    continue;\n                } else if (newChannel.type === Constants.GM_CHANNEL) {\n                    newChannel.name = newChannel.display_name;\n                    wrappedChannel.name = newChannel.name;\n                    const isGMVisible = isGroupChannelVisible(config, getMyPreferences(state), channel, getLastPostPerChannel(state)[channel.id], isUnreadChannel(getMyChannelMemberships(state), channel));\n                    if (isGMVisible) {\n                        wrappedChannel.type = Constants.MENTION_CHANNELS;\n                    } else {\n                        wrappedChannel.type = Constants.MENTION_MORE_CHANNELS;\n                        if (skipNotInChannel) {\n                            continue;\n                        }\n                    }\n                } else if (newChannel.type === Constants.DM_CHANNEL) {\n                    const userId = Utils.getUserIdFromChannelId(newChannel.name);\n                    const user = users.find((u) => u.id === userId);\n\n                    if (user) {\n                        completedChannels[user.id] = true;\n                        wrappedChannel = this.userWrappedChannel(\n                            user,\n                            newChannel\n                        );\n                        const isDMVisible = isDirectChannelVisible(user.id, config, getMyPreferences(state), channel, getLastPostPerChannel(state)[channel.id], isUnreadChannel(getMyChannelMemberships(state), channel));\n                        if (isDMVisible) {\n                            wrappedChannel.type = Constants.MENTION_CHANNELS;\n                        } else {\n                            wrappedChannel.type = Constants.MENTION_MORE_CHANNELS;\n                            if (skipNotInChannel) {\n                                continue;\n                            }\n                        }\n                    } else {\n                        continue;\n                    }\n                } else if (members[channel.id]) {\n                    wrappedChannel.type = Constants.MENTION_CHANNELS;\n                } else {\n                    wrappedChannel.type = Constants.MENTION_MORE_CHANNELS;\n                    if (skipNotInChannel || !newChannel.display_name.toLowerCase().startsWith(channelPrefix)) {\n                        continue;\n                    }\n                }\n\n                completedChannels[channel.id] = true;\n                channels.push(wrappedChannel);\n            }\n        }\n\n        for (let i = 0; i < users.length; i++) {\n            const user = users[i];\n\n            if (completedChannels[user.id]) {\n                continue;\n            }\n\n            const isDMVisible = getBool(getState(), Preferences.CATEGORY_DIRECT_CHANNEL_SHOW, user.id, false);\n\n            const wrappedChannel = this.userWrappedChannel(user);\n\n            if (isDMVisible) {\n                wrappedChannel.type = Constants.MENTION_CHANNELS;\n            } else {\n                wrappedChannel.type = Constants.MENTION_MORE_CHANNELS;\n                if (skipNotInChannel) {\n                    continue;\n                }\n            }\n\n            completedChannels[user.id] = true;\n            channels.push(wrappedChannel);\n        }\n\n        const channelNames = channels.\n            sort(quickSwitchSorter).\n            map((wrappedChannel) => wrappedChannel.channel.name);\n\n        if (skipNotInChannel) {\n            channels.push({\n                type: Constants.MENTION_MORE_CHANNELS,\n                loading: true,\n            });\n        }\n\n        resultsCallback({\n            matchedPretext: channelPrefix,\n            terms: channelNames,\n            items: channels,\n            component: ConnectedSwitchChannelSuggestion,\n        });\n    }\n\n    formatUnreadChannelsAndDispatch(resultsCallback) {\n        const getChannel = makeGetChannel();\n\n        const unreadChannelIds = getSortedUnreadChannelIds(getState(), false);\n\n        const channels = [];\n        for (let i = 0; i < unreadChannelIds.length; i++) {\n            const channel = getChannel(getState(), {id: unreadChannelIds[i]}) || {};\n\n            let wrappedChannel = {channel, name: channel.name, deactivated: false};\n            if (channel.type === Constants.GM_CHANNEL) {\n                wrappedChannel.name = channel.display_name;\n            } else if (channel.type === Constants.DM_CHANNEL) {\n                const user = getUser(getState(), Utils.getUserIdFromChannelId(channel.name));\n\n                if (!user) {\n                    continue;\n                }\n\n                wrappedChannel = this.userWrappedChannel(\n                    user,\n                    channel\n                );\n            }\n            wrappedChannel.type = Constants.MENTION_UNREAD_CHANNELS;\n            channels.push(wrappedChannel);\n        }\n\n        const channelNames = channels.map((wrappedChannel) => wrappedChannel.channel.name);\n\n        resultsCallback({\n            matchedPretext: '',\n            terms: channelNames,\n            items: channels,\n            component: ConnectedSwitchChannelSuggestion,\n        });\n    }\n}\n","// Copyright (c) 2015-present Mattermost, Inc. All Rights Reserved.\n// See LICENSE.txt for license information.\n\nimport React from 'react';\nimport * as Selectors from 'mattermost-redux/selectors/entities/teams';\nimport {FormattedMessage} from 'react-intl';\n\nimport {getCurrentLocale} from 'selectors/i18n';\nimport store from 'stores/redux_store.jsx';\n\nimport Provider from './provider.jsx';\nimport Suggestion from './suggestion.jsx';\n\nconst getState = store.getState;\n\nclass SwitchTeamSuggestion extends Suggestion {\n    render() {\n        const {item, isSelection} = this.props;\n\n        let className = 'mentions__name';\n        if (isSelection) {\n            className += ' suggestion--selected';\n        }\n\n        return (\n            <div\n                onClick={this.handleClick}\n                className={className}\n                {...Suggestion.baseProps}\n            >\n                <div className='status'>\n                    <FormattedMessage\n                        id='general_tab.teamIcon'\n                        defaultMessage='Team Icon'\n                    >\n                        {(title) => (\n                            <i\n                                className='fa fa-group'\n                                title={title}\n                            />\n                        )}\n                    </FormattedMessage>\n                </div>\n                {item.display_name}\n            </div>\n        );\n    }\n}\n\nlet prefix = '';\n\nfunction quickSwitchSorter(a, b) {\n    const aDisplayName = a.display_name.toLowerCase();\n    const bDisplayName = b.display_name.toLowerCase();\n    const aStartsWith = aDisplayName.startsWith(prefix);\n    const bStartsWith = bDisplayName.startsWith(prefix);\n\n    if (aStartsWith && bStartsWith) {\n        const locale = getCurrentLocale(getState());\n\n        if (aDisplayName !== bDisplayName) {\n            return aDisplayName.localeCompare(bDisplayName, locale, {numeric: true});\n        }\n\n        return a.name.localeCompare(b.name, locale, {numeric: true});\n    } else if (aStartsWith) {\n        return -1;\n    }\n\n    return 1;\n}\n\nexport default class SwitchTeamProvider extends Provider {\n    handlePretextChanged(teamPrefix, resultsCallback) {\n        if (teamPrefix) {\n            prefix = teamPrefix;\n            this.startNewRequest(teamPrefix);\n\n            const allTeams = Selectors.getMyTeams(getState());\n\n            const teams = allTeams.filter((team) => {\n                return team.display_name.toLowerCase().indexOf(teamPrefix) !== -1 ||\n                    team.name.indexOf(teamPrefix) !== -1;\n            });\n\n            const teamNames = teams.\n                sort(quickSwitchSorter).\n                map((team) => team.name);\n\n            resultsCallback({\n                matchedPretext: teamPrefix,\n                terms: teamNames,\n                items: teams,\n                component: SwitchTeamSuggestion,\n            });\n\n            return true;\n        }\n\n        return false;\n    }\n}\n","// Copyright (c) 2015-present Mattermost, Inc. All Rights Reserved.\n// See LICENSE.txt for license information.\n\nimport PropTypes from 'prop-types';\nimport React from 'react';\nimport {Modal} from 'react-bootstrap';\nimport {FormattedMessage} from 'react-intl';\n\nimport {browserHistory} from 'utils/browser_history';\nimport Constants from 'utils/constants.jsx';\nimport * as Utils from 'utils/utils.jsx';\nimport * as UserAgent from 'utils/user_agent.jsx';\nimport {t} from 'utils/i18n';\nimport SuggestionBox from 'components/suggestion/suggestion_box.jsx';\nimport SuggestionList from 'components/suggestion/suggestion_list.jsx';\nimport SwitchChannelProvider from 'components/suggestion/switch_channel_provider.jsx';\nimport SwitchTeamProvider from 'components/suggestion/switch_team_provider.jsx';\n\nconst CHANNEL_MODE = 'channel';\nconst TEAM_MODE = 'team';\n\nexport default class QuickSwitchModal extends React.PureComponent {\n    static propTypes = {\n\n        /**\n         * The function called to hide the modal\n         */\n        onHide: PropTypes.func.isRequired,\n\n        /**\n         * Set to show team switcher\n         */\n        showTeamSwitcher: PropTypes.bool,\n\n        actions: PropTypes.shape({\n            joinChannelById: PropTypes.func.isRequired,\n            switchToChannel: PropTypes.func.isRequired,\n        }).isRequired,\n    };\n\n    constructor(props) {\n        super(props);\n\n        this.channelProviders = [new SwitchChannelProvider()];\n        this.teamProviders = [new SwitchTeamProvider()];\n\n        this.switchBox = null;\n\n        this.state = {\n            text: '',\n            mode: CHANNEL_MODE,\n        };\n    }\n\n    focusTextbox = () => {\n        if (this.switchBox == null) {\n            return;\n        }\n\n        const textbox = this.switchBox.getTextbox();\n        if (document.activeElement !== textbox) {\n            textbox.focus();\n            Utils.placeCaretAtEnd(textbox);\n        }\n    };\n\n    setSwitchBoxRef = (input) => {\n        this.switchBox = input;\n        this.focusTextbox();\n    };\n\n    onShow = () => {\n        this.setState({\n            text: '',\n        });\n    };\n\n    onHide = () => {\n        this.focusPostTextbox();\n        this.setState({\n            text: '',\n        });\n        this.props.onHide();\n    };\n\n    focusPostTextbox = () => {\n        if (!UserAgent.isMobile()) {\n            setTimeout(() => {\n                const textbox = document.querySelector('#post_textbox');\n                if (textbox) {\n                    textbox.focus();\n                }\n            });\n        }\n    };\n\n    onChange = (e) => {\n        this.setState({text: e.target.value});\n    };\n\n    handleKeyDown = (e) => {\n        if (Utils.isKeyPressed(e, Constants.KeyCodes.TAB)) {\n            e.preventDefault();\n            this.switchMode();\n        }\n    };\n\n    handleSubmit = async (selected) => {\n        if (!selected) {\n            return;\n        }\n\n        if (this.state.mode === CHANNEL_MODE) {\n            const {joinChannelById, switchToChannel} = this.props.actions;\n            const selectedChannel = selected.channel;\n\n            if (selected.type === Constants.MENTION_MORE_CHANNELS && selectedChannel.type === Constants.OPEN_CHANNEL) {\n                await joinChannelById(selectedChannel.id);\n            }\n            switchToChannel(selectedChannel).then((result) => {\n                if (result.data) {\n                    this.onHide();\n                }\n            });\n        } else {\n            browserHistory.push('/' + selected.name);\n            this.onHide();\n        }\n    };\n\n    enableChannelProvider = () => {\n        this.channelProviders[0].disableDispatches = false;\n        this.teamProviders[0].disableDispatches = true;\n    };\n\n    enableTeamProvider = () => {\n        this.teamProviders[0].disableDispatches = false;\n        this.channelProviders[0].disableDispatches = true;\n    };\n\n    switchMode = () => {\n        if (this.state.mode === CHANNEL_MODE && this.props.showTeamSwitcher) {\n            this.enableTeamProvider();\n            this.setState({mode: TEAM_MODE});\n        } else if (this.state.mode === TEAM_MODE) {\n            this.enableChannelProvider();\n            this.setState({mode: CHANNEL_MODE});\n        }\n    };\n\n    handleOnClick = (e) => {\n        e.preventDefault();\n        const mode = e.currentTarget.getAttribute('data-mode');\n        this.enableChannelProvider();\n        this.setState({mode});\n        this.focusTextbox();\n    }\n\n    render() {\n        let providers = this.channelProviders;\n        let header;\n        let renderDividers = true;\n\n        let channelShortcut = t('quick_switch_modal.channelsShortcut.windows');\n        let defaultChannelShortcut = 'CTRL+K';\n        if (Utils.isMac()) {\n            channelShortcut = t('quick_switch_modal.channelsShortcut.mac');\n            defaultChannelShortcut = 'CMD+K';\n        }\n\n        let teamShortcut = t('quick_switch_modal.teamsShortcut.windows');\n        let defaultTeamShortcut = 'CTRL+ALT+K';\n        if (Utils.isMac()) {\n            teamShortcut = t('quick_switch_modal.teamsShortcut.mac');\n            defaultTeamShortcut = 'CMD+ALT+K';\n        }\n\n        if (this.props.showTeamSwitcher) {\n            let channelsActiveClass = '';\n            let teamsActiveClass = '';\n            if (this.state.mode === TEAM_MODE) {\n                providers = this.teamProviders;\n                renderDividers = false;\n                teamsActiveClass = 'active';\n            } else {\n                channelsActiveClass = 'active';\n            }\n\n            header = (\n                <div className='nav nav-tabs'>\n                    <li className={channelsActiveClass}>\n                        <a\n                            data-mode={'channel'}\n                            href='#'\n                            onClick={this.handleOnClick}\n                        >\n                            <FormattedMessage\n                                id='quick_switch_modal.channels'\n                                defaultMessage='Channels'\n                            />\n                            <span className='small'>\n                                <FormattedMessage\n                                    id={channelShortcut}\n                                    defaultMessage={defaultChannelShortcut}\n                                />\n                            </span>\n                        </a>\n                    </li>\n                    <li className={teamsActiveClass}>\n                        <a\n                            data-mode={'team'}\n                            href='#'\n                            onClick={this.handleOnClick}\n                        >\n                            <FormattedMessage\n                                id='quick_switch_modal.teams'\n                                defaultMessage='Teams'\n                            />\n                            <span className='small'>\n                                <FormattedMessage\n                                    id={teamShortcut}\n                                    defaultMessage={defaultTeamShortcut}\n                                />\n                            </span>\n                        </a>\n                    </li>\n                </div>\n            );\n        }\n\n        let help;\n        if (Utils.isMobile()) {\n            help = (\n                <FormattedMessage\n                    id='quick_switch_modal.help_mobile'\n                    defaultMessage='Type to find a channel.'\n                />\n            );\n        } else if (this.props.showTeamSwitcher) {\n            help = (\n                <FormattedMessage\n                    id='quick_switch_modal.help'\n                    defaultMessage='Start typing then use TAB to toggle channels/teams, ↑↓ to browse, ↵ to select, and ESC to dismiss.'\n                />\n            );\n        } else {\n            help = (\n                <FormattedMessage\n                    id='quick_switch_modal.help_no_team'\n                    defaultMessage='Type to find a channel. Use ↑↓ to browse, ↵ to select, ESC to dismiss.'\n                />\n            );\n        }\n\n        return (\n            <Modal\n                dialogClassName='a11y__modal channel-switch-modal modal--overflow'\n                ref='modal'\n                show={true}\n                onHide={this.onHide}\n                enforceFocus={false}\n                restoreFocus={false}\n                role='dialog'\n                aria-labelledby='quickSwitchModalLabel'\n            >\n                <Modal.Header\n                    id='quickSwitchModalLabel'\n                    closeButton={true}\n                />\n                <Modal.Body>\n                    {header}\n                    <div\n                        id='quickSwitchHint'\n                        className='modal__hint'\n                    >\n                        {help}\n                    </div>\n                    <SuggestionBox\n                        id='quickSwitchInput'\n                        ref={this.setSwitchBoxRef}\n                        className='form-control focused'\n                        onChange={this.onChange}\n                        value={this.state.text}\n                        onKeyDown={this.handleKeyDown}\n                        onItemSelected={this.handleSubmit}\n                        listComponent={SuggestionList}\n                        maxLength='64'\n                        providers={providers}\n                        listStyle='bottom'\n                        completeOnTab={false}\n                        spellCheck='false'\n                        renderDividers={renderDividers}\n                        delayInputUpdate={true}\n                        openWhenEmpty={true}\n                    />\n                </Modal.Body>\n            </Modal>\n        );\n    }\n}\n","// Copyright (c) 2015-present Mattermost, Inc. All Rights Reserved.\n// See LICENSE.txt for license information.\n\nimport {connect} from 'react-redux';\nimport {bindActionCreators} from 'redux';\n\nimport {joinChannelById, switchToChannel} from 'actions/views/channel';\n\nimport QuickSwitchModal from './quick_switch_modal.jsx';\n\nfunction mapStateToProps() {\n    return {\n        showTeamSwitcher: false,\n    };\n}\n\nfunction mapDispatchToProps(dispatch) {\n    return {\n        actions: bindActionCreators({\n            joinChannelById,\n            switchToChannel,\n        }, dispatch),\n    };\n}\n\nexport default connect(mapStateToProps, mapDispatchToProps)(QuickSwitchModal);\n","// Copyright (c) 2015-present Mattermost, Inc. All Rights Reserved.\n// See LICENSE.txt for license information.\n\nimport $ from 'jquery';\nimport PropTypes from 'prop-types';\nimport React from 'react';\nimport {Modal} from 'react-bootstrap';\nimport ReactDOM from 'react-dom';\nimport {FormattedMessage} from 'react-intl';\n\nimport GlobeIcon from 'components/svg/globe_icon';\nimport LockIcon from 'components/svg/lock_icon';\nimport LocalizedInput from 'components/localized_input/localized_input';\nimport Constants from 'utils/constants.jsx';\nimport {getShortenedURL} from 'utils/url.jsx';\nimport * as UserAgent from 'utils/user_agent.jsx';\nimport * as Utils from 'utils/utils.jsx';\nimport {t} from 'utils/i18n.jsx';\n\nexport default class NewChannelModal extends React.PureComponent {\n    static propTypes = {\n\n        /**\n         * Set whether to show the modal or not\n         */\n        show: PropTypes.bool.isRequired,\n\n        /**\n         * Id of the active team\n         */\n        currentTeamId: PropTypes.string.isRequired,\n\n        /**\n         * The type of channel to create, 'O' or 'P'\n         */\n        channelType: PropTypes.string.isRequired,\n\n        /**\n         * The data needed to create the channel\n         */\n        channelData: PropTypes.object.isRequired,\n\n        /**\n         * Set to force form submission on CTRL/CMD + ENTER instead of ENTER\n         */\n        ctrlSend: PropTypes.bool,\n\n        /**\n         * Server error from failed channel creation\n         */\n        serverError: PropTypes.node,\n\n        /**\n         * Function used to submit the channel\n         */\n        onSubmitChannel: PropTypes.func.isRequired,\n\n        /**\n         * Function to call when modal is dimissed\n         */\n        onModalDismissed: PropTypes.func.isRequired,\n\n        /**\n         * Function to call when modal has exited\n         */\n        onModalExited: PropTypes.func,\n\n        /**\n         * Function to call to switch channel type\n         */\n        onTypeSwitched: PropTypes.func.isRequired,\n\n        /**\n         * Function to call when edit URL button is pressed\n         */\n        onChangeURLPressed: PropTypes.func.isRequired,\n\n        /**\n         * Function to call when channel data is modified\n         */\n        onDataChanged: PropTypes.func.isRequired,\n\n        /**\n         * Permission to create public channel\n         */\n        canCreatePublicChannel: PropTypes.bool.isRequired,\n\n        /**\n         * Permission to create private channel\n         */\n        canCreatePrivateChannel: PropTypes.bool.isRequired,\n    }\n\n    constructor(props) {\n        super(props);\n\n        this.state = {\n            displayNameError: '',\n        };\n    }\n\n    UNSAFE_componentWillReceiveProps(nextProps) { // eslint-disable-line camelcase\n        if (nextProps.show === true && this.props.show === false) {\n            this.setState({\n                displayNameError: '',\n            });\n        }\n    }\n\n    componentDidMount() {\n        // ???\n        if (UserAgent.isInternetExplorer() || UserAgent.isEdge()) {\n            $('body').addClass('browser--ie');\n        }\n    }\n\n    onEnterKeyDown = (e) => {\n        const enterPressed = Utils.isKeyPressed(e, Constants.KeyCodes.ENTER);\n        const {ctrlSend} = this.props;\n\n        // Enter pressed alone without required cmd or ctrl key\n        if (ctrlSend && enterPressed && !e.ctrlKey) {\n            e.preventDefault();\n        } else if ((ctrlSend && enterPressed && e.ctrlKey) || (!ctrlSend && enterPressed && !e.shiftKey && !e.altKey)) {\n            this.handleSubmit(e);\n        }\n    }\n\n    handleSubmit = (e) => {\n        e.preventDefault();\n\n        const displayName = ReactDOM.findDOMNode(this.refs.display_name).value.trim();\n        if (displayName.length < Constants.MIN_CHANNELNAME_LENGTH) {\n            this.setState({displayNameError: true});\n            return;\n        }\n\n        this.props.onSubmitChannel();\n    }\n\n    handleChange = () => {\n        const newData = {\n            displayName: this.refs.display_name.value,\n            header: this.refs.channel_header.value,\n            purpose: this.refs.channel_purpose.value,\n        };\n        this.props.onDataChanged(newData);\n    }\n\n    handleOnURLChange = (e) => {\n        e.preventDefault();\n        if (this.props.onChangeURLPressed) {\n            this.props.onChangeURLPressed();\n        }\n    }\n\n    handlePublicTypeSelect = () => {\n        this.props.onTypeSwitched('O');\n    }\n\n    handlePrivateTypeSelect = () => {\n        this.props.onTypeSwitched('P');\n    }\n\n    render() {\n        const {canCreatePublicChannel, canCreatePrivateChannel} = this.props;\n\n        const enableTypeSelection = canCreatePublicChannel && canCreatePrivateChannel;\n        var displayNameError = null;\n        var serverError = null;\n        var displayNameClass = 'form-group';\n\n        if (this.state.displayNameError) {\n            displayNameError = (\n                <p className='input__help error'>\n                    <FormattedMessage\n                        id='channel_modal.displayNameError'\n                        defaultMessage='Channel name must be 2 or more characters'\n                    />\n                    {this.state.displayNameError}\n                </p>\n            );\n            displayNameClass += ' has-error';\n        }\n\n        if (this.props.serverError) {\n            serverError = (\n                <div className='form-group has-error'>\n                    <div className='col-sm-12'>\n                        <p\n                            id='createChannelError'\n                            className='input__help error'\n                        >\n                            {this.props.serverError}\n                        </p>\n                    </div>\n                </div>\n            );\n        }\n\n        const publicChannelDesc = (\n            <div className='flex-parent'>\n                <GlobeIcon className='icon icon__globe icon--body type-icon'/>\n                <FormattedMessage\n                    id='channel_modal.publicName'\n                    defaultMessage='Public'\n                />\n                <FormattedMessage\n                    id='channel_modal.publicHint'\n                    defaultMessage=' - Anyone can join this channel.'\n                />\n            </div>\n        );\n\n        const privateChannelDesc = (\n            <div className='flex-parent'>\n                <LockIcon className='icon icon__lock icon--body type-icon'/>\n                <FormattedMessage\n                    id='channel_modal.privateName'\n                    defaultMessage='Private'\n                />\n                <FormattedMessage\n                    id='channel_modal.privateHint'\n                    defaultMessage=' - Only invited members can join this channel.'\n                />\n            </div>\n        );\n\n        let typeOptions = null;\n        if (enableTypeSelection) {\n            typeOptions = (\n                <fieldset\n                    key='channelType'\n                    className='multi-select__radio'\n                >\n                    <div className='radio'>\n                        <label>\n                            <input\n                                id='public'\n                                type='radio'\n                                name='channelType'\n                                checked={this.props.channelType === 'O'}\n                                onChange={this.handlePublicTypeSelect}\n                            />\n                            {publicChannelDesc}\n                        </label>\n                    </div>\n                    <div className='radio'>\n                        <label>\n                            <input\n                                id='private'\n                                type='radio'\n                                name='channelType'\n                                checked={this.props.channelType === 'P'}\n                                onChange={this.handlePrivateTypeSelect}\n                            />\n                            {privateChannelDesc}\n                        </label>\n                    </div>\n                </fieldset>\n            );\n        } else {\n            typeOptions = (\n                <div className='type-container multi-select__radio'>\n                    <div className='radio'>\n                        {canCreatePublicChannel ? publicChannelDesc : null}\n                        {canCreatePrivateChannel ? privateChannelDesc : null}\n                    </div>\n                </div>\n            );\n        }\n\n        const prettyTeamURL = getShortenedURL();\n\n        return (\n            <span>\n                <Modal\n                    dialogClassName='a11y__modal new-channel__modal new-channel'\n                    show={this.props.show}\n                    bsSize='large'\n                    onHide={this.props.onModalDismissed}\n                    onExited={this.props.onModalExited}\n                    autoFocus={true}\n                    restoreFocus={true}\n                    role='dialog'\n                    aria-labelledby='newChannelModalLabel'\n                >\n                    <Modal.Header>\n                        <button\n                            type='button'\n                            className='close'\n                            onClick={this.props.onModalDismissed}\n                        >\n                            <span aria-hidden='true'>{'×'}</span>\n                            <span className='sr-only'>{'Close'}</span>\n                        </button>\n                        <Modal.Title\n                            componentClass='h1'\n                            id='newChannelModalLabel'\n                        >\n                            <FormattedMessage\n                                id='channel_modal.modalTitle'\n                                defaultMessage='New Channel'\n                            />\n                        </Modal.Title>\n                    </Modal.Header>\n                    <form\n                        role='form'\n                        className='form-horizontal'\n                    >\n                        <Modal.Body>\n                            <div className='form-group'>\n                                <label className='col-sm-3 form__label control-label'>\n                                    <FormattedMessage\n                                        id='channel_modal.type'\n                                        defaultMessage='Type'\n                                    />\n                                </label>\n                                <div className='col-sm-9'>\n                                    {typeOptions}\n                                </div>\n                            </div>\n                            <div className={displayNameClass}>\n                                <label className='col-sm-3 form__label control-label'>\n                                    <FormattedMessage\n                                        id='channel_modal.name'\n                                        defaultMessage='Name'\n                                    />\n                                </label>\n                                <div className='col-sm-9'>\n                                    <LocalizedInput\n                                        id='newChannelName'\n                                        onChange={this.handleChange}\n                                        type='text'\n                                        ref='display_name'\n                                        className='form-control'\n                                        placeholder={{id: t('channel_modal.nameEx'), defaultMessage: 'E.g.: \"Bugs\", \"Marketing\", \"客户支持\"'}}\n                                        maxLength={Constants.MAX_CHANNELNAME_LENGTH}\n                                        value={this.props.channelData.displayName}\n                                        autoFocus={true}\n                                        onKeyDown={this.onEnterKeyDown}\n                                    />\n                                    {displayNameError}\n                                    <p className='input__help dark'>\n                                        {'URL: ' + prettyTeamURL + this.props.channelData.name + ' ('}\n                                        <button\n                                            className='color--link style--none'\n                                            onClick={this.handleOnURLChange}\n                                        >\n                                            <FormattedMessage\n                                                id='channel_modal.edit'\n                                                defaultMessage='Edit'\n                                            />\n                                        </button>\n                                        {')'}\n                                    </p>\n                                </div>\n                            </div>\n                            <div className='form-group'>\n                                <div className='col-sm-3'>\n                                    <label className='form__label control-label'>\n                                        <FormattedMessage\n                                            id='channel_modal.purpose'\n                                            defaultMessage='Purpose'\n                                        />\n                                    </label>\n                                    <label className='form__label light'>\n                                        <FormattedMessage\n                                            id='channel_modal.optional'\n                                            defaultMessage='(optional)'\n                                        />\n                                    </label>\n                                </div>\n                                <div className='col-sm-9'>\n                                    <textarea\n                                        id='newChannelPurpose'\n                                        className='form-control no-resize'\n                                        ref='channel_purpose'\n                                        rows='4'\n                                        placeholder={Utils.localizeMessage('channel_modal.purposeEx', 'E.g.: \"A channel to file bugs and improvements\"')}\n                                        maxLength='250'\n                                        value={this.props.channelData.purpose}\n                                        onChange={this.handleChange}\n                                    />\n                                    <p className='input__help'>\n                                        <FormattedMessage\n                                            id='channel_modal.descriptionHelp'\n                                            defaultMessage='Describe how this channel should be used.'\n                                        />\n                                    </p>\n                                </div>\n                            </div>\n                            <div className='form-group less'>\n                                <div className='col-sm-3'>\n                                    <label className='form__label control-label'>\n                                        <FormattedMessage\n                                            id='channel_modal.header'\n                                            defaultMessage='Header'\n                                        />\n                                    </label>\n                                    <label className='form__label light'>\n                                        <FormattedMessage\n                                            id='channel_modal.optional'\n                                            defaultMessage='(optional)'\n                                        />\n                                    </label>\n                                </div>\n                                <div className='col-sm-9'>\n                                    <textarea\n                                        id='newChannelHeader'\n                                        className='form-control no-resize'\n                                        ref='channel_header'\n                                        rows='4'\n                                        placeholder={Utils.localizeMessage('channel_modal.headerEx', 'E.g.: \"[Link Title](http://example.com)\"')}\n                                        maxLength='1024'\n                                        value={this.props.channelData.header}\n                                        onChange={this.handleChange}\n                                    />\n                                    <p className='input__help'>\n                                        <FormattedMessage\n                                            id='channel_modal.headerHelp'\n                                            defaultMessage='Set text that will appear in the header of the channel beside the channel name. For example, include frequently used links by typing [Link Title](http://example.com).'\n                                        />\n                                    </p>\n                                    {serverError}\n                                </div>\n                            </div>\n                        </Modal.Body>\n                        <Modal.Footer>\n                            <button\n                                id='cancelNewChannel'\n                                type='button'\n                                className='btn btn-link'\n                                onClick={this.props.onModalDismissed}\n                                onBlur={() => document.getElementById('newChannelName').focus()}\n                            >\n                                <FormattedMessage\n                                    id='channel_modal.cancel'\n                                    defaultMessage='Cancel'\n                                />\n                            </button>\n                            <button\n                                id='submitNewChannel'\n                                onClick={this.handleSubmit}\n                                type='submit'\n                                className='btn btn-primary'\n                            >\n                                <FormattedMessage\n                                    id='channel_modal.createNew'\n                                    defaultMessage='Create New Channel'\n                                />\n                            </button>\n                        </Modal.Footer>\n                    </form>\n                </Modal>\n            </span>\n        );\n    }\n}\n","// Copyright (c) 2015-present Mattermost, Inc. All Rights Reserved.\n// See LICENSE.txt for license information.\n\nimport {connect} from 'react-redux';\nimport {Preferences} from 'mattermost-redux/constants';\nimport {getBool} from 'mattermost-redux/selectors/entities/preferences';\nimport {getCurrentTeamId} from 'mattermost-redux/selectors/entities/teams';\n\nimport NewChannelModal from './new_channel_modal.jsx';\n\nfunction mapStateToProps(state) {\n    return {\n        ctrlSend: getBool(state, Preferences.CATEGORY_ADVANCED_SETTINGS, 'send_on_ctrl_enter'),\n        currentTeamId: getCurrentTeamId(state),\n    };\n}\n\nexport default connect(mapStateToProps)(NewChannelModal);\n","// Copyright (c) 2015-present Mattermost, Inc. All Rights Reserved.\n// See LICENSE.txt for license information.\n\nimport PropTypes from 'prop-types';\nimport React from 'react';\nimport {Modal, OverlayTrigger, Tooltip} from 'react-bootstrap';\nimport {FormattedMessage} from 'react-intl';\n\nimport Constants from 'utils/constants';\nimport {getShortenedURL, cleanUpUrlable} from 'utils/url';\nimport {t} from 'utils/i18n';\n\nexport default class ChangeURLModal extends React.PureComponent {\n    static propTypes = {\n\n        /**\n        * Set whether to show the modal or not\n        */\n        show: PropTypes.bool.isRequired,\n\n        /**\n        * Set to change the title of the modal\n        */\n        title: PropTypes.node,\n\n        /**\n        * Set to change the submit button text\n        */\n        submitButtonText: PropTypes.node,\n\n        /**\n        * Set to change the current URL\n        */\n        currentURL: PropTypes.string,\n\n        /**\n        * Set to the current team URL\n        */\n        currentTeamURL: PropTypes.string.isRequired,\n\n        /**\n        * Server error from failed channel creation\n        */\n        serverError: PropTypes.node,\n\n        /**\n         * Function to call when modal is submitted\n         */\n        onModalSubmit: PropTypes.func.isRequired,\n\n        /**\n         * Function to call when modal is exited\n         */\n        onModalExited: PropTypes.func,\n\n        /**\n         * Function to call when modal is dimissed\n         */\n        onModalDismissed: PropTypes.func.isRequired,\n    }\n\n    static defaultProps = {\n        show: false,\n        title: 'Change URL',\n        submitButtonText: 'Save',\n        currentURL: '',\n        serverError: null,\n    }\n\n    constructor(props) {\n        super(props);\n        this.state = {\n            currentURL: props.currentURL,\n            urlError: '',\n            userEdit: false,\n        };\n    }\n\n    UNSAFE_componentWillReceiveProps(nextProps) { // eslint-disable-line camelcase\n        // This check prevents the url being deleted when we re-render\n        // because of user status check\n        if (!this.state.userEdit) {\n            this.setState({\n                currentURL: nextProps.currentURL,\n            });\n        }\n    }\n\n    onURLChanged = (e) => {\n        const url = e.target.value.trim();\n        this.setState({currentURL: url.replace(/[^A-Za-z0-9-_]/g, '').toLowerCase(), userEdit: true});\n    }\n\n    formattedError = (key, id, message) => {\n        return (<span key={key}>\n            <FormattedMessage\n                id={id}\n                defaultMessage={message}\n            />\n            <br/>\n        </span>);\n    }\n\n    getURLError = (url) => {\n        let error = []; //eslint-disable-line prefer-const\n\n        if (url.length < 2) {\n            error.push(\n                this.formattedError('error1', t('change_url.longer'), 'URL must be two or more characters.')\n            );\n        }\n        if (url.charAt(0) === '-' || url.charAt(0) === '_') {\n            error.push(\n                this.formattedError('error2', t('change_url.startWithLetter'), 'URL must start with a letter or number.')\n            );\n        }\n        if (url.length > 1 && (url.charAt(url.length - 1) === '-' || url.charAt(url.length - 1) === '_')) {\n            error.push(\n                this.formattedError('error3', t('change_url.endWithLetter'), 'URL must end with a letter or number.')\n            );\n        }\n        if (url.indexOf('__') > -1) {\n            error.push(\n                this.formattedError('error4', t('change_url.noUnderscore'), 'URL can not contain two underscores in a row.')\n            );\n        }\n\n        // In case of error we don't detect\n        if (error.length === 0) {\n            error.push(\n                this.formattedError('errorlast', t('change_url.invalidUrl'), 'Invalid URL')\n            );\n        }\n        return error;\n    }\n\n    onSubmit = (e) => {\n        e.preventDefault();\n        const url = this.refs.urlinput.value;\n        const cleanedURL = cleanUpUrlable(url);\n        if (cleanedURL !== url || url.length < 2 || url.indexOf('__') > -1) {\n            this.setState({urlError: this.getURLError(url)});\n            return;\n        }\n        this.setState({urlError: '', userEdit: false});\n        this.props.onModalSubmit(url);\n    }\n\n    onCancel = () => {\n        this.setState({urlError: '', userEdit: false});\n        this.props.onModalDismissed();\n    }\n\n    render() {\n        let urlClass = 'input-group input-group--limit';\n        let error = null;\n\n        if (this.state.urlError) {\n            urlClass += ' has-error';\n        }\n\n        if (this.props.serverError || this.state.urlError) {\n            error = (\n                <div className='has-error'>\n                    <p className='input__help error'>\n                        {this.state.urlError || this.props.serverError}\n                    </p>\n                </div>\n            );\n        }\n\n        const fullURL = this.props.currentTeamURL + '/channels';\n        const shortURL = getShortenedURL(fullURL);\n        const urlTooltip = (\n            <Tooltip id='urlTooltip'>{fullURL}</Tooltip>\n        );\n\n        return (\n            <Modal\n                dialogClassName='a11y__modal'\n                show={this.props.show}\n                onHide={this.onCancel}\n                onExited={this.props.onModalExited}\n                role='dialog'\n                aria-labelledby='changeUrlModalLabel'\n            >\n                <Modal.Header closeButton={true}>\n                    <Modal.Title\n                        componentClass='h1'\n                        id='changeUrlModalLabel'\n                    >\n                        {this.props.title}\n                    </Modal.Title>\n                </Modal.Header>\n                <form\n                    role='form'\n                    className='form-horizontal'\n                >\n                    <Modal.Body>\n                        <div className='modal-intro'>\n                            <FormattedMessage\n                                id='channel_flow.changeUrlDescription'\n                                defaultMessage='Some characters are now allowed in URLs and may be removed.'\n                            />\n                        </div>\n                        <div className='form-group'>\n                            <label className='col-sm-3 form__label control-label'>\n                                <FormattedMessage\n                                    id='change_url.urlLabel'\n                                    defaultMessage='Channel URL'\n                                />\n                            </label>\n                            <div className='col-sm-9'>\n                                <div className={urlClass}>\n                                    <OverlayTrigger\n                                        delayShow={Constants.OVERLAY_TIME_DELAY}\n                                        placement='top'\n                                        overlay={urlTooltip}\n                                    >\n                                        <span className='input-group-addon'>{shortURL}</span>\n                                    </OverlayTrigger>\n                                    <input\n                                        type='text'\n                                        ref='urlinput'\n                                        className='form-control'\n                                        maxLength={Constants.MAX_CHANNELNAME_LENGTH}\n                                        onChange={this.onURLChanged}\n                                        value={this.state.currentURL}\n                                        autoFocus={true}\n                                        tabIndex='1'\n                                    />\n                                </div>\n                                {error}\n                            </div>\n                        </div>\n                    </Modal.Body>\n                    <Modal.Footer>\n                        <button\n                            type='button'\n                            className='btn btn-link'\n                            onClick={this.onCancel}\n                        >\n                            <FormattedMessage\n                                id='change_url.close'\n                                defaultMessage='Close'\n                            />\n                        </button>\n                        <button\n                            onClick={this.onSubmit}\n                            type='submit'\n                            className='btn btn-primary'\n                            tabIndex='2'\n                        >\n                            {this.props.submitButtonText}\n                        </button>\n                    </Modal.Footer>\n                </form>\n            </Modal>\n        );\n    }\n}\n","// Copyright (c) 2015-present Mattermost, Inc. All Rights Reserved.\n// See LICENSE.txt for license information.\n\nimport {connect} from 'react-redux';\nimport {getCurrentTeam} from 'mattermost-redux/selectors/entities/teams';\n\nimport {getSiteURL} from 'utils/url';\n\nimport ChangeURLModal from './change_url_modal';\n\nfunction mapStateToProps(state) {\n    const currentTeam = getCurrentTeam(state);\n    const currentTeamURL = `${getSiteURL()}/${currentTeam.name}`;\n    return {\n        currentTeamURL,\n    };\n}\n\nexport default connect(mapStateToProps)(ChangeURLModal);\n","// Copyright (c) 2015-present Mattermost, Inc. All Rights Reserved.\n// See LICENSE.txt for license information.\n\nimport PropTypes from 'prop-types';\nimport React from 'react';\nimport {FormattedMessage} from 'react-intl';\n\nimport {cleanUpUrlable} from 'utils/url';\nimport * as Utils from 'utils/utils';\nimport Constants from 'utils/constants';\nimport NewChannelModal from 'components/new_channel_modal';\nimport ChangeURLModal from 'components/change_url_modal';\n\nexport const SHOW_NEW_CHANNEL = 1;\nexport const SHOW_EDIT_URL = 2;\nexport const SHOW_EDIT_URL_THEN_COMPLETE = 3;\n\nexport default class NewChannelFlow extends React.Component {\n    static propTypes = {\n\n        /**\n        * Set whether to show the modal or not\n        */\n        show: PropTypes.bool.isRequired,\n\n        /**\n        * Set to Constants.OPEN_CHANNEL or Constants.PRIVATE_CHANNEL depending on which modal we should show first\n        */\n        channelType: PropTypes.string.isRequired,\n\n        /**\n        * Function to call when modal is dimissed\n        */\n        onModalDismissed: PropTypes.func.isRequired,\n\n        /**\n        * The current team ID\n        */\n        currentTeamId: PropTypes.string.isRequired,\n\n        /**\n         * Permission to create public channel\n         */\n        canCreatePublicChannel: PropTypes.bool.isRequired,\n\n        /**\n         * Permission to create private channel\n         */\n        canCreatePrivateChannel: PropTypes.bool.isRequired,\n\n        actions: PropTypes.shape({\n            createChannel: PropTypes.func.isRequired,\n            switchToChannel: PropTypes.func.isRequired,\n        }),\n    };\n\n    static defaultProps = {\n        show: false,\n        channelType: Constants.OPEN_CHANNEL,\n    };\n\n    constructor(props) {\n        super(props);\n        this.state = {\n            serverError: '',\n            channelType: props.channelType || Constants.OPEN_CHANNEL,\n            flowState: SHOW_NEW_CHANNEL,\n            channelDisplayName: '',\n            channelName: '',\n            channelPurpose: '',\n            channelHeader: '',\n            nameModified: false,\n        };\n    }\n\n    UNSAFE_componentWillReceiveProps(nextProps) { // eslint-disable-line camelcase\n        // If we are being shown, grab channel type from props and clear\n        if (nextProps.show === true && this.props.show === false) {\n            this.setState({\n                serverError: '',\n                channelType: nextProps.channelType,\n                flowState: SHOW_NEW_CHANNEL,\n                channelDisplayName: '',\n                channelName: '',\n                channelPurpose: '',\n                channelHeader: '',\n                nameModified: false,\n            });\n        }\n    }\n\n    onSubmit = () => {\n        if (!this.state.channelDisplayName) {\n            this.setState({serverError: Utils.localizeMessage('channel_flow.invalidName', 'Invalid Channel Name')});\n            return;\n        }\n\n        if (this.state.channelName.length < 2) {\n            this.setState({flowState: SHOW_EDIT_URL_THEN_COMPLETE});\n            return;\n        }\n\n        const {actions, currentTeamId} = this.props;\n        const channel = {\n            team_id: currentTeamId,\n            name: this.state.channelName,\n            display_name: this.state.channelDisplayName,\n            purpose: this.state.channelPurpose,\n            header: this.state.channelHeader,\n            type: this.state.channelType,\n        };\n\n        actions.createChannel(channel).then((result) => {\n            if (result.error) {\n                this.onCreateChannelError(result.error);\n                return;\n            }\n\n            this.props.onModalDismissed();\n            actions.switchToChannel(result.data);\n        });\n    };\n\n    onCreateChannelError = (err) => {\n        if (err.id === 'model.channel.is_valid.2_or_more.app_error') {\n            this.setState({\n                flowState: SHOW_EDIT_URL_THEN_COMPLETE,\n                serverError: (\n                    <FormattedMessage\n                        id='channel_flow.handleTooShort'\n                        defaultMessage='Channel URL must be 2 or more lowercase alphanumeric characters'\n                    />\n                ),\n            });\n        } else if (err.id === 'store.sql_channel.update.exists.app_error') {\n            this.setState({serverError: Utils.localizeMessage('channel_flow.alreadyExist', 'A channel with that URL already exists')});\n        } else {\n            this.setState({serverError: err.message});\n        }\n    };\n\n    typeSwitched = (channelType) => {\n        this.setState({\n            channelType,\n            serverError: '',\n        });\n    };\n\n    urlChangeRequested = (e) => {\n        if (e) {\n            e.preventDefault();\n        }\n        this.setState({flowState: SHOW_EDIT_URL});\n    };\n\n    urlChangeSubmitted = (newURL) => {\n        if (this.state.flowState === SHOW_EDIT_URL_THEN_COMPLETE) {\n            this.setState({channelName: newURL, nameModified: true}, this.onSubmit);\n        } else {\n            this.setState({flowState: SHOW_NEW_CHANNEL, serverError: null, channelName: newURL, nameModified: true});\n        }\n    };\n\n    urlChangeDismissed = () => {\n        this.setState({flowState: SHOW_NEW_CHANNEL});\n    };\n\n    channelDataChanged = (data) => {\n        this.setState({\n            channelDisplayName: data.displayName,\n            channelPurpose: data.purpose,\n            channelHeader: data.header,\n        });\n        if (!this.state.nameModified) {\n            this.setState({channelName: cleanUpUrlable(data.displayName.trim())});\n        }\n    };\n\n    render() {\n        const channelData = {\n            name: this.state.channelName,\n            displayName: this.state.channelDisplayName,\n            purpose: this.state.channelPurpose,\n            header: this.state.channelHeader,\n        };\n\n        let showChannelModal = false;\n        let showChangeURLModal = false;\n\n        let changeURLTitle = '';\n        let changeURLSubmitButtonText = '';\n\n        // Only listen to flow state if we are being shown\n        if (this.props.show) {\n            switch (this.state.flowState) {\n            case SHOW_NEW_CHANNEL:\n                showChannelModal = true;\n                break;\n            case SHOW_EDIT_URL:\n                showChangeURLModal = true;\n                changeURLTitle = (\n                    <FormattedMessage\n                        id='channel_flow.changeUrlTitle'\n                        defaultMessage='Change Channel URL'\n                    />\n                );\n                changeURLSubmitButtonText = changeURLTitle;\n                break;\n            case SHOW_EDIT_URL_THEN_COMPLETE:\n                showChangeURLModal = true;\n                changeURLTitle = (\n                    <FormattedMessage\n                        id='channel_flow.set_url_title'\n                        defaultMessage='Set Channel URL'\n                    />\n                );\n                changeURLSubmitButtonText = (\n                    <FormattedMessage\n                        id='channel_flow.create'\n                        defaultMessage='Create Channel'\n                    />\n                );\n                break;\n            }\n        }\n        return (\n            <span>\n                <NewChannelModal\n                    show={showChannelModal}\n                    channelType={this.state.channelType}\n                    canCreatePublicChannel={this.props.canCreatePublicChannel}\n                    canCreatePrivateChannel={this.props.canCreatePrivateChannel}\n                    channelData={channelData}\n                    serverError={this.state.serverError}\n                    onSubmitChannel={this.onSubmit}\n                    onModalDismissed={this.props.onModalDismissed}\n                    onTypeSwitched={this.typeSwitched}\n                    onChangeURLPressed={this.urlChangeRequested}\n                    onDataChanged={this.channelDataChanged}\n                />\n                <ChangeURLModal\n                    show={showChangeURLModal}\n                    title={changeURLTitle}\n                    submitButtonText={changeURLSubmitButtonText}\n                    currentURL={this.state.channelName}\n                    serverError={this.state.serverError}\n                    onModalSubmit={this.urlChangeSubmitted}\n                    onModalDismissed={this.urlChangeDismissed}\n                />\n            </span>\n        );\n    }\n}\n","// Copyright (c) 2015-present Mattermost, Inc. All Rights Reserved.\n// See LICENSE.txt for license information.\n\nimport {connect} from 'react-redux';\nimport {bindActionCreators} from 'redux';\n\nimport {createChannel} from 'mattermost-redux/actions/channels';\nimport {getCurrentTeamId} from 'mattermost-redux/selectors/entities/teams';\n\nimport {switchToChannel} from 'actions/views/channel';\n\nimport NewChannelFlow from './new_channel_flow.jsx';\n\nfunction mapStateToProps(state) {\n    return {\n        currentTeamId: getCurrentTeamId(state),\n    };\n}\n\nfunction mapDispatchToProps(dispatch) {\n    return {\n        actions: bindActionCreators({\n            createChannel,\n            switchToChannel,\n        }, dispatch),\n    };\n}\n\nexport default connect(mapStateToProps, mapDispatchToProps)(NewChannelFlow);\n","// Copyright (c) 2015-present Mattermost, Inc. All Rights Reserved.\n// See LICENSE.txt for license information.\n\nimport React from 'react';\nimport {FormattedMessage} from 'react-intl';\n\nexport default class UnreadBelowIcon extends React.PureComponent {\n    render() {\n        return (\n            <span {...this.props}>\n                <FormattedMessage\n                    id='generic_icons.arrow.down'\n                    defaultMessage='Down Arrow Icon'\n                >\n                    {(ariaLabel) => (\n                        <svg\n                            width='10px'\n                            height='10px'\n                            viewBox='0 0 10 10'\n                            style={style}\n                            role='icon'\n                            aria-label={ariaLabel}\n                        >\n                            <g transform='matrix(1,0,0,1,-20,-18)'>\n                                <g transform='matrix(0.0330723,0,0,0.0322634,15.8132,12.3164)'>\n                                    <path d='M245.803,377.493C245.803,377.493 204.794,336.485 179.398,311.088C168.55,300.24 150.962,300.24 140.114,311.088C138.327,312.875 136.517,314.686 134.73,316.473C123.882,327.321 123.882,344.908 134.73,355.756C167.972,388.998 233.949,454.975 256.949,477.975C262.158,483.184 269.223,486.111 276.591,486.111C277.38,486.111 278.176,486.111 278.965,486.111C286.332,486.111 293.397,483.184 298.607,477.975C321.607,454.975 387.584,388.998 420.826,355.756C431.674,344.908 431.674,327.321 420.826,316.473C419.039,314.686 417.228,312.875 415.441,311.088C404.593,300.24 387.005,300.24 376.158,311.088C350.761,336.485 309.753,377.493 309.753,377.493C309.753,377.493 309.753,279.687 309.753,203.94C309.753,196.573 306.826,189.508 301.617,184.298C296.408,179.089 289.342,176.162 281.975,176.162C279.191,176.162 276.364,176.162 273.58,176.162C266.213,176.162 259.148,179.089 253.939,184.298C248.729,189.508 245.803,196.573 245.803,203.94L245.803,377.493Z'/>\n                                </g>\n                            </g>\n                        </svg>\n                    )}\n                </FormattedMessage>\n            </span>\n        );\n    }\n}\n\nconst style = {\n    fillRule: 'evenodd',\n    clipRule: 'evenodd',\n    strokeLinejoin: 'round',\n    strokeMiterlimit: 1.41421,\n};\n","// Copyright (c) 2015-present Mattermost, Inc. All Rights Reserved.\n// See LICENSE.txt for license information.\n\nimport PropTypes from 'prop-types';\nimport React from 'react';\n\nimport UnreadBelowIcon from 'components/svg/unread_below_icon';\n\nexport default class UnreadChannelIndicator extends React.PureComponent {\n    static propTypes = {\n\n        /**\n         * Function to call when the indicator is clicked\n         */\n        onClick: PropTypes.func.isRequired,\n\n        /**\n         * Set whether to show the indicator or not\n         */\n        show: PropTypes.bool,\n\n        /**\n         * The additional CSS class for the indicator\n         */\n        extraClass: PropTypes.string,\n\n        /**\n         * The content of the indicator\n         */\n        content: PropTypes.node,\n\n        /**\n         * The name of the indicator\n         */\n        name: PropTypes.string,\n    };\n\n    static defaultProps = {\n        show: false,\n        extraClass: '',\n        content: '',\n    };\n\n    render() {\n        let displayValue = 'none';\n        if (this.props.show) {\n            displayValue = 'block';\n        }\n\n        return (\n            <div\n                id={'unreadIndicator' + this.props.name}\n                className={'nav-pills__unread-indicator ' + this.props.extraClass}\n                style={{display: displayValue}}\n                onClick={this.props.onClick}\n            >\n                {this.props.content}\n                <UnreadBelowIcon className='icon icon__unread'/>\n            </div>\n        );\n    }\n}\n","// Copyright (c) 2015-present Mattermost, Inc. All Rights Reserved.\n// See LICENSE.txt for license information.\n\nimport PropTypes from 'prop-types';\nimport React from 'react';\nimport {FormattedMessage} from 'react-intl';\n\nimport {UserStatuses, ModalIdentifiers} from 'utils/constants.jsx';\nimport {localizeMessage} from 'utils/utils.jsx';\nimport ResetStatusModal from 'components/reset_status_modal';\nimport StatusIcon from 'components/status_icon.jsx';\n\nimport Menu from 'components/widgets/menu/menu';\nimport MenuWrapper from 'components/widgets/menu/menu_wrapper';\nimport MenuGroup from 'components/widgets/menu/menu_group';\nimport MenuItemAction from 'components/widgets/menu/menu_items/menu_item_action';\n\nexport default class StatusDropdown extends React.Component {\n    static propTypes = {\n        style: PropTypes.object,\n        status: PropTypes.string,\n        userId: PropTypes.string.isRequired,\n        profilePicture: PropTypes.string,\n        autoResetPref: PropTypes.string,\n        actions: PropTypes.shape({\n            openModal: PropTypes.func.isRequired,\n            setStatus: PropTypes.func.isRequired,\n        }).isRequired,\n    }\n\n    static defaultProps = {\n        userId: '',\n        profilePicture: '',\n        status: UserStatuses.OFFLINE,\n    }\n\n    isUserOutOfOffice = () => {\n        return this.props.status === UserStatuses.OUT_OF_OFFICE;\n    }\n\n    setStatus = (status) => {\n        this.props.actions.setStatus({\n            user_id: this.props.userId,\n            status,\n        });\n    }\n\n    setOnline = (event) => {\n        event.preventDefault();\n        this.setStatus(UserStatuses.ONLINE);\n    }\n\n    setOffline = (event) => {\n        event.preventDefault();\n        this.setStatus(UserStatuses.OFFLINE);\n    }\n\n    setAway = (event) => {\n        event.preventDefault();\n        this.setStatus(UserStatuses.AWAY);\n    }\n\n    setDnd = (event) => {\n        event.preventDefault();\n        this.setStatus(UserStatuses.DND);\n    }\n\n    showStatusChangeConfirmation = (status) => {\n        const resetStatusModalData = {\n            ModalId: ModalIdentifiers.RESET_STATUS,\n            dialogType: ResetStatusModal,\n            dialogProps: {newStatus: status},\n        };\n\n        this.props.actions.openModal(resetStatusModalData);\n    };\n\n    renderProfilePicture = () => {\n        if (!this.props.profilePicture) {\n            return null;\n        }\n        return (\n            <img\n                alt={''}\n                className='user__picture'\n                src={this.props.profilePicture}\n            />\n        );\n    }\n\n    renderDropdownIcon = () => {\n        return (\n            <FormattedMessage\n                id='generic_icons.dropdown'\n                defaultMessage='Dropdown Icon'\n            >\n                { (title) => (\n                    <i\n                        className={'fa fa-caret-down'}\n                        title={title}\n                    />)\n                }\n            </FormattedMessage>\n        );\n    }\n\n    render() {\n        const needsConfirm = this.isUserOutOfOffice() && this.props.autoResetPref === '';\n        const profilePicture = this.renderProfilePicture();\n        const dropdownIcon = this.renderDropdownIcon();\n\n        const setOnline = needsConfirm ? () => this.showStatusChangeConfirmation('online') : this.setOnline;\n        const setDnd = needsConfirm ? () => this.showStatusChangeConfirmation('dnd') : this.setDnd;\n        const setAway = needsConfirm ? () => this.showStatusChangeConfirmation('away') : this.setAway;\n        const setOffline = needsConfirm ? () => this.showStatusChangeConfirmation('offline') : this.setOffline;\n\n        return (\n            <MenuWrapper\n                onToggle={this.onToggle}\n                style={this.props.style}\n            >\n                <div className='status-wrapper status-selector'>\n                    {profilePicture}\n                    <button\n                        className='status style--none'\n                        aria-label={localizeMessage('status_dropdown.menuAriaLabel', 'set status')}\n                    >\n                        <StatusIcon\n                            status={this.props.status}\n                            button={true}\n                        />\n                    </button>\n                    <span className={'status status-edit edit'}>\n                        {dropdownIcon}\n                    </span>\n                </div>\n                <Menu ariaLabel={localizeMessage('status_dropdown.menuAriaLabel', 'set status')}>\n                    <MenuGroup>\n                        <MenuItemAction\n                            show={this.isUserOutOfOffice()}\n                            onClick={() => null}\n                            ariaLabel={localizeMessage('status_dropdown.set_ooo', 'Out of office').toLowerCase()}\n                            text={localizeMessage('status_dropdown.set_ooo', 'Out of office')}\n                            extraText={localizeMessage('status_dropdown.set_ooo.extra', 'Automatic Replies are enabled')}\n                        />\n                    </MenuGroup>\n                    <MenuGroup>\n                        <MenuItemAction\n                            onClick={setOnline}\n                            ariaLabel={localizeMessage('status_dropdown.set_online', 'Online').toLowerCase()}\n                            text={localizeMessage('status_dropdown.set_online', 'Online')}\n                        />\n                        <MenuItemAction\n                            onClick={setAway}\n                            ariaLabel={localizeMessage('status_dropdown.set_away', 'Away').toLowerCase()}\n                            text={localizeMessage('status_dropdown.set_away', 'Away')}\n                        />\n                        <MenuItemAction\n                            onClick={setDnd}\n                            ariaLabel={`${localizeMessage('status_dropdown.set_dnd', 'Do not disturb').toLowerCase()}. ${localizeMessage('status_dropdown.set_dnd.extra', 'Disables Desktop and Push Notifications').toLowerCase()}`}\n                            text={localizeMessage('status_dropdown.set_dnd', 'Do not disturb')}\n                            extraText={localizeMessage('status_dropdown.set_dnd.extra', 'Disables Desktop and Push Notifications')}\n                        />\n                        <MenuItemAction\n                            onClick={setOffline}\n                            ariaLabel={localizeMessage('status_dropdown.set_offline', 'Offline').toLowerCase()}\n                            text={localizeMessage('status_dropdown.set_offline', 'Offline')}\n                        />\n                    </MenuGroup>\n                </Menu>\n            </MenuWrapper>\n        );\n    }\n}\n","// Copyright (c) 2015-present Mattermost, Inc. All Rights Reserved.\n// See LICENSE.txt for license information.\n\nimport {connect} from 'react-redux';\nimport {bindActionCreators} from 'redux';\nimport {setStatus} from 'mattermost-redux/actions/users';\nimport {Client4} from 'mattermost-redux/client';\nimport {getCurrentUser, getStatusForUserId} from 'mattermost-redux/selectors/entities/users';\nimport {Preferences} from 'mattermost-redux/constants';\nimport {get} from 'mattermost-redux/selectors/entities/preferences';\n\nimport {openModal} from 'actions/views/modals';\n\nimport StatusDropdown from 'components/status_dropdown/status_dropdown.jsx';\n\nfunction mapStateToProps(state) {\n    const currentUser = getCurrentUser(state);\n\n    if (!currentUser) {\n        return {};\n    }\n\n    const userId = currentUser.id;\n    return {\n        userId,\n        profilePicture: Client4.getProfilePictureUrl(userId, currentUser.last_picture_update),\n        autoResetPref: get(state, Preferences.CATEGORY_AUTO_RESET_MANUAL_STATUS, userId, ''),\n        status: getStatusForUserId(state, userId),\n    };\n}\n\nfunction mapDispatchToProps(dispatch) {\n    return {\n        actions: bindActionCreators({\n            openModal,\n            setStatus,\n        }, dispatch),\n    };\n}\n\nexport default connect(mapStateToProps, mapDispatchToProps)(StatusDropdown);\n","// Copyright (c) 2015-present Mattermost, Inc. All Rights Reserved.\n// See LICENSE.txt for license information.\n\nimport PropTypes from 'prop-types';\nimport React from 'react';\nimport {OverlayTrigger, Tooltip} from 'react-bootstrap';\nimport {FormattedMessage} from 'react-intl';\n\nimport {localizeMessage} from 'utils/utils.jsx';\nimport MenuIcon from 'components/svg/menu_icon';\nimport Constants from 'utils/constants.jsx';\n\nimport MenuTutorialTip from 'components/tutorial/menu_tutorial_tip';\n\nexport default class SidebarHeaderDropdownButton extends React.PureComponent {\n    static propTypes = {\n        showTutorialTip: PropTypes.bool.isRequired,\n        teamDescription: PropTypes.string.isRequired,\n        teamId: PropTypes.string.isRequired,\n        currentUser: PropTypes.object.isRequired,\n        teamDisplayName: PropTypes.string.isRequired,\n    };\n\n    render() {\n        const mainMenuToolTip = (\n            <Tooltip id='main-menu__tooltip'>\n                <FormattedMessage\n                    id='sidebar.mainMenu'\n                    defaultMessage='Main menu'\n                />\n            </Tooltip>\n        );\n\n        let tutorialTip = null;\n        if (this.props.showTutorialTip) {\n            tutorialTip = (\n                <MenuTutorialTip onBottom={false}/>\n            );\n        }\n\n        let teamNameWithToolTip = (\n            <h1\n                id='headerTeamName'\n                className='team__name'\n                data-teamid={this.props.teamId}\n            >\n                {this.props.teamDisplayName}\n            </h1>\n        );\n        if (this.props.teamDescription) {\n            teamNameWithToolTip = (\n                <OverlayTrigger\n                    delayShow={Constants.OVERLAY_TIME_DELAY}\n                    placement='bottom'\n                    overlay={<Tooltip id='team-name__tooltip'>{this.props.teamDescription}</Tooltip>}\n                    ref='descriptionOverlay'\n                >\n                    {teamNameWithToolTip}\n                </OverlayTrigger>\n            );\n        }\n\n        return (\n            <div\n                className='SidebarHeaderDropdownButton'\n                id='sidebarHeaderDropdownButton'\n            >\n                {tutorialTip}\n                <OverlayTrigger\n                    delayShow={Constants.OVERLAY_TIME_DELAY}\n                    placement='right'\n                    overlay={mainMenuToolTip}\n                >\n                    <div\n                        id='headerInfo'\n                        className='header__info'\n                    >\n                        {teamNameWithToolTip}\n                        <div\n                            id='headerUsername'\n                            className='user__name'\n                        >\n                            {'@' + this.props.currentUser.username}\n                        </div>\n                        <button\n                            className='style--none sidebar-header-dropdown__icon'\n                            aria-label={localizeMessage('navbar_dropdown.menuAriaLabel', 'main menu')}\n                        >\n                            <MenuIcon/>\n                        </button>\n                    </div>\n                </OverlayTrigger>\n            </div>\n        );\n    }\n}\n","// Copyright (c) 2015-present Mattermost, Inc. All Rights Reserved.\n// See LICENSE.txt for license information.\n\nimport PropTypes from 'prop-types';\nimport React from 'react';\n\nimport * as GlobalActions from 'actions/global_actions.jsx';\nimport {Constants, ModalIdentifiers} from 'utils/constants.jsx';\nimport {cmdOrCtrlPressed, isKeyPressed} from 'utils/utils';\n\nimport SidebarHeaderDropdownButton from '../sidebar_header_dropdown_button.jsx';\n\nimport UserSettingsModal from 'components/user_settings/modal';\n\nimport MenuWrapper from 'components/widgets/menu/menu_wrapper.jsx';\n\nimport MainMenu from 'components/main_menu';\n\nexport default class SidebarHeaderDropdown extends React.PureComponent {\n    static propTypes = {\n        teamDescription: PropTypes.string.isRequired,\n        teamDisplayName: PropTypes.string.isRequired,\n        teamId: PropTypes.string.isRequired,\n        currentUser: PropTypes.object,\n        showTutorialTip: PropTypes.bool.isRequired,\n        actions: PropTypes.shape({\n            openModal: PropTypes.func.isRequred,\n        }).isRequired,\n    };\n\n    static defaultProps = {\n        teamType: '',\n        pluginMenuItems: [],\n    };\n\n    toggleShortcutsModal = (e) => {\n        e.preventDefault();\n        GlobalActions.toggleShortcutsModal();\n    }\n\n    showGetTeamInviteLinkModal = (e) => {\n        e.preventDefault();\n        GlobalActions.showGetTeamInviteLinkModal();\n    }\n\n    componentDidMount() {\n        document.addEventListener('keydown', this.handleKeyDown);\n    }\n\n    componentWillUnmount() {\n        document.removeEventListener('keydown', this.handleKeyDown);\n    }\n\n    handleKeyDown = (e) => {\n        if (cmdOrCtrlPressed(e) && e.shiftKey && isKeyPressed(e, Constants.KeyCodes.A)) {\n            this.props.actions.openModal({ModalId: ModalIdentifiers.USER_SETTINGS, dialogType: UserSettingsModal});\n        }\n    }\n\n    handleEmitUserLoggedOutEvent = () => {\n        GlobalActions.emitUserLoggedOutEvent();\n    }\n\n    render() {\n        const currentUser = this.props.currentUser;\n\n        if (!currentUser) {\n            return null;\n        }\n\n        return (\n            <MenuWrapper>\n                <SidebarHeaderDropdownButton\n                    showTutorialTip={this.props.showTutorialTip}\n                    teamDescription={this.props.teamDescription}\n                    currentUser={this.props.currentUser}\n                    teamDisplayName={this.props.teamDisplayName}\n                    teamId={this.props.teamId}\n                />\n                <MainMenu id='sidebarDropdownMenu'/>\n            </MenuWrapper>\n        );\n    }\n}\n","// Copyright (c) 2015-present Mattermost, Inc. All Rights Reserved.\n// See LICENSE.txt for license information.\n\nimport {connect} from 'react-redux';\nimport {bindActionCreators} from 'redux';\n\nimport {getCurrentTeam} from 'mattermost-redux/selectors/entities/teams';\nimport {getCurrentUser} from 'mattermost-redux/selectors/entities/users';\nimport {getInt} from 'mattermost-redux/selectors/entities/preferences';\n\nimport {openModal} from 'actions/views/modals';\n\nimport {Preferences, TutorialSteps} from 'utils/constants.jsx';\nimport * as Utils from 'utils/utils.jsx';\n\nimport SidebarHeaderDropdown from './sidebar_header_dropdown.jsx';\n\nfunction mapStateToProps(state) {\n    const currentTeam = getCurrentTeam(state);\n    const currentUser = getCurrentUser(state);\n    const showTutorialTip = getInt(state, Preferences.TUTORIAL_STEP, currentUser.id) === TutorialSteps.MENU_POPOVER && !Utils.isMobile();\n    return {\n        currentUser,\n        teamDescription: currentTeam.description,\n        teamDisplayName: currentTeam.display_name,\n        teamId: currentTeam.id,\n        showTutorialTip,\n    };\n}\n\nfunction mapDispatchToProps(dispatch) {\n    return {\n        actions: bindActionCreators({\n            openModal,\n        }, dispatch),\n    };\n}\n\nexport default connect(mapStateToProps, mapDispatchToProps)(SidebarHeaderDropdown);\n","// Copyright (c) 2015-present Mattermost, Inc. All Rights Reserved.\n// See LICENSE.txt for license information.\n\nimport React from 'react';\n\nimport * as Utils from 'utils/utils.jsx';\nimport StatusDropdown from 'components/status_dropdown/index.jsx';\n\nimport SidebarHeaderDropdown from './dropdown';\n\nexport default class SidebarHeader extends React.PureComponent {\n    constructor(props) {\n        super(props);\n        this.state = {\n            isMobile: Utils.isMobile(),\n        };\n    }\n\n    componentDidMount() {\n        window.addEventListener('resize', this.handleResize);\n    }\n\n    componentWillUnmount() {\n        window.removeEventListener('resize', this.handleResize);\n    }\n\n    handleResize = () => {\n        const isMobile = Utils.isMobile();\n        this.setState({isMobile});\n    }\n\n    render() {\n        const ariaLabel = Utils.localizeMessage('accessibility.sections.lhsHeader', 'team menu region');\n\n        return (\n            <div\n                id='lhsHeader'\n                aria-label={ariaLabel}\n                tabIndex='-1'\n                role='application'\n                className='SidebarHeader team__header theme a11y__region'\n                data-a11y-sort-order='5'\n            >\n                <div\n                    className='d-flex'\n                >\n                    {!this.state.isMobile && <StatusDropdown/>}\n                    <SidebarHeaderDropdown/>\n                </div>\n            </div>\n        );\n    }\n}\n","// Copyright (c) 2015-present Mattermost, Inc. All Rights Reserved.\n// See LICENSE.txt for license information.\n\nimport {connect} from 'react-redux';\nimport {getConfig} from 'mattermost-redux/selectors/entities/general';\nimport {getCurrentUser} from 'mattermost-redux/selectors/entities/users';\nimport {getInt} from 'mattermost-redux/selectors/entities/preferences';\n\nimport {Preferences, TutorialSteps} from 'utils/constants.jsx';\nimport * as Utils from 'utils/utils.jsx';\n\nimport SidebarHeader from './sidebar_header.jsx';\n\nfunction mapStateToProps(state) {\n    const config = getConfig(state);\n    const currentUser = getCurrentUser(state);\n\n    const enableTutorial = config.EnableTutorial === 'true';\n\n    const showTutorialTip = getInt(state, Preferences.TUTORIAL_STEP, currentUser.id) === TutorialSteps.MENU_POPOVER && !Utils.isMobile();\n\n    return {\n        enableTutorial,\n        showTutorialTip,\n    };\n}\n\nexport default connect(mapStateToProps)(SidebarHeader);\n","// Copyright (c) 2015-present Mattermost, Inc. All Rights Reserved.\n// See LICENSE.txt for license information.\n\nimport React from 'react';\nimport {FormattedMessage} from 'react-intl';\n\nexport default class BotIcon extends React.PureComponent {\n    render() {\n        return (\n            <span {...this.props}>\n                <FormattedMessage\n                    id='generic_icons.bot'\n                    defaultMessage='Bot Icon'\n                >\n                    {(ariaLabel) => (\n                        <svg\n                            width='16'\n                            height='13'\n                            viewBox='0 0 36 30'\n                            role='icon'\n                            aria-label={ariaLabel}\n                        >\n                            <path d='M0,15.7391304 L0,23.0434783 C0,24.0535326 0.786888587,24.8695652 1.76086957,24.8695652 L3.52173913,24.8695652 L3.52173913,13.9130435 L1.76086957,13.9130435 C0.786888587,13.9130435 0,14.7290761 0,15.7391304 Z M26.0496894,6.50271739 L19.7888199,6.50271739 L19.7888199,2.83423913 C19.7888199,1.81967561 18.989441,1 18,1 C17.010559,1 16.2111801,1.81967561 16.2111801,2.83423913 L16.2111801,6.50271739 L9.95031056,6.50271739 C7.47950311,6.50271739 5.47826087,8.55477242 5.47826087,11.0883152 L5.47826087,26.6793478 C5.47826087,28.7027429 7.0826087,30.3478261 9.05590062,30.3478261 L26.9440994,30.3478261 C28.9173913,30.3478261 30.5217391,28.7027429 30.5217391,26.6793478 L30.5217391,11.0883152 C30.5217391,8.55477242 28.5204969,6.50271739 26.0496894,6.50271739 Z M14.4782609,24.8695652 L10.9565217,24.8695652 L10.9565217,22.9130435 L14.4782609,22.9130435 L14.4782609,24.8695652 Z M12.5217391,17.826087 C11.2245652,17.826087 10.173913,16.7754348 10.173913,15.4782609 C10.173913,14.181087 11.2245652,13.1304348 12.5217391,13.1304348 C13.818913,13.1304348 14.8695652,14.181087 14.8695652,15.4782609 C14.8695652,16.7754348 13.818913,17.826087 12.5217391,17.826087 Z M19.9565217,24.8695652 L16.4347826,24.8695652 L16.4347826,22.9130435 L19.9565217,22.9130435 L19.9565217,24.8695652 Z M25.0434783,24.8695652 L21.5217391,24.8695652 L21.5217391,22.9130435 L25.0434783,22.9130435 L25.0434783,24.8695652 Z M23.2826087,17.826087 C22.0935326,17.826087 21.1304348,16.7754348 21.1304348,15.4782609 C21.1304348,14.181087 22.0935326,13.1304348 23.2826087,13.1304348 C24.4716848,13.1304348 25.4347826,14.181087 25.4347826,15.4782609 C25.4347826,16.7754348 24.4716848,17.826087 23.2826087,17.826087 Z M34.2391304,13.9130435 L32.4782609,13.9130435 L32.4782609,24.8695652 L34.2391304,24.8695652 C35.2131114,24.8695652 36,24.0535326 36,23.0434783 L36,15.7391304 C36,14.7290761 35.2131114,13.9130435 34.2391304,13.9130435 Z'/>\n                        </svg>\n                    )}\n                </FormattedMessage>\n            </span>\n        );\n    }\n}\n","// Copyright (c) 2015-present Mattermost, Inc. All Rights Reserved.\n// See LICENSE.txt for license information.\n\nimport React from 'react';\nimport PropTypes from 'prop-types';\n\nimport {Constants} from 'utils/constants.jsx';\n\nimport ArchiveIcon from 'components/svg/archive_icon';\nimport DraftIcon from 'components/svg/draft_icon';\nimport GlobeIcon from 'components/svg/globe_icon';\nimport LockIcon from 'components/svg/lock_icon';\nimport StatusIcon from 'components/status_icon.jsx';\nimport BotIcon from 'components/svg/bot_icon.jsx';\n\nexport default class SidebarChannelButtonOrLinkIcon extends React.PureComponent {\n    static propTypes = {\n        channelIsArchived: PropTypes.bool.isRequired,\n        channelType: PropTypes.string.isRequired,\n        channelStatus: PropTypes.string,\n        hasDraft: PropTypes.bool.isRequired,\n        membersCount: PropTypes.number,\n        teammateId: PropTypes.string,\n        teammateDeletedAt: PropTypes.number,\n        teammateIsBot: PropTypes.bool,\n    };\n\n    render() {\n        let icon = null;\n        if (this.props.channelIsArchived) {\n            icon = (\n                <ArchiveIcon className='icon icon__archive'/>\n            );\n        } else if (this.props.hasDraft) {\n            icon = (\n                <DraftIcon className='icon icon__draft'/>\n            );\n        } else if (this.props.channelType === Constants.OPEN_CHANNEL) {\n            icon = (\n                <GlobeIcon className='icon icon__globe'/>\n            );\n        } else if (this.props.channelType === Constants.PRIVATE_CHANNEL) {\n            icon = (\n                <LockIcon className='icon icon__lock'/>\n            );\n        } else if (this.props.channelType === Constants.GM_CHANNEL) {\n            icon = <div className='status status--group'>{this.props.membersCount}</div>;\n        } else if (this.props.channelType === Constants.DM_CHANNEL) {\n            if (this.props.teammateId && this.props.teammateDeletedAt) {\n                icon = (\n                    <ArchiveIcon className='icon icon__archive'/>\n                );\n            } else if (this.props.teammateId && this.props.teammateIsBot) {\n                icon = (\n                    <BotIcon className='icon icon__bot'/>\n                );\n            } else {\n                icon = (\n                    <StatusIcon\n                        type='avatar'\n                        status={this.props.channelStatus}\n                    />\n                );\n            }\n        }\n        return icon;\n    }\n}\n","// Copyright (c) 2015-present Mattermost, Inc. All Rights Reserved.\n// See LICENSE.txt for license information.\n\nimport React from 'react';\nimport {OverlayTrigger, Tooltip} from 'react-bootstrap';\nimport {FormattedMessage} from 'react-intl';\nimport PropTypes from 'prop-types';\n\nimport {Constants} from 'utils/constants.jsx';\n\nexport default class SidebarChannelButtonOrLinkCloseButton extends React.PureComponent {\n    static propTypes = {\n        handleClose: PropTypes.func,\n        channelId: PropTypes.string.isRequired,\n        channelType: PropTypes.string.isRequired,\n        teammateId: PropTypes.string,\n        badge: PropTypes.bool,\n    }\n\n    handleClose = (e) => {\n        e.stopPropagation();\n        e.preventDefault();\n        this.props.handleClose();\n    }\n\n    render() {\n        let closeButton = null;\n\n        if (this.props.handleClose && !this.props.badge) {\n            let removeTooltip = (\n                <Tooltip id='remove-dm-tooltip'>\n                    <FormattedMessage\n                        id='sidebar.removeList'\n                        defaultMessage='Remove from list'\n                    />\n                </Tooltip>\n            );\n\n            if (this.props.channelType === Constants.OPEN_CHANNEL || this.props.channelType === Constants.PRIVATE_CHANNEL) {\n                removeTooltip = (\n                    <Tooltip id='remove-dm-tooltip'>\n                        <FormattedMessage\n                            id='sidebar.leave'\n                            defaultMessage='Leave channel'\n                        />\n                    </Tooltip>\n                );\n            }\n\n            closeButton = (\n                <OverlayTrigger\n                    delayShow={1000}\n                    placement='top'\n                    overlay={removeTooltip}\n                >\n                    <span\n                        onClick={this.handleClose}\n                        className='btn-close'\n                    >\n                        {'×'}\n                    </span>\n                </OverlayTrigger>\n            );\n        }\n        return closeButton;\n    }\n}\n","// Copyright (c) 2015-present Mattermost, Inc. All Rights Reserved.\n// See LICENSE.txt for license information.\n\nimport React from 'react';\nimport PropTypes from 'prop-types';\nimport {Link} from 'react-router-dom';\nimport {OverlayTrigger, Tooltip} from 'react-bootstrap';\n\nimport {localizeMessage} from 'utils/utils.jsx';\nimport {browserHistory} from 'utils/browser_history';\nimport {mark, trackEvent} from 'actions/diagnostics_actions.jsx';\nimport {isDesktopApp} from 'utils/user_agent.jsx';\nimport Constants from 'utils/constants.jsx';\nimport CopyUrlContextMenu from 'components/copy_url_context_menu';\n\nimport SidebarChannelButtonOrLinkIcon from './sidebar_channel_button_or_link_icon.jsx';\nimport SidebarChannelButtonOrLinkCloseButton from './sidebar_channel_button_or_link_close_button.jsx';\n\nexport default class SidebarChannelButtonOrLink extends React.PureComponent {\n    static propTypes = {\n        link: PropTypes.string.isRequired,\n        rowClass: PropTypes.string.isRequired,\n        channelType: PropTypes.string.isRequired,\n        channelId: PropTypes.string.isRequired,\n        channelName: PropTypes.string.isRequired,\n        displayName: PropTypes.string.isRequired,\n        channelStatus: PropTypes.string,\n        handleClose: PropTypes.func,\n        hasDraft: PropTypes.bool.isRequired,\n        badge: PropTypes.bool,\n        membersCount: PropTypes.number.isRequired,\n        showUnreadForMsgs: PropTypes.bool.isRequired,\n        unreadMsgs: PropTypes.number.isRequired,\n        unreadMentions: PropTypes.number.isRequired,\n        teammateId: PropTypes.string,\n        teammateDeletedAt: PropTypes.number,\n        teammateIsBot: PropTypes.bool,\n        channelIsArchived: PropTypes.bool.isRequired,\n    }\n\n    constructor(props) {\n        super(props);\n        this.gmItemRef = React.createRef();\n    }\n\n    trackChannelSelectedEvent = () => {\n        mark('SidebarChannelLink#click');\n        trackEvent('ui', 'ui_channel_selected');\n    }\n\n    handleClick = () => {\n        this.trackChannelSelectedEvent();\n        browserHistory.push(this.props.link);\n    }\n\n    removeTooltipLink = () => {\n        // Bootstrap adds the attr dynamically, removing it to prevent a11y readout\n        this.gmItemRef.current.removeAttribute('aria-describedby');\n    }\n\n    render = () => {\n        let badge = null;\n        if (this.props.badge) {\n            badge = (\n                <span\n                    id='unreadMentions'\n                    className='badge'\n                >\n                    {this.props.unreadMentions}\n                </span>\n            );\n        }\n\n        const content = (\n            <React.Fragment>\n                <SidebarChannelButtonOrLinkIcon\n                    channelStatus={this.props.channelStatus}\n                    channelType={this.props.channelType}\n                    channelIsArchived={this.props.channelIsArchived}\n                    hasDraft={this.props.hasDraft}\n                    membersCount={this.props.membersCount}\n                    teammateId={this.props.teammateId}\n                    teammateDeletedAt={this.props.teammateDeletedAt}\n                    teammateIsBot={this.props.teammateIsBot}\n                />\n                <span className='sidebar-item__name'>\n                    <span>{this.props.displayName}</span>\n                </span>\n                {badge}\n                <SidebarChannelButtonOrLinkCloseButton\n                    handleClose={this.props.handleClose}\n                    channelId={this.props.channelId}\n                    channelType={this.props.channelType}\n                    teammateId={this.props.teammateId}\n                    badge={this.props.badge}\n                />\n            </React.Fragment>\n        );\n\n        let element;\n        let ariaLabel = this.props.displayName;\n\n        if (this.props.channelType === Constants.OPEN_CHANNEL) {\n            ariaLabel += ` ${localizeMessage('accessibility.sidebar.types.public', 'public channel')}`;\n        } else if (this.props.channelType === Constants.PRIVATE_CHANNEL) {\n            ariaLabel += ` ${localizeMessage('accessibility.sidebar.types.private', 'private channel')}`;\n        }\n\n        if (this.props.unreadMentions === 1) {\n            ariaLabel += ` ${this.props.unreadMentions} ${localizeMessage('accessibility.sidebar.types.mention', 'mention')}`;\n        } else if (this.props.unreadMentions > 1) {\n            ariaLabel += ` ${this.props.unreadMentions} ${localizeMessage('accessibility.sidebar.types.mentions', 'mentions')}`;\n        }\n\n        if (this.props.unreadMsgs > 0 && this.props.showUnreadForMsgs && this.props.unreadMentions === 0) {\n            ariaLabel += ` ${localizeMessage('accessibility.sidebar.types.unread', 'unread')}`;\n        }\n\n        ariaLabel = ariaLabel.toLowerCase();\n\n        if (isDesktopApp()) {\n            element = (\n                <div>\n                    <CopyUrlContextMenu\n                        link={this.props.link}\n                        menuId={this.props.channelId}\n                    >\n                        <button\n                            className={'btn btn-link ' + this.props.rowClass}\n                            aria-label={ariaLabel}\n                            onClick={this.handleClick}\n                        >\n                            {content}\n                        </button>\n                    </CopyUrlContextMenu>\n                </div>\n            );\n        } else {\n            element = (\n                <Link\n                    id={`sidebarItem_${this.props.channelName}`}\n                    aria-label={ariaLabel}\n                    to={this.props.link}\n                    className={this.props.rowClass}\n                    onClick={this.trackChannelSelectedEvent}\n                >\n                    {content}\n                </Link>\n            );\n        }\n\n        if (this.props.channelType === Constants.GM_CHANNEL) {\n            const displayNameToolTip = (\n                <Tooltip\n                    id='channel-displayname__tooltip'\n                    style={style.channelTooltip}\n                >\n                    {this.props.displayName}\n                </Tooltip>\n            );\n            element = (\n                <OverlayTrigger\n                    delayShow={Constants.OVERLAY_TIME_DELAY}\n                    placement='top'\n                    overlay={displayNameToolTip}\n                    onEntering={this.removeTooltipLink}\n                >\n                    <div ref={this.gmItemRef}>\n                        {element}\n                    </div>\n                </OverlayTrigger>\n            );\n        }\n        return element;\n    }\n}\n\nconst style = {\n    channelTooltip: {\n        paddingLeft: '8px',\n        maxWidth: '228px'},\n};\n","// Copyright (c) 2015-present Mattermost, Inc. All Rights Reserved.\n// See LICENSE.txt for license information.\n\nimport React from 'react';\nimport PropTypes from 'prop-types';\nimport {FormattedMessage} from 'react-intl';\n\nimport {Constants} from 'utils/constants.jsx';\nimport TutorialTip from 'components/tutorial/tutorial_tip';\n\nimport FormattedMarkdownMessage from 'components/formatted_markdown_message.jsx';\n\nexport default class SidebarTutorialTip extends React.PureComponent {\n    static propTypes = {\n        townSquareDisplayName: PropTypes.string,\n        offTopicDisplayName: PropTypes.string,\n    }\n\n    render = () => {\n        const screens = [];\n\n        let townSquareDisplayName = Constants.DEFAULT_CHANNEL_UI_NAME;\n        if (this.props.townSquareDisplayName) {\n            townSquareDisplayName = this.props.townSquareDisplayName;\n        }\n\n        let offTopicDisplayName = Constants.OFFTOPIC_CHANNEL_UI_NAME;\n        if (this.props.offTopicDisplayName) {\n            offTopicDisplayName = this.props.offTopicDisplayName;\n        }\n\n        screens.push(\n            <div>\n                <h4>\n                    <FormattedMessage\n                        id='sidebar.tutorialScreen1.title'\n                        defaultMessage='Channels'\n                    />\n                </h4>\n                <p>\n                    <FormattedMarkdownMessage\n                        id='sidebar.tutorialScreen1.body'\n                        defaultMessage={'**Channels** organize conversations across different topics. They\\'re open to everyone on your team. To send private communications use **Direct Messages** for a single person or **Private Channels** for multiple people.'}\n                    />\n                </p>\n            </div>\n        );\n\n        screens.push(\n            <div>\n                <h4>\n                    <FormattedMessage\n                        id='sidebar.tutorialScreen2.title'\n                        defaultMessage='\"{townsquare}\" and \"{offtopic}\" channels'\n                        values={{\n                            townsquare: townSquareDisplayName,\n                            offtopic: offTopicDisplayName,\n                        }}\n                    />\n                </h4>\n                <p>\n                    <FormattedMessage\n                        id='sidebar.tutorialScreen2.body1'\n                        defaultMessage='Here are two public channels to start:'\n                    />\n                </p>\n                <p>\n                    <FormattedMarkdownMessage\n                        id='sidebar.tutorialScreen2.body2'\n                        defaultMessage='**{townsquare}** is a place for team-wide communication. Everyone in your team is a member of this channel.'\n                        values={{\n                            townsquare: townSquareDisplayName,\n                        }}\n                    />\n                </p>\n                <p>\n                    <FormattedMarkdownMessage\n                        id='sidebar.tutorialScreen2.body3'\n                        defaultMessage='**{offtopic}** is a place for fun and humor outside of work-related channels. You and your team can decide what other channels to create.'\n                        values={{\n                            offtopic: offTopicDisplayName,\n                        }}\n                    />\n                </p>\n            </div>\n        );\n\n        screens.push(\n            <div>\n                <h4>\n                    <FormattedMessage\n                        id='sidebar.tutorialScreen3.title'\n                        defaultMessage='Creating and Joining Channels'\n                    />\n                </h4>\n                <p>\n                    <FormattedMarkdownMessage\n                        id='sidebar.tutorialScreen3.body1'\n                        defaultMessage='Click **\"More...\"** to create a new channel or join an existing one.'\n                    />\n                </p>\n                <p>\n                    <FormattedMarkdownMessage\n                        id='sidebar.tutorialScreen3.body2'\n                        defaultMessage='You can also create a new channel by clicking the **\"+\" symbol** next to the public or private channel header.'\n                    />\n                </p>\n            </div>\n        );\n\n        return (\n            <TutorialTip\n                placement='right'\n                screens={screens}\n                overlayClass='tip-overlay--sidebar'\n                diagnosticsTag='tutorial_tip_2_channels'\n            />\n        );\n    }\n}\n\n","// Copyright (c) 2015-present Mattermost, Inc. All Rights Reserved.\n// See LICENSE.txt for license information.\n\nimport React from 'react';\nimport {intlShape} from 'react-intl';\nimport PropTypes from 'prop-types';\n\nimport {browserHistory} from 'utils/browser_history';\nimport {Constants} from 'utils/constants.jsx';\nimport {trackEvent} from 'actions/diagnostics_actions.jsx';\nimport * as GlobalActions from 'actions/global_actions.jsx';\nimport SidebarChannelButtonOrLink from '../sidebar_channel_button_or_link/sidebar_channel_button_or_link.jsx';\nimport SidebarTutorialTip from '../sidebar_tutorial_tip.jsx';\n\nexport default class SidebarChannel extends React.PureComponent {\n    static propTypes = {\n\n        /**\n         * Global config object\n         */\n        config: PropTypes.object.isRequired,\n\n        /**\n         * Channel id\n         */\n        channelId: PropTypes.string.isRequired,\n\n        /**\n         * Channel name\n         */\n        channelName: PropTypes.string.isRequired,\n\n        /**\n         * Channel display name\n         */\n        channelDisplayName: PropTypes.string.isRequired,\n\n        /**\n         * Channel is muted\n         */\n        channelMuted: PropTypes.bool,\n\n        /**\n         * Channel type\n         */\n        channelType: PropTypes.string.isRequired,\n\n        /**\n         * Channel status\n         */\n        channelStatus: PropTypes.string,\n\n        /**\n         * Channel is fake\n         */\n        channelFake: PropTypes.bool,\n\n        /**\n         * Serialized channel information (for fake channels)\n         */\n        channelStringified: PropTypes.string,\n\n        /**\n         * Teammate id (for direct messages)\n         */\n        channelTeammateId: PropTypes.string,\n\n        /**\n         * Teammate username (for direct messages)\n         */\n        channelTeammateUsername: PropTypes.string,\n\n        /**\n         * Teammate delete at date (for direct messages)\n         */\n        channelTeammateDeletedAt: PropTypes.number,\n\n        /**\n         * Teammate is_bot (for direct messages)\n         */\n        channelTeammateIsBot: PropTypes.bool,\n\n        /**\n         * Whether the channel contains a draft in the center channel\n         */\n        hasDraft: PropTypes.bool.isRequired,\n\n        /**\n         * Whether or not to mark the channel as unread when it has unread messages and no mentions\n         */\n        showUnreadForMsgs: PropTypes.bool.isRequired,\n\n        /**\n         * Number of unread messages\n         */\n        unreadMsgs: PropTypes.number.isRequired,\n\n        /**\n         * Number of unread mentions\n         */\n        unreadMentions: PropTypes.number.isRequired,\n\n        /**\n         * Set if the channel is the current active channel\n         */\n        active: PropTypes.bool.isRequired,\n\n        /**\n         * Current team name\n         */\n        currentTeamName: PropTypes.string.isRequired,\n\n        /**\n         * Current user id\n         */\n        currentUserId: PropTypes.string.isRequired,\n\n        /**\n         * Set if the tutorial must be shown\n         */\n        showTutorialTip: PropTypes.bool.isRequired,\n\n        /**\n         * TownSquare (default channel) display name\n         */\n        townSquareDisplayName: PropTypes.string,\n\n        /**\n         * OffTopic (default channel) display name\n         */\n        offTopicDisplayName: PropTypes.string,\n\n        /**\n         * Number of members\n         */\n        membersCount: PropTypes.number.isRequired,\n\n        /**\n         * Flag if channel should be hidden in sidebar\n         */\n        shouldHideChannel: PropTypes.bool.isRequired,\n\n        channelIsArchived: PropTypes.bool.isRequired,\n\n        redirectChannel: PropTypes.string.isRequired,\n\n        actions: PropTypes.shape({\n            savePreferences: PropTypes.func.isRequired,\n            leaveChannel: PropTypes.func.isRequired,\n            openLhs: PropTypes.func.isRequired,\n        }).isRequired,\n    }\n\n    static contextTypes = {\n        intl: intlShape.isRequired,\n    }\n\n    isLeaving = false;\n\n    handleLeavePublicChannel = () => {\n        this.props.actions.leaveChannel(this.props.channelId);\n        trackEvent('ui', 'ui_public_channel_x_button_clicked');\n    }\n\n    handleLeavePrivateChannel = () => {\n        GlobalActions.showLeavePrivateChannelModal({id: this.props.channelId, display_name: this.props.channelDisplayName});\n        trackEvent('ui', 'ui_private_channel_x_button_clicked');\n    }\n\n    handleLeaveDirectChannel = () => {\n        if (!this.isLeaving) {\n            this.isLeaving = true;\n\n            let id;\n            let category;\n            if (this.props.channelType === Constants.DM_CHANNEL) {\n                id = this.props.channelTeammateId;\n                category = Constants.Preferences.CATEGORY_DIRECT_CHANNEL_SHOW;\n            } else {\n                id = this.props.channelId;\n                category = Constants.Preferences.CATEGORY_GROUP_CHANNEL_SHOW;\n            }\n\n            const currentUserId = this.props.currentUserId;\n            this.props.actions.savePreferences(currentUserId, [{user_id: currentUserId, category, name: id, value: 'false'}]).then(\n                () => {\n                    this.isLeaving = false;\n                }\n            );\n\n            trackEvent('ui', 'ui_direct_channel_x_button_clicked');\n        }\n\n        if (this.props.active) {\n            browserHistory.push(`/${this.props.currentTeamName}/channels/${this.props.redirectChannel}`);\n        }\n    }\n\n    showChannelAsUnread = () => {\n        return this.props.unreadMentions > 0 || (this.props.unreadMsgs > 0 && this.props.showUnreadForMsgs);\n    };\n\n    render = () => {\n        if (this.props.channelIsArchived && !this.props.active) {\n            return null;\n        }\n        if (!this.props.channelDisplayName || !this.props.channelType) {\n            return (<div/>);\n        }\n\n        let closeHandler = null;\n        if (!this.showChannelAsUnread()) {\n            if (this.props.shouldHideChannel) {\n                return '';\n            }\n            if (this.props.channelType === Constants.DM_CHANNEL || this.props.channelType === Constants.GM_CHANNEL) {\n                closeHandler = this.handleLeaveDirectChannel;\n            } else if (this.props.config.EnableXToLeaveChannelsFromLHS === 'true') {\n                if (this.props.channelType === Constants.OPEN_CHANNEL && this.props.channelName !== Constants.DEFAULT_CHANNEL) {\n                    closeHandler = this.handleLeavePublicChannel;\n                } else if (this.props.channelType === Constants.PRIVATE_CHANNEL) {\n                    closeHandler = this.handleLeavePrivateChannel;\n                }\n            }\n        }\n\n        let linkClass = '';\n        if (this.props.active) {\n            linkClass = 'active';\n        }\n\n        let rowClass = 'sidebar-item';\n        let badge = false;\n        if (this.showChannelAsUnread()) {\n            rowClass += ' unread-title';\n        }\n\n        if (this.props.unreadMentions > 0) {\n            rowClass += ' has-badge';\n\n            badge = true;\n        }\n\n        if (this.props.channelMuted) {\n            rowClass += ' muted';\n        }\n\n        if (closeHandler && !badge) {\n            rowClass += ' has-close';\n        }\n\n        let tutorialTip = null;\n        if (this.props.showTutorialTip && this.props.channelName === Constants.DEFAULT_CHANNEL) {\n            tutorialTip = (\n                <SidebarTutorialTip\n                    townSquareDisplayName={this.props.townSquareDisplayName}\n                    offTopicDisplayName={this.props.offTopicDisplayName}\n                />\n            );\n            this.props.actions.openLhs();\n        }\n\n        let link = '';\n        if (this.props.channelFake) {\n            link = `/${this.props.currentTeamName}/channels/${this.props.channelName}?fakechannel=${encodeURIComponent(this.props.channelStringified)}`;\n        } else if (this.props.channelType === Constants.DM_CHANNEL) {\n            link = `/${this.props.currentTeamName}/messages/@${this.props.channelTeammateUsername}`;\n        } else if (this.props.channelType === Constants.GM_CHANNEL) {\n            link = `/${this.props.currentTeamName}/messages/${this.props.channelName}`;\n        } else {\n            link = `/${this.props.currentTeamName}/channels/${this.props.channelName}`;\n        }\n\n        let displayName = '';\n        if (this.props.currentUserId === this.props.channelTeammateId) {\n            displayName = this.context.intl.formatMessage({\n                id: 'sidebar.directchannel.you',\n                defaultMessage: '{displayname} (you)',\n            }, {\n                displayname: this.props.channelDisplayName,\n            });\n        } else {\n            displayName = this.props.channelDisplayName;\n        }\n\n        return (\n            <li\n                key={this.props.channelName}\n                ref={'channel'}\n                className={linkClass}\n            >\n                <SidebarChannelButtonOrLink\n                    link={link}\n                    rowClass={rowClass}\n                    channelId={this.props.channelId}\n                    channelName={this.props.channelName}\n                    channelStatus={this.props.channelStatus}\n                    channelType={this.props.channelType}\n                    displayName={displayName}\n                    handleClose={closeHandler}\n                    hasDraft={this.props.hasDraft}\n                    badge={badge}\n                    showUnreadForMsgs={this.props.showUnreadForMsgs}\n                    unreadMentions={this.props.unreadMentions}\n                    unreadMsgs={this.props.unreadMsgs}\n                    membersCount={this.props.membersCount}\n                    teammateId={this.props.channelTeammateId}\n                    teammateDeletedAt={this.props.channelTeammateDeletedAt}\n                    teammateIsBot={this.props.channelTeammateIsBot}\n                    channelIsArchived={this.props.channelIsArchived}\n                />\n                {tutorialTip}\n            </li>\n        );\n    }\n}\n","// Copyright (c) 2015-present Mattermost, Inc. All Rights Reserved.\n// See LICENSE.txt for license information.\n\nimport {connect} from 'react-redux';\nimport {bindActionCreators} from 'redux';\n\nimport {savePreferences} from 'mattermost-redux/actions/preferences';\n\nimport {\n    getCurrentChannelId,\n    getChannelsNameMapInCurrentTeam,\n    makeGetChannel,\n    shouldHideDefaultChannel,\n    getRedirectChannelNameForTeam,\n} from 'mattermost-redux/selectors/entities/channels';\nimport {getMyChannelMemberships} from 'mattermost-redux/selectors/entities/common';\nimport {getCurrentTeamId} from 'mattermost-redux/selectors/entities/teams';\nimport {getUserIdsInChannels, getUser} from 'mattermost-redux/selectors/entities/users';\nimport {getInt, getTeammateNameDisplaySetting} from 'mattermost-redux/selectors/entities/preferences';\nimport {getConfig} from 'mattermost-redux/selectors/entities/general';\nimport {isChannelMuted, isFavoriteChannel} from 'mattermost-redux/utils/channel_utils';\n\nimport {displayUsername} from 'mattermost-redux/utils/user_utils';\n\nimport {Constants, NotificationLevels, StoragePrefixes} from 'utils/constants.jsx';\n\nimport {leaveChannel} from 'actions/views/channel';\nimport {open as openLhs} from 'actions/views/lhs.js';\nimport {getPostDraft} from 'selectors/rhs';\n\nimport SidebarChannel from './sidebar_channel.jsx';\n\nfunction makeMapStateToProps() {\n    const getChannel = makeGetChannel();\n\n    return (state, ownProps) => {\n        const channelId = ownProps.channelId;\n\n        const config = getConfig(state);\n        const currentChannelId = getCurrentChannelId(state);\n        const channel = getChannel(state, {id: channelId}) || {};\n        const draft = channel.id ? getPostDraft(state, StoragePrefixes.DRAFT, channel.id) : false;\n\n        const enableTutorial = config.EnableTutorial === 'true';\n        const tutorialStep = getInt(state, Constants.Preferences.TUTORIAL_STEP, ownProps.currentUserId, Constants.TutorialSteps.FINISHED);\n        const channelsByName = getChannelsNameMapInCurrentTeam(state);\n        const memberIds = getUserIdsInChannels(state);\n\n        let membersCount = 0;\n        if (memberIds && memberIds[channel.id]) {\n            membersCount = memberIds[channel.id].size;\n            if (memberIds[channel.id].has(ownProps.currentUserId)) {\n                membersCount--;\n            }\n        }\n\n        const member = getMyChannelMemberships(state)[channelId];\n\n        let unreadMentions = 0;\n        let unreadMsgs = 0;\n        let showUnreadForMsgs = true;\n        if (member) {\n            unreadMentions = member.mention_count;\n\n            if (channel) {\n                unreadMsgs = Math.max(channel.total_msg_count - member.msg_count, 0);\n            }\n\n            if (member.notify_props) {\n                showUnreadForMsgs = member.notify_props.mark_unread !== NotificationLevels.MENTION;\n            }\n        }\n\n        const teammateNameDisplay = getTeammateNameDisplaySetting(state);\n        let teammate = null;\n        let channelTeammateId = '';\n        let channelTeammateDeletedAt = 0;\n        let channelTeammateUsername = '';\n        let channelTeammateIsBot = false;\n        let channelDisplayName = channel.display_name;\n        if (channel.type === Constants.DM_CHANNEL) {\n            teammate = getUser(state, channel.teammate_id);\n            if (teammate) {\n                channelTeammateId = teammate.id;\n                channelTeammateDeletedAt = teammate.delete_at;\n                channelTeammateUsername = teammate.username;\n                channelTeammateIsBot = teammate.is_bot;\n            }\n\n            channelDisplayName = displayUsername(teammate, teammateNameDisplay, false);\n        }\n\n        let shouldHideChannel = false;\n        if (\n            channel.name === Constants.DEFAULT_CHANNEL &&\n            !ownProps.active &&\n            shouldHideDefaultChannel(state, channel) &&\n            !isFavoriteChannel(state.entities.preferences.myPreferences, channel.id)\n        ) {\n            shouldHideChannel = true;\n        }\n\n        return {\n            config,\n            channelId,\n            channelName: channel.name,\n            channelDisplayName,\n            channelType: channel.type,\n            channelStatus: channel.status,\n            channelFake: channel.fake,\n            channelMuted: isChannelMuted(member),\n            channelStringified: channel.fake && JSON.stringify(channel),\n            channelTeammateId,\n            channelTeammateUsername,\n            channelTeammateDeletedAt,\n            channelTeammateIsBot,\n            hasDraft: draft && Boolean(draft.message.trim() || draft.fileInfos.length || draft.uploadsInProgress.length) && currentChannelId !== channel.id,\n            showTutorialTip: enableTutorial && tutorialStep === Constants.TutorialSteps.CHANNEL_POPOVER,\n            townSquareDisplayName: channelsByName[Constants.DEFAULT_CHANNEL] && channelsByName[Constants.DEFAULT_CHANNEL].display_name,\n            offTopicDisplayName: channelsByName[Constants.OFFTOPIC_CHANNEL] && channelsByName[Constants.OFFTOPIC_CHANNEL].display_name,\n            showUnreadForMsgs,\n            unreadMsgs,\n            unreadMentions,\n            membersCount,\n            shouldHideChannel,\n            channelIsArchived: channel.delete_at !== 0,\n            redirectChannel: getRedirectChannelNameForTeam(state, getCurrentTeamId(state)),\n        };\n    };\n}\n\nfunction mapDispatchToProps(dispatch) {\n    return {\n        actions: bindActionCreators({\n            savePreferences,\n            leaveChannel,\n            openLhs,\n        }, dispatch),\n    };\n}\n\nexport default connect(makeMapStateToProps, mapDispatchToProps, null, {withRef: true})(SidebarChannel);\n","// Copyright (c) 2015-present Mattermost, Inc. All Rights Reserved.\n// See LICENSE.txt for license information.\n\nimport React from 'react';\nimport {OverlayTrigger, Tooltip} from 'react-bootstrap';\nimport {FormattedMessage} from 'react-intl';\nimport {PropTypes} from 'prop-types';\n\nimport * as Utils from 'utils/utils.jsx';\n\nexport default class ChannelCreate extends React.PureComponent {\n    static propTypes = {\n        sectionType: PropTypes.string.isRequired,\n        createPublicChannel: PropTypes.func.isRequired,\n        createPrivateChannel: PropTypes.func.isRequired,\n        createDirectMessage: PropTypes.func.isRequired,\n        createPublicDirectChannel: PropTypes.func.isRequired,\n        canCreatePublicChannel: PropTypes.bool.isRequired,\n        canCreatePrivateChannel: PropTypes.bool.isRequired,\n    };\n\n    renderPublic = () => {\n        if (!this.props.canCreatePublicChannel) {\n            return null;\n        }\n\n        const ariaLabelPublic = `${Utils.localizeMessage('sidebar.createChannel', 'Create new public channel').toLowerCase()}`;\n\n        const tooltip = (\n            <Tooltip id='new-channel-tooltip' >\n                <FormattedMessage\n                    id='sidebar.createChannel'\n                    defaultMessage='Create new public channel'\n                />\n            </Tooltip>\n        );\n\n        return (\n            <button\n                id='createPublicChannel'\n                aria-label={ariaLabelPublic}\n                type='button'\n                className='add-channel-btn cursor--pointer style--none'\n                onClick={this.props.createPublicChannel}\n            >\n                <OverlayTrigger\n                    delayShow={500}\n                    placement='top'\n                    overlay={tooltip}\n                >\n                    <span>{'+'}</span>\n                </OverlayTrigger>\n            </button>\n        );\n    };\n\n    renderPrivate = () => {\n        if (!this.props.canCreatePrivateChannel) {\n            return null;\n        }\n\n        const ariaLabelPrivate = `${Utils.localizeMessage('sidebar.createGroup', 'Create new private channel').toLowerCase()}`;\n\n        const tooltip = (\n            <Tooltip id='new-group-tooltip'>\n                <FormattedMessage\n                    id='sidebar.createGroup'\n                    defaultMessage='Create new private channel'\n                />\n            </Tooltip>\n        );\n\n        return (\n            <button\n                id='createPrivateChannel'\n                aria-label={ariaLabelPrivate}\n                type='button'\n                className='add-channel-btn cursor--pointer style--none'\n                onClick={this.props.createPrivateChannel}\n            >\n                <OverlayTrigger\n                    delayShow={500}\n                    placement='top'\n                    overlay={tooltip}\n                >\n                    <span>{'+'}</span>\n                </OverlayTrigger>\n            </button>\n        );\n    };\n\n    renderDirect = () => {\n        const ariaLabelDM = Utils.localizeMessage('sidebar.createDirectMessage', 'Create new direct message').toLowerCase();\n        const tooltip = (\n            <Tooltip\n                id='new-group-tooltip'\n                className='hidden-xs'\n            >\n                <FormattedMessage\n                    id='sidebar.createDirectMessage'\n                    defaultMessage='Create new direct message'\n                />\n            </Tooltip>\n        );\n\n        return (\n            <button\n                id='addDirectChannel'\n                aria-label={ariaLabelDM}\n                className='add-channel-btn cursor--pointer style--none'\n                onClick={this.props.createDirectMessage}\n            >\n                <OverlayTrigger\n                    className='hidden-xs'\n                    delayShow={500}\n                    placement='top'\n                    overlay={tooltip}\n                >\n                    <span>{'+'}</span>\n                </OverlayTrigger>\n            </button>\n        );\n    };\n\n    renderCombined = () => {\n        const {canCreatePublicChannel, canCreatePrivateChannel} = this.props;\n\n        if (canCreatePublicChannel && !canCreatePrivateChannel) {\n            return this.renderPublic();\n        }\n\n        if (canCreatePrivateChannel && !canCreatePublicChannel) {\n            return this.renderPrivate();\n        }\n\n        if (!canCreatePublicChannel && !canCreatePrivateChannel) {\n            return null;\n        }\n\n        const tooltip = (\n            <Tooltip\n                id='new-group-tooltip'\n                className='hidden-xs'\n            >\n                <FormattedMessage\n                    id='sidebar.createPublicPrivateChannel'\n                    defaultMessage='Create new public or private channel'\n                />\n            </Tooltip>\n        );\n\n        return (\n            <button\n                type='button'\n                className='add-channel-btn cursor--pointer style--none'\n                onClick={this.props.createPublicDirectChannel}\n            >\n                <OverlayTrigger\n                    className='hidden-xs'\n                    delayShow={500}\n                    placement='top'\n                    overlay={tooltip}\n                >\n                    <span>{'+'}</span>\n                </OverlayTrigger>\n            </button>\n        );\n    };\n\n    render() {\n        const {sectionType} = this.props;\n\n        switch (sectionType) {\n        case 'public':\n            return this.renderPublic();\n        case 'private':\n            return this.renderPrivate();\n        case 'direct':\n            return this.renderDirect();\n        case 'recent':\n        case 'alpha':\n            return this.renderCombined();\n        }\n\n        return null;\n    }\n}\n","// Copyright (c) 2015-present Mattermost, Inc. All Rights Reserved.\n// See LICENSE.txt for license information.\n\nimport React from 'react';\nimport {FormattedMessage, intlShape} from 'react-intl';\nimport {PropTypes} from 'prop-types';\n\nexport default class ChannelMore extends React.PureComponent {\n    static propTypes = {\n        sectionType: PropTypes.string.isRequired,\n        moreChannels: PropTypes.func.isRequired,\n        moreDirectMessages: PropTypes.func.isRequired,\n        browsePublicDirectChannels: PropTypes.func.isRequired,\n    };\n\n    static contextTypes = {\n        intl: intlShape,\n    };\n\n    render() {\n        const {\n            sectionType,\n            moreChannels,\n            moreDirectMessages,\n            browsePublicDirectChannels,\n        } = this.props;\n\n        const {formatMessage} = this.context.intl;\n\n        switch (sectionType) {\n        case 'public':\n            return (\n                <li\n                    key='public-channel-more'\n                    id='morePublicButton'\n                >\n                    <button\n                        id='sidebarChannelsMore'\n                        aria-label={formatMessage({id: 'sidebar.morePublicAria', defaultMessage: 'more public channels'})}\n                        className='nav-more cursor--pointer style--none btn--block'\n                        onClick={moreChannels}\n                    >\n                        <FormattedMessage\n                            id='sidebar.moreElips'\n                            defaultMessage='More...'\n                        />\n                    </button>\n                </li>\n            );\n        case 'direct':\n            return (\n                <li\n                    key='dm-more'\n                    id='moreDMButton'\n                >\n                    <button\n                        id='moreDirectMessage'\n                        aria-label={formatMessage({id: 'sidebar.moreDmAria', defaultMessage: 'more direct messages'})}\n                        className='nav-more cursor--pointer style--none btn--block'\n                        onClick={moreDirectMessages}\n                    >\n                        <FormattedMessage\n                            id='sidebar.moreElips'\n                            defaultMessage='More...'\n                        />\n                    </button>\n                </li>\n            );\n        case 'recent':\n        case 'alpha':\n            return (\n                <li\n                    key='public-dm-more'\n                    id='moreRecentAlphaButton'\n                >\n                    <button\n                        id='morePublicDirectChannels'\n                        aria-label={formatMessage({id: 'sidebar.morePublicDmAria', defaultMessage: 'more public channels direct messages'})}\n                        className='nav-more cursor--pointer style--none btn--block'\n                        onClick={browsePublicDirectChannels}\n                    >\n                        <FormattedMessage\n                            id='sidebar.moreElips'\n                            defaultMessage='More...'\n                        />\n                    </button>\n                </li>\n            );\n        }\n\n        return null;\n    }\n}\n","// Copyright (c) 2015-present Mattermost, Inc. All Rights Reserved.\n// See LICENSE.txt for license information.\n\nimport React from 'react';\nimport {FormattedMessage} from 'react-intl';\nimport {OverlayTrigger, Tooltip} from 'react-bootstrap';\nimport {PropTypes} from 'prop-types';\n\nimport * as Utils from 'utils/utils.jsx';\nimport {t} from 'utils/i18n';\n\nconst clickableChannelHeader = ['recent', 'alpha'];\n\nexport default class ChannelName extends React.PureComponent {\n    static propTypes = {\n        sectionType: PropTypes.string.isRequired,\n        channelName: PropTypes.string.isRequired,\n        browsePublicDirectChannels: PropTypes.func.isRequired,\n    };\n\n    sectionTypeFormatMessageId = (sectionType) => {\n        switch (sectionType) {\n        case 'public':\n            return t('sidebar.types.public');\n        case 'private':\n            return t('sidebar.types.private');\n        case 'direct':\n            return t('sidebar.types.direct');\n        case 'favorite':\n            return t('sidebar.types.favorite');\n        case 'unreads':\n            return t('sidebar.types.unreads');\n        case 'recent':\n            return t('sidebar.types.recent');\n        default:\n            return t('sidebar.types.alpha');\n        }\n    }\n\n    render() {\n        const {sectionType, channelName, browsePublicDirectChannels} = this.props;\n\n        let tooltipTriggers = ['hover', 'focus'];\n\n        if (Utils.isMobile()) {\n            tooltipTriggers = [];\n        }\n\n        const formattedMessageId = this.sectionTypeFormatMessageId(sectionType);\n        let name = (\n            <FormattedMessage\n                id={formattedMessageId}\n                defaultMessage={channelName}\n            />\n        );\n\n        if (clickableChannelHeader.indexOf(sectionType) !== -1) {\n            const createPublicDirectChannelTooltip = (\n                <Tooltip\n                    id='new-group-tooltip'\n                    className='hidden-xs'\n                >\n                    <FormattedMessage\n                        id='sidebar.browseChannelDirectChannel'\n                        defaultMessage='Browse Channels and Direct Messages'\n                    />\n                </Tooltip>\n            );\n\n            name = (\n                <OverlayTrigger\n                    trigger={tooltipTriggers}\n                    delayShow={500}\n                    placement='top'\n                    overlay={createPublicDirectChannelTooltip}\n                >\n                    <div\n                        role='presentation'\n                        className='public_direct_name'\n                        onClick={browsePublicDirectChannels}\n                    >\n                        {name}\n                    </div>\n                </OverlayTrigger>\n            );\n        }\n\n        return name;\n    }\n}\n","// Copyright (c) 2015-present Mattermost, Inc. All Rights Reserved.\n// See LICENSE.txt for license information.\n\nimport PropTypes from 'prop-types';\nimport React from 'react';\nimport {Modal, Tabs, Tab} from 'react-bootstrap';\nimport {FormattedMessage} from 'react-intl';\n\nimport MorePublicChannels from 'components/more_channels';\nimport MoreDirectMessages from 'components/more_direct_channels';\n\nimport {localizeMessage} from 'utils/utils';\n\nexport default class MorePublicDirectChannels extends React.PureComponent {\n    static propTypes = {\n        handleNewChannel: PropTypes.func,\n        onModalDismissed: PropTypes.func,\n    };\n\n    state = {\n        show: true,\n        key: 'channels',\n    };\n\n    handleHide = () => {\n        this.setState({show: false});\n    };\n\n    handleExit = () => {\n        if (this.props.onModalDismissed) {\n            this.props.onModalDismissed();\n        }\n    };\n\n    handleSelect = (key) => {\n        this.setState({key});\n    }\n\n    render() {\n        return (\n            <Modal\n                dialogClassName='a11y__modal more-modal more-direct-channels more-public-direct-channels'\n                show={this.state.show}\n                onHide={this.handleHide}\n                onExited={this.handleExit}\n                role='dialog'\n                aria-labelledby='morePublicModalLabel'\n            >\n                <Modal.Header closeButton={true}>\n                    <Modal.Title\n                        componentClass='h1'\n                        id='morePublicModalLabel'\n                    >\n                        <FormattedMessage\n                            id='more_public_direct_channels.title'\n                            defaultMessage='Channels and Direct Messages'\n                        />\n                    </Modal.Title>\n                </Modal.Header>\n                <Modal.Body>\n                    <Tabs\n                        id='morePublicDirectChannelTabs'\n                        className='modal-tabs'\n                        defaultActiveKey='channels'\n                        activeKey={this.state.key}\n                        onSelect={this.handleSelect}\n                        unmountOnExit={true}\n                    >\n                        <Tab\n                            eventKey='channels'\n                            title={localizeMessage('more_public_direct_channels.channels', 'Channels')}\n                        >\n                            <MorePublicChannels\n                                handleNewChannel={this.props.handleNewChannel}\n                                onModalDismissed={this.handleHide}\n                                bodyOnly={true}\n                            />\n                        </Tab>\n                        <Tab\n                            eventKey='dm'\n                            title={localizeMessage('more_public_direct_channels.direct_messages', 'Direct Messages')}\n                        >\n                            <MoreDirectMessages\n                                onModalDismissed={this.handleHide}\n                                isExistingChannel={false}\n                                bodyOnly={true}\n                            />\n                        </Tab>\n                    </Tabs>\n                </Modal.Body>\n            </Modal>\n        );\n    }\n}\n","// Copyright (c) 2015-present Mattermost, Inc. All Rights Reserved.\n// See LICENSE.txt for license information.\n\nimport $ from 'jquery';\nimport React from 'react';\nimport ReactDOM from 'react-dom';\nimport {FormattedMessage} from 'react-intl';\nimport {PropTypes} from 'prop-types';\nimport classNames from 'classnames';\n\nimport Scrollbars from 'react-custom-scrollbars';\nimport {SpringSystem, MathUtil} from 'rebound';\n\nimport {trackEvent} from 'actions/diagnostics_actions.jsx';\nimport {redirectUserToDefaultTeam} from 'actions/global_actions';\nimport * as ChannelUtils from 'utils/channel_utils.jsx';\nimport {Constants, ModalIdentifiers, SidebarChannelGroups} from 'utils/constants.jsx';\nimport * as Utils from 'utils/utils.jsx';\nimport {t} from 'utils/i18n';\nimport favicon from 'images/favicon/favicon-16x16.png';\nimport redFavicon from 'images/favicon/redfavicon-16x16.png';\nimport MoreChannels from 'components/more_channels';\nimport MoreDirectChannels from 'components/more_direct_channels';\nimport QuickSwitchModal from 'components/quick_switch_modal';\nimport NewChannelFlow from 'components/new_channel_flow';\nimport UnreadChannelIndicator from 'components/unread_channel_indicator.jsx';\nimport Pluggable from 'plugins/pluggable';\n\nimport SidebarHeader from './header';\nimport SidebarChannel from './sidebar_channel';\nimport ChannelCreate from './channel_create';\nimport ChannelMore from './channel_more';\nimport ChannelName from './channel_name';\nimport MorePublicDirectChannels from './more_public_direct_channels';\n\nexport function renderView(props) {\n    return (\n        <div\n            {...props}\n            className='scrollbar--view'\n        />);\n}\n\nexport function renderThumbHorizontal(props) {\n    return (\n        <div\n            {...props}\n            className='scrollbar--horizontal'\n        />);\n}\n\nexport function renderThumbVertical(props) {\n    return (\n        <div\n            {...props}\n            className='scrollbar--vertical'\n        />);\n}\n\nexport default class Sidebar extends React.PureComponent {\n    static propTypes = {\n\n        /**\n         * Global config object\n         */\n        config: PropTypes.object.isRequired,\n\n        isOpen: PropTypes.bool.isRequired,\n\n        /**\n         * List of unread channels (ids)\n         */\n        unreadChannelIds: PropTypes.array,\n\n        /**\n         * List of ordered channels (ids)\n         */\n        orderedChannelIds: PropTypes.arrayOf(PropTypes.shape({\n\n            /**\n             * Type of channel\n             */\n            type: PropTypes.string.isRequired,\n\n            /**\n             * Displayed name in sidebar\n             */\n            name: PropTypes.string.isRequired,\n\n            /**\n             * List of ids for the channels (ids)\n             */\n            items: PropTypes.array.isRequired,\n        })),\n\n        /**\n         * Current channel object\n         */\n        currentChannel: PropTypes.object,\n\n        /**\n         * Current channel teammeat (for direct messages)\n         */\n        currentTeammate: PropTypes.object,\n\n        /**\n         * Current team object\n         */\n        currentTeam: PropTypes.object,\n\n        /**\n         * Current user object\n         */\n        currentUser: PropTypes.object,\n\n        /**\n         * Number of unread mentions/messages\n         */\n        unreads: PropTypes.object.isRequired,\n\n        /**\n         * Permission to create public channel\n         */\n        canCreatePublicChannel: PropTypes.bool.isRequired,\n\n        /**\n         * Permission to create private channel\n         */\n        canCreatePrivateChannel: PropTypes.bool.isRequired,\n\n        /**\n         * Flag to display the Switch channel shortcut\n         */\n        channelSwitcherOption: PropTypes.bool.isRequired,\n\n        actions: PropTypes.shape({\n            close: PropTypes.func.isRequired,\n            switchToChannelById: PropTypes.func.isRequired,\n            openModal: PropTypes.func.isRequired,\n        }).isRequired,\n    };\n\n    static defaultProps = {\n        currentChannel: {},\n    }\n\n    constructor(props) {\n        super(props);\n\n        this.badgesActive = false;\n        this.firstUnreadChannel = null;\n        this.lastUnreadChannel = null;\n\n        this.isLeaving = new Map();\n        this.isSwitchingChannel = false;\n        this.closedDirectChannel = false;\n\n        this.state = {\n            newChannelModalType: '',\n            orderedChannelIds: props.orderedChannelIds,\n            showDirectChannelsModal: false,\n            showMoreChannelsModal: false,\n            showMorePublicChannelsModal: false,\n        };\n\n        this.animate = new SpringSystem();\n        this.unreadScrollAnimate = this.animate.createSpring();\n        this.unreadScrollAnimate.setOvershootClampingEnabled(true); // disables the spring action at the end of animation\n        this.unreadScrollAnimate.addListener({onSpringUpdate: this.handleScrollAnimationUpdate});\n    }\n\n    static getDerivedStateFromProps(nextProps, prevState) {\n        if (nextProps.orderedChannelIds[0].type === SidebarChannelGroups.UNREADS &&\n            prevState.orderedChannelIds[0].type === SidebarChannelGroups.UNREADS &&\n            prevState.orderedChannelIds[0].items.length === nextProps.orderedChannelIds[0].items.length &&\n            prevState.orderedChannelIds[0].items.includes(nextProps.currentChannel.id)\n        ) {\n            return null;\n        }\n\n        if (nextProps.orderedChannelIds !== prevState.orderedChannelIds) {\n            return {orderedChannelIds: nextProps.orderedChannelIds};\n        }\n\n        return null;\n    }\n\n    componentDidMount() {\n        this.updateUnreadIndicators();\n        document.addEventListener('keydown', this.navigateChannelShortcut);\n        document.addEventListener('keydown', this.navigateUnreadChannelShortcut);\n    }\n\n    componentDidUpdate(prevProps) {\n        // if the active channel disappeared (which can happen when dm channels\n        // autoclose), go to user default channel in team\n        if (this.props.currentTeam === prevProps.currentTeam &&\n            this.props.currentChannel.id === prevProps.currentChannel.id &&\n            !this.channelIdIsDisplayedForProps(this.props.orderedChannelIds, this.props.currentChannel.id) &&\n            this.channelIdIsDisplayedForProps(prevProps.orderedChannelIds, this.props.currentChannel.id)\n        ) {\n            this.closedDirectChannel = true;\n            redirectUserToDefaultTeam();\n            return;\n        }\n\n        // reset the scrollbar upon switching teams\n        if (this.props.currentTeam !== prevProps.currentTeam) {\n            this.refs.scrollbar.scrollToTop();\n        }\n\n        // close the LHS on mobile when you change channels\n        if (this.props.currentChannel.id !== prevProps.currentChannel.id) {\n            if (this.closedDirectChannel) {\n                this.closedDirectChannel = false;\n            } else {\n                this.props.actions.close();\n            }\n        }\n\n        this.updateTitle();\n\n        // Don't modify favicon for now: https://mattermost.atlassian.net/browse/MM-13643.\n        // this.setBadgesActiveAndFavicon();\n\n        this.setFirstAndLastUnreadChannels();\n        this.updateUnreadIndicators();\n    }\n\n    componentWillUnmount() {\n        document.removeEventListener('keydown', this.navigateChannelShortcut);\n        document.removeEventListener('keydown', this.navigateUnreadChannelShortcut);\n\n        this.animate.deregisterSpring(this.unreadScrollAnimate);\n        this.animate.removeAllListeners();\n        this.unreadScrollAnimate.destroy();\n    }\n\n    setBadgesActiveAndFavicon() {\n        this.lastBadgesActive = this.badgesActive;\n        this.badgesActive = this.props.unreads.mentionCount;\n\n        // update the favicon to show if there are any notifications\n        if (this.lastBadgesActive !== this.badgesActive) {\n            var link = document.createElement('link');\n            link.type = 'image/x-icon';\n            link.rel = 'shortcut icon';\n            link.id = 'favicon';\n            if (this.badgesActive) {\n                link.href = typeof redFavicon === 'string' ? redFavicon : '';\n            } else {\n                link.href = typeof favicon === 'string' ? favicon : '';\n            }\n            var head = document.getElementsByTagName('head')[0];\n            var oldLink = document.getElementById('favicon');\n            if (oldLink) {\n                head.removeChild(oldLink);\n            }\n            head.appendChild(link);\n        }\n    }\n\n    setFirstAndLastUnreadChannels() {\n        const {currentChannel, unreadChannelIds} = this.props;\n        const {orderedChannelIds} = this.state;\n\n        this.getDisplayedChannels(orderedChannelIds).map((channelId) => {\n            if (channelId !== currentChannel.id && unreadChannelIds.includes(channelId)) {\n                if (!this.firstUnreadChannel) {\n                    this.firstUnreadChannel = channelId;\n                }\n                this.lastUnreadChannel = channelId;\n            }\n            return null;\n        });\n    }\n\n    handleOpenMoreDirectChannelsModal = (e) => {\n        e.preventDefault();\n        if (this.state.showDirectChannelsModal) {\n            this.hideMoreDirectChannelsModal();\n        } else {\n            this.showMoreDirectChannelsModal();\n        }\n    }\n\n    updateTitle = () => {\n        const {\n            config,\n            currentChannel,\n            currentTeam,\n            currentTeammate,\n            unreads,\n        } = this.props;\n\n        if (currentChannel && currentTeam) {\n            let currentSiteName = '';\n            if (config.SiteName != null) {\n                currentSiteName = config.SiteName;\n            }\n\n            let currentChannelName = currentChannel.display_name;\n            if (currentChannel.type === Constants.DM_CHANNEL) {\n                if (currentTeammate != null) {\n                    currentChannelName = currentTeammate.display_name;\n                }\n            }\n\n            const mentionTitle = unreads.mentionCount > 0 ? '(' + unreads.mentionCount + ') ' : '';\n            const unreadTitle = unreads.messageCount > 0 ? '* ' : '';\n            document.title = mentionTitle + unreadTitle + currentChannelName + ' - ' + this.props.currentTeam.display_name + ' ' + currentSiteName;\n        }\n    }\n\n    onScroll = () => {\n        this.updateUnreadIndicators();\n    }\n\n    handleScrollAnimationUpdate = (spring) => {\n        const {scrollbar} = this.refs;\n        const val = spring.getCurrentValue();\n        scrollbar.scrollTop(val);\n    }\n\n    scrollToFirstUnreadChannel = () => {\n        if (this.firstUnreadChannel) {\n            const displayedChannels = this.getDisplayedChannels(this.state.orderedChannelIds);\n            this.unreadScrollAnimate.setCurrentValue(this.refs.scrollbar.getScrollTop()).setAtRest();\n            let position;\n            if (displayedChannels.length > 0 && displayedChannels[0] === this.firstUnreadChannel) {\n                position = MathUtil.mapValueInRange(0, 0, 1, 0, 1);\n            } else {\n                const unreadMargin = 15;\n                const firstUnreadElement = $(ReactDOM.findDOMNode(this.refs[this.firstUnreadChannel]));\n                const scrollTop = firstUnreadElement.position().top - unreadMargin;\n                position = MathUtil.mapValueInRange(scrollTop, 0, 1, 0, 1);\n            }\n            this.unreadScrollAnimate.setEndValue(position);\n        }\n    }\n\n    scrollToLastUnreadChannel = () => {\n        if (this.lastUnreadChannel) {\n            const {scrollbar} = this.refs;\n            const unreadMargin = 15;\n            const lastUnreadElement = $(ReactDOM.findDOMNode(this.refs[this.lastUnreadChannel]));\n            const elementBottom = lastUnreadElement.position().top + lastUnreadElement.height();\n            const scrollTop = (elementBottom - scrollbar.getClientHeight()) + unreadMargin;\n            const position = MathUtil.mapValueInRange(scrollTop, 0, 1, 0, 1);\n            this.unreadScrollAnimate.setCurrentValue(scrollbar.getScrollTop()).setAtRest();\n            this.unreadScrollAnimate.setEndValue(position);\n        }\n    }\n\n    updateUnreadIndicators = () => {\n        let showTopUnread = false;\n        let showBottomUnread = false;\n\n        // Consider partially obscured channels as above/below\n        const unreadMargin = 15;\n\n        if (this.firstUnreadChannel) {\n            const firstUnreadElement = $(ReactDOM.findDOMNode(this.refs[this.firstUnreadChannel]));\n            const firstUnreadPosition = firstUnreadElement ? firstUnreadElement.position() : null;\n\n            if (firstUnreadPosition && ((firstUnreadPosition.top + firstUnreadElement.height()) - unreadMargin) < this.refs.scrollbar.getScrollTop()) {\n                showTopUnread = true;\n            }\n        }\n\n        if (this.lastUnreadChannel) {\n            const lastUnreadElement = $(ReactDOM.findDOMNode(this.refs[this.lastUnreadChannel]));\n            const lastUnreadPosition = lastUnreadElement ? lastUnreadElement.position() : null;\n\n            if (lastUnreadPosition && (lastUnreadPosition.top + unreadMargin) > (this.refs.scrollbar.getScrollTop() + this.refs.scrollbar.getClientHeight())) {\n                showBottomUnread = true;\n            }\n        }\n        if (showTopUnread !== this.state.showTopUnread || showBottomUnread !== this.state.showBottomUnread) {\n            this.setState({\n                showTopUnread,\n                showBottomUnread,\n            });\n        }\n    }\n\n    updateScrollbarOnChannelChange = (channelId) => {\n        const curChannel = this.refs[channelId].getWrappedInstance().refs.channel.getBoundingClientRect();\n        if ((curChannel.top - Constants.CHANNEL_SCROLL_ADJUSTMENT < 0) || (curChannel.top + curChannel.height > this.refs.scrollbar.view.getBoundingClientRect().height)) {\n            this.refs.scrollbar.scrollTop(this.refs.scrollbar.view.scrollTop + (curChannel.top - Constants.CHANNEL_SCROLL_ADJUSTMENT));\n        }\n    }\n\n    navigateChannelShortcut = (e) => {\n        if (e.altKey && !e.shiftKey && (Utils.isKeyPressed(e, Constants.KeyCodes.UP) || Utils.isKeyPressed(e, Constants.KeyCodes.DOWN))) {\n            e.preventDefault();\n\n            if (this.isSwitchingChannel) {\n                return;\n            }\n\n            this.isSwitchingChannel = true;\n            const allChannelIds = this.getDisplayedChannels(this.state.orderedChannelIds);\n            const curChannelId = this.props.currentChannel.id;\n            let curIndex = -1;\n            for (let i = 0; i < allChannelIds.length; i++) {\n                if (allChannelIds[i] === curChannelId) {\n                    curIndex = i;\n                }\n            }\n            let nextIndex = curIndex;\n            if (Utils.isKeyPressed(e, Constants.KeyCodes.DOWN)) {\n                nextIndex = curIndex + 1;\n            } else {\n                nextIndex = curIndex - 1;\n            }\n            const nextChannelId = allChannelIds[Utils.mod(nextIndex, allChannelIds.length)];\n            this.props.actions.switchToChannelById(nextChannelId);\n            this.updateScrollbarOnChannelChange(nextChannelId);\n\n            this.isSwitchingChannel = false;\n        } else if (Utils.cmdOrCtrlPressed(e) && e.shiftKey && Utils.isKeyPressed(e, Constants.KeyCodes.K)) {\n            this.handleOpenMoreDirectChannelsModal(e);\n        }\n    };\n\n    navigateUnreadChannelShortcut = (e) => {\n        if (e.altKey && e.shiftKey && (Utils.isKeyPressed(e, Constants.KeyCodes.UP) || Utils.isKeyPressed(e, Constants.KeyCodes.DOWN))) {\n            e.preventDefault();\n\n            if (this.isSwitchingChannel) {\n                return;\n            }\n\n            this.isSwitchingChannel = true;\n\n            const allChannelIds = this.getDisplayedChannels(this.state.orderedChannelIds);\n\n            let direction = 0;\n            if (Utils.isKeyPressed(e, Constants.KeyCodes.UP)) {\n                direction = -1;\n            } else {\n                direction = 1;\n            }\n\n            const nextIndex = ChannelUtils.findNextUnreadChannelId(\n                this.props.currentChannel.id,\n                allChannelIds,\n                this.props.unreadChannelIds,\n                direction\n            );\n\n            if (nextIndex !== -1) {\n                const nextChannelId = allChannelIds[nextIndex];\n                this.props.actions.switchToChannelById(nextChannelId);\n                this.updateScrollbarOnChannelChange(nextChannelId);\n            }\n\n            this.isSwitchingChannel = false;\n        }\n    };\n\n    getDisplayedChannels = (orderedChannelIds = []) => {\n        return orderedChannelIds.reduce((allChannelIds, section) => {\n            allChannelIds.push(...section.items);\n            return allChannelIds;\n        }, []);\n    };\n\n    channelIdIsDisplayedForProps = (orderedChannelIds = [], id) => {\n        const allChannels = this.getDisplayedChannels(orderedChannelIds);\n        for (let i = 0; i < allChannels.length; i++) {\n            if (allChannels[i] === id) {\n                return true;\n            }\n        }\n        return false;\n    }\n\n    showMorePublicDirectChannelsModal = () => {\n        this.setState({showMorePublicChannelsModal: true});\n        trackEvent('ui', 'ui_channels_more_public_direct');\n    }\n\n    hideMorePublicDirectChannelsModal = () => {\n        this.setState({showMorePublicChannelsModal: false});\n    }\n\n    onHandleNewChannel = () => {\n        this.hideMorePublicDirectChannelsModal();\n        this.showNewChannelModal(Constants.OPEN_CHANNEL);\n    }\n\n    showMoreChannelsModal = () => {\n        this.setState({showMoreChannelsModal: true});\n        trackEvent('ui', 'ui_channels_more_public');\n    }\n\n    hideMoreChannelsModal = () => {\n        this.setState({showMoreChannelsModal: false});\n    }\n\n    showNewPublicChannelModal = () => {\n        this.showNewChannelModal(Constants.OPEN_CHANNEL);\n    }\n\n    showNewPrivateChannelModal = () => {\n        this.showNewChannelModal(Constants.PRIVATE_CHANNEL);\n    }\n\n    showNewChannelModal = (type) => {\n        this.setState({newChannelModalType: type});\n    }\n\n    hideNewChannelModal = () => {\n        this.setState({newChannelModalType: ''});\n    }\n\n    showMoreDirectChannelsModal = () => {\n        trackEvent('ui', 'ui_channels_more_direct');\n        this.setState({showDirectChannelsModal: true});\n    }\n\n    hideMoreDirectChannelsModal = () => {\n        this.setState({showDirectChannelsModal: false});\n    }\n\n    openQuickSwitcher = (e) => {\n        e.preventDefault();\n        this.props.actions.openModal({\n            modalId: ModalIdentifiers.QUICK_SWITCH,\n            dialogType: QuickSwitchModal,\n        });\n    }\n\n    createSidebarChannel = (channelId) => {\n        return (\n            <SidebarChannel\n                key={channelId}\n                ref={channelId}\n                channelId={channelId}\n                active={channelId === this.props.currentChannel.id}\n                currentTeamName={this.props.currentTeam.name}\n                currentUserId={this.props.currentUser.id}\n            />\n        );\n    }\n\n    renderOrderedChannels = () => {\n        const {orderedChannelIds} = this.state;\n\n        const sectionsToHide = [SidebarChannelGroups.UNREADS, SidebarChannelGroups.FAVORITE];\n\n        return (\n            <Scrollbars\n                ref='scrollbar'\n                autoHide={true}\n                autoHideTimeout={500}\n                autoHideDuration={500}\n                renderThumbHorizontal={renderThumbHorizontal}\n                renderThumbVertical={renderThumbVertical}\n                renderView={renderView}\n                onScroll={this.onScroll}\n                style={{position: 'absolute'}}\n            >\n                <div\n                    id='sidebarChannelContainer'\n                    className='nav-pills__container'\n                >\n                    {orderedChannelIds.map((sec) => {\n                        const section = {\n                            type: sec.type,\n                            name: sec.name,\n                            items: sec.items.map(this.createSidebarChannel),\n                        };\n\n                        if (sectionsToHide.indexOf(section.type) !== -1 && section.items.length === 0) {\n                            return null;\n                        }\n\n                        const sectionId = `${section.type}Channel`;\n                        const ariaLabel = section.name.toLowerCase();\n\n                        return (\n                            <ul\n                                key={section.type}\n                                aria-label={ariaLabel}\n                                role='presentation'\n                                className='nav nav-pills nav-stacked a11y__section'\n                                id={sectionId + 'List'}\n                                tabIndex='-1'\n                            >\n                                <li className='sidebar-section__header'>\n                                    <h4\n                                        role='presentation'\n                                        id={sectionId}\n                                    >\n                                        <ChannelName\n                                            sectionType={section.type}\n                                            channelName={section.name}\n                                            browsePublicDirectChannels={this.showMorePublicDirectChannelsModal}\n                                        />\n                                    </h4>\n                                    <ChannelCreate\n                                        sectionType={section.type}\n                                        canCreatePublicChannel={this.props.canCreatePublicChannel}\n                                        canCreatePrivateChannel={this.props.canCreatePrivateChannel}\n                                        createPublicChannel={this.showNewPublicChannelModal}\n                                        createPrivateChannel={this.showNewPrivateChannelModal}\n                                        createDirectMessage={this.handleOpenMoreDirectChannelsModal}\n                                        createPublicDirectChannel={this.showNewPublicChannelModal}\n                                    />\n                                </li>\n                                {section.items}\n                                <ChannelMore\n                                    sectionType={section.type}\n                                    moreChannels={this.showMoreChannelsModal}\n                                    moreDirectMessages={this.handleOpenMoreDirectChannelsModal}\n                                    browsePublicDirectChannels={this.showMorePublicDirectChannelsModal}\n                                />\n                            </ul>\n                        );\n                    })}\n                </div>\n            </Scrollbars>\n        );\n    };\n\n    render() {\n        const {channelSwitcherOption} = this.props;\n        const ariaLabel = Utils.localizeMessage('accessibility.sections.lhsList', 'channel sidebar region');\n\n        // Check if we have all info needed to render\n        if (this.props.currentTeam == null || this.props.currentUser == null) {\n            return (<div/>);\n        }\n\n        this.badgesActive = false;\n\n        // keep track of the first and last unread channels so we can use them to set the unread indicators\n        this.firstUnreadChannel = null;\n        this.lastUnreadChannel = null;\n\n        let showChannelModal = false;\n        if (this.state.newChannelModalType !== '') {\n            showChannelModal = true;\n        }\n\n        const above = (\n            <FormattedMessage\n                id='sidebar.unreads'\n                defaultMessage='More unreads'\n            />\n        );\n\n        const below = (\n            <FormattedMessage\n                id='sidebar.unreads'\n                defaultMessage='More unreads'\n            />\n        );\n\n        let moreDirectChannelsModal;\n        if (this.state.showDirectChannelsModal) {\n            moreDirectChannelsModal = (\n                <MoreDirectChannels\n                    onModalDismissed={this.hideMoreDirectChannelsModal}\n                    isExistingChannel={false}\n                />\n            );\n        }\n\n        let moreChannelsModal;\n        if (this.state.showMoreChannelsModal) {\n            moreChannelsModal = (\n                <MoreChannels\n                    onModalDismissed={this.hideMoreChannelsModal}\n                    handleNewChannel={() => {\n                        this.hideMoreChannelsModal();\n                        this.showNewChannelModal(Constants.OPEN_CHANNEL);\n                    }}\n                />\n            );\n        }\n\n        let quickSwitchText = null;\n        if (channelSwitcherOption) {\n            let quickSwitchTextShortcutId = t('quick_switch_modal.channelsShortcut.windows');\n            let quickSwitchTextShortcutDefault = '- CTRL+K';\n            if (Utils.isMac()) {\n                quickSwitchTextShortcutId = t('quick_switch_modal.channelsShortcut.mac');\n                quickSwitchTextShortcutDefault = '- ⌘K';\n            }\n\n            const quickSwitchTextShortcut = (\n                <span className='switch__shortcut hidden-xs'>\n                    <FormattedMessage\n                        id={quickSwitchTextShortcutId}\n                        defaultMessage={quickSwitchTextShortcutDefault}\n                    />\n                </span>\n            );\n\n            quickSwitchText = (\n                <div className='sidebar__switcher'>\n                    <button\n                        id='sidebarSwitcherButton'\n                        className='btn btn-link'\n                        onClick={this.openQuickSwitcher}\n                    >\n                        <FormattedMessage\n                            id={'channel_switch_modal.title'}\n                            defaultMessage='Switch Channels'\n                        />\n                        {quickSwitchTextShortcut}\n                    </button>\n                </div>\n            );\n        }\n\n        let morePublicDirectChannelsModal;\n        if (this.state.showMorePublicChannelsModal) {\n            morePublicDirectChannelsModal = (\n                <MorePublicDirectChannels\n                    onModalDismissed={this.hideMorePublicDirectChannelsModal}\n                    handleNewChannel={this.onHandleNewChannel}\n                    isExistingChannel={false}\n                />\n            );\n        }\n\n        return (\n            <div\n                className={classNames('sidebar--left', {'move--right': this.props.isOpen && Utils.isMobile()})}\n                id='sidebar-left'\n                key='sidebar-left'\n            >\n                <NewChannelFlow\n                    show={showChannelModal}\n                    canCreatePublicChannel={this.props.canCreatePublicChannel}\n                    canCreatePrivateChannel={this.props.canCreatePrivateChannel}\n                    channelType={this.state.newChannelModalType}\n                    onModalDismissed={this.hideNewChannelModal}\n                />\n                {morePublicDirectChannelsModal}\n                {moreDirectChannelsModal}\n                {moreChannelsModal}\n\n                <SidebarHeader/>\n\n                <div className='sidebar--left__icons'>\n                    <Pluggable pluggableName='LeftSidebarHeader'/>\n                </div>\n\n                <div\n                    id='lhsList'\n                    role='application'\n                    aria-label={ariaLabel}\n                    tabIndex='-1'\n                    className='sidebar--left__list a11y__region'\n                    data-a11y-sort-order='6'\n                >\n                    <UnreadChannelIndicator\n                        name='Top'\n                        show={this.state.showTopUnread}\n                        onClick={this.scrollToFirstUnreadChannel}\n                        extraClass='nav-pills__unread-indicator-top'\n                        content={above}\n                    />\n                    <UnreadChannelIndicator\n                        name='Bottom'\n                        show={this.state.showBottomUnread}\n                        onClick={this.scrollToLastUnreadChannel}\n                        extraClass='nav-pills__unread-indicator-bottom'\n                        content={below}\n                    />\n\n                    {this.renderOrderedChannels()}\n                </div>\n                {quickSwitchText}\n            </div>\n        );\n    }\n}\n","// Copyright (c) 2015-present Mattermost, Inc. All Rights Reserved.\n// See LICENSE.txt for license information.\n\nimport {connect} from 'react-redux';\nimport {bindActionCreators} from 'redux';\n\nimport {Preferences} from 'mattermost-redux/constants/index';\nimport {\n    getCurrentChannel,\n    getSortedUnreadChannelIds,\n    getOrderedChannelIds,\n    getUnreads,\n} from 'mattermost-redux/selectors/entities/channels';\n\nimport Permissions from 'mattermost-redux/constants/permissions';\nimport {getConfig} from 'mattermost-redux/selectors/entities/general';\nimport {getBool as getBoolPreference, getSidebarPreferences} from 'mattermost-redux/selectors/entities/preferences';\nimport {getCurrentUser} from 'mattermost-redux/selectors/entities/users';\nimport {haveITeamPermission} from 'mattermost-redux/selectors/entities/roles';\nimport {getCurrentTeam} from 'mattermost-redux/selectors/entities/teams';\n\nimport {switchToChannelById} from 'actions/views/channel';\nimport {openModal} from 'actions/views/modals';\nimport {close} from 'actions/views/lhs';\nimport {getIsLhsOpen} from 'selectors/lhs';\n\nimport Sidebar from './sidebar.jsx';\n\nfunction mapStateToProps(state) {\n    const config = getConfig(state);\n    const currentChannel = getCurrentChannel(state);\n    const currentTeammate = currentChannel && currentChannel.teammate_id && getCurrentChannel(state, currentChannel.teammate_id);\n    const currentTeam = getCurrentTeam(state);\n\n    const canCreatePublicChannel = haveITeamPermission(state, {team: currentTeam.id, permission: Permissions.CREATE_PUBLIC_CHANNEL});\n    const canCreatePrivateChannel = haveITeamPermission(state, {team: currentTeam.id, permission: Permissions.CREATE_PRIVATE_CHANNEL});\n\n    const sidebarPrefs = getSidebarPreferences(state);\n    const lastUnreadChannel = state.views.channel.keepChannelIdAsUnread;\n    const unreadChannelIds = getSortedUnreadChannelIds(state, lastUnreadChannel);\n    const orderedChannelIds = getOrderedChannelIds(\n        state,\n        lastUnreadChannel,\n        sidebarPrefs.grouping,\n        sidebarPrefs.sorting,\n        sidebarPrefs.unreads_at_top === 'true',\n        sidebarPrefs.favorite_at_top === 'true',\n    );\n\n    const channelSwitcherOption = getBoolPreference(\n        state,\n        Preferences.CATEGORY_SIDEBAR_SETTINGS,\n        'channel_switcher_section',\n        'true'\n    );\n\n    return {\n        config,\n        unreadChannelIds,\n        orderedChannelIds,\n        channelSwitcherOption,\n        currentChannel,\n        currentTeammate,\n        currentTeam,\n        currentUser: getCurrentUser(state),\n        canCreatePublicChannel,\n        canCreatePrivateChannel,\n        isOpen: getIsLhsOpen(state),\n        unreads: getUnreads(state),\n    };\n}\n\nfunction mapDispatchToProps(dispatch) {\n    return {\n        actions: bindActionCreators({\n            close,\n            switchToChannelById,\n            openModal,\n        }, dispatch),\n    };\n}\n\nexport default connect(mapStateToProps, mapDispatchToProps)(Sidebar);\n","// Copyright (c) 2015-present Mattermost, Inc. All Rights Reserved.\n// See LICENSE.txt for license information.\n\nimport {getChannel, selectChannel, joinChannel, getChannelStats} from 'mattermost-redux/actions/channels';\nimport {getPostThread} from 'mattermost-redux/actions/posts';\nimport {getCurrentTeamId} from 'mattermost-redux/selectors/entities/teams';\nimport {getCurrentUserId} from 'mattermost-redux/selectors/entities/users';\n\nimport {loadChannelsForCurrentUser} from 'actions/channel_actions.jsx';\nimport {loadNewDMIfNeeded, loadNewGMIfNeeded} from 'actions/user_actions.jsx';\nimport {browserHistory} from 'utils/browser_history';\nimport {ActionTypes, Constants, ErrorPageTypes} from 'utils/constants.jsx';\n\nexport function focusPost(postId, returnTo = '') {\n    return async (dispatch, getState) => {\n        const {data} = await dispatch(getPostThread(postId));\n\n        if (!data) {\n            browserHistory.replace(`/error?type=${ErrorPageTypes.PERMALINK_NOT_FOUND}&returnTo=${returnTo}`);\n            return;\n        }\n\n        const state = getState();\n        const channelId = data.posts[data.order[0]].channel_id;\n        let channel = state.entities.channels.channels[channelId];\n        const teamId = getCurrentTeamId(state);\n\n        if (!channel) {\n            const {data: channelData} = await dispatch(getChannel(channelId));\n\n            if (!channelData) {\n                browserHistory.replace(`/error?type=${ErrorPageTypes.PERMALINK_NOT_FOUND}&returnTo=${returnTo}`);\n                return;\n            }\n\n            channel = channelData;\n        }\n\n        const myMember = state.entities.channels.myMembers[channelId];\n\n        if (!myMember) {\n            // If it's a DM or GM channel and we don't have a channel member for it already, user is not a member\n            if (channel.type === Constants.DM_CHANNEL || channel.type === Constants.GM_CHANNEL) {\n                browserHistory.replace(`/error?type=${ErrorPageTypes.PERMALINK_NOT_FOUND}&returnTo=${returnTo}`);\n                return;\n            }\n\n            await dispatch(joinChannel(getCurrentUserId(getState()), null, channelId));\n        }\n\n        if (channel.team_id && channel.team_id !== teamId) {\n            browserHistory.replace(`/error?type=${ErrorPageTypes.PERMALINK_NOT_FOUND}&returnTo=${returnTo}`);\n            return;\n        }\n\n        if (channel && channel.type === Constants.DM_CHANNEL) {\n            loadNewDMIfNeeded(channel.id);\n        } else if (channel && channel.type === Constants.GM_CHANNEL) {\n            loadNewGMIfNeeded(channel.id);\n        }\n\n        dispatch(selectChannel(channelId));\n        dispatch({\n            type: ActionTypes.RECEIVED_FOCUSED_POST,\n            data: postId,\n            channelId,\n        });\n\n        dispatch(loadChannelsForCurrentUser());\n        dispatch(getChannelStats(channelId));\n    };\n}\n","// Copyright (c) 2015-present Mattermost, Inc. All Rights Reserved.\n// See LICENSE.txt for license information.\nimport React from 'react';\nimport PropTypes from 'prop-types';\nimport {Modal} from 'react-bootstrap';\nimport {defineMessages, FormattedMessage, injectIntl, intlShape} from 'react-intl';\n\nimport {RequestStatus} from 'mattermost-redux/constants';\n\nimport Textbox from 'components/textbox';\nimport TextboxLinks from 'components/textbox/textbox_links.jsx';\nimport Constants from 'utils/constants.jsx';\nimport {isMobile} from 'utils/user_agent.jsx';\nimport {isKeyPressed, localizeMessage} from 'utils/utils.jsx';\nimport {t} from 'utils/i18n';\n\nconst KeyCodes = Constants.KeyCodes;\n\nconst holders = defineMessages({\n    error: {\n        id: t('edit_channel_header_modal.error'),\n        defaultMessage: 'This channel header is too long, please enter a shorter one',\n    },\n});\n\nclass EditChannelHeaderModal extends React.PureComponent {\n    static propTypes = {\n\n        /*\n         * react-intl helper object\n         */\n        intl: intlShape.isRequired,\n\n        /*\n         * callback to call when modal will hide\n         */\n        onHide: PropTypes.func.isRequired,\n\n        /*\n         * Object with info about current channel ,\n         */\n        channel: PropTypes.object.isRequired,\n\n        /*\n         * boolean should be `ctrl` button pressed to send\n         */\n        ctrlSend: PropTypes.bool.isRequired,\n\n        /*\n         * object with info about server error\n         */\n        serverError: PropTypes.object,\n\n        /*\n         * string with info about about request\n         */\n        requestStatus: PropTypes.string.isRequired,\n\n        /*\n         * Collection of redux actions\n         */\n        actions: PropTypes.shape({\n\n            /*\n             * patch channel redux-action\n             */\n            patchChannel: PropTypes.func.isRequired,\n        }).isRequired,\n    }\n\n    constructor(props) {\n        super(props);\n\n        this.state = {\n            preview: false,\n            header: props.channel.header,\n            show: true,\n            showError: false,\n        };\n    }\n\n    UNSAFE_componentWillReceiveProps(nextProps) { // eslint-disable-line camelcase\n        const {requestStatus: nextRequestStatus} = nextProps;\n        const {requestStatus} = this.props;\n\n        if (requestStatus !== nextRequestStatus && nextRequestStatus === RequestStatus.FAILURE) {\n            this.setState({showError: true});\n        } else if (requestStatus !== nextRequestStatus && nextRequestStatus === RequestStatus.SUCCESS) {\n            this.onHide();\n        } else {\n            this.setState({showError: false});\n        }\n    }\n\n    updatePreview = (newState) => {\n        this.setState({preview: newState});\n    }\n\n    handleChange = (e) => {\n        this.setState({\n            header: e.target.value,\n        });\n    }\n\n    handleSave = () => {\n        const {channel, actions: {patchChannel}} = this.props;\n        const {header} = this.state;\n        patchChannel(channel.id, {header});\n    }\n\n    onHide = () => {\n        this.setState({show: false});\n    }\n\n    focusTextbox = () => {\n        if (this.refs.editChannelHeaderTextbox) {\n            this.refs.editChannelHeaderTextbox.getWrappedInstance().focus();\n        }\n    }\n\n    blurTextbox = () => {\n        if (this.refs.editChannelHeaderTextbox) {\n            this.refs.editChannelHeaderTextbox.getWrappedInstance().blur();\n        }\n    }\n\n    handleEntering = () => {\n        this.focusTextbox();\n    }\n\n    handleKeyDown = (e) => {\n        const {ctrlSend} = this.props;\n        if (ctrlSend && isKeyPressed(e, KeyCodes.ENTER) && e.ctrlKey === true) {\n            this.handleKeyPress(e);\n        }\n    }\n\n    handleKeyPress = (e) => {\n        const {ctrlSend} = this.props;\n        if (!isMobile() && ((ctrlSend && e.ctrlKey) || !ctrlSend)) {\n            if (isKeyPressed(e, KeyCodes.ENTER) && !e.shiftKey && !e.altKey) {\n                e.preventDefault();\n                this.blurTextbox();\n                this.handleSave(e);\n            }\n        }\n    }\n\n    render() {\n        let serverError = null;\n        if (this.props.serverError && this.state.showError) {\n            let errorMsg;\n            if (this.props.serverError.server_error_id === 'model.channel.is_valid.header.app_error') {\n                errorMsg = this.props.intl.formatMessage(holders.error);\n            } else {\n                errorMsg = this.props.serverError.message;\n            }\n\n            serverError = (\n                <div className='form-group has-error'>\n                    <br/>\n                    <label className='control-label'>\n                        {errorMsg}\n                    </label>\n                </div>\n            );\n        }\n\n        let headerTitle = null;\n        if (this.props.channel.type === Constants.DM_CHANNEL) {\n            headerTitle = (\n                <FormattedMessage\n                    id='edit_channel_header_modal.title_dm'\n                    defaultMessage='Edit Header'\n                />\n            );\n        } else {\n            headerTitle = (\n                <FormattedMessage\n                    id='edit_channel_header_modal.title'\n                    defaultMessage='Edit Header for {channel}'\n                    values={{\n                        channel: this.props.channel.display_name,\n                    }}\n                />\n            );\n        }\n\n        return (\n            <Modal\n                dialogClassName='a11y__modal'\n                show={this.state.show}\n                onHide={this.onHide}\n                onEntering={this.handleEntering}\n                onExited={this.props.onHide}\n                role='dialog'\n                aria-labelledby='editChannelHeaderModalLabel'\n            >\n                <Modal.Header closeButton={true}>\n                    <Modal.Title\n                        componentClass='h1'\n                        id='editChannelHeaderModalLabel'\n                    >\n                        {headerTitle}\n                    </Modal.Title>\n                </Modal.Header>\n                <Modal.Body bsClass='modal-body edit-modal-body'>\n                    <div>\n                        <p>\n                            <FormattedMessage\n                                id='edit_channel_header_modal.description'\n                                defaultMessage='Edit the text appearing next to the channel name in the channel header.'\n                            />\n                        </p>\n                        <div className='textarea-wrapper'>\n                            <Textbox\n                                value={this.state.header}\n                                onChange={this.handleChange}\n                                onKeyPress={this.handleKeyPress}\n                                onKeyDown={this.handleKeyDown}\n                                supportsCommands={false}\n                                suggestionListStyle='bottom'\n                                createMessage={localizeMessage('edit_channel_header.editHeader', 'Edit the Channel Header...')}\n                                previewMessageLink={localizeMessage('edit_channel_header.previewHeader', 'Edit Header')}\n                                handlePostError={this.handlePostError}\n                                id='edit_textbox'\n                                ref='editChannelHeaderTextbox'\n                                characterLimit={1024}\n                                preview={this.state.preview}\n                            />\n                        </div>\n                        <div className='post-create-footer'>\n                            <TextboxLinks\n                                characterLimit={1024}\n                                showPreview={this.state.preview}\n                                ref={this.setTextboxLinksRef}\n                                updatePreview={this.updatePreview}\n                                message={this.state.header}\n                            />\n                        </div>\n                        <br/>\n                        {serverError}\n                    </div>\n                </Modal.Body>\n                <Modal.Footer>\n                    <button\n                        type='button'\n                        className='btn btn-link cancel-button'\n                        onClick={this.onHide}\n                    >\n                        <FormattedMessage\n                            id='edit_channel_header_modal.cancel'\n                            defaultMessage='Cancel'\n                        />\n                    </button>\n                    <button\n                        disabled={this.props.requestStatus === RequestStatus.STARTED}\n                        type='button'\n                        className='btn btn-primary save-button'\n                        onClick={this.handleSave}\n                    >\n                        <FormattedMessage\n                            id='edit_channel_header_modal.save'\n                            defaultMessage='Save'\n                        />\n                    </button>\n                </Modal.Footer>\n            </Modal>\n        );\n    }\n}\n\nexport default injectIntl(EditChannelHeaderModal);\n","// Copyright (c) 2015-present Mattermost, Inc. All Rights Reserved.\n// See LICENSE.txt for license information.\nimport {bindActionCreators} from 'redux';\nimport {connect} from 'react-redux';\nimport {createSelector} from 'reselect';\nimport {getBool} from 'mattermost-redux/selectors/entities/preferences';\nimport {patchChannel} from 'mattermost-redux/actions/channels';\n\nimport Constants from 'utils/constants.jsx';\n\nimport EditChannelHeaderModal from './edit_channel_header_modal.jsx';\n\nconst mapStateToProps = createSelector(\n    (state) => getBool(state, Constants.Preferences.CATEGORY_ADVANCED_SETTINGS, 'send_on_ctrl_enter'),\n    ({requests}) => {\n        const {channels: {updateChannel}} = requests;\n        return {\n            serverError: updateChannel.error,\n            requestStatus: updateChannel.status,\n        };\n    },\n    (ctrlSend, submitInfo) => ({\n        ctrlSend,\n        ...submitInfo,\n    }),\n);\n\nfunction mapDispatchToProps(dispatch) {\n    return {\n        actions: {\n            patchChannel: bindActionCreators(patchChannel, dispatch),\n        },\n    };\n}\n\nexport default connect(\n    mapStateToProps,\n    mapDispatchToProps,\n)(EditChannelHeaderModal);\n","// Copyright (c) 2015-present Mattermost, Inc. All Rights Reserved.\n// See LICENSE.txt for license information.\n\nimport PropTypes from 'prop-types';\nimport React from 'react';\nimport {Modal} from 'react-bootstrap';\nimport {FormattedMessage} from 'react-intl';\nimport {Client4} from 'mattermost-redux/client';\n\nimport {filterProfilesMatchingTerm} from 'mattermost-redux/utils/user_utils';\n\nimport {displayEntireNameForUser, localizeMessage} from 'utils/utils.jsx';\nimport ProfilePicture from 'components/profile_picture.jsx';\nimport MultiSelect from 'components/multiselect/multiselect.jsx';\nimport AddIcon from 'components/icon/add_icon';\nimport BotBadge from 'components/widgets/badges/bot_badge.jsx';\n\nimport Constants from 'utils/constants.jsx';\n\nconst USERS_PER_PAGE = 50;\nconst MAX_SELECTABLE_VALUES = 20;\n\nexport default class ChannelInviteModal extends React.Component {\n    static propTypes = {\n        profilesNotInCurrentChannel: PropTypes.array.isRequired,\n        onHide: PropTypes.func.isRequired,\n        channel: PropTypes.object.isRequired,\n        actions: PropTypes.shape({\n            addUsersToChannel: PropTypes.func.isRequired,\n            getProfilesNotInChannel: PropTypes.func.isRequired,\n            getTeamStats: PropTypes.func.isRequired,\n            searchProfiles: PropTypes.func.isRequired,\n        }).isRequired,\n    };\n\n    constructor(props) {\n        super(props);\n\n        this.searchTimeoutId = 0;\n\n        this.state = {\n            values: [],\n            term: '',\n            show: true,\n            saving: false,\n            loadingUsers: true,\n        };\n    }\n\n    addValue = (value) => {\n        const values = Object.assign([], this.state.values);\n        if (values.indexOf(value) === -1) {\n            values.push(value);\n        }\n\n        this.setState({values});\n    };\n\n    componentDidMount() {\n        this.props.actions.getProfilesNotInChannel(this.props.channel.team_id, this.props.channel.id, this.props.channel.group_constrained, 0).then(() => {\n            this.setUsersLoadingState(false);\n        });\n        this.props.actions.getTeamStats(this.props.channel.team_id);\n    }\n\n    onHide = () => {\n        this.setState({show: false});\n    };\n\n    handleInviteError = (err) => {\n        if (err) {\n            this.setState({\n                saving: false,\n                inviteError: err.message,\n            });\n        }\n    };\n\n    handleDelete = (values) => {\n        this.setState({values});\n    };\n\n    setUsersLoadingState = (loadingState) => {\n        this.setState({\n            loadingUsers: loadingState,\n        });\n    };\n\n    handlePageChange = (page, prevPage) => {\n        if (page > prevPage) {\n            this.setUsersLoadingState(true);\n            this.props.actions.getProfilesNotInChannel(this.props.channel.team_id, this.props.channel.id, this.props.channel.group_constrained, page + 1, USERS_PER_PAGE).then(() => {\n                this.setUsersLoadingState(false);\n            });\n        }\n    };\n\n    handleSubmit = (e) => {\n        const {actions, channel} = this.props;\n        if (e) {\n            e.preventDefault();\n        }\n\n        const userIds = this.state.values.map((v) => v.id);\n        if (userIds.length === 0) {\n            return;\n        }\n\n        this.setState({saving: true});\n\n        actions.addUsersToChannel(channel.id, userIds).then((result) => {\n            if (result.error) {\n                this.handleInviteError(result.error);\n            } else {\n                this.setState({\n                    saving: false,\n                    inviteError: null,\n                });\n                this.onHide();\n            }\n        });\n    };\n\n    search = (searchTerm) => {\n        const term = searchTerm.trim();\n        clearTimeout(this.searchTimeoutId);\n        this.setState({\n            term,\n        });\n\n        this.searchTimeoutId = setTimeout(\n            async () => {\n                this.setUsersLoadingState(true);\n                const options = {\n                    team_id: this.props.channel.team_id,\n                    not_in_channel_id: this.props.channel.id,\n                    group_constrained: this.props.channel.group_constrained,\n                };\n                await this.props.actions.searchProfiles(term, options);\n                this.setUsersLoadingState(false);\n            },\n            Constants.SEARCH_TIMEOUT_MILLISECONDS\n        );\n    };\n\n    renderAriaLabel = (option) => {\n        if (!option) {\n            return null;\n        }\n        return option.username;\n    }\n\n    renderOption = (option, isSelected, onAdd) => {\n        var rowSelected = '';\n        if (isSelected) {\n            rowSelected = 'more-modal__row--selected';\n        }\n\n        return (\n            <div\n                key={option.id}\n                ref={isSelected ? 'selected' : option.id}\n                className={'more-modal__row clickable ' + rowSelected}\n                onClick={() => onAdd(option)}\n            >\n                <ProfilePicture\n                    src={Client4.getProfilePictureUrl(option.id, option.last_picture_update)}\n                    width='32'\n                    height='32'\n                />\n                <div className='more-modal__details'>\n                    <div className='more-modal__name'>\n                        {displayEntireNameForUser(option)}\n                        <BotBadge\n                            show={Boolean(option.is_bot)}\n                            className='badge-popoverlist'\n                        />\n                    </div>\n                </div>\n                <div className='more-modal__actions'>\n                    <div className='more-modal__actions--round'>\n                        <AddIcon/>\n                    </div>\n                </div>\n            </div>\n        );\n    };\n\n    renderValue(props) {\n        return props.data.username;\n    }\n\n    render() {\n        let inviteError = null;\n        if (this.state.inviteError) {\n            inviteError = (<label className='has-error control-label'>{this.state.inviteError}</label>);\n        }\n\n        const numRemainingText = (\n            <FormattedMessage\n                id='multiselect.numPeopleRemaining'\n                defaultMessage='Use ↑↓ to browse, ↵ to select. You can add {num, number} more {num, plural, one {person} other {people}}. '\n                values={{\n                    num: MAX_SELECTABLE_VALUES - this.state.values.length,\n                }}\n            />\n        );\n\n        const buttonSubmitText = localizeMessage('multiselect.add', 'Add');\n        const buttonSubmitLoadingText = localizeMessage('multiselect.adding', 'Adding...');\n\n        let users = filterProfilesMatchingTerm(this.props.profilesNotInCurrentChannel, this.state.term);\n        users = users.filter((user) => user.delete_at === 0);\n\n        const content = (\n            <MultiSelect\n                key='addUsersToChannelKey'\n                options={users}\n                optionRenderer={this.renderOption}\n                values={this.state.values}\n                valueRenderer={this.renderValue}\n                ariaLabelRenderer={this.renderAriaLabel}\n                perPage={USERS_PER_PAGE}\n                handlePageChange={this.handlePageChange}\n                handleInput={this.search}\n                handleDelete={this.handleDelete}\n                handleAdd={this.addValue}\n                handleSubmit={this.handleSubmit}\n                maxValues={MAX_SELECTABLE_VALUES}\n                numRemainingText={numRemainingText}\n                buttonSubmitText={buttonSubmitText}\n                buttonSubmitLoadingText={buttonSubmitLoadingText}\n                saving={this.state.saving}\n                loading={this.state.loadingUsers}\n                placeholderText={localizeMessage('multiselect.placeholder', 'Search and add members')}\n            />\n        );\n\n        return (\n            <Modal\n                dialogClassName='a11y__modal more-modal'\n                show={this.state.show}\n                onHide={this.onHide}\n                onExited={this.props.onHide}\n                role='dialog'\n                aria-labelledby='channelInviteModalLabel'\n            >\n                <Modal.Header closeButton={true}>\n                    <Modal.Title\n                        componentClass='h1'\n                        id='channelInviteModalLabel'\n                    >\n                        <FormattedMessage\n                            id='channel_invite.addNewMembers'\n                            defaultMessage='Add New Members to '\n                        />\n                        <span className='name'>{this.props.channel.display_name}</span>\n                    </Modal.Title>\n                </Modal.Header>\n                <Modal.Body\n                    role='application'\n                >\n                    {inviteError}\n                    {content}\n                </Modal.Body>\n            </Modal>\n        );\n    }\n}\n","// Copyright (c) 2015-present Mattermost, Inc. All Rights Reserved.\n// See LICENSE.txt for license information.\n\nimport {connect} from 'react-redux';\nimport {bindActionCreators} from 'redux';\n\nimport {getTeamStats} from 'mattermost-redux/actions/teams';\nimport {getProfilesNotInChannel, searchProfiles} from 'mattermost-redux/actions/users';\nimport {getProfilesNotInCurrentChannel} from 'mattermost-redux/selectors/entities/users';\n\nimport {addUsersToChannel} from 'actions/channel_actions';\n\nimport ChannelInviteModal from './channel_invite_modal.jsx';\n\nfunction mapStateToProps(state) {\n    return {\n        profilesNotInCurrentChannel: getProfilesNotInCurrentChannel(state),\n    };\n}\n\nfunction mapDispatchToProps(dispatch) {\n    return {\n        actions: bindActionCreators({\n            addUsersToChannel,\n            getProfilesNotInChannel,\n            getTeamStats,\n            searchProfiles,\n        }, dispatch),\n    };\n}\n\nexport default connect(mapStateToProps, mapDispatchToProps)(ChannelInviteModal);\n","// Copyright (c) 2015-present Mattermost, Inc. All Rights Reserved.\n// See LICENSE.txt for license information.\n\nimport PropTypes from 'prop-types';\nimport React from 'react';\nimport {FormattedMessage} from 'react-intl';\n\nimport {Constants} from 'utils/constants.jsx';\nimport * as Utils from 'utils/utils.jsx';\nimport DropdownIcon from '../icon/dropdown_icon';\n\nimport Menu from 'components/widgets/menu/menu';\nimport MenuWrapper from 'components/widgets/menu/menu_wrapper';\nimport MenuItemAction from 'components/widgets/menu/menu_items/menu_item_action';\n\nconst ROWS_FROM_BOTTOM_TO_OPEN_UP = 3;\n\nexport default class ChannelMembersDropdown extends React.Component {\n    static propTypes = {\n        channel: PropTypes.object.isRequired,\n        user: PropTypes.object.isRequired,\n        currentUserId: PropTypes.string.isRequired,\n        channelMember: PropTypes.object.isRequired,\n        isLicensed: PropTypes.bool.isRequired,\n        canChangeMemberRoles: PropTypes.bool.isRequired,\n        canRemoveMember: PropTypes.bool.isRequired,\n        index: PropTypes.number.isRequired,\n        totalUsers: PropTypes.number.isRequired,\n        actions: PropTypes.shape({\n            getChannelStats: PropTypes.func.isRequired,\n            updateChannelMemberSchemeRoles: PropTypes.func.isRequired,\n            removeChannelMember: PropTypes.func.isRequired,\n        }).isRequired,\n    };\n\n    constructor(props) {\n        super(props);\n\n        this.state = {\n            serverError: null,\n            removing: false,\n        };\n    }\n\n    handleRemoveFromChannel = () => {\n        if (this.state.removing) {\n            return;\n        }\n\n        const {actions, channel, user} = this.props;\n        this.setState({removing: true});\n\n        actions.removeChannelMember(channel.id, user.id).then((result) => {\n            if (result.error) {\n                this.setState({\n                    serverError: result.error.message,\n                    removing: false,\n                });\n                return;\n            }\n\n            this.setState({removing: false});\n            actions.getChannelStats(channel.id);\n        });\n    };\n\n    handleMakeChannelMember = async () => {\n        const {error} = await this.props.actions.updateChannelMemberSchemeRoles(this.props.channel.id, this.props.user.id, true, false);\n        if (error) {\n            this.setState({serverError: error.message});\n        } else {\n            this.props.actions.getChannelStats(this.props.channel.id);\n        }\n    };\n\n    handleMakeChannelAdmin = async () => {\n        const {error} = await this.props.actions.updateChannelMemberSchemeRoles(this.props.channel.id, this.props.user.id, true, true);\n        if (error) {\n            this.setState({serverError: error.message});\n        } else {\n            this.props.actions.getChannelStats(this.props.channel.id);\n        }\n    };\n\n    renderRole(isChannelAdmin) {\n        if (isChannelAdmin) {\n            return (\n                <FormattedMessage\n                    id='channel_members_dropdown.channel_admin'\n                    defaultMessage='Channel Admin'\n                />\n            );\n        }\n        return (\n            <FormattedMessage\n                id='channel_members_dropdown.channel_member'\n                defaultMessage='Channel Member'\n            />\n        );\n    }\n\n    render() {\n        const supportsChannelAdmin = this.props.isLicensed;\n        const isChannelAdmin = supportsChannelAdmin && (Utils.isChannelAdmin(this.props.isLicensed, this.props.channelMember.roles) || this.props.channelMember.scheme_admin);\n\n        let serverError = null;\n        if (this.state.serverError) {\n            serverError = (\n                <div className='has-error'>\n                    <label className='has-error control-label'>{this.state.serverError}</label>\n                </div>\n            );\n        }\n\n        if (this.props.user.id === this.props.currentUserId) {\n            return null;\n        }\n\n        const role = this.renderRole(isChannelAdmin);\n        if (this.props.canChangeMemberRoles) {\n            const canRemoveFromChannel = this.props.canRemoveMember && this.props.channel.name !== Constants.DEFAULT_CHANNEL && !this.props.channel.group_constrained;\n            const canMakeChannelMember = isChannelAdmin;\n            const canMakeChannelAdmin = supportsChannelAdmin && !isChannelAdmin;\n\n            if ((canMakeChannelMember || canMakeChannelAdmin)) {\n                const {index, totalUsers} = this.props;\n                let openUp = false;\n                if (totalUsers > ROWS_FROM_BOTTOM_TO_OPEN_UP && totalUsers - index <= ROWS_FROM_BOTTOM_TO_OPEN_UP) {\n                    openUp = true;\n                }\n\n                return (\n                    <MenuWrapper>\n                        <button\n                            className='dropdown-toggle theme color--link style--none'\n                            type='button'\n                        >\n                            <span>{role} </span>\n                            <span className='sr-only'>{this.props.user.username}</span>\n                            <DropdownIcon/>\n                        </button>\n                        <Menu\n                            openLeft={true}\n                            openUp={openUp}\n                            ariaLabel={Utils.localizeMessage('channel_members_dropdown.menuAriaLabel', 'Channel member role change')}\n                        >\n                            <MenuItemAction\n                                show={canMakeChannelMember}\n                                onClick={this.handleMakeChannelMember}\n                                text={Utils.localizeMessage('channel_members_dropdown.make_channel_member', 'Make Channel Member')}\n                            />\n                            <MenuItemAction\n                                show={canMakeChannelAdmin}\n                                onClick={this.handleMakeChannelAdmin}\n                                text={Utils.localizeMessage('channel_members_dropdown.make_channel_admin', 'Make Channel Admin')}\n                            />\n                            <MenuItemAction\n                                show={canRemoveFromChannel}\n                                onClick={this.handleRemoveFromChannel}\n                                text={Utils.localizeMessage('channel_members_dropdown.remove_from_channel', 'Remove From Channel')}\n                            />\n                            {serverError}\n                        </Menu>\n                    </MenuWrapper>\n                );\n            }\n        }\n\n        if (this.props.canRemoveMember && this.props.channel.name !== Constants.DEFAULT_CHANNEL && !this.props.channel.group_constrained) {\n            return (\n                <button\n                    id='removeMember'\n                    type='button'\n                    className='btn btn-danger btn-message'\n                    onClick={this.handleRemoveFromChannel}\n                    disabled={this.state.removing}\n                >\n                    <span className='sr-only'>{role}</span>\n                    <span className='sr-only'>{this.props.user.username}</span>\n                    <FormattedMessage\n                        id='channel_members_dropdown.remove_member'\n                        defaultMessage='Remove Member'\n                    />\n                </button>\n            );\n        }\n\n        if (this.props.channel.name === Constants.DEFAULT_CHANNEL) {\n            return (\n                <div/>\n            );\n        }\n\n        return (\n            <div>\n                {this.renderRole(isChannelAdmin)}\n            </div>\n        );\n    }\n}\n","// Copyright (c) 2015-present Mattermost, Inc. All Rights Reserved.\n// See LICENSE.txt for license information.\n\nimport {connect} from 'react-redux';\nimport {bindActionCreators} from 'redux';\nimport {getChannelStats, updateChannelMemberSchemeRoles, removeChannelMember} from 'mattermost-redux/actions/channels';\nimport {haveIChannelPermission} from 'mattermost-redux/selectors/entities/roles';\nimport {getLicense} from 'mattermost-redux/selectors/entities/general';\nimport {Permissions} from 'mattermost-redux/constants';\nimport {getCurrentUserId} from 'mattermost-redux/selectors/entities/users';\n\nimport {canManageMembers} from 'utils/channel_utils.jsx';\n\nimport ChannelMembersDropdown from './channel_members_dropdown.jsx';\n\nfunction mapStateToProps(state, ownProps) {\n    const {channel} = ownProps;\n    const canChangeMemberRoles = haveIChannelPermission(\n        state,\n        {\n            channel: channel.id,\n            team: channel.team_id,\n            permission: Permissions.MANAGE_CHANNEL_ROLES,\n        }\n    );\n    const license = getLicense(state);\n    const isLicensed = license.IsLicensed === 'true';\n    const canRemoveMember = canManageMembers(channel);\n\n    return {\n        currentUserId: getCurrentUserId(state),\n        isLicensed,\n        canChangeMemberRoles,\n        canRemoveMember,\n    };\n}\n\nfunction mapDispatchToProps(dispatch) {\n    return {\n        actions: bindActionCreators({\n            getChannelStats,\n            updateChannelMemberSchemeRoles,\n            removeChannelMember,\n        }, dispatch),\n    };\n}\n\nexport default connect(mapStateToProps, mapDispatchToProps)(ChannelMembersDropdown);\n","// Copyright (c) 2015-present Mattermost, Inc. All Rights Reserved.\n// See LICENSE.txt for license information.\n\nimport PropTypes from 'prop-types';\nimport React from 'react';\n\nimport Constants from 'utils/constants.jsx';\nimport * as UserAgent from 'utils/user_agent.jsx';\n\nimport ChannelMembersDropdown from 'components/channel_members_dropdown';\nimport SearchableUserList from 'components/searchable_user_list/searchable_user_list_container.jsx';\n\nconst USERS_PER_PAGE = 50;\n\nexport default class MemberListChannel extends React.PureComponent {\n    static propTypes = {\n        currentTeamId: PropTypes.string.isRequired,\n        currentChannelId: PropTypes.string.isRequired,\n        searchTerm: PropTypes.string.isRequired,\n        usersToDisplay: PropTypes.arrayOf(PropTypes.object).isRequired,\n        actionUserProps: PropTypes.object.isRequired,\n        totalChannelMembers: PropTypes.number.isRequired,\n        channel: PropTypes.object.isRequired,\n        actions: PropTypes.shape({\n            searchProfiles: PropTypes.func.isRequired,\n            getChannelStats: PropTypes.func.isRequired,\n            setModalSearchTerm: PropTypes.func.isRequired,\n            loadProfilesAndTeamMembersAndChannelMembers: PropTypes.func.isRequired,\n            loadStatusesForProfilesList: PropTypes.func.isRequired,\n            loadTeamMembersAndChannelMembersForProfilesList: PropTypes.func.isRequired,\n        }).isRequired,\n    }\n\n    constructor(props) {\n        super(props);\n\n        this.searchTimeoutId = 0;\n\n        this.state = {\n            loading: true,\n        };\n    }\n\n    componentDidMount() {\n        const {\n            actions,\n            currentChannelId,\n            currentTeamId,\n        } = this.props;\n\n        actions.loadProfilesAndTeamMembersAndChannelMembers(0, Constants.PROFILE_CHUNK_SIZE, currentTeamId, currentChannelId).then(({data}) => {\n            if (data) {\n                this.loadComplete();\n            }\n        });\n\n        actions.getChannelStats(currentChannelId);\n    }\n\n    componentWillUnmount() {\n        this.props.actions.setModalSearchTerm('');\n    }\n\n    UNSAFE_componentWillReceiveProps(nextProps) { // eslint-disable-line camelcase\n        if (this.props.searchTerm !== nextProps.searchTerm) {\n            clearTimeout(this.searchTimeoutId);\n            const searchTerm = nextProps.searchTerm;\n\n            if (searchTerm === '') {\n                this.loadComplete();\n                this.searchTimeoutId = '';\n                return;\n            }\n\n            const searchTimeoutId = setTimeout(\n                async () => {\n                    const {data} = await this.props.actions.searchProfiles(searchTerm, {team_id: nextProps.currentTeamId, in_channel_id: nextProps.currentChannelId});\n\n                    if (searchTimeoutId !== this.searchTimeoutId) {\n                        return;\n                    }\n\n                    this.setState({loading: true});\n\n                    nextProps.actions.loadStatusesForProfilesList(data);\n                    nextProps.actions.loadTeamMembersAndChannelMembersForProfilesList(data, nextProps.currentTeamId, nextProps.currentChannelId).then(({data: membersLoaded}) => {\n                        if (membersLoaded) {\n                            this.loadComplete();\n                        }\n                    });\n                },\n                Constants.SEARCH_TIMEOUT_MILLISECONDS\n            );\n\n            this.searchTimeoutId = searchTimeoutId;\n        }\n    }\n\n    loadComplete = () => {\n        this.setState({loading: false});\n    }\n\n    nextPage = (page) => {\n        this.props.actions.loadProfilesAndTeamMembersAndChannelMembers(page + 1, USERS_PER_PAGE);\n    }\n\n    handleSearch = (term) => {\n        this.props.actions.setModalSearchTerm(term);\n    }\n\n    render() {\n        const channelIsArchived = this.props.channel.delete_at !== 0;\n        return (\n            <SearchableUserList\n                users={this.props.usersToDisplay}\n                usersPerPage={USERS_PER_PAGE}\n                total={this.props.totalChannelMembers}\n                nextPage={this.nextPage}\n                search={this.handleSearch}\n                actions={channelIsArchived ? [] : [ChannelMembersDropdown]}\n                actionUserProps={this.props.actionUserProps}\n                focusOnMount={!UserAgent.isMobile()}\n            />\n        );\n    }\n}\n","// Copyright (c) 2015-present Mattermost, Inc. All Rights Reserved.\n// See LICENSE.txt for license information.\n\nimport {connect} from 'react-redux';\nimport {bindActionCreators} from 'redux';\nimport {createSelector} from 'reselect';\nimport {searchProfilesInCurrentChannel, getProfilesInCurrentChannel} from 'mattermost-redux/selectors/entities/users';\nimport {getMembersInCurrentChannel, getCurrentChannelStats, getCurrentChannel} from 'mattermost-redux/selectors/entities/channels';\nimport {getMembersInCurrentTeam} from 'mattermost-redux/selectors/entities/teams';\nimport {getChannelStats} from 'mattermost-redux/actions/channels';\nimport {searchProfiles} from 'mattermost-redux/actions/users';\nimport {sortByUsername} from 'mattermost-redux/utils/user_utils';\n\nimport {\n    loadProfilesAndTeamMembersAndChannelMembers,\n    loadTeamMembersAndChannelMembersForProfilesList,\n} from 'actions/user_actions.jsx';\nimport {loadStatusesForProfilesList} from 'actions/status_actions.jsx';\nimport {setModalSearchTerm} from 'actions/views/search';\n\nimport MemberListChannel from './member_list_channel.jsx';\n\nconst getUsersAndActionsToDisplay = createSelector(\n    (state, users) => users,\n    getMembersInCurrentTeam,\n    getMembersInCurrentChannel,\n    getCurrentChannel,\n    (users = [], teamMembers = {}, channelMembers = {}, channel = {}) => {\n        const actionUserProps = {};\n        const usersToDisplay = [];\n\n        for (let i = 0; i < users.length; i++) {\n            const user = users[i];\n\n            if (teamMembers[user.id] && channelMembers[user.id] && user.delete_at === 0) {\n                usersToDisplay.push(user);\n\n                actionUserProps[user.id] = {\n                    channel,\n                    teamMember: teamMembers[user.id],\n                    channelMember: channelMembers[user.id],\n                };\n            }\n        }\n\n        return {\n            usersToDisplay: usersToDisplay.sort(sortByUsername),\n            actionUserProps,\n        };\n    }\n);\n\nfunction mapStateToProps(state) {\n    const searchTerm = state.views.search.modalSearch;\n\n    let users;\n    if (searchTerm) {\n        users = searchProfilesInCurrentChannel(state, searchTerm);\n    } else {\n        users = getProfilesInCurrentChannel(state);\n    }\n\n    const stats = getCurrentChannelStats(state) || {member_count: 0};\n\n    return {\n        ...getUsersAndActionsToDisplay(state, users),\n        currentTeamId: state.entities.teams.currentTeamId,\n        currentChannelId: state.entities.channels.currentChannelId,\n        searchTerm,\n        totalChannelMembers: stats.member_count,\n    };\n}\n\nfunction mapDispatchToProps(dispatch) {\n    return {\n        actions: bindActionCreators({\n            searchProfiles,\n            getChannelStats,\n            setModalSearchTerm,\n            loadProfilesAndTeamMembersAndChannelMembers,\n            loadStatusesForProfilesList,\n            loadTeamMembersAndChannelMembersForProfilesList,\n        }, dispatch),\n    };\n}\n\nexport default connect(mapStateToProps, mapDispatchToProps)(MemberListChannel);\n","// Copyright (c) 2015-present Mattermost, Inc. All Rights Reserved.\n// See LICENSE.txt for license information.\n\nimport PropTypes from 'prop-types';\nimport React from 'react';\nimport {Modal} from 'react-bootstrap';\nimport {FormattedMessage} from 'react-intl';\n\nimport MemberListChannel from 'components/member_list_channel';\nimport ChannelInviteModal from 'components/channel_invite_modal';\nimport {ModalIdentifiers} from 'utils/constants';\n\nexport default class ChannelMembersModal extends React.PureComponent {\n    static propTypes = {\n\n        /**\n         * Bool whether user has permission to manage current channel\n         */\n        canManageChannelMembers: PropTypes.bool.isRequired,\n\n        /**\n         * Object with info about current channel\n         */\n        channel: PropTypes.object.isRequired,\n\n        /**\n         * Function that is called when modal is hidden\n         */\n        onHide: PropTypes.func.isRequired,\n\n        actions: PropTypes.shape({\n            openModal: PropTypes.func.isRequired,\n        }).isRequired,\n    }\n\n    constructor(props) {\n        super(props);\n\n        this.state = {\n            show: true,\n        };\n    }\n\n    handleHide = () => {\n        this.setState({\n            show: false,\n        });\n    }\n\n    handleExit = () => {\n        this.props.onHide();\n    }\n\n    onAddNewMembersButton = () => {\n        const {channel, actions} = this.props;\n\n        actions.openModal({\n            modalId: ModalIdentifiers.CHANNEL_INVITE,\n            dialogType: ChannelInviteModal,\n            dialogProps: {channel},\n        });\n\n        this.handleExit();\n    }\n\n    render() {\n        const channelIsArchived = this.props.channel.delete_at !== 0;\n        return (\n            <div>\n                <Modal\n                    dialogClassName='a11y__modal more-modal more-modal--action'\n                    show={this.state.show}\n                    onHide={this.handleHide}\n                    onExited={this.handleExit}\n                    role='dialog'\n                    aria-labelledby='channelMembersModalLabel'\n                >\n                    <Modal.Header closeButton={true}>\n                        <Modal.Title\n                            componentClass='h1'\n                            id='channelMembersModalLabel'\n                        >\n                            <span className='name'>{this.props.channel.display_name}</span>\n                            <FormattedMessage\n                                id='channel_members_modal.members'\n                                defaultMessage=' Members'\n                            />\n                        </Modal.Title>\n                        {this.props.canManageChannelMembers && !channelIsArchived &&\n                            <a\n                                id='showInviteModal'\n                                className='btn btn-md btn-primary'\n                                href='#'\n                                onClick={this.onAddNewMembersButton}\n                            >\n                                <FormattedMessage\n                                    id='channel_members_modal.addNew'\n                                    defaultMessage=' Add New Members'\n                                />\n                            </a>\n                        }\n                    </Modal.Header>\n                    <Modal.Body>\n                        <MemberListChannel\n                            channel={this.props.channel}\n                        />\n                    </Modal.Body>\n                </Modal>\n            </div>\n        );\n    }\n}\n","// Copyright (c) 2015-present Mattermost, Inc. All Rights Reserved.\n// See LICENSE.txt for license information.\n\nimport {bindActionCreators} from 'redux';\nimport {connect} from 'react-redux';\nimport {canManageChannelMembers} from 'mattermost-redux/selectors/entities/channels';\n\nimport {openModal} from 'actions/views/modals';\n\nimport ChannelMembersModal from './channel_members_modal';\n\nconst mapStateToProps = (state) => ({\n    canManageChannelMembers: canManageChannelMembers(state),\n});\n\nconst mapDispatchToProps = (dispatch) => ({\n    actions: bindActionCreators({openModal}, dispatch),\n});\n\nexport default connect(mapStateToProps, mapDispatchToProps)(ChannelMembersModal);\n","// Copyright (c) 2015-present Mattermost, Inc. All Rights Reserved.\n// See LICENSE.txt for license information.\n\nimport React from 'react';\nimport {FormattedMessage} from 'react-intl';\n\nexport default class MemberIcon extends React.PureComponent {\n    render() {\n        return (\n            <span {...this.props}>\n                <FormattedMessage\n                    id='generic_icons.member'\n                    defaultMessage='Member Icon'\n                >\n                    {(ariaLabel) => (\n                        <svg\n                            width='14px'\n                            height='14px'\n                            viewBox='0 0 16 16'\n                            role='icon'\n                            aria-label={ariaLabel}\n                        >\n                            <g\n                                id='Symbols'\n                                stroke='none'\n                                strokeWidth='1'\n                                fill='inherit'\n                                fillRule='evenodd'\n                            >\n                                <g\n                                    id='Channel-Header/Web-HD'\n                                    transform='translate(-725.000000, -32.000000)'\n                                    fillRule='nonzero'\n                                    fill='inherit'\n                                >\n                                    <g id='Channel-Header'>\n                                        <g\n                                            id='user-count'\n                                            transform='translate(676.000000, 22.000000)'\n                                        >\n                                            <path\n                                                d='M64.9481342,24 C64.6981342,20.955 63.2551342,19.076 60.6731342,18.354 C61.4831342,17.466 61.9881342,16.296 61.9881342,15 C61.9881342,12.238 59.7501342,10 56.9881342,10 C54.2261342,10 51.9881342,12.238 51.9881342,15 C51.9881342,16.297 52.4941342,17.467 53.3031342,18.354 C50.7221342,19.076 49.2771342,20.955 49.0271342,24 C49.0161342,24.146 49.0061342,24.577 49.0001342,25.001 C48.9911342,25.553 49.4361342,26 49.9881342,26 L63.9881342,26 C64.5411342,26 64.9851342,25.553 64.9761342,25.001 C64.9701342,24.577 64.9601342,24.146 64.9481342,24 Z M56.9881342,12 C58.6421342,12 59.9881342,13.346 59.9881342,15 C59.9881342,16.654 58.6421342,18 56.9881342,18 C55.3341342,18 53.9881342,16.654 53.9881342,15 C53.9881342,13.346 55.3341342,12 56.9881342,12 Z M51.0321342,24 C51.2981342,21.174 52.7911342,20 55.9881342,20 L57.9881342,20 C61.1851342,20 62.6781342,21.174 62.9441342,24 L51.0321342,24 Z'\n                                                id='User_4_x2C__Profile_5-Copy-9'\n                                            />\n                                        </g>\n                                    </g>\n                                </g>\n                            </g>\n                        </svg>\n                    )}\n                </FormattedMessage>\n            </span>\n        );\n    }\n}\n","// Copyright (c) 2015-present Mattermost, Inc. All Rights Reserved.\n// See LICENSE.txt for license information.\n\nimport React from 'react';\nimport {FormattedMessage} from 'react-intl';\n\nimport {localizeMessage} from 'utils/utils.jsx';\n\nexport default class MessageIcon extends React.PureComponent {\n    render() {\n        return (\n            <button\n                {...this.props}\n                aria-label={localizeMessage('members_popover.button.message', 'message')}\n                className='style--none icon icon__message'\n            >\n                <FormattedMessage\n                    id='generic_icons.message'\n                    defaultMessage='Message Icon'\n                >\n                    {(ariaLabel) => (\n                        <svg\n                            width='18px'\n                            height='16px'\n                            viewBox='0 0 18 16'\n                            role='icon'\n                            aria-label={ariaLabel}\n                        >\n                            <g\n                                stroke='none'\n                                strokeWidth='1'\n                                fill='inherit'\n                                fillRule='evenodd'\n                            >\n                                <g\n                                    transform='translate(-200.000000, -174.000000)'\n                                    fill='inherit'\n                                >\n                                    <g transform='translate(200.000000, 174.000000)'>\n                                        <path d='M7.2546625,1.42801356 C10.458475,1.42801356 12.999475,3.24528136 12.999475,5.52023729 C12.9895,8.04188475 10.6062625,9.89326102 7.40245,9.89326102 C7.40245,9.89326102 6.9134125,9.91229831 6.4115125,9.83747119 L5.82535,9.79622373 L5.15335,10.3586169 C4.997425,10.5397356 4.3199125,11.1095322 3.736375,11.4794373 C4.0915375,10.4598847 4.07605,10.1370441 4.07605,10.1370441 L4.1251375,9.49004068 L3.55315,9.19549153 C2.0986375,8.44616271 1.4444875,6.88616271 1.4444875,5.52023729 C1.4444875,3.24528136 4.05085,1.42801356 7.2546625,1.42801356 M7.2546625,0.370386441 C3.465475,0.370386441 0.3944875,2.65829831 0.3944875,5.52023729 C0.3944875,7.3028678 1.2623125,9.20342373 3.0751375,10.1370441 C3.0751375,10.1478847 3.07225,10.1560814 3.07225,10.1679797 C3.07225,10.9426915 2.43175,12.0048136 2.1794875,12.4429356 L2.1805375,12.4429356 C2.1605875,12.4902644 2.148775,12.5420881 2.148775,12.5973492 C2.148775,12.8141627 2.322025,12.9881424 2.5375375,12.9881424 C2.5693,12.9881424 2.6210125,12.9815322 2.6393875,12.9815322 C2.6446375,12.9815322 2.6467375,12.9815322 2.6462125,12.9831186 C3.986275,12.762339 5.9642125,11.2435864 6.2576875,10.8837288 C6.5585125,10.928678 6.761425,10.9358169 7.0136875,10.9358169 C7.120525,10.9358169 7.2347125,10.9342305 7.3696375,10.9342305 C11.1583,10.9342305 14.094625,8.75446102 14.049475,5.52023729 C14.049475,2.65829831 11.0435875,0.370386441 7.2546625,0.370386441'/>\n                                        <path d='M17.2055125,9.79172881 C17.2055125,8.35811525 16.6498,7.26532203 15.2624875,6.4451322 C15.228625,6.82614237 15.120475,7.23517966 15.0031375,7.59477288 C15.8998375,8.21903729 16.1555125,8.85995932 16.1555125,9.79172881 C16.1555125,10.9323797 15.62815,11.7597085 14.40175,12.3919051 L13.879375,12.653139 C13.879375,12.653139 13.9337125,14.0082237 14.0140375,14.3511593 C12.9895,13.5946915 12.6374875,12.9630237 12.6374875,12.9630237 L12.08545,13.0486915 C11.86705,13.0809492 11.276425,13.0812136 11.276425,13.0812136 C9.85,13.0812136 8.7929125,12.7388068 7.8909625,12.0278169 C8.135875,12.0124814 6.42805,12.0132746 6.3899875,12.0468542 C7.4326375,13.3297559 9.1373125,14.1388407 11.276425,14.1388407 C11.3927125,14.1388407 11.49115,14.1398983 11.58355,14.1398983 C11.801425,14.1398983 11.9773,14.1338169 12.237175,14.095478 C12.491275,14.4058915 13.914025,15.7728746 15.0724375,15.9629831 C15.0719125,15.9619254 15.073225,15.9619254 15.078475,15.9619254 C15.0939625,15.9619254 15.13885,15.967478 15.16615,15.967478 C15.3522625,15.967478 15.5024125,15.8167661 15.5024125,15.6293017 C15.5024125,15.5817085 15.49165,15.5367593 15.47485,15.4960407 L15.4759,15.4960407 C15.258025,15.117939 14.9159875,14.0129831 14.9159875,13.3435051 C14.9159875,13.3331932 14.9128375,13.3260542 14.9128375,13.3168 C16.4797,12.5095661 17.2055125,11.3321627 17.2055125,9.79172881'/>\n                                    </g>\n                                </g>\n                            </g>\n                        </svg>\n                    )}\n                </FormattedMessage>\n            </button>\n        );\n    }\n}\n","// Copyright (c) 2015-present Mattermost, Inc. All Rights Reserved.\n// See LICENSE.txt for license information.\n\nimport PropTypes from 'prop-types';\nimport React from 'react';\n\nimport {Client4} from 'mattermost-redux/client';\n\nimport ProfilePicture from 'components/profile_picture';\nimport MessageIcon from 'components/svg/message_icon';\nimport {UserStatuses} from 'utils/constants';\nimport * as Utils from 'utils/utils.jsx';\nimport BotBadge from 'components/widgets/badges/bot_badge.jsx';\n\nexport default class PopoverListMembersItem extends React.PureComponent {\n    static propTypes = {\n        showMessageIcon: PropTypes.bool.isRequired,\n        onItemClick: PropTypes.func.isRequired,\n        status: PropTypes.string.isRequired,\n        user: PropTypes.object.isRequired,\n    };\n\n    static defaultProps = {\n        status: UserStatuses.OFFLINE,\n    };\n\n    handleClick = () => {\n        this.props.onItemClick(this.props.user);\n    };\n\n    render() {\n        if (!this.props.user) {\n            return null;\n        }\n\n        const name = Utils.getDisplayNameByUser(this.props.user);\n        if (!name) {\n            return null;\n        }\n\n        let messageIcon;\n        if (this.props.showMessageIcon) {\n            messageIcon = (\n                <MessageIcon aria-hidden='true'/>\n            );\n        }\n\n        const botClass = this.props.user.is_bot ? ' more-modal__row--bot' : '';\n\n        const status = this.props.user.is_bot ? null : this.props.status;\n\n        return (\n            <div\n                tabIndex='0'\n                aria-label={name.toLowerCase()}\n                className={'more-modal__row' + botClass}\n                onClick={this.handleClick}\n            >\n                <ProfilePicture\n                    src={Client4.getProfilePictureUrl(this.props.user.id, this.props.user.last_picture_update)}\n                    status={status}\n                    width='32'\n                    height='32'\n                />\n                <div className='more-modal__details d-flex whitespace--nowrap'>\n                    <div className='more-modal__name'>\n                        {name}\n                    </div>\n                    <BotBadge\n                        show={Boolean(this.props.user.is_bot)}\n                        className='badge-popoverlist'\n                    />\n                </div>\n                <div className='more-modal__actions'>\n                    {messageIcon}\n                </div>\n            </div>\n        );\n    }\n}\n","// Copyright (c) 2015-present Mattermost, Inc. All Rights Reserved.\n// See LICENSE.txt for license information.\n\nimport $ from 'jquery';\nimport PropTypes from 'prop-types';\nimport React from 'react';\nimport {Overlay, OverlayTrigger, Popover, Tooltip} from 'react-bootstrap';\nimport {FormattedMessage} from 'react-intl';\n\nimport {browserHistory} from 'utils/browser_history';\nimport {canManageMembers} from 'utils/channel_utils.jsx';\nimport {Constants} from 'utils/constants.jsx';\nimport * as Utils from 'utils/utils.jsx';\nimport ChannelInviteModal from 'components/channel_invite_modal';\nimport ChannelMembersModal from 'components/channel_members_modal';\nimport MemberIcon from 'components/svg/member_icon';\nimport TeamMembersModal from 'components/team_members_modal';\n\nimport PopoverListMembersItem from './popover_list_members_item';\n\nexport default class PopoverListMembers extends React.Component {\n    static propTypes = {\n        channel: PropTypes.object.isRequired,\n        statuses: PropTypes.object.isRequired,\n        users: PropTypes.array.isRequired,\n        memberCount: PropTypes.number,\n        currentUserId: PropTypes.string.isRequired,\n        teamUrl: PropTypes.string,\n        actions: PropTypes.shape({\n            openModal: PropTypes.func.isRequired,\n            loadProfilesAndStatusesInChannel: PropTypes.func.isRequired,\n            openDirectChannelToUserId: PropTypes.func.isRequired,\n        }).isRequired,\n    };\n\n    constructor(props) {\n        super(props);\n        this.membersList = React.createRef();\n\n        this.state = {\n            showPopover: false,\n            showTeamMembersModal: false,\n            showChannelMembersModal: false,\n            showChannelInviteModal: false,\n            sortedUsers: this.sortUsers(props.users, props.statuses),\n        };\n    }\n\n    componentDidUpdate() {\n        $('.member-list__popover .popover-content .more-modal__body').perfectScrollbar();\n    }\n\n    UNSAFE_componentWillReceiveProps(nextProps) { // eslint-disable-line camelcase\n        if (this.props.users !== nextProps.users || this.props.statuses !== nextProps.statuses) {\n            const sortedUsers = this.sortUsers(nextProps.users, nextProps.statuses);\n\n            this.setState({sortedUsers});\n        }\n    }\n\n    sortUsers = (users, statuses) => {\n        return Utils.sortUsersByStatusAndDisplayName(users, statuses);\n    };\n\n    handleShowDirectChannel = (user) => {\n        const {actions} = this.props;\n        const teammateId = user.id;\n\n        if (teammateId) {\n            actions.openDirectChannelToUserId(teammateId).then(({data}) => {\n                if (data) {\n                    browserHistory.push(this.props.teamUrl + '/channels/' + data.name);\n                }\n                this.closePopover();\n            });\n        }\n    };\n\n    closePopover = () => {\n        this.setState({showPopover: false});\n    };\n\n    showMembersModal = (e) => {\n        e.preventDefault();\n\n        this.setState({\n            showPopover: false,\n            showChannelMembersModal: true,\n        });\n    };\n\n    hideChannelMembersModal = () => {\n        this.setState({showChannelMembersModal: false});\n    };\n\n    showChannelInviteModal = () => {\n        this.setState({showChannelInviteModal: true});\n    };\n\n    hideChannelInviteModal = () => {\n        this.setState({showChannelInviteModal: false});\n    };\n\n    hideTeamMembersModal = () => {\n        this.setState({showTeamMembersModal: false});\n    };\n\n    handleGetProfilesInChannel = (e) => {\n        this.setState({popoverTarget: e.target, showPopover: !this.state.showPopover});\n        this.props.actions.loadProfilesAndStatusesInChannel(this.props.channel.id, 0, undefined, 'status'); // eslint-disable-line no-undefined\n    };\n\n    getTargetPopover = () => {\n        this.membersList.current.focus();\n        return this.state.popoverTarget;\n    };\n\n    render() {\n        const isDirectChannel = this.props.channel.type === Constants.DM_CHANNEL;\n\n        const items = this.state.sortedUsers.map((user) => (\n            <PopoverListMembersItem\n                key={user.id}\n                onItemClick={this.handleShowDirectChannel}\n                showMessageIcon={this.props.currentUserId !== user.id && !isDirectChannel}\n                status={this.props.statuses[user.id]}\n                user={user}\n            />\n        ));\n\n        const channelIsArchived = this.props.channel.delete_at !== 0;\n        let popoverButton;\n        if (this.props.channel.type !== Constants.GM_CHANNEL && !channelIsArchived) {\n            let membersName = (\n                <FormattedMessage\n                    id='members_popover.manageMembers'\n                    defaultMessage='Manage Members'\n                />\n            );\n\n            const manageMembers = canManageMembers(this.props.channel);\n            const isDefaultChannel = this.props.channel.name === Constants.DEFAULT_CHANNEL;\n\n            if (isDefaultChannel || !manageMembers) {\n                membersName = (\n                    <FormattedMessage\n                        id='members_popover.viewMembers'\n                        defaultMessage='View Members'\n                    />\n                );\n            }\n\n            popoverButton = (\n                <div\n                    className='more-modal__button'\n                    key={'popover-member-more'}\n                >\n                    <button\n                        className='btn btn-link'\n                        onClick={this.showMembersModal}\n                    >\n                        {membersName}\n                    </button>\n                </div>\n            );\n        }\n\n        const count = this.props.memberCount;\n        let countText = '-';\n        if (count > 0) {\n            countText = count.toString();\n        }\n\n        const title = (\n            <FormattedMessage\n                id='members_popover.title'\n                defaultMessage='Channel Members'\n            />\n        );\n\n        let channelMembersModal;\n        if (this.state.showChannelMembersModal) {\n            channelMembersModal = (\n                <ChannelMembersModal\n                    onHide={this.hideChannelMembersModal}\n                    showInviteModal={this.showChannelInviteModal}\n                    channel={this.props.channel}\n                />\n            );\n        }\n\n        let teamMembersModal;\n        if (this.state.showTeamMembersModal) {\n            teamMembersModal = (\n                <TeamMembersModal\n                    onHide={this.hideTeamMembersModal}\n                />\n            );\n        }\n\n        let channelInviteModal;\n        if (this.state.showChannelInviteModal) {\n            channelInviteModal = (\n                <ChannelInviteModal\n                    onHide={this.hideChannelInviteModal}\n                    channel={this.props.channel}\n                />\n            );\n        }\n\n        const channelMembersTooltip = (\n            <Tooltip id='channelMembersTooltip'>\n                <FormattedMessage\n                    id='channel_header.channelMembers'\n                    defaultMessage='Members'\n                />\n            </Tooltip>\n        );\n\n        const ariaLabel = `${Utils.localizeMessage('channel_header.channelMembers', 'Members')}`.toLowerCase();\n\n        return (\n            <div id='channelMember'>\n                <button\n                    id='member_popover'\n                    aria-label={ariaLabel}\n                    className={'style--none member-popover__trigger channel-header__icon wide ' + (this.state.showPopover ? 'active' : '')}\n                    ref='member_popover_target'\n                    onClick={this.handleGetProfilesInChannel}\n                >\n                    <OverlayTrigger\n                        delayShow={Constants.OVERLAY_TIME_DELAY}\n                        placement='bottom'\n                        overlay={channelMembersTooltip}\n                    >\n                        <div>\n                            <span\n                                id='channelMemberCountText'\n                                className='icon__text'\n                            >\n                                {countText}\n                            </span>\n                            <MemberIcon\n                                id='channelMemberIcon'\n                                className='icon icon__members'\n                                aria-hidden='true'\n                            />\n                        </div>\n                    </OverlayTrigger>\n                </button>\n                <Overlay\n                    rootClose={true}\n                    onHide={this.closePopover}\n                    show={this.state.showPopover}\n                    target={this.getTargetPopover}\n                    placement='bottom'\n                >\n                    <Popover\n                        className='member-list__popover'\n                        id='member-list-popover'\n                    >\n                        <div\n                            className='more-modal__header'\n                        >\n                            {title}\n                            {this.props.channel.group_constrained && <div className='subhead'>\n                                <FormattedMessage\n                                    id='channel_header.groupConstrained'\n                                    defaultMessage='Members managed by linked groups.'\n                                />\n                            </div>}\n                        </div>\n                        <div className='more-modal__body'>\n                            <div\n                                tabIndex='-1'\n                                role='presentation'\n                                ref={this.membersList}\n                                className='more-modal__list'\n                            >\n                                {items}\n                            </div>\n                        </div>\n                        {popoverButton}\n                    </Popover>\n                </Overlay>\n                {channelMembersModal}\n                {teamMembersModal}\n                {channelInviteModal}\n            </div>\n        );\n    }\n}\n","// Copyright (c) 2015-present Mattermost, Inc. All Rights Reserved.\n// See LICENSE.txt for license information.\n\nimport {connect} from 'react-redux';\nimport {bindActionCreators} from 'redux';\nimport {getAllChannelStats} from 'mattermost-redux/selectors/entities/channels';\nimport {getCurrentRelativeTeamUrl} from 'mattermost-redux/selectors/entities/teams';\nimport {getCurrentUserId, getUserStatuses, makeGetProfilesInChannel} from 'mattermost-redux/selectors/entities/users';\n\nimport {openDirectChannelToUserId} from 'actions/channel_actions.jsx';\nimport {loadProfilesAndStatusesInChannel} from 'actions/user_actions.jsx';\nimport {openModal} from 'actions/views/modals';\n\nimport PopoverListMembers from './popover_list_members.jsx';\n\nfunction makeMapStateToProps() {\n    const doGetProfilesInChannel = makeGetProfilesInChannel();\n\n    return function mapStateToProps(state, ownProps) {\n        const stats = getAllChannelStats(state)[ownProps.channel.id] || {};\n        const users = doGetProfilesInChannel(state, ownProps.channel.id, true);\n\n        return {\n            currentUserId: getCurrentUserId(state),\n            memberCount: stats.member_count,\n            users,\n            statuses: getUserStatuses(state),\n            teamUrl: getCurrentRelativeTeamUrl(state),\n        };\n    };\n}\n\nfunction mapDispatchToProps(dispatch) {\n    return {\n        actions: bindActionCreators({\n            openModal,\n            loadProfilesAndStatusesInChannel,\n            openDirectChannelToUserId,\n        }, dispatch),\n    };\n}\n\nexport default connect(makeMapStateToProps, mapDispatchToProps)(PopoverListMembers);\n","// Copyright (c) 2015-present Mattermost, Inc. All Rights Reserved.\n// See LICENSE.txt for license information.\n\nimport React from 'react';\nimport {FormattedMessage} from 'react-intl';\n\nexport default class PinIcon extends React.PureComponent {\n    render() {\n        return (\n            <span {...this.props}>\n                <FormattedMessage\n                    id='generic_icons.pin'\n                    defaultMessage='Pin Icon'\n                >\n                    {(ariaLabel) => (\n                        <svg\n                            width='14px'\n                            height='14px'\n                            viewBox='0 0 16 16'\n                            version='1.1'\n                            role='icon'\n                            aria-label={ariaLabel}\n                        >\n                            <g\n                                id='Symbols'\n                                stroke='inherit'\n                                strokeWidth='1'\n                                fill='inherit'\n                                fillRule='evenodd'\n                            >\n                                <g\n                                    transform='translate(-775.000000, -32.000000)'\n                                    fillRule='nonzero'\n                                    fill='inherit'\n                                >\n                                    <g>\n                                        <g transform='translate(764.000000, 22.000000)'>\n                                            <g transform='translate(10.000000, 10.000000)'>\n                                                <path d='M16.456,7.291 L9.483,0.25 C9.31,0.078 9.178,0 9.08,0 C8.896,0 8.831,0.276 8.831,0.732 L8.831,3.044 L5.831,5.96 L2.578,6.268 C1.887,6.405 1.668,6.917 2.167,7.41 L4.781,10.011 L3.83,10.961 L1.05,15.511 C0.93,15.761 1.03,15.862 1.28,15.74 L5.83,12.961 L6.786,12.005 L9.359,14.565 C9.556,14.76 9.754,14.854 9.929,14.854 C10.197,14.854 10.413,14.634 10.497,14.219 L10.83,10.961 L13.746,7.961 L16.082,7.961 C16.788,7.961 16.955,7.785 16.456,7.291 Z M12.312,6.567 L9.396,9.567 L8.911,10.065 L8.84,10.757 L8.797,11.184 L5.589,7.992 L6.018,7.952 L6.72,7.886 L7.225,7.396 L10.225,4.48 L10.547,4.167 L12.616,6.256 L12.312,6.567 Z'/>\n                                            </g>\n                                        </g>\n                                    </g>\n                                </g>\n                            </g>\n                        </svg>\n                    )}\n                </FormattedMessage>\n            </span>\n        );\n    }\n}\n","// Copyright (c) 2015-present Mattermost, Inc. All Rights Reserved.\n// See LICENSE.txt for license information.\n\nimport React from 'react';\n\nimport {localizeMessage} from 'utils/utils';\nimport {ChannelHeaderDropdownItems} from 'components/channel_header_dropdown';\nimport Menu from 'components/widgets/menu/menu.jsx';\n\nexport default class ChannelHeaderDropdown extends React.PureComponent {\n    render() {\n        return (\n            <Menu\n                id='channelHeaderDropdownMenu'\n                ariaLabel={localizeMessage('channel_header.menuAriaLabel', 'Channel Menu').toLowerCase()}\n            >\n                <ChannelHeaderDropdownItems isMobile={false}/>\n            </Menu>\n        );\n    }\n}\n","// Copyright (c) 2015-present Mattermost, Inc. All Rights Reserved.\n// See LICENSE.txt for license information.\n\nimport PropTypes from 'prop-types';\nimport React from 'react';\n\nexport default class MobileChannelHeaderPlug extends React.PureComponent {\n    static propTypes = {\n\n        /*\n         * Components or actions to add as channel header buttons\n         */\n        components: PropTypes.array,\n\n        /*\n         * Set to true if the plug is in the dropdown\n         */\n        isDropdown: PropTypes.bool.isRequired,\n\n        channel: PropTypes.object.isRequired,\n        channelMember: PropTypes.object.isRequired,\n\n        /*\n         * Logged in user's theme\n         */\n        theme: PropTypes.object.isRequired,\n    }\n\n    createButton = (plug) => {\n        const onClick = () => this.fireAction(plug);\n\n        if (this.props.isDropdown) {\n            return (\n                <li\n                    key={'mobileChannelHeaderItem' + plug.id}\n                    role='presentation'\n                    className='MenuItem'\n                >\n                    <a\n                        role='menuitem'\n                        href='#'\n                        onClick={onClick}\n                    >\n                        {plug.dropdownText}\n                    </a>\n                </li>\n            );\n        }\n\n        return (\n            <li className='flex-parent--center'>\n                <button\n                    className='navbar-toggle navbar-right__icon'\n                    onClick={onClick}\n                >\n                    <span className='icon navbar-plugin-button'>\n                        {plug.icon}\n                    </span>\n                </button>\n            </li>\n        );\n    }\n\n    createList(plugs) {\n        return plugs.map(this.createButton);\n    }\n\n    fireAction(plug) {\n        return plug.action(this.props.channel, this.props.channelMember);\n    }\n\n    render() {\n        const components = this.props.components || [];\n\n        if (components.length === 0) {\n            return null;\n        } else if (components.length === 1) {\n            return this.createButton(components[0]);\n        }\n\n        if (!this.props.isDropdown) {\n            return null;\n        }\n\n        return this.createList(components);\n    }\n}\n","// Copyright (c) 2015-present Mattermost, Inc. All Rights Reserved.\n// See LICENSE.txt for license information.\n\nimport {connect} from 'react-redux';\nimport {getTheme} from 'mattermost-redux/selectors/entities/preferences';\nimport {getMyCurrentChannelMembership} from 'mattermost-redux/selectors/entities/channels';\n\nimport MobileChannelHeaderPlug from './mobile_channel_header_plug.jsx';\n\nfunction mapStateToProps(state) {\n    return {\n        channelMember: getMyCurrentChannelMembership(state),\n        components: state.plugins.components.MobileChannelHeaderButton,\n        theme: getTheme(state),\n    };\n}\n\nexport default connect(mapStateToProps)(MobileChannelHeaderPlug);\n","// Copyright (c) 2015-present Mattermost, Inc. All Rights Reserved.\n// See LICENSE.txt for license information.\n\nimport PropTypes from 'prop-types';\nimport React from 'react';\nimport {FormattedMessage} from 'react-intl';\n\nimport {IgnoreChannelMentions, NotificationLevels, NotificationSections} from 'utils/constants.jsx';\nimport {t} from 'utils/i18n';\n\nexport default function Describe({section, isCollapsed, memberNotifyLevel, globalNotifyLevel, ignoreChannelMentions}) {\n    if (memberNotifyLevel === NotificationLevels.DEFAULT && globalNotifyLevel) {\n        t('channel_notifications.levels.default');\n        t('channel_notifications.levels.all');\n        t('channel_notifications.levels.mention');\n        t('channel_notifications.levels.none');\n        const levelsFormattedMessageId = 'channel_notifications.levels.' + globalNotifyLevel;\n        return (\n            <React.Fragment>\n                <FormattedMessage\n                    id='channel_notifications.globalDefault'\n                    defaultMessage='Global default'\n                />\n                <span>{' ('}</span>\n                <FormattedMessage\n                    id={levelsFormattedMessageId}\n                    defaultMessage={globalNotifyLevel}\n                />\n                <span>{')'}</span>\n            </React.Fragment>\n        );\n    } else if (memberNotifyLevel === NotificationLevels.MENTION && section === NotificationSections.MARK_UNREAD) {\n        if (isCollapsed) {\n            return (\n                <FormattedMessage\n                    id='channel_notifications.muteChannel.on.title.collapse'\n                    defaultMessage='Mute is enabled. Desktop, email and push notifications will not be sent for this channel.'\n                />\n            );\n        }\n        return (\n            <FormattedMessage\n                id='channel_notifications.muteChannel.on.title'\n                defaultMessage='On'\n            />\n        );\n    } else if (\n        section === NotificationSections.IGNORE_CHANNEL_MENTIONS &&\n        ignoreChannelMentions === IgnoreChannelMentions.ON\n    ) {\n        return (\n            <FormattedMessage\n                id='channel_notifications.ignoreChannelMentions.on.title'\n                defaultMessage='On'\n            />\n        );\n    } else if (\n        section === NotificationSections.IGNORE_CHANNEL_MENTIONS &&\n        ignoreChannelMentions === IgnoreChannelMentions.OFF\n    ) {\n        return (\n            <FormattedMessage\n                id='channel_notifications.ignoreChannelMentions.off.title'\n                defaultMessage='Off'\n            />\n        );\n    } else if (memberNotifyLevel === NotificationLevels.MENTION) {\n        return (\n            <FormattedMessage\n                id='channel_notifications.onlyMentions'\n                defaultMessage='Only for mentions'\n            />\n        );\n    } else if (\n        (section === NotificationSections.DESKTOP || section === NotificationSections.PUSH) &&\n        memberNotifyLevel === NotificationLevels.ALL\n    ) {\n        return (\n            <FormattedMessage\n                id='channel_notifications.allActivity'\n                defaultMessage='For all activity'\n            />\n        );\n    } else if (\n        section === NotificationSections.MARK_UNREAD &&\n        memberNotifyLevel === NotificationLevels.ALL\n    ) {\n        return (\n            <FormattedMessage\n                id='channel_notifications.muteChannel.off.title'\n                defaultMessage='Off'\n            />\n        );\n    }\n\n    return (\n        <FormattedMessage\n            id='channel_notifications.never'\n            defaultMessage='Never'\n        />\n    );\n}\n\nDescribe.propTypes = {\n    globalNotifyLevel: PropTypes.string,\n    ignoreChannelMentions: PropTypes.string,\n    memberNotifyLevel: PropTypes.string.isRequired,\n    section: PropTypes.string.isRequired,\n    isCollapsed: PropTypes.bool,\n};\n","// Copyright (c) 2015-present Mattermost, Inc. All Rights Reserved.\n// See LICENSE.txt for license information.\n\nimport PropTypes from 'prop-types';\nimport React from 'react';\nimport {FormattedMessage} from 'react-intl';\n\nimport {NotificationSections} from 'utils/constants.jsx';\n\nexport default function SectionTitle({section}) {\n    if (section === NotificationSections.DESKTOP) {\n        return (\n            <FormattedMessage\n                id='channel_notifications.sendDesktop'\n                defaultMessage='Send desktop notifications'\n            />\n        );\n    } else if (section === NotificationSections.PUSH) {\n        return (\n            <FormattedMessage\n                id='channel_notifications.push'\n                defaultMessage='Send mobile push notifications'\n            />\n        );\n    } else if (section === NotificationSections.MARK_UNREAD) {\n        return (\n            <FormattedMessage\n                id='channel_notifications.muteChannel.settings'\n                defaultMessage='Mute Channel'\n            />\n        );\n    } else if (section === NotificationSections.IGNORE_CHANNEL_MENTIONS) {\n        return (\n            <FormattedMessage\n                id='channel_notifications.ignoreChannelMentions'\n                defaultMessage='Ignore mentions for @channel, @here and @all'\n            />\n        );\n    }\n\n    return null;\n}\n\nSectionTitle.propTypes = {\n    section: PropTypes.string.isRequired,\n};\n","// Copyright (c) 2015-present Mattermost, Inc. All Rights Reserved.\n// See LICENSE.txt for license information.\n\nimport PropTypes from 'prop-types';\nimport React from 'react';\n\nimport SettingItemMin from 'components/setting_item_min';\n\nimport Describe from './describe.jsx';\nimport SectionTitle from './section_title.jsx';\n\nexport default function CollapseView({onExpandSection, globalNotifyLevel, memberNotifyLevel, section, ignoreChannelMentions}) {\n    return (\n        <SettingItemMin\n            title={<SectionTitle section={section}/>}\n            describe={\n                <Describe\n                    section={section}\n                    ignoreChannelMentions={ignoreChannelMentions}\n                    memberNotifyLevel={memberNotifyLevel}\n                    globalNotifyLevel={globalNotifyLevel}\n                    isCollapsed={true}\n                />\n            }\n            updateSection={onExpandSection}\n            section={section}\n        />\n    );\n}\n\nCollapseView.propTypes = {\n    ignoreChannelMentions: PropTypes.string,\n    onExpandSection: PropTypes.func.isRequired,\n    globalNotifyLevel: PropTypes.string,\n    memberNotifyLevel: PropTypes.string.isRequired,\n    section: PropTypes.string.isRequired,\n};\n","// Copyright (c) 2015-present Mattermost, Inc. All Rights Reserved.\n// See LICENSE.txt for license information.\n\nimport PropTypes from 'prop-types';\nimport React from 'react';\nimport {FormattedMessage} from 'react-intl';\n\nimport {NotificationSections} from 'utils/constants.jsx';\n\nexport default function ExtraInfo({section}) {\n    switch (section) {\n    case NotificationSections.DESKTOP:\n        return (\n            <span>\n                <FormattedMessage\n                    id='channel_notifications.override'\n                    defaultMessage='Selecting an option other than \"Default\" will override the global notification settings. Desktop notifications are available on Firefox, Safari, and Chrome.'\n                />\n            </span>\n        );\n    case NotificationSections.PUSH:\n        return (\n            <span>\n                <FormattedMessage\n                    id='channel_notifications.overridePush'\n                    defaultMessage='Selecting an option other than \"Global default\" will override the global notification settings for mobile push notifications in account settings. Push notifications must be enabled by the System Admin.'\n                />\n            </span>\n        );\n    case NotificationSections.MARK_UNREAD:\n        return (\n            <span>\n                <FormattedMessage\n                    id='channel_notifications.muteChannel.help'\n                    defaultMessage='Muting turns off desktop, email and push notifications for this channel. The channel will not be marked as unread unless you are mentioned.'\n                />\n            </span>\n        );\n    case NotificationSections.IGNORE_CHANNEL_MENTIONS:\n        return (\n            <span>\n                <FormattedMessage\n                    id='channel_notifications.ignoreChannelMentions.help'\n                    defaultMessage='When enabled, @channel, @here and @all will not trigger mentions or mention notifications in this channel.'\n                />\n            </span>\n        );\n    default:\n        return null;\n    }\n}\n\nExtraInfo.propTypes = {\n    section: PropTypes.string.isRequired,\n};\n","// Copyright (c) 2015-present Mattermost, Inc. All Rights Reserved.\n// See LICENSE.txt for license information.\n\nimport PropTypes from 'prop-types';\nimport React from 'react';\n\nimport {IgnoreChannelMentions, NotificationLevels, NotificationSections} from 'utils/constants.jsx';\n\nimport SettingItemMax from 'components/setting_item_max.jsx';\n\nimport Describe from './describe.jsx';\nimport ExtraInfo from './extra_info.jsx';\nimport SectionTitle from './section_title.jsx';\n\nexport default function ExpandView({\n    section,\n    memberNotifyLevel,\n    globalNotifyLevel,\n    onChange,\n    onSubmit,\n    serverError,\n    onCollapseSection,\n    ignoreChannelMentions,\n}) {\n    const inputs = [(\n        <div key='channel-notification-level-radio'>\n            {(section === NotificationSections.DESKTOP || section === NotificationSections.PUSH) &&\n            <fieldset>\n                <div className='radio'>\n                    <label className=''>\n                        <input\n                            id='channelNotificationGlobalDefault'\n                            name='channelDesktopNotifications'\n                            type='radio'\n                            value={NotificationLevels.DEFAULT}\n                            checked={memberNotifyLevel === NotificationLevels.DEFAULT}\n                            onChange={onChange}\n                        />\n                        <Describe\n                            section={section}\n                            memberNotifyLevel={NotificationLevels.DEFAULT}\n                            globalNotifyLevel={globalNotifyLevel}\n                        />\n                    </label>\n                </div>\n                <div className='radio'>\n                    <label className=''>\n                        <input\n                            id='channelNotificationAllActivity'\n                            name='channelDesktopNotifications'\n                            type='radio'\n                            value={NotificationLevels.ALL}\n                            checked={memberNotifyLevel === NotificationLevels.ALL}\n                            onChange={onChange}\n                        />\n                        <Describe\n                            section={section}\n                            memberNotifyLevel={NotificationLevels.ALL}\n                        />\n                    </label>\n                </div>\n                <div className='radio'>\n                    <label className=''>\n                        <input\n                            id='channelNotificationMentions'\n                            name='channelDesktopNotifications'\n                            type='radio'\n                            value={NotificationLevels.MENTION}\n                            checked={memberNotifyLevel === NotificationLevels.MENTION}\n                            onChange={onChange}\n                        />\n                        <Describe\n                            section={section}\n                            memberNotifyLevel={NotificationLevels.MENTION}\n                        />\n                    </label>\n                </div>\n                <div className='radio'>\n                    <label>\n                        <input\n                            id='channelNotificationNever'\n                            name='channelDesktopNotifications'\n                            type='radio'\n                            value={NotificationLevels.NONE}\n                            checked={memberNotifyLevel === NotificationLevels.NONE}\n                            onChange={onChange}\n                        />\n                        <Describe\n                            section={section}\n                            memberNotifyLevel={NotificationLevels.NONE}\n                        />\n                    </label>\n                </div>\n            </fieldset>\n            }\n            {section === NotificationSections.IGNORE_CHANNEL_MENTIONS &&\n                <fieldset>\n                    <div className='radio'>\n                        <label>\n                            <input\n                                id='ignoreChannelMentionsOn'\n                                name='ignoreChannelMentions'\n                                type='radio'\n                                value={IgnoreChannelMentions.ON}\n                                checked={ignoreChannelMentions === IgnoreChannelMentions.ON}\n                                onChange={onChange}\n                            />\n                            <Describe\n                                section={section}\n                                ignoreChannelMentions={IgnoreChannelMentions.ON}\n                                memberNotifyLevel={memberNotifyLevel}\n                                globalNotifyLevel={globalNotifyLevel}\n                            />\n                        </label>\n                    </div>\n                    <div className='radio'>\n                        <label>\n                            <input\n                                id='ignoreChannelMentionsOff'\n                                name='ignoreChannelMentions'\n                                type='radio'\n                                value={IgnoreChannelMentions.OFF}\n                                checked={ignoreChannelMentions === IgnoreChannelMentions.OFF}\n                                onChange={onChange}\n                            />\n                            <Describe\n                                section={section}\n                                ignoreChannelMentions={IgnoreChannelMentions.OFF}\n                                memberNotifyLevel={memberNotifyLevel}\n                                globalNotifyLevel={globalNotifyLevel}\n                            />\n                        </label>\n                    </div>\n                </fieldset>\n            }\n            {section === NotificationSections.MARK_UNREAD &&\n            <fieldset>\n                <div className='radio'>\n                    <label className=''>\n                        <input\n                            id='channelNotificationUnmute'\n                            name='channelNotificationMute'\n                            type='radio'\n                            value={NotificationLevels.MENTION}\n                            checked={memberNotifyLevel === NotificationLevels.MENTION}\n                            onChange={onChange}\n                        />\n                        <Describe\n                            section={section}\n                            memberNotifyLevel={NotificationLevels.MENTION}\n                        />\n                    </label>\n                </div>\n                <div className='radio'>\n                    <label className=''>\n                        <input\n                            id='channelNotificationMute'\n                            name='channelNotificationMute'\n                            type='radio'\n                            value={NotificationLevels.ALL}\n                            checked={memberNotifyLevel === NotificationLevels.ALL}\n                            onChange={onChange}\n                        />\n                        <Describe\n                            section={section}\n                            memberNotifyLevel={NotificationLevels.ALL}\n                        />\n                    </label>\n                </div>\n            </fieldset>\n            }\n        </div>\n    )];\n\n    return (\n        <SettingItemMax\n            title={<SectionTitle section={section}/>}\n            inputs={inputs}\n            submit={onSubmit}\n            server_error={serverError}\n            updateSection={onCollapseSection}\n            extraInfo={<ExtraInfo section={section}/>}\n        />\n    );\n}\n\nExpandView.propTypes = {\n    ignoreChannelMentions: PropTypes.string,\n    onChange: PropTypes.func.isRequired,\n    onCollapseSection: PropTypes.func.isRequired,\n    onSubmit: PropTypes.func.isRequired,\n    globalNotifyLevel: PropTypes.string,\n    memberNotifyLevel: PropTypes.string.isRequired,\n    section: PropTypes.string.isRequired,\n    serverError: PropTypes.string,\n};\n","// Copyright (c) 2015-present Mattermost, Inc. All Rights Reserved.\n// See LICENSE.txt for license information.\n\nimport PropTypes from 'prop-types';\nimport React from 'react';\n\nimport {NotificationSections} from 'utils/constants.jsx';\n\nimport CollapseView from './collapse_view.jsx';\nimport ExpandView from './expand_view.jsx';\n\nexport default class NotificationSection extends React.PureComponent {\n    static propTypes = {\n\n        /**\n         * Notification section\n         */\n        section: PropTypes.string.isRequired,\n\n        /**\n         * Expand if true, else collapse the section\n         */\n        expand: PropTypes.bool.isRequired,\n\n        /**\n         * Member's desktop notification level\n         */\n        memberNotificationLevel: PropTypes.string.isRequired,\n\n        /**\n         * Ignore channel-wide mentions @channel, @here and @all\n         */\n        ignoreChannelMentions: PropTypes.string,\n\n        /**\n         * User's global notification level\n         */\n        globalNotificationLevel: PropTypes.string,\n\n        /**\n         * onChange handles update of desktop notification level\n         */\n        onChange: PropTypes.func.isRequired,\n\n        /**\n         * Submit function to save notification level\n         */\n        onSubmit: PropTypes.func.isRequired,\n\n        /**\n         * Update function to to expand or collapse a section\n         */\n        onUpdateSection: PropTypes.func.isRequired,\n\n        /**\n         * Error string from the server\n         */\n        serverError: PropTypes.string,\n    }\n\n    handleOnChange = (e) => {\n        this.props.onChange(e.target.value);\n    }\n\n    handleExpandSection = () => {\n        this.props.onUpdateSection(this.props.section);\n    }\n\n    handleCollapseSection = () => {\n        this.props.onUpdateSection(NotificationSections.NONE);\n    }\n\n    render() {\n        const {\n            expand,\n            globalNotificationLevel,\n            memberNotificationLevel,\n            ignoreChannelMentions,\n            onSubmit,\n            section,\n            serverError,\n        } = this.props;\n\n        if (expand) {\n            return (\n                <ExpandView\n                    section={section}\n                    memberNotifyLevel={memberNotificationLevel}\n                    globalNotifyLevel={globalNotificationLevel}\n                    ignoreChannelMentions={ignoreChannelMentions}\n                    onChange={this.handleOnChange}\n                    onSubmit={onSubmit}\n                    serverError={serverError}\n                    onCollapseSection={this.handleCollapseSection}\n                />\n            );\n        }\n\n        return (\n            <CollapseView\n                section={section}\n                onExpandSection={this.handleExpandSection}\n                memberNotifyLevel={memberNotificationLevel}\n                globalNotifyLevel={globalNotificationLevel}\n                ignoreChannelMentions={ignoreChannelMentions}\n            />\n        );\n    }\n}\n","// Copyright (c) 2015-present Mattermost, Inc. All Rights Reserved.\n// See LICENSE.txt for license information.\n\nimport $ from 'jquery';\nimport PropTypes from 'prop-types';\nimport React from 'react';\nimport {Modal} from 'react-bootstrap';\nimport {FormattedMessage} from 'react-intl';\n\nimport {isChannelMuted} from 'mattermost-redux/utils/channel_utils';\n\nimport {IgnoreChannelMentions, NotificationLevels, NotificationSections} from 'utils/constants.jsx';\nimport * as Utils from 'utils/utils.jsx';\n\nimport NotificationSection from 'components/channel_notifications_modal/components/notification_section.jsx';\n\nexport default class ChannelNotificationsModal extends React.PureComponent {\n    static propTypes = {\n\n        /**\n         * Function that is called when modal is hidden\n         */\n        onHide: PropTypes.func.isRequired,\n\n        /**\n         * Object with info about current channel\n         */\n        channel: PropTypes.object.isRequired,\n\n        /**\n         * Object with info about current channel membership\n         */\n        channelMember: PropTypes.object.isRequired,\n\n        /**\n         * Object with info about current user\n         */\n        currentUser: PropTypes.object.isRequired,\n\n        /**\n         * Boolean whether server sends push notifications\n         */\n        sendPushNotifications: PropTypes.bool.isRequired,\n\n        /*\n         * Object with redux action creators\n         */\n        actions: PropTypes.shape({\n\n            /*\n             * Action creator to update channel notify props\n             */\n            updateChannelNotifyProps: PropTypes.func.isRequired,\n        }),\n    };\n\n    constructor(props) {\n        super(props);\n\n        const channelNotifyProps = props.channelMember && props.channelMember.notify_props;\n\n        this.state = {\n            show: true,\n            activeSection: NotificationSections.NONE,\n            serverError: null,\n            ...this.getStateFromNotifyProps(channelNotifyProps, props.currentUser.notify_props),\n        };\n    }\n\n    componentDidUpdate(prevProps) {\n        const prevChannelNotifyProps = prevProps.channelMember && prevProps.channelMember.notify_props;\n        const channelNotifyProps = this.props.channelMember && this.props.channelMember.notify_props;\n\n        if (!Utils.areObjectsEqual(channelNotifyProps, prevChannelNotifyProps)) {\n            this.resetStateFromNotifyProps(channelNotifyProps, this.props.currentUser.notify_props);\n        }\n    }\n\n    resetStateFromNotifyProps(channelMemberNotifyProps, currentUserNotifyProps) {\n        this.setState(this.getStateFromNotifyProps(channelMemberNotifyProps, currentUserNotifyProps));\n    }\n\n    getStateFromNotifyProps(channelMemberNotifyProps, currentUserNotifyProps) {\n        let ignoreChannelMentionsDefault = IgnoreChannelMentions.OFF;\n\n        if (currentUserNotifyProps.channel && currentUserNotifyProps.channel === 'false') {\n            ignoreChannelMentionsDefault = IgnoreChannelMentions.ON;\n        }\n\n        let ignoreChannelMentions = channelMemberNotifyProps.ignore_channel_mentions;\n        if (!ignoreChannelMentions || ignoreChannelMentions === IgnoreChannelMentions.DEFAULT) {\n            ignoreChannelMentions = ignoreChannelMentionsDefault;\n        }\n\n        return {\n            desktopNotifyLevel: channelMemberNotifyProps.desktop || NotificationLevels.DEFAULT,\n            markUnreadNotifyLevel: channelMemberNotifyProps.mark_unread || NotificationLevels.ALL,\n            pushNotifyLevel: channelMemberNotifyProps.push || NotificationLevels.DEFAULT,\n            ignoreChannelMentions,\n        };\n    }\n\n    handleHide = () => {\n        this.setState({\n            show: false,\n        });\n    }\n\n    handleExit = () => {\n        this.updateSection(NotificationSections.NONE);\n        this.props.onHide();\n    }\n\n    updateSection = (section = NotificationSections.NONE) => {\n        if ($('.section-max').length) {\n            $('.settings-modal .modal-body').scrollTop(0).perfectScrollbar('update');\n        }\n\n        this.setState({activeSection: section});\n\n        if (section === NotificationSections.NONE) {\n            const channelNotifyProps = this.props.channelMember && this.props.channelMember.notify_props;\n            this.resetStateFromNotifyProps(channelNotifyProps, this.props.currentUser.notify_props);\n        }\n    }\n\n    handleUpdateChannelNotifyProps = async (props) => {\n        const {\n            actions,\n            channel,\n            currentUser,\n        } = this.props;\n\n        const {error} = await actions.updateChannelNotifyProps(currentUser.id, channel.id, props);\n        if (error) {\n            this.setState({serverError: error.message});\n        } else {\n            this.updateSection(NotificationSections.NONE);\n        }\n    }\n\n    handleSubmitDesktopNotifyLevel = () => {\n        const channelNotifyProps = this.props.channelMember && this.props.channelMember.notify_props;\n        const {desktopNotifyLevel} = this.state;\n\n        if (channelNotifyProps.desktop === desktopNotifyLevel) {\n            this.updateSection(NotificationSections.NONE);\n            return;\n        }\n\n        const props = {desktop: desktopNotifyLevel};\n        this.handleUpdateChannelNotifyProps(props);\n    }\n\n    handleUpdateDesktopNotifyLevel = (desktopNotifyLevel) => {\n        this.setState({desktopNotifyLevel});\n    }\n\n    handleSubmitMarkUnreadLevel = () => {\n        const channelNotifyProps = this.props.channelMember && this.props.channelMember.notify_props;\n        const {markUnreadNotifyLevel} = this.state;\n\n        if (channelNotifyProps.mark_unread === markUnreadNotifyLevel) {\n            this.updateSection(NotificationSections.NONE);\n            return;\n        }\n\n        const props = {mark_unread: markUnreadNotifyLevel};\n        this.handleUpdateChannelNotifyProps(props);\n    }\n\n    handleUpdateMarkUnreadLevel = (markUnreadNotifyLevel) => {\n        this.setState({markUnreadNotifyLevel});\n    }\n\n    handleSubmitPushNotificationLevel = () => {\n        const channelNotifyProps = this.props.channelMember && this.props.channelMember.notify_props;\n        const {pushNotifyLevel} = this.state;\n\n        if (channelNotifyProps.push === pushNotifyLevel) {\n            this.updateSection(NotificationSections.NONE);\n            return;\n        }\n\n        const props = {push: pushNotifyLevel};\n        this.handleUpdateChannelNotifyProps(props);\n    }\n\n    handleUpdatePushNotificationLevel = (pushNotifyLevel) => {\n        this.setState({pushNotifyLevel});\n    }\n\n    handleUpdateIgnoreChannelMentions = (ignoreChannelMentions) => {\n        this.setState({ignoreChannelMentions});\n    }\n\n    handleSubmitIgnoreChannelMentions = () => {\n        const channelNotifyProps = this.props.channelMember && this.props.channelMember.notify_props;\n        const {ignoreChannelMentions} = this.state;\n\n        if (channelNotifyProps.ignore_channel_mentions === ignoreChannelMentions) {\n            this.updateSection('');\n            return;\n        }\n\n        const props = {ignore_channel_mentions: ignoreChannelMentions};\n        this.handleUpdateChannelNotifyProps(props);\n    }\n\n    render() {\n        const {\n            activeSection,\n            desktopNotifyLevel,\n            markUnreadNotifyLevel,\n            pushNotifyLevel,\n            ignoreChannelMentions,\n            serverError,\n        } = this.state;\n\n        const {\n            channel,\n            channelMember,\n            currentUser,\n            sendPushNotifications,\n        } = this.props;\n\n        let serverErrorTag = null;\n        if (serverError) {\n            serverErrorTag = <div className='form-group has-error'><label className='control-label'>{serverError}</label></div>;\n        }\n\n        return (\n            <Modal\n                dialogClassName='a11y__modal settings-modal settings-modal--tabless'\n                show={this.state.show}\n                onHide={this.handleHide}\n                onExited={this.handleExit}\n                role='dialog'\n                aria-labelledby='channelNotificationModalLabel'\n            >\n                <Modal.Header closeButton={true}>\n                    <Modal.Title\n                        componentClass='h1'\n                        id='channelNotificationModalLabel'\n                    >\n                        <FormattedMessage\n                            id='channel_notifications.preferences'\n                            defaultMessage='Notification Preferences for '\n                        />\n                        <span className='name'>{channel.display_name}</span>\n                    </Modal.Title>\n                </Modal.Header>\n                <Modal.Body>\n                    <div className='settings-table'>\n                        <div className='settings-content'>\n                            <div\n                                ref='wrapper'\n                                className='user-settings'\n                            >\n                                <br/>\n                                <div className='divider-dark first'/>\n                                <NotificationSection\n                                    section={NotificationSections.MARK_UNREAD}\n                                    expand={activeSection === NotificationSections.MARK_UNREAD}\n                                    memberNotificationLevel={markUnreadNotifyLevel}\n                                    onChange={this.handleUpdateMarkUnreadLevel}\n                                    onSubmit={this.handleSubmitMarkUnreadLevel}\n                                    onUpdateSection={this.updateSection}\n                                    serverError={serverError}\n                                />\n                                <div className='divider-light'/>\n                                <NotificationSection\n                                    section={NotificationSections.IGNORE_CHANNEL_MENTIONS}\n                                    expand={activeSection === NotificationSections.IGNORE_CHANNEL_MENTIONS}\n                                    memberNotificationLevel={markUnreadNotifyLevel}\n                                    ignoreChannelMentions={ignoreChannelMentions}\n                                    onChange={this.handleUpdateIgnoreChannelMentions}\n                                    onSubmit={this.handleSubmitIgnoreChannelMentions}\n                                    onUpdateSection={this.updateSection}\n                                    serverError={serverError}\n                                />\n                                {!isChannelMuted(channelMember) &&\n                                <div>\n                                    <div className='divider-light'/>\n                                    <NotificationSection\n                                        section={NotificationSections.DESKTOP}\n                                        expand={activeSection === NotificationSections.DESKTOP}\n                                        memberNotificationLevel={desktopNotifyLevel}\n                                        globalNotificationLevel={currentUser.notify_props ? currentUser.notify_props.desktop : NotificationLevels.ALL}\n                                        onChange={this.handleUpdateDesktopNotifyLevel}\n                                        onSubmit={this.handleSubmitDesktopNotifyLevel}\n                                        onUpdateSection={this.updateSection}\n                                        serverError={serverError}\n                                    />\n                                    <div className='divider-light'/>\n                                    {sendPushNotifications &&\n                                    <NotificationSection\n                                        section={NotificationSections.PUSH}\n                                        expand={activeSection === NotificationSections.PUSH}\n                                        memberNotificationLevel={pushNotifyLevel}\n                                        globalNotificationLevel={currentUser.notify_props ? currentUser.notify_props.push : NotificationLevels.ALL}\n                                        onChange={this.handleUpdatePushNotificationLevel}\n                                        onSubmit={this.handleSubmitPushNotificationLevel}\n                                        onUpdateSection={this.updateSection}\n                                        serverError={serverError}\n                                    />\n                                    }\n                                </div>\n                                }\n                                <div className='divider-dark'/>\n                            </div>\n                        </div>\n                    </div>\n                    {serverErrorTag}\n                </Modal.Body>\n            </Modal>\n        );\n    }\n}\n","// Copyright (c) 2015-present Mattermost, Inc. All Rights Reserved.\n// See LICENSE.txt for license information.\n\nimport {bindActionCreators} from 'redux';\nimport {connect} from 'react-redux';\nimport {updateChannelNotifyProps} from 'mattermost-redux/actions/channels';\nimport {getConfig} from 'mattermost-redux/selectors/entities/general';\nimport {getMyCurrentChannelMembership} from 'mattermost-redux/selectors/entities/channels';\n\nimport ChannelNotificationsModal from './channel_notifications_modal.jsx';\n\nconst mapStateToProps = (state) => ({\n    channelMember: getMyCurrentChannelMembership(state),\n    sendPushNotifications: getConfig(state).SendPushNotifications === 'true',\n});\n\nconst mapDispatchToProps = (dispatch) => ({\n    actions: bindActionCreators({\n        updateChannelNotifyProps,\n    }, dispatch),\n});\n\nexport default connect(mapStateToProps, mapDispatchToProps)(ChannelNotificationsModal);\n","// Copyright (c) 2015-present Mattermost, Inc. All Rights Reserved.\n// See LICENSE.txt for license information.\n\nimport PropTypes from 'prop-types';\nimport React from 'react';\nimport {Modal} from 'react-bootstrap';\nimport {FormattedMessage} from 'react-intl';\nimport {memoizeResult} from 'mattermost-redux/utils/helpers';\n\nimport Markdown from 'components/markdown';\nimport GlobeIcon from 'components/svg/globe_icon';\nimport LockIcon from 'components/svg/lock_icon';\nimport ArchiveIcon from 'components/svg/archive_icon';\n\nimport Constants from 'utils/constants.jsx';\nimport {getSiteURL} from 'utils/url.jsx';\nimport * as Utils from 'utils/utils.jsx';\n\nconst headerMarkdownOptions = {singleline: false, mentionHighlight: false};\n\nexport default class ChannelInfoModal extends React.PureComponent {\n    static propTypes = {\n\n        /**\n         * Function that is called when modal is hidden\n         */\n        onHide: PropTypes.func.isRequired,\n\n        /**\n         * Channel object\n         */\n        channel: PropTypes.object.isRequired,\n\n        /**\n         * Current team object\n         */\n        currentTeam: PropTypes.object.isRequired,\n    };\n\n    constructor(props) {\n        super(props);\n\n        this.state = {show: true};\n\n        this.getHeaderMarkdownOptions = memoizeResult((channelNamesMap) => (\n            {...headerMarkdownOptions, channelNamesMap}\n        ));\n    }\n\n    onHide = () => {\n        this.setState({show: false});\n    }\n\n    render() {\n        let channel = this.props.channel;\n        const channelIsArchived = channel.delete_at !== 0;\n        let channelIcon;\n\n        if (!channel) {\n            const notFound = Utils.localizeMessage('channel_info.notFound', 'No Channel Found');\n\n            channel = {\n                display_name: notFound,\n                name: notFound,\n                purpose: notFound,\n                header: notFound,\n                id: notFound,\n            };\n        }\n\n        const channelNamesMap = this.props.channel.props && this.props.channel.props.channel_mentions;\n\n        if (channelIsArchived) {\n            channelIcon = (\n                <ArchiveIcon className='icon icon__archive'/>\n            );\n        } else if (channel.type === 'O') {\n            channelIcon = (\n                <GlobeIcon className='icon icon__globe icon--body'/>\n            );\n        } else if (channel.type === 'P') {\n            channelIcon = (\n                <LockIcon className='icon icon__globe icon--body'/>\n            );\n        }\n\n        const channelURL = getSiteURL() + '/' + this.props.currentTeam.name + '/channels/' + channel.name;\n\n        let channelPurpose;\n        if (channel.purpose) {\n            channelPurpose = channel.purpose;\n        } else if (channel.name === Constants.DEFAULT_CHANNEL) {\n            channelPurpose = (\n                <FormattedMessage\n                    id='default_channel.purpose'\n                    defaultMessage='Post messages here that you want everyone to see. Everyone automatically becomes a permanent member of this channel when they join the team.'\n                />\n            );\n        }\n\n        let channelPurposeElement;\n        if (channelPurpose) {\n            channelPurposeElement = (\n                <div className='form-group'>\n                    <div className='info__label'>\n                        <FormattedMessage\n                            id='channel_info.purpose'\n                            defaultMessage='Purpose:'\n                        />\n                    </div>\n                    <div className='info__value'>{channelPurpose}</div>\n                </div>\n            );\n        }\n\n        let channelHeader = null;\n        if (channel.header) {\n            channelHeader = (\n                <div className='form-group'>\n                    <div className='info__label'>\n                        <FormattedMessage\n                            id='channel_info.header'\n                            defaultMessage='Header:'\n                        />\n                    </div>\n                    <div className='info__value'>\n                        <Markdown\n                            message={channel.header}\n                            options={this.getHeaderMarkdownOptions(channelNamesMap)}\n                        />\n                    </div>\n                </div>\n            );\n        }\n\n        return (\n            <Modal\n                dialogClassName='a11y__modal about-modal'\n                show={this.state.show}\n                onHide={this.onHide}\n                onExited={this.props.onHide}\n                role='dialog'\n                aria-labelledby='channelInfoModalLabel'\n            >\n                <Modal.Header closeButton={true}>\n                    <Modal.Title\n                        componentClass='h1'\n                        id='channelInfoModalLabel'\n                    >\n                        <FormattedMessage\n                            id='channel_info.about'\n                            defaultMessage='About'\n                        />\n                        <strong>{channelIcon}{channel.display_name}</strong>\n                    </Modal.Title>\n                </Modal.Header>\n                <Modal.Body ref='modalBody'>\n                    {channelPurposeElement}\n                    {channelHeader}\n                    <div className='form-group'>\n                        <div className='info__label'>\n                            <FormattedMessage\n                                id='channel_info.url'\n                                defaultMessage='URL:'\n                            />\n                        </div>\n                        <div className='info__value'>{channelURL}</div>\n                    </div>\n                    <div className='about-modal__hash form-group padding-top x2'>\n                        <p>\n                            <FormattedMessage\n                                id='channel_info.id'\n                                defaultMessage='ID: '\n                            />\n                            {channel.id}\n                        </p>\n                    </div>\n                </Modal.Body>\n            </Modal>\n        );\n    }\n}\n","// Copyright (c) 2015-present Mattermost, Inc. All Rights Reserved.\n// See LICENSE.txt for license information.\n\nimport {connect} from 'react-redux';\nimport {getCurrentTeam} from 'mattermost-redux/selectors/entities/teams';\n\nimport ChannelInfoModal from './channel_info_modal.jsx';\n\nfunction mapStateToProps(state) {\n    return {\n        currentTeam: getCurrentTeam(state),\n    };\n}\n\nexport default connect(mapStateToProps)(ChannelInfoModal);\n","// Copyright (c) 2015-present Mattermost, Inc. All Rights Reserved.\n// See LICENSE.txt for license information.\n\nimport PropTypes from 'prop-types';\nimport React from 'react';\nimport {Modal} from 'react-bootstrap';\nimport {FormattedMessage} from 'react-intl';\nimport {RequestStatus} from 'mattermost-redux/constants';\n\nimport Constants from 'utils/constants.jsx';\nimport * as Utils from 'utils/utils.jsx';\n\nexport default class EditChannelPurposeModal extends React.PureComponent {\n    static propTypes = {\n\n        /*\n         * callback to call when modal will hide\n         */\n        onHide: PropTypes.func.isRequired,\n\n        /*\n         * Channel info object\n         */\n        channel: PropTypes.object,\n\n        /*\n         * Check should we send purpose on CTRL + ENTER\n         */\n        ctrlSend: PropTypes.bool.isRequired,\n\n        /*\n         * Info about patch serverError\n         */\n        serverError: PropTypes.object,\n\n        /*\n         *  Status of patch info about channel request\n         */\n        requestStatus: PropTypes.string.isRequired,\n\n        /*\n         * Object with redux action creators\n         */\n        actions: PropTypes.shape({\n\n            /*\n             * Action creator to patch current channel\n             */\n            patchChannel: PropTypes.func.isRequired,\n        }).isRequired,\n    }\n\n    constructor(props) {\n        super(props);\n\n        this.state = {\n            purpose: props.channel.purpose || '',\n            serverError: '',\n            show: true,\n            submitted: false,\n        };\n    }\n\n    UNSAFE_componentWillReceiveProps(nextProps) { // eslint-disable-line camelcase\n        const {requestStatus: nextRequestStatus, serverError: nextServerError} = nextProps;\n        const {requestStatus} = this.props;\n\n        if (requestStatus !== nextRequestStatus && nextRequestStatus === RequestStatus.SUCCESS) {\n            this.onHide();\n        }\n\n        if (requestStatus !== nextRequestStatus && nextRequestStatus === RequestStatus.FAILURE) {\n            this.setError(nextServerError);\n        } else {\n            this.unsetError();\n        }\n    }\n\n    setError = (err) => {\n        if (err.id === 'api.context.invalid_param.app_error') {\n            this.setState({\n                serverError: Utils.localizeMessage(\n                    'edit_channel_purpose_modal.error',\n                    'This channel purpose is too long, please enter a shorter one'\n                ),\n            });\n        } else {\n            this.setState({serverError: err.message});\n        }\n    }\n\n    unsetError = () => {\n        this.setState({serverError: ''});\n    }\n\n    handleEntering = () => {\n        Utils.placeCaretAtEnd(this.purpose);\n    }\n\n    onHide = () => {\n        this.setState({show: false});\n    }\n\n    handleKeyDown = (e) => {\n        const {ctrlSend} = this.props;\n\n        if (ctrlSend && Utils.isKeyPressed(e, Constants.KeyCodes.ENTER) && e.ctrlKey) {\n            e.preventDefault();\n            this.handleSave(e);\n        } else if (!ctrlSend && Utils.isKeyPressed(e, Constants.KeyCodes.ENTER) && !e.shiftKey && !e.altKey) {\n            e.preventDefault();\n            this.handleSave(e);\n        }\n    }\n\n    handleSave = () => {\n        const {channel, actions: {patchChannel}} = this.props;\n        const {purpose} = this.state;\n        if (!channel) {\n            return;\n        }\n\n        patchChannel(channel.id, {purpose});\n    }\n\n    handleChange = (e) => {\n        e.preventDefault();\n        this.setState({purpose: e.target.value});\n    }\n\n    getPurpose = (node) => {\n        this.purpose = node;\n    };\n\n    render() {\n        let serverError = null;\n        if (this.state.serverError) {\n            serverError = (\n                <div className='form-group has-error'>\n                    <br/>\n                    <label className='control-label'>{this.state.serverError}</label>\n                </div>\n            );\n        }\n\n        let title = (\n            <span>\n                <FormattedMessage\n                    id='edit_channel_purpose_modal.title1'\n                    defaultMessage='Edit Purpose'\n                />\n            </span>\n        );\n        if (this.props.channel.display_name) {\n            title = (\n                <span>\n                    <FormattedMessage\n                        id='edit_channel_purpose_modal.title2'\n                        defaultMessage='Edit Purpose for '\n                    />\n                    <span className='name'>{this.props.channel.display_name}</span>\n                </span>\n            );\n        }\n\n        let channelPurposeModal = (\n            <FormattedMessage\n                id='edit_channel_purpose_modal.body'\n                defaultMessage='Describe how this channel should be used. This text appears in the channel list in the \"More...\" menu and helps others decide whether to join.'\n            />\n        );\n        if (this.props.channel.type === 'P') {\n            channelPurposeModal = (\n                <FormattedMessage\n                    id='edit_channel_private_purpose_modal.body'\n                    defaultMessage='This text appears in the \\\"View Info\\\" modal of the private channel.'\n                />\n            );\n        }\n\n        return (\n            <Modal\n                dialogClassName='a11y__modal'\n                show={this.state.show}\n                onHide={this.onHide}\n                onEntering={this.handleEntering}\n                onExited={this.props.onHide}\n                role='dialog'\n                aria-labelledby='editChannelPurposeModalLabel'\n            >\n                <Modal.Header closeButton={true}>\n                    <Modal.Title\n                        componentClass='h1'\n                        id='editChannelPurposeModalLabel'\n                    >\n                        {title}\n                    </Modal.Title>\n                </Modal.Header>\n                <Modal.Body>\n                    <p>\n                        {channelPurposeModal}\n                    </p>\n                    <textarea\n                        ref={this.getPurpose}\n                        className='form-control no-resize'\n                        rows='6'\n                        maxLength='250'\n                        value={this.state.purpose}\n                        onKeyDown={this.handleKeyDown}\n                        onChange={this.handleChange}\n                    />\n                    {serverError}\n                </Modal.Body>\n                <Modal.Footer>\n                    <button\n                        type='button'\n                        className='btn btn-link cancel-button'\n                        onClick={this.onHide}\n                    >\n                        <FormattedMessage\n                            id='edit_channel_purpose_modal.cancel'\n                            defaultMessage='Cancel'\n                        />\n                    </button>\n                    <button\n                        type='button'\n                        className='btn btn-primary save-button'\n                        disabled={this.props.requestStatus === RequestStatus.STARTED}\n                        onClick={this.handleSave}\n                    >\n                        <FormattedMessage\n                            id='edit_channel_purpose_modal.save'\n                            defaultMessage='Save'\n                        />\n                    </button>\n                </Modal.Footer>\n            </Modal>\n        );\n    }\n}\n","// Copyright (c) 2015-present Mattermost, Inc. All Rights Reserved.\n// See LICENSE.txt for license information.\nimport {bindActionCreators} from 'redux';\nimport {connect} from 'react-redux';\nimport {createSelector} from 'reselect';\nimport {getBool} from 'mattermost-redux/selectors/entities/preferences';\nimport {patchChannel} from 'mattermost-redux/actions/channels';\n\nimport Constants from 'utils/constants.jsx';\n\nimport EditChannelPurposeModal from './edit_channel_purpose_modal.jsx';\n\nconst mapStateToProps = createSelector(\n    (state) => getBool(state, Constants.Preferences.CATEGORY_ADVANCED_SETTINGS, 'send_on_ctrl_enter'),\n    ({requests}) => {\n        const {channels: {updateChannel}} = requests;\n        return {\n            serverError: updateChannel.error,\n            requestStatus: updateChannel.status,\n        };\n    },\n    (ctrlSend, requestInfo) => ({ctrlSend, ...requestInfo})\n);\n\nfunction mapDispatchToProps(dispatch) {\n    return {\n        actions: {\n            patchChannel: bindActionCreators(patchChannel, dispatch),\n        },\n    };\n}\n\nexport default connect(\n    mapStateToProps,\n    mapDispatchToProps,\n)(EditChannelPurposeModal);\n\n","// Copyright (c) 2015-present Mattermost, Inc. All Rights Reserved.\n// See LICENSE.txt for license information.\n\nimport PropTypes from 'prop-types';\nimport React from 'react';\nimport {Modal, OverlayTrigger, Tooltip} from 'react-bootstrap';\nimport {defineMessages, FormattedMessage, injectIntl, intlShape} from 'react-intl';\n\nimport LocalizedInput from 'components/localized_input/localized_input';\nimport {browserHistory} from 'utils/browser_history';\nimport Constants from 'utils/constants.jsx';\nimport {cleanUpUrlable, getShortenedURL} from 'utils/url.jsx';\nimport * as Utils from 'utils/utils.jsx';\nimport {t} from 'utils/i18n';\n\nconst holders = defineMessages({\n    required: {\n        id: t('rename_channel.required'),\n        defaultMessage: 'This field is required',\n    },\n    maxLength: {\n        id: t('rename_channel.maxLength'),\n        defaultMessage: 'This field must be less than {maxLength, number} characters',\n    },\n    lowercase: {\n        id: t('rename_channel.lowercase'),\n        defaultMessage: 'Must be lowercase alphanumeric characters',\n    },\n    url: {\n        id: t('rename_channel.url'),\n        defaultMessage: 'URL',\n    },\n    defaultError: {\n        id: t('rename_channel.defaultError'),\n        defaultMessage: ' - Cannot be changed for the default channel',\n    },\n    displayNameHolder: {\n        id: t('rename_channel.displayNameHolder'),\n        defaultMessage: 'Enter display name',\n    },\n    handleHolder: {\n        id: t('rename_channel.handleHolder'),\n        defaultMessage: 'lowercase alphanumeric characters',\n    },\n});\n\nexport class RenameChannelModal extends React.PureComponent {\n    static propTypes = {\n\n        /**\n         * react-intl helper object\n         */\n        intl: intlShape.isRequired,\n\n        /**\n         * Function that is called when modal is hidden\n         */\n        onHide: PropTypes.func.isRequired,\n\n        /**\n         * Object with info about current channel\n         */\n        channel: PropTypes.object.isRequired,\n\n        /**\n         * Object with info about current team\n         */\n        team: PropTypes.object.isRequired,\n\n        /**\n         * String with the current team URL\n         */\n        currentTeamUrl: PropTypes.string.isRequired,\n\n        /*\n         * Object with redux action creators\n         */\n        actions: PropTypes.shape({\n\n            /*\n             * Action creator to patch current channel\n             */\n            patchChannel: PropTypes.func.isRequired,\n        }).isRequired,\n    };\n\n    constructor(props) {\n        super(props);\n\n        this.state = {\n            displayName: props.channel.display_name,\n            channelName: props.channel.name,\n            serverError: '',\n            nameError: '',\n            displayNameError: '',\n            invalid: false,\n            show: true,\n        };\n    }\n\n    UNSAFE_componentWillReceiveProps(nextProps) { // eslint-disable-line camelcase\n        if (!Utils.areObjectsEqual(nextProps.channel, this.props.channel)) {\n            this.setState({\n                displayName: nextProps.channel.display_name,\n                channelName: nextProps.channel.name,\n            });\n        }\n    }\n\n    setError = (err) => {\n        this.setState({serverError: err.message});\n    }\n\n    unsetError = () => {\n        this.setState({serverError: ''});\n    }\n\n    handleEntering = () => {\n        Utils.placeCaretAtEnd(this.textbox);\n    }\n\n    handleHide = (e) => {\n        if (e) {\n            e.preventDefault();\n        }\n\n        this.setState({\n            serverError: '',\n            nameError: '',\n            displayNameError: '',\n            invalid: false,\n            show: false,\n        });\n    }\n\n    handleSubmit = async (e) => {\n        if (e) {\n            e.preventDefault();\n        }\n\n        const channel = Object.assign({}, this.props.channel);\n        const oldName = channel.name;\n        const oldDisplayName = channel.display_name;\n        const state = {serverError: ''};\n        const {formatMessage} = this.props.intl;\n        const {actions: {patchChannel}} = this.props;\n\n        channel.display_name = this.state.displayName.trim();\n        if (!channel.display_name) {\n            state.displayNameError = formatMessage(holders.required);\n            state.invalid = true;\n        } else if (channel.display_name.length > Constants.MAX_CHANNELNAME_LENGTH) {\n            state.displayNameError = formatMessage(holders.maxLength, {maxLength: Constants.MAX_CHANNELNAME_LENGTH});\n            state.invalid = true;\n        } else if (channel.display_name.length < Constants.MIN_CHANNELNAME_LENGTH) {\n            state.displayNameError = (\n                <FormattedMessage\n                    id='rename_channel.minLength'\n                    defaultMessage='Channel name must be {minLength, number} or more characters'\n                    values={{\n                        minLength: Constants.MIN_CHANNELNAME_LENGTH,\n                    }}\n                />\n            );\n            state.invalid = true;\n        } else {\n            state.displayNameError = '';\n        }\n\n        channel.name = this.state.channelName.trim();\n        if (!channel.name) {\n            state.nameError = formatMessage(holders.required);\n            state.invalid = true;\n        } else if (channel.name.length > Constants.MAX_CHANNELNAME_LENGTH) {\n            state.nameError = formatMessage(holders.maxLength, {maxLength: Constants.MAX_CHANNELNAME_LENGTH});\n            state.invalid = true;\n        } else {\n            const cleanedName = cleanUpUrlable(channel.name);\n            if (cleanedName === channel.name) {\n                state.nameError = '';\n            } else {\n                state.nameError = formatMessage(holders.lowercase);\n                state.invalid = true;\n            }\n        }\n\n        this.setState(state);\n\n        if (state.invalid) {\n            return;\n        }\n        if (oldName === channel.name && oldDisplayName === channel.display_name) {\n            this.onSaveSuccess();\n            return;\n        }\n\n        const {data, error} = await patchChannel(channel.id, channel);\n\n        if (data) {\n            this.onSaveSuccess();\n        } else if (error) {\n            this.setError(error);\n        }\n    }\n\n    onSaveSuccess = () => {\n        this.handleHide();\n        this.unsetError();\n        browserHistory.push('/' + this.props.team.name + '/channels/' + this.state.channelName);\n    }\n\n    handleCancel = (e) => {\n        this.setState({\n            displayName: this.props.channel.display_name,\n            channelName: this.props.channel.name,\n        });\n\n        this.handleHide(e);\n    }\n\n    onNameChange = (e) => {\n        this.setState({channelName: e.target.value});\n    }\n\n    onDisplayNameChange = (e) => {\n        this.setState({displayName: e.target.value});\n    }\n\n    getTextbox = (node) => {\n        this.textbox = node;\n    }\n\n    render() {\n        let displayNameError = null;\n        let displayNameClass = 'form-group';\n        if (this.state.displayNameError) {\n            displayNameError = <label className='control-label'>{this.state.displayNameError}</label>;\n            displayNameClass += ' has-error';\n        }\n\n        let nameError = null;\n        let nameClass = 'form-group';\n        if (this.state.nameError) {\n            nameError = <label className='control-label'>{this.state.nameError}</label>;\n            nameClass += ' has-error';\n        }\n\n        let serverError = null;\n        if (this.state.serverError) {\n            serverError = <div className='form-group has-error'><label className='control-label'>{this.state.serverError}</label></div>;\n        }\n\n        const {formatMessage} = this.props.intl;\n\n        let urlInputLabel = formatMessage(holders.url);\n        const handleInputClass = 'form-control';\n        let readOnlyHandleInput = false;\n        if (this.props.channel.name === Constants.DEFAULT_CHANNEL) {\n            urlInputLabel += formatMessage(holders.defaultError);\n            readOnlyHandleInput = true;\n        }\n\n        const fullUrl = this.props.currentTeamUrl + '/channels';\n        const shortUrl = getShortenedURL(fullUrl, 35);\n        const urlTooltip = (\n            <Tooltip id='urlTooltip'>{fullUrl}</Tooltip>\n        );\n\n        return (\n            <Modal\n                dialogClassName='a11y__modal'\n                show={this.state.show}\n                onHide={this.handleCancel}\n                onEntering={this.handleEntering}\n                onExited={this.props.onHide}\n                role='dialog'\n                aria-labelledby='renameChannelModalLabel'\n            >\n                <Modal.Header closeButton={true}>\n                    <Modal.Title\n                        componentClass='h1'\n                        id='renameChannelModalLabel'\n                    >\n                        <FormattedMessage\n                            id='rename_channel.title'\n                            defaultMessage='Rename Channel'\n                        />\n                    </Modal.Title>\n                </Modal.Header>\n                <form role='form'>\n                    <Modal.Body>\n                        <div className={displayNameClass}>\n                            <label className='control-label'>\n                                <FormattedMessage\n                                    id='rename_channel.displayName'\n                                    defaultMessage='Display Name'\n                                />\n                            </label>\n                            <LocalizedInput\n                                onChange={this.onDisplayNameChange}\n                                type='text'\n                                ref={this.getTextbox}\n                                id='display_name'\n                                className='form-control'\n                                placeholder={holders.displayNameHolder}\n                                value={this.state.displayName}\n                                maxLength={Constants.MAX_CHANNELNAME_LENGTH}\n                            />\n                            {displayNameError}\n                        </div>\n                        <div className={nameClass}>\n                            <label className='control-label'>{urlInputLabel}</label>\n\n                            <div className='input-group input-group--limit'>\n                                <OverlayTrigger\n                                    delayShow={Constants.OVERLAY_TIME_DELAY}\n                                    placement='top'\n                                    overlay={urlTooltip}\n                                >\n                                    <span className='input-group-addon'>{shortUrl}</span>\n                                </OverlayTrigger>\n                                <LocalizedInput\n                                    onChange={this.onNameChange}\n                                    type='text'\n                                    className={handleInputClass}\n                                    id='channel_name'\n                                    placeholder={holders.handleHolder}\n                                    value={this.state.channelName}\n                                    maxLength={Constants.MAX_CHANNELNAME_LENGTH}\n                                    readOnly={readOnlyHandleInput}\n                                />\n                            </div>\n                            {nameError}\n                        </div>\n                        {serverError}\n                    </Modal.Body>\n                    <Modal.Footer>\n                        <button\n                            type='button'\n                            className='btn btn-link'\n                            onClick={this.handleCancel}\n                        >\n                            <FormattedMessage\n                                id='rename_channel.cancel'\n                                defaultMessage='Cancel'\n                            />\n                        </button>\n                        <button\n                            onClick={this.handleSubmit}\n                            type='submit'\n                            id='save-button'\n                            className='btn btn-primary'\n                        >\n                            <FormattedMessage\n                                id='rename_channel.save'\n                                defaultMessage='Save'\n                            />\n                        </button>\n                    </Modal.Footer>\n                </form>\n            </Modal>\n        );\n    }\n}\n\nexport default injectIntl(RenameChannelModal);\n","// Copyright (c) 2015-present Mattermost, Inc. All Rights Reserved.\n// See LICENSE.txt for license information.\n\nimport {bindActionCreators} from 'redux';\nimport {connect} from 'react-redux';\nimport {createSelector} from 'reselect';\nimport {patchChannel} from 'mattermost-redux/actions/channels';\nimport {getTeam} from 'mattermost-redux/selectors/entities/teams';\n\nimport {getSiteURL} from 'utils/url.jsx';\n\nimport RenameChannelModal from './rename_channel_modal.jsx';\n\nconst mapStateToProps = createSelector(\n    (state) => {\n        const currentTeamId = state.entities.teams.currentTeamId;\n        const team = getTeam(state, currentTeamId);\n        const currentTeamUrl = `${getSiteURL()}/${team.name}`;\n        return {\n            currentTeamUrl,\n            team,\n        };\n    },\n    (teamInfo) => ({...teamInfo})\n);\n\nfunction mapDispatchToProps(dispatch) {\n    return {\n        actions: {\n            patchChannel: bindActionCreators(patchChannel, dispatch),\n        },\n    };\n}\n\nexport default connect(mapStateToProps, mapDispatchToProps)(RenameChannelModal);\n","// Copyright (c) 2015-present Mattermost, Inc. All Rights Reserved.\n// See LICENSE.txt for license information.\n\nimport PropTypes from 'prop-types';\nimport React from 'react';\nimport {Modal} from 'react-bootstrap';\nimport {FormattedHTMLMessage, FormattedMessage} from 'react-intl';\n\nimport {trackEvent} from 'actions/diagnostics_actions.jsx';\nimport Constants from 'utils/constants.jsx';\n\nimport FormattedMarkdownMessage from 'components/formatted_markdown_message.jsx';\n\nexport default class ConvertChannelModal extends React.PureComponent {\n    static propTypes = {\n\n        /**\n        * Function called when modal is dismissed\n        */\n        onHide: PropTypes.func.isRequired,\n        channelId: PropTypes.string.isRequired,\n        channelDisplayName: PropTypes.string.isRequired,\n\n        actions: PropTypes.shape({\n\n            /**\n            * Function called for converting channel to private,\n            */\n            convertChannelToPrivate: PropTypes.func.isRequired,\n        }),\n    }\n\n    constructor(props) {\n        super(props);\n\n        this.state = {show: true};\n    }\n\n    handleConvert = () => {\n        const {actions, channelId} = this.props;\n        if (channelId.length !== Constants.CHANNEL_ID_LENGTH) {\n            return;\n        }\n\n        actions.convertChannelToPrivate(channelId);\n        trackEvent('actions', 'convert_to_private_channel', {channel_id: channelId});\n        this.onHide();\n    }\n\n    onHide = () => {\n        this.setState({show: false});\n    }\n\n    render() {\n        const {\n            channelDisplayName,\n            onHide,\n        } = this.props;\n\n        return (\n            <Modal\n                dialogClassName='a11y__modal'\n                show={this.state.show}\n                onHide={this.onHide}\n                onExited={onHide}\n                role='dialog'\n                aria-labelledby='convertChannelModalLabel'\n            >\n                <Modal.Header closeButton={true}>\n                    <Modal.Title\n                        componentClass='h1'\n                        id='convertChannelModalLabel'\n                    >\n                        <FormattedMessage\n                            id='convert_channel.title'\n                            defaultMessage='Convert {display_name} to a private channel?'\n                            values={{\n                                display_name: channelDisplayName,\n                            }}\n                        />\n                    </Modal.Title>\n                </Modal.Header>\n                <Modal.Body>\n                    <p>\n                        <FormattedMarkdownMessage\n                            id='convert_channel.question1'\n                            defaultMessage='When you convert **{display_name}** to a private channel, history and membership are preserved. Publicly shared files remain accessible to anyone with the link. Membership in a private channel is by invitation only.'\n                            values={{\n                                display_name: channelDisplayName,\n                            }}\n                        />\n                    </p>\n                    <p>\n                        <FormattedHTMLMessage\n                            id='convert_channel.question2'\n                            defaultMessage='The change is permanent and cannot be undone.'\n                        />\n                    </p>\n                    <p>\n                        <FormattedMarkdownMessage\n                            id='convert_channel.question3'\n                            defaultMessage='Are you sure you want to convert **{display_name}** to a private channel?'\n                            values={{\n                                display_name: channelDisplayName,\n                            }}\n                        />\n                    </p>\n                </Modal.Body>\n                <Modal.Footer>\n                    <button\n                        type='button'\n                        className='btn btn-link'\n                        onClick={this.onHide}\n                        tabIndex='2'\n                    >\n                        <FormattedMessage\n                            id='convert_channel.cancel'\n                            defaultMessage='No, cancel'\n                        />\n                    </button>\n                    <button\n                        type='button'\n                        className='btn btn-primary'\n                        data-dismiss='modal'\n                        onClick={this.handleConvert}\n                        autoFocus={true}\n                        tabIndex='1'\n                    >\n                        <FormattedMessage\n                            id='convert_channel.confirm'\n                            defaultMessage='Yes, convert to private channel'\n                        />\n                    </button>\n                </Modal.Footer>\n            </Modal>\n        );\n    }\n}\n","// Copyright (c) 2015-present Mattermost, Inc. All Rights Reserved.\n// See LICENSE.txt for license information.\n\nimport {bindActionCreators} from 'redux';\nimport {connect} from 'react-redux';\n\nimport {convertChannelToPrivate} from 'mattermost-redux/actions/channels';\n\nimport {getCurrentTeam} from 'mattermost-redux/selectors/entities/teams';\n\nimport ConvertChannelModal from './convert_channel_modal.jsx';\n\nfunction mapStateToProps(state) {\n    return {\n        currentTeamDetails: getCurrentTeam(state),\n    };\n}\n\nfunction mapDispatchToProps(dispatch) {\n    return {\n        actions: bindActionCreators({\n            convertChannelToPrivate,\n        }, dispatch),\n    };\n}\n\nexport default connect(mapStateToProps, mapDispatchToProps)(ConvertChannelModal);\n","// Copyright (c) 2015-present Mattermost, Inc. All Rights Reserved.\n// See LICENSE.txt for license information.\n\nimport PropTypes from 'prop-types';\nimport React from 'react';\nimport {Modal} from 'react-bootstrap';\nimport {FormattedMessage} from 'react-intl';\n\nimport {browserHistory} from 'utils/browser_history';\nimport Constants from 'utils/constants.jsx';\nimport FormattedMarkdownMessage from 'components/formatted_markdown_message';\n\nexport default class DeleteChannelModal extends React.PureComponent {\n    static propTypes = {\n\n        /**\n        * Function called when modal is dismissed\n        */\n        onHide: PropTypes.func.isRequired,\n\n        /**\n         * channel data\n         */\n        channel: PropTypes.object.isRequired,\n\n        /**\n         * currentTeamDetails used for redirection after deleting channel\n         */\n        currentTeamDetails: PropTypes.object.isRequired,\n\n        canViewArchivedChannels: PropTypes.bool,\n        penultimateViewedChannelName: PropTypes.string.isRequired,\n\n        actions: PropTypes.shape({\n\n            /**\n            * Function called for deleting channel,\n            */\n\n            deleteChannel: PropTypes.func.isRequired,\n        }),\n    }\n\n    constructor(props) {\n        super(props);\n\n        this.handleDelete = this.handleDelete.bind(this);\n        this.onHide = this.onHide.bind(this);\n        this.state = {show: true};\n    }\n\n    handleDelete() {\n        if (this.props.channel.id.length !== Constants.CHANNEL_ID_LENGTH) {\n            return;\n        }\n        if (!this.props.canViewArchivedChannels) {\n            const {penultimateViewedChannelName} = this.props;\n            browserHistory.push('/' + this.props.currentTeamDetails.name + '/channels/' + penultimateViewedChannelName);\n        }\n        this.props.actions.deleteChannel(this.props.channel.id);\n        this.onHide();\n    }\n\n    onHide() {\n        this.setState({show: false});\n    }\n\n    render() {\n        const {canViewArchivedChannels} = this.props;\n        return (\n            <Modal\n                dialogClassName='a11y__modal'\n                show={this.state.show}\n                onHide={this.onHide}\n                onExited={this.props.onHide}\n                role='dialog'\n                aria-labelledby='deleteChannelModalLabel'\n            >\n                <Modal.Header closeButton={true}>\n                    <Modal.Title\n                        componentClass='h1'\n                        id='deleteChannelModalLabel'\n                    >\n                        <FormattedMessage\n                            id='delete_channel.confirm'\n                            defaultMessage='Confirm ARCHIVE Channel'\n                        />\n                    </Modal.Title>\n                </Modal.Header>\n                <Modal.Body>\n                    <div className='alert alert-danger'>\n                        {!canViewArchivedChannels &&\n                            <FormattedMarkdownMessage\n                                id='delete_channel.question'\n                                defaultMessage='This will archive the channel from the team and make its contents inaccessible for all users. \\n \\nAre you sure you wish to archive the **{display_name}** channel?'\n                                values={{\n                                    display_name: this.props.channel.display_name,\n                                }}\n                            />}\n                        {canViewArchivedChannels &&\n                            <FormattedMarkdownMessage\n                                id='delete_channel.viewArchived.question'\n                                defaultMessage={'This will archive the channel from the team. Channel contents will still be accessible by channel members.\\n \\nAre you sure you wish to archive the **{display_name}** channel?'}\n                                values={{\n                                    display_name: this.props.channel.display_name,\n                                }}\n                            />}\n                    </div>\n                </Modal.Body>\n                <Modal.Footer>\n                    <button\n                        type='button'\n                        className='btn btn-link'\n                        onClick={this.onHide}\n                    >\n                        <FormattedMessage\n                            id='delete_channel.cancel'\n                            defaultMessage='Cancel'\n                        />\n                    </button>\n                    <button\n                        type='button'\n                        className='btn btn-danger'\n                        data-dismiss='modal'\n                        onClick={this.handleDelete}\n                        autoFocus={true}\n                    >\n                        <FormattedMessage\n                            id='delete_channel.del'\n                            defaultMessage='Archive'\n                        />\n                    </button>\n                </Modal.Footer>\n            </Modal>\n        );\n    }\n}\n","// Copyright (c) 2015-present Mattermost, Inc. All Rights Reserved.\n// See LICENSE.txt for license information.\n\nimport {bindActionCreators} from 'redux';\nimport {connect} from 'react-redux';\nimport {deleteChannel} from 'mattermost-redux/actions/channels';\nimport {getCurrentTeam} from 'mattermost-redux/selectors/entities/teams';\nimport {getConfig} from 'mattermost-redux/selectors/entities/general';\n\nimport DeleteChannelModal from './delete_channel_modal.jsx';\n\nfunction mapStateToProps(state) {\n    const config = getConfig(state);\n\n    return {\n        canViewArchivedChannels: config.ExperimentalViewArchivedChannels === 'true',\n        currentTeamDetails: getCurrentTeam(state),\n    };\n}\n\nfunction mapDispatchToProps(dispatch) {\n    return {\n        actions: bindActionCreators({\n            deleteChannel,\n        }, dispatch),\n    };\n}\n\nexport default connect(mapStateToProps, mapDispatchToProps)(DeleteChannelModal);\n","// Copyright (c) 2015-present Mattermost, Inc. All Rights Reserved.\n// See LICENSE.txt for license information.\n\nimport PropTypes from 'prop-types';\nimport React from 'react';\nimport {FormattedMessage, intlShape} from 'react-intl';\n\nimport {Groups} from 'mattermost-redux/constants';\n\nimport AddGroupsToChannelModal from 'components/add_groups_to_channel_modal';\n\nimport {ModalIdentifiers} from 'utils/constants.jsx';\n\nimport ListModal, {DEFAULT_NUM_PER_PAGE} from 'components/list_modal.jsx';\n\nimport groupsAvatar from 'images/groups-avatar.png';\n\nexport default class ChannelGroupsManageModal extends React.PureComponent {\n    static propTypes = {\n        channel: PropTypes.object.isRequired,\n        actions: PropTypes.shape({\n            getGroupsAssociatedToChannel: PropTypes.func.isRequired,\n            unlinkGroupSyncable: PropTypes.func.isRequired,\n            closeModal: PropTypes.func.isRequired,\n            openModal: PropTypes.func.isRequired,\n        }).isRequired,\n    };\n\n    static contextTypes = {\n        intl: intlShape,\n    };\n\n    loadItems = async (pageNumber, searchTerm) => {\n        const {data} = await this.props.actions.getGroupsAssociatedToChannel(this.props.channel.id, searchTerm, pageNumber, DEFAULT_NUM_PER_PAGE);\n        return {\n            items: data.groups,\n            totalCount: data.totalGroupCount,\n        };\n    };\n\n    onClickRemoveGroup = (item, listModal) => this.props.actions.unlinkGroupSyncable(item.id, this.props.channel.id, Groups.SYNCABLE_TYPE_CHANNEL).then(async () => {\n        listModal.setState({loading: true});\n        const {items} = await listModal.props.loadItems(listModal.setState.page, listModal.state.searchTerm);\n        listModal.setState({loading: false, items});\n    });\n\n    onHide = () => {\n        this.props.actions.closeModal(ModalIdentifiers.MANAGE_CHANNEL_GROUPS);\n    };\n\n    titleButtonOnClick = () => {\n        this.onHide();\n        this.props.actions.openModal({modalId: ModalIdentifiers.ADD_GROUPS_TO_TEAM, dialogType: AddGroupsToChannelModal});\n    };\n\n    renderRow = (item, listModal) => {\n        return (\n            <div\n                key={item.id}\n                className='more-modal__row'\n            >\n                <img\n                    className='more-modal__image'\n                    src={groupsAvatar}\n                    alt='group picture'\n                    width='32'\n                    height='32'\n                />\n                <div className='more-modal__details'>\n                    <div className='more-modal__name'>{item.display_name} {'-'} <span>\n                        <FormattedMessage\n                            id='numMembers'\n                            defaultMessage='{num, number} {num, plural, one {member} other {members}}'\n                            values={{\n                                num: item.member_count,\n                            }}\n                        /></span>\n                    </div>\n                </div>\n                <div className='more-modal__actions'>\n                    <button\n                        id='removeMember'\n                        type='button'\n                        className='btn btn-danger btn-message'\n                        onClick={() => this.onClickRemoveGroup(item, listModal)}\n                    >\n                        <FormattedMessage\n                            id='group_list_modal.removeGroupButton'\n                            defaultMessage='Remove Group'\n                        />\n                    </button>\n                </div>\n            </div>\n        );\n    };\n\n    render() {\n        const {formatMessage} = this.context.intl;\n        return (\n            <ListModal\n                titleText={formatMessage({id: 'groups', defaultMessage: '{channel} Groups'}, {channel: this.props.channel.display_name})}\n                searchPlaceholderText={formatMessage({id: 'manage_channel_groups_modal.search_placeholder', defaultMessage: 'Search groups'})}\n                renderRow={this.renderRow}\n                loadItems={this.loadItems}\n                onHide={this.onHide}\n                titleBarButtonText={formatMessage({id: 'group_list_modal.addGroupButton', defaultMessage: 'Add Groups'})}\n                titleBarButtonOnClick={this.titleButtonOnClick}\n            />\n        );\n    }\n}\n","// Copyright (c) 2015-present Mattermost, Inc. All Rights Reserved.\n// See LICENSE.txt for license information.\n\nimport {bindActionCreators} from 'redux';\nimport {connect} from 'react-redux';\nimport {getGroupsAssociatedToChannel, unlinkGroupSyncable} from 'mattermost-redux/actions/groups';\n\nimport {closeModal, openModal} from 'actions/views/modals';\n\nimport ChannelGroupsManageModal from './channel_groups_manage_modal';\n\nconst mapStateToProps = (state, ownProps) => {\n    return {\n        channel: state.entities.channels.channels[ownProps.channelID],\n    };\n};\n\nconst mapDispatchToProps = (dispatch) => ({\n    actions: bindActionCreators({\n        getGroupsAssociatedToChannel,\n        closeModal,\n        openModal,\n        unlinkGroupSyncable,\n    }, dispatch),\n});\n\nexport default connect(mapStateToProps, mapDispatchToProps)(ChannelGroupsManageModal);\n","// Copyright (c) 2015-present Mattermost, Inc. All Rights Reserved.\n// See LICENSE.txt for license information.\n\nimport React from 'react';\nimport PropTypes from 'prop-types';\n\nimport {showLeavePrivateChannelModal} from 'actions/global_actions';\nimport {Constants} from 'utils/constants';\nimport {localizeMessage} from 'utils/utils';\n\nimport MenuItemAction from 'components/widgets/menu/menu_items/menu_item_action';\n\nexport default class LeaveChannel extends React.PureComponent {\n    static propTypes = {\n\n        /**\n         * Object with info about user\n         */\n        channel: PropTypes.object.isRequired,\n\n        /**\n         * Boolean whether the channel is default\n         */\n        isDefault: PropTypes.bool.isRequired,\n\n        /**\n         * Use for test selector\n         */\n        id: PropTypes.string,\n\n        /**\n         * Object with action creators\n         */\n        actions: PropTypes.shape({\n\n            /**\n             * Action creator to leave channel\n             */\n            leaveChannel: PropTypes.func.isRequired,\n        }).isRequired,\n    };\n\n    handleLeave = (e) => {\n        e.preventDefault();\n\n        const {\n            channel,\n            actions: {\n                leaveChannel,\n            },\n        } = this.props;\n\n        if (channel.type === Constants.PRIVATE_CHANNEL) {\n            showLeavePrivateChannelModal(channel);\n        } else {\n            leaveChannel(channel.id);\n        }\n    }\n\n    render() {\n        const {channel, isDefault, id} = this.props;\n\n        return (\n            <MenuItemAction\n                id={id}\n                show={!isDefault && channel.type !== Constants.DM_CHANNEL && channel.type !== Constants.GM_CHANNEL}\n                onClick={this.handleLeave}\n                text={localizeMessage('channel_header.leave', 'Leave Channel')}\n            />\n        );\n    }\n}\n","// Copyright (c) 2015-present Mattermost, Inc. All Rights Reserved.\n// See LICENSE.txt for license information.\n\nimport {bindActionCreators} from 'redux';\nimport {connect} from 'react-redux';\n\nimport {leaveChannel} from 'actions/views/channel';\n\nimport LeaveChannel from './leave_channel';\n\nconst mapDispatchToProps = (dispatch) => ({\n    actions: bindActionCreators({leaveChannel}, dispatch),\n});\n\nexport default connect(null, mapDispatchToProps)(LeaveChannel);\n","// Copyright (c) 2015-present Mattermost, Inc. All Rights Reserved.\n// See LICENSE.txt for license information.\n\nimport React from 'react';\nimport PropTypes from 'prop-types';\n\nimport {localizeMessage} from 'utils/utils';\n\nimport MenuItemAction from 'components/widgets/menu/menu_items/menu_item_action';\n\nexport default class CloseChannel extends React.PureComponent {\n    static propTypes = {\n        isArchived: PropTypes.bool.isRequired,\n        actions: PropTypes.shape({\n            goToLastViewedChannel: PropTypes.func.isRequired,\n        }).isRequired,\n    }\n\n    handleClose = () => {\n        this.props.actions.goToLastViewedChannel();\n    }\n\n    render() {\n        return (\n            <MenuItemAction\n                show={this.props.isArchived}\n                onClick={this.handleClose}\n                text={localizeMessage('center_panel.archived.closeChannel', 'Close Channel')}\n            />\n        );\n    }\n}\n","// Copyright (c) 2015-present Mattermost, Inc. All Rights Reserved.\n// See LICENSE.txt for license information.\n\nimport {bindActionCreators} from 'redux';\nimport {connect} from 'react-redux';\n\nimport {goToLastViewedChannel} from 'actions/views/channel';\n\nimport CloseChannel from './close_channel';\n\nconst mapDispatchToProps = (dispatch) => ({\n    actions: bindActionCreators({\n        goToLastViewedChannel,\n    }, dispatch),\n});\n\nexport default connect(null, mapDispatchToProps)(CloseChannel);\n","// Copyright (c) 2015-present Mattermost, Inc. All Rights Reserved.\n// See LICENSE.txt for license information.\n\nimport React from 'react';\nimport PropTypes from 'prop-types';\n\nimport {Constants, NotificationLevels} from 'utils/constants';\n\nimport {localizeMessage} from 'utils/utils';\n\nimport MenuItemAction from 'components/widgets/menu/menu_items/menu_item_action';\n\nexport default class MenuItemToggleMuteChannel extends React.PureComponent {\n    static propTypes = {\n\n        /**\n         * Object with info about the current user\n         */\n        user: PropTypes.object.isRequired,\n\n        /**\n         * Object with info about the current channel\n         */\n        channel: PropTypes.object.isRequired,\n\n        /**\n         * Boolean whether the current channel is muted\n         */\n        isMuted: PropTypes.bool.isRequired,\n\n        /**\n         * Use for test selector\n         */\n        id: PropTypes.string,\n\n        /**\n         * Object with action creators\n         */\n        actions: PropTypes.shape({\n            updateChannelNotifyProps: PropTypes.func.isRequired,\n        }).isRequired,\n    };\n\n    handleClick = () => {\n        const {\n            user,\n            channel,\n            isMuted,\n            actions: {\n                updateChannelNotifyProps,\n            },\n        } = this.props;\n\n        updateChannelNotifyProps(user.id, channel.id, {\n            mark_unread: isMuted ? NotificationLevels.ALL : NotificationLevels.MENTION,\n        });\n    }\n\n    render() {\n        const {\n            channel,\n            id,\n            isMuted,\n        } = this.props;\n\n        let text;\n        if (isMuted) {\n            text = localizeMessage('channel_header.unmute', 'Unmute Channel');\n        } else {\n            text = localizeMessage('channel_header.mute', 'Mute Channel');\n        }\n\n        return (\n            <MenuItemAction\n                id={id}\n                show={channel.type !== Constants.DM_CHANNEL}\n                onClick={this.handleClick}\n                text={text}\n            />\n        );\n    }\n}\n","// Copyright (c) 2015-present Mattermost, Inc. All Rights Reserved.\n// See LICENSE.txt for license information.\n\nimport {bindActionCreators} from 'redux';\nimport {connect} from 'react-redux';\nimport {updateChannelNotifyProps} from 'mattermost-redux/actions/channels';\n\nimport MenuItemToggleMuteChannel from './toggle_mute_channel';\n\nconst mapDispatchToProps = (dispatch) => ({\n    actions: bindActionCreators({\n        updateChannelNotifyProps,\n    }, dispatch),\n});\n\nexport default connect(null, mapDispatchToProps)(MenuItemToggleMuteChannel);\n","// Copyright (c) 2015-present Mattermost, Inc. All Rights Reserved.\n// See LICENSE.txt for license information.\n\nimport React from 'react';\nimport PropTypes from 'prop-types';\n\nimport {localizeMessage} from 'utils/utils';\n\nimport MenuItemAction from 'components/widgets/menu/menu_items/menu_item_action';\n\nexport default class ToggleFavoriteChannel extends React.PureComponent {\n    static propTypes = {\n        show: PropTypes.bool.isRequired,\n        channel: PropTypes.object.isRequired,\n        isFavorite: PropTypes.bool.isRequired,\n        actions: PropTypes.shape({\n            favoriteChannel: PropTypes.func.isRequired,\n            unfavoriteChannel: PropTypes.func.isRequired,\n        }).isRequired,\n    };\n\n    static defaultProps = {\n        show: true,\n    }\n\n    toggleFavoriteChannel = (channelId) => {\n        const {\n            isFavorite,\n            actions: {\n                favoriteChannel,\n                unfavoriteChannel,\n            },\n        } = this.props;\n\n        return isFavorite ? unfavoriteChannel(channelId) : favoriteChannel(channelId);\n    }\n\n    handleClick = (e) => {\n        e.preventDefault();\n        this.toggleFavoriteChannel(this.props.channel.id);\n    }\n\n    render() {\n        let text;\n        if (this.props.isFavorite) {\n            text = localizeMessage('channelHeader.removeFromFavorites', 'Remove from Favorites');\n        } else {\n            text = localizeMessage('channelHeader.addToFavorites', 'Add to Favorites');\n        }\n        return (\n            <MenuItemAction\n                show={this.props.show}\n                onClick={this.handleClick}\n                text={text}\n            />\n        );\n    }\n}\n","// Copyright (c) 2015-present Mattermost, Inc. All Rights Reserved.\n// See LICENSE.txt for license information.\n\nimport {bindActionCreators} from 'redux';\nimport {connect} from 'react-redux';\nimport {favoriteChannel, unfavoriteChannel} from 'mattermost-redux/actions/channels';\n\nimport ToggleFavoriteChannel from './toggle_favorite_channel';\n\nconst mapDispatchToProps = (dispatch) => ({\n    actions: bindActionCreators({\n        favoriteChannel,\n        unfavoriteChannel,\n    }, dispatch),\n});\n\nexport default connect(null, mapDispatchToProps)(ToggleFavoriteChannel);\n","// Copyright (c) 2015-present Mattermost, Inc. All Rights Reserved.\n// See LICENSE.txt for license information.\n\nimport React from 'react';\nimport PropTypes from 'prop-types';\n\nimport {localizeMessage} from 'utils/utils';\n\nimport MenuItemAction from 'components/widgets/menu/menu_items/menu_item_action';\n\nexport default class ViewPinnedPosts extends React.PureComponent {\n    static propTypes = {\n        show: PropTypes.bool,\n        channel: PropTypes.object.isRequired,\n        hasPinnedPosts: PropTypes.bool.isRequired,\n        actions: PropTypes.shape({\n            closeRightHandSide: PropTypes.func.isRequired,\n            showPinnedPosts: PropTypes.func.isRequired,\n        }).isRequired,\n    }\n\n    handleClick = (e) => {\n        e.preventDefault();\n\n        const {\n            channel,\n            hasPinnedPosts,\n            actions: {\n                closeRightHandSide,\n                showPinnedPosts,\n            },\n        } = this.props;\n\n        if (hasPinnedPosts) {\n            closeRightHandSide();\n        } else {\n            showPinnedPosts(channel.id);\n        }\n    }\n\n    render() {\n        return (\n            <MenuItemAction\n                show={this.props.show}\n                onClick={this.handleClick}\n                text={localizeMessage('navbar.viewPinnedPosts', 'View Pinned Posts')}\n            />\n        );\n    }\n}\n","// Copyright (c) 2015-present Mattermost, Inc. All Rights Reserved.\n// See LICENSE.txt for license information.\n\nimport {bindActionCreators} from 'redux';\nimport {connect} from 'react-redux';\n\nimport {closeRightHandSide, showPinnedPosts} from 'actions/views/rhs';\nimport {getRhsState} from 'selectors/rhs';\nimport {RHSStates} from 'utils/constants';\n\nimport ViewPinnedPosts from './view_pinned_posts';\n\nconst mapStateToProps = (state) => ({\n    hasPinnedPosts: getRhsState(state) === RHSStates.PIN,\n});\n\nconst mapDispatchToProps = (dispatch) => ({\n    actions: bindActionCreators({\n        closeRightHandSide,\n        showPinnedPosts,\n    }, dispatch),\n});\n\nexport default connect(mapStateToProps, mapDispatchToProps)(ViewPinnedPosts);\n","// Copyright (c) 2015-present Mattermost, Inc. All Rights Reserved.\n// See LICENSE.txt for license information.\n\nimport React from 'react';\nimport PropTypes from 'prop-types';\nimport {Permissions} from 'mattermost-redux/constants';\n\nimport {Constants, ModalIdentifiers} from 'utils/constants';\nimport {localizeMessage} from 'utils/utils';\n\nimport MobileChannelHeaderPlug from 'plugins/mobile_channel_header_plug';\n\nimport ChannelNotificationsModal from 'components/channel_notifications_modal';\nimport ChannelInviteModal from 'components/channel_invite_modal';\nimport ChannelMembersModal from 'components/channel_members_modal';\nimport ChannelInfoModal from 'components/channel_info_modal';\nimport EditChannelHeaderModal from 'components/edit_channel_header_modal';\nimport EditChannelPurposeModal from 'components/edit_channel_purpose_modal';\nimport RenameChannelModal from 'components/rename_channel_modal';\nimport ConvertChannelModal from 'components/convert_channel_modal';\nimport DeleteChannelModal from 'components/delete_channel_modal';\nimport MoreDirectChannels from 'components/more_direct_channels';\nimport AddGroupsToChannelModal from 'components/add_groups_to_channel_modal';\nimport ChannelGroupsManageModal from 'components/channel_groups_manage_modal';\n\nimport ChannelPermissionGate from 'components/permissions_gates/channel_permission_gate';\nimport TeamPermissionGate from 'components/permissions_gates/team_permission_gate';\n\nimport MenuGroup from 'components/widgets/menu/menu_group.jsx';\nimport MenuItemToggleModalRedux from 'components/widgets/menu/menu_items/menu_item_toggle_modal_redux.jsx';\n\nimport MenuItemLeaveChannel from './menu_items/leave_channel';\nimport MenuItemCloseChannel from './menu_items/close_channel';\nimport MenuItemToggleMuteChannel from './menu_items/toggle_mute_channel';\nimport MenuItemToggleFavoriteChannel from './menu_items/toggle_favorite_channel';\nimport MenuItemViewPinnedPosts from './menu_items/view_pinned_posts';\n\nexport default class ChannelHeaderDropdown extends React.PureComponent {\n    static propTypes = {\n        user: PropTypes.object.isRequired,\n        channel: PropTypes.object.isRequired,\n        isDefault: PropTypes.bool.isRequired,\n        isFavorite: PropTypes.bool.isRequired,\n        isReadonly: PropTypes.bool.isRequired,\n        isMuted: PropTypes.bool.isRequired,\n        isArchived: PropTypes.bool.isRequired,\n        isMobile: PropTypes.bool.isRequired,\n        penultimateViewedChannelName: PropTypes.string.isRequired,\n    }\n\n    render() {\n        const {\n            user,\n            channel,\n            isDefault,\n            isFavorite,\n            isMuted,\n            isReadonly,\n            isArchived,\n            isMobile,\n            penultimateViewedChannelName,\n        } = this.props;\n\n        const isPrivate = channel.type === Constants.PRIVATE_CHANNEL;\n        const isGroupConstrained = channel.group_constrained === true;\n        const channelMembersPermission = isPrivate ? Permissions.MANAGE_PRIVATE_CHANNEL_MEMBERS : Permissions.MANAGE_PUBLIC_CHANNEL_MEMBERS;\n        const channelPropertiesPermission = isPrivate ? Permissions.MANAGE_PRIVATE_CHANNEL_PROPERTIES : Permissions.MANAGE_PUBLIC_CHANNEL_PROPERTIES;\n        const channelDeletePermission = isPrivate ? Permissions.DELETE_PRIVATE_CHANNEL : Permissions.DELETE_PUBLIC_CHANNEL;\n\n        let divider;\n        if (isMobile) {\n            divider = (\n                <li className='MenuGroup mobile-menu-divider'>\n                    <hr/>\n                </li>\n            );\n        }\n\n        return (\n            <React.Fragment>\n                <MenuGroup divider={divider}>\n                    <MenuItemToggleModalRedux\n                        id='channelViewInfo'\n                        show={channel.type !== Constants.DM_CHANNEL && channel.type !== Constants.GM_CHANNEL}\n                        modalId={ModalIdentifiers.CHANNEL_INFO}\n                        dialogType={ChannelInfoModal}\n                        dialogProps={{channel}}\n                        text={localizeMessage('navbar.viewInfo', 'View Info')}\n                    />\n                    <MenuItemToggleFavoriteChannel\n                        id='channelToggleFavorite'\n                        show={isMobile}\n                        channel={channel}\n                        isFavorite={isFavorite}\n                    />\n                    <MenuItemViewPinnedPosts\n                        id='channelViewPinnedPosts'\n                        show={isMobile}\n                        channel={channel}\n                    />\n                    <MenuItemToggleModalRedux\n                        id='channelNotificationPreferences'\n                        show={channel.type !== Constants.DM_CHANNEL && !isArchived}\n                        modalId={ModalIdentifiers.CHANNEL_NOTIFICATIONS}\n                        dialogType={ChannelNotificationsModal}\n                        dialogProps={{\n                            channel,\n                            currentUser: user,\n                        }}\n                        text={localizeMessage('navbar.preferences', 'Notification Preferences')}\n                    />\n                    <MenuItemToggleMuteChannel\n                        id='channelToggleMuteChannel'\n                        user={user}\n                        channel={channel}\n                        isMuted={isMuted}\n                        isArchived={isArchived}\n                    />\n                </MenuGroup>\n\n                <MenuGroup divider={divider}>\n                    <ChannelPermissionGate\n                        channelId={channel.id}\n                        teamId={channel.team_id}\n                        permissions={[channelMembersPermission]}\n                    >\n                        <MenuItemToggleModalRedux\n                            id='channelAddMembers'\n                            show={channel.type !== Constants.DM_CHANNEL && channel.type !== Constants.GM_CHANNEL && !isArchived && !isDefault && !isGroupConstrained}\n                            modalId={ModalIdentifiers.CHANNEL_INVITE}\n                            dialogType={ChannelInviteModal}\n                            dialogProps={{channel}}\n                            text={localizeMessage('navbar.addMembers', 'Add Members')}\n                        />\n                        <MenuItemToggleModalRedux\n                            id='channelAddMembers'\n                            show={channel.type === Constants.GM_CHANNEL && !isArchived && !isGroupConstrained}\n                            modalId={ModalIdentifiers.CREATE_DM_CHANNEL}\n                            dialogType={MoreDirectChannels}\n                            dialogProps={{isExistingChannel: true}}\n                            text={localizeMessage('navbar.addMembers', 'Add Members')}\n                        />\n                    </ChannelPermissionGate>\n                    <MenuItemToggleModalRedux\n                        id='channelViewMembers'\n                        show={channel.type !== Constants.DM_CHANNEL && channel.type !== Constants.GM_CHANNEL && (isArchived || isDefault)}\n                        modalId={ModalIdentifiers.CHANNEL_MEMBERS}\n                        dialogType={ChannelMembersModal}\n                        dialogProps={{channel}}\n                        text={localizeMessage('channel_header.viewMembers', 'View Members')}\n                    />\n                    <ChannelPermissionGate\n                        channelId={channel.id}\n                        teamId={channel.team_id}\n                        permissions={[channelMembersPermission]}\n                    >\n                        <MenuItemToggleModalRedux\n                            id='channelAddGroups'\n                            show={channel.type !== Constants.DM_CHANNEL && channel.type !== Constants.GM_CHANNEL && !isArchived && !isDefault && isGroupConstrained}\n                            modalId={ModalIdentifiers.ADD_GROUPS_TO_CHANNEL}\n                            dialogType={AddGroupsToChannelModal}\n                            dialogProps={{}}\n                            text={localizeMessage('navbar.addGroups', 'Add Groups')}\n                        />\n                        <MenuItemToggleModalRedux\n                            id='channelManageGroups'\n                            show={channel.type !== Constants.DM_CHANNEL && channel.type !== Constants.GM_CHANNEL && !isArchived && !isDefault && isGroupConstrained}\n                            modalId={ModalIdentifiers.MANAGE_CHANNEL_GROUPS}\n                            dialogType={ChannelGroupsManageModal}\n                            dialogProps={{channelID: channel.id}}\n                            text={localizeMessage('navbar_dropdown.manageGroups', 'Manage Groups')}\n                        />\n                        <MenuItemToggleModalRedux\n                            id='channelManageMembers'\n                            show={channel.type !== Constants.DM_CHANNEL && channel.type !== Constants.GM_CHANNEL && !isArchived && !isDefault}\n                            modalId={ModalIdentifiers.CHANNEL_MEMBERS}\n                            dialogType={ChannelMembersModal}\n                            dialogProps={{channel}}\n                            text={localizeMessage('channel_header.manageMembers', 'Manage Members')}\n                        />\n                    </ChannelPermissionGate>\n                    <ChannelPermissionGate\n                        channelId={channel.id}\n                        teamId={channel.team_id}\n                        permissions={[channelMembersPermission]}\n                        invert={true}\n                    >\n                        <MenuItemToggleModalRedux\n                            id='channelViewMembers'\n                            show={channel.type !== Constants.DM_CHANNEL && channel.type !== Constants.GM_CHANNEL && !isArchived && !isDefault}\n                            modalId={ModalIdentifiers.CHANNEL_MEMBERS}\n                            dialogType={ChannelMembersModal}\n                            dialogProps={{channel}}\n                            text={localizeMessage('channel_header.viewMembers', 'View Members')}\n                        />\n                    </ChannelPermissionGate>\n                </MenuGroup>\n\n                <MenuGroup divider={divider}>\n                    <MenuItemToggleModalRedux\n                        id='channelEditHeader'\n                        show={(channel.type === Constants.DM_CHANNEL || channel.type === Constants.GM_CHANNEL) && !isArchived && !isReadonly}\n                        modalId={ModalIdentifiers.EDIT_CHANNEL_HEADER}\n                        dialogType={EditChannelHeaderModal}\n                        dialogProps={{channel}}\n                        text={localizeMessage('channel_header.setHeader', 'Edit Channel Header')}\n                    />\n                    <ChannelPermissionGate\n                        channelId={channel.id}\n                        teamId={channel.team_id}\n                        permissions={[channelPropertiesPermission]}\n                    >\n                        <MenuItemToggleModalRedux\n                            id='channelEditHeader'\n                            show={channel.type !== Constants.DM_CHANNEL && channel.type !== Constants.GM_CHANNEL && !isArchived && !isReadonly}\n                            modalId={ModalIdentifiers.EDIT_CHANNEL_HEADER}\n                            dialogType={EditChannelHeaderModal}\n                            dialogProps={{channel}}\n                            text={localizeMessage('channel_header.setHeader', 'Edit Channel Header')}\n                        />\n                        <MenuItemToggleModalRedux\n                            id='channelEditPurpose'\n                            show={!isArchived && !isReadonly && channel.type !== Constants.DM_CHANNEL && channel.type !== Constants.GM_CHANNEL}\n                            modalId={ModalIdentifiers.EDIT_CHANNEL_PURPOSE}\n                            dialogType={EditChannelPurposeModal}\n                            dialogProps={{channel}}\n                            text={localizeMessage('channel_header.setPurpose', 'Edit Channel Purpose')}\n                        />\n                        <MenuItemToggleModalRedux\n                            id='channelRename'\n                            show={!isArchived && channel.type !== Constants.DM_CHANNEL && channel.type !== Constants.GM_CHANNEL}\n                            modalId={ModalIdentifiers.RENAME_CHANNEL}\n                            dialogType={RenameChannelModal}\n                            dialogProps={{channel}}\n                            text={localizeMessage('channel_header.rename', 'Rename Channel')}\n                        />\n                    </ChannelPermissionGate>\n                    <TeamPermissionGate\n                        teamId={channel.team_id}\n                        permissions={[Permissions.MANAGE_TEAM]}\n                    >\n                        <MenuItemToggleModalRedux\n                            id='channelCovertToPrivate'\n                            show={!isArchived && !isDefault && channel.type === Constants.OPEN_CHANNEL}\n                            modalId={ModalIdentifiers.CONVERT_CHANNEL}\n                            dialogType={ConvertChannelModal}\n                            dialogProps={{\n                                channelId: channel.id,\n                                channelDisplayName: channel.display_name,\n                            }}\n                            text={localizeMessage('channel_header.convert', 'Convert to Private Channel')}\n                        />\n                    </TeamPermissionGate>\n                    <ChannelPermissionGate\n                        channelId={channel.id}\n                        teamId={channel.team_id}\n                        permissions={[channelDeletePermission]}\n                    >\n                        <MenuItemToggleModalRedux\n                            id='channelArchiveChannel'\n                            show={!isArchived && !isDefault && channel.type !== Constants.DM_CHANNEL && channel.type !== Constants.GM_CHANNEL}\n                            modalId={ModalIdentifiers.DELETE_CHANNEL}\n                            dialogType={DeleteChannelModal}\n                            dialogProps={{\n                                channel,\n                                penultimateViewedChannelName,\n                            }}\n                            text={localizeMessage('channel_header.delete', 'Archive Channel')}\n                        />\n                    </ChannelPermissionGate>\n                </MenuGroup>\n\n                <MenuGroup divider={divider}>\n                    {isMobile &&\n                        <MobileChannelHeaderPlug\n                            channel={channel}\n                            isDropdown={true}\n                        />}\n                    <MenuItemLeaveChannel\n                        id='channelLeaveChannel'\n                        channel={channel}\n                        isDefault={isDefault}\n                    />\n                    <MenuItemCloseChannel\n                        id='channelCloseChannel'\n                        isArchived={isArchived}\n                    />\n                </MenuGroup>\n            </React.Fragment>\n        );\n    }\n}\n","// Copyright (c) 2015-present Mattermost, Inc. All Rights Reserved.\n// See LICENSE.txt for license information.\n\nimport PropTypes from 'prop-types';\nimport React from 'react';\nimport {CSSTransition} from 'react-transition-group';\n\nconst ANIMATION_DURATION = 350;\n\nexport default class MobileChannelHeaderDropdownAnimation extends React.PureComponent {\n    static propTypes = {\n        children: PropTypes.node,\n        show: PropTypes.bool.isRequired,\n    };\n\n    render() {\n        return (\n            <CSSTransition\n                in={this.props.show}\n                classNames='mobile-channel-header-dropdown'\n                enter={true}\n                exit={true}\n                mountOnEnter={true}\n                unmountOnExit={true}\n                timeout={{\n                    enter: ANIMATION_DURATION,\n                    exit: ANIMATION_DURATION,\n                }}\n            >\n                {this.props.children}\n            </CSSTransition>\n        );\n    }\n}\n\n","// Copyright (c) 2015-present Mattermost, Inc. All Rights Reserved.\n// See LICENSE.txt for license information.\n\nimport React from 'react';\nimport PropTypes from 'prop-types';\nimport {FormattedMessage} from 'react-intl';\n\nimport StatusIcon from 'components/status_icon';\n\nimport {Constants} from 'utils/constants';\nimport {getDisplayNameByUserId} from 'utils/utils';\n\nimport {ChannelHeaderDropdownItems} from 'components/channel_header_dropdown';\n\nimport Menu from 'components/widgets/menu/menu';\nimport MenuWrapper from 'components/widgets/menu/menu_wrapper';\n\nimport MobileChannelHeaderDropdownAnimation from './mobile_channel_header_dropdown_animation.jsx';\n\nexport default class MobileChannelHeaderDropdown extends React.PureComponent {\n    static propTypes = {\n        user: PropTypes.object.isRequired,\n        channel: PropTypes.object.isRequired,\n        teammateId: PropTypes.string,\n        teammateIsBot: PropTypes.bool,\n        teammateStatus: PropTypes.string,\n    }\n\n    getChannelTitle = () => {\n        const {user, channel, teammateId} = this.props;\n\n        if (channel.type === Constants.DM_CHANNEL) {\n            const displayname = getDisplayNameByUserId(teammateId);\n            if (user.id === teammateId) {\n                return (\n                    <FormattedMessage\n                        id='channel_header.directchannel.you'\n                        defaultMessage='{displayname} (you)'\n                        values={{displayname}}\n                    />\n                );\n            }\n            return displayname;\n        }\n        return channel.display_name;\n    }\n\n    render() {\n        const {teammateIsBot, teammateStatus} = this.props;\n        let dmHeaderIconStatus;\n\n        if (!teammateIsBot) {\n            dmHeaderIconStatus = (\n                <StatusIcon status={teammateStatus}/>\n            );\n        }\n\n        return (\n            <MenuWrapper animationComponent={MobileChannelHeaderDropdownAnimation}>\n                <a>\n                    <span className='heading'>\n                        {dmHeaderIconStatus}\n                        {this.getChannelTitle()}\n                    </span>\n                    <FormattedMessage\n                        id='generic_icons.dropdown'\n                        defaultMessage='Dropdown Icon'\n                    >\n                        {(title) => (\n                            <span\n                                className='fa fa-angle-down header-dropdown__icon'\n                                title={title}\n                            />\n                        )}\n                    </FormattedMessage>\n                </a>\n\n                <FormattedMessage\n                    id='channel_header.menuAriaLabel'\n                    defaultMessage='Channel Menu'\n                >\n                    {(ariaLabel) => (\n                        <Menu ariaLabel={ariaLabel}>\n                            <ChannelHeaderDropdownItems isMobile={true}/>\n                            <div className='close visible-xs-block'>\n                                {'×'}\n                            </div>\n                        </Menu>\n                    )}\n                </FormattedMessage>\n            </MenuWrapper>\n        );\n    }\n}\n","// Copyright (c) 2015-present Mattermost, Inc. All Rights Reserved.\n// See LICENSE.txt for license information.\n\nimport {connect} from 'react-redux';\nimport {createSelector} from 'reselect';\nimport {\n    getUser,\n    getCurrentUser,\n    getUserStatuses,\n} from 'mattermost-redux/selectors/entities/users';\nimport {getCurrentTeamId} from 'mattermost-redux/selectors/entities/teams';\nimport {\n    getCurrentChannel,\n    isCurrentChannelDefault,\n    isCurrentChannelFavorite,\n    isCurrentChannelMuted,\n    isCurrentChannelArchived,\n    isCurrentChannelReadOnly,\n    getRedirectChannelNameForTeam,\n} from 'mattermost-redux/selectors/entities/channels';\n\nimport {getPenultimateViewedChannelName} from 'selectors/local_storage';\n\nimport {Constants} from 'utils/constants';\nimport * as Utils from 'utils/utils';\n\nimport Desktop from './channel_header_dropdown';\nimport Items from './channel_header_dropdown_items';\nimport Mobile from './mobile_channel_header_dropdown';\n\nconst getTeammateId = createSelector(\n    getCurrentChannel,\n    (channel) => {\n        if (channel.type !== Constants.DM_CHANNEL) {\n            return null;\n        }\n\n        return Utils.getUserIdFromChannelName(channel);\n    },\n);\n\nconst getTeammateStatus = createSelector(\n    getUserStatuses,\n    getTeammateId,\n    (userStatuses, teammateId) => {\n        if (!teammateId) {\n            return null;\n        }\n\n        return userStatuses[teammateId];\n    }\n);\n\nconst mapStateToProps = (state) => ({\n    user: getCurrentUser(state),\n    channel: getCurrentChannel(state),\n    isDefault: isCurrentChannelDefault(state),\n    isFavorite: isCurrentChannelFavorite(state),\n    isMuted: isCurrentChannelMuted(state),\n    isReadonly: isCurrentChannelReadOnly(state),\n    isArchived: isCurrentChannelArchived(state),\n    penultimateViewedChannelName: getPenultimateViewedChannelName(state) || getRedirectChannelNameForTeam(state, getCurrentTeamId(state)),\n});\n\nconst mobileMapStateToProps = (state) => {\n    const user = getCurrentUser(state);\n    const channel = getCurrentChannel(state);\n    const teammateId = getTeammateId(state);\n\n    let teammateIsBot = false;\n    if (teammateId) {\n        const teammate = getUser(state, teammateId);\n        teammateIsBot = teammate && teammate.is_bot;\n    }\n\n    return {\n        user,\n        channel,\n        teammateId,\n        teammateIsBot,\n        teammateStatus: getTeammateStatus(state),\n    };\n};\n\nexport const ChannelHeaderDropdown = Desktop;\nexport const ChannelHeaderDropdownItems = connect(mapStateToProps)(Items);\nexport const MobileChannelHeaderDropdown = connect(mobileMapStateToProps)(Mobile);\n","// Copyright (c) 2015-present Mattermost, Inc. All Rights Reserved.\n// See LICENSE.txt for license information.\n\n/* eslint-disable react/no-multi-comp */\n\nimport PropTypes from 'prop-types';\nimport React from 'react';\nimport {Dropdown} from 'react-bootstrap';\nimport {RootCloseWrapper} from 'react-overlays';\n\nimport HeaderIconWrapper from 'components/channel_header/components/header_icon_wrapper';\n\nclass CustomMenu extends React.PureComponent {\n    static propTypes = {\n        open: PropTypes.bool,\n        children: PropTypes.node,\n        onClose: PropTypes.func.isRequired,\n        rootCloseEvent: PropTypes.oneOf(['click', 'mousedown']),\n    }\n\n    handleRootClose = () => {\n        this.props.onClose();\n    }\n\n    render() {\n        const {\n            open,\n            rootCloseEvent,\n            children,\n        } = this.props;\n\n        return (\n            <RootCloseWrapper\n                disabled={!open}\n                onRootClose={this.handleRootClose}\n                event={rootCloseEvent}\n            >\n                <ul\n                    role='menu'\n                    className='dropdown-menu channel-header_plugin-dropdown'\n                >\n                    {children}\n                </ul>\n            </RootCloseWrapper>\n        );\n    }\n}\n\nclass CustomToggle extends React.PureComponent {\n    static propTypes = {\n        children: PropTypes.element,\n        dropdownOpen: PropTypes.bool,\n        onClick: PropTypes.func,\n    }\n\n    handleClick = (e) => {\n        this.props.onClick(e);\n    }\n\n    render() {\n        const {children} = this.props;\n\n        let activeClass = '';\n        if (this.props.dropdownOpen) {\n            activeClass = ' active';\n        }\n\n        return (\n            <button\n                id='pluginChannelHeaderButtonDropdown'\n                className={'channel-header__icon style--none' + activeClass}\n                type='button'\n                onClick={this.handleClick}\n            >\n                {children}\n            </button>\n        );\n    }\n}\n\nexport default class ChannelHeaderPlug extends React.PureComponent {\n    static propTypes = {\n\n        /*\n         * Components or actions to add as channel header buttons\n         */\n        components: PropTypes.array,\n\n        channel: PropTypes.object.isRequired,\n        channelMember: PropTypes.object.isRequired,\n\n        /*\n         * Logged in user's theme\n         */\n        theme: PropTypes.object.isRequired,\n    }\n\n    constructor(props) {\n        super(props);\n        this.state = {\n            dropdownOpen: false,\n        };\n    }\n\n    toggleDropdown = (dropdownOpen) => {\n        this.setState({dropdownOpen});\n    }\n\n    onClose = () => {\n        this.toggleDropdown(false);\n    }\n\n    fireActionAndClose = (action) => {\n        action(this.props.channel, this.props.channelMember);\n        this.onClose();\n    }\n\n    createButton = (plug) => {\n        return (\n            <HeaderIconWrapper\n                buttonClass='channel-header__icon style--none'\n                iconComponent={plug.icon}\n                onClick={() => plug.action(this.props.channel, this.props.channelMember)}\n                buttonId={plug.id}\n                tooltipKey={'plugin'}\n                tooltipText={plug.tooltipText ? plug.tooltipText : plug.dropdownText}\n            />\n        );\n    }\n\n    createDropdown = (plugs) => {\n        const items = plugs.map((plug) => {\n            return (\n                <li\n                    key={'channelHeaderPlug' + plug.id}\n                >\n                    <a\n                        href='#'\n                        className='d-flex align-items-center'\n                        onClick={() => this.fireActionAndClose(plug.action)}\n                    >\n                        <span className='d-flex align-items-center overflow--ellipsis'>{plug.icon}</span>\n                        <span>{plug.dropdownText}</span>\n                    </a>\n                </li>\n            );\n        });\n\n        return (\n            <div className='flex-child'>\n                <Dropdown\n                    ref='dropdown'\n                    id='channelHeaderPlugDropdown'\n                    onToggle={this.toggleDropdown}\n                    onSelect={this.onSelect}\n                    open={this.state.dropdownOpen}\n                >\n                    <CustomToggle\n                        dropdownOpen={this.state.dropdownOpen}\n                        bsRole='toggle'\n                    >\n                        <span className='fa fa-ellipsis-h icon__ellipsis'/>\n                    </CustomToggle>\n                    <CustomMenu\n                        bsRole='menu'\n                        open={this.state.dropdownOpen}\n                        onClose={this.onClose}\n                    >\n                        {items}\n                    </CustomMenu>\n                </Dropdown>\n            </div>\n        );\n    }\n\n    render() {\n        const components = this.props.components || [];\n\n        if (components.length === 0) {\n            return null;\n        } else if (components.length === 1) {\n            return this.createButton(components[0]);\n        }\n\n        return this.createDropdown(components);\n    }\n}\n\n/* eslint-enable react/no-multi-comp */","// Copyright (c) 2015-present Mattermost, Inc. All Rights Reserved.\n// See LICENSE.txt for license information.\n\nimport {connect} from 'react-redux';\nimport {getTheme} from 'mattermost-redux/selectors/entities/preferences';\n\nimport ChannelHeaderPlug from './channel_header_plug.jsx';\n\nfunction mapStateToProps(state) {\n    return {\n        components: state.plugins.components.ChannelHeaderButton,\n        theme: getTheme(state),\n    };\n}\n\nexport default connect(mapStateToProps)(ChannelHeaderPlug);\n","// Copyright (c) 2015-present Mattermost, Inc. All Rights Reserved.\n// See LICENSE.txt for license information.\n\nimport React from 'react';\nimport PropTypes from 'prop-types';\nimport {OverlayTrigger, Popover, Tooltip} from 'react-bootstrap';\nimport {FormattedMessage, intlShape} from 'react-intl';\nimport {Permissions} from 'mattermost-redux/constants';\nimport {memoizeResult} from 'mattermost-redux/utils/helpers';\n\nimport 'bootstrap';\n\nimport EditChannelHeaderModal from 'components/edit_channel_header_modal';\nimport Markdown from 'components/markdown';\nimport PopoverListMembers from 'components/popover_list_members';\nimport SearchBar from 'components/search_bar';\nimport StatusIcon from 'components/status_icon';\nimport FlagIcon from 'components/svg/flag_icon';\nimport MentionsIcon from 'components/svg/mentions_icon';\nimport PinIcon from 'components/svg/pin_icon';\nimport SearchIcon from 'components/svg/search_icon';\nimport ArchiveIcon from 'components/svg/archive_icon';\nimport ChannelPermissionGate from 'components/permissions_gates/channel_permission_gate';\nimport QuickSwitchModal from 'components/quick_switch_modal';\nimport {ChannelHeaderDropdown} from 'components/channel_header_dropdown';\nimport MenuWrapper from 'components/widgets/menu/menu_wrapper.jsx';\nimport BotBadge from 'components/widgets/badges/bot_badge.jsx';\n\nimport {\n    Constants,\n    ModalIdentifiers,\n    NotificationLevels,\n    RHSStates,\n} from 'utils/constants';\nimport * as Utils from 'utils/utils';\n\nimport ChannelHeaderPlug from 'plugins/channel_header_plug';\n\nimport HeaderIconWrapper from './components/header_icon_wrapper';\n\nconst headerMarkdownOptions = {singleline: true, mentionHighlight: false, atMentions: true};\nconst popoverMarkdownOptions = {singleline: false, mentionHighlight: false, atMentions: true};\n\nconst SEARCH_BAR_MINIMUM_WINDOW_SIZE = 1140;\n\nexport default class ChannelHeader extends React.PureComponent {\n    static propTypes = {\n        teamId: PropTypes.string.isRequired,\n        currentUser: PropTypes.object.isRequired,\n        channel: PropTypes.object,\n        channelMember: PropTypes.object,\n        dmUser: PropTypes.object,\n        isFavorite: PropTypes.bool,\n        isReadOnly: PropTypes.bool,\n        isMuted: PropTypes.bool,\n        rhsState: PropTypes.oneOf(\n            Object.values(RHSStates),\n        ),\n        isQuickSwitcherOpen: PropTypes.bool,\n        actions: PropTypes.shape({\n            favoriteChannel: PropTypes.func.isRequired,\n            unfavoriteChannel: PropTypes.func.isRequired,\n            showFlaggedPosts: PropTypes.func.isRequired,\n            showPinnedPosts: PropTypes.func.isRequired,\n            showMentions: PropTypes.func.isRequired,\n            closeRightHandSide: PropTypes.func.isRequired,\n            updateRhsState: PropTypes.func.isRequired,\n            getCustomEmojisInText: PropTypes.func.isRequired,\n            updateChannelNotifyProps: PropTypes.func.isRequired,\n            goToLastViewedChannel: PropTypes.func.isRequired,\n            openModal: PropTypes.func.isRequired,\n            closeModal: PropTypes.func.isRequired,\n        }).isRequired,\n    };\n\n    static contextTypes = {\n        intl: intlShape.isRequired,\n    };\n\n    constructor(props) {\n        super(props);\n        this.toggleFavoriteRef = React.createRef();\n\n        const showSearchBar = Utils.windowWidth() > SEARCH_BAR_MINIMUM_WINDOW_SIZE;\n        this.state = {\n            showSearchBar,\n        };\n\n        this.getHeaderMarkdownOptions = memoizeResult((channelNamesMap) => (\n            {...headerMarkdownOptions, channelNamesMap}\n        ));\n        this.getPopoverMarkdownOptions = memoizeResult((channelNamesMap) => (\n            {...popoverMarkdownOptions, channelNamesMap}\n        ));\n    }\n\n    componentDidMount() {\n        this.props.actions.getCustomEmojisInText(this.props.channel ? this.props.channel.header : '');\n        document.addEventListener('keydown', this.handleShortcut);\n        document.addEventListener('keydown', this.handleQuickSwitchKeyPress);\n        window.addEventListener('resize', this.handleResize);\n    }\n\n    componentWillUnmount() {\n        document.removeEventListener('keydown', this.handleShortcut);\n        document.removeEventListener('keydown', this.handleQuickSwitchKeyPress);\n        window.removeEventListener('resize', this.handleResize);\n    }\n\n    componentDidUpdate(prevProps) {\n        const header = this.props.channel ? this.props.channel.header : '';\n        const prevHeader = prevProps.channel ? prevProps.channel.header : '';\n        if (header !== prevHeader) {\n            this.props.actions.getCustomEmojisInText(header);\n        }\n    }\n\n    handleResize = () => {\n        const windowWidth = Utils.windowWidth();\n\n        this.setState({showSearchBar: windowWidth > SEARCH_BAR_MINIMUM_WINDOW_SIZE});\n    };\n\n    handleClose = () => {\n        this.props.actions.goToLastViewedChannel();\n    };\n\n    toggleFavorite = (e) => {\n        e.stopPropagation();\n        if (this.props.isFavorite) {\n            this.props.actions.unfavoriteChannel(this.props.channel.id);\n        } else {\n            this.props.actions.favoriteChannel(this.props.channel.id);\n        }\n    };\n\n    unmute = () => {\n        const {actions, channel, channelMember, currentUser} = this.props;\n\n        if (!channelMember || !currentUser || !channel) {\n            return;\n        }\n\n        const options = {mark_unread: NotificationLevels.ALL};\n        actions.updateChannelNotifyProps(currentUser.id, channel.id, options);\n    };\n\n    mute = () => {\n        const {actions, channel, channelMember, currentUser} = this.props;\n\n        if (!channelMember || !currentUser || !channel) {\n            return;\n        }\n\n        const options = {mark_unread: NotificationLevels.MENTION};\n        actions.updateChannelNotifyProps(currentUser.id, channel.id, options);\n    };\n\n    searchMentions = (e) => {\n        e.preventDefault();\n        if (this.props.rhsState === RHSStates.MENTION) {\n            this.props.actions.closeRightHandSide();\n        } else {\n            this.props.actions.showMentions();\n        }\n    };\n\n    showPinnedPosts = (e) => {\n        e.preventDefault();\n        if (this.props.rhsState === RHSStates.PIN) {\n            this.props.actions.closeRightHandSide();\n        } else {\n            this.props.actions.showPinnedPosts();\n        }\n    };\n\n    getFlagged = (e) => {\n        e.preventDefault();\n        if (this.props.rhsState === RHSStates.FLAG) {\n            this.props.actions.closeRightHandSide();\n        } else {\n            this.props.actions.showFlaggedPosts();\n        }\n    };\n\n    searchButtonClick = (e) => {\n        e.preventDefault();\n        this.props.actions.updateRhsState(RHSStates.SEARCH);\n    };\n\n    handleShortcut = (e) => {\n        if (Utils.cmdOrCtrlPressed(e) && e.shiftKey) {\n            if (Utils.isKeyPressed(e, Constants.KeyCodes.M)) {\n                e.preventDefault();\n                this.searchMentions(e);\n            }\n        }\n    };\n\n    handleOnMouseOver = () => {\n        if (this.refs.headerOverlay) {\n            this.refs.headerOverlay.show();\n        }\n    };\n\n    handleOnMouseOut = () => {\n        if (this.refs.headerOverlay) {\n            this.refs.headerOverlay.hide();\n        }\n    };\n\n    handleQuickSwitchKeyPress = (e) => {\n        if (Utils.cmdOrCtrlPressed(e) && !e.shiftKey && Utils.isKeyPressed(e, Constants.KeyCodes.K)) {\n            if (!e.altKey) {\n                e.preventDefault();\n                this.toggleQuickSwitchModal();\n            }\n        }\n    }\n\n    toggleQuickSwitchModal = () => {\n        const {isQuickSwitcherOpen} = this.props;\n        if (isQuickSwitcherOpen) {\n            this.props.actions.closeModal(ModalIdentifiers.QUICK_SWITCH);\n        } else {\n            this.props.actions.openModal({\n                modalId: ModalIdentifiers.QUICK_SWITCH,\n                dialogType: QuickSwitchModal,\n            });\n        }\n    }\n\n    removeTooltipLink = () => {\n        // Bootstrap adds the attr dynamically, removing it to prevent a11y readout\n        this.toggleFavoriteRef.current.removeAttribute('aria-describedby');\n    }\n\n    showEditChannelHeaderModal = () => {\n        if (this.refs.headerOverlay) {\n            this.refs.headerOverlay.hide();\n        }\n\n        const {actions, channel} = this.props;\n        const modalData = {\n            modalId: ModalIdentifiers.EDIT_CHANNEL_HEADER,\n            dialogType: EditChannelHeaderModal,\n            dialogProps: {channel},\n        };\n\n        actions.openModal(modalData);\n    }\n\n    render() {\n        const {\n            teamId,\n            currentUser,\n            channel,\n            channelMember,\n            isMuted: channelMuted,\n            isReadOnly,\n            isFavorite,\n            dmUser,\n            rhsState,\n        } = this.props;\n        const {formatMessage} = this.context.intl;\n        const ariaLabelChannelHeader = Utils.localizeMessage('accessibility.sections.channelHeader', 'channel header region');\n\n        const channelIsArchived = channel.delete_at !== 0;\n        if (Utils.isEmptyObject(channel) ||\n            Utils.isEmptyObject(channelMember) ||\n            Utils.isEmptyObject(currentUser) ||\n            (!dmUser && channel.type === Constants.DM_CHANNEL)\n        ) {\n            // Use an empty div to make sure the header's height stays constant\n            return (\n                <div className='channel-header'/>\n            );\n        }\n\n        const channelNamesMap = channel.props && channel.props.channel_mentions;\n\n        let channelTitle = channel.display_name;\n        let archivedIcon = null;\n        if (channelIsArchived) {\n            archivedIcon = (<ArchiveIcon className='icon icon__archive icon channel-header-archived-icon svg-text-color'/>);\n        }\n        const isDirect = (channel.type === Constants.DM_CHANNEL);\n        const isGroup = (channel.type === Constants.GM_CHANNEL);\n        const isPrivate = (channel.type === Constants.PRIVATE_CHANNEL);\n\n        if (isDirect) {\n            const teammateId = dmUser.id;\n            if (currentUser.id === teammateId) {\n                channelTitle = (\n                    <FormattedMessage\n                        id='channel_header.directchannel.you'\n                        defaultMessage='{displayname} (you) '\n                        values={{\n                            displayname: Utils.getDisplayNameByUserId(teammateId),\n                        }}\n                    />\n                );\n            } else {\n                channelTitle = Utils.getDisplayNameByUserId(teammateId) + ' ';\n            }\n        }\n\n        let popoverListMembers;\n        if (!isDirect) {\n            popoverListMembers = (\n                <PopoverListMembers\n                    channel={channel}\n                />\n            );\n        }\n\n        let dmHeaderIconStatus;\n        let dmHeaderTextStatus;\n        if (isDirect && !dmUser.delete_at && !dmUser.is_bot) {\n            dmHeaderIconStatus = (\n                <StatusIcon\n                    type='avatar'\n                    status={channel.status}\n                />\n            );\n\n            dmHeaderTextStatus = (\n                <span className='header-status__text'>\n                    <FormattedMessage\n                        id={`status_dropdown.set_${channel.status}`}\n                        defaultMessage={Utils.toTitleCase(channel.status)}\n                    />\n                </span>\n            );\n        }\n\n        let headerTextContainer;\n        const headerText = (isDirect && dmUser.is_bot) ? dmUser.bot_description : channel.header;\n        if (headerText) {\n            const popoverContent = (\n                <Popover\n                    id='header-popover'\n                    bStyle='info'\n                    bSize='large'\n                    placement='bottom'\n                    className='channel-header__popover'\n                    onMouseOver={this.handleOnMouseOver}\n                    onMouseOut={this.handleOnMouseOut}\n                >\n                    <Markdown\n                        message={headerText}\n                        options={this.getPopoverMarkdownOptions(channelNamesMap)}\n                    />\n                </Popover>\n            );\n            headerTextContainer = (\n                <OverlayTrigger\n                    trigger={'click'}\n                    placement='bottom'\n                    rootClose={true}\n                    overlay={popoverContent}\n                    ref='headerOverlay'\n                >\n                    <div\n                        id='channelHeaderDescription'\n                        className='channel-header__description'\n                    >\n                        {dmHeaderIconStatus}\n                        {dmHeaderTextStatus}\n                        <span\n                            className='header-description__text'\n                            onClick={Utils.handleFormattedTextClick}\n                        >\n                            <Markdown\n                                message={headerText}\n                                options={this.getHeaderMarkdownOptions(channelNamesMap)}\n                            />\n                        </span>\n                    </div>\n                </OverlayTrigger>\n            );\n        } else {\n            let editMessage;\n            if (!isReadOnly && !channelIsArchived) {\n                if (isDirect || isGroup) {\n                    if (!isDirect || !dmUser.is_bot) {\n                        editMessage = (\n                            <button\n                                className='style--none'\n                                onClick={this.showEditChannelHeaderModal}\n                            >\n                                <FormattedMessage\n                                    id='channel_header.addChannelHeader'\n                                    defaultMessage='Add a channel description'\n                                />\n                            </button>\n                        );\n                    }\n                } else {\n                    editMessage = (\n                        <ChannelPermissionGate\n                            channelId={channel.id}\n                            teamId={teamId}\n                            permissions={[isPrivate ? Permissions.MANAGE_PRIVATE_CHANNEL_PROPERTIES : Permissions.MANAGE_PUBLIC_CHANNEL_PROPERTIES]}\n                        >\n                            <button\n                                className='style--none'\n                                onClick={this.showEditChannelHeaderModal}\n                            >\n                                <FormattedMessage\n                                    id='channel_header.addChannelHeader'\n                                    defaultMessage='Add a channel description'\n                                />\n                            </button>\n                        </ChannelPermissionGate>\n                    );\n                }\n            }\n            headerTextContainer = (\n                <div\n                    id='channelHeaderDescription'\n                    className='channel-header__description light'\n                >\n                    {dmHeaderIconStatus}\n                    {dmHeaderTextStatus}\n                    {editMessage}\n                </div>\n            );\n        }\n\n        let toggleFavoriteTooltip;\n        let toggleFavorite = null;\n        let ariaLabel = '';\n\n        if (!channelIsArchived) {\n            if (isFavorite) {\n                toggleFavoriteTooltip = (\n                    <Tooltip id='favoriteTooltip'>\n                        <FormattedMessage\n                            id='channelHeader.removeFromFavorites'\n                            defaultMessage='Remove from Favorites'\n                        />\n                    </Tooltip>\n                );\n                ariaLabel = formatMessage({id: 'channelHeader.removeFromFavorites', defaultMessage: 'Remove from Favorites'}).toLowerCase();\n            } else {\n                toggleFavoriteTooltip = (\n                    <Tooltip id='favoriteTooltip'>\n                        <FormattedMessage\n                            id='channelHeader.addToFavorites'\n                            defaultMessage='Add to Favorites'\n                        />\n                    </Tooltip>\n                );\n                ariaLabel = formatMessage({id: 'channelHeader.addToFavorites', defaultMessage: 'Add to Favorites'}).toLowerCase();\n            }\n\n            toggleFavorite = (\n                <OverlayTrigger\n                    delayShow={Constants.OVERLAY_TIME_DELAY}\n                    placement='bottom'\n                    overlay={toggleFavoriteTooltip}\n                    onEntering={this.removeTooltipLink}\n                >\n                    <button\n                        id='toggleFavorite'\n                        ref={this.toggleFavoriteRef}\n                        onClick={this.toggleFavorite}\n                        className={'style--none color--link channel-header__favorites ' + (this.props.isFavorite ? 'active' : 'inactive')}\n                        aria-label={ariaLabel}\n                    >\n                        <i className={'icon fa ' + (this.props.isFavorite ? 'fa-star' : 'fa-star-o')}/>\n                    </button>\n                </OverlayTrigger>\n            );\n        }\n\n        const channelMutedTooltip = (\n            <Tooltip id='channelMutedTooltip'>\n                <FormattedMessage\n                    id='channelHeader.unmute'\n                    defaultMessage='Unmute'\n                />\n            </Tooltip>\n        );\n\n        let muteTrigger;\n        if (channelMuted) {\n            muteTrigger = (\n                <OverlayTrigger\n                    delayShow={Constants.OVERLAY_TIME_DELAY}\n                    placement='bottom'\n                    overlay={channelMutedTooltip}\n                >\n                    <button\n                        id='toggleMute'\n                        onClick={this.unmute}\n                        className={'style--none color--link channel-header__mute inactive'}\n                        aria-label={formatMessage({id: 'generic_icons.muted', defaultMessage: 'Muted Icon'})}\n                    >\n                        <i className={'icon fa fa-bell-slash-o'}/>\n                    </button>\n                </OverlayTrigger>\n            );\n        }\n\n        let pinnedIconClass = 'channel-header__icon';\n        if (rhsState === RHSStates.PIN) {\n            pinnedIconClass += ' active';\n        }\n\n        let title = (\n            <React.Fragment>\n                {toggleFavorite}\n                <MenuWrapper>\n                    <div\n                        id='channelHeaderDropdownButton'\n                        className='channel-header__top'\n                    >\n                        <button\n                            className='channel-header__trigger style--none'\n                            aria-label={formatMessage({id: 'channel_header.menuAriaLabel', defaultMessage: 'Channel Menu'}).toLowerCase()}\n                        >\n                            <strong\n                                role='heading'\n                                aria-level='2'\n                                id='channelHeaderTitle'\n                                className='heading'\n                            >\n                                <span>\n                                    {archivedIcon}\n                                    {channelTitle}\n                                </span>\n                            </strong>\n                            <span\n                                id='channelHeaderDropdownIcon'\n                                className='fa fa-angle-down header-dropdown__icon'\n                                aria-label={formatMessage({id: 'generic_icons.dropdown', defaultMessage: 'Dropdown Icon'}).toLowerCase()}\n                            />\n                        </button>\n                    </div>\n                    <ChannelHeaderDropdown/>\n                </MenuWrapper>\n            </React.Fragment>\n        );\n        if (isDirect && dmUser.is_bot) {\n            title = (\n                <div\n                    id='channelHeaderDropdownButton'\n                    className='channel-header__top'\n                >\n                    {toggleFavorite}\n                    <strong\n                        role='heading'\n                        aria-level='2'\n                        id='channelHeaderTitle'\n                        className='heading'\n                    >\n                        <span>\n                            {archivedIcon}\n                            {channelTitle}\n                        </span>\n                    </strong>\n                    <BotBadge className='badge-popoverlist'/>\n                </div>\n            );\n        }\n\n        return (\n            <div\n                id='channel-header'\n                aria-label={ariaLabelChannelHeader}\n                role='application'\n                tabIndex='-1'\n                data-channelid={`${channel.id}`}\n                className='channel-header alt a11y__region'\n                data-a11y-sort-order='7'\n            >\n                <div className='flex-parent'>\n                    <div className='flex-child'>\n                        <div\n                            id='channelHeaderInfo'\n                            className='channel-header__info'\n                        >\n                            <div\n                                className='channel-header__title dropdown'\n                            >\n                                <div>\n                                    {title}\n                                </div>\n                                {muteTrigger}\n                            </div>\n                            {headerTextContainer}\n                        </div>\n                    </div>\n                    <div className='flex-child'>\n                        {popoverListMembers}\n                    </div>\n                    <ChannelHeaderPlug\n                        channel={channel}\n                        channelMember={channelMember}\n                    />\n                    <HeaderIconWrapper\n                        iconComponent={\n                            <PinIcon\n                                className='icon icon__pin'\n                                aria-hidden='true'\n                            />\n                        }\n                        ariaLabel={true}\n                        buttonClass={'style--none ' + pinnedIconClass}\n                        buttonId={'channelHeaderPinButton'}\n                        onClick={this.showPinnedPosts}\n                        tooltipKey={'pinnedPosts'}\n                    />\n                    {this.state.showSearchBar ? (\n                        <div className='flex-child search-bar__container'>\n                            <SearchBar\n                                showMentionFlagBtns={false}\n                                isFocus={Utils.isMobile()}\n                            />\n                        </div>\n                    ) : (\n                        <HeaderIconWrapper\n                            iconComponent={\n                                <SearchIcon\n                                    className='icon icon__search icon--stroke'\n                                    aria-hidden='true'\n                                />\n                            }\n                            buttonId={'channelHeaderSearchButton'}\n                            onClick={this.searchButtonClick}\n                            tooltipKey={'search'}\n                        />\n                    )}\n                    <HeaderIconWrapper\n                        iconComponent={\n                            <MentionsIcon\n                                className='icon icon__mentions'\n                                aria-hidden='true'\n                            />\n                        }\n                        ariaLabel={true}\n                        buttonId={'channelHeaderMentionButton'}\n                        onClick={this.searchMentions}\n                        tooltipKey={'recentMentions'}\n                    />\n                    <HeaderIconWrapper\n                        iconComponent={\n                            <FlagIcon className='icon icon__flag'/>\n                        }\n                        ariaLabel={true}\n                        buttonId={'channelHeaderFlagButton'}\n                        onClick={this.getFlagged}\n                        tooltipKey={'flaggedPosts'}\n                    />\n                </div>\n            </div>\n        );\n    }\n}\n","// Copyright (c) 2015-present Mattermost, Inc. All Rights Reserved.\n// See LICENSE.txt for license information.\n\nimport {bindActionCreators} from 'redux';\nimport {connect} from 'react-redux';\nimport {withRouter} from 'react-router-dom';\nimport {\n    favoriteChannel,\n    unfavoriteChannel,\n    updateChannelNotifyProps,\n} from 'mattermost-redux/actions/channels';\nimport {getCustomEmojisInText} from 'mattermost-redux/actions/emojis';\nimport {General} from 'mattermost-redux/constants';\nimport {\n    getCurrentChannel,\n    getMyCurrentChannelMembership,\n    isCurrentChannelFavorite,\n    isCurrentChannelMuted,\n    isCurrentChannelReadOnly,\n} from 'mattermost-redux/selectors/entities/channels';\nimport {getCurrentTeamId} from 'mattermost-redux/selectors/entities/teams';\nimport {\n    getCurrentUser,\n    getUser,\n} from 'mattermost-redux/selectors/entities/users';\nimport {getUserIdFromChannelName} from 'mattermost-redux/utils/channel_utils';\n\nimport {goToLastViewedChannel} from 'actions/views/channel';\nimport {openModal, closeModal} from 'actions/views/modals';\nimport {\n    showFlaggedPosts,\n    showPinnedPosts,\n    showMentions,\n    closeRightHandSide,\n    updateRhsState,\n} from 'actions/views/rhs';\nimport {getRhsState} from 'selectors/rhs';\nimport {isModalOpen} from 'selectors/views/modals';\nimport {ModalIdentifiers} from 'utils/constants';\n\nimport ChannelHeader from './channel_header';\n\nconst mapStateToProps = (state) => {\n    const channel = getCurrentChannel(state) || {};\n    const user = getCurrentUser(state);\n\n    let dmUser;\n    if (channel && channel.type === General.DM_CHANNEL) {\n        const dmUserId = getUserIdFromChannelName(user.id, channel.name);\n        dmUser = getUser(state, dmUserId);\n    }\n\n    return {\n        teamId: getCurrentTeamId(state),\n        channel,\n        channelMember: getMyCurrentChannelMembership(state),\n        currentUser: user,\n        dmUser,\n        rhsState: getRhsState(state),\n        isFavorite: isCurrentChannelFavorite(state),\n        isReadOnly: isCurrentChannelReadOnly(state),\n        isMuted: isCurrentChannelMuted(state),\n        isQuickSwitcherOpen: isModalOpen(state, ModalIdentifiers.QUICK_SWITCH),\n    };\n};\n\nconst mapDispatchToProps = (dispatch) => ({\n    actions: bindActionCreators({\n        favoriteChannel,\n        unfavoriteChannel,\n        showFlaggedPosts,\n        showPinnedPosts,\n        showMentions,\n        closeRightHandSide,\n        updateRhsState,\n        getCustomEmojisInText,\n        updateChannelNotifyProps,\n        goToLastViewedChannel,\n        openModal,\n        closeModal,\n    }, dispatch),\n});\n\nexport default withRouter(connect(mapStateToProps, mapDispatchToProps)(ChannelHeader));\n","// Copyright (c) 2015-present Mattermost, Inc. All Rights Reserved.\n// See LICENSE.txt for license information.\n\nimport PropTypes from 'prop-types';\nimport React from 'react';\nimport {FormattedMessage} from 'react-intl';\n\nimport UnreadBelowIcon from 'components/svg/unread_below_icon';\n\nexport default class NewMessagesBelow extends React.PureComponent {\n    static propTypes = {\n        atBottom: PropTypes.bool,\n        onClick: PropTypes.func.isRequired,\n        newMessages: PropTypes.number,\n    };\n\n    static defaultProps = {\n        newMessages: 0,\n    };\n\n    constructor(props) {\n        super(props);\n        this.state = {\n            visible: false,\n            rendered: false,\n        };\n    }\n\n    UNSAFE_componentWillReceiveProps(nextProps) { // eslint-disable-line camelcase\n        if (nextProps.newMessages > 0 && !nextProps.atBottom) {\n            this.setState({rendered: true}, () => {\n                this.setState({visible: true});\n            });\n        } else {\n            this.setState({visible: false});\n        }\n    }\n\n    render() {\n        let className = 'new-messages__button';\n        if (this.state.visible) {\n            className += ' visible';\n        }\n        if (!this.state.rendered) {\n            className += ' disabled';\n        }\n        return (\n            <div\n                className={className}\n                onTransitionEnd={this.setRendered.bind(this)}\n                ref='indicator'\n            >\n                <div onClick={this.props.onClick}>\n                    <FormattedMessage\n                        id='posts_view.newMsgBelow'\n                        defaultMessage='New {count, plural, one {message} other {messages}}'\n                        values={{count: this.props.newMessages}}\n                    />\n                    <UnreadBelowIcon className='icon icon__unread'/>\n                </div>\n            </div>\n        );\n    }\n\n    // Sync 'rendered' state with visibility param, only after transitions\n    // have ended\n    setRendered() {\n        this.setState({rendered: this.state.visible});\n    }\n}\n","// Copyright (c) 2015-present Mattermost, Inc. All Rights Reserved.\n// See LICENSE.txt for license information.\n\nimport {connect} from 'react-redux';\nimport {createSelector} from 'reselect';\n\nimport {Posts} from 'mattermost-redux/constants';\nimport {getAllPosts, getPostIdsInChannel} from 'mattermost-redux/selectors/entities/posts';\nimport {getCurrentUserId} from 'mattermost-redux/selectors/entities/users';\nimport {makePreparePostIdsForPostList} from 'mattermost-redux/utils/post_list';\n\nimport NewMessagesBelow from './new_messages_below';\n\nexport function makeCountUnreadsBelow() {\n    return createSelector(\n        getAllPosts,\n        getCurrentUserId,\n        (state, postIds) => postIds,\n        (state, postIds, lastViewedBottom) => lastViewedBottom,\n        (allPosts, currentUserId, postIds, lastViewedBottom) => {\n            if (!postIds) {\n                return 0;\n            }\n\n            // Count the number of new posts made by other users that haven't been deleted\n            return postIds.map((id) => allPosts[id]).filter((post) => {\n                return post &&\n                    post.user_id !== currentUserId &&\n                    post.state !== Posts.POST_DELETED &&\n                    post.create_at > lastViewedBottom;\n            }).length;\n        }\n    );\n}\n\nfunction makeMapStateToProps() {\n    const countUnreadsBelow = makeCountUnreadsBelow();\n    const preparePostIdsForPostList = makePreparePostIdsForPostList();\n\n    return (state, ownProps) => {\n        let postIds = getPostIdsInChannel(state, ownProps.channelId);\n\n        if (postIds) {\n            postIds = preparePostIdsForPostList(state, {postIds, lastViewedAt: ownProps.lastViewedBottom});\n        }\n\n        return {\n            newMessages: countUnreadsBelow(state, postIds, ownProps.lastViewedBottom),\n        };\n    };\n}\n\nexport default connect(makeMapStateToProps)(NewMessagesBelow);\n","// Copyright (c) 2015-present Mattermost, Inc. All Rights Reserved.\n// See LICENSE.txt for license information.\n\nimport PropTypes from 'prop-types';\nimport React from 'react';\nimport {FormattedMessage} from 'react-intl';\n\nexport default class CommentedOnFilesMessage extends React.PureComponent {\n    static propTypes = {\n\n        /*\n         * The id of the post that was commented on\n         */\n        parentPostId: PropTypes.string.isRequired,\n\n        /*\n         * An array of file metadata for the parent post\n         */\n        fileInfos: PropTypes.arrayOf(PropTypes.object),\n    }\n\n    render() {\n        if (!this.props.fileInfos || this.props.fileInfos.length === 0) {\n            return null;\n        }\n\n        let plusMore = null;\n        if (this.props.fileInfos.length > 1) {\n            plusMore = (\n                <FormattedMessage\n                    id='post_body.plusMore'\n                    defaultMessage=' plus {count, number} other {count, plural, one {file} other {files}}'\n                    values={{\n                        count: this.props.fileInfos.length - 1,\n                    }}\n                />\n            );\n        }\n\n        return (\n            <span>\n                {this.props.fileInfos[0].name}\n                {plusMore}\n            </span>\n        );\n    }\n}\n","// Copyright (c) 2015-present Mattermost, Inc. All Rights Reserved.\n// See LICENSE.txt for license information.\n\nimport {connect} from 'react-redux';\nimport {makeGetFilesForPost} from 'mattermost-redux/selectors/entities/files';\n\nimport CommentedOnFilesMessage from './commented_on_files_message.jsx';\n\nfunction makeMapStateToProps() {\n    const selectFileInfosForPost = makeGetFilesForPost();\n\n    return function mapStateToProps(state, ownProps) {\n        let fileInfos;\n        if (ownProps.parentPostId) {\n            fileInfos = selectFileInfosForPost(state, ownProps.parentPostId);\n        }\n\n        return {\n            fileInfos,\n        };\n    };\n}\n\nexport default connect(makeMapStateToProps)(CommentedOnFilesMessage);\n","// Copyright (c) 2015-present Mattermost, Inc. All Rights Reserved.\n// See LICENSE.txt for license information.\n\nimport React, {PureComponent} from 'react';\nimport PropTypes from 'prop-types';\nimport {FormattedMessage} from 'react-intl';\n\nimport * as Utils from 'utils/utils.jsx';\nimport {stripMarkdown} from 'utils/markdown';\n\nimport CommentedOnFilesMessage from 'components/post_view/commented_on_files_message';\n\nexport default class CommentedOn extends PureComponent {\n    static propTypes = {\n        displayName: PropTypes.string,\n        enablePostUsernameOverride: PropTypes.bool,\n        onCommentClick: PropTypes.func.isRequired,\n        post: PropTypes.object.isRequired,\n        actions: PropTypes.shape({\n            showSearchResults: PropTypes.func.isRequired,\n            updateSearchTerms: PropTypes.func.isRequired,\n        }).isRequired,\n    }\n\n    handleOnClick = () => {\n        const {actions} = this.props;\n        const displayName = this.makeUsername();\n        actions.updateSearchTerms(displayName);\n        actions.showSearchResults();\n    }\n\n    makeUsername = () => {\n        const postProps = this.props.post.props;\n        let username = this.props.displayName;\n        if (this.props.enablePostUsernameOverride && postProps && postProps.from_webhook === 'true' && postProps.override_username) {\n            username = postProps.override_username;\n        }\n        return username;\n    }\n\n    makeCommentedOnMessage = () => {\n        const {post} = this.props;\n        let message = '';\n        if (post.message) {\n            message = Utils.replaceHtmlEntities(post.message);\n        } else if (post.file_ids && post.file_ids.length > 0) {\n            message = (\n                <CommentedOnFilesMessage parentPostId={post.id}/>\n            );\n        } else if (post.props && post.props.attachments && post.props.attachments.length > 0) {\n            const attachment = post.props.attachments[0];\n            const webhookMessage = attachment.pretext || attachment.title || attachment.text || attachment.fallback || '';\n            message = Utils.replaceHtmlEntities(webhookMessage);\n        }\n\n        return message;\n    }\n\n    render() {\n        const username = this.makeUsername();\n        const message = this.makeCommentedOnMessage();\n\n        const name = (\n            <a\n                className='theme'\n                onClick={this.handleOnClick}\n            >\n                {username}\n            </a>\n        );\n\n        return (\n            <div className='post__link'>\n                <span>\n                    <FormattedMessage\n                        id='post_body.commentedOn'\n                        defaultMessage=\"Commented on {name}'s message: \"\n                        values={{\n                            name,\n                        }}\n                    />\n                    <a\n                        className='theme'\n                        onClick={this.props.onCommentClick}\n                    >\n                        {stripMarkdown(message)}\n                    </a>\n                </span>\n            </div>\n        );\n    }\n}\n","// Copyright (c) 2015-present Mattermost, Inc. All Rights Reserved.\n// See LICENSE.txt for license information.\n\nimport {connect} from 'react-redux';\nimport {bindActionCreators} from 'redux';\n\nimport {getConfig} from 'mattermost-redux/selectors/entities/general';\nimport {getUser} from 'mattermost-redux/selectors/entities/users';\n\nimport {showSearchResults, updateSearchTerms} from 'actions/views/rhs';\n\nimport {getDisplayNameByUser} from 'utils/utils.jsx';\n\nimport CommentedOn from './commented_on.jsx';\n\nfunction mapStateToProps(state, ownProps) {\n    let displayName = '';\n    if (ownProps.post) {\n        const user = getUser(state, ownProps.post.user_id);\n        displayName = getDisplayNameByUser(user);\n    }\n\n    const config = getConfig(state);\n    const enablePostUsernameOverride = config.EnablePostUsernameOverride === 'true';\n\n    return {\n        displayName,\n        enablePostUsernameOverride,\n    };\n}\n\nfunction mapDispatchToProps(dispatch) {\n    return {\n        actions: bindActionCreators({\n            showSearchResults,\n            updateSearchTerms,\n        }, dispatch),\n    };\n}\n\nexport default connect(mapStateToProps, mapDispatchToProps)(CommentedOn);\n","// Copyright (c) 2015-present Mattermost, Inc. All Rights Reserved.\n// See LICENSE.txt for license information.\n\nimport PropTypes from 'prop-types';\nimport React from 'react';\nimport {Posts} from 'mattermost-redux/constants';\n\nimport * as PostUtils from 'utils/post_utils.jsx';\nimport * as Utils from 'utils/utils.jsx';\nimport DelayedAction from 'utils/delayed_action.jsx';\n\nimport CommentedOn from 'components/post_view/commented_on';\nimport FileAttachmentListContainer from 'components/file_attachment_list';\nimport FailedPostOptions from 'components/post_view/failed_post_options';\nimport PostBodyAdditionalContent from 'components/post_view/post_body_additional_content';\nimport PostMessageView from 'components/post_view/post_message_view';\nimport ReactionList from 'components/post_view/reaction_list';\nimport LoadingSpinner from 'components/widgets/loading/loading_spinner.jsx';\n\nconst SENDING_ANIMATION_DELAY = 3000;\n\nexport default class PostBody extends React.PureComponent {\n    static propTypes = {\n\n        /**\n         * The post to render the body of\n         */\n        post: PropTypes.object.isRequired,\n\n        /**\n         * The parent post of the thread this post is in\n         */\n        parentPost: PropTypes.object,\n\n        /**\n         * The poster of the parent post, if exists\n         */\n        parentPostUser: PropTypes.object,\n\n        /**\n         * The function called when the comment icon is clicked\n         */\n        handleCommentClick: PropTypes.func.isRequired,\n\n        /**\n         * Set to render post body compactly\n         */\n        compactDisplay: PropTypes.bool,\n\n        /**\n         * Set to highlight comment as a mention\n         */\n        isCommentMention: PropTypes.bool,\n\n        /**\n         * Set to render a preview of the parent post above this reply\n         */\n        isFirstReply: PropTypes.bool,\n\n        /*\n         * Post type components from plugins\n         */\n        pluginPostTypes: PropTypes.object,\n\n        /**\n         * Flag passed down to PostBodyAdditionalContent for determining if post embed is visible\n         */\n        isEmbedVisible: PropTypes.bool,\n\n        /**\n         * Whether or not the post username can be overridden.\n         */\n        enablePostUsernameOverride: PropTypes.bool.isRequired,\n\n        /**\n         * Set not to allow edits on post\n         */\n        isReadOnly: PropTypes.bool,\n    }\n\n    static defaultProps = {\n        isReadOnly: false,\n    }\n\n    constructor(props) {\n        super(props);\n\n        this.sendingAction = new DelayedAction(\n            () => {\n                const post = this.props.post;\n                if (post && post.id === post.pending_post_id) {\n                    this.setState({sending: true});\n                }\n            }\n        );\n\n        this.state = {sending: false};\n    }\n\n    componentDidMount() {\n        const post = this.props.post;\n        if (post && post.id === post.pending_post_id) {\n            this.sendingAction.fireAfter(SENDING_ANIMATION_DELAY);\n        }\n    }\n\n    componentWillUnmount() {\n        this.sendingAction.cancel();\n    }\n\n    UNSAFE_componentWillReceiveProps(nextProps) { // eslint-disable-line camelcase\n        const post = nextProps.post;\n        if (post && post.id !== post.pending_post_id) {\n            this.sendingAction.cancel();\n            this.setState({sending: false});\n        }\n    }\n\n    render() {\n        const post = this.props.post;\n        const parentPost = this.props.parentPost;\n\n        let comment;\n        let postClass = '';\n        const isEphemeral = Utils.isPostEphemeral(post);\n        if (this.props.isFirstReply && parentPost && !isEphemeral) {\n            comment = (\n                <CommentedOn\n                    post={parentPost}\n                    onCommentClick={this.props.handleCommentClick}\n                />\n            );\n        }\n\n        let failedOptions;\n        if (this.props.post.failed) {\n            postClass += ' post--fail';\n            failedOptions = <FailedPostOptions post={this.props.post}/>;\n        }\n\n        if (PostUtils.isEdited(this.props.post)) {\n            postClass += ' post--edited';\n        }\n\n        let fileAttachmentHolder = null;\n        if (((post.file_ids && post.file_ids.length > 0) || (post.filenames && post.filenames.length > 0)) && this.props.post.state !== Posts.POST_DELETED) {\n            fileAttachmentHolder = (\n                <FileAttachmentListContainer\n                    post={post}\n                    compactDisplay={this.props.compactDisplay}\n                />\n            );\n        }\n\n        if (this.state.sending) {\n            postClass += ' post-waiting';\n        }\n\n        const messageWrapper = (\n            <React.Fragment>\n                {failedOptions}\n                {this.state.sending && <LoadingSpinner/>}\n                <PostMessageView\n                    post={this.props.post}\n                    compactDisplay={this.props.compactDisplay}\n                    hasMention={true}\n                />\n            </React.Fragment>\n        );\n\n        const hasPlugin = (post.type && this.props.pluginPostTypes.hasOwnProperty(post.type)) ||\n            (post.props && post.props.type && this.props.pluginPostTypes.hasOwnProperty(post.props.type));\n\n        let messageWithAdditionalContent;\n        if (this.props.post.state === Posts.POST_DELETED || hasPlugin) {\n            messageWithAdditionalContent = messageWrapper;\n        } else {\n            messageWithAdditionalContent = (\n                <PostBodyAdditionalContent\n                    post={this.props.post}\n                    isEmbedVisible={this.props.isEmbedVisible}\n                >\n                    {messageWrapper}\n                </PostBodyAdditionalContent>\n            );\n        }\n\n        let mentionHighlightClass = '';\n        if (this.props.isCommentMention) {\n            mentionHighlightClass = 'mention-comment';\n        }\n\n        let ephemeralPostClass = '';\n        if (isEphemeral) {\n            ephemeralPostClass = 'post--ephemeral';\n        }\n\n        return (\n            <div>\n                {comment}\n                <div\n                    id={`${post.id}_message`}\n                    className={`post__body ${mentionHighlightClass} ${ephemeralPostClass} ${postClass}`}\n                >\n                    {messageWithAdditionalContent}\n                    {fileAttachmentHolder}\n                    <ReactionList\n                        post={post}\n                        isReadOnly={this.props.isReadOnly}\n                    />\n                </div>\n            </div>\n        );\n    }\n}\n","// Copyright (c) 2015-present Mattermost, Inc. All Rights Reserved.\n// See LICENSE.txt for license information.\n\nimport {connect} from 'react-redux';\nimport {getPost} from 'mattermost-redux/selectors/entities/posts';\nimport {isCurrentChannelReadOnly, getCurrentChannel} from 'mattermost-redux/selectors/entities/channels';\nimport {getUser} from 'mattermost-redux/selectors/entities/users';\nimport {getConfig} from 'mattermost-redux/selectors/entities/general';\n\nimport PostBody from './post_body.jsx';\n\nfunction mapStateToProps(state, ownProps) {\n    let parentPost;\n    let parentPostUser;\n    if (ownProps.post.root_id) {\n        parentPost = getPost(state, ownProps.post.root_id);\n        parentPostUser = parentPost ? getUser(state, parentPost.user_id) : null;\n    }\n\n    const config = getConfig(state);\n    const enablePostUsernameOverride = config.EnablePostUsernameOverride === 'true';\n\n    const currentChannel = getCurrentChannel(state);\n    const channelIsArchived = currentChannel.delete_at !== 0;\n\n    return {\n        parentPost,\n        parentPostUser,\n        pluginPostTypes: state.plugins.postTypes,\n        enablePostUsernameOverride,\n        isReadOnly: isCurrentChannelReadOnly(state) || channelIsArchived,\n    };\n}\n\nexport default connect(mapStateToProps)(PostBody);\n","// Copyright (c) 2015-present Mattermost, Inc. All Rights Reserved.\n// See LICENSE.txt for license information.\n\nimport PropTypes from 'prop-types';\nimport React from 'react';\nimport {FormattedMessage} from 'react-intl';\nimport {OverlayTrigger, Tooltip} from 'react-bootstrap';\n\nimport {Posts} from 'mattermost-redux/constants';\nimport * as ReduxPostUtils from 'mattermost-redux/utils/post_utils';\n\nimport * as PostUtils from 'utils/post_utils.jsx';\nimport * as Utils from 'utils/utils.jsx';\nimport Constants from 'utils/constants.jsx';\nimport CommentIcon from 'components/common/comment_icon.jsx';\nimport DotMenu from 'components/dot_menu';\nimport PostFlagIcon from 'components/post_view/post_flag_icon';\nimport PostReaction from 'components/post_view/post_reaction';\nimport PostTime from 'components/post_view/post_time';\nimport InfoSmallIcon from 'components/svg/info_small_icon';\n\nexport default class PostInfo extends React.PureComponent {\n    static propTypes = {\n\n        /*\n         * The post to render the info for\n         */\n        post: PropTypes.object.isRequired,\n\n        /*\n         * The id of the team which belongs the post\n         */\n        teamId: PropTypes.string,\n\n        /*\n         * Function called when the comment icon is clicked\n         */\n        handleCommentClick: PropTypes.func.isRequired,\n\n        /*\n         * Function called when the card icon is clicked\n         */\n        handleCardClick: PropTypes.func.isRequired,\n\n        /*\n         * Funciton called when the post options dropdown is opened\n         */\n        handleDropdownOpened: PropTypes.func.isRequired,\n\n        /*\n         * Set to mark the post as flagged\n         */\n        isFlagged: PropTypes.bool,\n\n        /*\n         * Set to mark the post as open the extra info in the rhs\n         */\n        isCardOpen: PropTypes.bool,\n\n        /*\n         * The number of replies in the same thread as this post\n         */\n        replyCount: PropTypes.number,\n\n        /**\n         * Set to indicate that this is previous post was not a reply to the same thread\n         */\n        isFirstReply: PropTypes.bool,\n\n        /**\n         * Set to render in mobile view\n         */\n        isMobile: PropTypes.bool,\n\n        /**\n         * Set to render in compact view\n         */\n        compactDisplay: PropTypes.bool,\n\n        /**\n         * Set to mark post as being hovered over\n         */\n        hover: PropTypes.bool.isRequired,\n\n        /**\n         * Set to render the post time when not hovering\n         */\n        showTimeWithoutHover: PropTypes.bool.isRequired,\n\n        /**\n         * Whether to show the emoji picker.\n         */\n        enableEmojiPicker: PropTypes.bool.isRequired,\n\n        /**\n         * Set not to allow edits on post\n         */\n        isReadOnly: PropTypes.bool,\n\n        actions: PropTypes.shape({\n\n            /*\n             * Function to remove the post\n             */\n            removePost: PropTypes.func.isRequired,\n        }).isRequired,\n    };\n\n    constructor(props) {\n        super(props);\n\n        this.state = {\n            showEmojiPicker: false,\n        };\n    }\n\n    toggleEmojiPicker = () => {\n        const showEmojiPicker = !this.state.showEmojiPicker;\n\n        this.setState({showEmojiPicker});\n        this.props.handleDropdownOpened(showEmojiPicker || this.state.showDotMenu);\n    };\n\n    removePost = () => {\n        this.props.actions.removePost(this.props.post);\n    };\n\n    createRemovePostButton = () => {\n        return (\n            <button\n                className='post__remove theme color--link style--none'\n                type='button'\n                onClick={this.removePost}\n            >\n                {'×'}\n            </button>\n        );\n    };\n\n    handleDotMenuOpened = (open) => {\n        this.setState({showDotMenu: open});\n        this.props.handleDropdownOpened(open || this.state.showEmojiPicker);\n    };\n\n    getDotMenu = () => {\n        return this.refs.dotMenu;\n    };\n\n    buildOptions = (post, isSystemMessage, fromAutoResponder) => {\n        if (!PostUtils.shouldShowDotMenu(post)) {\n            return null;\n        }\n\n        const {isMobile, isReadOnly} = this.props;\n        const hover = this.props.hover || this.state.showEmojiPicker || this.state.showDotMenu;\n\n        const showCommentIcon = fromAutoResponder ||\n        (!isSystemMessage && (isMobile || hover || (!post.root_id && Boolean(this.props.replyCount)) || this.props.isFirstReply));\n        const commentIconExtraClass = isMobile ? '' : 'pull-right';\n        let commentIcon;\n        if (showCommentIcon) {\n            commentIcon = (\n                <CommentIcon\n                    handleCommentClick={this.props.handleCommentClick}\n                    commentCount={this.props.replyCount}\n                    postId={post.id}\n                    extraClass={commentIconExtraClass}\n                />\n            );\n        }\n\n        const showReactionIcon = !isSystemMessage && hover && !isReadOnly && this.props.enableEmojiPicker;\n        let postReaction;\n        if (showReactionIcon) {\n            postReaction = (\n                <PostReaction\n                    channelId={post.channel_id}\n                    postId={post.id}\n                    teamId={this.props.teamId}\n                    getDotMenuRef={this.getDotMenu}\n                    showEmojiPicker={this.state.showEmojiPicker}\n                    toggleEmojiPicker={this.toggleEmojiPicker}\n                />\n            );\n        }\n\n        const showDotMenuIcon = isMobile || hover;\n        let dotMenu;\n        if (showDotMenuIcon) {\n            dotMenu = (\n                <DotMenu\n                    post={post}\n                    commentCount={this.props.replyCount}\n                    isFlagged={this.props.isFlagged}\n                    handleCommentClick={this.props.handleCommentClick}\n                    handleDropdownOpened={this.handleDotMenuOpened}\n                    handleAddReactionClick={this.toggleEmojiPicker}\n                    isReadOnly={isReadOnly}\n                    enableEmojiPicker={this.props.enableEmojiPicker}\n                />\n            );\n        }\n\n        return (\n            <div\n                ref='dotMenu'\n                className={'col col__reply'}\n            >\n                {dotMenu}\n                {postReaction}\n                {commentIcon}\n            </div>\n        );\n    };\n\n    render() {\n        const post = this.props.post;\n\n        const isEphemeral = Utils.isPostEphemeral(post);\n        const isSystemMessage = PostUtils.isSystemMessage(post);\n        const fromAutoResponder = PostUtils.fromAutoResponder(post);\n\n        const showFlagIcon = !isEphemeral && !post.failed && !isSystemMessage && (this.props.hover || this.props.isFlagged);\n        let postFlagIcon;\n        if (showFlagIcon) {\n            postFlagIcon = (\n                <PostFlagIcon\n                    postId={post.id}\n                    isFlagged={this.props.isFlagged}\n                    isEphemeral={isEphemeral}\n                />\n            );\n        }\n\n        let postInfoIcon;\n        if (post.props && post.props.card) {\n            postInfoIcon = (\n                <OverlayTrigger\n                    delayShow={Constants.OVERLAY_TIME_DELAY}\n                    placement='top'\n                    overlay={\n                        <Tooltip>\n                            <FormattedMessage\n                                id='post_info.info.view_additional_info'\n                                defaultMessage='View additional info'\n                            />\n                        </Tooltip>\n                    }\n                >\n                    <button\n                        className={'card-icon__container icon--show style--none ' + (this.props.isCardOpen ? 'active' : '')}\n                        onClick={(e) => {\n                            e.preventDefault();\n                            this.props.handleCardClick(this.props.post);\n                        }}\n                    >\n                        <InfoSmallIcon\n                            className='icon icon__info'\n                            aria-hidden='true'\n                        />\n                    </button>\n                </OverlayTrigger>\n            );\n        }\n\n        let options;\n        if (isEphemeral) {\n            options = (\n                <div className='col col__remove'>\n                    {this.createRemovePostButton()}\n                </div>\n            );\n        } else if (!post.failed) {\n            options = this.buildOptions(post, isSystemMessage, fromAutoResponder);\n        }\n\n        let visibleMessage;\n        if (isEphemeral && !this.props.compactDisplay && post.state !== Posts.POST_DELETED) {\n            visibleMessage = (\n                <span className='post__visibility'>\n                    <FormattedMessage\n                        id='post_info.message.visible'\n                        defaultMessage='(Only visible to you)'\n                    />\n                </span>\n            );\n        }\n\n        let pinnedBadge;\n        if (post.is_pinned) {\n            pinnedBadge = (\n                <span className='post__pinned-badge'>\n                    <FormattedMessage\n                        id='post_info.pinned'\n                        defaultMessage='Pinned'\n                    />\n                </span>\n            );\n        }\n\n        const showPostTime = this.props.hover || this.props.showTimeWithoutHover;\n        let postTime;\n        if (showPostTime) {\n            // timestamp should not be a permalink if the post has been deleted, is ephemeral message, is pending, or is combined activity\n            const isPermalink = !(isEphemeral || Posts.POST_DELETED === post.state || ReduxPostUtils.isPostPendingOrFailed(post) || post.type === Posts.POST_TYPES.COMBINED_USER_ACTIVITY);\n\n            postTime = (\n                <PostTime\n                    isPermalink={isPermalink}\n                    eventTime={post.create_at}\n                    postId={post.id}\n                />\n            );\n        }\n\n        return (\n            <div className='post__header--info'>\n                <div className='col'>\n                    {postTime}\n                    {pinnedBadge}\n                    {postInfoIcon}\n                    {postFlagIcon}\n                    {visibleMessage}\n                </div>\n                {options}\n            </div>\n        );\n    }\n}\n","// Copyright (c) 2015-present Mattermost, Inc. All Rights Reserved.\n// See LICENSE.txt for license information.\n\nimport {connect} from 'react-redux';\nimport {bindActionCreators} from 'redux';\nimport {removePost} from 'mattermost-redux/actions/posts';\nimport {isCurrentChannelReadOnly} from 'mattermost-redux/selectors/entities/channels';\nimport {getCurrentTeamId} from 'mattermost-redux/selectors/entities/teams';\nimport {get} from 'mattermost-redux/selectors/entities/preferences';\nimport {getConfig} from 'mattermost-redux/selectors/entities/general';\n\nimport {Preferences} from 'utils/constants.jsx';\nimport {getSelectedPostCard} from 'selectors/rhs.jsx';\n\nimport PostInfo from './post_info.jsx';\n\nfunction mapStateToProps(state, ownProps) {\n    const selectedCard = getSelectedPostCard(state);\n    const config = getConfig(state);\n    const channel = state.entities.channels.channels[ownProps.post.channel_id];\n    const channelIsArchived = channel ? channel.delete_at !== 0 : null;\n    const enableEmojiPicker = config.EnableEmojiPicker === 'true' && !channelIsArchived;\n    const teamId = getCurrentTeamId(state);\n\n    return {\n        teamId,\n        isFlagged: get(state, Preferences.CATEGORY_FLAGGED_POST, ownProps.post.id, null) != null,\n        isMobile: state.views.channel.mobileView,\n        isCardOpen: selectedCard && selectedCard.id === ownProps.post.id,\n        enableEmojiPicker,\n        isReadOnly: isCurrentChannelReadOnly(state) || channelIsArchived,\n    };\n}\n\nfunction mapDispatchToProps(dispatch) {\n    return {\n        actions: bindActionCreators({\n            removePost,\n        }, dispatch),\n    };\n}\n\nexport default connect(mapStateToProps, mapDispatchToProps)(PostInfo);\n","// Copyright (c) 2015-present Mattermost, Inc. All Rights Reserved.\n// See LICENSE.txt for license information.\n\nimport PropTypes from 'prop-types';\nimport React from 'react';\nimport {FormattedMessage} from 'react-intl';\n\nimport Constants from 'utils/constants.jsx';\nimport * as PostUtils from 'utils/post_utils.jsx';\nimport PostInfo from 'components/post_view/post_info';\nimport UserProfile from 'components/user_profile';\nimport BotBadge from 'components/widgets/badges/bot_badge.jsx';\nimport Badge from 'components/widgets/badges/badge.jsx';\n\nexport default class PostHeader extends React.PureComponent {\n    static propTypes = {\n\n        /*\n         * The post to render the header for\n         */\n        post: PropTypes.object.isRequired,\n\n        /*\n         * Function called when the comment icon is clicked\n         */\n        handleCommentClick: PropTypes.func.isRequired,\n\n        /*\n         * Function called when the card icon is clicked\n         */\n        handleCardClick: PropTypes.func.isRequired,\n\n        /*\n         * Function called when the post options dropdown is opened\n         */\n        handleDropdownOpened: PropTypes.func.isRequired,\n\n        /*\n         * Set to render compactly\n         */\n        compactDisplay: PropTypes.bool,\n\n        /*\n         * The number of replies in the same thread as this post\n         */\n        replyCount: PropTypes.number,\n\n        /**\n         * Set to indicate that this is previous post was not a reply to the same thread\n         */\n        isFirstReply: PropTypes.bool,\n\n        /**\n         * Set to mark post as being hovered over\n         */\n        hover: PropTypes.bool.isRequired,\n\n        /*\n         * Set to render the post time when not hovering\n         */\n        showTimeWithoutHover: PropTypes.bool,\n\n        /**\n         * Whether or not the post username can be overridden.\n         */\n        enablePostUsernameOverride: PropTypes.bool.isRequired,\n\n        /**\n         * If the user that made the post is a bot.\n         */\n        isBot: PropTypes.bool.isRequired,\n    }\n\n    render() {\n        const {post} = this.props;\n        const isSystemMessage = PostUtils.isSystemMessage(post);\n        const fromAutoResponder = PostUtils.fromAutoResponder(post);\n        const fromWebhook = post && post.props && post.props.from_webhook === 'true';\n\n        let userProfile = (\n            <UserProfile\n                userId={post.user_id}\n                hasMention={true}\n            />\n        );\n        let indicator;\n        let colon;\n\n        if (fromWebhook && !this.props.isBot) {\n            if (post.props.override_username && this.props.enablePostUsernameOverride) {\n                userProfile = (\n                    <UserProfile\n                        userId={post.user_id}\n                        hideStatus={true}\n                        overwriteName={post.props.override_username}\n                    />\n                );\n            } else {\n                userProfile = (\n                    <UserProfile\n                        userId={post.user_id}\n                        hideStatus={true}\n                    />\n                );\n            }\n\n            indicator = (<BotBadge/>);\n        } else if (fromAutoResponder) {\n            userProfile = (\n                <UserProfile\n                    userId={post.user_id}\n                    hideStatus={true}\n                    hasMention={true}\n                />\n            );\n\n            indicator = (\n                <Badge>\n                    <FormattedMessage\n                        id='post_info.auto_responder'\n                        defaultMessage='AUTOMATIC REPLY'\n                    />\n                </Badge>\n            );\n        } else if (isSystemMessage && this.props.isBot) {\n            userProfile = (\n                <UserProfile\n                    userId={post.user_id}\n                    hideStatus={true}\n                />\n            );\n        } else if (isSystemMessage) {\n            userProfile = (\n                <UserProfile\n                    overwriteName={\n                        <FormattedMessage\n                            id='post_info.system'\n                            defaultMessage='System'\n                        />\n                    }\n                    overwriteImage={Constants.SYSTEM_MESSAGE_PROFILE_IMAGE}\n                    disablePopover={true}\n                />\n            );\n        }\n\n        if (this.props.compactDisplay) {\n            colon = (<strong className='colon'>{':'}</strong>);\n        }\n\n        return (\n            <div className='post__header'>\n                <div className='col col__name'>\n                    {userProfile}\n                    {colon}\n                    {indicator}\n                </div>\n                <div className='col'>\n                    <PostInfo\n                        post={post}\n                        handleCommentClick={this.props.handleCommentClick}\n                        handleCardClick={this.props.handleCardClick}\n                        handleDropdownOpened={this.props.handleDropdownOpened}\n                        compactDisplay={this.props.compactDisplay}\n                        replyCount={this.props.replyCount}\n                        isFirstReply={this.props.isFirstReply}\n                        showTimeWithoutHover={this.props.showTimeWithoutHover}\n                        hover={this.props.hover}\n                    />\n                </div>\n            </div>\n        );\n    }\n}\n","// Copyright (c) 2015-present Mattermost, Inc. All Rights Reserved.\n// See LICENSE.txt for license information.\n\nimport {connect} from 'react-redux';\nimport {getConfig} from 'mattermost-redux/selectors/entities/general';\nimport {getUser} from 'mattermost-redux/selectors/entities/users';\n\nimport PostHeader from './post_header.jsx';\n\nfunction mapStateToProps(state, ownProps) {\n    const config = getConfig(state);\n    const enablePostUsernameOverride = config.EnablePostUsernameOverride === 'true';\n    const user = getUser(state, ownProps.post.user_id);\n    const isBot = Boolean(user && user.is_bot);\n\n    return {\n        enablePostUsernameOverride,\n        isBot,\n    };\n}\n\nexport default connect(mapStateToProps)(PostHeader);\n","// Copyright (c) 2015-present Mattermost, Inc. All Rights Reserved.\n// See LICENSE.txt for license information.\n\nimport PropTypes from 'prop-types';\nimport React from 'react';\nimport {Posts} from 'mattermost-redux/constants';\nimport {intlShape} from 'react-intl';\nimport {isMeMessage as checkIsMeMessage} from 'mattermost-redux/utils/post_utils';\n\nimport * as PostUtils from 'utils/post_utils.jsx';\nimport {A11yCustomEventTypes} from 'utils/constants.jsx';\nimport PostProfilePicture from 'components/post_profile_picture';\nimport PostBody from 'components/post_view/post_body';\nimport PostHeader from 'components/post_view/post_header';\n\nexport default class Post extends React.PureComponent {\n    static propTypes = {\n\n        /**\n         * The post to render\n         */\n        post: PropTypes.object.isRequired,\n\n        /**\n         * The function to create an aria-label\n         */\n        createAriaLabel: PropTypes.func.isRequired,\n\n        /**\n         * The logged in user ID\n         */\n        currentUserId: PropTypes.string.isRequired,\n\n        /**\n         * Set to center the post\n         */\n        center: PropTypes.bool,\n\n        /**\n         * Set to render post compactly\n         */\n        compactDisplay: PropTypes.bool,\n\n        /**\n         * Set to render a preview of the parent post above this reply\n         */\n        isFirstReply: PropTypes.bool,\n\n        /**\n         * Set to highlight the background of the post\n         */\n        shouldHighlight: PropTypes.bool,\n\n        /**\n         * Set to render this post as if it was attached to the previous post\n         */\n        consecutivePostByUser: PropTypes.bool,\n\n        /**\n         * Set if the previous post is a comment\n         */\n        previousPostIsComment: PropTypes.bool,\n\n        /*\n         * Function called when the post options dropdown is opened\n         */\n        togglePostMenu: PropTypes.func,\n\n        /**\n         * Set to render this comment as a mention\n         */\n        isCommentMention: PropTypes.bool,\n\n        /**\n         * The number of replies in the same thread as this post\n         */\n        replyCount: PropTypes.number,\n\n        actions: PropTypes.shape({\n            selectPost: PropTypes.func.isRequired,\n            selectPostCard: PropTypes.func.isRequired,\n        }).isRequired,\n    }\n\n    static contextTypes = {\n        intl: intlShape.isRequired,\n    };\n\n    static defaultProps = {\n        post: {},\n    };\n\n    constructor(props) {\n        super(props);\n\n        this.postRef = React.createRef();\n\n        this.state = {\n            dropdownOpened: false,\n            hover: false,\n            a11yActive: false,\n            sameRoot: this.hasSameRoot(props),\n            currentAriaLabel: '',\n            ariaHidden: true,\n        };\n    }\n\n    UNSAFE_componentWillReceiveProps(nextProps) { // eslint-disable-line camelcase\n        this.setState({sameRoot: this.hasSameRoot(nextProps)});\n    }\n\n    componentDidMount() {\n        this.postRef.current.addEventListener(A11yCustomEventTypes.ACTIVATE, this.handleA11yActivateEvent);\n        this.postRef.current.addEventListener(A11yCustomEventTypes.DEACTIVATE, this.handleA11yDeactivateEvent);\n    }\n    componentWillUnmount() {\n        this.postRef.current.removeEventListener(A11yCustomEventTypes.ACTIVATE, this.handleA11yActivateEvent);\n        this.postRef.current.removeEventListener(A11yCustomEventTypes.DEACTIVATE, this.handleA11yDeactivateEvent);\n    }\n\n    componentDidUpdate() {\n        if (this.state.a11yActive) {\n            this.postRef.current.dispatchEvent(new Event(A11yCustomEventTypes.UPDATE));\n        }\n    }\n\n    handleCommentClick = (e) => {\n        e.preventDefault();\n\n        const post = this.props.post;\n        if (!post) {\n            return;\n        }\n\n        this.props.actions.selectPost(post);\n    }\n\n    handleCardClick = (post) => {\n        if (!post) {\n            return;\n        }\n\n        this.props.actions.selectPostCard(post);\n    }\n\n    handleDropdownOpened = (opened) => {\n        if (this.props.togglePostMenu) {\n            this.props.togglePostMenu(opened);\n        }\n\n        this.setState({\n            dropdownOpened: opened,\n        });\n    }\n\n    hasSameRoot = (props) => {\n        const post = props.post;\n\n        if (props.isFirstReply) {\n            return false;\n        } else if (!post.root_id && !props.previousPostIsComment && props.consecutivePostByUser) {\n            return true;\n        } else if (post.root_id) {\n            return true;\n        }\n\n        return false;\n    }\n\n    getClassName = (post, isSystemMessage, isMeMessage, fromWebhook, fromAutoResponder, fromBot) => {\n        let className = 'post';\n\n        if (post.failed || post.state === Posts.POST_DELETED) {\n            className += ' post--hide-controls';\n        }\n\n        if (this.props.shouldHighlight) {\n            className += ' post--highlight';\n        }\n\n        let rootUser = '';\n        if (this.state.sameRoot && !fromBot) {\n            rootUser = 'same--root';\n        } else {\n            rootUser = 'other--root';\n        }\n\n        let currentUserCss = '';\n        if (this.props.currentUserId === post.user_id && !fromWebhook && !isSystemMessage) {\n            currentUserCss = 'current--user';\n        }\n\n        let sameUserClass = '';\n        if (this.props.consecutivePostByUser) {\n            sameUserClass = 'same--user';\n        }\n\n        let postType = '';\n        if (post.root_id && post.root_id.length > 0) {\n            postType = 'post--comment';\n        } else if (this.props.replyCount > 0) {\n            postType = 'post--root';\n            sameUserClass = '';\n            rootUser = '';\n        }\n\n        if (isSystemMessage || isMeMessage) {\n            className += ' post--system';\n            if (isSystemMessage) {\n                currentUserCss = '';\n                postType = '';\n                rootUser = '';\n            }\n        }\n\n        if (fromAutoResponder) {\n            postType = 'post--comment same--root';\n        }\n\n        if (this.props.compactDisplay) {\n            className += ' post--compact';\n        }\n\n        if (this.state.dropdownOpened || this.state.a11yActive) {\n            className += ' post--hovered';\n        }\n\n        if (post.is_pinned) {\n            className += ' post--pinned';\n        }\n\n        return className + ' ' + sameUserClass + ' ' + rootUser + ' ' + postType + ' ' + currentUserCss;\n    }\n\n    setHover = () => {\n        this.setState({hover: true});\n    }\n\n    unsetHover = () => {\n        this.setState({hover: false});\n    }\n\n    handleA11yActivateEvent = () => {\n        this.setState({\n            a11yActive: true,\n            ariaHidden: false,\n        });\n    }\n\n    handleA11yDeactivateEvent = () => {\n        this.setState({\n            a11yActive: false,\n            ariaHidden: true,\n        });\n    }\n\n    handlePostFocus = () => {\n        this.setState({currentAriaLabel: this.props.createAriaLabel(this.context.intl)});\n    }\n\n    render() {\n        const {post} = this.props;\n        if (!post.id) {\n            return null;\n        }\n\n        const isSystemMessage = PostUtils.isSystemMessage(post);\n        const isMeMessage = checkIsMeMessage(post);\n        const fromAutoResponder = PostUtils.fromAutoResponder(post);\n        const fromWebhook = post && post.props && post.props.from_webhook === 'true';\n        const fromBot = post && post.props && post.props.from_bot === 'true';\n\n        let profilePic;\n        const hideProfilePicture = this.state.sameRoot && this.props.consecutivePostByUser && (!post.root_id && this.props.replyCount === 0) && !fromBot;\n        if (!hideProfilePicture) {\n            profilePic = (\n                <PostProfilePicture\n                    compactDisplay={this.props.compactDisplay}\n                    post={post}\n                    userId={post.user_id}\n                />\n            );\n\n            if (fromAutoResponder) {\n                profilePic = (\n                    <span className='auto-responder'>\n                        {profilePic}\n                    </span>\n                );\n            }\n        }\n\n        let centerClass = '';\n        if (this.props.center) {\n            centerClass = 'center';\n        }\n\n        return (\n            <div\n                ref={this.postRef}\n                id={'post_' + post.id}\n                role='listitem'\n                className={`a11y__section ${this.getClassName(post, isSystemMessage, isMeMessage, fromWebhook, fromAutoResponder, fromBot)}`}\n                tabIndex='0'\n                onFocus={this.handlePostFocus}\n                onBlur={this.removeFocus}\n                onMouseOver={this.setHover}\n                onMouseLeave={this.unsetHover}\n                onTouchStart={this.setHover}\n                aria-label={this.state.currentAriaLabel}\n                aria-atomic={true}\n            >\n                <div\n                    role='application'\n                    id='postContent'\n                    className={'post__content ' + centerClass}\n                    aria-hidden={this.state.ariaHidden}\n                >\n                    <div className='post__img'>\n                        {profilePic}\n                    </div>\n                    <div>\n                        <PostHeader\n                            post={post}\n                            handleCommentClick={this.handleCommentClick}\n                            handleCardClick={this.handleCardClick}\n                            handleDropdownOpened={this.handleDropdownOpened}\n                            compactDisplay={this.props.compactDisplay}\n                            isFirstReply={this.props.isFirstReply}\n                            replyCount={this.props.replyCount}\n                            showTimeWithoutHover={!hideProfilePicture}\n                            hover={this.state.hover || this.state.a11yActive}\n                        />\n                        <PostBody\n                            post={post}\n                            handleCommentClick={this.handleCommentClick}\n                            compactDisplay={this.props.compactDisplay}\n                            isCommentMention={this.props.isCommentMention}\n                            isFirstReply={this.props.isFirstReply}\n                        />\n                    </div>\n                </div>\n            </div>\n        );\n    }\n}\n","// Copyright (c) 2015-present Mattermost, Inc. All Rights Reserved.\n// See LICENSE.txt for license information.\n\nimport {connect} from 'react-redux';\nimport {bindActionCreators} from 'redux';\nimport {createSelector} from 'reselect';\n\nimport {Posts} from 'mattermost-redux/constants';\nimport {getPost, makeIsPostCommentMention} from 'mattermost-redux/selectors/entities/posts';\nimport {get} from 'mattermost-redux/selectors/entities/preferences';\nimport {getCurrentUserId} from 'mattermost-redux/selectors/entities/users';\nimport {isPostEphemeral, isSystemMessage} from 'mattermost-redux/utils/post_utils';\n\nimport {selectPost, selectPostCard} from 'actions/views/rhs';\nimport {Preferences} from 'utils/constants.jsx';\nimport {makeCreateAriaLabelForPost} from 'utils/post_utils.jsx';\n\nimport Post from './post.jsx';\n\n// isFirstReply returns true when the given post a comment that isn't part of the same thread as the previous post.\nexport function isFirstReply(post, previousPost) {\n    if (post.root_id) {\n        if (previousPost) {\n            // Returns true as long as the previous post is part of a different thread\n            return post.root_id !== previousPost.id && post.root_id !== previousPost.root_id;\n        }\n\n        // The previous post is not a real post\n        return true;\n    }\n\n    // This post is not a reply\n    return false;\n}\n\nexport function makeGetReplyCount() {\n    return createSelector(\n        (state) => state.entities.posts.posts,\n        (state, post) => state.entities.posts.postsInThread[post.root_id || post.id],\n        (allPosts, postIds) => {\n            if (!postIds) {\n                return 0;\n            }\n\n            // Count the number of non-ephemeral posts in the thread\n            return postIds.map((id) => allPosts[id]).filter((post) => post && !isPostEphemeral(post)).length;\n        }\n    );\n}\n\nfunction makeMapStateToProps() {\n    const getReplyCount = makeGetReplyCount();\n    const isPostCommentMention = makeIsPostCommentMention();\n    const createAriaLabelForPost = makeCreateAriaLabelForPost();\n\n    return (state, ownProps) => {\n        const post = ownProps.post || getPost(state, ownProps.postId);\n\n        let previousPost = null;\n        if (ownProps.previousPostId) {\n            previousPost = getPost(state, ownProps.previousPostId);\n        }\n\n        let consecutivePostByUser = false;\n        let previousPostIsComment = false;\n\n        if (previousPost) {\n            consecutivePostByUser = post.user_id === previousPost.user_id && // The post is by the same user\n                post.create_at - previousPost.create_at <= Posts.POST_COLLAPSE_TIMEOUT && // And was within a short time period\n                !(post.props && post.props.from_webhook) && !(previousPost.props && previousPost.props.from_webhook) && // And neither is from a webhook\n                !isSystemMessage(post) && !isSystemMessage(previousPost); // And neither is a system message\n\n            previousPostIsComment = Boolean(previousPost.root_id);\n        }\n\n        return {\n            post,\n            createAriaLabel: createAriaLabelForPost(state, post),\n            currentUserId: getCurrentUserId(state),\n            isFirstReply: isFirstReply(post, previousPost),\n            consecutivePostByUser,\n            previousPostIsComment,\n            replyCount: getReplyCount(state, post),\n            isCommentMention: isPostCommentMention(state, post.id),\n            center: get(state, Preferences.CATEGORY_DISPLAY_SETTINGS, Preferences.CHANNEL_DISPLAY_MODE, Preferences.CHANNEL_DISPLAY_MODE_DEFAULT) === Preferences.CHANNEL_DISPLAY_MODE_CENTERED,\n            compactDisplay: get(state, Preferences.CATEGORY_DISPLAY_SETTINGS, Preferences.MESSAGE_DISPLAY, Preferences.MESSAGE_DISPLAY_DEFAULT) === Preferences.MESSAGE_DISPLAY_COMPACT,\n        };\n    };\n}\n\nfunction mapDispatchToProps(dispatch) {\n    return {\n        actions: bindActionCreators({\n            selectPost,\n            selectPostCard,\n        }, dispatch),\n    };\n}\n\nexport default connect(makeMapStateToProps, mapDispatchToProps)(Post);\n","// Copyright (c) 2015-present Mattermost, Inc. All Rights Reserved.\n// See LICENSE.txt for license information.\n\nimport {connect} from 'react-redux';\n\nimport {makeGenerateCombinedPost} from 'mattermost-redux/utils/post_list';\n\nimport Post from 'components/post_view/post';\n\nexport function makeMapStateToProps() {\n    const generateCombinedPost = makeGenerateCombinedPost();\n\n    return (state, ownProps) => {\n        return {\n            post: generateCombinedPost(state, ownProps.combinedId),\n            postId: ownProps.combinedId,\n        };\n    };\n}\n\n// Note that this also passes through Post's mapStateToProps\nexport default connect(makeMapStateToProps)(Post);\n","// Copyright (c) 2015-present Mattermost, Inc. All Rights Reserved.\n// See LICENSE.txt for license information.\n\nimport React from 'react';\nimport {FormattedMessage} from 'react-intl';\n\nexport default class ScrollToBottomIcon extends React.PureComponent {\n    render() {\n        return (\n            <span {...this.props}>\n                <FormattedMessage\n                    id='generic_icons.arrow.down'\n                    defaultMessage='Down Arrow Icon'\n                >\n                    {(ariaLabel) => (\n                        <svg\n                            id='Layer_1'\n                            x='0px'\n                            y='0px'\n                            viewBox='-239 239 21 23'\n                            style={style}\n                            role='icon'\n                            aria-label={ariaLabel}\n                        >\n                            <path d='M-239,241.4l2.4-2.4l8.1,8.2l8.1-8.2l2.4,2.4l-10.5,10.6L-239,241.4z M-228.5,257.2l8.1-8.2l2.4,2.4l-10.5,10.6l-10.5-10.6 l2.4-2.4L-228.5,257.2z'/>\n                        </svg>\n                    )}\n                </FormattedMessage>\n            </span>\n        );\n    }\n}\n\nconst style = {\n    enableBackground: 'new -239 239 21 23',\n};\n","// Copyright (c) 2015-present Mattermost, Inc. All Rights Reserved.\n// See LICENSE.txt for license information.\n\nimport $ from 'jquery';\nimport PropTypes from 'prop-types';\nimport React from 'react';\n\nimport ScrollToBottomIcon from 'components/svg/scroll_to_bottom_icon';\n\nexport default class ScrollToBottomArrows extends React.PureComponent {\n    static propTypes = {\n        isScrolling: PropTypes.bool.isRequired,\n        atBottom: PropTypes.bool.isRequired,\n        onClick: PropTypes.func.isRequired,\n    };\n\n    render() {\n        // only show on mobile\n        if ($(window).width() > 768) {\n            return null;\n        }\n\n        let className = 'post-list__arrows';\n        if (this.props.isScrolling && !this.props.atBottom) {\n            className += ' scrolling';\n        }\n\n        return (\n            <div\n                className={className}\n                onClick={this.props.onClick}\n            >\n                <ScrollToBottomIcon/>\n            </div>\n        );\n    }\n}\n","// Copyright (c) 2015-present Mattermost, Inc. All Rights Reserved.\n// See LICENSE.txt for license information.\n\nimport React from 'react';\nimport {FormattedDate, FormattedMessage} from 'react-intl';\nimport PropTypes from 'prop-types';\n\nimport {Permissions} from 'mattermost-redux/constants';\n\nimport * as GlobalActions from 'actions/global_actions.jsx';\nimport {Constants} from 'utils/constants';\nimport ChannelInviteModal from 'components/channel_invite_modal';\nimport EditChannelHeaderModal from 'components/edit_channel_header_modal';\nimport ProfilePicture from 'components/profile_picture.jsx';\nimport ToggleModalButtonRedux from 'components/toggle_modal_button_redux';\nimport ToggleModalButton from 'components/toggle_modal_button.jsx';\nimport UserProfile from 'components/user_profile';\nimport ChannelPermissionGate from 'components/permissions_gates/channel_permission_gate';\nimport TeamPermissionGate from 'components/permissions_gates/team_permission_gate';\nimport FormattedMarkdownMessage from 'components/formatted_markdown_message';\nimport EditIcon from 'components/icon/edit_icon';\nimport AddGroupsToChannelModal from 'components/add_groups_to_channel_modal';\nimport AddGroupsToTeamModal from 'components/add_groups_to_team_modal';\n\nimport {getMonthLong} from 'utils/i18n.jsx';\nimport * as Utils from 'utils/utils.jsx';\n\nexport default class ChannelIntroMessage extends React.PureComponent {\n    static propTypes = {\n        currentUserId: PropTypes.string.isRequired,\n        channel: PropTypes.object.isRequired,\n        fullWidth: PropTypes.bool.isRequired,\n        locale: PropTypes.string.isRequired,\n        channelProfiles: PropTypes.array.isRequired,\n        enableUserCreation: PropTypes.bool,\n        isReadOnly: PropTypes.bool,\n        teamIsGroupConstrained: PropTypes.bool,\n    };\n\n    render() {\n        const {\n            currentUserId,\n            channel,\n            fullWidth,\n            locale,\n            enableUserCreation,\n            isReadOnly,\n            channelProfiles,\n            teamIsGroupConstrained,\n        } = this.props;\n\n        let centeredIntro = '';\n        if (!fullWidth) {\n            centeredIntro = 'channel-intro--centered';\n        }\n\n        if (channel.type === Constants.DM_CHANNEL) {\n            return createDMIntroMessage(channel, centeredIntro);\n        } else if (channel.type === Constants.GM_CHANNEL) {\n            return createGMIntroMessage(channel, centeredIntro, channelProfiles, currentUserId);\n        } else if (channel.name === Constants.DEFAULT_CHANNEL) {\n            return createDefaultIntroMessage(channel, centeredIntro, enableUserCreation, isReadOnly, teamIsGroupConstrained);\n        } else if (channel.name === Constants.OFFTOPIC_CHANNEL) {\n            return createOffTopicIntroMessage(channel, centeredIntro);\n        } else if (channel.type === Constants.OPEN_CHANNEL || channel.type === Constants.PRIVATE_CHANNEL) {\n            return createStandardIntroMessage(channel, centeredIntro, locale);\n        }\n        return null;\n    }\n}\n\nfunction createGMIntroMessage(channel, centeredIntro, profiles, currentUserId) {\n    const channelIntroId = 'channelIntro';\n\n    if (profiles.length > 0) {\n        const pictures = profiles.\n            filter((profile) => profile.id !== currentUserId).\n            map((profile) => (\n                <ProfilePicture\n                    key={'introprofilepicture' + profile.id}\n                    src={Utils.imageURLForUser(profile)}\n                    width='50'\n                    height='50'\n                    userId={profile.id}\n                    username={profile.username}\n                />\n            ));\n\n        return (\n            <div\n                id={channelIntroId}\n                className={'channel-intro ' + centeredIntro}\n            >\n                <div className='post-profile-img__container channel-intro-img'>\n                    {pictures}\n                </div>\n                <p className='channel-intro-text'>\n                    <FormattedMarkdownMessage\n                        id='intro_messages.GM'\n                        defaultMessage='This is the start of your group message history with {names}.\\nMessages and files shared here are not shown to people outside this area.'\n                        values={{\n                            names: channel.display_name,\n                        }}\n                    />\n                </p>\n                {createSetHeaderButton(channel)}\n            </div>\n        );\n    }\n\n    return (\n        <div\n            id={channelIntroId}\n            className={'channel-intro ' + centeredIntro}\n        >\n            <p className='channel-intro-text'>\n                <FormattedMessage\n                    id='intro_messages.group_message'\n                    defaultMessage='This is the start of your group message history with these teammates. Messages and files shared here are not shown to people outside this area.'\n                />\n            </p>\n        </div>\n    );\n}\n\nfunction createDMIntroMessage(channel, centeredIntro) {\n    var teammate = Utils.getDirectTeammate(channel.id);\n    const channelIntroId = 'channelIntro';\n\n    if (teammate) {\n        var teammateName = teammate.username;\n        if (teammate.nickname.length > 0) {\n            teammateName = teammate.nickname;\n        }\n\n        return (\n            <div\n                id={channelIntroId}\n                className={'channel-intro ' + centeredIntro}\n            >\n                <div className='post-profile-img__container channel-intro-img'>\n                    <ProfilePicture\n                        src={Utils.imageURLForUser(teammate)}\n                        width='50'\n                        height='50'\n                        userId={teammate.id}\n                        username={teammate.username}\n                        hasMention={true}\n                    />\n                </div>\n                <div className='channel-intro-profile d-flex'>\n                    <UserProfile\n                        userId={teammate.id}\n                        disablePopover={false}\n                        hasMention={true}\n                    />\n                </div>\n                <p className='channel-intro-text'>\n                    <FormattedMarkdownMessage\n                        id='intro_messages.DM'\n                        defaultMessage='This is the start of your direct message history with {teammate}.\\nDirect messages and files shared here are not shown to people outside this area.'\n                        values={{\n                            teammate: teammateName,\n                        }}\n                    />\n                </p>\n                {teammate.is_bot ? null : createSetHeaderButton(channel)}\n            </div>\n        );\n    }\n\n    return (\n        <div\n            id={channelIntroId}\n            className={'channel-intro ' + centeredIntro}\n        >\n            <p className='channel-intro-text'>\n                <FormattedMessage\n                    id='intro_messages.teammate'\n                    defaultMessage='This is the start of your direct message history with this teammate. Direct messages and files shared here are not shown to people outside this area.'\n                />\n            </p>\n        </div>\n    );\n}\n\nfunction createOffTopicIntroMessage(channel, centeredIntro) {\n    const isPrivate = channel.type === Constants.PRIVATE_CHANNEL;\n    const children = createSetHeaderButton(channel);\n    let setHeaderButton = null;\n    if (children) {\n        setHeaderButton = (\n            <ChannelPermissionGate\n                teamId={channel.team_id}\n                channelId={channel.id}\n                permissions={[isPrivate ? Permissions.MANAGE_PRIVATE_CHANNEL_PROPERTIES : Permissions.MANAGE_PUBLIC_CHANNEL_PROPERTIES]}\n            >\n                {children}\n            </ChannelPermissionGate>\n        );\n    }\n\n    const channelInviteButton = createInviteChannelButton(channel);\n\n    return (\n        <div\n            id='channelIntro'\n            className={'channel-intro ' + centeredIntro}\n        >\n            <h4 className='channel-intro__title'>\n                <FormattedMessage\n                    id='intro_messages.beginning'\n                    defaultMessage='Beginning of {name}'\n                    values={{\n                        name: channel.display_name,\n                    }}\n                />\n            </h4>\n            <p className='channel-intro__content'>\n                <FormattedMessage\n                    id='intro_messages.offTopic'\n                    defaultMessage='This is the start of {display_name}, a channel for non-work-related conversations.'\n                    values={{\n                        display_name: channel.display_name,\n                    }}\n                />\n            </p>\n            {channelInviteButton}\n            {setHeaderButton}\n        </div>\n    );\n}\n\nexport function createDefaultIntroMessage(channel, centeredIntro, enableUserCreation, isReadOnly, teamIsGroupConstrained) {\n    let teamInviteLink = null;\n\n    if (!isReadOnly && enableUserCreation) {\n        teamInviteLink = (\n            <TeamPermissionGate\n                teamId={channel.team_id}\n                permissions={[Permissions.INVITE_USER]}\n            >\n                <TeamPermissionGate\n                    teamId={channel.team_id}\n                    permissions={[Permissions.ADD_USER_TO_TEAM]}\n                >\n                    {!teamIsGroupConstrained &&\n                    <span\n                        className='intro-links color--link cursor--pointer'\n                        onClick={GlobalActions.showGetTeamInviteLinkModal}\n                    >\n                        <FormattedMessage\n                            id='generic_icons.add'\n                            defaultMessage='Add Icon'\n                        >\n                            {(title) => (\n                                <i\n                                    className='fa fa-user-plus'\n                                    title={title}\n                                />\n                            )}\n                        </FormattedMessage>\n                        <FormattedMessage\n                            id='intro_messages.inviteOthers'\n                            defaultMessage='Invite others to this team'\n                        />\n                    </span>\n                    }\n                    {teamIsGroupConstrained &&\n                    <ToggleModalButton\n                        className='intro-links color--link'\n                        dialogType={AddGroupsToTeamModal}\n                        dialogProps={{channel}}\n                    >\n                        <FormattedMessage\n                            id='generic_icons.add'\n                            defaultMessage='Add Icon'\n                        >\n                            {(title) => (\n                                <i\n                                    className='fa fa-user-plus'\n                                    title={title}\n                                />\n                            )}\n                        </FormattedMessage>\n                        <FormattedMessage\n                            id='intro_messages.addGroupsToTeam'\n                            defaultMessage='Add other groups to this team'\n                        />\n                    </ToggleModalButton>\n\n                    }\n                </TeamPermissionGate>\n            </TeamPermissionGate>\n        );\n    }\n\n    const isPrivate = channel.type === Constants.PRIVATE_CHANNEL;\n\n    let setHeaderButton = null;\n    if (!isReadOnly) {\n        const children = createSetHeaderButton(channel);\n        if (children) {\n            setHeaderButton = (\n                <ChannelPermissionGate\n                    teamId={channel.team_id}\n                    channelId={channel.id}\n                    permissions={[isPrivate ? Permissions.MANAGE_PRIVATE_CHANNEL_PROPERTIES : Permissions.MANAGE_PUBLIC_CHANNEL_PROPERTIES]}\n                >\n                    {children}\n                </ChannelPermissionGate>\n            );\n        }\n    }\n\n    return (\n        <div\n            id='channelIntro'\n            className={'channel-intro ' + centeredIntro}\n        >\n            <h4 className='channel-intro__title'>\n                <FormattedMessage\n                    id='intro_messages.beginning'\n                    defaultMessage='Beginning of {name}'\n                    values={{\n                        name: channel.display_name,\n                    }}\n                />\n            </h4>\n            <p className='channel-intro__content'>\n                {!isReadOnly &&\n                    <FormattedMarkdownMessage\n                        id='intro_messages.default'\n                        defaultMessage='**Welcome to {display_name}!**\\n \\nPost messages here that you want everyone to see. Everyone automatically becomes a permanent member of this channel when they join the team.'\n                        values={{\n                            display_name: channel.display_name,\n                        }}\n                    />\n                }\n                {isReadOnly &&\n                    <FormattedMarkdownMessage\n                        id='intro_messages.readonly.default'\n                        defaultMessage='**Welcome to {display_name}!**\\n \\nMessages can only be posted by system admins. Everyone automatically becomes a permanent member of this channel when they join the team.'\n                        values={{\n                            display_name: channel.display_name,\n                        }}\n                    />\n                }\n            </p>\n            {teamInviteLink}\n            {setHeaderButton}\n            <br/>\n        </div>\n    );\n}\n\nfunction createStandardIntroMessage(channel, centeredIntro, locale) {\n    var uiName = channel.display_name;\n    var creatorName = Utils.getDisplayNameByUserId(channel.creator_id);\n    var memberMessage;\n    const channelIsArchived = channel.delete_at !== 0;\n\n    if (channelIsArchived) {\n        memberMessage = '';\n    } else if (channel.type === Constants.PRIVATE_CHANNEL) {\n        memberMessage = (\n            <FormattedMessage\n                id='intro_messages.onlyInvited'\n                defaultMessage=' Only invited members can see this private channel.'\n            />\n        );\n    } else {\n        memberMessage = (\n            <FormattedMessage\n                id='intro_messages.anyMember'\n                defaultMessage=' Any member can join and read this channel.'\n            />\n        );\n    }\n\n    const date = (\n        <FormattedDate\n            value={channel.create_at}\n            month={getMonthLong(locale)}\n            day='2-digit'\n            year='numeric'\n        />\n    );\n\n    var createMessage;\n    if (creatorName === '') {\n        if (channel.type === Constants.PRIVATE_CHANNEL) {\n            createMessage = (\n                <FormattedMessage\n                    id='intro_messages.noCreatorPrivate'\n                    defaultMessage='This is the start of the {name} private channel, created on {date}.'\n                    values={{name: (uiName), date}}\n                />\n            );\n        } else if (channel.type === Constants.OPEN_CHANNEL) {\n            createMessage = (\n                <FormattedMessage\n                    id='intro_messages.noCreator'\n                    defaultMessage='This is the start of the {name} channel, created on {date}.'\n                    values={{name: (uiName), date}}\n                />\n            );\n        }\n    } else if (channel.type === Constants.PRIVATE_CHANNEL) {\n        createMessage = (\n            <span>\n                <FormattedMessage\n                    id='intro_messages.creatorPrivate'\n                    defaultMessage='This is the start of the {name} private channel, created by {creator} on {date}.'\n                    values={{\n                        name: (uiName),\n                        creator: (creatorName),\n                        date,\n                    }}\n                />\n            </span>\n        );\n    } else if (channel.type === Constants.OPEN_CHANNEL) {\n        createMessage = (\n            <span>\n                <FormattedMessage\n                    id='intro_messages.creator'\n                    defaultMessage='This is the start of the {name} channel, created by {creator} on {date}.'\n                    values={{\n                        name: (uiName),\n                        creator: (creatorName),\n                        date,\n                    }}\n                />\n            </span>\n        );\n    }\n\n    var purposeMessage = '';\n    if (channel.purpose && channel.purpose !== '') {\n        if (channel.type === Constants.PRIVATE_CHANNEL) {\n            purposeMessage = (\n                <span>\n                    <FormattedMessage\n                        id='intro_messages.purposePrivate'\n                        defaultMessage=\" This private channel's purpose is: {purpose}\"\n                        values={{purpose: channel.purpose}}\n                    />\n                </span>\n            );\n        } else if (channel.type === Constants.OPEN_CHANNEL) {\n            purposeMessage = (\n                <span>\n                    <FormattedMessage\n                        id='intro_messages.purpose'\n                        defaultMessage=\" This channel's purpose is: {purpose}\"\n                        values={{purpose: channel.purpose}}\n                    />\n                </span>\n            );\n        }\n    }\n\n    const isPrivate = channel.type === Constants.PRIVATE_CHANNEL;\n    let setHeaderButton = null;\n    const children = createSetHeaderButton(channel);\n    if (children) {\n        setHeaderButton = (\n            <ChannelPermissionGate\n                teamId={channel.team_id}\n                channelId={channel.id}\n                permissions={[isPrivate ? Permissions.MANAGE_PRIVATE_CHANNEL_PROPERTIES : Permissions.MANAGE_PUBLIC_CHANNEL_PROPERTIES]}\n            >\n                {children}\n            </ChannelPermissionGate>\n        );\n    }\n\n    const channelInviteButton = createInviteChannelButton(channel);\n\n    return (\n        <div\n            id='channelIntro'\n            className={'channel-intro ' + centeredIntro}\n        >\n            <h4 className='channel-intro__title'>\n                <FormattedMessage\n                    id='intro_messages.beginning'\n                    defaultMessage='Beginning of {name}'\n                    values={{\n                        name: (uiName),\n                    }}\n                />\n            </h4>\n            <p className='channel-intro__content'>\n                {createMessage}\n                {memberMessage}\n                {purposeMessage}\n                <br/>\n            </p>\n            {channelInviteButton}\n            {setHeaderButton}\n        </div>\n    );\n}\n\nfunction createInviteChannelButton(channel) {\n    const modal = channel.group_constrained ? AddGroupsToChannelModal : ChannelInviteModal;\n    const channelIsArchived = channel.delete_at !== 0;\n    if (channelIsArchived) {\n        return null;\n    }\n    const isPrivate = channel.type === Constants.PRIVATE_CHANNEL;\n    return (\n        <ChannelPermissionGate\n            channelId={channel.id}\n            teamId={channel.team_id}\n            permissions={[isPrivate ? Permissions.MANAGE_PRIVATE_CHANNEL_MEMBERS : Permissions.MANAGE_PUBLIC_CHANNEL_MEMBERS]}\n        >\n            <ToggleModalButton\n                className='intro-links color--link'\n                dialogType={modal}\n                dialogProps={{channel}}\n            >\n                <FormattedMessage\n                    id='generic_icons.add'\n                    defaultMessage='Add Icon'\n                >\n                    {(title) => (\n                        <i\n                            className='fa fa-user-plus'\n                            title={title}\n                        />\n                    )}\n                </FormattedMessage>\n                {isPrivate && channel.group_constrained &&\n                    <FormattedMessage\n                        id='intro_messages.addGroups'\n                        defaultMessage='Add groups to this private channel'\n                    />}\n                {isPrivate && !channel.group_constrained &&\n                    <FormattedMessage\n                        id='intro_messages.invitePrivate'\n                        defaultMessage='Invite others to this private channel'\n                    />}\n                {!isPrivate &&\n                    <FormattedMessage\n                        id='intro_messages.invite'\n                        defaultMessage='Invite others to this channel'\n                    />}\n            </ToggleModalButton>\n        </ChannelPermissionGate>\n    );\n}\n\nfunction createSetHeaderButton(channel) {\n    const channelIsArchived = channel.delete_at !== 0;\n    if (channelIsArchived) {\n        return null;\n    }\n\n    return (\n        <FormattedMessage\n            id='intro_messages.setHeader'\n            defaultMessage='Set a Header'\n        >\n            {(message) => (\n                <ToggleModalButtonRedux\n                    modalId='editChannelHeaderModal'\n                    accessibilityLabel={message}\n                    className={'intro-links color--link'}\n                    dialogType={EditChannelHeaderModal}\n                    dialogProps={{channel}}\n                >\n                    <EditIcon/>\n                    {message}\n                </ToggleModalButtonRedux>\n            )}\n        </FormattedMessage>\n    );\n}\n","// Copyright (c) 2015-present Mattermost, Inc. All Rights Reserved.\n// See LICENSE.txt for license information.\n\nimport {connect} from 'react-redux';\n\nimport {getConfig} from 'mattermost-redux/selectors/entities/general';\nimport {isCurrentChannelReadOnly, getCurrentChannel} from 'mattermost-redux/selectors/entities/channels';\nimport {getCurrentTeam} from 'mattermost-redux/selectors/entities/teams';\nimport {getProfilesInCurrentChannel, getCurrentUserId} from 'mattermost-redux/selectors/entities/users';\nimport {get} from 'mattermost-redux/selectors/entities/preferences';\n\nimport {Preferences} from 'utils/constants.jsx';\nimport {getCurrentLocale} from 'selectors/i18n';\n\nimport ChannelIntroMessage from './channel_intro_message.jsx';\n\nfunction mapStateToProps(state) {\n    const config = getConfig(state);\n    const enableUserCreation = config.EnableUserCreation === 'true';\n    const isReadOnly = isCurrentChannelReadOnly(state);\n    const team = getCurrentTeam(state);\n\n    return {\n        currentUserId: getCurrentUserId(state),\n        channel: getCurrentChannel(state),\n        locale: getCurrentLocale(state),\n        channelProfiles: getProfilesInCurrentChannel(state),\n        enableUserCreation,\n        isReadOnly,\n        fullWidth: get(state, Preferences.CATEGORY_DISPLAY_SETTINGS, Preferences.CHANNEL_DISPLAY_MODE, Preferences.CHANNEL_DISPLAY_MODE_DEFAULT) === Preferences.CHANNEL_DISPLAY_MODE_FULL_SCREEN,\n        teamIsGroupConstrained: Boolean(team.group_constrained),\n    };\n}\n\nexport default connect(mapStateToProps)(ChannelIntroMessage);\n","// Copyright (c) 2015-present Mattermost, Inc. All Rights Reserved.\n// See LICENSE.txt for license information.\n\nimport PropTypes from 'prop-types';\nimport React from 'react';\nimport ReactDOM from 'react-dom';\nimport {FormattedMessage} from 'react-intl';\n\nimport {isCombinedUserActivityPost} from 'mattermost-redux/utils/post_list';\nimport {debounce} from 'mattermost-redux/actions/helpers';\nimport EventEmitter from 'mattermost-redux/utils/event_emitter';\n\nimport Constants, {PostTypes, EventTypes, PostRequestTypes} from 'utils/constants.jsx';\nimport DelayedAction from 'utils/delayed_action.jsx';\n\nimport * as UserAgent from 'utils/user_agent.jsx';\nimport * as Utils from 'utils/utils.jsx';\nimport {isFromWebhook} from 'utils/post_utils.jsx';\n\nimport LoadingScreen from 'components/loading_screen.jsx';\nimport DateSeparator from 'components/post_view/date_separator';\nimport FloatingTimestamp from 'components/post_view/floating_timestamp';\nimport NewMessagesBelow from 'components/post_view/new_messages_below';\nimport CombinedUserActivityPost from 'components/post_view/combined_user_activity_post';\n\nimport Post from 'components/post_view/post';\nimport ScrollToBottomArrows from 'components/post_view/scroll_to_bottom_arrows.jsx';\nimport CreateChannelIntroMessage from 'components/post_view/channel_intro_message';\n\nconst CLOSE_TO_BOTTOM_SCROLL_MARGIN = 10;\nconst POSTS_PER_PAGE = Constants.POST_CHUNK_SIZE / 2;\nconst MAX_EXTRA_PAGES_LOADED = 10;\n\nexport default class PostList extends React.PureComponent {\n    static propTypes = {\n\n        /**\n         * Array of posts in the channel, ordered from oldest to newest\n         */\n        posts: PropTypes.array,\n\n        /**\n         * The number of posts that should be rendered\n         */\n        postVisibility: PropTypes.number,\n\n        /**\n         * The channel the posts are in\n         */\n        channel: PropTypes.object.isRequired,\n\n        /**\n         * The last time the channel was viewed, sets the new message separator\n         */\n        lastViewedAt: PropTypes.number,\n\n        /**\n         * The user id of the logged in user\n         */\n        currentUserId: PropTypes.string,\n\n        /**\n         * Set to focus this post\n         */\n        focusedPostId: PropTypes.string,\n\n        actions: PropTypes.shape({\n\n            loadLatestPosts: PropTypes.func.isRequired,\n\n            /**\n             * Function to increase the number of posts being rendered\n             */\n            loadPosts: PropTypes.func.isRequired,\n\n            /**\n             * Function to check and set if app is in mobile view\n             */\n            checkAndSetMobileView: PropTypes.func.isRequired,\n\n            /**\n             * Function to load permalink posts\n             */\n            loadPostsAround: PropTypes.func.isRequired,\n        }).isRequired,\n    }\n\n    constructor(props) {\n        super(props);\n\n        this.scrollStopAction = new DelayedAction(this.handleScrollStop);\n\n        this.previousScrollTop = Number.MAX_SAFE_INTEGER;\n        this.previousScrollHeight = 0;\n        this.previousClientHeight = 0;\n        this.atBottom = false;\n        this.extraPagesLoaded = 0;\n        this.loadingPosts = false;\n\n        this.state = {\n            atEnd: false,\n            unViewedCount: 0,\n            isDoingInitialLoad: true,\n            isScrolling: false,\n            lastViewed: props.lastViewedAt,\n        };\n    }\n\n    componentDidMount() {\n        this.mounted = true;\n        this.loadPosts(this.props.channel.id, this.props.focusedPostId);\n        this.props.actions.checkAndSetMobileView();\n        EventEmitter.addListener(EventTypes.POST_LIST_SCROLL_CHANGE, this.handleResize);\n\n        window.addEventListener('resize', this.handleWindowResize);\n\n        this.initialScroll();\n    }\n\n    componentWillUnmount() {\n        this.mounted = false;\n        EventEmitter.removeListener(EventTypes.POST_LIST_SCROLL_CHANGE, this.handleResize);\n        window.removeEventListener('resize', this.handleWindowResize);\n    }\n\n    UNSAFE_componentWillReceiveProps(nextProps) { // eslint-disable-line camelcase\n        // Focusing on a new post so load posts around it\n        if (nextProps.focusedPostId && this.props.focusedPostId !== nextProps.focusedPostId) {\n            this.hasScrolledToFocusedPost = false;\n            this.hasScrolledToNewMessageSeparator = false;\n            this.setState({atEnd: false, isDoingInitialLoad: !nextProps.posts});\n            this.loadPosts(nextProps.channel.id, nextProps.focusedPostId);\n            return;\n        }\n\n        const channel = this.props.channel || {};\n        const nextChannel = nextProps.channel || {};\n\n        if (nextProps.focusedPostId == null) {\n            // Channel changed so load posts for new channel\n            if (channel.id !== nextChannel.id) {\n                this.hasScrolled = false;\n                this.hasScrolledToFocusedPost = false;\n                this.hasScrolledToNewMessageSeparator = false;\n                this.atBottom = false;\n\n                this.extraPagesLoaded = 0;\n\n                this.setState({atEnd: false, lastViewed: nextProps.lastViewedAt, isDoingInitialLoad: !nextProps.posts, unViewedCount: 0});\n\n                if (nextChannel.id) {\n                    this.loadPosts(nextChannel.id);\n                }\n            }\n        }\n    }\n\n    UNSAFE_componentWillUpdate() { // eslint-disable-line camelcase\n        if (this.refs.postlist) {\n            this.previousScrollTop = this.refs.postlist.scrollTop;\n            this.previousScrollHeight = this.refs.postlist.scrollHeight;\n            this.previousClientHeight = this.refs.postlist.clientHeight;\n        }\n    }\n\n    componentDidUpdate(prevProps, prevState) {\n        if (this.props.focusedPostId && this.props.focusedPostId !== prevProps.focusedPostId) {\n            this.hasScrolledToFocusedPost = false;\n            this.hasScrolledToNewMessageSeparator = false;\n            this.loadPosts(this.props.channel.id, this.props.focusedPostId);\n        } else if (this.props.channel && (!prevProps.channel || this.props.channel.id !== prevProps.channel.id)) {\n            this.hasScrolled = false;\n            this.hasScrolledToFocusedPost = false;\n            this.hasScrolledToNewMessageSeparator = false;\n\n            this.extraPagesLoaded = 0;\n\n            this.setState({atEnd: false, isDoingInitialLoad: !this.props.posts, unViewedCount: 0}); // eslint-disable-line react/no-did-update-set-state\n\n            this.loadPosts(this.props.channel.id);\n        }\n\n        this.loadPostsToFillScreenIfNecessary();\n\n        // Do not update scrolling unless posts, visibility or intro message change\n        if (this.props.posts === prevProps.posts && this.props.postVisibility === prevProps.postVisibility && this.state.atEnd === prevState.atEnd) {\n            return;\n        }\n\n        const prevPosts = prevProps.posts || [];\n        const posts = this.props.posts || [];\n\n        if (this.props.focusedPostId == null) {\n            const hasNewPosts = (prevPosts.length === 0 && posts.length > 0) || (prevPosts.length > 0 && posts.length > 0 && prevPosts[0].id !== posts[0].id);\n\n            if (!this.checkBottom() && hasNewPosts) {\n                this.setUnreadsBelow(posts, this.props.currentUserId);\n            }\n        }\n\n        const postList = this.refs.postlist;\n        if (!postList) {\n            return;\n        }\n\n        // Scroll to focused post on first load\n        const focusedPost = this.refs[this.props.focusedPostId];\n        if (focusedPost && this.props.posts) {\n            if (!this.hasScrolledToFocusedPost) {\n                const element = ReactDOM.findDOMNode(focusedPost);\n                const rect = element.getBoundingClientRect();\n                const listHeight = postList.clientHeight / 2;\n                postList.scrollTop += rect.top - listHeight;\n                this.atBottom = this.checkBottom();\n            } else if (this.previousScrollHeight !== postList.scrollHeight && posts[0].id === prevPosts[0].id) {\n                postList.scrollTop = this.previousScrollTop + (postList.scrollHeight - this.previousScrollHeight);\n            }\n            return;\n        }\n\n        const didInitialScroll = this.initialScroll();\n\n        if (posts.length >= POSTS_PER_PAGE) {\n            this.hasScrolledToNewMessageSeparator = true;\n        }\n\n        if (didInitialScroll) {\n            return;\n        }\n\n        if (postList && prevPosts && posts && posts[0] && prevPosts[0]) {\n            // A new message was posted, so scroll to bottom if user\n            // was already scrolled close to bottom\n            let doScrollToBottom = false;\n            const postId = posts[0].id;\n            const prevPostId = prevPosts[0].id;\n            const pendingPostId = posts[0].pending_post_id;\n            if (postId !== prevPostId && pendingPostId !== prevPostId) {\n                // If already scrolled to bottom\n                if (this.atBottom) {\n                    doScrollToBottom = true;\n                }\n\n                // If new post was ephemeral\n                if (Utils.isPostEphemeral(posts[0])) {\n                    doScrollToBottom = true;\n                }\n            }\n\n            if (doScrollToBottom) {\n                this.atBottom = true;\n                postList.scrollTop = postList.scrollHeight;\n                return;\n            }\n\n            // New posts added at the top, maintain scroll position\n            if (this.previousScrollHeight !== postList.scrollHeight && posts[0].id === prevPosts[0].id) {\n                postList.scrollTop = this.previousScrollTop + (postList.scrollHeight - this.previousScrollHeight);\n            }\n        }\n    }\n\n    loadPostsToFillScreenIfNecessary = () => {\n        if (this.props.focusedPostId) {\n            return;\n        }\n\n        if (this.state.isDoingInitialLoad) {\n            // Should already be loading posts\n            return;\n        }\n\n        if (this.state.atEnd || !this.refs.postListContent || !this.refs.postlist) {\n            // No posts to load\n            return;\n        }\n\n        if (this.refs.postListContent.scrollHeight >= this.refs.postlist.clientHeight) {\n            // Screen is full\n            return;\n        }\n\n        if (this.extraPagesLoaded > MAX_EXTRA_PAGES_LOADED) {\n            // Prevent this from loading a lot of pages in a channel with only hidden messages\n            return;\n        }\n\n        this.doLoadPostsToFillScreen();\n    };\n\n    doLoadPostsToFillScreen = debounce(() => {\n        this.extraPagesLoaded += 1;\n\n        this.loadMorePosts();\n    }, 100);\n\n    // Scroll to new message indicator or bottom on first load. Returns true\n    // if we just scrolled for the initial load.\n    initialScroll = () => {\n        if (this.hasScrolledToNewMessageSeparator) {\n            // Already scrolled to new messages indicator\n            return false;\n        }\n\n        const postList = this.refs.postlist;\n        const posts = this.props.posts;\n        if (!postList || !posts) {\n            // Not able to do initial scroll yet\n            return false;\n        }\n\n        const messageSeparator = this.refs.newMessageSeparator;\n\n        // Scroll to new message indicator since we have unread posts and we can't show every new post in the screen\n        if (messageSeparator && (postList.scrollHeight - messageSeparator.offsetTop) > postList.clientHeight) {\n            messageSeparator.scrollIntoView();\n            this.setUnreadsBelow(posts, this.props.currentUserId);\n            return true;\n        }\n\n        // Scroll to bottom since we don't have unread posts or we can show every new post in the screen\n        postList.scrollTop = postList.scrollHeight;\n        this.atBottom = true;\n        return true;\n    }\n\n    setUnreadsBelow = (posts, currentUserId) => {\n        const unViewedCount = posts.reduce((count, post) => {\n            if (post.create_at > this.state.lastViewed &&\n                post.user_id !== currentUserId &&\n                post.state !== Constants.POST_DELETED) {\n                return count + 1;\n            }\n            return count;\n        }, 0);\n        if (this.mounted) {\n            this.setState({unViewedCount});\n        }\n    }\n\n    handleScrollStop = () => {\n        if (this.mounted) {\n            this.setState({\n                isScrolling: false,\n            });\n        }\n    }\n\n    checkBottom = () => {\n        if (!this.refs.postlist) {\n            return true;\n        }\n\n        // No scroll bar so we're at the bottom\n        if (this.refs.postlist.scrollHeight <= this.refs.postlist.clientHeight) {\n            return true;\n        }\n\n        return this.refs.postlist.clientHeight + this.refs.postlist.scrollTop >= this.refs.postlist.scrollHeight - CLOSE_TO_BOTTOM_SCROLL_MARGIN;\n    }\n\n    handleWindowResize = () => {\n        this.handleResize();\n    }\n\n    handleResize = (forceScrollToBottom) => {\n        const postList = this.refs.postlist;\n        const messageSeparator = this.refs.newMessageSeparator;\n        const doScrollToBottom = this.atBottom || forceScrollToBottom;\n\n        if (postList) {\n            if (doScrollToBottom) {\n                postList.scrollTop = postList.scrollHeight;\n            } else if (!this.hasScrolled && messageSeparator) {\n                const element = ReactDOM.findDOMNode(messageSeparator);\n                element.scrollIntoView();\n            }\n            this.previousScrollHeight = postList.scrollHeight;\n            this.previousScrollTop = postList.scrollTop;\n            this.previousClientHeight = postList.clientHeight;\n\n            this.atBottom = this.checkBottom();\n        }\n\n        this.props.actions.checkAndSetMobileView();\n    }\n\n    loadPosts = async (channelId, focusedPostId) => {\n        if (!channelId) {\n            return;\n        }\n\n        let posts;\n        let atOldestmessage;\n        if (focusedPostId) {\n            ({atOldestmessage} = await this.props.actions.loadPostsAround(channelId, focusedPostId));\n        } else {\n            ({atOldestmessage} = await this.props.actions.loadLatestPosts(channelId));\n        }\n\n        if (this.mounted) {\n            this.setState({\n                isDoingInitialLoad: false,\n                atEnd: atOldestmessage,\n            });\n        }\n\n        if (focusedPostId) {\n            this.hasScrolledToFocusedPost = true;\n        } else {\n            if (!this.checkBottom()) {\n                const postsArray = posts.order.map((id) => posts.posts[id]);\n                this.setUnreadsBelow(postsArray, this.props.currentUserId);\n            }\n\n            this.hasScrolledToNewMessageSeparator = true;\n        }\n    }\n\n    loadMorePosts = async (e) => {\n        if (e) {\n            e.preventDefault();\n        }\n\n        const {posts, channel} = this.props;\n        const postsLength = posts.length;\n\n        if (!posts) {\n            return;\n        }\n\n        const {moreToLoad} = await this.props.actions.loadPosts({channelId: channel.id, postId: posts[postsLength - 1].id, type: PostRequestTypes.BEFORE_ID});\n        this.setState({atEnd: !moreToLoad});\n    }\n\n    handleScroll = () => {\n        // Only count as user scroll if we've already performed our first load scroll\n        this.hasScrolled = this.hasScrolledToNewMessageSeparator || this.hasScrolledToFocusedPost;\n        if (!this.refs.postlist) {\n            return;\n        }\n\n        this.updateFloatingTimestamp();\n\n        this.previousScrollTop = this.refs.postlist.scrollTop;\n\n        if (this.refs.postlist.scrollHeight === this.previousScrollHeight) {\n            this.atBottom = this.checkBottom();\n        }\n\n        if (!this.state.isScrolling) {\n            this.setState({\n                isScrolling: true,\n            });\n        }\n\n        if (this.checkBottom()) {\n            this.setState({\n                lastViewed: new Date().getTime(),\n                unViewedCount: 0,\n                isScrolling: false,\n            });\n        }\n\n        this.scrollStopAction.fireAfter(Constants.SCROLL_DELAY);\n    }\n\n    updateFloatingTimestamp = () => {\n        // skip this in non-mobile view since that's when the timestamp is visible\n        if (!Utils.isMobile()) {\n            return;\n        }\n\n        if (this.props.posts) {\n            // iterate through posts starting at the bottom since users are more likely to be viewing newer posts\n            for (let i = 0; i < this.props.posts.length; i++) {\n                const post = this.props.posts[i];\n                const element = this.refs[post.id];\n                const domNode = ReactDOM.findDOMNode(element);\n\n                if (!element || !domNode || domNode.offsetTop + domNode.clientHeight <= this.refs.postlist.scrollTop) {\n                    // this post is off the top of the screen so the last one is at the top of the screen\n                    let topPost;\n\n                    if (i > 0) {\n                        topPost = this.props.posts[i - 1];\n                    } else {\n                        // the first post we look at should always be on the screen, but handle that case anyway\n                        topPost = post;\n                    }\n\n                    if (!this.state.topPost || topPost.id !== this.state.topPost.id) {\n                        this.setState({\n                            topPost,\n                        });\n                    }\n\n                    break;\n                }\n            }\n        }\n    }\n\n    scrollToBottom = () => {\n        if (this.refs.postlist) {\n            this.refs.postlist.scrollTop = this.refs.postlist.scrollHeight;\n        }\n    }\n\n    createPosts = (posts) => {\n        const postCtls = [];\n        let previousPostDay = new Date(0);\n        let previousPostId = '';\n        const currentUserId = this.props.currentUserId;\n        const lastViewed = this.props.lastViewedAt || 0;\n\n        let renderedLastViewed = false;\n\n        for (let i = posts.length - 1; i >= 0; i--) {\n            const post = posts[i];\n            let postCtl;\n            if (\n                post == null ||\n                post.type === PostTypes.EPHEMERAL_ADD_TO_CHANNEL\n            ) {\n                continue;\n            }\n\n            if (isCombinedUserActivityPost(post.id)) {\n                postCtl = (\n                    <CombinedUserActivityPost\n                        combinedId={post.id}\n                        previousPostId={previousPostId}\n                    />\n                );\n            } else {\n                postCtl = (\n                    <Post\n                        ref={post.id}\n                        key={'post ' + (post.id || post.pending_post_id)}\n                        post={post}\n                        shouldHighlight={this.props.focusedPostId === post.id}\n                        previousPostId={previousPostId}\n                    />\n                );\n            }\n\n            const currentPostDay = Utils.getDateForUnixTicks(post.create_at);\n            if (currentPostDay.toDateString() !== previousPostDay.toDateString()) {\n                postCtls.push(\n                    <DateSeparator\n                        key={currentPostDay}\n                        date={currentPostDay}\n                    />\n                );\n            }\n\n            const isNotCurrentUser = post.user_id !== currentUserId || isFromWebhook(post);\n            if (isNotCurrentUser &&\n                    lastViewed !== 0 &&\n                    post.create_at > lastViewed &&\n                    !Utils.isPostEphemeral(post) &&\n                    !renderedLastViewed) {\n                renderedLastViewed = true;\n\n                // Temporary fix to solve ie11 rendering issue\n                let newSeparatorId = '';\n                if (!UserAgent.isInternetExplorer()) {\n                    newSeparatorId = 'new_message_' + post.id;\n                }\n                postCtls.push(\n                    <div\n                        id={newSeparatorId}\n                        key='unviewed'\n                        ref='newMessageSeparator'\n                        className='new-separator'\n                    >\n                        <hr\n                            className='separator__hr'\n                        />\n                        <div className='separator__text'>\n                            <FormattedMessage\n                                id='posts_view.newMsg'\n                                defaultMessage='New Messages'\n                            />\n                        </div>\n                    </div>\n                );\n            }\n\n            postCtls.push(postCtl);\n            previousPostDay = currentPostDay;\n            previousPostId = post.id;\n        }\n\n        return postCtls;\n    }\n\n    render() {\n        const posts = this.props.posts || [];\n        const channel = this.props.channel;\n\n        if ((posts.length === 0 && this.state.isDoingInitialLoad) || channel == null) {\n            return (\n                <div\n                    id='post-list'\n                    className='a11y__region'\n                    data-a11y-sort-order='1'\n                    data-a11y-focus-child={true}\n                    data-a11y-order-reversed={true}\n                    data-a11y-loop-navigation={false}\n                >\n                    <LoadingScreen\n                        position='absolute'\n                        key='loading'\n                    />\n                </div>\n            );\n        }\n\n        let topRow;\n        if (this.state.atEnd) {\n            topRow = (\n                <CreateChannelIntroMessage\n                    channel={channel}\n                />\n            );\n        } else if (this.props.postVisibility >= Constants.MAX_POST_VISIBILITY) {\n            topRow = (\n                <div className='post-list__loading post-list__loading-search'>\n                    <FormattedMessage\n                        id='posts_view.maxLoaded'\n                        defaultMessage='Looking for a specific message? Try searching for it'\n                    />\n                </div>\n            );\n        } else {\n            topRow = (\n                <button\n                    ref='loadmoretop'\n                    className='more-messages-text theme style--none color--link'\n                    onClick={this.loadMorePosts}\n                >\n                    <FormattedMessage\n                        id='posts_view.loadMore'\n                        defaultMessage='Load more messages'\n                    />\n                </button>\n            );\n        }\n\n        const topPostCreateAt = this.state.topPost ? this.state.topPost.create_at : 0;\n\n        let postVisibility = this.props.postVisibility;\n\n        // In focus mode there's an extra (Constants.POST_CHUNK_SIZE / 2) posts to show\n        if (this.props.focusedPostId) {\n            postVisibility += Constants.POST_CHUNK_SIZE / 2;\n        }\n\n        return (\n            <div\n                id='post-list'\n                className='a11y__region'\n                data-a11y-sort-order='1'\n                data-a11y-focus-child={true}\n                data-a11y-order-reversed={true}\n                data-a11y-loop-navigation={false}\n            >\n                <FloatingTimestamp\n                    isScrolling={this.state.isScrolling}\n                    isMobile={Utils.isMobile()}\n                    createAt={topPostCreateAt}\n                />\n                <ScrollToBottomArrows\n                    isScrolling={this.state.isScrolling}\n                    atBottom={this.atBottom}\n                    onClick={this.scrollToBottom}\n                />\n                {!this.props.focusedPostId && (\n                    <NewMessagesBelow\n                        atBottom={this.atBottom}\n                        lastViewedBottom={this.state.lastViewed}\n                        onClick={this.scrollToBottom}\n                        channelId={this.props.channel.id}\n                    />\n                )}\n                <div\n                    ref='postlist'\n                    className='post-list-holder-by-time normal_post_list'\n                    key={'postlist-' + channel.id}\n                    onScroll={this.handleScroll}\n                >\n                    <div className='post-list__table'>\n                        <div\n                            id='postListContent'\n                            ref='postListContent'\n                            className='post-list__content'\n                        >\n                            {topRow}\n                            {this.createPosts(posts.slice(0, postVisibility))}\n                        </div>\n                    </div>\n                </div>\n            </div>\n        );\n    }\n}\n","// Copyright (c) 2015-present Mattermost, Inc. All Rights Reserved.\n// See LICENSE.txt for license information.\n\nimport {connect} from 'react-redux';\nimport {getCurrentChannel} from 'mattermost-redux/selectors/entities/channels';\nimport {makeGetPostsAroundPost, makeGetPostsInChannel} from 'mattermost-redux/selectors/entities/posts';\nimport {getCurrentUserId} from 'mattermost-redux/selectors/entities/users';\n\nimport {makeCombineUserActivityFromPosts} from 'selectors/posts';\n\nimport PostList from './post_list_ie.jsx';\n\nfunction makeMapStateToProps() {\n    const getPostsInChannel = makeGetPostsInChannel();\n    const getPostsAroundPost = makeGetPostsAroundPost();\n    const combineUserActivityPosts = makeCombineUserActivityFromPosts();\n    return function mapStateToProps(state, ownProps) {\n        let posts;\n        const postVisibility = state.views.channel.postVisibility[ownProps.channelId];\n\n        if (ownProps.focusedPostId) {\n            posts = getPostsAroundPost(state, ownProps.focusedPostId, ownProps.channelId);\n        } else {\n            posts = getPostsInChannel(state, ownProps.channelId, postVisibility);\n        }\n\n        return {\n            posts: combineUserActivityPosts(posts || []),\n            currentUserId: getCurrentUserId(state),\n            lastViewedAt: state.views.channel.lastChannelViewTime[ownProps.channelId],\n            channel: getCurrentChannel(state),\n            postVisibility,\n        };\n    };\n}\n\nexport default connect(makeMapStateToProps)(PostList);\n","// Copyright (c) 2015-present Mattermost, Inc. All Rights Reserved.\n// See LICENSE.txt for license information.\n\nimport PropTypes from 'prop-types';\nimport React from 'react';\nimport {FormattedMessage} from 'react-intl';\n\nexport default class NewMessageSeparator extends React.PureComponent {\n    static propTypes = {\n        separatorId: PropTypes.string.isRequired,\n    }\n\n    render() {\n        return (\n            <div\n                id={this.props.separatorId}\n                className='new-separator'\n            >\n                <hr className='separator__hr'/>\n                <div className='separator__text'>\n                    <FormattedMessage\n                        id='posts_view.newMsg'\n                        defaultMessage='New Messages'\n                    />\n                </div>\n            </div>\n        );\n    }\n}\n","// Copyright (c) 2015-present Mattermost, Inc. All Rights Reserved.\n// See LICENSE.txt for license information.\n\nimport PropTypes from 'prop-types';\nimport React from 'react';\nimport {FormattedMessage} from 'react-intl';\n\nimport * as PostListUtils from 'mattermost-redux/utils/post_list';\n\nimport CombinedUserActivityPost from 'components/post_view/combined_user_activity_post';\nimport Post from 'components/post_view/post';\nimport DateSeparator from 'components/post_view/date_separator';\nimport NewMessageSeparator from 'components/post_view/new_message_separator/new_message_separator';\nimport ChannelIntroMessage from 'components/post_view/channel_intro_message/';\nimport {PostListRowListIds} from 'utils/constants';\n\nexport default class PostListRow extends React.PureComponent {\n    static propTypes = {\n        listId: PropTypes.string.isRequired,\n        previousListId: PropTypes.string,\n        fullWidth: PropTypes.bool,\n        shouldHighlight: PropTypes.bool,\n        loadOlderPosts: PropTypes.func,\n        loadNewerPosts: PropTypes.func,\n        togglePostMenu: PropTypes.func,\n    }\n\n    render() {\n        const {listId, previousListId} = this.props;\n\n        if (PostListUtils.isDateLine(listId)) {\n            const date = PostListUtils.getDateForDateLine(listId);\n\n            return (\n                <DateSeparator\n                    key={date}\n                    date={date}\n                />\n            );\n        }\n\n        if (PostListUtils.isStartOfNewMessages(listId)) {\n            return (\n                <NewMessageSeparator separatorId={listId}/>\n            );\n        }\n\n        if (listId === PostListRowListIds.CHANNEL_INTRO_MESSAGE) {\n            return (\n                <ChannelIntroMessage/>\n            );\n        }\n\n        if (listId === PostListRowListIds.LOAD_OLDER_MESSAGES_TRIGGER || listId === PostListRowListIds.LOAD_NEWER_MESSAGES_TRIGGER) {\n            return (\n                <button\n                    className='more-messages-text theme style--none color--link'\n                    onClick={listId === PostListRowListIds.LOAD_OLDER_MESSAGES_TRIGGER ? this.props.loadOlderPosts : this.props.loadNewerPosts}\n                >\n                    <FormattedMessage\n                        id='posts_view.loadMore'\n                        defaultMessage='Load more messages'\n                    />\n                </button>\n            );\n        }\n\n        if (listId === PostListRowListIds.OLDER_MESSAGES_LOADER || listId === PostListRowListIds.NEWER_MESSAGES_LOADER) {\n            return (\n                <div\n                    className='loading-screen'\n                >\n                    <div className='loading__content'>\n                        <div className='round round-1'/>\n                        <div className='round round-2'/>\n                        <div className='round round-3'/>\n                    </div>\n                </div>\n            );\n        }\n\n        const postProps = {\n            previousPostId: previousListId,\n            shouldHighlight: this.props.shouldHighlight,\n            togglePostMenu: this.props.togglePostMenu,\n        };\n\n        if (PostListUtils.isCombinedUserActivityPost(listId)) {\n            return (\n                <CombinedUserActivityPost\n                    combinedId={listId}\n                    {...postProps}\n                />\n            );\n        }\n\n        return (\n            <Post\n                postId={listId}\n                {...postProps}\n            />\n        );\n    }\n}\n","// Copyright (c) 2015-present Mattermost, Inc. All Rights Reserved.\n// See LICENSE.txt for license information.\n\nimport {connect} from 'react-redux';\n\nimport PostListRow from './post_list_row.jsx';\n\nfunction mapStateToProps(state, ownProps) {\n    return {\n        post: ownProps.post,\n        channel: ownProps.channel,\n    };\n}\n\nexport default connect(mapStateToProps)(PostListRow);\n","// Copyright (c) 2015-present Mattermost, Inc. All Rights Reserved.\n// See LICENSE.txt for license information.\n\nimport PropTypes from 'prop-types';\nimport React from 'react';\nimport AutoSizer from 'react-virtualized-auto-sizer';\nimport {DynamicSizeList} from 'react-window';\nimport {intlShape} from 'react-intl';\nimport {isDateLine, isStartOfNewMessages} from 'mattermost-redux/utils/post_list';\n\nimport EventEmitter from 'mattermost-redux/utils/event_emitter';\n\nimport Constants, {PostListRowListIds, EventTypes, PostRequestTypes} from 'utils/constants.jsx';\nimport DelayedAction from 'utils/delayed_action.jsx';\nimport {getPreviousPostId, getLatestPostId} from 'utils/post_utils.jsx';\nimport * as Utils from 'utils/utils.jsx';\n\nimport FloatingTimestamp from 'components/post_view/floating_timestamp';\nimport NewMessagesBelow from 'components/post_view/new_messages_below';\nimport PostListRow from 'components/post_view/post_list_row';\nimport ScrollToBottomArrows from 'components/post_view/scroll_to_bottom_arrows';\n\nconst OVERSCAN_COUNT_BACKWARD = window.OVERSCAN_COUNT_BACKWARD || 80; // Exposing the value for PM to test will be removed soon\nconst OVERSCAN_COUNT_FORWARD = window.OVERSCAN_COUNT_FORWARD || 80; // Exposing the value for PM to test will be removed soon\nconst HEIGHT_TRIGGER_FOR_MORE_POSTS = window.HEIGHT_TRIGGER_FOR_MORE_POSTS || 1000; // Exposing the value for PM to test will be removed soon\nconst BUFFER_TO_BE_CONSIDERED_BOTTOM = 10;\n\nconst MAXIMUM_POSTS_FOR_SLICING = {\n    channel: 50,\n    permalink: 100,\n};\n\nconst postListStyle = {\n    padding: '14px 0px 7px',\n};\n\nconst virtListStyles = {\n    position: 'absolute',\n    bottom: '0',\n    maxHeight: '100%',\n};\n\nexport default class PostList extends React.PureComponent {\n    static propTypes = {\n\n        /**\n         * Array of Ids in the channel including date separators, new message indicator, more messages loader,\n         * manual load messages trigger and postId in the order of newest to oldest for populating virtual list rows\n         */\n        postListIds: PropTypes.array.isRequired,\n\n        /**\n         * Set to focus this post\n         */\n        focusedPostId: PropTypes.string,\n\n        /**\n         * The current channel id\n         */\n        channelId: PropTypes.string.isRequired,\n\n        /**\n         * Used for disabling auto retry of posts and enabling manual link for loading posts\n         */\n        autoRetryEnable: PropTypes.bool,\n\n        /**\n         * used for populating header, scroll correction and disabling triggering loadOlderPosts\n         */\n        atOldestPost: PropTypes.bool,\n\n        /**\n         * used for disabling triggering loadNewerPosts\n         */\n        atLatestPost: PropTypes.bool,\n\n        latestPostTimeStamp: PropTypes.number,\n\n        latestAriaLabelFunc: PropTypes.func,\n\n        actions: PropTypes.shape({\n\n            /**\n             * Function to get older posts in the channel\n             */\n            loadOlderPosts: PropTypes.func.isRequired,\n\n            /**\n             * Function to get newer posts in the channel\n             */\n            loadNewerPosts: PropTypes.func.isRequired,\n\n            /**\n             * Function used for autoLoad of posts incase screen is not filled with posts\n             */\n            canLoadMorePosts: PropTypes.func.isRequired,\n\n            /**\n             * Function to check and set if app is in mobile view\n             */\n            checkAndSetMobileView: PropTypes.func.isRequired,\n\n            /**\n             * Function to change the post selected for postList\n             */\n            changeUnreadChunkTimeStamp: PropTypes.func.isRequired,\n        }).isRequired,\n    }\n\n    static contextTypes = {\n        intl: intlShape.isRequired,\n    };\n\n    constructor(props) {\n        super(props);\n\n        const channelIntroMessage = PostListRowListIds.CHANNEL_INTRO_MESSAGE;\n        const isMobile = Utils.isMobile();\n        this.state = {\n            isScrolling: false,\n            isMobile,\n            atBottom: false,\n            lastViewedBottom: Date.now(),\n            postListIds: [channelIntroMessage],\n            topPostId: '',\n            postMenuOpened: false,\n            dynamicListStyle: {\n                willChange: 'transform',\n            },\n        };\n\n        this.listRef = React.createRef();\n        this.postListRef = React.createRef();\n        if (isMobile) {\n            this.scrollStopAction = new DelayedAction(this.handleScrollStop);\n        }\n\n        this.initRangeToRender = this.props.focusedPostId ? [0, MAXIMUM_POSTS_FOR_SLICING.permalink] : [0, MAXIMUM_POSTS_FOR_SLICING.channel];\n\n        let postIndex = 0;\n        if (props.focusedPostId) {\n            postIndex = this.props.postListIds.findIndex((postId) => postId === this.props.focusedPostId);\n        } else {\n            postIndex = this.getNewMessagesSeparatorIndex(props.postListIds);\n        }\n\n        const maxPostsForSlicing = props.focusedPostId ? MAXIMUM_POSTS_FOR_SLICING.permalink : MAXIMUM_POSTS_FOR_SLICING.channel;\n        this.initRangeToRender = [\n            Math.max(postIndex - 30, 0),\n            Math.max(postIndex + 30, Math.min(props.postListIds.length - 1, maxPostsForSlicing)),\n        ];\n    }\n\n    componentDidMount() {\n        this.mounted = true;\n        this.props.actions.checkAndSetMobileView();\n\n        window.addEventListener('resize', this.handleWindowResize);\n\n        EventEmitter.addListener(EventTypes.POST_LIST_SCROLL_CHANGE, this.scrollChange);\n    }\n\n    getSnapshotBeforeUpdate(prevProps) {\n        if (this.postListRef && this.postListRef.current) {\n            const postsAddedAtTop = this.props.postListIds.length !== prevProps.postListIds.length && this.props.postListIds[0] === prevProps.postListIds[0];\n            const channelHeaderAdded = this.props.atOldestPost !== prevProps.atOldestPost;\n            if ((postsAddedAtTop || channelHeaderAdded) && !this.state.atBottom) {\n                const postListNode = this.postListRef.current;\n                const previousScrollTop = postListNode.parentElement.scrollTop;\n                const previousScrollHeight = postListNode.scrollHeight;\n\n                return {\n                    previousScrollTop,\n                    previousScrollHeight,\n                };\n            }\n        }\n        return null;\n    }\n\n    componentDidUpdate(prevProps, prevState, snapshot) {\n        if (!this.postListRef.current || !snapshot) {\n            return;\n        }\n\n        const postlistScrollHeight = this.postListRef.current.scrollHeight;\n        const postsAddedAtTop = this.props.postListIds.length !== prevProps.postListIds.length && this.props.postListIds[0] === prevProps.postListIds[0];\n        const channelHeaderAdded = this.props.atOldestPost !== prevProps.atOldestPost;\n        if ((postsAddedAtTop || channelHeaderAdded) && !this.state.atBottom) {\n            const scrollValue = snapshot.previousScrollTop + (postlistScrollHeight - snapshot.previousScrollHeight);\n            if (scrollValue !== 0 && (scrollValue - snapshot.previousScrollTop) !== 0) {\n                //true as third param so chrome can use animationFrame when correcting scroll\n                this.listRef.current.scrollTo(scrollValue, scrollValue - snapshot.previousScrollTop, true);\n            }\n        }\n    }\n\n    componentWillUnmount() {\n        this.mounted = false;\n        window.removeEventListener('resize', this.handleWindowResize);\n\n        EventEmitter.removeListener(EventTypes.POST_LIST_SCROLL_CHANGE, this.scrollChange);\n    }\n\n    static getDerivedStateFromProps(props) {\n        const postListIds = props.postListIds;\n        let newPostListIds;\n\n        if (props.atOldestPost) {\n            newPostListIds = [...postListIds, PostListRowListIds.CHANNEL_INTRO_MESSAGE];\n        } else if (props.autoRetryEnable) {\n            newPostListIds = [...postListIds, PostListRowListIds.OLDER_MESSAGES_LOADER];\n        } else {\n            newPostListIds = [...postListIds, PostListRowListIds.LOAD_OLDER_MESSAGES_TRIGGER];\n        }\n\n        if (!props.atLatestPost) {\n            if (props.autoRetryEnable) {\n                newPostListIds = [PostListRowListIds.NEWER_MESSAGES_LOADER, ...newPostListIds];\n            } else {\n                newPostListIds = [PostListRowListIds.LOAD_NEWER_MESSAGES_TRIGGER, ...newPostListIds];\n            }\n        }\n\n        return {\n            postListIds: newPostListIds,\n        };\n    }\n\n    getNewMessagesSeparatorIndex = (postListIds) => {\n        return postListIds.findIndex(\n            (item) => item.indexOf(PostListRowListIds.START_OF_NEW_MESSAGES) === 0\n        );\n    }\n\n    scrollChange = (toBottom) => {\n        if (toBottom) {\n            this.scrollToLatestMessages();\n        }\n    }\n\n    handleWindowResize = () => {\n        this.props.actions.checkAndSetMobileView();\n        const isMobile = Utils.isMobile();\n        if (isMobile !== this.state.isMobile) {\n            const dynamicListStyle = this.state.dynamicListStyle;\n            if (this.state.postMenuOpened) {\n                if (!isMobile && dynamicListStyle.willChange === 'unset') {\n                    dynamicListStyle.willChange = 'transform';\n                } else if (isMobile && dynamicListStyle.willChange === 'transform') {\n                    dynamicListStyle.willChange = 'unset';\n                }\n            }\n\n            this.setState({\n                isMobile,\n                dynamicListStyle,\n            });\n            this.scrollStopAction = new DelayedAction(this.handleScrollStop);\n        }\n    }\n\n    togglePostMenu = (opened) => {\n        const dynamicListStyle = this.state.dynamicListStyle;\n        if (this.state.isMobile) {\n            dynamicListStyle.willChange = opened ? 'unset' : 'transform';\n        }\n\n        this.setState({\n            postMenuOpened: opened,\n            dynamicListStyle,\n        });\n    };\n\n    renderRow = ({data, itemId, style}) => {\n        const index = data.indexOf(itemId);\n        let className = '';\n        const basePaddingClass = 'post-row__padding';\n        const previousItemId = (index !== -1 && index < data.length - 1) ? data[index + 1] : '';\n        const nextItemId = (index > 0 && index < data.length) ? data[index - 1] : '';\n\n        if (isDateLine(nextItemId) || isStartOfNewMessages(nextItemId)) {\n            className += basePaddingClass + ' bottom';\n        }\n\n        if (isDateLine(previousItemId) || isStartOfNewMessages(previousItemId)) {\n            if (className.includes(basePaddingClass)) {\n                className += ' top';\n            } else {\n                className += basePaddingClass + ' top';\n            }\n        }\n\n        return (\n            <div\n                style={style}\n                className={className}\n            >\n                <PostListRow\n                    listId={itemId}\n                    previousListId={getPreviousPostId(data, index)}\n                    shouldHighlight={itemId === this.props.focusedPostId}\n                    loadOlderPosts={this.props.actions.loadOlderPosts}\n                    loadNewerPosts={this.props.actions.loadNewerPosts}\n                    togglePostMenu={this.togglePostMenu}\n                />\n            </div>\n        );\n    };\n\n    itemKey = (index) => {\n        const {postListIds} = this.state;\n        return postListIds[index] ? postListIds[index] : index;\n    }\n\n    onScroll = ({scrollDirection, scrollOffset, scrollUpdateWasRequested, clientHeight, scrollHeight}) => {\n        const didUserScrollBackwards = scrollDirection === 'backward' && !scrollUpdateWasRequested;\n        const didUserScrollForwards = scrollDirection === 'forward' && !scrollUpdateWasRequested;\n        const isOffsetWithInRange = scrollOffset < HEIGHT_TRIGGER_FOR_MORE_POSTS;\n        const offsetFromBottom = (scrollHeight - clientHeight) - scrollOffset < HEIGHT_TRIGGER_FOR_MORE_POSTS;\n\n        if (didUserScrollBackwards && isOffsetWithInRange && !this.props.atOldestPost) {\n            this.props.actions.loadOlderPosts();\n        } else if (didUserScrollForwards && offsetFromBottom && !this.props.atLatestPost) {\n            this.props.actions.loadNewerPosts();\n        }\n\n        if (this.state.isMobile) {\n            if (!this.state.isScrolling) {\n                this.setState({\n                    isScrolling: true,\n                });\n            }\n\n            if (this.scrollStopAction) {\n                this.scrollStopAction.fireAfter(Constants.SCROLL_DELAY);\n            }\n        }\n\n        if (scrollUpdateWasRequested) { //if scroll change is programatically requested i.e by calling scrollTo\n            //This is a private method on virtlist\n            const postsRenderedRange = this.listRef.current._getRangeToRender(); //eslint-disable-line no-underscore-dangle\n\n            // postsRenderedRange[3] is the visibleStopIndex which is post at the bottom of the screen\n            if (postsRenderedRange[3] <= 1 && !this.props.atLatestPost) {\n                this.props.actions.canLoadMorePosts(PostRequestTypes.AFTER_ID);\n            }\n        }\n\n        this.checkBottom(scrollOffset, scrollHeight, clientHeight);\n    }\n\n    checkBottom = (scrollOffset, scrollHeight, clientHeight) => {\n        this.updateAtBottom(this.isAtBottom(scrollOffset, scrollHeight, clientHeight));\n    }\n\n    isAtBottom = (scrollOffset, scrollHeight, clientHeight) => {\n        // Calculate how far the post list is from being scrolled to the bottom\n        const offsetFromBottom = scrollHeight - clientHeight - scrollOffset;\n\n        return offsetFromBottom <= BUFFER_TO_BE_CONSIDERED_BOTTOM && scrollHeight > 0;\n    }\n\n    updateAtBottom = (atBottom) => {\n        if (atBottom !== this.state.atBottom) {\n            // Update lastViewedBottom when the list reaches or leaves the bottom\n            let lastViewedBottom = Date.now();\n            if (this.props.latestPostTimeStamp > lastViewedBottom) {\n                lastViewedBottom = this.props.latestPostTimeStamp;\n            }\n\n            this.setState({\n                atBottom,\n                lastViewedBottom,\n            });\n        }\n    }\n\n    handleScrollStop = () => {\n        if (this.mounted) {\n            this.setState({\n                isScrolling: false,\n            });\n        }\n    }\n\n    updateFloatingTimestamp = (visibleTopItem) => {\n        if (!this.state.isMobile) {\n            return;\n        }\n\n        if (!this.props.postListIds) {\n            return;\n        }\n\n        this.setState({\n            topPostId: getLatestPostId(this.props.postListIds.slice(visibleTopItem)),\n        });\n    }\n\n    onItemsRendered = ({visibleStartIndex}) => {\n        this.updateFloatingTimestamp(visibleStartIndex);\n    }\n\n    initScrollToIndex = () => {\n        if (this.props.focusedPostId) {\n            const index = this.state.postListIds.findIndex(\n                (item) => item === this.props.focusedPostId\n            );\n            return {\n                index,\n                position: 'center',\n            };\n        }\n\n        const newMessagesSeparatorIndex = this.state.postListIds.findIndex(\n            (item) => item.indexOf(PostListRowListIds.START_OF_NEW_MESSAGES) === 0\n        );\n\n        if (newMessagesSeparatorIndex > 0) {\n            // if there is a dateLine above START_OF_NEW_MESSAGES then scroll to date line\n            if (isDateLine(this.state.postListIds[newMessagesSeparatorIndex + 1])) {\n                return {\n                    index: newMessagesSeparatorIndex + 1,\n                    position: 'start',\n                };\n            }\n            return {\n                index: newMessagesSeparatorIndex,\n                position: 'start',\n            };\n        }\n\n        this.setState({atBottom: true});\n        return {\n            index: 0,\n            position: 'end',\n        };\n    }\n\n    scrollToLatestMessages = () => {\n        if (this.props.atLatestPost) {\n            this.scrollToBottom();\n        } else {\n            this.props.actions.changeUnreadChunkTimeStamp('');\n        }\n    }\n\n    scrollToBottom = () => {\n        this.listRef.current.scrollToItem(0, 'end');\n    }\n\n    render() {\n        const channelId = this.props.channelId;\n        let ariaLabel;\n        if (this.props.latestAriaLabelFunc && this.props.postListIds.indexOf(PostListRowListIds.START_OF_NEW_MESSAGES) >= 0) {\n            ariaLabel = this.props.latestAriaLabelFunc(this.context.intl);\n        }\n        const {dynamicListStyle} = this.state;\n\n        let newMessagesBelow = null;\n        if (!this.props.focusedPostId) {\n            newMessagesBelow = (\n                <NewMessagesBelow\n                    atBottom={this.state.atBottom}\n                    lastViewedBottom={this.state.lastViewedBottom}\n                    postIds={this.state.postListIds}\n                    onClick={this.scrollToLatestMessages}\n                    channelId={channelId}\n                />\n            );\n        }\n\n        return (\n            <div\n                id='post-list'\n                className='a11y__region'\n                data-a11y-sort-order='1'\n                data-a11y-focus-child={true}\n                data-a11y-order-reversed={true}\n                data-a11y-loop-navigation={false}\n                aria-label={Utils.localizeMessage('accessibility.sections.centerContent', 'message list main region')}\n            >\n                {this.state.isMobile && (\n                    <React.Fragment>\n                        <FloatingTimestamp\n                            isScrolling={this.state.isScrolling}\n                            isMobile={true}\n                            postId={this.state.topPostId}\n                        />\n                        <ScrollToBottomArrows\n                            isScrolling={this.state.isScrolling}\n                            atBottom={this.state.atBottom}\n                            onClick={this.scrollToBottom}\n                        />\n                    </React.Fragment>\n                )}\n                {newMessagesBelow}\n                <div\n                    role='presentation'\n                    className='post-list-holder-by-time'\n                    key={'postlist-' + channelId}\n                >\n                    <div\n                        role='presentation'\n                        className='post-list__table'\n                    >\n                        <div\n                            id='postListContent'\n                            className='post-list__content'\n                        >\n                            <span\n                                className='sr-only'\n                                aria-live='polite'\n                            >\n                                {ariaLabel}\n                            </span>\n                            <AutoSizer>\n                                {({height, width}) => (\n                                    <DynamicSizeList\n                                        role='listbox'\n                                        ref={this.listRef}\n                                        height={height}\n                                        width={width}\n                                        className='post-list__dynamic'\n                                        itemCount={this.state.postListIds.length}\n                                        itemData={this.state.postListIds}\n                                        itemKey={this.itemKey}\n                                        overscanCountForward={OVERSCAN_COUNT_FORWARD}\n                                        overscanCountBackward={OVERSCAN_COUNT_BACKWARD}\n                                        onScroll={this.onScroll}\n                                        onItemsRendered={this.onItemsRendered}\n                                        initScrollToIndex={this.initScrollToIndex}\n                                        canLoadMorePosts={this.props.actions.canLoadMorePosts}\n                                        skipResizeClass='col__reply'\n                                        innerRef={this.postListRef}\n                                        style={{...virtListStyles, ...dynamicListStyle}}\n                                        innerListStyle={postListStyle}\n                                        initRangeToRender={this.initRangeToRender}\n                                        loaderId={PostListRowListIds.OLDER_MESSAGES_LOADER}\n                                        correctScrollToBottom={this.props.atLatestPost}\n                                    >\n                                        {this.renderRow}\n                                    </DynamicSizeList>\n                                )}\n                            </AutoSizer>\n                        </div>\n                    </div>\n                </div>\n            </div>\n        );\n    }\n}\n","// Copyright (c) 2015-present Mattermost, Inc. All Rights Reserved.\n// See LICENSE.txt for license information.\n\nimport React from 'react';\nimport PropTypes from 'prop-types';\n\nimport LoadingScreen from 'components/loading_screen.jsx';\nimport {PostRequestTypes} from 'utils/constants.jsx';\nimport {getOldestPostId, getLatestPostId} from 'utils/post_utils.jsx';\n\nimport VirtPostList from './post_list_virtualized.jsx';\n\nconst MAX_NUMBER_OF_AUTO_RETRIES = 3;\nexport const MAX_EXTRA_PAGES_LOADED = 10;\n\nexport default class PostList extends React.PureComponent {\n    static propTypes = {\n\n        /**\n         *  Array of formatted post ids in the channel\n         *  This will be different from postListIds because of grouping and filtering of posts\n         *  This array should be used for making Before and After API calls\n         */\n        formattedPostIds: PropTypes.array,\n\n        /**\n         *  Array of post ids in the channel, ordered from newest to oldest\n         */\n        postListIds: PropTypes.array,\n\n        /**\n         * The channel the posts are in\n         */\n        channelId: PropTypes.string,\n\n        /*\n         * To get posts for perma view\n         */\n        focusedPostId: PropTypes.string,\n\n        /*\n         * Used for determining if we are not at the recent most chunk in channel\n         */\n        atLatestPost: PropTypes.bool,\n\n        /*\n         * Used for determining if we are at the channels oldest post\n         */\n        atOldestPost: PropTypes.bool,\n\n        /*\n         * Used for loading posts using unread API\n         */\n        isFirstLoad: PropTypes.bool,\n\n        /*\n         * Used for syncing posts and is also passed down to virt list for newMessages indicator\n         */\n        latestPostTimeStamp: PropTypes.number,\n\n        latestAriaLabelFunc: PropTypes.func,\n\n        /*\n         * Used for padding down to virt list so it can change the chunk of posts selected\n         */\n        changeUnreadChunkTimeStamp: PropTypes.func.isRequired,\n        actions: PropTypes.shape({\n\n            /*\n             * Used for getting permalink view posts\n             */\n            loadPostsAround: PropTypes.func.isRequired,\n\n            /*\n             * Used for geting unreads posts\n             */\n            loadUnreads: PropTypes.func.isRequired,\n\n            /*\n             * Used for getting posts using BEFORE_ID and AFTER_ID\n             */\n            loadPosts: PropTypes.func.isRequired,\n\n            /*\n             * Used to set mobile view on resize\n             */\n            checkAndSetMobileView: PropTypes.func.isRequired,\n\n            /*\n             * Used to loading posts since a timestamp to sync the posts\n             */\n            syncPostsInChannel: PropTypes.func.isRequired,\n\n            /*\n             * Used to loading posts if it not first visit, permalink or there exists any postListIds\n             * This happens when previous channel visit has a chunk which is not the latest set of posts\n             */\n            loadLatestPosts: PropTypes.func.isRequired,\n        }).isRequired,\n    }\n\n    constructor(props) {\n        super(props);\n        this.state = {\n            loadingNewerPosts: false,\n            loadingOlderPosts: false,\n            autoRetryEnable: true,\n        };\n\n        this.autoRetriesCount = 0;\n        this.loadingMorePosts = null;\n        this.actionsForPostList = {\n            loadOlderPosts: this.getPostsBefore,\n            loadNewerPosts: this.getPostsAfter,\n            checkAndSetMobileView: props.actions.checkAndSetMobileView,\n            canLoadMorePosts: this.canLoadMorePosts,\n            changeUnreadChunkTimeStamp: props.changeUnreadChunkTimeStamp,\n        };\n    }\n\n    componentDidMount() {\n        this.mounted = true;\n        if (this.props.channelId) {\n            this.postsOnLoad(this.props.channelId);\n        }\n    }\n\n    componentDidUpdate(prevProps) {\n        if (this.props.channelId !== prevProps.channelId) {\n            this.postsOnLoad(this.props.channelId);\n        }\n    }\n\n    componentWillUnmount() {\n        this.mounted = false;\n    }\n\n    postsOnLoad = async (channelId) => {\n        if (this.props.focusedPostId) {\n            await this.props.actions.loadPostsAround(channelId, this.props.focusedPostId);\n        } else if (this.props.isFirstLoad) {\n            await this.props.actions.loadUnreads(channelId);\n        } else if (this.props.latestPostTimeStamp) {\n            await this.props.actions.syncPostsInChannel(channelId, this.props.latestPostTimeStamp);\n        } else {\n            await this.props.actions.loadLatestPosts(channelId);\n        }\n\n        this.setState({\n            loadingOlderPosts: false,\n            loadingNewerPosts: false,\n        });\n    }\n\n    callLoadPosts = async (channelId, postId, type) => {\n        const {error} = await this.props.actions.loadPosts({\n            channelId,\n            postId,\n            type,\n        });\n\n        if (type === PostRequestTypes.BEFORE_ID) {\n            this.setState({loadingOlderPosts: false});\n        } else {\n            this.setState({loadingNewerPosts: false});\n        }\n\n        if (error) {\n            if (this.autoRetriesCount < MAX_NUMBER_OF_AUTO_RETRIES) {\n                this.autoRetriesCount++;\n                await this.callLoadPosts(channelId, postId, type);\n            } else if (this.mounted) {\n                this.setState({autoRetryEnable: false});\n            }\n        } else {\n            if (this.mounted) {\n                this.setState({autoRetryEnable: true});\n            }\n\n            if (!this.state.autoRetryEnable) {\n                this.autoRetriesCount = 0;\n            }\n        }\n\n        return {error};\n    }\n\n    getOldestVisiblePostId = () => {\n        return getOldestPostId(this.props.postListIds);\n    }\n\n    getLatestVisiblePostId = () => {\n        return getLatestPostId(this.props.postListIds);\n    }\n\n    canLoadMorePosts = async (type = PostRequestTypes.BEFORE_ID) => {\n        if (!this.props.postListIds) {\n            return;\n        }\n\n        if (this.state.loadingOlderPosts || this.state.loadingNewerPosts) {\n            return;\n        }\n\n        if (this.extraPagesLoaded > MAX_EXTRA_PAGES_LOADED) {\n            // Prevent this from loading a lot of pages in a channel with only hidden messages\n            // Enable load more messages manual link\n            if (this.state.autoRetryEnable) {\n                this.setState({autoRetryEnable: false});\n            }\n            return;\n        }\n\n        if (!this.props.atOldestPost && type === PostRequestTypes.BEFORE_ID) {\n            const oldestPostId = this.getOldestVisiblePostId();\n            await this.getPostsBefore(oldestPostId);\n        } else if (!this.props.atLatestPost) {\n            // if all olderPosts are loaded load new ones\n            const latestPostId = this.getLatestVisiblePostId();\n            await this.getPostsAfter(latestPostId);\n        }\n\n        this.extraPagesLoaded += 1;\n    }\n\n    getPostsBefore = async () => {\n        if (this.state.loadingOlderPosts) {\n            return;\n        }\n        const oldestPostId = this.getOldestVisiblePostId();\n        this.setState({loadingOlderPosts: true});\n        await this.callLoadPosts(this.props.channelId, oldestPostId, PostRequestTypes.BEFORE_ID);\n    }\n\n    getPostsAfter = async () => {\n        if (this.state.loadingNewerPosts) {\n            return;\n        }\n        const latestPostId = this.getLatestVisiblePostId();\n        this.setState({loadingNewerPosts: true});\n        await this.callLoadPosts(this.props.channelId, latestPostId, PostRequestTypes.AFTER_ID);\n    }\n\n    render() {\n        if (!this.props.postListIds) {\n            return (\n                <div id='post-list'>\n                    <LoadingScreen\n                        position='absolute'\n                        key='loading'\n                    />\n                </div>\n            );\n        }\n\n        return (\n            <div id='post-list'>\n                <div\n                    ref='postlist'\n                    className='post-list-holder-by-time'\n                    key={'postlist-' + this.props.channelId}\n                >\n                    <div className='post-list__table'>\n                        <div\n                            id='virtualizedPostListContent'\n                            ref='postListContent'\n                            className='post-list__content'\n                        >\n                            <VirtPostList\n                                loadingNewerPosts={this.state.loadingNewerPosts}\n                                loadingOlderPosts={this.state.loadingOlderPosts}\n                                atOldestPost={this.props.atOldestPost}\n                                atLatestPost={this.props.atLatestPost}\n                                focusedPostId={this.props.focusedPostId}\n                                channelId={this.props.channelId}\n                                autoRetryEnable={this.state.autoRetryEnable}\n                                actions={this.actionsForPostList}\n                                postListIds={this.props.formattedPostIds}\n                                latestPostTimeStamp={this.props.latestPostTimeStamp}\n                                latestAriaLabelFunc={this.props.latestAriaLabelFunc}\n                            />\n                        </div>\n                    </div>\n                </div>\n            </div>\n        );\n    }\n}\n","// Copyright (c) 2015-present Mattermost, Inc. All Rights Reserved.\n// See LICENSE.txt for license information.\n\nimport {connect} from 'react-redux';\nimport {bindActionCreators} from 'redux';\nimport {withRouter} from 'react-router-dom';\nimport {getRecentPostsChunkInChannel, makeGetPostsChunkAroundPost, getUnreadPostsChunk, getPost} from 'mattermost-redux/selectors/entities/posts';\nimport {memoizeResult} from 'mattermost-redux/utils/helpers';\nimport {makePreparePostIdsForPostList} from 'mattermost-redux/utils/post_list';\n\nimport {getLatestPostId, makeCreateAriaLabelForPost} from 'utils/post_utils.jsx';\nimport {\n    checkAndSetMobileView,\n    loadPosts,\n    loadUnreads,\n    loadPostsAround,\n    syncPostsInChannel,\n    loadLatestPosts,\n} from 'actions/views/channel';\n\nimport {disableVirtList} from 'utils/utils.jsx';\n\nimport IePostList from '../post_list_ie';\n\nimport PostListWrapper from './post_list.jsx';\n\nlet PostList = PostListWrapper;\nif (disableVirtList()) {\n    PostList = IePostList;\n}\n\nconst isFirstLoad = (state, channelId) => !state.entities.posts.postsInChannel[channelId];\nconst memoizedGetLatestPostId = memoizeResult((postIds) => getLatestPostId(postIds));\n\n// This function is added as a fail safe for the channel sync issue we have.\n// When the user switches to a team for the first time we show the channel of previous team and then settle for the right channel after that\n// This causes the scroll correction etc an issue because post_list is not mounted for new channel instead it is updated\n\nfunction makeMapStateToProps() {\n    const getPostsChunkAroundPost = makeGetPostsChunkAroundPost();\n    const preparePostIdsForPostList = makePreparePostIdsForPostList();\n    const createAriaLabelForPost = makeCreateAriaLabelForPost();\n\n    return function mapStateToProps(state, ownProps) {\n        let latestPostTimeStamp = 0;\n        let postIds;\n        let chunk;\n        let atLatestPost = false;\n        let atOldestPost = false;\n        let formattedPostIds;\n        let latestAriaLabelFunc;\n        const lastViewedAt = state.views.channel.lastChannelViewTime[ownProps.channelId];\n\n        if (ownProps.match.params.postid) {\n            chunk = getPostsChunkAroundPost(state, ownProps.match.params.postid, ownProps.channelId);\n        } else if (ownProps.unreadChunkTimeStamp) {\n            chunk = getUnreadPostsChunk(state, ownProps.channelId, ownProps.unreadChunkTimeStamp);\n        } else {\n            chunk = getRecentPostsChunkInChannel(state, ownProps.channelId);\n        }\n\n        if (chunk) {\n            postIds = chunk.order;\n            atLatestPost = chunk.recent;\n            atOldestPost = chunk.oldest;\n        }\n\n        if (postIds) {\n            formattedPostIds = preparePostIdsForPostList(state, {postIds, lastViewedAt, indicateNewMessages: true});\n            if (postIds.length) {\n                const latestPostId = memoizedGetLatestPostId(postIds);\n                const latestPost = getPost(state, latestPostId);\n                latestPostTimeStamp = latestPost.create_at;\n                latestAriaLabelFunc = createAriaLabelForPost(state, latestPost);\n            }\n        }\n\n        return {\n            lastViewedAt,\n            isFirstLoad: isFirstLoad(state, ownProps.channelId),\n            formattedPostIds,\n            atLatestPost,\n            atOldestPost,\n            focusedPostId: ownProps.match.params.postid,\n            latestPostTimeStamp,\n            postListIds: postIds,\n            latestAriaLabelFunc,\n        };\n    };\n}\n\nfunction mapDispatchToProps(dispatch) {\n    return {\n        actions: bindActionCreators({\n            loadUnreads,\n            loadPosts,\n            loadLatestPosts,\n            loadPostsAround,\n            checkAndSetMobileView,\n            syncPostsInChannel,\n        }, dispatch),\n    };\n}\n\nexport default withRouter(connect(makeMapStateToProps, mapDispatchToProps)(PostList));\n","// Copyright (c) 2015-present Mattermost, Inc. All Rights Reserved.\n// See LICENSE.txt for license information.\n\nimport PropTypes from 'prop-types';\nimport React from 'react';\n\nimport LoadingScreen from 'components/loading_screen.jsx';\n\nimport PostList from './post_list';\n\nexport default class PostView extends React.PureComponent {\n    static propTypes = {\n        lastViewedAt: PropTypes.number,\n        channelLoading: PropTypes.bool,\n        channelId: PropTypes.string,\n        focusedPostId: PropTypes.string,\n    }\n\n    constructor(props) {\n        super(props);\n        this.state = {\n            unreadChunkTimeStamp: props.lastViewedAt,\n            loaderForChangeOfPostsChunk: false,\n            channelLoading: props.channelLoading,\n        };\n    }\n\n    static getDerivedStateFromProps(props, state) {\n        if (state.unreadChunkTimeStamp === null && props.lastViewedAt) {\n            return {\n                unreadChunkTimeStamp: props.lastViewedAt,\n            };\n        }\n        if (props.channelLoading !== state.channelLoading) {\n            return {\n                unreadChunkTimeStamp: props.lastViewedAt,\n                channelLoading: props.channelLoading,\n            };\n        }\n        return null;\n    }\n\n    changeUnreadChunkTimeStamp = (unreadChunkTimeStamp) => {\n        this.setState({\n            unreadChunkTimeStamp,\n            loaderForChangeOfPostsChunk: true,\n        }, () => {\n            window.requestAnimationFrame(() => {\n                this.setState({\n                    loaderForChangeOfPostsChunk: false,\n                });\n            });\n        });\n    }\n\n    render() {\n        if (this.props.channelLoading || this.state.loaderForChangeOfPostsChunk) {\n            return (\n                <div id='post-list'>\n                    <LoadingScreen\n                        position='absolute'\n                        key='loading'\n                    />\n                </div>\n            );\n        }\n\n        return (\n            <PostList\n                unreadChunkTimeStamp={this.state.unreadChunkTimeStamp}\n                channelId={this.props.channelId}\n                changeUnreadChunkTimeStamp={this.changeUnreadChunkTimeStamp}\n                focusedPostId={this.props.focusedPostId}\n            />\n        );\n    }\n}\n","// Copyright (c) 2015-present Mattermost, Inc. All Rights Reserved.\n// See LICENSE.txt for license information.\n\nimport {connect} from 'react-redux';\nimport {withRouter} from 'react-router-dom';\nimport {getChannel} from 'mattermost-redux/selectors/entities/channels';\nimport {getUser} from 'mattermost-redux/selectors/entities/users';\nimport {getTeamByName, getTeamMemberships} from 'mattermost-redux/selectors/entities/teams';\n\nimport {Constants} from 'utils/constants.jsx';\n\nimport PostView from './post_view.jsx';\n\nexport const isChannelLoading = (params, channel, team, teammate, teamMemberships) => {\n    if (params.postid) {\n        return false;\n    }\n\n    if (channel && team) {\n        if (channel.type !== Constants.DM_CHANNEL && channel.name !== params.identifier) {\n            return true;\n        } else if (channel.type === Constants.DM_CHANNEL && teammate && params.identifier !== `@${teammate.username}`) {\n            return true;\n        }\n\n        const teamId = team.id;\n        if ((channel.team_id && channel.team_id !== teamId) || (teamMemberships && !teamMemberships[teamId])) {\n            return true;\n        }\n\n        return false;\n    }\n\n    return true;\n};\n\nfunction makeMapStateToProps() {\n    return function mapStateToProps(state, ownProps) {\n        const team = getTeamByName(state, ownProps.match.params.team);\n        let teammate;\n\n        const channel = getChannel(state, ownProps.channelId);\n        let lastViewedAt = state.views.channel.lastChannelViewTime[ownProps.channelId];\n        if (channel) {\n            if (channel.type === Constants.DM_CHANNEL && channel.teammate_id) {\n                teammate = getUser(state, channel.teammate_id);\n            }\n            lastViewedAt = channel.last_post_at ? lastViewedAt : channel.last_post_at;\n        }\n\n        const teamMemberships = getTeamMemberships(state);\n        const channelLoading = isChannelLoading(ownProps.match.params, channel, team, teammate, teamMemberships);\n\n        return {\n            lastViewedAt,\n            channelLoading,\n            channel,\n        };\n    };\n}\n\nexport default withRouter(connect(makeMapStateToProps)(PostView));\n","// Copyright (c) 2015-present Mattermost, Inc. All Rights Reserved.\n// See LICENSE.txt for license information.\n\nimport React from 'react';\nimport PropTypes from 'prop-types';\nimport {FormattedMessage, intlShape} from 'react-intl';\nimport {Link} from 'react-router-dom';\n\nimport ChannelHeader from 'components/channel_header';\nimport PostView from 'components/post_view';\nimport FormattedMarkdownMessage from 'components/formatted_markdown_message';\n\nexport default class PermalinkView extends React.PureComponent {\n    static propTypes = {\n        channelId: PropTypes.string,\n        channelName: PropTypes.string,\n        channelIsArchived: PropTypes.bool,\n\n        /*\n         * Object from react-router\n         */\n        match: PropTypes.shape({\n            params: PropTypes.shape({\n                postid: PropTypes.string.isRequired,\n            }).isRequired,\n        }).isRequired,\n        returnTo: PropTypes.string.isRequired,\n        teamName: PropTypes.string,\n        actions: PropTypes.shape({\n            focusPost: PropTypes.func.isRequired,\n        }).isRequired,\n    };\n\n    static contextTypes = {\n        intl: intlShape.isRequired,\n    };\n\n    constructor(props) {\n        super(props);\n        this.state = {valid: false};\n    }\n\n    componentDidMount() {\n        this.doPermalinkEvent(this.props);\n        document.body.classList.add('app__body');\n    }\n\n    componentWillUnmount() {\n        document.body.classList.remove('app__body');\n    }\n\n    UNSAFE_componentWillReceiveProps(nextProps) { // eslint-disable-line camelcase\n        if (this.props.match.params.postid !== nextProps.match.params.postid) {\n            this.doPermalinkEvent(nextProps);\n        }\n    }\n\n    doPermalinkEvent = async (props) => {\n        this.setState({valid: false});\n        const postId = props.match.params.postid;\n        await this.props.actions.focusPost(postId, this.props.returnTo);\n        this.setState({valid: true});\n    }\n\n    isStateValid = () => {\n        return this.state.valid && this.props.channelId && this.props.teamName;\n    }\n\n    render() {\n        const {\n            channelId,\n            channelName,\n            channelIsArchived,\n            match,\n            teamName,\n        } = this.props;\n        const {formatMessage} = this.context.intl;\n\n        if (!this.isStateValid()) {\n            return (\n                <div\n                    id='app-content'\n                    className='app__content'\n                />\n            );\n        }\n\n        return (\n            <div\n                id='app-content'\n                className='app__content'\n            >\n                <ChannelHeader\n                    channelId={channelId}\n                />\n                <PostView\n                    channelId={channelId}\n                    focusedPostId={match.params.postid}\n                />\n                <div id='archive-link-home'>\n                    <Link\n                        to={'/' + teamName + '/channels/' + channelName}\n                    >\n                        {channelIsArchived &&\n                            <FormattedMarkdownMessage\n                                id='center_panel.permalink.archivedChannel'\n                                defaultMessage='You are viewing an **archived channel**. '\n                            />\n                        }\n                        <FormattedMessage\n                            id='center_panel.recent'\n                            defaultMessage='Click here to jump to recent messages. '\n                        />\n                        <i\n                            className='fa fa-arrow-down'\n                            title={formatMessage({id: 'center_panel.recent.icon', defaultMessage: 'Jump to recent messages Icon'})}\n                        />\n                    </Link>\n                </div>\n            </div>\n        );\n    }\n}\n","// Copyright (c) 2015-present Mattermost, Inc. All Rights Reserved.\n// See LICENSE.txt for license information.\n\nimport {connect} from 'react-redux';\nimport {bindActionCreators} from 'redux';\n\nimport {getCurrentChannel} from 'mattermost-redux/selectors/entities/channels';\nimport {getCurrentTeam} from 'mattermost-redux/selectors/entities/teams';\n\nimport {focusPost} from './actions';\nimport PermalinkView from './permalink_view.jsx';\n\nfunction mapStateToProps(state) {\n    const team = getCurrentTeam(state);\n    const channel = getCurrentChannel(state);\n    let channelId = '';\n    let channelName = '';\n    let channelIsArchived;\n    if (channel) {\n        channelId = channel.id;\n        channelName = channel.name;\n        channelIsArchived = channel.delete_at !== 0;\n    }\n\n    let teamName = '';\n    if (team) {\n        teamName = team.name;\n    }\n\n    return {\n        channelId,\n        channelName,\n        teamName,\n        channelIsArchived,\n    };\n}\n\nfunction mapDispatchToProps(dispatch) {\n    return {\n        actions: bindActionCreators({\n            focusPost,\n        }, dispatch),\n    };\n}\n\nexport default connect(mapStateToProps, mapDispatchToProps)(PermalinkView);\n","// Copyright (c) 2015-present Mattermost, Inc. All Rights Reserved.\n// See LICENSE.txt for license information.\n\nimport React from 'react';\nimport PropTypes from 'prop-types';\n\nexport default class NotifyCounts extends React.PureComponent {\n    static propTypes = {\n        mentionCount: PropTypes.number.isRequired,\n        messageCount: PropTypes.number.isRequired,\n    }\n    render() {\n        if (this.props.mentionCount) {\n            return <span className='badge badge-notify'>{this.props.mentionCount}</span>;\n        } else if (this.props.messageCount) {\n            return <span className='badge badge-notify'>{'•'}</span>;\n        }\n        return null;\n    }\n}\n","// Copyright (c) 2015-present Mattermost, Inc. All Rights Reserved.\n// See LICENSE.txt for license information.\n\nimport {connect} from 'react-redux';\n\nimport {getUnreadsInCurrentTeam} from 'mattermost-redux/selectors/entities/channels';\n\nimport NotifyCounts from './notify_counts.jsx';\n\nfunction mapStateToProps(state) {\n    const {mentionCount, messageCount} = getUnreadsInCurrentTeam(state);\n    return {\n        mentionCount,\n        messageCount,\n    };\n}\n\nexport default connect(mapStateToProps)(NotifyCounts);\n","// Copyright (c) 2015-present Mattermost, Inc. All Rights Reserved.\n// See LICENSE.txt for license information.\n\nimport React from 'react';\nimport PropTypes from 'prop-types';\nimport {FormattedMessage} from 'react-intl';\n\nimport NotifyCounts from 'components/notify_counts';\nimport MenuIcon from 'components/svg/menu_icon';\n\nconst CollapseLhsButton = ({\n    actions: {\n        toggleLhs,\n    },\n}) => (\n    <button\n        key='navbar-toggle-sidebar'\n        type='button'\n        className='navbar-toggle'\n        data-toggle='collapse'\n        data-target='#sidebar-nav'\n        onClick={toggleLhs}\n    >\n        <span className='sr-only'>\n            <FormattedMessage\n                id='navbar.toggle2'\n                defaultMessage='Toggle sidebar'\n            />\n        </span>\n        <MenuIcon className='style--none icon icon__menu icon--sidebarHeaderTextColor'/>\n        <NotifyCounts/>\n    </button>\n);\n\nCollapseLhsButton.propTypes = {\n    actions: PropTypes.shape({\n        toggleLhs: PropTypes.func.isRequired,\n    }).isRequired,\n};\n\nexport default CollapseLhsButton;\n","// Copyright (c) 2015-present Mattermost, Inc. All Rights Reserved.\n// See LICENSE.txt for license information.\n\nimport {bindActionCreators} from 'redux';\nimport {connect} from 'react-redux';\n\nimport {toggle as toggleLhs} from 'actions/views/lhs';\n\nimport CollapseLhsButton from './collapse_lhs_button';\n\nconst mapDispatchToProps = (dispatch) => ({\n    actions: bindActionCreators({\n        toggleLhs,\n    }, dispatch),\n});\n\nexport default connect(null, mapDispatchToProps)(CollapseLhsButton);\n\n","// Copyright (c) 2015-present Mattermost, Inc. All Rights Reserved.\n// See LICENSE.txt for license information.\n\nimport React from 'react';\nimport PropTypes from 'prop-types';\n\nimport MenuIcon from 'components/svg/menu_icon';\n\nconst CollapseRhsButton = ({\n    actions: {\n        toggleRhsMenu,\n    },\n}) => (\n    <button\n        key='navbar-toggle-menu'\n        type='button'\n        className='navbar-toggle navbar-right__icon menu-toggle pull-right'\n        data-toggle='collapse'\n        data-target='#sidebar-nav'\n        onClick={toggleRhsMenu}\n    >\n        <MenuIcon/>\n    </button>\n);\n\nCollapseRhsButton.propTypes = {\n    actions: PropTypes.shape({\n        toggleRhsMenu: PropTypes.func.isRequired,\n    }).isRequired,\n};\n\nexport default CollapseRhsButton;\n","// Copyright (c) 2015-present Mattermost, Inc. All Rights Reserved.\n// See LICENSE.txt for license information.\n\nimport {bindActionCreators} from 'redux';\nimport {connect} from 'react-redux';\n\nimport {toggleMenu as toggleRhsMenu} from 'actions/views/rhs';\n\nimport CollapseRhsButton from './collapse_rhs_button';\n\nconst mapDispatchToProps = (dispatch) => ({\n    actions: bindActionCreators({\n        toggleRhsMenu,\n    }, dispatch),\n});\n\nexport default connect(null, mapDispatchToProps)(CollapseRhsButton);\n","// Copyright (c) 2015-present Mattermost, Inc. All Rights Reserved.\n// See LICENSE.txt for license information.\n\nimport React from 'react';\nimport {FormattedMessage} from 'react-intl';\n\nexport default class InfoIcon extends React.PureComponent {\n    render() {\n        return (\n            <span {...this.props}>\n                <FormattedMessage\n                    id='generic_icons.info'\n                    defaultMessage='Info Icon'\n                >\n                    {(ariaLabel) => (\n                        <svg\n                            width='18px'\n                            height='18px'\n                            viewBox='0 0 22 22'\n                            role='icon'\n                            aria-label={ariaLabel}\n                        >\n                            <g\n                                stroke='none'\n                                strokeWidth='1'\n                                fill='inherit'\n                                fillRule='evenodd'\n                            >\n                                <g\n                                    transform='translate(-388.000000, -18.000000)'\n                                    fill='inherit'\n                                >\n                                    <g>\n                                        <g transform='translate(381.000000, 11.000000)'>\n                                            <g transform='translate(7.000000, 7.000000)'>\n                                                <path d='M11,22 C4.92486775,22 0,17.0751322 0,11 C0,4.92486775 4.92486775,0 11,0 C17.0751322,0 22,4.92486775 22,11 C22,17.0751322 17.0751322,22 11,22 Z M11,20.7924685 C16.408231,20.7924685 20.7924685,16.408231 20.7924685,11 C20.7924685,5.59176898 16.408231,1.20753149 11,1.20753149 C5.59176898,1.20753149 1.20753149,5.59176898 1.20753149,11 C1.20753149,16.408231 5.59176898,20.7924685 11,20.7924685 Z M10.1572266,16.0625 L10.1572266,8.69335938 L11.3466797,8.69335938 L11.3466797,16.0625 L10.1572266,16.0625 Z M10.7519531,7.50390625 C10.3417969,7.50390625 10,7.16210938 10,6.75195312 C10,6.33496094 10.3417969,6 10.7519531,6 C11.1689453,6 11.5039062,6.33496094 11.5039062,6.75195312 C11.5039062,7.16210938 11.1689453,7.50390625 10.7519531,7.50390625 Z'/>\n                                            </g>\n                                        </g>\n                                    </g>\n                                </g>\n                            </g>\n                        </svg>\n                    )}\n                </FormattedMessage>\n            </span>\n        );\n    }\n}\n","// Copyright (c) 2015-present Mattermost, Inc. All Rights Reserved.\n// See LICENSE.txt for license information.\n\nimport PropTypes from 'prop-types';\nimport React from 'react';\nimport {OverlayTrigger, Popover} from 'react-bootstrap';\nimport {FormattedMessage} from 'react-intl';\n\nimport {ModalIdentifiers} from 'utils/constants';\n\nimport EditChannelHeaderModal from 'components/edit_channel_header_modal';\nimport Markdown from 'components/markdown';\nimport InfoIcon from 'components/svg/info_icon';\n\nconst headerMarkdownOptions = {mentionHighlight: false};\n\nexport default class NavbarInfoButton extends React.PureComponent {\n    static propTypes = {\n        channel: PropTypes.object.isRequired,\n        isReadOnly: PropTypes.bool.isRequired,\n        actions: PropTypes.shape({\n            openModal: PropTypes.func.isRequired,\n        }).isRequired,\n    };\n\n    showEditChannelHeaderModal = () => {\n        if (this.refs.headerOverlay) {\n            this.refs.headerOverlay.hide();\n        }\n\n        const {actions, channel} = this.props;\n        const modalData = {\n            modalId: ModalIdentifiers.EDIT_CHANNEL_HEADER,\n            dialogType: EditChannelHeaderModal,\n            dialogProps: {channel},\n        };\n\n        actions.openModal(modalData);\n    }\n\n    hide = () => {\n        if (this.refs.headerOverlay) {\n            this.refs.headerOverlay.hide();\n        }\n    }\n\n    render() {\n        const {channel, isReadOnly} = this.props;\n\n        let popoverContent = null;\n        if (channel.header) {\n            popoverContent = (\n                <Markdown\n                    message={channel.header}\n                    options={headerMarkdownOptions}\n                />\n            );\n        } else {\n            let addOne;\n            if (!isReadOnly) {\n                const link = (\n                    <a\n                        href='#'\n                        onClick={this.showEditChannelHeaderModal}\n                    >\n                        <FormattedMessage\n                            id='navbar.click'\n                            defaultMessage='Click here'\n                        />\n                    </a>\n                );\n                addOne = (\n                    <React.Fragment>\n                        <br/>\n                        <FormattedMessage\n                            id='navbar.clickToAddHeader'\n                            defaultMessage='{clickHere} to add one.'\n                            values={{clickHere: link}}\n                        />\n                    </React.Fragment>\n                );\n            }\n\n            popoverContent = (\n                <div>\n                    <FormattedMessage\n                        id='navbar.noHeader'\n                        defaultMessage='No channel header yet.'\n                    />\n                    {addOne}\n                </div>\n            );\n        }\n\n        const popover = (\n            <Popover\n                bsStyle='info'\n                placement='bottom'\n                className='navbar__popover'\n                id='header-popover'\n            >\n                {popoverContent}\n                <div\n                    className='close visible-xs-block'\n                    onClick={this.hide}\n                >\n                    {'×'}\n                </div>\n            </Popover>\n        );\n\n        return (\n            <OverlayTrigger\n                ref='headerOverlay'\n                trigger='click'\n                placement='bottom'\n                overlay={popover}\n                className='description'\n                rootClose={true}\n            >\n                <button className='navbar-toggle navbar-right__icon navbar-info-button pull-right'>\n                    <InfoIcon\n                        className='icon icon__info'\n                        aria-hidden='true'\n                    />\n                </button>\n            </OverlayTrigger>\n        );\n    }\n}\n","// Copyright (c) 2015-present Mattermost, Inc. All Rights Reserved.\n// See LICENSE.txt for license information.\n\nimport {connect} from 'react-redux';\nimport {bindActionCreators} from 'redux';\n\nimport {openModal} from 'actions/views/modals';\n\nimport ChannelInfoButton from './channel_info_button';\n\nfunction mapDispatchToProps(dispatch) {\n    return {\n        actions: bindActionCreators({\n            openModal,\n        }, dispatch),\n    };\n}\n\nexport default connect(null, mapDispatchToProps)(ChannelInfoButton);\n","// Copyright (c) 2015-present Mattermost, Inc. All Rights Reserved.\n// See LICENSE.txt for license information.\n\nimport React from 'react';\nimport PropTypes from 'prop-types';\n\nimport SearchIcon from 'components/svg/search_icon';\nimport {RHSStates} from 'utils/constants';\n\nexport default class ShowSearchButton extends React.PureComponent {\n    static propTypes = {\n        actions: PropTypes.shape({\n            updateRhsState: PropTypes.func.isRequired,\n        }).isRequired,\n    }\n\n    handleClick = () => {\n        this.props.actions.updateRhsState(RHSStates.SEARCH);\n    }\n\n    render() {\n        return (\n            <button\n                type='button'\n                className='navbar-toggle navbar-right__icon navbar-search pull-right'\n                onClick={this.handleClick}\n            >\n                <SearchIcon\n                    className='icon icon__search'\n                    aria-hidden='true'\n                />\n            </button>\n        );\n    }\n}\n","// Copyright (c) 2015-present Mattermost, Inc. All Rights Reserved.\n// See LICENSE.txt for license information.\n\nimport {bindActionCreators} from 'redux';\nimport {connect} from 'react-redux';\n\nimport {updateRhsState} from 'actions/views/rhs';\n\nimport ShowSearchButton from './show_search_button';\n\nconst mapDispatchToProps = (dispatch) => ({\n    actions: bindActionCreators({\n        updateRhsState,\n    }, dispatch),\n});\n\nexport default connect(null, mapDispatchToProps)(ShowSearchButton);\n","// Copyright (c) 2015-present Mattermost, Inc. All Rights Reserved.\n// See LICENSE.txt for license information.\n\nimport React from 'react';\nimport PropTypes from 'prop-types';\n\nimport {NotificationLevels} from 'utils/constants';\n\nexport default class UnmuteChannelButton extends React.PureComponent {\n    static propTypes = {\n        user: PropTypes.shape({\n            id: PropTypes.string.isRequired,\n        }).isRequired,\n\n        channel: PropTypes.shape({\n            id: PropTypes.string.isRequired,\n        }).isRequired,\n\n        actions: PropTypes.shape({\n            updateChannelNotifyProps: PropTypes.func.isRequired,\n        }).isRequired,\n    };\n\n    handleClick = () => {\n        const {\n            user,\n            channel,\n            actions: {\n                updateChannelNotifyProps,\n            },\n        } = this.props;\n\n        updateChannelNotifyProps(user.id, channel.id, {mark_unread: NotificationLevels.ALL});\n    }\n\n    render() {\n        return (\n            <button\n                type='button'\n                className='navbar-toggle icon icon__mute'\n                onClick={this.handleClick}\n            >\n                <span className='fa fa-bell-slash-o icon'/>\n            </button>\n        );\n    }\n}\n","// Copyright (c) 2015-present Mattermost, Inc. All Rights Reserved.\n// See LICENSE.txt for license information.\n\nimport {bindActionCreators} from 'redux';\nimport {connect} from 'react-redux';\nimport {updateChannelNotifyProps} from 'mattermost-redux/actions/channels';\n\nimport UnmuteChannelButton from './unmute_channel_button';\n\nconst mapDispatchToProps = (dispatch) => ({\n    actions: bindActionCreators({\n        updateChannelNotifyProps,\n    }, dispatch),\n});\n\nexport default connect(null, mapDispatchToProps)(UnmuteChannelButton);\n","// Copyright (c) 2015-present Mattermost, Inc. All Rights Reserved.\n// See LICENSE.txt for license information.\n\nimport React from 'react';\nimport PropTypes from 'prop-types';\n\nimport {MobileChannelHeaderDropdown} from 'components/channel_header_dropdown';\nimport MobileChannelHeaderPlug from 'plugins/mobile_channel_header_plug';\n\nimport * as Utils from 'utils/utils';\n\nimport CollapseLhsButton from './collapse_lhs_button';\nimport CollapseRhsButton from './collapse_rhs_button';\nimport ChannelInfoButton from './channel_info_button';\nimport ShowSearchButton from './show_search_button';\nimport UnmuteChannelButton from './unmute_channel_button';\n\nexport default class ChannelHeaderMobile extends React.PureComponent {\n    static propTypes = {\n\n        /**\n         *\n         */\n        user: PropTypes.object.isRequired,\n\n        /**\n         * Object with info about current channel\n         */\n        channel: PropTypes.object,\n\n        /**\n         * Bool whether the current channel is read only\n         */\n        isReadOnly: PropTypes.bool,\n\n        /**\n         * Bool whether the current channel is muted\n         */\n        isMuted: PropTypes.bool,\n\n        /**\n         * Object with action creators\n         */\n        actions: PropTypes.shape({\n            closeLhs: PropTypes.func.isRequired,\n            closeRhs: PropTypes.func.isRequired,\n            closeRhsMenu: PropTypes.func.isRequired,\n        }).isRequired,\n    };\n\n    componentDidMount() {\n        document.querySelector('.inner-wrap').addEventListener('click', this.hideSidebars);\n    }\n\n    componentWillUnmount() {\n        document.querySelector('.inner-wrap').removeEventListener('click', this.hideSidebars);\n    }\n\n    hideSidebars = (e) => {\n        if (Utils.isMobile()) {\n            this.props.actions.closeRhs();\n\n            if (e.target.className !== 'navbar-toggle' && e.target.className !== 'icon-bar') {\n                this.props.actions.closeLhs();\n                this.props.actions.closeRhsMenu();\n            }\n        }\n    }\n\n    render() {\n        const {user, channel, isMuted} = this.props;\n\n        return (\n            <nav\n                id='navbar'\n                className='navbar navbar-default navbar-fixed-top'\n                role='navigation'\n            >\n                <div className='container-fluid theme'>\n                    <div className='navbar-header'>\n                        <CollapseLhsButton/>\n                        {channel && (\n                            <React.Fragment>\n                                <div className='navbar-brand'>\n                                    <MobileChannelHeaderDropdown/>\n                                    {isMuted && (\n                                        <UnmuteChannelButton\n                                            user={user}\n                                            channel={channel}\n                                        />\n                                    )}\n                                </div>\n                                <ChannelInfoButton\n                                    ref='headerOverlay'\n                                    channel={channel}\n                                    isReadOnly={this.props.isReadOnly}\n                                />\n                                <ShowSearchButton/>\n                                <MobileChannelHeaderPlug\n                                    channel={channel}\n                                    isDropdown={false}\n                                />\n                            </React.Fragment>\n                        )}\n                        <CollapseRhsButton/>\n                    </div>\n                </div>\n            </nav>\n        );\n    }\n}\n","// Copyright (c) 2015-present Mattermost, Inc. All Rights Reserved.\n// See LICENSE.txt for license information.\n\nimport {connect} from 'react-redux';\nimport {bindActionCreators} from 'redux';\nimport {createSelector} from 'reselect';\nimport {getCurrentUser} from 'mattermost-redux/selectors/entities/users';\nimport {\n    getCurrentChannel,\n    getMyCurrentChannelMembership,\n    isCurrentChannelReadOnly,\n} from 'mattermost-redux/selectors/entities/channels';\nimport {isChannelMuted} from 'mattermost-redux/utils/channel_utils';\n\nimport {\n    closeRightHandSide as closeRhs,\n    closeMenu as closeRhsMenu,\n} from 'actions/views/rhs';\nimport {close as closeLhs} from 'actions/views/lhs';\n\nimport ChannelHeaderMobile from './channel_header_mobile';\n\nconst isCurrentChannelMuted = createSelector(\n    getMyCurrentChannelMembership,\n    (membership) => isChannelMuted(membership),\n);\n\nconst mapStateToProps = (state) => ({\n    user: getCurrentUser(state),\n    channel: getCurrentChannel(state),\n    isMuted: isCurrentChannelMuted(state),\n    isReadOnly: isCurrentChannelReadOnly(state),\n});\n\nconst mapDispatchToProps = (dispatch) => ({\n    actions: bindActionCreators({\n        closeLhs,\n        closeRhs,\n        closeRhsMenu,\n    }, dispatch),\n});\n\nexport default connect(mapStateToProps, mapDispatchToProps)(ChannelHeaderMobile);\n","// Copyright (c) 2015-present Mattermost, Inc. All Rights Reserved.\n// See LICENSE.txt for license information.\n\nimport {joinChannel, getChannelByNameAndTeamName, markGroupChannelOpen} from 'mattermost-redux/actions/channels';\nimport {getUser, getUserByUsername, getUserByEmail} from 'mattermost-redux/actions/users';\nimport {getTeamByName} from 'mattermost-redux/selectors/entities/teams';\nimport {getCurrentUserId, getUserByUsername as selectUserByUsername, getUser as selectUser, getUserByEmail as selectUserByEmail} from 'mattermost-redux/selectors/entities/users';\nimport {getChannelByName, getOtherChannels, getChannel, getChannelsNameMapInTeam, getRedirectChannelNameForTeam} from 'mattermost-redux/selectors/entities/channels';\n\nimport {Constants} from 'utils/constants.jsx';\nimport {openDirectChannelToUserId} from 'actions/channel_actions';\nimport * as GlobalActions from 'actions/global_actions.jsx';\nimport * as Utils from 'utils/utils.jsx';\n\nconst LENGTH_OF_ID = 26;\nconst LENGTH_OF_GROUP_ID = 40;\nconst LENGTH_OF_USER_ID_PAIR = 54;\n\nexport function onChannelByIdentifierEnter({match, history}) {\n    return (dispatch, getState) => {\n        const state = getState();\n        const {path, identifier, team} = match.params;\n\n        if (!identifier) {\n            return;\n        }\n\n        const teamObj = getTeamByName(state, team);\n        if (!teamObj) {\n            return;\n        }\n\n        if (path === 'channels') {\n            if (identifier.length === LENGTH_OF_ID) {\n            // It's hard to tell an ID apart from a channel name of the same length, so check first if\n            // the identifier matches a channel that we have\n                const channelsByName = getChannelByName(state, identifier);\n                const moreChannelsByName = getOtherChannels(state).find((chan) => chan.name === identifier);\n                if (channelsByName || moreChannelsByName) {\n                    dispatch(goToChannelByChannelName(match, history));\n                } else {\n                    dispatch(goToChannelByChannelId(match, history));\n                }\n            } else if (identifier.length === LENGTH_OF_GROUP_ID) {\n                dispatch(goToGroupChannelByGroupId(match, history));\n            } else if (identifier.length === LENGTH_OF_USER_ID_PAIR) {\n                dispatch(goToDirectChannelByUserIds(match, history));\n            } else {\n                dispatch(goToChannelByChannelName(match, history));\n            }\n        } else if (path === 'messages') {\n            if (identifier.indexOf('@') === 0) {\n                dispatch(goToDirectChannelByUsername(match, history));\n            } else if (identifier.indexOf('@') > 0) {\n                dispatch(goToDirectChannelByEmail(match, history));\n            } else if (identifier.length === LENGTH_OF_ID) {\n                dispatch(goToDirectChannelByUserId(match, history, identifier));\n            } else if (identifier.length === LENGTH_OF_GROUP_ID) {\n                dispatch(goToGroupChannelByGroupId(match, history));\n            } else {\n                handleError(match, history, getRedirectChannelNameForTeam(state, teamObj.id));\n            }\n        }\n    };\n}\n\nexport function goToChannelByChannelId(match, history) {\n    return async (dispatch, getState) => {\n        const state = getState();\n        const {team, identifier} = match.params;\n        const channelId = identifier.toLowerCase();\n\n        let channel = getChannel(state, channelId);\n        const member = state.entities.channels.myMembers[channelId];\n        const teamObj = getTeamByName(state, team);\n        if (!channel || !member) {\n            const {data, error} = await dispatch(joinChannel(getCurrentUserId(state), teamObj.id, channelId, null));\n            if (error) {\n                handleChannelJoinError(match, history, getRedirectChannelNameForTeam(state, teamObj.id));\n                return;\n            }\n            channel = data.channel;\n        }\n\n        if (channel.type === Constants.DM_CHANNEL) {\n            dispatch(goToDirectChannelByUserId(match, history, Utils.getUserIdFromChannelId(channel.name)));\n        } else if (channel.type === Constants.GM_CHANNEL) {\n            history.replace(`/${team}/messages/${channel.name}`);\n        } else {\n            history.replace(`/${team}/channels/${channel.name}`);\n        }\n    };\n}\n\nexport function goToChannelByChannelName(match, history) {\n    return async (dispatch, getState) => {\n        const state = getState();\n        const {team, identifier} = match.params;\n        const channelName = identifier.toLowerCase();\n\n        const teamObj = getTeamByName(state, team);\n        if (!teamObj) {\n            return;\n        }\n\n        let channel = getChannelsNameMapInTeam(state, teamObj.id)[channelName];\n        let member;\n        if (channel) {\n            member = state.entities.channels.myMembers[channel.id];\n        }\n\n        if (!channel || !member) {\n            const {data, error: joinError} = await dispatch(joinChannel(getCurrentUserId(state), teamObj.id, null, channelName));\n            if (joinError) {\n                const {data: data2, error: getChannelError} = await dispatch(getChannelByNameAndTeamName(team, channelName, true));\n                if (getChannelError || data2.delete_at === 0) {\n                    handleChannelJoinError(match, history, getRedirectChannelNameForTeam(state, teamObj.id));\n                    return;\n                }\n                channel = data2;\n            } else {\n                channel = data.channel;\n            }\n        }\n\n        if (channel.type === Constants.DM_CHANNEL) {\n            dispatch(goToDirectChannelByUserIds(match, history));\n        } else if (channel.type === Constants.GM_CHANNEL) {\n            history.replace(`/${team}/messages/${channel.name}`);\n        } else {\n            doChannelChange(channel);\n        }\n    };\n}\n\nfunction goToDirectChannelByUsername(match, history) {\n    return async (dispatch, getState) => {\n        const state = getState();\n        const {team, identifier} = match.params;\n        const username = identifier.slice(1, identifier.length).toLowerCase();\n        const teamObj = getTeamByName(state, team);\n\n        let user = selectUserByUsername(state, username);\n        if (!user) {\n            const {data, error} = await dispatch(getUserByUsername(username));\n            if (error) {\n                handleError(match, history, getRedirectChannelNameForTeam(state, teamObj.id));\n                return;\n            }\n            user = data;\n        }\n\n        const {error, data} = await dispatch(openDirectChannelToUserId(user.id));\n        if (error) {\n            handleError(match, history, getRedirectChannelNameForTeam(state, teamObj.id));\n            return;\n        }\n\n        doChannelChange(data);\n    };\n}\n\nexport function goToDirectChannelByUserId(match, history, userId) {\n    return async (dispatch, getState) => {\n        const state = getState();\n        const {team} = match.params;\n        const teamObj = getTeamByName(state, team);\n\n        let user = selectUser(state, userId);\n        if (!user) {\n            const {data, error} = await dispatch(getUser(userId));\n            if (error) {\n                handleError(match, history, getRedirectChannelNameForTeam(state, teamObj.id));\n                return;\n            }\n            user = data;\n        }\n\n        history.replace(`/${team}/messages/@${user.username}`);\n    };\n}\n\nexport function goToDirectChannelByUserIds(match, history) {\n    return async (dispatch, getState) => {\n        const state = getState();\n        const {team, identifier} = match.params;\n        const userId = Utils.getUserIdFromChannelId(identifier.toLowerCase(), getCurrentUserId(getState()));\n        const teamObj = getTeamByName(state, team);\n\n        let user = selectUser(state, userId);\n        if (!user) {\n            const {data, error} = await dispatch(getUser(userId));\n            if (error) {\n                handleError(match, history, getRedirectChannelNameForTeam(state, teamObj.id));\n                return;\n            }\n            user = data;\n        }\n\n        history.replace(`/${team}/messages/@${user.username}`);\n    };\n}\n\nexport function goToDirectChannelByEmail(match, history) {\n    return async (dispatch, getState) => {\n        const state = getState();\n        const {team, identifier} = match.params;\n        const email = identifier.toLowerCase();\n        const teamObj = getTeamByName(state, team);\n\n        let user = selectUserByEmail(state, email);\n        if (!user) {\n            const {data, error} = await dispatch(getUserByEmail(email));\n            if (error) {\n                handleError(match, history, getRedirectChannelNameForTeam(state, teamObj.id));\n                return;\n            }\n            user = data;\n        }\n\n        history.replace(`/${team}/messages/@${user.username}`);\n    };\n}\n\nfunction goToGroupChannelByGroupId(match, history) {\n    return async (dispatch, getState) => {\n        const state = getState();\n        const {identifier, team} = match.params;\n        const groupId = identifier.toLowerCase();\n\n        history.replace(match.url.replace('/channels/', '/messages/'));\n\n        let channel = getChannelByName(state, groupId);\n        const teamObj = getTeamByName(state, team);\n        if (!channel) {\n            const {data, error} = await dispatch(joinChannel(getCurrentUserId(state), teamObj.id, null, groupId));\n            if (error) {\n                handleError(match, history, getRedirectChannelNameForTeam(state, teamObj.id));\n                return;\n            }\n            channel = data.channel;\n        }\n\n        dispatch(markGroupChannelOpen(channel.id));\n\n        doChannelChange(channel);\n    };\n}\n\nfunction doChannelChange(channel) {\n    GlobalActions.emitChannelClickEvent(channel);\n}\n\nfunction handleError(match, history, defaultChannel) {\n    const {team} = match.params;\n    history.push(team ? `/${team}/channels/${defaultChannel}` : '/');\n}\n\nfunction handleChannelJoinError(match, history, defaultChannel) {\n    const {team} = match.params;\n    history.push(team ? `/error?type=channel_not_found&returnTo=/${team}/channels/${defaultChannel}` : '/');\n}\n","// Copyright (c) 2015-present Mattermost, Inc. All Rights Reserved.\n// See LICENSE.txt for license information.\n\nimport hoistStatics from 'hoist-non-react-statics';\nimport React from 'react';\n\n/**\n * Allows two animation frames to complete to allow other components to update\n * and re-render before mounting and rendering an expensive `WrappedComponent`.\n * If provided, `PreRenderComponent` will be rendered instead of null when not\n * rendering the `Wrapped Component`.\n *\n * Based on this Twitter built component\n * https://gist.github.com/paularmstrong/cc2ead7e2a0dec37d8b2096fc8d85759#file-defercomponentrender-js\n */\nexport default function deferComponentRender(WrappedComponent, PreRenderComponent = null) {\n    class DeferredRenderWrapper extends React.Component {\n        constructor(props, context) {\n            super(props, context);\n\n            this.state = {\n                shouldRender: false,\n            };\n        }\n\n        componentDidMount() {\n            window.requestAnimationFrame(() => {\n                window.requestAnimationFrame(() => this.setState({shouldRender: true}));\n            });\n        }\n\n        render() {\n            return this.state.shouldRender ? <WrappedComponent {...this.props}/> : PreRenderComponent;\n        }\n    }\n\n    return hoistStatics(DeferredRenderWrapper, WrappedComponent);\n}\n","// Copyright (c) 2015-present Mattermost, Inc. All Rights Reserved.\n// See LICENSE.txt for license information.\n\nimport PropTypes from 'prop-types';\nimport React from 'react';\nimport {FormattedMessage, intlShape} from 'react-intl';\n\nimport {Posts} from 'mattermost-redux/constants';\nimport {sortFileInfos} from 'mattermost-redux/utils/file_utils';\n\nimport * as GlobalActions from 'actions/global_actions.jsx';\nimport Constants, {StoragePrefixes, ModalIdentifiers} from 'utils/constants.jsx';\nimport {\n    containsAtChannel,\n    postMessageOnKeyPress,\n    shouldFocusMainTextbox,\n    isErrorInvalidSlashCommand,\n} from 'utils/post_utils.jsx';\nimport {getTable, formatMarkdownTableMessage} from 'utils/paste.jsx';\nimport * as UserAgent from 'utils/user_agent.jsx';\nimport * as Utils from 'utils/utils.jsx';\n\nimport ConfirmModal from 'components/confirm_modal.jsx';\nimport EditChannelHeaderModal from 'components/edit_channel_header_modal';\nimport EditChannelPurposeModal from 'components/edit_channel_purpose_modal';\nimport EmojiPickerOverlay from 'components/emoji_picker/emoji_picker_overlay.jsx';\nimport FilePreview from 'components/file_preview';\nimport FileUpload from 'components/file_upload';\nimport MsgTyping from 'components/msg_typing';\nimport PostDeletedModal from 'components/post_deleted_modal.jsx';\nimport ResetStatusModal from 'components/reset_status_modal';\nimport EmojiIcon from 'components/svg/emoji_icon';\nimport Textbox from 'components/textbox';\nimport TextboxLinks from 'components/textbox/textbox_links.jsx';\nimport TutorialTip from 'components/tutorial/tutorial_tip';\n\nimport FormattedMarkdownMessage from 'components/formatted_markdown_message.jsx';\nimport MessageSubmitError from 'components/message_submit_error';\n\nconst KeyCodes = Constants.KeyCodes;\n\n// Temporary fix for IE-11, see MM-13423\nfunction trimRight(str) {\n    if (String.prototype.trimRight) {\n        return str.trimRight();\n    }\n\n    return str.replace(/\\s*$/, '');\n}\n\nexport default class CreatePost extends React.Component {\n    static propTypes = {\n\n        /**\n         *  ref passed from channelView for EmojiPickerOverlay\n         */\n        getChannelView: PropTypes.func,\n\n        /**\n         *  Data used in notifying user for @all and @channel\n         */\n        currentChannelMembersCount: PropTypes.number,\n\n        /**\n         *  Data used in multiple places of the component\n         */\n        currentChannel: PropTypes.object,\n\n        /**\n         *  Data used in executing commands for channel actions passed down to client4 function\n         */\n        currentTeamId: PropTypes.string,\n\n        /**\n         *  Data used for posting message\n         */\n        currentUserId: PropTypes.string,\n\n        /**\n         * Force message submission on CTRL/CMD + ENTER\n         */\n        codeBlockOnCtrlEnter: PropTypes.bool,\n\n        /**\n         *  Flag used for handling submit\n         */\n        ctrlSend: PropTypes.bool,\n\n        /**\n         *  Flag used for adding a class center to Postbox based on user pref\n         */\n        fullWidthTextBox: PropTypes.bool,\n\n        /**\n         *  Data used for deciding if tutorial tip is to be shown\n         */\n        showTutorialTip: PropTypes.bool.isRequired,\n\n        /**\n         *  Data used populating message state when triggered by shortcuts\n         */\n        messageInHistoryItem: PropTypes.string,\n\n        /**\n         *  Data used for populating message state from previous draft\n         */\n        draft: PropTypes.shape({\n            message: PropTypes.string.isRequired,\n            uploadsInProgress: PropTypes.array.isRequired,\n            fileInfos: PropTypes.array.isRequired,\n        }).isRequired,\n\n        /**\n         *  Data used dispatching handleViewAction\n         */\n        commentCountForPost: PropTypes.number,\n\n        /**\n         *  Data used dispatching handleViewAction ex: edit post\n         */\n        latestReplyablePostId: PropTypes.string,\n        locale: PropTypes.string.isRequired,\n\n        /**\n         *  Data used for calling edit of post\n         */\n        currentUsersLatestPost: PropTypes.object,\n\n        /**\n         *  Set if the channel is read only.\n         */\n        readOnlyChannel: PropTypes.bool,\n\n        /**\n         * Whether or not file upload is allowed.\n         */\n        canUploadFiles: PropTypes.bool.isRequired,\n\n        /**\n         * Whether to show the emoji picker.\n         */\n        enableEmojiPicker: PropTypes.bool.isRequired,\n\n        /**\n         * Whether to show the gif picker.\n         */\n        enableGifPicker: PropTypes.bool.isRequired,\n\n        /**\n         * Whether to check with the user before notifying the whole channel.\n         */\n        enableConfirmNotificationsToChannel: PropTypes.bool.isRequired,\n\n        /**\n         * The maximum length of a post\n         */\n        maxPostSize: PropTypes.number.isRequired,\n        emojiMap: PropTypes.object.isRequired,\n\n        /**\n         * If our connection is bad\n         */\n        badConnection: PropTypes.bool.isRequired,\n\n        /**\n         * Whether to display a confirmation modal to reset status.\n         */\n        userIsOutOfOffice: PropTypes.bool.isRequired,\n        rhsExpanded: PropTypes.bool.isRequired,\n\n        /**\n         * To check if the timezones are enable on the server.\n         */\n        isTimezoneEnabled: PropTypes.bool.isRequired,\n        actions: PropTypes.shape({\n\n            /**\n             *  func called after message submit.\n             */\n            addMessageIntoHistory: PropTypes.func.isRequired,\n\n            /**\n             *  func called for navigation through messages by Up arrow\n             */\n            moveHistoryIndexBack: PropTypes.func.isRequired,\n\n            /**\n             *  func called for navigation through messages by Down arrow\n             */\n            moveHistoryIndexForward: PropTypes.func.isRequired,\n\n            /**\n             *  func called for adding a reaction\n             */\n            addReaction: PropTypes.func.isRequired,\n\n            /**\n             *  func called for posting message\n             */\n            onSubmitPost: PropTypes.func.isRequired,\n\n            /**\n             *  func called for removing a reaction\n             */\n            removeReaction: PropTypes.func.isRequired,\n\n            /**\n             *  func called on load of component to clear drafts\n             */\n            clearDraftUploads: PropTypes.func.isRequired,\n\n            /**\n             * hooks called before a message is sent to the server\n             */\n            runMessageWillBePostedHooks: PropTypes.func.isRequired,\n\n            /**\n             * hooks called before a slash command is sent to the server\n             */\n            runSlashCommandWillBePostedHooks: PropTypes.func.isRequired,\n\n            /**\n             *  func called for setting drafts\n             */\n            setDraft: PropTypes.func.isRequired,\n\n            /**\n             *  func called for editing posts\n             */\n            setEditingPost: PropTypes.func.isRequired,\n\n            /**\n             *  func called for opening the last replayable post in the RHS\n             */\n            selectPostFromRightHandSideSearchByPostId: PropTypes.func.isRequired,\n\n            /**\n             * Function to open a modal\n             */\n            openModal: PropTypes.func.isRequired,\n\n            executeCommand: PropTypes.func.isRequired,\n\n            /**\n             * Function to get the users timezones in the channel\n             */\n            getChannelTimezones: PropTypes.func.isRequired,\n\n            scrollPostListToBottom: PropTypes.func.isRequired,\n        }).isRequired,\n    }\n\n    static contextTypes = {\n        intl: intlShape.isRequired,\n    };\n\n    static defaultProps = {\n        latestReplyablePostId: '',\n    }\n\n    constructor(props) {\n        super(props);\n        this.state = {\n            message: this.props.draft.message,\n            submitting: false,\n            showPostDeletedModal: false,\n            enableSendButton: false,\n            showEmojiPicker: false,\n            showConfirmModal: false,\n            channelTimezoneCount: 0,\n            showPreview: false,\n            uploadsProgressPercent: {},\n            renderScrollbar: false,\n            orientation: null,\n        };\n\n        this.lastBlurAt = 0;\n        this.lastChannelSwitchAt = 0;\n        this.draftsForChannel = {};\n    }\n\n    UNSAFE_componentWillMount() { // eslint-disable-line camelcase\n        const enableSendButton = this.handleEnableSendButton(this.state.message, this.props.draft.fileInfos);\n        this.props.actions.clearDraftUploads(StoragePrefixes.DRAFT, (key, value) => {\n            if (value) {\n                return {...value, uploadsInProgress: []};\n            }\n            return value;\n        });\n        this.onOrientationChange();\n\n        // wait to load these since they may have changed since the component was constructed (particularly in the case of skipping the tutorial)\n        this.setState({\n            enableSendButton,\n        });\n    }\n\n    componentDidMount() {\n        this.focusTextbox();\n        document.addEventListener('paste', this.pasteHandler);\n        document.addEventListener('keydown', this.documentKeyHandler);\n        this.setOrientationListeners();\n    }\n\n    UNSAFE_componentWillReceiveProps(nextProps) { // eslint-disable-line camelcase\n        if (nextProps.currentChannel.id !== this.props.currentChannel.id) {\n            const draft = nextProps.draft;\n            this.setState({\n                message: draft.message,\n                submitting: false,\n                serverError: null,\n                showPreview: false,\n            });\n        }\n    }\n\n    componentDidUpdate(prevProps, prevState) {\n        if (prevProps.currentChannel.id !== this.props.currentChannel.id) {\n            this.lastChannelSwitchAt = Date.now();\n            this.focusTextbox();\n        }\n\n        // Focus on textbox when emoji picker is closed\n        if (prevState.showEmojiPicker && !this.state.showEmojiPicker) {\n            this.focusTextbox();\n        }\n    }\n\n    componentWillUnmount() {\n        document.removeEventListener('paste', this.pasteHandler);\n        document.removeEventListener('keydown', this.documentKeyHandler);\n        this.removeOrientationListeners();\n    }\n\n    updatePreview = (newState) => {\n        this.setState({showPreview: newState});\n    }\n\n    setOrientationListeners = () => {\n        if ((window.screen.orientation) && ('onchange' in window.screen.orientation)) {\n            window.screen.orientation.addEventListener('change', this.onOrientationChange);\n        } else if ('onorientationchange' in window) {\n            window.addEventListener('orientationchange', this.onOrientationChange);\n        }\n    };\n\n    removeOrientationListeners = () => {\n        if ((window.screen.orientation) && ('onchange' in window.screen.orientation)) {\n            window.screen.orientation.removeEventListener('change', this.onOrientationChange);\n        } else if ('onorientationchange' in window) {\n            window.removeEventListener('orientationchange', this.onOrientationChange);\n        }\n    };\n\n    onOrientationChange = () => {\n        if (!UserAgent.isIosWeb()) {\n            return;\n        }\n\n        //Hide keyboard on iOS when orientation changes\n        const {orientation: prevOrientation} = this.state;\n        const LANDSCAPE_ANGLE = 90;\n        let orientation = 'portrait';\n        if (window.orientation) {\n            orientation = Math.abs(window.orientation) === LANDSCAPE_ANGLE ? 'landscape' : 'portrait';\n        }\n\n        if (window.screen.orientation) {\n            orientation = window.screen.orientation.type.split('-')[0];\n        }\n\n        this.setState({orientation});\n        if (prevOrientation && orientation !== prevOrientation && (document.activeElement || {}).id === 'post_textbox') {\n            this.refs.textbox.getWrappedInstance().blur();\n        }\n    }\n\n    handlePostError = (postError) => {\n        this.setState({postError});\n    }\n\n    toggleEmojiPicker = () => {\n        this.setState({showEmojiPicker: !this.state.showEmojiPicker});\n    }\n\n    hideEmojiPicker = () => {\n        this.handleEmojiClose();\n    }\n\n    doSubmit = async (e) => {\n        const channelId = this.props.currentChannel.id;\n        if (e) {\n            e.preventDefault();\n        }\n\n        if (this.props.draft.uploadsInProgress.length > 0 || this.state.submitting) {\n            return;\n        }\n\n        let message = this.state.message;\n        let ignoreSlash = false;\n        const serverError = this.state.serverError;\n\n        if (serverError && isErrorInvalidSlashCommand(serverError) && serverError.submittedMessage === message) {\n            message = serverError.submittedMessage;\n            ignoreSlash = true;\n        }\n\n        const post = {};\n        post.file_ids = [];\n        post.message = message;\n\n        if (post.message.trim().length === 0 && this.props.draft.fileInfos.length === 0) {\n            return;\n        }\n\n        if (this.state.postError) {\n            this.setState({errorClass: 'animation--highlight'});\n            setTimeout(() => {\n                this.setState({errorClass: null});\n            }, Constants.ANIMATION_TIMEOUT);\n            return;\n        }\n\n        this.props.actions.addMessageIntoHistory(this.state.message);\n\n        this.setState({submitting: true, serverError: null});\n\n        const isReaction = Utils.REACTION_PATTERN.exec(post.message);\n        if (post.message.indexOf('/') === 0 && !ignoreSlash) {\n            this.setState({message: '', postError: null, enableSendButton: false});\n            let args = {};\n            args.channel_id = channelId;\n            args.team_id = this.props.currentTeamId;\n\n            const hookResult = await this.props.actions.runSlashCommandWillBePostedHooks(post.message, args);\n\n            if (hookResult.error) {\n                this.setState({\n                    serverError: {\n                        ...hookResult.error,\n                        submittedMessage: post.message,\n                    },\n                    message: post.message,\n                });\n            } else if (!hookResult.data.message && !hookResult.data.args) {\n                // do nothing with an empty return from a hook\n            } else {\n                post.message = hookResult.data.message;\n                args = hookResult.data.args;\n\n                const {error} = await this.props.actions.executeCommand(post.message, args);\n\n                if (error) {\n                    if (error.sendMessage) {\n                        await this.sendMessage(post);\n                    } else {\n                        this.setState({\n                            serverError: {\n                                ...error,\n                                submittedMessage: post.message,\n                            },\n                            message: post.message,\n                        });\n                    }\n                }\n            }\n        } else if (isReaction && this.props.emojiMap.has(isReaction[2])) {\n            this.sendReaction(isReaction);\n\n            this.setState({message: ''});\n        } else {\n            const {error} = await this.sendMessage(post);\n\n            if (!error) {\n                this.setState({message: ''});\n            }\n        }\n\n        this.setState({\n            submitting: false,\n            postError: null,\n            enableSendButton: false,\n        });\n\n        this.props.actions.setDraft(StoragePrefixes.DRAFT + channelId, null);\n        this.draftsForChannel[channelId] = null;\n\n        const fasterThanHumanWillClick = 150;\n        const forceFocus = (Date.now() - this.lastBlurAt < fasterThanHumanWillClick);\n\n        this.focusTextbox(forceFocus);\n    }\n\n    handleNotifyAllConfirmation = (e) => {\n        this.hideNotifyAllModal();\n        this.doSubmit(e);\n    }\n\n    hideNotifyAllModal = () => {\n        this.setState({showConfirmModal: false});\n    }\n\n    showNotifyAllModal = () => {\n        this.setState({showConfirmModal: true});\n    }\n\n    getStatusFromSlashCommand = () => {\n        const {message} = this.state;\n        const tokens = message.split(' ');\n\n        if (tokens.length > 0) {\n            return tokens[0].substring(1);\n        }\n        return '';\n    };\n\n    isStatusSlashCommand = (command) => {\n        return command === 'online' || command === 'away' ||\n            command === 'dnd' || command === 'offline';\n    };\n\n    handleSubmit = async (e) => {\n        const {\n            currentChannel: updateChannel,\n            userIsOutOfOffice,\n        } = this.props;\n\n        const currentMembersCount = this.props.currentChannelMembersCount;\n        const notificationsToChannel = this.props.enableConfirmNotificationsToChannel;\n        if (notificationsToChannel &&\n            currentMembersCount > Constants.NOTIFY_ALL_MEMBERS &&\n            containsAtChannel(this.state.message)) {\n            if (this.props.isTimezoneEnabled) {\n                const {data} = await this.props.actions.getChannelTimezones(this.props.currentChannel.id);\n                if (data) {\n                    this.setState({channelTimezoneCount: data.length});\n                } else {\n                    this.setState({channelTimezoneCount: 0});\n                }\n            }\n            this.showNotifyAllModal();\n            return;\n        }\n\n        const status = this.getStatusFromSlashCommand();\n        if (userIsOutOfOffice && this.isStatusSlashCommand(status)) {\n            const resetStatusModalData = {\n                ModalId: ModalIdentifiers.RESET_STATUS,\n                dialogType: ResetStatusModal,\n                dialogProps: {newStatus: status},\n            };\n\n            this.props.actions.openModal(resetStatusModalData);\n\n            this.setState({message: ''});\n            return;\n        }\n\n        if (trimRight(this.state.message) === '/header') {\n            const editChannelHeaderModalData = {\n                modalId: ModalIdentifiers.EDIT_CHANNEL_HEADER,\n                dialogType: EditChannelHeaderModal,\n                dialogProps: {channel: updateChannel},\n            };\n\n            this.props.actions.openModal(editChannelHeaderModalData);\n\n            this.setState({message: ''});\n            return;\n        }\n\n        const isDirectOrGroup = ((updateChannel.type === Constants.DM_CHANNEL) || (updateChannel.type === Constants.GM_CHANNEL));\n        if (!isDirectOrGroup && trimRight(this.state.message) === '/purpose') {\n            const editChannelPurposeModalData = {\n                modalId: ModalIdentifiers.EDIT_CHANNEL_PURPOSE,\n                dialogType: EditChannelPurposeModal,\n                dialogProps: {channel: updateChannel},\n            };\n\n            this.props.actions.openModal(editChannelPurposeModalData);\n\n            this.setState({message: ''});\n            return;\n        }\n\n        if (!isDirectOrGroup && trimRight(this.state.message) === '/rename') {\n            GlobalActions.showChannelNameUpdateModal(updateChannel);\n            this.setState({message: ''});\n            return;\n        }\n\n        await this.doSubmit(e);\n    }\n\n    sendMessage = async (originalPost) => {\n        const {\n            actions,\n            currentChannel,\n            currentUserId,\n            draft,\n        } = this.props;\n\n        let post = originalPost;\n\n        post.channel_id = currentChannel.id;\n\n        const time = Utils.getTimestamp();\n        const userId = currentUserId;\n        post.pending_post_id = `${userId}:${time}`;\n        post.user_id = userId;\n        post.create_at = time;\n        post.parent_id = this.state.parentId;\n        post.metadata = {};\n        post.props = {};\n        const hookResult = await actions.runMessageWillBePostedHooks(post);\n\n        if (hookResult.error) {\n            this.setState({\n                serverError: hookResult.error,\n                submitting: false,\n            });\n\n            return hookResult;\n        }\n\n        post = hookResult.data;\n\n        actions.onSubmitPost(post, draft.fileInfos);\n        actions.scrollPostListToBottom();\n\n        this.setState({\n            submitting: false,\n        });\n\n        return {data: true};\n    }\n\n    sendReaction(isReaction) {\n        const channelId = this.props.currentChannel.id;\n        const action = isReaction[1];\n        const emojiName = isReaction[2];\n        const postId = this.props.latestReplyablePostId;\n\n        if (postId && action === '+') {\n            this.props.actions.addReaction(postId, emojiName);\n        } else if (postId && action === '-') {\n            this.props.actions.removeReaction(postId, emojiName);\n        }\n\n        this.props.actions.setDraft(StoragePrefixes.DRAFT + channelId, null);\n        this.draftsForChannel[channelId] = null;\n    }\n\n    focusTextbox = (keepFocus = false) => {\n        if (this.refs.textbox && (keepFocus || !UserAgent.isMobile())) {\n            this.refs.textbox.getWrappedInstance().focus();\n        }\n    }\n\n    postMsgKeyPress = (e) => {\n        const {ctrlSend, codeBlockOnCtrlEnter} = this.props;\n\n        const {allowSending, withClosedCodeBlock, ignoreKeyPress, message} = postMessageOnKeyPress(e, this.state.message, ctrlSend, codeBlockOnCtrlEnter, Date.now(), this.lastChannelSwitchAt);\n\n        if (ignoreKeyPress) {\n            e.preventDefault();\n            e.stopPropagation();\n            return;\n        }\n\n        if (allowSending) {\n            e.persist();\n            if (this.refs.textbox) {\n                this.refs.textbox.getWrappedInstance().blur();\n            }\n\n            if (withClosedCodeBlock && message) {\n                this.setState({message}, () => this.handleSubmit(e));\n            } else {\n                this.handleSubmit(e);\n            }\n\n            this.updatePreview(false);\n        }\n\n        this.emitTypingEvent();\n    }\n\n    emitTypingEvent = () => {\n        const channelId = this.props.currentChannel.id;\n        GlobalActions.emitLocalUserTypingEvent(channelId, '');\n    }\n\n    handleChange = (e) => {\n        const message = e.target.value;\n        const channelId = this.props.currentChannel.id;\n        const enableSendButton = this.handleEnableSendButton(message, this.props.draft.fileInfos);\n\n        let serverError = this.state.serverError;\n        if (isErrorInvalidSlashCommand(serverError)) {\n            serverError = null;\n        }\n\n        this.setState({\n            message,\n            enableSendButton,\n            serverError,\n        });\n\n        const draft = {\n            ...this.props.draft,\n            message,\n        };\n\n        this.props.actions.setDraft(StoragePrefixes.DRAFT + channelId, draft);\n        this.draftsForChannel[channelId] = draft;\n    }\n\n    pasteHandler = (e) => {\n        if (!e.clipboardData || !e.clipboardData.items || e.target.id !== 'post_textbox') {\n            return;\n        }\n\n        const table = getTable(e.clipboardData);\n        if (!table) {\n            return;\n        }\n\n        e.preventDefault();\n\n        const message = formatMarkdownTableMessage(table, this.state.message.trim());\n\n        this.setState({message});\n    }\n\n    handleFileUploadChange = () => {\n        this.focusTextbox();\n    }\n\n    handleUploadStart = (clientIds, channelId) => {\n        const uploadsInProgress = [\n            ...this.props.draft.uploadsInProgress,\n            ...clientIds,\n        ];\n\n        const draft = {\n            ...this.props.draft,\n            uploadsInProgress,\n        };\n\n        this.props.actions.setDraft(StoragePrefixes.DRAFT + channelId, draft);\n        this.draftsForChannel[channelId] = draft;\n\n        // this is a bit redundant with the code that sets focus when the file input is clicked,\n        // but this also resets the focus after a drag and drop\n        this.focusTextbox();\n    }\n\n    handleUploadProgress = ({clientId, name, percent, type}) => {\n        const uploadsProgressPercent = {...this.state.uploadsProgressPercent, [clientId]: {percent, name, type}};\n        this.setState({uploadsProgressPercent});\n    }\n\n    handleFileUploadComplete = (fileInfos, clientIds, channelId) => {\n        const draft = {...this.draftsForChannel[channelId]};\n\n        // remove each finished file from uploads\n        for (let i = 0; i < clientIds.length; i++) {\n            if (draft.uploadsInProgress) {\n                const index = draft.uploadsInProgress.indexOf(clientIds[i]);\n\n                if (index !== -1) {\n                    draft.uploadsInProgress = draft.uploadsInProgress.filter((item, itemIndex) => index !== itemIndex);\n                }\n            }\n        }\n\n        if (draft.fileInfos) {\n            draft.fileInfos = sortFileInfos(draft.fileInfos.concat(fileInfos), this.props.locale);\n        }\n\n        this.draftsForChannel[channelId] = draft;\n        this.props.actions.setDraft(StoragePrefixes.DRAFT + channelId, draft);\n        const enableSendButton = this.handleEnableSendButton(this.state.message, draft.fileInfos);\n        this.setState({enableSendButton});\n    }\n\n    handleUploadError = (err, clientId, channelId) => {\n        const draft = {...this.draftsForChannel[channelId]};\n\n        let serverError = err;\n        if (typeof err === 'string') {\n            serverError = new Error(err);\n        }\n\n        if (clientId !== -1 && draft.uploadsInProgress) {\n            const index = draft.uploadsInProgress.indexOf(clientId);\n\n            if (index !== -1) {\n                const uploadsInProgress = draft.uploadsInProgress.filter((item, itemIndex) => index !== itemIndex);\n                const modifiedDraft = {\n                    ...draft,\n                    uploadsInProgress,\n                };\n                this.props.actions.setDraft(StoragePrefixes.DRAFT + channelId, modifiedDraft);\n                this.draftsForChannel[channelId] = modifiedDraft;\n            }\n        }\n\n        this.setState({serverError});\n    }\n\n    removePreview = (id) => {\n        let modifiedDraft = {};\n        const draft = {...this.props.draft};\n        const channelId = this.props.currentChannel.id;\n\n        // Clear previous errors\n        this.setState({serverError: null});\n\n        // id can either be the id of an uploaded file or the client id of an in progress upload\n        let index = draft.fileInfos.findIndex((info) => info.id === id);\n        if (index === -1) {\n            index = draft.uploadsInProgress.indexOf(id);\n\n            if (index !== -1) {\n                const uploadsInProgress = draft.uploadsInProgress.filter((item, itemIndex) => index !== itemIndex);\n\n                modifiedDraft = {\n                    ...draft,\n                    uploadsInProgress,\n                };\n\n                if (this.refs.fileUpload && this.refs.fileUpload.getWrappedInstance()) {\n                    this.refs.fileUpload.getWrappedInstance().cancelUpload(id);\n                }\n            }\n        } else {\n            const fileInfos = draft.fileInfos.filter((item, itemIndex) => index !== itemIndex);\n\n            modifiedDraft = {\n                ...draft,\n                fileInfos,\n            };\n        }\n\n        this.props.actions.setDraft(StoragePrefixes.DRAFT + channelId, modifiedDraft);\n        this.draftsForChannel[channelId] = modifiedDraft;\n        const enableSendButton = this.handleEnableSendButton(this.state.message, modifiedDraft.fileInfos);\n\n        this.setState({enableSendButton});\n\n        this.handleFileUploadChange();\n    }\n\n    focusTextboxIfNecessary = (e) => {\n        // Focus should go to the RHS when it is expanded\n        if (this.props.rhsExpanded) {\n            return;\n        }\n\n        // Bit of a hack to not steal focus from the channel switch modal if it's open\n        // This is a special case as the channel switch modal does not enforce focus like\n        // most modals do\n        if (document.getElementsByClassName('channel-switch-modal').length) {\n            return;\n        }\n\n        if (shouldFocusMainTextbox(e, document.activeElement)) {\n            this.focusTextbox();\n        }\n    }\n\n    documentKeyHandler = (e) => {\n        if ((e.ctrlKey || e.metaKey) && Utils.isKeyPressed(e, KeyCodes.FORWARD_SLASH)) {\n            e.preventDefault();\n\n            GlobalActions.toggleShortcutsModal();\n            return;\n        }\n\n        this.focusTextboxIfNecessary(e);\n    }\n\n    getFileCount = () => {\n        const draft = this.props.draft;\n        return draft.fileInfos.length + draft.uploadsInProgress.length;\n    }\n\n    getFileUploadTarget = () => {\n        if (this.refs.textbox) {\n            return this.refs.textbox.getWrappedInstance();\n        }\n\n        return null;\n    }\n\n    getCreatePostControls = () => {\n        return this.refs.createPostControls;\n    }\n\n    fillMessageFromHistory() {\n        const lastMessage = this.props.messageInHistoryItem;\n        if (lastMessage) {\n            this.setState({\n                message: lastMessage,\n            });\n        }\n    }\n\n    handleKeyDown = (e) => {\n        const ctrlOrMetaKeyPressed = e.ctrlKey || e.metaKey;\n        const messageIsEmpty = this.state.message.length === 0;\n        const draftMessageIsEmpty = this.props.draft.message.length === 0;\n        const ctrlEnterKeyCombo = (this.props.ctrlSend || this.props.codeBlockOnCtrlEnter) && Utils.isKeyPressed(e, KeyCodes.ENTER) && ctrlOrMetaKeyPressed;\n        const upKeyOnly = !ctrlOrMetaKeyPressed && !e.altKey && !e.shiftKey && Utils.isKeyPressed(e, KeyCodes.UP);\n        const shiftUpKeyCombo = !ctrlOrMetaKeyPressed && !e.altKey && e.shiftKey && Utils.isKeyPressed(e, KeyCodes.UP);\n        const ctrlKeyCombo = ctrlOrMetaKeyPressed && !e.altKey && !e.shiftKey;\n\n        if (ctrlEnterKeyCombo) {\n            this.postMsgKeyPress(e);\n        } else if (upKeyOnly && messageIsEmpty) {\n            this.editLastPost(e);\n        } else if (shiftUpKeyCombo && messageIsEmpty) {\n            this.replyToLastPost(e);\n        } else if (ctrlKeyCombo && draftMessageIsEmpty && Utils.isKeyPressed(e, KeyCodes.UP)) {\n            this.loadPrevMessage(e);\n        } else if (ctrlKeyCombo && draftMessageIsEmpty && Utils.isKeyPressed(e, KeyCodes.DOWN)) {\n            this.loadNextMessage(e);\n        }\n    }\n\n    editLastPost = (e) => {\n        e.preventDefault();\n\n        const lastPost = this.props.currentUsersLatestPost;\n        if (!lastPost) {\n            return;\n        }\n\n        let type;\n        if (lastPost.root_id && lastPost.root_id.length > 0) {\n            type = Utils.localizeMessage('create_post.comment', Posts.MESSAGE_TYPES.COMMENT);\n        } else {\n            type = Utils.localizeMessage('create_post.post', Posts.MESSAGE_TYPES.POST);\n        }\n        if (this.refs.textbox) {\n            this.refs.textbox.getWrappedInstance().blur();\n        }\n        this.props.actions.setEditingPost(lastPost.id, this.props.commentCountForPost, 'post_textbox', type);\n    }\n\n    replyToLastPost = (e) => {\n        e.preventDefault();\n        const latestReplyablePostId = this.props.latestReplyablePostId;\n        const replyBox = document.getElementById('reply_textbox');\n        if (replyBox) {\n            replyBox.focus();\n        }\n        if (latestReplyablePostId) {\n            this.props.actions.selectPostFromRightHandSideSearchByPostId(latestReplyablePostId);\n        }\n    }\n\n    loadPrevMessage = (e) => {\n        e.preventDefault();\n        this.props.actions.moveHistoryIndexBack(Posts.MESSAGE_TYPES.POST).then(() => this.fillMessageFromHistory());\n    }\n\n    loadNextMessage = (e) => {\n        e.preventDefault();\n        this.props.actions.moveHistoryIndexForward(Posts.MESSAGE_TYPES.POST).then(() => this.fillMessageFromHistory());\n    }\n\n    handleBlur = () => {\n        this.lastBlurAt = Date.now();\n    }\n\n    showPostDeletedModal = () => {\n        this.setState({\n            showPostDeletedModal: true,\n        });\n    }\n\n    hidePostDeletedModal = () => {\n        this.setState({\n            showPostDeletedModal: false,\n        });\n    }\n\n    handleEmojiClose = () => {\n        this.setState({showEmojiPicker: false});\n    }\n\n    handleEmojiClick = (emoji) => {\n        const emojiAlias = emoji.name || emoji.aliases[0];\n\n        if (!emojiAlias) {\n            //Oops.. There went something wrong\n            return;\n        }\n\n        if (this.state.message === '') {\n            this.setState({message: ':' + emojiAlias + ': '});\n        } else {\n            //check whether there is already a blank at the end of the current message\n            const newMessage = ((/\\s+$/).test(this.state.message)) ? this.state.message + ':' + emojiAlias + ': ' : this.state.message + ' :' + emojiAlias + ': ';\n\n            this.setState({message: newMessage});\n        }\n\n        this.handleEmojiClose();\n    }\n\n    handleGifClick = (gif) => {\n        if (this.state.message === '') {\n            this.setState({message: gif});\n        } else {\n            const newMessage = ((/\\s+$/).test(this.state.message)) ? this.state.message + gif : this.state.message + ' ' + gif;\n            this.setState({message: newMessage});\n        }\n        this.handleEmojiClose();\n    }\n\n    createTutorialTip() {\n        const screens = [];\n\n        screens.push(\n            <div>\n                <h4>\n                    <FormattedMessage\n                        id='create_post.tutorialTip.title'\n                        defaultMessage='Sending Messages'\n                    />\n                </h4>\n                <p>\n                    <FormattedMarkdownMessage\n                        id='create_post.tutorialTip1'\n                        defaultMessage='Type here to write a message and press **Enter** to post it.'\n                    />\n                </p>\n                <p>\n                    <FormattedMarkdownMessage\n                        id='create_post.tutorialTip2'\n                        defaultMessage='Click the **Attachment** button to upload an image or a file.'\n                    />\n                </p>\n            </div>,\n        );\n\n        return (\n            <TutorialTip\n                id='postTextboxTipMessage'\n                placement='top'\n                screens={screens}\n                overlayClass='tip-overlay--chat'\n                diagnosticsTag='tutorial_tip_1_sending_messages'\n            />\n        );\n    }\n\n    handleEnableSendButton(message, fileInfos) {\n        return message.trim().length !== 0 || fileInfos.length !== 0;\n    }\n\n    handleHeightChange = (height, maxHeight) => {\n        this.setState({renderScrollbar: height > maxHeight});\n    }\n\n    render() {\n        const {\n            currentChannel,\n            currentChannelMembersCount,\n            draft,\n            fullWidthTextBox,\n            showTutorialTip,\n            readOnlyChannel,\n        } = this.props;\n        const {formatMessage} = this.context.intl;\n        const members = currentChannelMembersCount - 1;\n        const {renderScrollbar} = this.state;\n        const ariaLabelMessageInput = Utils.localizeMessage('accessibility.sections.centerFooter', 'message input complimentary region');\n\n        const notifyAllTitle = (\n            <FormattedMessage\n                id='notify_all.title.confirm'\n                defaultMessage='Confirm sending notifications to entire channel'\n            />\n        );\n\n        const notifyAllConfirm = (\n            <FormattedMessage\n                id='notify_all.confirm'\n                defaultMessage='Confirm'\n            />\n        );\n\n        let notifyAllMessage = '';\n        if (this.state.channelTimezoneCount && this.props.isTimezoneEnabled) {\n            notifyAllMessage = (\n                <FormattedMarkdownMessage\n                    id='notify_all.question_timezone'\n                    defaultMessage='By using @all or @channel you are about to send notifications to **{totalMembers} people** in **{timezones, number} {timezones, plural, one {timezone} other {timezones}}**. Are you sure you want to do this?'\n                    values={{\n                        totalMembers: members,\n                        timezones: this.state.channelTimezoneCount,\n                    }}\n                />\n            );\n        } else {\n            notifyAllMessage = (\n                <FormattedMessage\n                    id='notify_all.question'\n                    defaultMessage='By using @all or @channel you are about to send notifications to {totalMembers} people. Are you sure you want to do this?'\n                    values={{\n                        totalMembers: members,\n                    }}\n                />\n            );\n        }\n\n        let serverError = null;\n        if (this.state.serverError) {\n            serverError = (\n                <MessageSubmitError\n                    id='postServerError'\n                    error={this.state.serverError}\n                    submittedMessage={this.state.serverError.submittedMessage}\n                    handleSubmit={this.handleSubmit}\n                />\n            );\n        }\n\n        let postError = null;\n        if (this.state.postError) {\n            const postErrorClass = 'post-error' + (this.state.errorClass ? (' ' + this.state.errorClass) : '');\n            postError = <label className={postErrorClass}>{this.state.postError}</label>;\n        }\n\n        let preview = null;\n        if (!readOnlyChannel && (draft.fileInfos.length > 0 || draft.uploadsInProgress.length > 0)) {\n            preview = (\n                <FilePreview\n                    fileInfos={draft.fileInfos}\n                    onRemove={this.removePreview}\n                    uploadsInProgress={draft.uploadsInProgress}\n                    uploadsProgressPercent={this.state.uploadsProgressPercent}\n                />\n            );\n        }\n\n        let postFooterClassName = 'post-create-footer';\n        if (postError) {\n            postFooterClassName += ' has-error';\n        }\n\n        let tutorialTip = null;\n        if (showTutorialTip) {\n            tutorialTip = this.createTutorialTip();\n        }\n\n        let centerClass = '';\n        if (!fullWidthTextBox) {\n            centerClass = 'center';\n        }\n\n        let sendButtonClass = 'send-button theme';\n        if (!this.state.enableSendButton) {\n            sendButtonClass += ' disabled';\n        }\n\n        let attachmentsDisabled = '';\n        if (!this.props.canUploadFiles) {\n            attachmentsDisabled = ' post-create--attachment-disabled';\n        }\n\n        let fileUpload;\n        if (!readOnlyChannel && !this.state.showPreview) {\n            fileUpload = (\n                <FileUpload\n                    ref='fileUpload'\n                    fileCount={this.getFileCount()}\n                    getTarget={this.getFileUploadTarget}\n                    onFileUploadChange={this.handleFileUploadChange}\n                    onUploadStart={this.handleUploadStart}\n                    onFileUpload={this.handleFileUploadComplete}\n                    onUploadError={this.handleUploadError}\n                    onUploadProgress={this.handleUploadProgress}\n                    postType='post'\n                />\n            );\n        }\n\n        let emojiPicker = null;\n        const emojiButtonAriaLabel = formatMessage({id: 'emoji_picker.emojiPicker', defaultMessage: 'Emoji Picker'}).toLowerCase();\n\n        if (this.props.enableEmojiPicker && !readOnlyChannel && !this.state.showPreview) {\n            emojiPicker = (\n                <div>\n                    <EmojiPickerOverlay\n                        show={this.state.showEmojiPicker}\n                        target={this.getCreatePostControls}\n                        onHide={this.hideEmojiPicker}\n                        onEmojiClose={this.handleEmojiClose}\n                        onEmojiClick={this.handleEmojiClick}\n                        onGifClick={this.handleGifClick}\n                        enableGifPicker={this.props.enableGifPicker}\n                        topOffset={-7}\n                    />\n                    <button\n                        type='button'\n                        aria-label={emojiButtonAriaLabel}\n                        onClick={this.toggleEmojiPicker}\n                        className='style--none emoji-picker__container post-action'\n                    >\n                        <EmojiIcon\n                            id='emojiPickerButton'\n                            className={'icon icon--emoji ' + (this.state.showEmojiPicker ? 'active' : '')}\n                        />\n                    </button>\n                </div>\n            );\n        }\n\n        let createMessage;\n        if (readOnlyChannel) {\n            createMessage = Utils.localizeMessage('create_post.read_only', 'This channel is read-only. Only members with permission can post here.');\n        } else {\n            createMessage = formatMessage(\n                {id: 'create_post.write', defaultMessage: 'Write to {channelDisplayName}'},\n                {channelDisplayName: currentChannel.display_name},\n            );\n        }\n\n        let scrollbarClass = '';\n        if (renderScrollbar) {\n            scrollbarClass = ' scroll';\n        }\n\n        return (\n            <form\n                id='create_post'\n                ref='topDiv'\n                className={centerClass}\n                onSubmit={this.handleSubmit}\n            >\n                <div className={'post-create' + attachmentsDisabled + scrollbarClass}>\n                    <div className='post-create-body'>\n                        <div\n                            role='application'\n                            id='centerChannelFooter'\n                            aria-label={ariaLabelMessageInput}\n                            tabIndex='-1'\n                            className='post-body__cell a11y__region'\n                            data-a11y-sort-order='2'\n                        >\n                            <Textbox\n                                onChange={this.handleChange}\n                                onKeyPress={this.postMsgKeyPress}\n                                onKeyDown={this.handleKeyDown}\n                                onComposition={this.emitTypingEvent}\n                                onHeightChange={this.handleHeightChange}\n                                handlePostError={this.handlePostError}\n                                value={readOnlyChannel ? '' : this.state.message}\n                                onBlur={this.handleBlur}\n                                emojiEnabled={this.props.enableEmojiPicker}\n                                createMessage={createMessage}\n                                channelId={currentChannel.id}\n                                id='post_textbox'\n                                ref='textbox'\n                                disabled={readOnlyChannel}\n                                characterLimit={this.props.maxPostSize}\n                                preview={this.state.showPreview}\n                                badConnection={this.props.badConnection}\n                                listenForMentionKeyClick={true}\n                            />\n                            <span\n                                ref='createPostControls'\n                                className='post-body__actions'\n                            >\n                                {fileUpload}\n                                {emojiPicker}\n                                <a\n                                    role='button'\n                                    tabIndex='0'\n                                    aria-label={formatMessage({\n                                        id: 'create_post.send_message',\n                                        defaultMessage: 'Send a message',\n                                    })}\n                                    className={sendButtonClass}\n                                    onClick={this.handleSubmit}\n                                >\n                                    <i\n                                        className='fa fa-paper-plane'\n                                        title={formatMessage({\n                                            id: 'create_post.icon',\n                                            defaultMessage: 'Send Post Icon',\n                                        })}\n                                    />\n                                </a>\n                            </span>\n                        </div>\n                        {tutorialTip}\n                    </div>\n                    <div\n                        id='postCreateFooter'\n                        className={postFooterClassName}\n                    >\n                        <div className='d-flex justify-content-between'>\n                            <MsgTyping\n                                channelId={currentChannel.id}\n                                postId=''\n                            />\n                            <TextboxLinks\n                                characterLimit={this.props.maxPostSize}\n                                showPreview={this.state.showPreview}\n                                updatePreview={this.updatePreview}\n                                message={readOnlyChannel ? '' : this.state.message}\n                            />\n                        </div>\n                        <div>\n                            {postError}\n                            {preview}\n                            {serverError}\n                        </div>\n                    </div>\n                </div>\n                <PostDeletedModal\n                    show={this.state.showPostDeletedModal}\n                    onHide={this.hidePostDeletedModal}\n                />\n                <ConfirmModal\n                    title={notifyAllTitle}\n                    message={notifyAllMessage}\n                    confirmButtonText={notifyAllConfirm}\n                    show={this.state.showConfirmModal}\n                    onConfirm={this.handleNotifyAllConfirmation}\n                    onCancel={this.hideNotifyAllModal}\n                />\n            </form>\n        );\n    }\n}\n","// Copyright (c) 2015-present Mattermost, Inc. All Rights Reserved.\n// See LICENSE.txt for license information.\n\nimport {connect} from 'react-redux';\nimport {bindActionCreators} from 'redux';\nimport {getConfig} from 'mattermost-redux/selectors/entities/general';\nimport {getCurrentTeamId} from 'mattermost-redux/selectors/entities/teams';\n\nimport {getCurrentChannel, getCurrentChannelStats} from 'mattermost-redux/selectors/entities/channels';\nimport {getCurrentUserId, isCurrentUserSystemAdmin, getStatusForUserId} from 'mattermost-redux/selectors/entities/users';\nimport {getChannelTimezones} from 'mattermost-redux/actions/channels';\nimport {get, getInt, getBool} from 'mattermost-redux/selectors/entities/preferences';\nimport {\n    getCurrentUsersLatestPost,\n    getLatestReplyablePostId,\n    getMostRecentPostIdInChannel,\n    getPost,\n    makeGetCommentCountForPost,\n    makeGetMessageInHistoryItem,\n} from 'mattermost-redux/selectors/entities/posts';\nimport {\n    addMessageIntoHistory,\n    moveHistoryIndexBack,\n    moveHistoryIndexForward,\n    removeReaction,\n} from 'mattermost-redux/actions/posts';\nimport {Posts, Preferences as PreferencesRedux} from 'mattermost-redux/constants';\n\nimport {connectionErrorCount} from 'selectors/views/system';\n\nimport {addReaction, createPost, setEditingPost} from 'actions/post_actions.jsx';\nimport {scrollPostListToBottom} from 'actions/views/channel';\nimport {selectPostFromRightHandSideSearchByPostId} from 'actions/views/rhs';\nimport {executeCommand} from 'actions/command';\nimport {runMessageWillBePostedHooks, runSlashCommandWillBePostedHooks} from 'actions/hooks';\nimport {getPostDraft, getIsRhsExpanded} from 'selectors/rhs';\nimport {getCurrentLocale} from 'selectors/i18n';\nimport {getEmojiMap} from 'selectors/emojis';\nimport {setGlobalItem, actionOnGlobalItemsWithPrefix} from 'actions/storage';\nimport {openModal} from 'actions/views/modals';\nimport {Constants, Preferences, StoragePrefixes, TutorialSteps, UserStatuses} from 'utils/constants.jsx';\nimport {canUploadFiles} from 'utils/file_utils';\n\nimport CreatePost from './create_post.jsx';\n\nfunction makeMapStateToProps() {\n    const getCommentCountForPost = makeGetCommentCountForPost();\n    const getMessageInHistoryItem = makeGetMessageInHistoryItem(Posts.MESSAGE_TYPES.POST);\n\n    return (state, ownProps) => {\n        const config = getConfig(state);\n        const currentChannel = getCurrentChannel(state) || {};\n        const draft = getPostDraft(state, StoragePrefixes.DRAFT, currentChannel.id);\n        const recentPostIdInChannel = getMostRecentPostIdInChannel(state, currentChannel.id);\n        const post = getPost(state, recentPostIdInChannel);\n        const latestReplyablePostId = getLatestReplyablePostId(state);\n        const currentChannelMembersCount = getCurrentChannelStats(state) ? getCurrentChannelStats(state).member_count : 1;\n        const enableTutorial = config.EnableTutorial === 'true';\n        const tutorialStep = getInt(state, Preferences.TUTORIAL_STEP, getCurrentUserId(state), TutorialSteps.FINISHED);\n        const enableEmojiPicker = config.EnableEmojiPicker === 'true';\n        const enableGifPicker = config.EnableGifPicker === 'true';\n        const enableConfirmNotificationsToChannel = config.EnableConfirmNotificationsToChannel === 'true';\n        const currentUserId = getCurrentUserId(state);\n        const userIsOutOfOffice = getStatusForUserId(state, currentUserId) === UserStatuses.OUT_OF_OFFICE;\n        const badConnection = connectionErrorCount(state) > 1;\n        const isTimezoneEnabled = config.ExperimentalTimezone === 'true';\n\n        return {\n            currentTeamId: getCurrentTeamId(state),\n            currentChannel,\n            currentChannelMembersCount,\n            currentUserId,\n            codeBlockOnCtrlEnter: getBool(state, PreferencesRedux.CATEGORY_ADVANCED_SETTINGS, 'code_block_ctrl_enter', true),\n            ctrlSend: getBool(state, Preferences.CATEGORY_ADVANCED_SETTINGS, 'send_on_ctrl_enter'),\n            fullWidthTextBox: get(state, Preferences.CATEGORY_DISPLAY_SETTINGS, Preferences.CHANNEL_DISPLAY_MODE, Preferences.CHANNEL_DISPLAY_MODE_DEFAULT) === Preferences.CHANNEL_DISPLAY_MODE_FULL_SCREEN,\n            showTutorialTip: enableTutorial && tutorialStep === TutorialSteps.POST_POPOVER,\n            messageInHistoryItem: getMessageInHistoryItem(state),\n            draft,\n            commentCountForPost: getCommentCountForPost(state, {post}),\n            latestReplyablePostId,\n            locale: getCurrentLocale(state),\n            currentUsersLatestPost: getCurrentUsersLatestPost(state),\n            readOnlyChannel: ownProps.readOnlyChannel || (!isCurrentUserSystemAdmin(state) && config.ExperimentalTownSquareIsReadOnly === 'true' && currentChannel.name === Constants.DEFAULT_CHANNEL),\n            canUploadFiles: canUploadFiles(config),\n            enableEmojiPicker,\n            enableGifPicker,\n            enableConfirmNotificationsToChannel,\n            maxPostSize: parseInt(config.MaxPostSize, 10) || Constants.DEFAULT_CHARACTER_LIMIT,\n            userIsOutOfOffice,\n            rhsExpanded: getIsRhsExpanded(state),\n            emojiMap: getEmojiMap(state),\n            badConnection,\n            isTimezoneEnabled,\n        };\n    };\n}\n\nfunction onSubmitPost(post, fileInfos) {\n    return (dispatch) => {\n        dispatch(createPost(post, fileInfos));\n    };\n}\n\nfunction mapDispatchToProps(dispatch) {\n    return {\n        actions: bindActionCreators({\n            addMessageIntoHistory,\n            onSubmitPost,\n            moveHistoryIndexBack,\n            moveHistoryIndexForward,\n            addReaction,\n            removeReaction,\n            setDraft: setGlobalItem,\n            clearDraftUploads: actionOnGlobalItemsWithPrefix,\n            selectPostFromRightHandSideSearchByPostId,\n            setEditingPost,\n            openModal,\n            executeCommand,\n            getChannelTimezones,\n            runMessageWillBePostedHooks,\n            runSlashCommandWillBePostedHooks,\n            scrollPostListToBottom,\n        }, dispatch),\n    };\n}\n\nexport default connect(makeMapStateToProps, mapDispatchToProps)(CreatePost);\n","// Copyright (c) 2015-present Mattermost, Inc. All Rights Reserved.\n// See LICENSE.txt for license information.\n\nimport PropTypes from 'prop-types';\nimport React from 'react';\nimport {FormattedMessage, intlShape} from 'react-intl';\n\nimport {trackEvent} from 'actions/diagnostics_actions.jsx';\nimport * as GlobalActions from 'actions/global_actions.jsx';\nimport {Constants, Preferences, ModalIdentifiers} from 'utils/constants.jsx';\nimport {useSafeUrl} from 'utils/url.jsx';\nimport AppIcons from 'images/appIcons.png';\nimport ModalToggleButtonRedux from 'components/toggle_modal_button_redux';\nimport InviteMemberModal from 'components/invite_member_modal';\n\nconst NUM_SCREENS = 3;\n\nexport default class TutorialIntroScreens extends React.Component {\n    static propTypes = {\n        currentUserId: PropTypes.string.isRequired,\n        teamType: PropTypes.string,\n        step: PropTypes.number,\n        townSquareDisplayName: PropTypes.string.isRequired,\n        appDownloadLink: PropTypes.string,\n        isLicensed: PropTypes.bool.isRequired,\n        restrictTeamInvite: PropTypes.bool.isRequired,\n        supportEmail: PropTypes.string.isRequired,\n        actions: PropTypes.shape({\n            savePreferences: PropTypes.func.isRequired,\n        }).isRequired,\n    };\n\n    static contextTypes = {\n        intl: intlShape.isRequired,\n    };\n\n    constructor(props) {\n        super(props);\n\n        this.state = {currentScreen: 0};\n    }\n\n    handleNext = () => {\n        switch (this.state.currentScreen) {\n        case 0:\n            trackEvent('tutorial', 'tutorial_screen_1_welcome_to_mattermost_next');\n            break;\n        case 1:\n            trackEvent('tutorial', 'tutorial_screen_2_how_mattermost_works_next');\n            break;\n        case 2:\n            trackEvent('tutorial', 'tutorial_screen_3_youre_all_set_next');\n            break;\n        }\n\n        if (this.state.currentScreen < 2) {\n            this.setState({currentScreen: this.state.currentScreen + 1});\n            return;\n        }\n\n        const {currentUserId} = this.props;\n        const preferences = [{\n            user_id: currentUserId,\n            category: Preferences.TUTORIAL_STEP,\n            name: currentUserId,\n            value: (this.props.step + 1).toString(),\n        }];\n\n        this.props.actions.savePreferences(currentUserId, preferences);\n    }\n\n    skipTutorial = (e) => {\n        e.preventDefault();\n\n        switch (this.state.currentScreen) {\n        case 0:\n            trackEvent('tutorial', 'tutorial_screen_1_welcome_to_mattermost_skip');\n            break;\n        case 1:\n            trackEvent('tutorial', 'tutorial_screen_2_how_mattermost_works_skip');\n            break;\n        case 2:\n            trackEvent('tutorial', 'tutorial_screen_3_youre_all_set_skip');\n            break;\n        }\n\n        const {currentUserId} = this.props;\n        const preferences = [{\n            user_id: currentUserId,\n            category: Preferences.TUTORIAL_STEP,\n            name: currentUserId,\n            value: Constants.TutorialSteps.FINISHED.toString(),\n        }];\n\n        this.props.actions.savePreferences(currentUserId, preferences);\n    }\n    createScreen = () => {\n        switch (this.state.currentScreen) {\n        case 0:\n            return this.createScreenOne();\n        case 1:\n            return this.createScreenTwo();\n        case 2:\n            return this.createScreenThree();\n        }\n        return null;\n    }\n\n    createScreenOne() {\n        const circles = this.createCircles();\n\n        return (\n            <div id='tutorialIntroOne'>\n                <h3>\n                    <FormattedMessage\n                        id='tutorial_intro.screenOne.title1'\n                        defaultMessage='Welcome to:'\n                    />\n                </h3>\n                <h1>\n                    <FormattedMessage\n                        id='tutorial_intro.screenOne.title2'\n                        defaultMessage='Mattermost'\n                    />\n                </h1>\n                <p>\n                    <FormattedMessage\n                        id='tutorial_intro.screenOne.body1'\n                        defaultMessage='Your team communication all in one place, instantly searchable and available anywhere.'\n                    />\n                </p>\n                <p>\n                    <FormattedMessage\n                        id='tutorial_intro.screenOne.body2'\n                        defaultMessage='Keep your team connected to help them achieve what matters most.'\n                    />\n                </p>\n                {circles}\n            </div>\n        );\n    }\n\n    createScreenTwo() {\n        const circles = this.createCircles();\n\n        let appDownloadLink = null;\n        let appDownloadImage = null;\n        if (this.props.appDownloadLink) {\n            const link = useSafeUrl(this.props.appDownloadLink);\n\n            // not using a FormattedHTMLMessage here since appDownloadLink is configurable and could be used\n            // to inject HTML if we're not careful\n            appDownloadLink = (\n                <FormattedMessage\n                    id='tutorial_intro.mobileApps'\n                    defaultMessage='Install the apps for {link} for easy access and notifications on the go.'\n                    values={{\n                        link: (\n                            <a\n                                id='appDownloadLink'\n                                href={link}\n                                target='_blank'\n                                rel='noopener noreferrer'\n                            >\n                                <FormattedMessage\n                                    id='tutorial_intro.mobileAppsLinkText'\n                                    defaultMessage='PC, Mac, iOS and Android'\n                                />\n                            </a>\n                        ),\n                    }}\n                />\n            );\n\n            appDownloadImage = (\n                <a\n                    id='appDownloadImage'\n                    href={link}\n                    target='_blank'\n                    rel='noopener noreferrer'\n                >\n                    <img\n                        alt={'tutorial icons'}\n                        className='tutorial__app-icons'\n                        src={AppIcons}\n                    />\n                </a>\n            );\n        }\n\n        return (\n            <div id='tutorialIntroTwo'>\n                <h3>\n                    <FormattedMessage\n                        id='tutorial_intro.screenTwo.title'\n                        defaultMessage='How Mattermost works:'\n                    />\n                </h3>\n                <p>\n                    <FormattedMessage\n                        id='tutorial_intro.screenTwo.body1'\n                        defaultMessage='Communication happens in public discussion channels, private channels and direct messages.'\n                    />\n                </p>\n                <p>\n                    <FormattedMessage\n                        id='tutorial_intro.screenTwo.body2'\n                        defaultMessage='Everything is archived and searchable from any web-enabled desktop, laptop or phone.'\n                    />\n                </p>\n                {appDownloadLink}\n                {appDownloadImage}\n                {circles}\n            </div>\n        );\n    }\n\n    createScreenThree() {\n        let inviteModalLink;\n        let inviteText;\n        const {teamType} = this.props;\n        const {formatMessage} = this.context.intl;\n\n        if (!this.props.isLicensed || !this.props.restrictTeamInvite) {\n            if (teamType === Constants.INVITE_TEAM) {\n                const inviteMessage = formatMessage({id: 'tutorial_intro.invite', defaultMessage: 'Invite teammates'});\n                inviteModalLink = (\n                    <ModalToggleButtonRedux\n                        accessibilityLabel={inviteMessage}\n                        id='tutorialIntroInvite'\n                        className='intro-links color--link style--none'\n                        modalId={ModalIdentifiers.EMAIL_INVITE}\n                        dialogType={InviteMemberModal}\n                        dialogProps={{}}\n                    >\n                        {inviteMessage}\n                    </ModalToggleButtonRedux>\n                );\n            } else {\n                inviteModalLink = (\n                    <button\n                        id='tutorialIntroInvite'\n                        className='intro-links color--link style--none'\n                        onClick={GlobalActions.showGetTeamInviteLinkModal}\n                    >\n                        <FormattedMessage\n                            id='tutorial_intro.teamInvite'\n                            defaultMessage='Invite teammates'\n                        />\n                    </button>\n                );\n            }\n\n            inviteText = (\n                <p>\n                    {inviteModalLink}\n                    <FormattedMessage\n                        id='tutorial_intro.whenReady'\n                        defaultMessage={' when you\\'re ready.'}\n                    />\n                </p>\n            );\n        }\n\n        const circles = this.createCircles();\n\n        let supportInfo = null;\n        if (this.props.supportEmail) {\n            supportInfo = (\n                <p id='supportInfo'>\n                    <FormattedMessage\n                        id='tutorial_intro.support'\n                        defaultMessage='Need anything, just email us at '\n                    />\n                    <a\n                        href={'mailto:' + this.props.supportEmail}\n                        target='_blank'\n                        rel='noopener noreferrer'\n                    >\n                        {this.props.supportEmail}\n                    </a>\n                    {'.'}\n                </p>\n            );\n        }\n\n        return (\n            <div id='tutorialIntroThree'>\n                <h3>\n                    <FormattedMessage\n                        id='tutorial_intro.allSet'\n                        defaultMessage={'You\\'re all set'}\n                    />\n                </h3>\n                {inviteText}\n                {supportInfo}\n                <FormattedMessage\n                    id='tutorial_intro.end'\n                    defaultMessage='Click \"Next\" to enter {channel}. This is the first channel teammates see when they sign up. Use it for posting updates everyone needs to know.'\n                    values={{\n                        channel: this.props.townSquareDisplayName,\n                    }}\n                />\n                {circles}\n            </div>\n        );\n    }\n\n    handleCircleClick = (e, screen) => {\n        e.preventDefault();\n        this.setState({currentScreen: screen});\n    }\n\n    createCircles = () => {\n        const circles = [];\n        for (let i = 0; i < NUM_SCREENS; i++) {\n            let className = 'circle';\n            if (i === this.state.currentScreen) {\n                className += ' active';\n            }\n\n            circles.push(\n                <a\n                    id={'tutorialIntroCircle' + i}\n                    href='#'\n                    key={'circle' + i}\n                    className={className}\n                    data-screen={i}\n                    onClick={(e) => this.handleCircleClick(e, i)}\n                />\n            );\n        }\n\n        return (\n            <div className='tutorial__circles'>\n                {circles}\n            </div>\n        );\n    }\n\n    render() {\n        const screen = this.createScreen();\n\n        return (\n            <div className='tutorial-steps__container'>\n                <div\n                    id='tutorialIntroContent'\n                    className='tutorial__content'\n                >\n                    <div className='tutorial__steps'>\n                        {screen}\n                        <div className='tutorial__footer'>\n                            <button\n                                id='tutorialNextButton'\n                                className='btn btn-primary'\n                                tabIndex='1'\n                                onClick={this.handleNext}\n                            >\n                                <FormattedMessage\n                                    id='tutorial_intro.next'\n                                    defaultMessage='Next'\n                                />\n                            </button>\n                            <a\n                                id='tutorialSkipLink'\n                                className='tutorial-skip'\n                                href='#'\n                                onClick={this.skipTutorial}\n                            >\n                                <FormattedMessage\n                                    id='tutorial_intro.skip'\n                                    defaultMessage='Skip tutorial'\n                                />\n                            </a>\n                        </div>\n                    </div>\n                </div>\n            </div>\n        );\n    }\n}\n","// Copyright (c) 2015-present Mattermost, Inc. All Rights Reserved.\n// See LICENSE.txt for license information.\nimport {connect} from 'react-redux';\nimport {bindActionCreators} from 'redux';\nimport {getCurrentUserId} from 'mattermost-redux/selectors/entities/users';\nimport {getCurrentTeam} from 'mattermost-redux/selectors/entities/teams';\nimport {getInt} from 'mattermost-redux/selectors/entities/preferences';\nimport {savePreferences} from 'mattermost-redux/actions/preferences';\n\nimport {Preferences} from 'utils/constants.jsx';\n\nimport TutorialIntroScreens from './tutorial_intro_screens.jsx';\n\nfunction mapStateToProps(state) {\n    const currentUserId = getCurrentUserId(state);\n    const team = getCurrentTeam(state) || {};\n    return {\n        currentUserId,\n        teamType: team.type,\n        step: getInt(state, Preferences.TUTORIAL_STEP, currentUserId, 0),\n    };\n}\n\nfunction mapDispatchToProps(dispatch) {\n    return {actions: bindActionCreators({\n        savePreferences,\n    }, dispatch)};\n}\n\nexport default connect(mapStateToProps, mapDispatchToProps)(TutorialIntroScreens);\n","// Copyright (c) 2015-present Mattermost, Inc. All Rights Reserved.\n// See LICENSE.txt for license information.\n\nimport $ from 'jquery';\nimport PropTypes from 'prop-types';\nimport React from 'react';\n\nimport TutorialIntroScreens from './tutorial_intro_screens';\n\nexport default class TutorialView extends React.Component {\n    componentDidMount() {\n        if (this.props.isRoot) {\n            $('body').addClass('app__body');\n        }\n    }\n\n    componentWillUnmount() {\n        if (this.props.isRoot) {\n            $('body').removeClass('app__body');\n        }\n    }\n\n    render() {\n        return (\n            <div\n                id='app-content'\n                className='app__content'\n            >\n                <TutorialIntroScreens\n                    townSquareDisplayName={this.props.townSquareDisplayName}\n                    appDownloadLink={this.props.appDownloadLink}\n                    isLicensed={this.props.isLicensed}\n                    restrictTeamInvite={this.props.restrictTeamInvite}\n                    supportEmail={this.props.supportEmail}\n                />\n            </div>\n        );\n    }\n}\n\nTutorialView.propTypes = {\n    isRoot: PropTypes.bool,\n    townSquareDisplayName: PropTypes.string.isRequired,\n    appDownloadLink: PropTypes.string,\n    isLicensed: PropTypes.bool.isRequired,\n    restrictTeamInvite: PropTypes.bool.isRequired,\n    supportEmail: PropTypes.string.isRequired,\n};\n\nTutorialView.defaultProps = {\n    isRoot: true,\n};\n","// Copyright (c) 2015-present Mattermost, Inc. All Rights Reserved.\n// See LICENSE.txt for license information.\nimport {connect} from 'react-redux';\n\nimport {Permissions} from 'mattermost-redux/constants';\nimport {getChannelsNameMapInCurrentTeam} from 'mattermost-redux/selectors/entities/channels';\nimport {getLicense, getConfig} from 'mattermost-redux/selectors/entities/general';\nimport {haveITeamPermission} from 'mattermost-redux/selectors/entities/roles';\nimport {getCurrentTeam} from 'mattermost-redux/selectors/entities/teams';\n\nimport Constants from 'utils/constants.jsx';\n\nimport TutorialView from './tutorial_view.jsx';\n\nfunction mapStateToProps(state) {\n    const license = getLicense(state);\n    const config = getConfig(state);\n\n    const team = getCurrentTeam(state);\n\n    const teamChannels = getChannelsNameMapInCurrentTeam(state);\n    const townSquare = teamChannels[Constants.DEFAULT_CHANNEL];\n    const townSquareDisplayName = townSquare ? townSquare.display_name : Constants.DEFAULT_CHANNEL_UI_NAME;\n\n    const appDownloadLink = config.AppDownloadLink;\n    const isLicensed = license.IsLicensed === 'true';\n    const restrictTeamInvite = !haveITeamPermission(state, {team: team.id, permission: Permissions.INVITE_USER});\n    const supportEmail = config.SupportEmail;\n\n    return {\n        townSquareDisplayName,\n        appDownloadLink,\n        isLicensed,\n        restrictTeamInvite,\n        supportEmail,\n    };\n}\n\nexport default connect(mapStateToProps)(TutorialView);\n","// Copyright (c) 2015-present Mattermost, Inc. All Rights Reserved.\n// See LICENSE.txt for license information.\n\nimport $ from 'jquery';\nimport PropTypes from 'prop-types';\nimport React from 'react';\nimport {FormattedMessage} from 'react-intl';\n\nimport * as UserAgent from 'utils/user_agent.jsx';\nimport deferComponentRender from 'components/deferComponentRender';\nimport ChannelHeader from 'components/channel_header';\nimport CreatePost from 'components/create_post';\nimport FileUploadOverlay from 'components/file_upload_overlay.jsx';\nimport PostView from 'components/post_view';\nimport TutorialView from 'components/tutorial';\nimport {clearMarks, mark, measure, trackEvent} from 'actions/diagnostics_actions.jsx';\nimport FormattedMarkdownMessage from 'components/formatted_markdown_message';\n\nexport default class ChannelView extends React.PureComponent {\n    static propTypes = {\n        channelId: PropTypes.string.isRequired,\n        deactivatedChannel: PropTypes.bool.isRequired,\n        match: PropTypes.shape({\n            url: PropTypes.string.isRequired,\n        }).isRequired,\n        showTutorial: PropTypes.bool.isRequired,\n        channelIsArchived: PropTypes.bool.isRequired,\n        viewArchivedChannels: PropTypes.bool.isRequired,\n        actions: PropTypes.shape({\n            goToLastViewedChannel: PropTypes.func.isRequired,\n        }),\n    };\n\n    constructor(props) {\n        super(props);\n\n        this.createDeferredPostView();\n    }\n\n    createDeferredPostView = () => {\n        this.deferredPostView = deferComponentRender(\n            PostView,\n            <div\n                id='post-list'\n                className='a11y__region'\n                data-a11y-sort-order='1'\n                data-a11y-focus-child={true}\n                data-a11y-order-reversed={true}\n            />\n        );\n    }\n\n    componentDidMount() {\n        const platform = window.navigator.platform;\n\n        $('body').addClass('app__body');\n\n        // IE Detection\n        if (UserAgent.isInternetExplorer() || UserAgent.isEdge()) {\n            $('body').addClass('browser--ie');\n        }\n\n        // OS Detection\n        if (platform === 'Win32' || platform === 'Win64') {\n            $('body').addClass('os--windows');\n        } else if (platform === 'MacIntel' || platform === 'MacPPC') {\n            $('body').addClass('os--mac');\n        }\n    }\n\n    componentWillUnmount() {\n        $('body').removeClass('app__body');\n    }\n\n    UNSAFE_componentWillReceiveProps(nextProps) { // eslint-disable-line camelcase\n        if (this.props.match.url !== nextProps.match.url) {\n            this.createDeferredPostView();\n        }\n    }\n\n    getChannelView = () => {\n        return this.refs.channelView;\n    }\n\n    onClickCloseChannel = () => {\n        this.props.actions.goToLastViewedChannel();\n    }\n\n    componentDidUpdate(prevProps) {\n        if (prevProps.channelId !== this.props.channelId || prevProps.channelIsArchived !== this.props.channelIsArchived) {\n            mark('ChannelView#componentDidUpdate');\n\n            const [dur1] = measure('SidebarChannelLink#click', 'ChannelView#componentDidUpdate');\n            const [dur2] = measure('TeamLink#click', 'ChannelView#componentDidUpdate');\n\n            clearMarks([\n                'SidebarChannelLink#click',\n                'ChannelView#componentDidUpdate',\n                'TeamLink#click',\n            ]);\n\n            if (dur1 !== -1) {\n                trackEvent('performance', 'channel_switch', {duration: Math.round(dur1)});\n            }\n            if (dur2 !== -1) {\n                trackEvent('performance', 'team_switch', {duration: Math.round(dur2)});\n            }\n            if (this.props.channelIsArchived && !this.props.viewArchivedChannels) {\n                this.props.actions.goToLastViewedChannel();\n            }\n        }\n    }\n\n    render() {\n        const {channelIsArchived} = this.props;\n        if (this.props.showTutorial) {\n            return (\n                <TutorialView\n                    isRoot={false}\n                />\n            );\n        }\n\n        let createPost;\n        if (this.props.deactivatedChannel) {\n            createPost = (\n                <div\n                    className='post-create-message'\n                >\n                    <FormattedMessage\n                        id='create_post.deactivated'\n                        defaultMessage='You are viewing an archived channel with a deactivated user.'\n                    />\n                </div>\n            );\n        } else {\n            createPost = (\n                <div\n                    className='post-create__container'\n                    id='post-create'\n                >\n                    {!channelIsArchived &&\n                        <CreatePost\n                            getChannelView={this.getChannelView}\n                        />\n                    }\n                    {channelIsArchived &&\n                        <div className='channel-archived__message'>\n                            <FormattedMarkdownMessage\n                                id='archivedChannelMessage'\n                                defaultMessage='You are viewing an **archived channel**. New messages cannot be posted.'\n                            />\n                            <button\n                                className='btn btn-primary channel-archived__close-btn'\n                                onClick={this.onClickCloseChannel}\n                            >\n                                <FormattedMessage\n                                    id='center_panel.archived.closeChannel'\n                                    defaultMessage='Close Channel'\n                                />\n                            </button>\n                        </div>\n                    }\n                </div>\n            );\n        }\n\n        const DeferredPostView = this.deferredPostView;\n\n        return (\n            <div\n                ref='channelView'\n                id='app-content'\n                className='app__content'\n            >\n                <FileUploadOverlay overlayType='center'/>\n                <ChannelHeader\n                    channelId={this.props.channelId}\n                />\n                <DeferredPostView\n                    channelId={this.props.channelId}\n                />\n                {createPost}\n            </div>\n        );\n    }\n}\n","// Copyright (c) 2015-present Mattermost, Inc. All Rights Reserved.\n// See LICENSE.txt for license information.\n\nimport {bindActionCreators} from 'redux';\nimport {connect} from 'react-redux';\nimport {createSelector} from 'reselect';\nimport {getInt} from 'mattermost-redux/selectors/entities/preferences';\nimport {getCurrentChannel} from 'mattermost-redux/selectors/entities/channels';\nimport {getCurrentUserId} from 'mattermost-redux/selectors/entities/users';\nimport {getConfig} from 'mattermost-redux/selectors/entities/general';\nimport {withRouter} from 'react-router-dom';\n\nimport {getDirectTeammate} from 'utils/utils.jsx';\nimport {TutorialSteps, Preferences} from 'utils/constants.jsx';\n\nimport {goToLastViewedChannel} from 'actions/views/channel';\n\nimport ChannelView from './channel_view.jsx';\n\n// Temporary selector until getDirectTeammate is converted to be redux-friendly\nconst getDeactivatedChannel = createSelector(\n    (state) => state.entities.users.profiles,\n    (state, channelId) => channelId,\n    (users, channelId) => {\n        const teammate = getDirectTeammate(channelId);\n        return Boolean(teammate && teammate.delete_at);\n    }\n);\n\nfunction mapStateToProps(state) {\n    const channel = getCurrentChannel(state);\n\n    const config = getConfig(state);\n    const enableTutorial = config.EnableTutorial === 'true';\n    const tutorialStep = getInt(state, Preferences.TUTORIAL_STEP, getCurrentUserId(state), TutorialSteps.FINISHED);\n    const viewArchivedChannels = config.ExperimentalViewArchivedChannels === 'true';\n\n    return {\n        channelId: channel ? channel.id : '',\n        deactivatedChannel: channel ? getDeactivatedChannel(state, channel.id) : false,\n        showTutorial: enableTutorial && tutorialStep <= TutorialSteps.INTRO_SCREENS,\n        channelIsArchived: channel ? channel.delete_at !== 0 : false,\n        viewArchivedChannels,\n    };\n}\n\nfunction mapDispatchToProps(dispatch) {\n    return {\n        actions: bindActionCreators({\n            goToLastViewedChannel,\n        }, dispatch),\n    };\n}\n\nexport default withRouter(connect(mapStateToProps, mapDispatchToProps)(ChannelView));\n","// Copyright (c) 2015-present Mattermost, Inc. All Rights Reserved.\n// See LICENSE.txt for license information.\n\nimport React from 'react';\nimport PropTypes from 'prop-types';\n\nimport ChannelView from 'components/channel_view/index';\n\nexport default class ChannelIdentifierRouter extends React.PureComponent {\n    static propTypes = {\n\n        /*\n         * Object from react-router\n         */\n        match: PropTypes.shape({\n            params: PropTypes.shape({\n                identifier: PropTypes.string.isRequired,\n                team: PropTypes.string.isRequired,\n            }).isRequired,\n        }).isRequired,\n\n        actions: PropTypes.shape({\n            onChannelByIdentifierEnter: PropTypes.func.isRequired,\n        }).isRequired,\n    }\n\n    constructor(props) {\n        super(props);\n\n        this.props.actions.onChannelByIdentifierEnter(props);\n    }\n\n    UNSAFE_componentWillReceiveProps(nextProps) { // eslint-disable-line camelcase\n        if (this.props.match.params.team !== nextProps.match.params.team ||\n            this.props.match.params.identifier !== nextProps.match.params.identifier) {\n            this.props.actions.onChannelByIdentifierEnter(nextProps);\n        }\n    }\n\n    render() {\n        return <ChannelView/>;\n    }\n}\n","// Copyright (c) 2015-present Mattermost, Inc. All Rights Reserved.\n// See LICENSE.txt for license information.\n\nimport {connect} from 'react-redux';\nimport {bindActionCreators} from 'redux';\nimport {withRouter} from 'react-router-dom';\n\nimport {onChannelByIdentifierEnter} from './actions';\n\nimport ChannelIdentifierRouter from './channel_identifier_router.jsx';\n\nfunction mapDispatchToProps(dispatch) {\n    return {\n        actions: bindActionCreators({\n            onChannelByIdentifierEnter,\n        }, dispatch),\n    };\n}\n\nexport default withRouter(connect(null, mapDispatchToProps)(ChannelIdentifierRouter));\n","// Copyright (c) 2015-present Mattermost, Inc. All Rights Reserved.\n// See LICENSE.txt for license information.\n\nimport React from 'react';\nimport PropTypes from 'prop-types';\nimport {Route, Switch, Redirect} from 'react-router-dom';\nimport classNames from 'classnames';\n\nimport PermalinkView from 'components/permalink_view';\nimport ChannelHeaderMobile from 'components/channel_header_mobile';\nimport ChannelIdentifierRouter from 'components/channel_layout/channel_identifier_router';\n\nexport default class CenterChannel extends React.PureComponent {\n    static propTypes = {\n        match: PropTypes.object.isRequired,\n        location: PropTypes.object.isRequired,\n        lastChannelPath: PropTypes.string.isRequired,\n        lhsOpen: PropTypes.bool.isRequired,\n        rhsOpen: PropTypes.bool.isRequired,\n        rhsMenuOpen: PropTypes.bool.isRequired,\n    };\n\n    constructor(props) {\n        super(props);\n        this.state = {\n            returnTo: '',\n        };\n    }\n\n    UNSAFE_componentWillReceiveProps(nextProps) { // eslint-disable-line camelcase\n        if (this.props.location.pathname !== nextProps.location.pathname && nextProps.location.pathname.includes('/pl/')) {\n            this.setState({returnTo: this.props.location.pathname});\n        }\n    }\n\n    render() {\n        const {lastChannelPath} = this.props;\n        const url = this.props.match.url;\n        return (\n            <div\n                key='inner-wrap'\n                className={classNames('inner-wrap', 'channel__wrap', {\n                    'move--right': this.props.lhsOpen,\n                    'move--left': this.props.rhsOpen,\n                    'move--left-small': this.props.rhsMenuOpen,\n                })}\n            >\n                <div className='row header'>\n                    <div id='navbar'>\n                        <ChannelHeaderMobile/>\n                    </div>\n                </div>\n                <div className='row main'>\n                    <Switch>\n                        <Route\n                            path={`${url}/pl/:postid`}\n                            render={(props) => (\n                                <PermalinkView\n                                    {...props}\n                                    returnTo={this.state.returnTo}\n                                />\n                            )}\n                        />\n                        <Route\n                            path={'/:team/:path(channels|messages)/:identifier'}\n                            component={ChannelIdentifierRouter}\n                        />\n                        <Redirect to={lastChannelPath}/>\n                    </Switch>\n                </div>\n            </div>\n        );\n    }\n}\n","// Copyright (c) 2015-present Mattermost, Inc. All Rights Reserved.\n// See LICENSE.txt for license information.\n\nimport {connect} from 'react-redux';\n\nimport {getTeamByName} from 'mattermost-redux/selectors/entities/teams';\nimport {getRedirectChannelNameForTeam} from 'mattermost-redux/selectors/entities/channels';\n\nimport {getIsRhsOpen, getIsRhsMenuOpen} from 'selectors/rhs';\nimport {getIsLhsOpen} from 'selectors/lhs';\nimport {getLastViewedChannelNameByTeamName} from 'selectors/local_storage';\n\nimport CenterChannel from './center_channel';\n\nconst mapStateToProps = (state, ownProps) => {\n    let channelName = getLastViewedChannelNameByTeamName(state, ownProps.match.params.team);\n    if (!channelName) {\n        const team = getTeamByName(state, ownProps.match.params.team);\n        channelName = getRedirectChannelNameForTeam(state, team.id);\n    }\n    const lastChannelPath = `${ownProps.match.url}/channels/${channelName}`;\n    return {\n        lastChannelPath,\n        lhsOpen: getIsLhsOpen(state),\n        rhsOpen: getIsRhsOpen(state),\n        rhsMenuOpen: getIsRhsMenuOpen(state),\n    };\n};\n\nexport default connect(mapStateToProps)(CenterChannel);\n","// Copyright (c) 2015-present Mattermost, Inc. All Rights Reserved.\n// See LICENSE.txt for license information.\n\nimport React from 'react';\nimport PropTypes from 'prop-types';\nimport {Route} from 'react-router-dom';\n\nimport AnnouncementBarController from 'components/announcement_bar';\n\nimport Pluggable from 'plugins/pluggable';\nimport SystemNotice from 'components/system_notice';\nimport EditPostModal from 'components/edit_post_modal';\nimport GetPostLinkModal from 'components/get_post_link_modal';\nimport GetTeamInviteLinkModal from 'components/get_team_invite_link_modal';\nimport GetPublicLinkModal from 'components/get_public_link_modal';\nimport LeavePrivateChannelModal from 'components/leave_private_channel_modal';\nimport ResetStatusModal from 'components/reset_status_modal';\nimport ShortcutsModal from 'components/shortcuts_modal.jsx';\nimport SidebarRight from 'components/sidebar_right';\nimport SidebarRightMenu from 'components/sidebar_right_menu';\nimport ImportThemeModal from 'components/user_settings/import_theme_modal.jsx';\nimport ModalController from 'components/modal_controller';\nimport TeamSidebar from 'components/team_sidebar';\nimport Sidebar from 'components/sidebar';\nimport * as Utils from 'utils/utils';\nimport CenterChannel from 'components/channel_layout/center_channel';\n\nexport default class ChannelController extends React.Component {\n    static propTypes = {\n        pathName: PropTypes.string.isRequired,\n        teamType: PropTypes.string.isRequired,\n    };\n\n    shouldComponentUpdate(nextProps) {\n        return this.props.teamType !== nextProps.teamType || this.props.pathName !== nextProps.pathName;\n    }\n\n    render() {\n        return (\n            <div\n                id='channel_view'\n                className='channel-view'\n            >\n                <AnnouncementBarController/>\n                <SystemNotice/>\n\n                <div className='container-fluid'>\n                    <SidebarRight/>\n                    <SidebarRightMenu teamType={this.props.teamType}/>\n                    <Route component={TeamSidebar}/>\n                    <Route component={Sidebar}/>\n                    <Route component={CenterChannel}/>\n                    <Pluggable pluggableName='Root'/>\n                    <GetPostLinkModal/>\n                    <GetPublicLinkModal/>\n                    <GetTeamInviteLinkModal/>\n                    <ImportThemeModal/>\n                    <EditPostModal/>\n                    <ResetStatusModal/>\n                    <LeavePrivateChannelModal/>\n                    <ShortcutsModal isMac={Utils.isMac()}/>\n                    <ModalController/>\n                </div>\n            </div>\n        );\n    }\n}\n","// Copyright (c) 2015-present Mattermost, Inc. All Rights Reserved.\n// See LICENSE.txt for license information.\n\nimport PropTypes from 'prop-types';\nimport React from 'react';\nimport {Route, Switch} from 'react-router-dom';\nimport iNoBounce from 'inobounce';\n\nimport {startPeriodicStatusUpdates, stopPeriodicStatusUpdates} from 'actions/status_actions.jsx';\nimport {startPeriodicSync, stopPeriodicSync, reconnect} from 'actions/websocket_actions.jsx';\nimport * as GlobalActions from 'actions/global_actions.jsx';\nimport Constants from 'utils/constants.jsx';\nimport * as UserAgent from 'utils/user_agent.jsx';\nimport * as Utils from 'utils/utils.jsx';\nimport {makeAsyncComponent} from 'components/async_load';\nimport loadBackstageController from 'bundle-loader?lazy!components/backstage';\nimport ChannelController from 'components/channel_layout/channel_controller';\n\nconst BackstageController = makeAsyncComponent(loadBackstageController);\n\nlet wakeUpInterval;\nlet lastTime = Date.now();\nconst WAKEUP_CHECK_INTERVAL = 30000; // 30 seconds\nconst WAKEUP_THRESHOLD = 60000; // 60 seconds\nconst UNREAD_CHECK_TIME_MILLISECONDS = 10000;\n\nexport default class NeedsTeam extends React.Component {\n    static propTypes = {\n        params: PropTypes.object,\n        currentUser: PropTypes.object,\n        currentChannelId: PropTypes.string,\n        currentTeamId: PropTypes.string,\n        actions: PropTypes.shape({\n            fetchMyChannelsAndMembers: PropTypes.func.isRequired,\n            getMyTeamUnreads: PropTypes.func.isRequired,\n            viewChannel: PropTypes.func.isRequired,\n            markChannelAsRead: PropTypes.func.isRequired,\n            getTeamByName: PropTypes.func.isRequired,\n            addUserToTeam: PropTypes.func.isRequired,\n            selectTeam: PropTypes.func.isRequired,\n            setPreviousTeamId: PropTypes.func.isRequired,\n            loadStatusesForChannelAndSidebar: PropTypes.func.isRequired,\n            loadProfilesForDirect: PropTypes.func.isRequired,\n        }).isRequired,\n        theme: PropTypes.object.isRequired,\n        mfaRequired: PropTypes.bool.isRequired,\n\n        /*\n         * Object from react-router\n         */\n        match: PropTypes.shape({\n            params: PropTypes.shape({\n                team: PropTypes.string.isRequired,\n            }).isRequired,\n        }).isRequired,\n        history: PropTypes.object.isRequired,\n    };\n\n    constructor(params) {\n        super(params);\n        this.blurTime = new Date().getTime();\n\n        if (this.props.mfaRequired) {\n            this.props.history.push('/mfa/setup');\n            return;\n        }\n\n        clearInterval(wakeUpInterval);\n\n        wakeUpInterval = setInterval(() => {\n            const currentTime = (new Date()).getTime();\n            if (currentTime > (lastTime + WAKEUP_THRESHOLD)) { // ignore small delays\n                console.log('computer woke up - fetching latest'); //eslint-disable-line no-console\n                reconnect(false);\n            }\n            lastTime = currentTime;\n        }, WAKEUP_CHECK_INTERVAL);\n\n        const team = this.updateCurrentTeam(this.props);\n\n        this.state = {\n            team,\n            finishedFetchingChannels: false,\n        };\n\n        if (!team) {\n            this.joinTeam(this.props);\n        }\n    }\n\n    UNSAFE_componentWillReceiveProps(nextProps) { // eslint-disable-line camelcase\n        if (this.props.match.params.team !== nextProps.match.params.team) {\n            const team = this.updateCurrentTeam(nextProps);\n            this.setState({\n                team,\n            });\n            if (!team) {\n                this.joinTeam(nextProps);\n            }\n        }\n    }\n\n    componentDidMount() {\n        startPeriodicStatusUpdates();\n        startPeriodicSync();\n\n        // Set up tracking for whether the window is active\n        window.isActive = true;\n        Utils.applyTheme(this.props.theme);\n\n        if (UserAgent.isIosSafari()) {\n            // Use iNoBounce to prevent scrolling past the boundaries of the page\n            iNoBounce.enable();\n        }\n\n        window.addEventListener('focus', this.handleFocus);\n        window.addEventListener('blur', this.handleBlur);\n        window.addEventListener('keydown', this.onShortcutKeyDown);\n    }\n\n    componentDidUpdate(prevProps) {\n        const {theme} = this.props;\n        if (!Utils.areObjectsEqual(prevProps.theme, theme)) {\n            Utils.applyTheme(theme);\n        }\n    }\n\n    componentWillUnmount() {\n        window.isActive = false;\n        stopPeriodicStatusUpdates();\n        stopPeriodicSync();\n        if (UserAgent.isIosSafari()) {\n            iNoBounce.disable();\n        }\n\n        clearInterval(wakeUpInterval);\n        window.removeEventListener('focus', this.handleFocus);\n        window.removeEventListener('blur', this.handleBlur);\n        window.removeEventListener('keydown', this.onShortcutKeyDown);\n    }\n\n    handleBlur = () => {\n        window.isActive = false;\n        this.blurTime = new Date().getTime();\n        if (this.props.currentUser) {\n            this.props.actions.viewChannel('');\n        }\n    }\n\n    handleFocus = () => {\n        this.props.actions.markChannelAsRead(this.props.currentChannelId);\n        window.isActive = true;\n\n        if (Date.now() - this.blurTime > UNREAD_CHECK_TIME_MILLISECONDS) {\n            this.props.actions.fetchMyChannelsAndMembers(this.props.currentTeamId);\n            this.props.actions.loadProfilesForDirect();\n        }\n    }\n\n    joinTeam = async (props) => {\n        const {data: team} = await this.props.actions.getTeamByName(props.match.params.team);\n        if (team) {\n            const {error} = await props.actions.addUserToTeam(team.id, props.currentUser && props.currentUser.id);\n            if (error) {\n                props.history.push('/error?type=team_not_found');\n            } else {\n                this.setState({team});\n                this.initTeam(team);\n            }\n        } else {\n            props.history.push('/error?type=team_not_found');\n        }\n    }\n\n    initTeam = (team) => {\n        // If current team is set, then this is not first load\n        // The first load action pulls team unreads\n        this.props.actions.getMyTeamUnreads();\n        this.props.actions.selectTeam(team);\n        this.props.actions.setPreviousTeamId(team.id);\n        GlobalActions.emitCloseRightHandSide();\n\n        this.props.actions.fetchMyChannelsAndMembers(team.id).then(\n            () => {\n                this.setState({\n                    finishedFetchingChannels: true,\n                });\n            }\n        );\n\n        this.props.actions.loadStatusesForChannelAndSidebar();\n        this.props.actions.loadProfilesForDirect();\n\n        return team;\n    }\n\n    updateCurrentTeam = (props) => {\n        // First check to make sure you're in the current team\n        // for the current url.\n        const team = props.teamsList ? props.teamsList.find((teamObj) => teamObj.name === props.match.params.team) : null;\n        if (team) {\n            this.initTeam(team);\n            return team;\n        }\n        return null;\n    }\n\n    onShortcutKeyDown = (e) => {\n        if (e.shiftKey && Utils.cmdOrCtrlPressed(e) && Utils.isKeyPressed(e, Constants.KeyCodes.L)) {\n            const sidebar = document.getElementById('sidebar-right');\n            if (sidebar) {\n                if (sidebar.className.match('sidebar--right sidebar--right--expanded move--left')) {\n                    const replyTextbox = document.getElementById('reply_textbox');\n                    if (replyTextbox) {\n                        replyTextbox.focus();\n                    }\n                } else {\n                    const postTextbox = document.getElementById('post_textbox');\n                    if (postTextbox) {\n                        postTextbox.focus();\n                    }\n                }\n            }\n        }\n    }\n\n    render() {\n        if (this.state.team === null || this.state.finishedFetchingChannels === false) {\n            return <div/>;\n        }\n        const teamType = this.state.team ? this.state.team.type : '';\n\n        return (\n            <Switch>\n                <Route\n                    path={'/:team/integrations'}\n                    component={BackstageController}\n                />\n                <Route\n                    path={'/:team/emoji'}\n                    component={BackstageController}\n                />\n                <Route\n                    render={(renderProps) => (\n                        <ChannelController\n                            pathName={renderProps.location.pathname}\n                            teamType={teamType}\n                        />\n                    )}\n                />\n            </Switch>\n        );\n    }\n}\n","// Copyright (c) 2015-present Mattermost, Inc. All Rights Reserved.\n// See LICENSE.txt for license information.\n\nimport {connect} from 'react-redux';\nimport {bindActionCreators} from 'redux';\nimport {withRouter} from 'react-router-dom';\n\nimport {loadProfilesForDirect} from 'mattermost-redux/actions/users';\nimport {fetchMyChannelsAndMembers, markChannelAsRead, viewChannel} from 'mattermost-redux/actions/channels';\nimport {getMyTeamUnreads, getTeamByName, selectTeam} from 'mattermost-redux/actions/teams';\nimport {getTheme} from 'mattermost-redux/selectors/entities/preferences';\nimport {getLicense, getConfig} from 'mattermost-redux/selectors/entities/general';\nimport {getCurrentUser} from 'mattermost-redux/selectors/entities/users';\nimport {getCurrentTeamId, getMyTeams} from 'mattermost-redux/selectors/entities/teams';\nimport {getCurrentChannelId} from 'mattermost-redux/selectors/entities/channels';\n\nimport {loadStatusesForChannelAndSidebar} from 'actions/status_actions';\nimport {setPreviousTeamId} from 'actions/local_storage';\nimport {addUserToTeam} from 'actions/team_actions';\nimport {checkIfMFARequired} from 'utils/route';\n\nimport NeedsTeam from './needs_team.jsx';\n\nfunction mapStateToProps(state, ownProps) {\n    const license = getLicense(state);\n    const config = getConfig(state);\n    const currentUser = getCurrentUser(state);\n\n    return {\n        theme: getTheme(state),\n        mfaRequired: checkIfMFARequired(currentUser, license, config, ownProps.match.url),\n        currentUser,\n        currentTeamId: getCurrentTeamId(state),\n        teamsList: getMyTeams(state),\n        currentChannelId: getCurrentChannelId(state),\n    };\n}\n\nfunction mapDispatchToProps(dispatch) {\n    return {\n        actions: bindActionCreators({\n            fetchMyChannelsAndMembers,\n            getMyTeamUnreads,\n            viewChannel,\n            markChannelAsRead,\n            getTeamByName,\n            addUserToTeam,\n            setPreviousTeamId,\n            selectTeam,\n            loadStatusesForChannelAndSidebar,\n            loadProfilesForDirect,\n        }, dispatch),\n    };\n}\n\nexport default withRouter(connect(mapStateToProps, mapDispatchToProps)(NeedsTeam));\n","// Copyright (c) 2015-present Mattermost, Inc. All Rights Reserved.\n// See LICENSE.txt for license information.\n\nimport React from 'react';\nimport PropTypes from 'prop-types';\nimport {Modal} from 'react-bootstrap';\nimport {FormattedMessage} from 'react-intl';\n\nexport default class RemovedFromChannelModal extends React.PureComponent {\n    static propTypes = {\n        currentUserId: PropTypes.string.isRequired,\n        onHide: PropTypes.func.isRequired,\n        channelName: PropTypes.string,\n        remover: PropTypes.string,\n        actions: PropTypes.shape({\n            goToLastViewedChannel: PropTypes.func.isRequired,\n        }),\n    };\n\n    constructor(props) {\n        super(props);\n\n        this.state = {show: true};\n    }\n\n    componentDidMount() {\n        this.props.actions.goToLastViewedChannel();\n    }\n\n    onHide = () => {\n        this.setState({show: false});\n    }\n\n    render() {\n        let channelName = (\n            <FormattedMessage\n                id='removed_channel.channelName'\n                defaultMessage='the channel'\n            />\n        );\n        if (this.props.channelName) {\n            channelName = this.props.channelName;\n        }\n\n        let remover = (\n            <FormattedMessage\n                id='removed_channel.someone'\n                defaultMessage='Someone'\n            />\n        );\n        if (this.props.remover) {\n            remover = this.props.remover;\n        }\n\n        if (this.props.currentUserId === '') {\n            return null;\n        }\n\n        return (\n            <Modal\n                dialogClassName='a11y__modal'\n                show={this.state.show}\n                onHide={this.onHide}\n                onExited={this.props.onHide}\n                role='dialog'\n                aria-labelledby='removeFromChannelModalLabel'\n            >\n                <Modal.Header closeButton={true}>\n                    <Modal.Title\n                        componentClass='h1'\n                        id='removeFromChannelModalLabel'\n                    >\n                        <FormattedMessage\n                            id='removed_channel.from'\n                            defaultMessage='Removed from '\n                        />\n                        <span className='name'>\n                            {channelName}\n                        </span>\n                    </Modal.Title>\n                </Modal.Header>\n                <Modal.Body ref='modalBody'>\n                    <p>\n                        <FormattedMessage\n                            id='removed_channel.remover'\n                            defaultMessage='{remover} removed you from {channel}'\n                            values={{\n                                remover,\n                                channel: (channelName),\n                            }}\n                        />\n                    </p>\n                </Modal.Body>\n                <Modal.Footer>\n                    <button\n                        type='button'\n                        className='btn btn-primary'\n                        onClick={this.onHide}\n                    >\n                        <FormattedMessage\n                            id='removed_channel.okay'\n                            defaultMessage='Okay'\n                        />\n                    </button>\n                </Modal.Footer>\n            </Modal>\n        );\n    }\n}\n","// Copyright (c) 2015-present Mattermost, Inc. All Rights Reserved.\n// See LICENSE.txt for license information.\n\nimport {bindActionCreators} from 'redux';\nimport {connect} from 'react-redux';\nimport {getCurrentUserId} from 'mattermost-redux/selectors/entities/users';\n\nimport {goToLastViewedChannel} from 'actions/views/channel';\n\nimport RemovedFromChannelModal from './removed_from_channel_modal';\n\nfunction mapStateToProps(state) {\n    return {\n        currentUserId: getCurrentUserId(state),\n    };\n}\n\nfunction mapDispatchToProps(dispatch) {\n    return {\n        actions: bindActionCreators({\n            goToLastViewedChannel,\n        }, dispatch),\n    };\n}\n\nexport default connect(mapStateToProps, mapDispatchToProps)(RemovedFromChannelModal);\n","// Copyright (c) 2015-present Mattermost, Inc. All Rights Reserved.\n// See LICENSE.txt for license information.\nimport {\n    IntegrationTypes,\n} from 'mattermost-redux/action_types';\n\nimport {openModal} from 'actions/views/modals';\n\nimport {ModalIdentifiers} from 'utils/constants.jsx';\n\nimport InteractiveDialog from 'components/interactive_dialog';\nimport store from '../stores/redux_store';\n\nexport function openInteractiveDialog(dialog) {\n    store.dispatch({type: IntegrationTypes.RECEIVED_DIALOG, data: dialog});\n\n    store.dispatch(openModal({modalId: ModalIdentifiers.INTERACTIVE_DIALOG, dialogType: InteractiveDialog}));\n}\n\n// This code is problematic for a couple of different reasons:\n// * it monitors the store to modify the store: this is perhaps better handled by a saga\n// * it makes importing this file impure by triggering a side-effect which may not be obvious\n// * it's not really located in the \"right place\": dialogs are applicable to non-plugins too\n// * it's nigh impossible to test as written\n//\n// It's worth fixing all of this, but I think this requires some refactoring.\nlet previousTriggerId = '';\nstore.subscribe(() => {\n    const state = store.getState();\n    const currentTriggerId = state.entities.integrations.dialogTriggerId;\n\n    if (currentTriggerId === previousTriggerId) {\n        return;\n    }\n\n    previousTriggerId = currentTriggerId;\n\n    const dialog = state.entities.integrations.dialog || {};\n    if (dialog.trigger_id !== currentTriggerId) {\n        return;\n    }\n\n    store.dispatch(openModal({modalId: ModalIdentifiers.INTERACTIVE_DIALOG, dialogType: InteractiveDialog}));\n});\n","// Copyright (c) 2015-present Mattermost, Inc. All Rights Reserved.\n// See LICENSE.txt for license information.\n\nimport messageHtmlToComponent from 'utils/message_html_to_component';\nimport {formatText} from 'utils/text_formatting.jsx';\n\n// The following import has intentional side effects. Do not remove without research.\nimport {openInteractiveDialog} from './interactive_dialog';\n\n// Common libraries exposed on window for plugins to use as Webpack externals.\nwindow.React = require('react');\nwindow.ReactDOM = require('react-dom');\nwindow.Redux = require('redux');\nwindow.ReactRedux = require('react-redux');\nwindow.ReactBootstrap = require('react-bootstrap');\nwindow.PostUtils = {formatText, messageHtmlToComponent};\nwindow.PropTypes = require('prop-types');\nwindow.PDFJS = require('pdfjs-dist');\nwindow.openInteractiveDialog = openInteractiveDialog;\n","// Copyright (c) 2015-present Mattermost, Inc. All Rights Reserved.\n// See LICENSE.txt for license information.\n\nimport PropTypes from 'prop-types';\nimport React from 'react';\nimport {IntlProvider as BaseIntlProvider} from 'react-intl';\n\nimport {Client4} from 'mattermost-redux/client';\nimport {setLocalizeFunction} from 'mattermost-redux/utils/i18n_utils';\n\nimport * as I18n from 'i18n/i18n';\n\nimport {localizeMessage} from 'utils/utils';\n\nexport default class IntlProvider extends React.PureComponent {\n    static propTypes = {\n        children: PropTypes.element.isRequired,\n        locale: PropTypes.string.isRequired,\n        translations: PropTypes.object,\n        actions: PropTypes.shape({\n            loadTranslations: PropTypes.func.isRequired,\n        }).isRequired,\n    };\n\n    componentDidMount() {\n        // Initialize browser's i18n data\n        I18n.doAddLocaleData();\n\n        // Pass localization function back to mattermost-redux\n        setLocalizeFunction(localizeMessage);\n\n        this.handleLocaleChange(this.props.locale);\n    }\n\n    componentDidUpdate(prevProps) {\n        if (prevProps.locale !== this.props.locale) {\n            this.handleLocaleChange(this.props.locale);\n        }\n    }\n\n    handleLocaleChange = (locale) => {\n        Client4.setAcceptLanguage(locale);\n\n        this.loadTranslationsIfNecessary(locale);\n    }\n\n    loadTranslationsIfNecessary = (locale) => {\n        if (this.props.translations) {\n            // Already loaded\n            return;\n        }\n        const localeInfo = I18n.getLanguageInfo(locale);\n\n        if (!localeInfo) {\n            return;\n        }\n\n        this.props.actions.loadTranslations(locale, localeInfo.url);\n    }\n\n    render() {\n        if (!this.props.translations) {\n            return null;\n        }\n\n        return (\n            <BaseIntlProvider\n                key={this.props.locale}\n                locale={this.props.locale}\n                messages={this.props.translations}\n            >\n                {this.props.children}\n            </BaseIntlProvider>\n        );\n    }\n}\n","// Copyright (c) 2015-present Mattermost, Inc. All Rights Reserved.\n// See LICENSE.txt for license information.\n\nimport {connect} from 'react-redux';\nimport {bindActionCreators} from 'redux';\n\nimport {loadTranslations} from 'actions/views/root';\n\nimport {getCurrentLocale, getTranslations} from 'selectors/i18n';\n\nimport IntlProvider from './intl_provider';\n\nfunction mapStateToProps(state) {\n    const locale = getCurrentLocale(state);\n\n    return {\n        locale,\n        translations: getTranslations(state, locale),\n    };\n}\n\nfunction mapDispatchToProps(dispatch) {\n    return {\n        actions: bindActionCreators({\n            loadTranslations,\n        }, dispatch),\n    };\n}\n\nexport default connect(mapStateToProps, mapDispatchToProps)(IntlProvider);\n"],"sourceRoot":""}