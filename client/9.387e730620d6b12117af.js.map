{"version":3,"sources":["webpack:///./components/icon/next_icon.jsx","webpack:///./components/icon/previous_icon.jsx","webpack:///./node_modules/mattermost-redux/selectors/entities/integrations.js","webpack:///./node_modules/mattermost-redux/selectors/entities/bots.js","webpack:///./node_modules/mattermost-redux/actions/bots.js","webpack:///./images/bot_default_icon.png","webpack:///./images/incoming_webhook.jpg","webpack:///./images/oauth_icon.png","webpack:///./images/outgoing_webhook.jpg","webpack:///./images/slash_command_icon.jpg","webpack:///./components/icon/search_icon.jsx","webpack:///./components/backstage/components/backstage_list.jsx","webpack:///./components/integrations/bots/bot.jsx","webpack:///./components/integrations/bots/bots.jsx","webpack:///./components/integrations/bots/index.js","webpack:///./components/backstage/components/backstage_header.jsx","webpack:///./components/integrations/bots/add_bot/add_bot.jsx","webpack:///./components/integrations/bots/add_bot/index.js","webpack:///./components/integrations/integration_option.jsx","webpack:///./components/integrations/integrations.jsx","webpack:///./components/integrations/index.js","webpack:///./components/permissions_gates/any_team_permission_gate/any_team_permission_gate.jsx","webpack:///./components/permissions_gates/any_team_permission_gate/index.js","webpack:///./components/delete_modal_trigger.jsx","webpack:///./components/emoji/delete_emoji_modal.jsx","webpack:///./components/emoji/emoji_list_item/emoji_list_item.jsx","webpack:///./components/emoji/emoji_list_item/index.js","webpack:///./components/emoji/emoji_list/emoji_list.jsx","webpack:///./components/emoji/emoji_list/index.js","webpack:///./components/emoji/emoji_page.jsx","webpack:///./components/emoji/index.js","webpack:///./components/emoji/add_emoji/add_emoji.jsx","webpack:///./components/emoji/add_emoji/index.js","webpack:///./actions/integration_actions.jsx","webpack:///./components/copy_text.jsx","webpack:///./components/integrations/delete_integration.jsx","webpack:///./components/integrations/installed_incoming_webhook.jsx","webpack:///./components/integrations/installed_incoming_webhooks/installed_incoming_webhooks.jsx","webpack:///./components/integrations/installed_incoming_webhooks/index.js","webpack:///./components/channel_select/channel_select.jsx","webpack:///./components/channel_select/index.js","webpack:///./components/integrations/abstract_incoming_webhook.jsx","webpack:///./components/integrations/add_incoming_webhook/add_incoming_webhook.jsx","webpack:///./components/integrations/add_incoming_webhook/index.js","webpack:///./components/integrations/edit_incoming_webhook/edit_incoming_webhook.jsx","webpack:///./components/integrations/edit_incoming_webhook/index.js","webpack:///./components/integrations/installed_outgoing_webhook.jsx","webpack:///./components/integrations/installed_outgoing_webhooks/installed_outgoing_webhooks.jsx","webpack:///./components/integrations/installed_outgoing_webhooks/index.js","webpack:///./components/integrations/abstract_outgoing_webhook.jsx","webpack:///./components/integrations/add_outgoing_webhook/add_outgoing_webhook.jsx","webpack:///./components/integrations/add_outgoing_webhook/index.js","webpack:///./components/integrations/edit_outgoing_webhook/edit_outgoing_webhook.jsx","webpack:///./components/integrations/edit_outgoing_webhook/index.js","webpack:///./components/integrations/installed_oauth_app/installed_oauth_app.jsx","webpack:///./components/integrations/installed_oauth_app/index.js","webpack:///./components/integrations/installed_oauth_apps/installed_oauth_apps.jsx","webpack:///./components/integrations/installed_oauth_apps/index.js","webpack:///./components/integrations/abstract_oauth_app.jsx","webpack:///./components/integrations/add_oauth_app/add_oauth_app.jsx","webpack:///./components/integrations/add_oauth_app/index.js","webpack:///./components/integrations/edit_oauth_app/edit_oauth_app.jsx","webpack:///./components/integrations/edit_oauth_app/index.js","webpack:///./components/integrations/installed_command.jsx","webpack:///./components/integrations/installed_commands/installed_commands.jsx","webpack:///./components/integrations/installed_commands/index.js","webpack:///./components/integrations/abstract_command.jsx","webpack:///./components/integrations/add_command/add_command.jsx","webpack:///./components/integrations/add_command/index.js","webpack:///./components/integrations/edit_command/edit_command.jsx","webpack:///./components/integrations/edit_command/index.js","webpack:///./components/integrations/confirm_integration/confirm_integration.jsx","webpack:///./components/integrations/confirm_integration/index.js","webpack:///./components/integrations/commands_container/commands_container.jsx","webpack:///./components/integrations/commands_container/index.js","webpack:///./components/backstage/components/backstage_category.jsx","webpack:///./components/backstage/components/backstage_section.jsx","webpack:///./components/backstage/components/backstage_sidebar.jsx","webpack:///./components/backstage/components/backstage_navbar.jsx","webpack:///./components/backstage/backstage_controller.jsx","webpack:///./components/backstage/index.js"],"names":["NextIcon","React","PureComponent","className","this","props","additionalClassName","react__WEBPACK_IMPORTED_MODULE_3___default","a","createElement","react_intl__WEBPACK_IMPORTED_MODULE_4__","id","defaultMessage","title","PropTypes","string","PreviousIcon","react__WEBPACK_IMPORTED_MODULE_2___default","react_intl__WEBPACK_IMPORTED_MODULE_3__","Object","defineProperty","exports","value","getIncomingHooks","state","entities","integrations","incomingHooks","getOutgoingHooks","getCommands","getOAuthApps","oauthApps","getSystemCommands","getAutocompleteCommandsList","getAllCommands","getOutgoingHooksInCurrentTeam","__webpack_require__","_reselect","_teams","ownKeys","object","enumerableOnly","keys","getOwnPropertySymbols","symbols","filter","sym","getOwnPropertyDescriptor","enumerable","push","apply","_defineProperty","obj","key","configurable","writable","outgoingHooks","commands","systemCommands","createSelector","getCurrentTeamId","teamId","hooks","values","o","target","i","arguments","length","source","forEach","getOwnPropertyDescriptors","defineProperties","_objectSpread","currentTeamId","command","team_id","auto_complete","sort","b","display_name","localeCompare","getBotAccounts","bots","accounts","createBot","bot","_helpers","bindClientFunc","clientFunc","_client","Client4","onSuccess","_action_types","BotTypes","RECEIVED_BOT_ACCOUNT","params","patchBot","botUserId","botPatch","loadBot","getBot","loadBots","page","undefined","perPage","BOTS_PER_PAGE_DEFAULT","getBotsIncludeDeleted","RECEIVED_BOT_ACCOUNTS","disableBot","enableBot","assignBot","newOwnerId","module","p","SearchIcon","react_default","index_es","BackstageList","_this","backstage_list_classCallCheck","backstage_list_getPrototypeOf","call","updateFilter","bind","backstage_list_assertThisInitialized","Component","e","setState","children","toLowerCase","loading","loading_screen","hasChildren","_children2","_slicedToArray","Children","map","child","cloneElement","emptyTextSearch","searchTerm","emptyText","addLink","addText","react_router_dom","to","type","addButtonId","header","search_icon_SearchIcon","placeholder","searchPlaceholder","onChange","style","search","helpText","oneOfType","node","func","isRequired","bool","Utils","flexGrow","flexShrink","matchesFilter","owner","username","description","displayName","ownerUsername","indexOf","Bot","bot_classCallCheck","bot_getPrototypeOf","bot_defineProperty","bot_assertThisInitialized","actions","user_id","enableUserAccessToken","disableUserAccessToken","confirmingId","revokeUserAccessToken","closeConfirm","creatingTokenState","token","assign","_ref","regeneratorRuntime","mark","_callee","_ref2","data","error","wrap","_context","prev","next","preventDefault","abrupt","createUserAccessToken","sent","message","stop","_x","_this2","options","tokenList","accessTokens","activeLink","disabledText","disableClass","is_active","name","href","onClick","confirmRevokeToken","openCreateToken","concat","team","delete_at","onSubmit","handleCreateToken","autoFocus","maxLength","handleUpdateDescription","save_button","btnClass","savingMessage","saving","closeCreateToken","warning_icon","imageURL","alt","src","markdown","confirm_modal","confirmButtonText","show","onConfirm","revokeTokenConfirmed","onCancel","shape","Bots","bots_classCallCheck","bots_getPrototypeOf","bots_defineProperty","bots_assertThisInitialized","bot_Bot","owners","match","enabledBots","botToJSX","disabledBots","EnabledSection","DisabledSection","hasDisabled","_this3","Constants","Integrations","START_PAGE_NUM","PAGE_SIZE","then","result","promises","_iteratorNormalCompletion","_didIteratorError","_iteratorError","_step","_iterator","Symbol","iterator","done","getUser","owner_id","getUserAccessTokensForUser","err","return","Promise","all","botsToDisplay","Fragment","backstage_list_BackstageList","createBots","formatted_markdown_message","botAccounts","rel","connect","getConfig","EnableBotAccountCreation","reduce","UserSelectors","admin","userAccessTokensByUser","dispatch","bindActionCreators","BackstageHeader","formatMessage","context","intl","index","intlShape","roleOptionSystemAdmin","roleOptionMember","AddBot","add_bot_classCallCheck","add_bot_getPrototypeOf","add_bot_defineProperty","add_bot_assertThisInitialized","role","postAll","checked","postChannels","files","pictureFile","previewBlob","URL","createObjectURL","reader","FileReader","onload","e2","orientation","FileUtils","orientationStyles","image","readAsArrayBuffer","BotDefaultIcon","add_bot_asyncToGenerator","roles","rolesResult","General","SYSTEM_USER_ROLE","SYSTEM_ADMIN_ROLE","SYSTEM_POST_ALL_ROLE","SYSTEM_POST_ALL_PUBLIC_ROLE","updateUserRoles","_callee2","imageResult","usernameError","_result","tokenResult","_context2","adding","AcceptedProfileImageTypes","includes","size","maxFileSize","uploadProfileImage","setDefaultProfileImage","updateRoles","browserHistory","_x2","UserUtils","subtitle","buttonText","buttonActiveText","removeImageIcon","OverlayTrigger","delayShow","OVERLAY_TIME_DELAY","placement","overlay","Tooltip","setDefault","imageStyles","backstage_header_BackstageHeader","handleSubmit","htmlFor","updateUsername","accept","updatePicture","updateDisplayName","updateDescription","disabled","editingUserHasManageSystem","updateRole","updatePostAll","updatePostChannels","form_error","errors","spinner_button","spinning","spinningText","number","ownProps","config","botId","URLSearchParams","location","get","user","getUsers","parseInt","MaxFileSize","haveISystemPermission","permission","Permissions","MANAGE_SYSTEM","IntegrationOption","link","_this$props","currentSiteName","siteName","document","enableIncomingWebhooks","enableOutgoingWebhooks","enableCommands","enableOAuthServiceProvider","updateTitle","team_permission_gate","permissions","MANAGE_INCOMING_WEBHOOKS","integration_option_IntegrationOption","IncomingWebhookIcon","MANAGE_OUTGOING_WEBHOOKS","OutgoingWebhookIcon","MANAGE_SLASH_COMMANDS","SlashCommandIcon","system_permission_gate","MANAGE_OAUTH","OAuthIcon","BotAccountsIcon","appDirectory","SiteName","EnableIncomingWebhooks","EnableOutgoingWebhooks","EnableCommands","EnableOAuthServiceProvider","AnyTeamPermissionGate","hasPermission","invert","arrayOf","teams","getMyTeams","_iteratorNormalCompletion2","_didIteratorError2","_iteratorError2","_step2","_iterator2","haveITeamPermission","DeleteModalTrigger","delete_modal_trigger_classCallCheck","delete_modal_trigger_getPrototypeOf","delete_modal_trigger_defineProperty","delete_modal_trigger_assertThisInitialized","showDeleteModal","onDelete","KeyCodes","ENTER","handleConfirm","constructor","TypeError","handleOpenModal","triggerTitle","modalTitle","modalMessage","modalConfirmButton","handleCancel","onKeyDown","handleKeyDown","DeleteEmoji","EmojiListItem","emoji","deleteCustomEmoji","creatorUsername","creatorDisplayName","deleteButton","creator_id","currentUserId","any_team_permission_gate","DELETE_EMOJIS","delete_emoji_modal_DeleteEmoji","handleDelete","DELETE_OTHERS_EMOJIS","backgroundImage","getCustomEmojiImageUrl","currentTeam","emojis","customEmoji","emojiId","creator","getDisplayNameByUser","getCurrentUserId","getCurrentTeam","EMOJI_PER_PAGE","EMOJI_SEARCH_DELAY_MILLISECONDS","EmojiList","emoji_list_classCallCheck","emoji_list_getPrototypeOf","emoji_list_defineProperty","emoji_list_assertThisInitialized","nextLoading","getCustomEmojis","Emoji","SORT_BY_NAME","missingPages","scrollToTop","term","clearTimeout","searchTimeout","setTimeout","emoji_list_asyncToGenerator","_ref3","trim","searchEmojis","searchCustomEmojis","em","newSearchEmojis","_toConsumableArray","splice","_ref4","nextButton","previousButton","colSpan","emojiIds","emoji_list_item","deleteFromSearch","pageStart","pageEnd","slice","buttonContents","next_icon","extraClasses","nextPage","previousPage","previous_icon","localized_input","t","onSearchChange","getCustomEmojiIdsSortedByName","EmojiPage","teamDisplayName","loadRolesIfNeeded","nextProps","CREATE_EMOJIS","teamName","emoji_list","general","AddEmoji","add_emoji_classCallCheck","add_emoji_getPrototypeOf","add_emoji_defineProperty","add_emoji_assertThisInitialized","emojiMap","_this$state","startsWith","endsWith","substring","test","hasSystemEmoji","createCustomEmoji","imageUrl","readAsDataURL","filename","preview","updateName","multiple","updateImage","localizeMessage","router","getEmojiMap","DEFAULT_PAGE_SIZE","loadIncomingHooksAndProfilesForTeam","integration_actions_asyncToGenerator","IntegrationActions","loadProfilesForIncomingHooks","getState","profilesToLoad","hook","list","getProfilesByIds","_x3","loadOutgoingHooksAndProfilesForTeam","_callee3","_ref5","_context3","loadProfilesForOutgoingHooks","_x4","_ref6","_callee4","_context4","_x5","_x6","loadCommandsAndProfilesForTeam","_ref7","_callee5","_ref8","_context5","loadProfilesForCommands","_x7","_ref9","_callee6","_context6","_x8","_x9","loadOAuthAppsAndProfiles","_ref10","_callee7","_ref11","_context7","loadProfilesForOAuthApps","_x10","apps","_ref12","_callee8","app","_context8","_x11","_x12","CopyText","copyToClipboard","idMessage","queryCommandSupported","tooltip","copyText","DeleteIntegration","messageId","incomingWebhook","channel","channel_id","propTypes","InstalledIncomingWebhook","installed_incoming_webhook_classCallCheck","installed_incoming_webhook_getPrototypeOf","installed_incoming_webhook_assertThisInitialized","canChange","delete_integration_DeleteIntegration","incomingWebhookId","getSiteURL","url","copy_text_CopyText","createAt","create_at","InstalledIncomingWebhooks","installed_incoming_webhooks_classCallCheck","installed_incoming_webhooks_getPrototypeOf","installed_incoming_webhooks_defineProperty","installed_incoming_webhooks_assertThisInitialized","removeIncomingHook","displayNameA","channelA","channels","displayNameB","incomingWebhooks","incomingWebhookCompare","canManageOthersWebhooks","installed_incoming_webhook_InstalledIncomingWebhook","deleteIncomingWebhook","users","buildYourOwn","array","MANAGE_OTHERS_INCOMING_WEBHOOKS","getAllChannels","Actions","ChannelSelect","selectOpen","selectPrivate","selectDm","channelName","OPEN_CHANNEL","PRIVATE_CHANNEL","DM_CHANNEL","getMyChannelsSorted","getMyChannels","getCurrentUserLocale","locale","channel_select_toConsumableArray","sortChannelsByTypeAndDisplayName","AbstractIncomingWebhook","abstract_incoming_webhook_classCallCheck","abstract_incoming_webhook_getPrototypeOf","abstract_incoming_webhook_defineProperty","abstract_incoming_webhook_assertThisInitialized","channelId","channelLocked","channel_locked","iconURL","icon_url","serverError","clientError","action","getStateFromHook","initialHook","headerToRender","footerToRender","footer","channel_select","updateChannelId","updateChannelLocked","enablePostUsernameOverride","enablePostIconOverride","updateIconURL","HEADER","FOOTER","LOADING","AddIncomingWebhook","add_incoming_webhook_classCallCheck","add_incoming_webhook_getPrototypeOf","add_incoming_webhook_defineProperty","add_incoming_webhook_assertThisInitialized","createIncomingHook","createIncomingHookRequest","abstract_incoming_webhook_AbstractIncomingWebhook","addIncomingHook","EnablePostUsernameOverride","EnablePostIconOverride","requests","EditIncomingWebhook","edit_incoming_webhook_classCallCheck","edit_incoming_webhook_getPrototypeOf","edit_incoming_webhook_defineProperty","edit_incoming_webhook_assertThisInitialized","edit_incoming_webhook_asyncToGenerator","newHook","submitHook","updateIncomingHook","updateIncomingHookRequest","showConfirmModal","getIncomingHook","hookId","editIncomingHook","outgoingWebhook","triggerWords","trigger_words","InstalledOutgoingWebhook","installed_outgoing_webhook_classCallCheck","installed_outgoing_webhook_getPrototypeOf","handleRegenToken","installed_outgoing_webhook_assertThisInitialized","onRegenToken","makeDisplayName","join","triggerWhen","urls","callback_urls","trigger_when","contentType","content_type","InstalledOutgoingWebhooks","installed_outgoing_webhooks_classCallCheck","installed_outgoing_webhooks_getPrototypeOf","installed_outgoing_webhooks_defineProperty","installed_outgoing_webhooks_assertThisInitialized","regenOutgoingHookToken","removeOutgoingHook","outgoingWebhooks","outgoingWebhookCompare","installed_outgoing_webhook_InstalledOutgoingWebhook","regenOutgoingWebhookToken","channelB","MANAGE_OTHERS_OUTGOING_WEBHOOKS","AbstractOutgoingWebhook","abstract_outgoing_webhook_classCallCheck","abstract_outgoing_webhook_getPrototypeOf","abstract_outgoing_webhook_defineProperty","abstract_outgoing_webhook_assertThisInitialized","callbackUrls","split","triggerWord","callbackUrl","renderExtra","updateContentType","rows","updateTriggerWords","updateTriggerWhen","updateCallbackUrls","AddOutgoingWebhook","add_outgoing_webhook_classCallCheck","add_outgoing_webhook_getPrototypeOf","add_outgoing_webhook_defineProperty","add_outgoing_webhook_assertThisInitialized","createOutgoingHook","createOutgoingHookRequest","abstract_outgoing_webhook_AbstractOutgoingWebhook","addOutgoingHook","EditOutgoingWebhook","edit_outgoing_webhook_classCallCheck","edit_outgoing_webhook_getPrototypeOf","edit_outgoing_webhook_defineProperty","edit_outgoing_webhook_assertThisInitialized","edit_outgoing_webhook_asyncToGenerator","triggerWordsSame","callbackUrlsSame","every","v","handleConfirmModal","updateOutgoingHook","updateOutgoingHookRequest","confirmButton","confirmTitle","confirmMessage","confirmModalDismissed","getOutgoingHook","editOutgoingHook","FAKE_SECRET","oauthApp","InstalledOAuthApp","installed_oauth_app_classCallCheck","installed_oauth_app_getPrototypeOf","installed_oauth_app_defineProperty","installed_oauth_app_assertThisInitialized","clientSecret","client_secret","onRegenerateSecret","regenOAuthAppSecretRequest","handleShowClientSecret","creatorName","isTrusted","showHide","is_trusted","handleHideClientSecret","icon","regen","handleRegenerate","clientId","InstalledOAuthApps","installed_oauth_apps_classCallCheck","installed_oauth_apps_getPrototypeOf","installed_oauth_apps_defineProperty","installed_oauth_apps_assertThisInitialized","deleteOAuthApp","oauthAppCompare","installed_oauth_app","regenOAuthAppSecret","nameA","nameB","canManageOauth","oauthApplications","updateOAuthApp","AbstractOAuthApp","abstract_oauth_app_classCallCheck","abstract_oauth_app_getPrototypeOf","abstract_oauth_app_defineProperty","abstract_oauth_app_assertThisInitialized","homepage","has_icon","Boolean","refs","Image","imageLoaded","getStateFromApp","initialApp","trusted","updateTrusted","updateHomepage","ref","updateIconUrl","AddOAuthApp","add_oauth_app_classCallCheck","add_oauth_app_getPrototypeOf","add_oauth_app_defineProperty","add_oauth_app_assertThisInitialized","addOAuthApp","addOAuthAppRequest","abstract_oauth_app_AbstractOAuthApp","EditOAuthApp","edit_oauth_app_classCallCheck","edit_oauth_app_getPrototypeOf","edit_oauth_app_defineProperty","edit_oauth_app_assertThisInitialized","edit_oauth_app_asyncToGenerator","newApp","submitOAuthApp","editOAuthApp","getOAuthApp","oauthAppId","trigger","InstalledCommand","auto_complete_hint","commandToken","InstalledCommands","regenCommandToken","deleteCommand","commandCompare","canManageOthersSlashCommands","installed_command_InstalledCommand","MANAGE_OTHERS_SLASH_COMMANDS","REQUEST_POST","AbstractCommand","abstract_command_classCallCheck","abstract_command_getPrototypeOf","abstract_command_defineProperty","abstract_command_assertThisInitialized","method","iconUrl","autocomplete","autocompleteHint","autocompleteDescription","auto_complete_desc","substr","MIN_TRIGGER_LENGTH","MAX_TRIGGER_LENGTH","min","max","getStateFromCommand","initialCommand","updateAutocompleteHint","updateAutocompleteDescription","updateTrigger","updateUrl","updateMethod","updateAutocomplete","AddCommand","add_command_classCallCheck","add_command_getPrototypeOf","add_command_defineProperty","add_command_assertThisInitialized","addCommand","abstract_command_AbstractCommand","EditCommand","edit_command_classCallCheck","edit_command_getPrototypeOf","edit_command_defineProperty","edit_command_assertThisInitialized","edit_command_asyncToGenerator","newCommand","originalCommand","submitCommand","editCommand","getCustomTeamCommands","commandId","ConfirmIntegration","confirm_integration_classCallCheck","confirm_integration_getPrototypeOf","confirm_integration_defineProperty","confirm_integration_assertThisInitialized","window","addEventListener","handleKeyPress","removeEventListener","headerText","tokenText","incomingHook","outgoingHook","COMMAND","INCOMING_WEBHOOK","incomingHookToken","OUTGOING_WEBHOOK","outgoingHookToken","OAUTH_APP","oauthAppToken","oauthAppSecret","secret","BOT","replace","ErrorPageTypes","PAGE_NOT_FOUND","botToken","botname","CommandRoute","component","extraProps","rest","_objectWithoutProperties","react_router","render","CommandsContainer","commands_container_classCallCheck","commands_container_possibleConstructorReturn","commands_container_getPrototypeOf","exact","path","commands_container_CommandRoute","BackstageCategory","parentLink","element","activeClassName","BackstageSection","subsection","getLink","clonedChildren","BackstageSidebar","enableCustomEmoji","canCreateOrDeleteCustomEmoji","backstage_category_BackstageCategory","backstage_section_BackstageSection","renderCustomEmoji","renderIntegrations","BackstageNavbar","back_icon","BackstageRoute","backstage_controller_objectWithoutProperties","BackstageController","listRef","scrollTop","announcement_bar","system_notice","backstage_navbar_BackstageNavbar","pluggable","pluggableName","setListRef","backstage_sidebar_BackstageSidebar","backstage_controller_BackstageRoute","AddIncomingWehook","InstalledOauthApps","AddOauthApp","EditOauthApp","withRouter","getCurrentUser","EnableCustomEmoji"],"mappings":"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","file":"9.387e730620d6b12117af.js","sourcesContent":["// Copyright (c) 2015-present Mattermost, Inc. All Rights Reserved.\n// See LICENSE.txt for license information.\n\nimport PropTypes from 'prop-types';\nimport React from 'react';\n\nimport {FormattedMessage} from 'react-intl';\n\nexport default class NextIcon extends React.PureComponent {\n    static propTypes = {\n        additionalClassName: PropTypes.string,\n    };\n\n    static defaultProps = {\n        additionalClassName: null,\n    };\n\n    render() {\n        const className = 'fa fa-1x fa-angle-right' + (this.props.additionalClassName ? ' ' + this.props.additionalClassName : '');\n        return (\n            <FormattedMessage\n                id='generic_icons.next'\n                defaultMessage='Next Icon'\n            >\n                {(title) => (\n                    <i\n                        className={className}\n                        title={title}\n                    />\n                )}\n            </FormattedMessage>\n        );\n    }\n}\n","// Copyright (c) 2015-present Mattermost, Inc. All Rights Reserved.\n// See LICENSE.txt for license information.\n\nimport React from 'react';\n\nimport {FormattedMessage} from 'react-intl';\nimport PropTypes from 'prop-types';\n\nexport default class PreviousIcon extends React.PureComponent {\n    static propTypes = {\n        additionalClassName: PropTypes.string,\n    };\n\n    static defaultProps = {\n        additionalClassName: null,\n    };\n\n    render() {\n        const className = 'fa fa-1x fa-angle-left' + (this.props.additionalClassName ? ' ' + this.props.additionalClassName : '');\n        return (\n            <FormattedMessage\n                id='generic_icons.previous'\n                defaultMessage='Previous Icon'\n            >\n                {(title) => (\n                    <i\n                        className={className}\n                        title={title}\n                    />\n                )}\n            </FormattedMessage>\n        );\n    }\n}\n","\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.getIncomingHooks = getIncomingHooks;\nexports.getOutgoingHooks = getOutgoingHooks;\nexports.getCommands = getCommands;\nexports.getOAuthApps = getOAuthApps;\nexports.getSystemCommands = getSystemCommands;\nexports.getAutocompleteCommandsList = exports.getAllCommands = exports.getOutgoingHooksInCurrentTeam = void 0;\n\nrequire(\"core-js/modules/es7.object.get-own-property-descriptors\");\n\nrequire(\"core-js/modules/es6.object.keys\");\n\nrequire(\"core-js/modules/web.dom.iterable\");\n\nrequire(\"core-js/modules/es6.array.iterator\");\n\nrequire(\"core-js/modules/es7.object.values\");\n\nvar _reselect = require(\"reselect\");\n\nvar _teams = require(\"./teams\");\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(source, true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(source).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nfunction getIncomingHooks(state) {\n  return state.entities.integrations.incomingHooks;\n}\n\nfunction getOutgoingHooks(state) {\n  return state.entities.integrations.outgoingHooks;\n}\n\nfunction getCommands(state) {\n  return state.entities.integrations.commands;\n}\n\nfunction getOAuthApps(state) {\n  return state.entities.integrations.oauthApps;\n}\n\nfunction getSystemCommands(state) {\n  return state.entities.integrations.systemCommands;\n}\n/**\n * get outgoing hooks in current team\n */\n\n\nvar getOutgoingHooksInCurrentTeam = (0, _reselect.createSelector)(_teams.getCurrentTeamId, getOutgoingHooks, function (teamId, hooks) {\n  return Object.values(hooks).filter(function (o) {\n    return o.teamId === teamId;\n  });\n});\nexports.getOutgoingHooksInCurrentTeam = getOutgoingHooksInCurrentTeam;\nvar getAllCommands = (0, _reselect.createSelector)(getCommands, getSystemCommands, function (commands, systemCommands) {\n  return _objectSpread({}, commands, {}, systemCommands);\n});\nexports.getAllCommands = getAllCommands;\nvar getAutocompleteCommandsList = (0, _reselect.createSelector)(getAllCommands, _teams.getCurrentTeamId, function (commands, currentTeamId) {\n  return Object.values(commands).filter(function (command) {\n    return command && (!command.team_id || command.team_id === currentTeamId) && command.auto_complete;\n  }).sort(function (a, b) {\n    return a.display_name.localeCompare(b.display_name);\n  });\n});\nexports.getAutocompleteCommandsList = getAutocompleteCommandsList;","\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.getBotAccounts = getBotAccounts;\n\n// Copyright (c) 2015-present Mattermost, Inc. All Rights Reserved.\n// See LICENSE.txt for license information.\nfunction getBotAccounts(state) {\n  return state.entities.bots.accounts;\n}","\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.createBot = createBot;\nexports.patchBot = patchBot;\nexports.loadBot = loadBot;\nexports.loadBots = loadBots;\nexports.disableBot = disableBot;\nexports.enableBot = enableBot;\nexports.assignBot = assignBot;\n\nvar _client = require(\"../client\");\n\nvar _action_types = require(\"../action_types\");\n\nvar _helpers = require(\"./helpers\");\n\n// Copyright (c) 2015-present Mattermost, Inc. All Rights Reserved.\n// See LICENSE.txt for license information.\nvar BOTS_PER_PAGE_DEFAULT = 20;\n\nfunction createBot(bot) {\n  return (0, _helpers.bindClientFunc)({\n    clientFunc: _client.Client4.createBot,\n    onSuccess: _action_types.BotTypes.RECEIVED_BOT_ACCOUNT,\n    params: [bot]\n  });\n}\n\nfunction patchBot(botUserId, botPatch) {\n  return (0, _helpers.bindClientFunc)({\n    clientFunc: _client.Client4.patchBot,\n    onSuccess: _action_types.BotTypes.RECEIVED_BOT_ACCOUNT,\n    params: [botUserId, botPatch]\n  });\n}\n\nfunction loadBot(botUserId) {\n  return (0, _helpers.bindClientFunc)({\n    clientFunc: _client.Client4.getBot,\n    onSuccess: _action_types.BotTypes.RECEIVED_BOT_ACCOUNT,\n    params: [botUserId]\n  });\n}\n\nfunction loadBots() {\n  var page = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 0;\n  var perPage = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : BOTS_PER_PAGE_DEFAULT;\n  return (0, _helpers.bindClientFunc)({\n    clientFunc: _client.Client4.getBotsIncludeDeleted,\n    onSuccess: _action_types.BotTypes.RECEIVED_BOT_ACCOUNTS,\n    params: [page, perPage]\n  });\n}\n\nfunction disableBot(botUserId) {\n  return (0, _helpers.bindClientFunc)({\n    clientFunc: _client.Client4.disableBot,\n    onSuccess: _action_types.BotTypes.RECEIVED_BOT_ACCOUNT,\n    params: [botUserId]\n  });\n}\n\nfunction enableBot(botUserId) {\n  return (0, _helpers.bindClientFunc)({\n    clientFunc: _client.Client4.enableBot,\n    onSuccess: _action_types.BotTypes.RECEIVED_BOT_ACCOUNT,\n    params: [botUserId]\n  });\n}\n\nfunction assignBot(botUserId, newOwnerId) {\n  return (0, _helpers.bindClientFunc)({\n    clientFunc: _client.Client4.assignBot,\n    onSuccess: _action_types.BotTypes.RECEIVED_BOT_ACCOUNT,\n    params: [botUserId, newOwnerId]\n  });\n}","module.exports = __webpack_public_path__ + \"files/2e4b89be6e3f829a49fe798824517979.png\";","module.exports = __webpack_public_path__ + \"files/fd69f7891f867c2aa14011da92b728ac.jpg\";","module.exports = __webpack_public_path__ + \"files/55f1b85ca97f0bb30110d6767de90932.png\";","module.exports = __webpack_public_path__ + \"files/2aa264fb1956b8be41f2047d428a1a1e.jpg\";","module.exports = __webpack_public_path__ + \"files/d184fcdb23c1e24bfd7132950ceb4f68.jpg\";","// Copyright (c) 2015-present Mattermost, Inc. All Rights Reserved.\n// See LICENSE.txt for license information.\n\nimport React from 'react';\n\nimport {FormattedMessage} from 'react-intl';\n\nexport default class SearchIcon extends React.PureComponent {\n    render() {\n        return (\n            <FormattedMessage\n                id='generic_icons.search'\n                defaultMessage='Search Icon'\n            >\n                {(title) => (\n                    <i\n                        className='fa fa-search'\n                        title={title}\n                    />\n                )}\n            </FormattedMessage>\n        );\n    }\n}\n","// Copyright (c) 2015-present Mattermost, Inc. All Rights Reserved.\n// See LICENSE.txt for license information.\n\nimport PropTypes from 'prop-types';\nimport React from 'react';\nimport {Link} from 'react-router-dom';\n\nimport * as Utils from 'utils/utils.jsx';\nimport LoadingScreen from 'components/loading_screen.jsx';\nimport SearchIcon from 'components/icon/search_icon';\n\nexport default class BackstageList extends React.Component {\n    static propTypes = {\n        children: PropTypes.oneOfType([PropTypes.node, PropTypes.func]),\n        header: PropTypes.node.isRequired,\n        addLink: PropTypes.string,\n        addText: PropTypes.node,\n        addButtonId: PropTypes.string,\n        emptyText: PropTypes.node,\n        emptyTextSearch: PropTypes.node,\n        helpText: PropTypes.node,\n        loading: PropTypes.bool.isRequired,\n        searchPlaceholder: PropTypes.string,\n    }\n\n    static defaultProps = {\n        searchPlaceholder: Utils.localizeMessage('backstage_list.search', 'Search'),\n    }\n\n    constructor(props) {\n        super(props);\n\n        this.updateFilter = this.updateFilter.bind(this);\n\n        this.state = {\n            filter: '',\n        };\n    }\n\n    updateFilter(e) {\n        this.setState({\n            filter: e.target.value,\n        });\n    }\n\n    render() {\n        const filter = this.state.filter.toLowerCase();\n\n        let children;\n        if (this.props.loading) {\n            children = <LoadingScreen/>;\n        } else {\n            children = this.props.children;\n            let hasChildren = true;\n            if (typeof children === 'function') {\n                [children, hasChildren] = children(filter);\n            }\n            children = React.Children.map(children, (child) => {\n                return React.cloneElement(child, {filter});\n            });\n            if (children.length === 0 || !hasChildren) {\n                if (!filter) {\n                    if (this.props.emptyText) {\n                        children = (\n                            <span className='backstage-list__item backstage-list__empty'>\n                                {this.props.emptyText}\n                            </span>\n                        );\n                    }\n                } else if (this.props.emptyTextSearch) {\n                    children = (\n                        <span\n                            className='backstage-list__item backstage-list__empty'\n                            id='emptySearchResultsMessage'\n                        >\n                            {React.cloneElement(this.props.emptyTextSearch, {values: {searchTerm: filter}})}\n                        </span>\n                    );\n                }\n            }\n        }\n\n        let addLink = null;\n\n        if (this.props.addLink && this.props.addText) {\n            addLink = (\n                <Link\n                    className='add-link'\n                    to={this.props.addLink}\n                >\n                    <button\n                        type='button'\n                        className='btn btn-primary'\n                        id={this.props.addButtonId}\n                    >\n                        <span>\n                            {this.props.addText}\n                        </span>\n                    </button>\n                </Link>\n            );\n        }\n\n        return (\n            <div className='backstage-content'>\n                <div className='backstage-header'>\n                    <h1>\n                        {this.props.header}\n                    </h1>\n                    {addLink}\n                </div>\n                <div className='backstage-filters'>\n                    <div className='backstage-filter__search'>\n                        <SearchIcon/>\n                        <input\n                            type='search'\n                            className='form-control'\n                            placeholder={this.props.searchPlaceholder}\n                            value={this.state.filter}\n                            onChange={this.updateFilter}\n                            style={style.search}\n                            id='searchInput'\n                        />\n                    </div>\n                </div>\n                <span className='backstage-list__help'>\n                    {this.props.helpText}\n                </span>\n                <div className='backstage-list'>\n                    {children}\n                </div>\n            </div>\n        );\n    }\n}\n\nconst style = {\n    search: {flexGrow: 0, flexShrink: 0},\n};\n","// Copyright (c) 2015-present Mattermost, Inc. All Rights Reserved.\n// See LICENSE.txt for license information.\n\nimport React from 'react';\nimport PropTypes from 'prop-types';\nimport {Link} from 'react-router-dom';\n\nimport {FormattedMessage} from 'react-intl';\n\nimport ConfirmModal from 'components/confirm_modal.jsx';\nimport Markdown from 'components/markdown';\nimport SaveButton from 'components/save_button.jsx';\nimport WarningIcon from 'components/icon/warning_icon';\nimport * as Utils from 'utils/utils.jsx';\n\nexport function matchesFilter(bot, filter, owner) {\n    if (!filter) {\n        return true;\n    }\n    const username = bot.username || '';\n    const description = bot.description || '';\n    const displayName = bot.display_name || '';\n\n    let ownerUsername = 'plugin';\n    if (owner && owner.username) {\n        ownerUsername = owner.username;\n    }\n    return !(username.toLowerCase().indexOf(filter) === -1 &&\n        displayName.toLowerCase().indexOf(filter) === -1 &&\n        description.toLowerCase().indexOf(filter) === -1 &&\n        ownerUsername.toLowerCase().indexOf(filter) === -1);\n}\n\nexport default class Bot extends React.PureComponent {\n    static propTypes = {\n\n        /**\n        *  Bot that we are displaying\n        */\n        bot: PropTypes.object.isRequired,\n\n        /**\n        * Owner of the bot we are displaying\n        */\n        owner: PropTypes.object,\n\n        /**\n        * The access tokens of the bot user\n        */\n        accessTokens: PropTypes.object.isRequired,\n\n        /**\n        * String used for filtering bot items\n        */\n        filter: PropTypes.string,\n\n        actions: PropTypes.shape({\n\n            /**\n            * Disable a bot\n            */\n            disableBot: PropTypes.func.isRequired,\n\n            /**\n            * Enable a bot\n            */\n            enableBot: PropTypes.func.isRequired,\n\n            /**\n            * Access token managment\n            */\n            createUserAccessToken: PropTypes.func.isRequired,\n            revokeUserAccessToken: PropTypes.func.isRequired,\n            enableUserAccessToken: PropTypes.func.isRequired,\n            disableUserAccessToken: PropTypes.func.isRequired,\n        }),\n\n        /**\n        *  Only used for routing since backstage is team based.\n        */\n        team: PropTypes.object.isRequired,\n    };\n\n    constructor(props) {\n        super(props);\n\n        this.state = {\n            confirmingId: '',\n            creatingTokenState: 'CLOSED',\n            token: {},\n            error: '',\n        };\n    }\n\n    enableBot = () => {\n        this.props.actions.enableBot(this.props.bot.user_id);\n    }\n\n    disableBot = () => {\n        this.props.actions.disableBot(this.props.bot.user_id);\n    }\n\n    enableUserAccessToken = (id) => {\n        this.props.actions.enableUserAccessToken(id);\n    }\n\n    disableUserAccessToken = (id) => {\n        this.props.actions.disableUserAccessToken(id);\n    }\n\n    confirmRevokeToken = (id) => {\n        this.setState({confirmingId: id});\n    }\n\n    revokeTokenConfirmed = () => {\n        this.props.actions.revokeUserAccessToken(this.state.confirmingId);\n        this.closeConfirm();\n    }\n\n    closeConfirm = () => {\n        this.setState({confirmingId: ''});\n    }\n\n    openCreateToken = () => {\n        this.setState({\n            creatingTokenState: 'OPEN',\n            token: {\n                description: '',\n            },\n        });\n    }\n\n    closeCreateToken = () => {\n        this.setState({\n            creatingTokenState: 'CLOSED',\n            token: {\n                description: '',\n            },\n        });\n    }\n\n    handleUpdateDescription = (e) => {\n        this.setState({\n            token: Object.assign({}, this.state.token, {description: e.target.value}),\n        });\n    }\n\n    handleCreateToken = async (e) => {\n        e.preventDefault();\n\n        if (this.state.token.description === '') {\n            this.setState({error: (\n                <FormattedMessage\n                    id='bot.token.error.description'\n                    defaultMessage='Please enter a description.'\n                />\n            )});\n            return;\n        }\n\n        const {data, error} = await this.props.actions.createUserAccessToken(this.props.bot.user_id, this.state.token.description);\n        if (data) {\n            this.setState({creatingTokenState: 'CREATED', token: data});\n        } else if (error) {\n            this.setState({error: error.message});\n        }\n    }\n\n    render() {\n        const username = this.props.bot.username || '';\n        const description = this.props.bot.description || '';\n        const displayName = this.props.bot.display_name || '';\n\n        let ownerUsername = 'plugin';\n        if (this.props.owner && this.props.owner.username) {\n            ownerUsername = this.props.owner.username;\n        }\n        const filter = this.props.filter ? this.props.filter.toLowerCase() : '';\n        if (!matchesFilter(this.props.bot, filter, this.props.owner)) {\n            return null;\n        }\n\n        const tokenList = [];\n        Object.values(this.props.accessTokens).forEach((token) => {\n            let activeLink;\n            let disableClass = '';\n            let disabledText;\n\n            if (token.is_active) {\n                activeLink = (\n                    <a\n                        name={token.id + '_deactivate'}\n                        href='#'\n                        onClick={(e) => {\n                            e.preventDefault();\n                            this.disableUserAccessToken(token.id);\n                        }}\n                    >\n                        <FormattedMessage\n                            id='user.settings.tokens.deactivate'\n                            defaultMessage='Disable'\n                        />\n                    </a>);\n            } else {\n                disableClass = 'light';\n                disabledText = (\n                    <span className='margin-right light'>\n                        <FormattedMessage\n                            id='user.settings.tokens.deactivatedWarning'\n                            defaultMessage='(Disabled)'\n                        />\n                    </span>\n                );\n                activeLink = (\n                    <a\n                        name={token.id + '_activate'}\n                        href='#'\n                        onClick={(e) => {\n                            e.preventDefault();\n                            this.enableUserAccessToken(token.id);\n                        }}\n                    >\n                        <FormattedMessage\n                            id='user.settings.tokens.activate'\n                            defaultMessage='Enable'\n                        />\n                    </a>\n                );\n            }\n\n            tokenList.push(\n                <div\n                    key={token.id}\n                    className='bot-list__item'\n                >\n                    <div className='item-details__row d-flex justify-content-between'>\n                        <div className={disableClass}>\n                            <div className='whitespace--nowrap overflow--ellipsis'>\n                                <b>\n                                    <FormattedMessage\n                                        id='user.settings.tokens.tokenDesc'\n                                        defaultMessage='Token Description: '\n                                    />\n                                </b>\n                                {token.description}\n                            </div>\n                            <div className='setting-box__token-id whitespace--nowrap overflow--ellipsis'>\n                                <b>\n                                    <FormattedMessage\n                                        id='user.settings.tokens.tokenId'\n                                        defaultMessage='Token ID: '\n                                    />\n                                </b>\n                                {token.id}\n                            </div>\n                        </div>\n                        <div>\n                            {disabledText}\n                            {activeLink}\n                            {' - '}\n                            <a\n                                name={token.id + '_delete'}\n                                href='#'\n                                onClick={(e) => {\n                                    e.preventDefault();\n                                    this.confirmRevokeToken(token.id);\n                                }}\n                            >\n                                <FormattedMessage\n                                    id='user.settings.tokens.delete'\n                                    defaultMessage='Delete'\n                                />\n                            </a>\n                        </div>\n                    </div>\n                </div>\n            );\n        });\n\n        let options;\n        if (ownerUsername !== 'plugin') {\n            options = (\n                <div className='item-actions'>\n                    <button\n                        id='createToken'\n                        className='style--none color--link'\n                        onClick={this.openCreateToken}\n                    >\n                        <FormattedMessage\n                            id='bot.manage.create_token'\n                            defaultMessage='Create New Token'\n                        />\n                    </button>\n                    {' - '}\n                    <Link to={`/${this.props.team.name}/integrations/bots/edit?id=${this.props.bot.user_id}`}>\n                        <FormattedMessage\n                            id='bots.manage.edit'\n                            defaultMessage='Edit'\n                        />\n                    </Link>\n                    {' - '}\n                    <button\n                        className='style--none color--link'\n                        onClick={this.disableBot}\n                    >\n                        <FormattedMessage\n                            id='bot.manage.disable'\n                            defaultMessage='Disable'\n                        />\n                    </button>\n                </div>\n            );\n        }\n        if (this.props.bot.delete_at !== 0) {\n            options = (\n                <div className='item-actions'>\n                    <button\n                        className='style--none color--link'\n                        onClick={this.enableBot}\n                    >\n                        <FormattedMessage\n                            id='bot.manage.enable'\n                            defaultMessage='Enable'\n                        />\n                    </button>\n                </div>\n            );\n        }\n\n        if (this.state.creatingTokenState === 'OPEN') {\n            tokenList.push(\n                <div\n                    key={'create'}\n                    className='bot-list__item'\n                >\n                    <div key={'create'}>\n                        <form\n                            className='form-horizontal'\n                            onSubmit={this.handleCreateToken}\n                        >\n                            <div className='row'>\n                                <label className='col-sm-auto control-label'>\n                                    <FormattedMessage\n                                        id='user.settings.tokens.name'\n                                        defaultMessage='Token Description: '\n                                    />\n                                </label>\n                                <div className='col-sm-4'>\n                                    <input\n                                        autoFocus={true}\n                                        className='form-control form-sm'\n                                        type='text'\n                                        maxLength={64}\n                                        value={this.state.token.description}\n                                        onChange={this.handleUpdateDescription}\n                                    />\n                                </div>\n                            </div>\n                            <div>\n                                <div className='padding-top padding-bottom'>\n                                    <FormattedMessage\n                                        id='user.settings.tokens.nameHelp'\n                                        defaultMessage='Enter a description for your token to remember what it does.'\n                                    />\n                                </div>\n                                <label\n                                    id='clientError'\n                                    className='has-error is-empty'\n                                >\n                                    {this.state.error}\n                                </label>\n                                <div className='margin-top'>\n                                    <SaveButton\n                                        btnClass='btn-sm btn-primary'\n                                        savingMessage={\n                                            <FormattedMessage\n                                                id='user.settings.tokens.save'\n                                                defaultMessage='Save'\n                                            />\n                                        }\n                                        saving={false}\n                                    />\n                                    <button\n                                        className='btn btn-sm btn-link'\n                                        onClick={this.closeCreateToken}\n                                    >\n                                        <FormattedMessage\n                                            id='user.settings.tokens.cancel'\n                                            defaultMessage='Cancel'\n                                        />\n                                    </button>\n                                </div>\n                            </div>\n                        </form>\n                    </div>\n                </div>\n            );\n        } else if (this.state.creatingTokenState === 'CREATED') {\n            tokenList.push(\n                <div\n                    key={'created'}\n                    className='bot-list__item alert alert-warning'\n                >\n                    <div className='margin-bottom'>\n                        <WarningIcon additionalClassName='margin-right'/>\n                        <FormattedMessage\n                            id='user.settings.tokens.copy'\n                            defaultMessage=\"Please copy the access token below. You won't be able to see it again!\"\n                        />\n                    </div>\n                    <div className='whitespace--nowrap overflow--ellipsis'>\n                        <FormattedMessage\n                            id='user.settings.tokens.name'\n                            defaultMessage='Token Description: '\n                        />\n                        {this.state.token.description}\n                    </div>\n                    <div className='whitespace--nowrap overflow--ellipsis'>\n                        <FormattedMessage\n                            id='user.settings.tokens.id'\n                            defaultMessage='Token ID: '\n                        />\n                        {this.state.token.id}\n                    </div>\n                    <strong className='word-break--all'>\n                        <FormattedMessage\n                            id='user.settings.tokens.token'\n                            defaultMessage='Access Token: '\n                        />\n                        {this.state.token.token}\n                    </strong>\n                    <div className='margin-top'>\n                        <button\n                            className='btn btn-sm btn-primary'\n                            onClick={this.closeCreateToken}\n                        >\n                            <FormattedMessage\n                                id='bot.create_token.close'\n                                defaultMessage='Close'\n                            />\n                        </button>\n                    </div>\n                </div>\n            );\n        }\n\n        const imageURL = Utils.imageURLForUser(this.props.bot.user_id);\n\n        return (\n            <div className='backstage-list__item'>\n                <div className={'bot-list-img-container'}>\n                    <img\n                        className={'bot-list-img'}\n                        alt={'bot image'}\n                        src={imageURL}\n                    />\n                </div>\n                <div className='item-details'>\n                    <div className='item-details__row d-flex justify-content-between'>\n                        <strong className='item-details__name'>\n                            {displayName + ' (@' + username + ')'}\n                        </strong>\n                        {options}\n                    </div>\n                    <div className='bot-details__description'>\n                        <Markdown message={description}/>\n                    </div>\n                    <div className='light small'>\n                        <FormattedMessage\n                            id='bots.managed_by'\n                            defaultMessage='Managed by '\n                        />\n                        {ownerUsername}\n                    </div>\n                    <div className='bot-list is-empty'>\n                        {tokenList}\n                    </div>\n                </div>\n                <ConfirmModal\n                    title={\n                        <FormattedMessage\n                            id='bots.token.delete'\n                            defaultMessage='Delete Token'\n                        />\n                    }\n                    message={\n                        <FormattedMessage\n                            id='bots.token.confirm_text'\n                            defaultMessage='Are you sure you want to delete the token?'\n                        />\n                    }\n                    confirmButtonText={\n                        <FormattedMessage\n                            id='bots.token.confirm'\n                            defaultMessage='Delete'\n                        />\n                    }\n                    show={this.state.confirmingId !== ''}\n                    onConfirm={this.revokeTokenConfirmed}\n                    onCancel={this.closeConfirm}\n                />\n            </div>\n        );\n    }\n}\n","// Copyright (c) 2015-present Mattermost, Inc. All Rights Reserved.\n// See LICENSE.txt for license information.\n\nimport PropTypes from 'prop-types';\nimport React from 'react';\nimport {FormattedMessage} from 'react-intl';\n\nimport * as Utils from 'utils/utils.jsx';\nimport BackstageList from 'components/backstage/components/backstage_list.jsx';\nimport Constants from 'utils/constants.jsx';\nimport FormattedMarkdownMessage from 'components/formatted_markdown_message';\n\nimport Bot, {matchesFilter} from './bot.jsx';\n\nexport default class Bots extends React.PureComponent {\n    static propTypes = {\n\n        /**\n        *  Map from botUserId to bot.\n        */\n        bots: PropTypes.object.isRequired,\n\n        /**\n        *  Map from botUserId to accessTokens.\n        */\n        accessTokens: PropTypes.object.isRequired,\n\n        /**\n        *  Map from botUserId to owner.\n        */\n        owners: PropTypes.object.isRequired,\n\n        createBots: PropTypes.bool,\n\n        actions: PropTypes.shape({\n\n            /**\n            * Ensure we have bot accounts\n            */\n            loadBots: PropTypes.func.isRequired,\n\n            /**\n            * Load access tokens for bot accounts\n            */\n            getUserAccessTokensForUser: PropTypes.func.isRequired,\n\n            /**\n            * Access token managment\n            */\n            createUserAccessToken: PropTypes.func.isRequired,\n            revokeUserAccessToken: PropTypes.func.isRequired,\n            enableUserAccessToken: PropTypes.func.isRequired,\n            disableUserAccessToken: PropTypes.func.isRequired,\n\n            /**\n            * Load owner of bot account\n            */\n            getUser: PropTypes.func.isRequired,\n\n            /**\n            * Disable a bot\n            */\n            disableBot: PropTypes.func.isRequired,\n\n            /**\n            * Enable a bot\n            */\n            enableBot: PropTypes.func.isRequired,\n        }),\n\n        /**\n        *  Only used for routing since backstage is team based.\n        */\n        team: PropTypes.object.isRequired,\n    }\n\n    constructor(props) {\n        super(props);\n\n        this.state = {\n            loading: true,\n        };\n    }\n\n    componentDidMount() {\n        this.props.actions.loadBots(\n            Constants.Integrations.START_PAGE_NUM,\n            Constants.Integrations.PAGE_SIZE\n        ).then(\n            (result) => {\n                if (result.data) {\n                    const promises = [];\n\n                    for (const bot of result.data) {\n                        // We don't need to wait for this and we need to accept failure in the case where bot.owner_id is a plugin id\n                        this.props.actions.getUser(bot.owner_id);\n\n                        // We want to wait for these.\n                        promises.push(this.props.actions.getUser(bot.user_id));\n                        promises.push(this.props.actions.getUserAccessTokensForUser(bot.user_id));\n                    }\n\n                    Promise.all(promises).then(() => {\n                        this.setState({loading: false});\n                    });\n                }\n            }\n        );\n    }\n\n    DisabledSection(props) {\n        if (!props.hasDisabled) {\n            return null;\n        }\n        const botsToDisplay = React.Children.map(props.disabledBots, (child) => {\n            return React.cloneElement(child, {filter: props.filter});\n        });\n        return (\n            <React.Fragment>\n                <div className='bot-disabled'>\n                    <FormattedMessage\n                        id='bots.disabled'\n                        defaultMessage='Disabled'\n                    />\n                </div>\n                <div className='bot-list__disabled'>\n                    {botsToDisplay}\n                </div>\n            </React.Fragment>\n        );\n    }\n\n    EnabledSection(props) {\n        const botsToDisplay = React.Children.map(props.enabledBots, (child) => {\n            return React.cloneElement(child, {filter: props.filter});\n        });\n        return (\n            <div>\n                {botsToDisplay}\n            </div>\n        );\n    }\n\n    botToJSX = (bot) => {\n        return (\n            <Bot\n                key={bot.user_id}\n                bot={bot}\n                owner={this.props.owners[bot.user_id]}\n                accessTokens={this.props.accessTokens[bot.user_id] || {}}\n                actions={this.props.actions}\n                team={this.props.team}\n            />\n        );\n    };\n\n    bots = (filter) => {\n        const bots = Object.values(this.props.bots).sort((a, b) => a.username.localeCompare(b.username));\n        const match = (bot) => matchesFilter(bot, filter, this.props.owners[bot.user_id]);\n        const enabledBots = bots.filter((bot) => bot.delete_at === 0).filter(match).map(this.botToJSX);\n        const disabledBots = bots.filter((bot) => bot.delete_at > 0).filter(match).map(this.botToJSX);\n        const sections = (\n            <div key='sections'>\n                <this.EnabledSection\n                    enabledBots={enabledBots}\n                />\n                <this.DisabledSection\n                    hasDisabled={disabledBots.length > 0}\n                    disabledBots={disabledBots}\n                />\n            </div>\n        );\n\n        return [sections, enabledBots.length > 0 || disabledBots.length > 0];\n    }\n\n    render() {\n        return (\n            <BackstageList\n                header={\n                    <FormattedMessage\n                        id='bots.manage.header'\n                        defaultMessage='Bot Accounts'\n                    />\n                }\n                addText={this.props.createBots &&\n                    <FormattedMessage\n                        id='bots.manage.add'\n                        defaultMessage='Add Bot Account'\n                    />\n                }\n                addLink={'/' + this.props.team.name + '/integrations/bots/add'}\n                addButtonId='addBotAccount'\n                emptyText={\n                    <FormattedMessage\n                        id='bots.manage.empty'\n                        defaultMessage='No bot accounts found'\n                    />\n                }\n                emptyTextSearch={\n                    <FormattedMarkdownMessage\n                        id='bots.manage.emptySearch'\n                        defaultMessage='No bot accounts match **{searchTerm}**'\n                    />\n                }\n                helpText={\n                    <FormattedMessage\n                        id='bots.manage.help'\n                        defaultMessage='Use {botAccounts} to integrate with Mattermost through plugins or the API. Bot accounts are available to everyone on your server.'\n                        values={{\n                            botAccounts: (\n                                <a\n                                    target='_blank'\n                                    rel='noopener noreferrer'\n                                    href='https://mattermost.com/pl/default-bot-accounts'\n                                >\n                                    <FormattedMessage\n                                        id='bots.manage.bot_accounts'\n                                        defaultMessage='Bot Accounts'\n                                    />\n                                </a>\n                            ),\n                        }}\n                    />\n                }\n                searchPlaceholder={Utils.localizeMessage('bots.manage.search', 'Search Bot Accounts')}\n                loading={this.state.loading}\n            >\n                {this.bots}\n            </BackstageList>\n        );\n    }\n}\n","// Copyright (c) 2015-present Mattermost, Inc. All Rights Reserved.\n// See LICENSE.txt for license information.\n\nimport {connect} from 'react-redux';\nimport {bindActionCreators} from 'redux';\nimport {getBotAccounts} from 'mattermost-redux/selectors/entities/bots';\nimport {getConfig} from 'mattermost-redux/selectors/entities/general';\nimport {loadBots, disableBot, enableBot} from 'mattermost-redux/actions/bots';\nimport {createUserAccessToken, revokeUserAccessToken, enableUserAccessToken, disableUserAccessToken, getUserAccessTokensForUser, getUser} from 'mattermost-redux/actions/users';\nimport * as UserSelectors from 'mattermost-redux/selectors/entities/users';\n\nimport Bots from './bots.jsx';\n\nfunction mapStateToProps(state) {\n    const config = getConfig(state);\n    const createBots = config.EnableBotAccountCreation === 'true';\n    const bots = getBotAccounts(state);\n    const owners = Object.values(bots).\n        reduce((result, bot) => {\n            result[bot.user_id] = UserSelectors.getUser(state, bot.owner_id);\n            return result;\n        }, {});\n    return {\n        createBots,\n        bots,\n        accessTokens: state.entities.admin.userAccessTokensByUser,\n        owners,\n    };\n}\n\nfunction mapDispatchToProps(dispatch) {\n    return {\n        actions: bindActionCreators({\n            loadBots,\n            getUserAccessTokensForUser,\n            createUserAccessToken,\n            revokeUserAccessToken,\n            enableUserAccessToken,\n            disableUserAccessToken,\n            getUser,\n            disableBot,\n            enableBot,\n        }, dispatch),\n    };\n}\n\nexport default connect(mapStateToProps, mapDispatchToProps)(Bots);\n","// Copyright (c) 2015-present Mattermost, Inc. All Rights Reserved.\n// See LICENSE.txt for license information.\n\nimport PropTypes from 'prop-types';\nimport React from 'react';\nimport {intlShape} from 'react-intl';\n\nexport default class BackstageHeader extends React.Component {\n    static get propTypes() {\n        return {\n            children: PropTypes.node,\n        };\n    }\n    static contextTypes = {\n        intl: intlShape.isRequired,\n    };\n\n    render() {\n        const children = [];\n        const {formatMessage} = this.context.intl;\n\n        React.Children.forEach(this.props.children, (child, index) => {\n            if (index !== 0) {\n                children.push(\n                    <span\n                        key={'divider' + index}\n                        className='backstage-header__divider'\n                    >\n                        <i\n                            className='fa fa-angle-right'\n                            title={formatMessage({id: 'generic_icons.breadcrumb', defaultMessage: 'Breadcrumb Icon'})}\n                        />\n                    </span>\n                );\n            }\n\n            children.push(child);\n        });\n\n        return (\n            <div className='backstage-header'>\n                <h1>\n                    {children}\n                </h1>\n            </div>\n        );\n    }\n}\n","// Copyright (c) 2015-present Mattermost, Inc. All Rights Reserved.\n// See LICENSE.txt for license information.\n\nimport PropTypes from 'prop-types';\nimport React from 'react';\nimport {Link} from 'react-router-dom';\nimport {FormattedMessage} from 'react-intl';\nimport {OverlayTrigger, Tooltip} from 'react-bootstrap';\n\nimport * as UserUtils from 'mattermost-redux/utils/user_utils';\nimport {General} from 'mattermost-redux/constants';\n\nimport BotDefaultIcon from 'images/bot_default_icon.png';\n\nimport {browserHistory} from 'utils/browser_history';\nimport BackstageHeader from 'components/backstage/components/backstage_header.jsx';\nimport SpinnerButton from 'components/spinner_button.jsx';\nimport FormattedMarkdownMessage from 'components/formatted_markdown_message.jsx';\nimport FormError from 'components/form_error.jsx';\nimport {AcceptedProfileImageTypes, OVERLAY_TIME_DELAY} from 'utils/constants.jsx';\nimport * as Utils from 'utils/utils.jsx';\nimport * as FileUtils from 'utils/file_utils.jsx';\n\nconst roleOptionSystemAdmin = 'System Admin';\nconst roleOptionMember = 'Member';\n\nexport default class AddBot extends React.Component {\n    static propTypes = {\n\n        /**\n        *  Only used for routing since backstage is team based.\n        */\n        team: PropTypes.object.isRequired,\n\n        /**\n        *  Bot to edit (if editing)\n        */\n        bot: PropTypes.object,\n\n        /**\n        *  Roles of the bot to edit (if editing)\n        */\n        roles: PropTypes.string,\n\n        /**\n        * Maximum upload file size (for bot account profile picture)\n        */\n        maxFileSize: PropTypes.number.isRequired,\n\n        /**\n         * Editing user has the MANAGE_SYSTEM permission\n        */\n        editingUserHasManageSystem: PropTypes.bool.isRequired,\n\n        /**\n        * Bot to edit\n        */\n        actions: PropTypes.shape({\n\n            /**\n            * Creates a new bot account.\n            */\n            createBot: PropTypes.func.isRequired,\n\n            /**\n            * Patches an existing bot account.\n            */\n            patchBot: PropTypes.func.isRequired,\n\n            /**\n            * Uploads a user profile image\n            */\n            uploadProfileImage: PropTypes.func.isRequired,\n\n            /**\n            * Set profile image to default\n            */\n            setDefaultProfileImage: PropTypes.func.isRequired,\n\n            /**\n            * For creating default access token\n            */\n            createUserAccessToken: PropTypes.func.isRequired,\n\n            /**\n            * For creating setting bot to system admin or special posting permissions\n            */\n            updateUserRoles: PropTypes.func.isRequired,\n        }),\n    }\n\n    constructor(props) {\n        super(props);\n\n        this.state = {\n            error: '',\n            username: '',\n            displayName: '',\n            description: '',\n            adding: false,\n            image: BotDefaultIcon,\n            role: roleOptionMember,\n            postAll: false,\n            postChannels: false,\n        };\n\n        if (this.props.bot) {\n            this.state.username = this.props.bot.username;\n            this.state.displayName = this.props.bot.display_name;\n            this.state.description = this.props.bot.description;\n            this.state.role = UserUtils.isSystemAdmin(this.props.roles || '') ? roleOptionSystemAdmin : roleOptionMember;\n            this.state.postAll = UserUtils.hasPostAllRole(this.props.roles || '');\n            this.state.postChannels = UserUtils.hasPostAllPublicRole(this.props.roles || '');\n        }\n    }\n\n    updateUsername = (e) => {\n        this.setState({\n            username: e.target.value,\n        });\n    }\n\n    updateDisplayName = (e) => {\n        this.setState({\n            displayName: e.target.value,\n        });\n    }\n\n    updateDescription = (e) => {\n        this.setState({\n            description: e.target.value,\n        });\n    }\n\n    updateRole = (e) => {\n        this.setState({\n            role: e.target.value,\n        });\n    }\n\n    updatePostAll = (e) => {\n        this.setState({\n            postAll: e.target.checked,\n        });\n    }\n\n    updatePostChannels = (e) => {\n        this.setState({\n            postChannels: e.target.checked,\n        });\n    }\n\n    updatePicture = (e) => {\n        if (e.target.files && e.target.files[0]) {\n            const pictureFile = e.target.files[0];\n            this.previewBlob = URL.createObjectURL(pictureFile);\n\n            var reader = new FileReader();\n            reader.onload = (e2) => {\n                const orientation = FileUtils.getExifOrientation(e2.target.result);\n                const orientationStyles = FileUtils.getOrientationStyles(orientation);\n\n                this.setState({\n                    image: this.previewBlob,\n                    orientationStyles,\n                });\n            };\n            reader.readAsArrayBuffer(pictureFile);\n            e.target.value = null;\n            this.setState({pictureFile});\n        } else {\n            this.setState({pictureFile: null, image: null});\n        }\n    }\n\n    setDefault = () => {\n        this.setState({pictureFile: 'default', image: BotDefaultIcon});\n    }\n\n    updateRoles = async (data) => {\n        let roles = General.SYSTEM_USER_ROLE;\n\n        if (this.state.role === roleOptionSystemAdmin) {\n            roles += ' ' + General.SYSTEM_ADMIN_ROLE;\n        } else if (this.state.postAll) {\n            roles += ' ' + General.SYSTEM_POST_ALL_ROLE;\n        } else if (this.state.postChannels) {\n            roles += ' ' + General.SYSTEM_POST_ALL_PUBLIC_ROLE;\n        }\n\n        const rolesResult = await this.props.actions.updateUserRoles(data.user_id, roles);\n        if (rolesResult) {\n            return rolesResult.error;\n        }\n\n        return null;\n    }\n\n    handleSubmit = async (e) => {\n        e.preventDefault();\n\n        if (this.state.adding) {\n            return;\n        }\n\n        if (!this.state.username || this.state.username.length < 3) {\n            this.setState({\n                error: (\n                    <FormattedMessage\n                        id='bots.manage.add.invalid_username'\n                        defaultMessage='Usernames have to begin with a lowercase letter and be 3-22 characters long. You can use lowercase letters, numbers, periods, dashes, and underscores.'\n                    />\n                ),\n            });\n            return;\n        }\n\n        if (this.state.pictureFile) {\n            if (!AcceptedProfileImageTypes.includes(this.state.pictureFile.type)) {\n                this.setState({\n                    error: (\n                        <FormattedMessage\n                            id='user.settings.general.validImage'\n                            defaultMessage='Only BMP, JPG or PNG images may be used for profile pictures'\n                        />\n                    ),\n                });\n            } else if (this.state.pictureFile.size > this.props.maxFileSize) {\n                this.setState({\n                    error: (\n                        <FormattedMessage\n                            id='user.settings.general.imageTooLarge'\n                            defaultMessage='Unable to upload profile image. File is too large.'\n                        />\n                    ),\n                });\n            }\n        }\n\n        this.setState({\n            adding: true,\n            error: '',\n        });\n\n        const bot = {\n            username: this.state.username.toLowerCase(),\n            display_name: this.state.displayName,\n            description: this.state.description,\n        };\n\n        let data;\n        let error;\n        if (this.props.bot) {\n            const result = await this.props.actions.patchBot(this.props.bot.user_id, bot);\n            if (result) {\n                data = result.data;\n                error = result.error;\n            } else {\n                error = Utils.localizeMessage('bot.edit_failed', 'Failed to edit bot');\n            }\n\n            if (!error) {\n                if (this.state.pictureFile && this.state.pictureFile !== 'default') {\n                    const imageResult = await this.props.actions.uploadProfileImage(data.user_id, this.state.pictureFile);\n                    error = imageResult.error;\n                } else if (this.state.pictureFile && this.state.pictureFile === 'default') {\n                    await this.props.actions.setDefaultProfileImage(data.user_id);\n                }\n            }\n\n            if (!error && data) {\n                error = this.updateRoles(data);\n            }\n\n            if (data) {\n                browserHistory.push(`/${this.props.team.name}/integrations/bots`);\n                return;\n            }\n        } else {\n            const usernameError = Utils.isValidUsername(bot.username);\n            if (usernameError) {\n                this.setState({\n                    adding: false,\n                    error: usernameError,\n                });\n                return;\n            }\n\n            const result = await this.props.actions.createBot(bot);\n            if (result) {\n                data = result.data;\n                error = result.error;\n            } else {\n                error = Utils.localizeMessage('bot.create_failed', 'Failed to create bot');\n            }\n\n            let token = '';\n            if (!error) {\n                if (this.state.pictureFile && this.state.pictureFile !== 'default') {\n                    await this.props.actions.uploadProfileImage(data.user_id, this.state.pictureFile);\n                } else {\n                    await this.props.actions.setDefaultProfileImage(data.user_id);\n                }\n                const tokenResult = await this.props.actions.createUserAccessToken(data.user_id,\n                    Utils.localizeMessage('bot.token.default.description', 'Default Token')\n                );\n\n                // On error just skip the confirmation because we have a bot without a token.\n                if (!tokenResult || tokenResult.error) {\n                    browserHistory.push(`/${this.props.team.name}/integrations/bots`);\n                    return;\n                }\n\n                token = tokenResult.data.token;\n            }\n\n            if (!error && data) {\n                error = this.updateRoles(data);\n            }\n\n            if (data) {\n                browserHistory.push(`/${this.props.team.name}/integrations/confirm?type=bots&id=${data.user_id}&token=${token}`);\n                return;\n            }\n        }\n\n        this.setState({\n            adding: false,\n        });\n\n        if (error) {\n            this.setState({\n                error: error.message,\n            });\n        }\n    }\n\n    render() {\n        let subtitle = (\n            <FormattedMessage\n                id='bots.manage.add'\n                defaultMessage='Add'\n            />\n        );\n        let buttonText = (\n            <FormattedMessage\n                id='bots.manage.add.create'\n                defaultMessage='Create Bot Account'\n            />\n        );\n        let buttonActiveText = (\n            <FormattedMessage\n                id='bots.manage.add.creating'\n                defaultMessage='Creating...'\n            />\n        );\n\n        // If we are editing\n        if (this.props.bot) {\n            subtitle = (\n                <FormattedMessage\n                    id='bots.manage.edit'\n                    defaultMessage='Edit'\n                />\n            );\n            buttonText = (\n                <FormattedMessage\n                    id='bots.manage.edit.title'\n                    defaultMessage='Update'\n                />\n            );\n            buttonActiveText = (\n                <FormattedMessage\n                    id='bots.manage.edit.editing'\n                    defaultMessage='Updating...'\n                />\n            );\n        }\n\n        let imageURL = '';\n        let removeImageIcon = (\n            <OverlayTrigger\n                delayShow={OVERLAY_TIME_DELAY}\n                placement='right'\n                overlay={(\n                    <Tooltip id='removeIcon'>\n                        <FormattedMessage\n                            id='bot.remove_profile_picture'\n                            defaultMessage='Remove Bot Icon'\n                        />\n                    </Tooltip>\n                )}\n            >\n                <a\n                    className={'bot-profile__remove'}\n                    onClick={this.setDefault}\n                >\n                    <span>{'×'}</span>\n                </a>\n            </OverlayTrigger>\n        );\n        let imageStyles = null;\n        if (this.props.bot && !this.state.pictureFile) {\n            imageURL = Utils.imageURLForUser(this.props.bot.user_id);\n        } else {\n            imageURL = this.state.image;\n            imageStyles = this.state.orientationStyles;\n            if (this.state.image === BotDefaultIcon) {\n                removeImageIcon = null;\n            }\n        }\n\n        return (\n            <div className='backstage-content'>\n                <BackstageHeader>\n                    <Link to={`/${this.props.team.name}/integrations/bots`}>\n                        <FormattedMessage\n                            id='bots.manage.header'\n                            defaultMessage='Bot Accounts'\n                        />\n                    </Link>\n                    {subtitle}\n                </BackstageHeader>\n                <div className='backstage-form'>\n                    <form\n                        className='form-horizontal'\n                        onSubmit={this.handleSubmit}\n                    >\n                        <div className='form-group'>\n                            <label\n                                className='control-label col-sm-4'\n                                htmlFor='username'\n                            >\n                                <FormattedMessage\n                                    id='bots.add.username'\n                                    defaultMessage='Username'\n                                />\n                            </label>\n                            <div className='col-md-5 col-sm-8'>\n                                <input\n                                    id='username'\n                                    type='text'\n                                    maxLength='22'\n                                    className='form-control'\n                                    value={this.state.username}\n                                    onChange={this.updateUsername}\n                                />\n                                <div className='form__help'>\n                                    <FormattedMessage\n                                        id='bot.add.username.help'\n                                        defaultMessage='You can use lowercase letters, numbers, periods, dashes, and underscores.'\n                                    />\n                                </div>\n                            </div>\n                        </div>\n                        <div className='form-group'>\n                            <label\n                                className='control-label col-sm-4'\n                                htmlFor='boticon'\n                            >\n                                <FormattedMessage\n                                    id='bots.add.icon'\n                                    defaultMessage='Bot Icon'\n                                />\n                            </label>\n                            <div className='col-md-5 col-sm-8'>\n                                <div className={'bot-img-container'}>\n                                    <img\n                                        className={'bot-img'}\n                                        alt={'bot image'}\n                                        src={imageURL}\n                                        style={imageStyles}\n                                    />\n                                    {removeImageIcon}\n                                </div>\n                                <div\n                                    className='btn btn-sm btn-primary btn-file sel-btn'\n                                >\n                                    <FormattedMessage\n                                        id='bots.image.upload'\n                                        defaultMessage='Upload an image'\n                                    />\n                                    <input\n                                        accept='.jpg,.png,.bmp'\n                                        type='file'\n                                        onChange={this.updatePicture}\n                                    />\n                                </div>\n                            </div>\n                        </div>\n                        <div className='form-group'>\n                            <label\n                                className='control-label col-sm-4'\n                                htmlFor='displayName'\n                            >\n                                <FormattedMessage\n                                    id='bots.add.displayName'\n                                    defaultMessage='Display Name'\n                                />\n                            </label>\n                            <div className='col-md-5 col-sm-8'>\n                                <input\n                                    id='displayName'\n                                    type='text'\n                                    maxLength='64'\n                                    className='form-control'\n                                    value={this.state.displayName}\n                                    onChange={this.updateDisplayName}\n                                />\n                                <div className='form__help'>\n                                    <FormattedMessage\n                                        id='bot.add.display_name.help'\n                                        defaultMessage={'(Optional) You can choose to display your bot\\'s full name rather than its username.'}\n                                    />\n                                </div>\n                            </div>\n                        </div>\n                        <div className='form-group'>\n                            <label\n                                className='control-label col-sm-4'\n                                htmlFor='description'\n                            >\n                                <FormattedMessage\n                                    id='bot.add.description'\n                                    defaultMessage='Description'\n                                />\n                            </label>\n                            <div className='col-md-5 col-sm-8'>\n                                <input\n                                    id='description'\n                                    type='text'\n                                    maxLength='1024'\n                                    className='form-control'\n                                    value={this.state.description}\n                                    onChange={this.updateDescription}\n                                />\n                                <div className='form__help'>\n                                    <FormattedMessage\n                                        id='bot.add.description.help'\n                                        defaultMessage='(Optional) Let others know what this bot does.'\n                                    />\n                                </div>\n                            </div>\n                        </div>\n                        <div className='form-group'>\n                            <label\n                                className='control-label col-sm-4'\n                                htmlFor='role'\n                            >\n                                <FormattedMessage\n                                    id='bot.add.role'\n                                    defaultMessage='Role'\n                                />\n                            </label>\n                            <div className='col-md-5 col-sm-8'>\n                                <select\n                                    className='form-control'\n                                    value={this.state.role}\n                                    disabled={!this.props.editingUserHasManageSystem}\n                                    onChange={this.updateRole}\n                                >\n                                    <option\n                                        value={roleOptionMember}\n                                    >\n                                        {roleOptionMember}\n                                    </option>\n                                    <option\n                                        value={roleOptionSystemAdmin}\n                                    >\n                                        {roleOptionSystemAdmin}\n                                    </option>\n                                </select>\n                                <div className='form__help'>\n                                    <FormattedMessage\n                                        id='bot.add.role.help'\n                                        defaultMessage='Choose what role the bot should have.'\n                                    />\n                                </div>\n                            </div>\n                        </div>\n                        <div className='row bot-profile__section'>\n                            <div className='col-md-5 col-sm-8 col-sm-offset-4'>\n                                <FormattedMarkdownMessage\n                                    id='admin.manage_roles.additionalRoles'\n                                    defaultMessage='Select additional permissions for the account. [Read more about roles and permissions](!https://about.mattermost.com/default-permissions).'\n                                />\n                            </div>\n                        </div>\n                        <div className='form-group'>\n                            <label\n                                className='control-label col-sm-4'\n                                htmlFor='postAll'\n                            >\n                                <FormattedMessage\n                                    id='bot.add.post_all'\n                                    defaultMessage='post:all'\n                                />\n                            </label>\n                            <div className='col-md-5 col-sm-8 checkbox'>\n                                <div className='checkbox no-padding'>\n                                    <label htmlFor='postAll'>\n                                        <input\n                                            id='postAll'\n                                            type='checkbox'\n                                            checked={this.state.postAll || this.state.role === roleOptionSystemAdmin}\n                                            onChange={this.updatePostAll}\n                                            disabled={!this.props.editingUserHasManageSystem || this.state.role === roleOptionSystemAdmin}\n                                        />\n                                        <FormattedMessage\n                                            id='bot.add.post_all.enabled'\n                                            defaultMessage='Enabled'\n                                        />\n                                    </label>\n                                </div>\n                                <div className='form__help'>\n                                    <FormattedMessage\n                                        id='bot.add.post_all.help'\n                                        defaultMessage='Bot will have access to post to all Mattermost channels including direct messages.'\n                                    />\n                                </div>\n                            </div>\n                        </div>\n                        <div className='form-group'>\n                            <label\n                                className='control-label col-sm-4'\n                                htmlFor='postChannels'\n                            >\n                                <FormattedMessage\n                                    id='bot.add.post_channels'\n                                    defaultMessage='post:channels'\n                                />\n                            </label>\n                            <div className='col-md-5 col-sm-8 checkbox'>\n                                <div className='checkbox no-padding'>\n                                    <label htmlFor='postChannels'>\n                                        <input\n                                            id='postChannels'\n                                            type='checkbox'\n                                            checked={this.state.postChannels || this.state.role === roleOptionSystemAdmin || this.state.postAll}\n                                            onChange={this.updatePostChannels}\n                                            disabled={!this.props.editingUserHasManageSystem || this.state.role === roleOptionSystemAdmin || this.state.postAll}\n                                        />\n                                        <FormattedMessage\n                                            id='bot.add.post_channels.enabled'\n                                            defaultMessage='Enabled'\n                                        />\n                                    </label>\n                                </div>\n                                <div className='form__help'>\n                                    <FormattedMessage\n                                        id='bot.add.post_channels.help'\n                                        defaultMessage='Bot will have access to post to all Mattermost public channels.'\n                                    />\n                                </div>\n                            </div>\n                        </div>\n                        <div className='backstage-form__footer'>\n                            <FormError\n                                type='backstage'\n                                errors={[this.state.error]}\n                            />\n                            <Link\n                                className='btn btn-link btn-sm'\n                                to={`/${this.props.team.name}/integrations/bots`}\n                            >\n                                <FormattedMessage\n                                    id='bots.manage.add.cancel'\n                                    defaultMessage='Cancel'\n                                />\n                            </Link>\n                            <SpinnerButton\n                                className='btn btn-primary'\n                                type='submit'\n                                spinning={this.state.adding}\n                                spinningText={buttonActiveText}\n                                onClick={this.handleSubmit}\n                                id='saveBot'\n                            >\n                                {buttonText}\n                            </SpinnerButton>\n                        </div>\n                    </form>\n                </div>\n            </div>\n        );\n    }\n}\n","// Copyright (c) 2015-present Mattermost, Inc. All Rights Reserved.\n// See LICENSE.txt for license information.\n\nimport {connect} from 'react-redux';\nimport {bindActionCreators} from 'redux';\n\nimport {updateUserRoles, uploadProfileImage, setDefaultProfileImage, createUserAccessToken} from 'mattermost-redux/actions/users';\nimport {createBot, patchBot} from 'mattermost-redux/actions/bots';\nimport {getBotAccounts} from 'mattermost-redux/selectors/entities/bots';\nimport {getConfig} from 'mattermost-redux/selectors/entities/general';\nimport {getUsers} from 'mattermost-redux/selectors/entities/common';\nimport {haveISystemPermission} from 'mattermost-redux/selectors/entities/roles';\nimport {Permissions} from 'mattermost-redux/constants';\n\nimport AddBot from './add_bot.jsx';\n\nfunction mapStateToProps(state, ownProps) {\n    const config = getConfig(state);\n    const botId = (new URLSearchParams(ownProps.location.search)).get('id');\n    const bots = getBotAccounts(state);\n    const bot = bots ? bots[botId] : null;\n    const user = bot ? getUsers(state)[bot.user_id] : null;\n    const roles = user ? user.roles : null;\n    return {\n        maxFileSize: parseInt(config.MaxFileSize, 10),\n        bot,\n        roles,\n        editingUserHasManageSystem: haveISystemPermission(state, {permission: Permissions.MANAGE_SYSTEM}),\n    };\n}\n\nfunction mapDispatchToProps(dispatch) {\n    return {\n        actions: bindActionCreators({\n            createBot,\n            patchBot,\n            uploadProfileImage,\n            setDefaultProfileImage,\n            createUserAccessToken,\n            updateUserRoles,\n        }, dispatch),\n    };\n}\n\nexport default connect(mapStateToProps, mapDispatchToProps)(AddBot);\n","// Copyright (c) 2015-present Mattermost, Inc. All Rights Reserved.\n// See LICENSE.txt for license information.\n\nimport PropTypes from 'prop-types';\nimport React from 'react';\nimport {Link} from 'react-router-dom';\n\nexport default class IntegrationOption extends React.Component {\n    static get propTypes() {\n        return {\n            image: PropTypes.string.isRequired,\n            title: PropTypes.node.isRequired,\n            description: PropTypes.node.isRequired,\n            link: PropTypes.string.isRequired,\n        };\n    }\n\n    render() {\n        const {image, title, description, link} = this.props;\n\n        return (\n            <Link\n                to={link}\n                className='integration-option'\n            >\n                <img\n                    alt={'integration image'}\n                    className='integration-option__image'\n                    src={image}\n                />\n                <div className='integration-option__title'>\n                    {title}\n                </div>\n                <div className='integration-option__description'>\n                    {description}\n                </div>\n            </Link>\n        );\n    }\n}\n","// Copyright (c) 2015-present Mattermost, Inc. All Rights Reserved.\n// See LICENSE.txt for license information.\n\nimport PropTypes from 'prop-types';\nimport React from 'react';\nimport {FormattedMessage} from 'react-intl';\n\nimport {Permissions} from 'mattermost-redux/constants';\n\nimport BotAccountsIcon from 'images/bot_default_icon.png';\n\nimport * as Utils from 'utils/utils.jsx';\nimport IncomingWebhookIcon from 'images/incoming_webhook.jpg';\nimport OAuthIcon from 'images/oauth_icon.png';\nimport OutgoingWebhookIcon from 'images/outgoing_webhook.jpg';\nimport SlashCommandIcon from 'images/slash_command_icon.jpg';\n\nimport SystemPermissionGate from 'components/permissions_gates/system_permission_gate';\nimport TeamPermissionGate from 'components/permissions_gates/team_permission_gate';\n\nimport IntegrationOption from './integration_option.jsx';\n\nexport default class Integrations extends React.Component {\n    static get propTypes() {\n        return {\n            team: PropTypes.object,\n            user: PropTypes.object,\n            siteName: PropTypes.string,\n            enableIncomingWebhooks: PropTypes.bool,\n            enableOutgoingWebhooks: PropTypes.bool,\n            enableCommands: PropTypes.bool,\n            enableOAuthServiceProvider: PropTypes.bool,\n        };\n    }\n\n    componentDidMount() {\n        this.updateTitle();\n    }\n\n    updateTitle = () => {\n        const currentSiteName = this.props.siteName || '';\n        document.title = Utils.localizeMessage('admin.sidebar.integrations', 'Integrations') + ' - ' + this.props.team.display_name + ' ' + currentSiteName;\n    }\n\n    render() {\n        const options = [];\n\n        if (this.props.enableIncomingWebhooks) {\n            options.push(\n                <TeamPermissionGate\n                    teamId={this.props.team.id}\n                    permissions={[Permissions.MANAGE_INCOMING_WEBHOOKS]}\n                    key='incomingWebhookPermission'\n                >\n                    <IntegrationOption\n                        key='incomingWebhook'\n                        image={IncomingWebhookIcon}\n                        title={\n                            <FormattedMessage\n                                id='integrations.incomingWebhook.title'\n                                defaultMessage='Incoming Webhook'\n                            />\n                        }\n                        description={\n                            <FormattedMessage\n                                id='integrations.incomingWebhook.description'\n                                defaultMessage='Incoming webhooks allow external integrations to send messages'\n                            />\n                        }\n                        link={'/' + this.props.team.name + '/integrations/incoming_webhooks'}\n                    />\n                </TeamPermissionGate>\n            );\n        }\n\n        if (this.props.enableOutgoingWebhooks) {\n            options.push(\n                <TeamPermissionGate\n                    teamId={this.props.team.id}\n                    permissions={[Permissions.MANAGE_OUTGOING_WEBHOOKS]}\n                    key='outgoingWebhookPermission'\n                >\n                    <IntegrationOption\n                        key='outgoingWebhook'\n                        image={OutgoingWebhookIcon}\n                        title={\n                            <FormattedMessage\n                                id='integrations.outgoingWebhook.title'\n                                defaultMessage='Outgoing Webhook'\n                            />\n                        }\n                        description={\n                            <FormattedMessage\n                                id='integrations.outgoingWebhook.description'\n                                defaultMessage='Outgoing webhooks allow external integrations to receive and respond to messages'\n                            />\n                        }\n                        link={'/' + this.props.team.name + '/integrations/outgoing_webhooks'}\n                    />\n                </TeamPermissionGate>\n            );\n        }\n\n        if (this.props.enableCommands) {\n            options.push(\n                <TeamPermissionGate\n                    teamId={this.props.team.id}\n                    permissions={[Permissions.MANAGE_SLASH_COMMANDS]}\n                    key='commandPermission'\n                >\n                    <IntegrationOption\n                        key='command'\n                        image={SlashCommandIcon}\n                        title={\n                            <FormattedMessage\n                                id='integrations.command.title'\n                                defaultMessage='Slash Command'\n                            />\n                        }\n                        description={\n                            <FormattedMessage\n                                id='integrations.command.description'\n                                defaultMessage='Slash commands send events to an external integration'\n                            />\n                        }\n                        link={'/' + this.props.team.name + '/integrations/commands'}\n                    />\n                </TeamPermissionGate>\n            );\n        }\n\n        if (this.props.enableOAuthServiceProvider) {\n            options.push(\n                <SystemPermissionGate\n                    permissions={[Permissions.MANAGE_OAUTH]}\n                    key='oauth2AppsPermission'\n                >\n                    <IntegrationOption\n                        key='oauth2Apps'\n                        image={OAuthIcon}\n                        title={\n                            <FormattedMessage\n                                id='integrations.oauthApps.title'\n                                defaultMessage='OAuth 2.0 Applications'\n                            />\n                        }\n                        description={\n                            <FormattedMessage\n                                id='integrations.oauthApps.description'\n                                defaultMessage='Auth 2.0 allows external applications to make authorized requests to the Mattermost API'\n                            />\n                        }\n                        link={'/' + this.props.team.name + '/integrations/oauth2-apps'}\n                    />\n                </SystemPermissionGate>\n            );\n        }\n\n        options.push(\n            <SystemPermissionGate\n                permissions={['manage_bots']}\n                key='botsPermissions'\n            >\n                <IntegrationOption\n                    image={BotAccountsIcon}\n                    title={\n                        <FormattedMessage\n                            id='bots.manage.header'\n                            defaultMessage='Bot Accounts'\n                        />\n                    }\n                    description={\n                        <FormattedMessage\n                            id='bots.manage.description'\n                            defaultMessage='Use bot accounts to integrate with Mattermost through plugins or the API'\n                        />\n                    }\n                    link={'/' + this.props.team.name + '/integrations/bots'}\n                />\n            </SystemPermissionGate>\n        );\n\n        return (\n            <div className='backstage-content row'>\n                <div className='backstage-header'>\n                    <h1>\n                        <FormattedMessage\n                            id='integrations.header'\n                            defaultMessage='Integrations'\n                        />\n                    </h1>\n                </div>\n                <div className='backstage-list__help'>\n                    <FormattedMessage\n                        id='integrations.help'\n                        defaultMessage='Visit the {appDirectory} to find self-hosted, third-party apps and integrations for Mattermost.'\n                        values={{\n                            appDirectory: (\n                                <a\n                                    target='_blank'\n                                    rel='noopener noreferrer'\n                                    href='https://about.mattermost.com/default-app-directory/'\n                                >\n                                    <FormattedMessage\n                                        id='integrations.help.appDirectory'\n                                        defaultMessage='App Directory'\n                                    />\n                                </a>\n                            ),\n                        }}\n                    />\n                </div>\n                <div className='integrations-list d-flex flex-wrap'>\n                    {options}\n                </div>\n            </div>\n        );\n    }\n}\n","// Copyright (c) 2015-present Mattermost, Inc. All Rights Reserved.\n// See LICENSE.txt for license information.\n\nimport {connect} from 'react-redux';\nimport {getConfig} from 'mattermost-redux/selectors/entities/general';\n\nimport Integrations from './integrations.jsx';\n\nfunction mapStateToProps(state) {\n    const config = getConfig(state);\n    const siteName = config.SiteName;\n    const enableIncomingWebhooks = config.EnableIncomingWebhooks === 'true';\n    const enableOutgoingWebhooks = config.EnableOutgoingWebhooks === 'true';\n    const enableCommands = config.EnableCommands === 'true';\n    const enableOAuthServiceProvider = config.EnableOAuthServiceProvider === 'true';\n\n    return {\n        siteName,\n        enableIncomingWebhooks,\n        enableOutgoingWebhooks,\n        enableCommands,\n        enableOAuthServiceProvider,\n    };\n}\n\nexport default connect(mapStateToProps)(Integrations);\n","// Copyright (c) 2015-present Mattermost, Inc. All Rights Reserved.\n// See LICENSE.txt for license information.\n\nimport PropTypes from 'prop-types';\nimport React from 'react';\n\nexport default class AnyTeamPermissionGate extends React.Component {\n    static defaultProps = {\n        invert: false,\n    }\n\n    static propTypes = {\n\n        /**\n         * Permissions enough to pass the gate (binary OR)\n         */\n        permissions: PropTypes.arrayOf(PropTypes.string).isRequired,\n\n        /**\n         * Has permission\n         */\n        hasPermission: PropTypes.bool.isRequired,\n\n        /**\n         * Invert the permission (used for else)\n         */\n        invert: PropTypes.bool.isRequired,\n\n        /**\n         * Content protected by the permissions gate\n         */\n        children: PropTypes.node.isRequired,\n    };\n\n    render() {\n        if (this.props.hasPermission && !this.props.invert) {\n            return this.props.children;\n        }\n        if (!this.props.hasPermission && this.props.invert) {\n            return this.props.children;\n        }\n        return null;\n    }\n}\n","// Copyright (c) 2015-present Mattermost, Inc. All Rights Reserved.\n// See LICENSE.txt for license information.\n\nimport {connect} from 'react-redux';\n\nimport {haveITeamPermission} from 'mattermost-redux/selectors/entities/roles';\nimport {getMyTeams} from 'mattermost-redux/selectors/entities/teams';\n\nimport AnyTeamPermissionGate from './any_team_permission_gate.jsx';\n\nfunction mapStateToProps(state, ownProps) {\n    const teams = getMyTeams(state);\n    for (const team of teams) {\n        for (const permission of ownProps.permissions) {\n            if (haveITeamPermission(state, {team: team.id, permission})) {\n                return {hasPermission: true};\n            }\n        }\n    }\n\n    return {hasPermission: false};\n}\n\nexport default connect(mapStateToProps)(AnyTeamPermissionGate);\n","// Copyright (c) 2015-present Mattermost, Inc. All Rights Reserved.\n// See LICENSE.txt for license information.\n\nimport PropTypes from 'prop-types';\nimport React from 'react';\n\nimport Constants from 'utils/constants.jsx';\nimport * as Utils from 'utils/utils.jsx';\n\nimport ConfirmModal from './confirm_modal.jsx';\n\nexport default class DeleteModalTrigger extends React.PureComponent {\n    static propTypes = {\n        onDelete: PropTypes.func.isRequired,\n    }\n\n    constructor(props) {\n        super(props);\n        if (this.constructor === DeleteModalTrigger) {\n            throw new TypeError('Can not construct abstract class.');\n        }\n\n        this.state = {\n            showDeleteModal: false,\n        };\n    }\n\n    handleOpenModal = (e) => {\n        e.preventDefault();\n\n        this.setState({\n            showDeleteModal: true,\n        });\n    }\n\n    handleConfirm = () => {\n        this.props.onDelete();\n    }\n\n    handleCancel = () => {\n        this.setState({\n            showDeleteModal: false,\n        });\n    }\n\n    handleKeyDown = (e) => {\n        if (Utils.isKeyPressed(e, Constants.KeyCodes.ENTER)) {\n            this.handleConfirm(e);\n        }\n    }\n\n    render() {\n        return (\n            <span>\n                <button\n                    className='color--link style--none'\n                    onClick={this.handleOpenModal}\n                >\n                    { this.triggerTitle }\n                </button>\n                <ConfirmModal\n                    show={this.state.showDeleteModal}\n                    title={this.modalTitle}\n                    message={this.modalMessage}\n                    confirmButtonText={this.modalConfirmButton}\n                    onConfirm={this.handleConfirm}\n                    onCancel={this.handleCancel}\n                    onKeyDown={this.handleKeyDown}\n                />\n            </span>\n        );\n    }\n}\n","// Copyright (c) 2015-present Mattermost, Inc. All Rights Reserved.\n// See LICENSE.txt for license information.\nimport PropTypes from 'prop-types';\nimport React from 'react';\nimport {FormattedMessage} from 'react-intl';\n\nimport DeleteModalTrigger from 'components/delete_modal_trigger.jsx';\nimport WarningIcon from 'components/icon/warning_icon';\n\nexport default class DeleteEmoji extends DeleteModalTrigger {\n    static propTypes = {\n        onDelete: PropTypes.func.isRequired,\n    }\n\n    get triggerTitle() {\n        return (\n            <FormattedMessage\n                id='emoji_list.delete'\n                defaultMessage='Delete'\n            />\n        );\n    }\n\n    get modalTitle() {\n        return (\n            <FormattedMessage\n                id='emoji_list.delete.confirm.title'\n                defaultMessage='Delete Custom Emoji'\n            />\n        );\n    }\n\n    get modalMessage() {\n        return (\n            <div className='alert alert-warning'>\n                <WarningIcon additionalClassName='fa-margin--right'/>\n                <FormattedMessage\n                    id='emoji_list.delete.confirm.msg'\n                    defaultMessage='This action permanently deletes the custom emoji. Are you sure you want to delete it?'\n                />\n            </div>\n        );\n    }\n\n    get modalConfirmButton() {\n        return (\n            <FormattedMessage\n                id='emoji_list.delete.confirm.button'\n                defaultMessage='Delete'\n            />\n        );\n    }\n}\n","// Copyright (c) 2015-present Mattermost, Inc. All Rights Reserved.\n// See LICENSE.txt for license information.\n\nimport React from 'react';\nimport PropTypes from 'prop-types';\n\nimport Permissions from 'mattermost-redux/constants/permissions';\nimport {Client4} from 'mattermost-redux/client';\n\nimport DeleteEmoji from 'components/emoji/delete_emoji_modal.jsx';\nimport AnyTeamPermissionGate from 'components/permissions_gates/any_team_permission_gate';\n\nexport default class EmojiListItem extends React.Component {\n    static propTypes = {\n        emoji: PropTypes.object.isRequired,\n        currentUserId: PropTypes.string.isRequired,\n        creatorDisplayName: PropTypes.string.isRequired,\n        creatorUsername: PropTypes.string,\n        currentTeam: PropTypes.object,\n        onDelete: PropTypes.func,\n        actions: PropTypes.shape({\n            deleteCustomEmoji: PropTypes.func.isRequired,\n        }).isRequired,\n    }\n\n    static defaultProps = {\n        emoji: {},\n        currentUserId: '',\n        currentTeam: {},\n        creatorDisplayName: '',\n    }\n\n    handleDelete = () => {\n        if (this.props.onDelete) {\n            this.props.onDelete(this.props.emoji.id);\n        }\n\n        this.props.actions.deleteCustomEmoji(this.props.emoji.id);\n    }\n\n    render() {\n        const emoji = this.props.emoji;\n        const creatorUsername = this.props.creatorUsername;\n        let creatorDisplayName = this.props.creatorDisplayName;\n\n        if (creatorUsername && creatorUsername !== creatorDisplayName) {\n            creatorDisplayName += ' (@' + creatorUsername + ')';\n        }\n\n        let deleteButton = null;\n        if (emoji.creator_id === this.props.currentUserId) {\n            deleteButton = (\n                <AnyTeamPermissionGate permissions={[Permissions.DELETE_EMOJIS]}>\n                    <DeleteEmoji onDelete={this.handleDelete}/>\n                </AnyTeamPermissionGate>\n            );\n        } else {\n            deleteButton = (\n                <AnyTeamPermissionGate permissions={[Permissions.DELETE_EMOJIS]}>\n                    <AnyTeamPermissionGate permissions={[Permissions.DELETE_OTHERS_EMOJIS]}>\n                        <DeleteEmoji onDelete={this.handleDelete}/>\n                    </AnyTeamPermissionGate>\n                </AnyTeamPermissionGate>\n            );\n        }\n\n        return (\n            <tr className='backstage-list__item'>\n                <td className='emoji-list__name'>\n                    {':' + emoji.name + ':'}\n                </td>\n                <td className='emoji-list__image'>\n                    <span\n                        className='emoticon'\n                        style={{backgroundImage: 'url(' + Client4.getCustomEmojiImageUrl(emoji.id) + ')'}}\n                    />\n                </td>\n                <td className='emoji-list__creator'>\n                    {creatorDisplayName}\n                </td>\n                <td className='emoji-list-item_actions'>\n                    {deleteButton}\n                </td>\n            </tr>\n        );\n    }\n}\n","// Copyright (c) 2015-present Mattermost, Inc. All Rights Reserved.\n// See LICENSE.txt for license information.\n\nimport {connect} from 'react-redux';\nimport {bindActionCreators} from 'redux';\n\nimport {getUser, getCurrentUserId} from 'mattermost-redux/selectors/entities/users';\nimport {getCurrentTeam} from 'mattermost-redux/selectors/entities/teams';\n\nimport {deleteCustomEmoji} from 'mattermost-redux/actions/emojis';\n\nimport {getDisplayNameByUser} from 'utils/utils.jsx';\n\nimport EmojiListItem from './emoji_list_item.jsx';\n\nfunction mapStateToProps(state, ownProps) {\n    const emoji = state.entities.emojis.customEmoji[ownProps.emojiId];\n    const creator = getUser(state, emoji.creator_id);\n\n    return {\n        emoji,\n        creatorDisplayName: getDisplayNameByUser(creator),\n        creatorUsername: creator ? creator.username : '',\n        currentUserId: getCurrentUserId(state),\n        currentTeam: getCurrentTeam(state),\n    };\n}\n\nfunction mapDispatchToProps(dispatch) {\n    return {\n        actions: bindActionCreators({\n            deleteCustomEmoji,\n        }, dispatch),\n    };\n}\n\nexport default connect(mapStateToProps, mapDispatchToProps)(EmojiListItem);\n","// Copyright (c) 2015-present Mattermost, Inc. All Rights Reserved.\n// See LICENSE.txt for license information.\n\nimport React from 'react';\nimport PropTypes from 'prop-types';\nimport {FormattedMessage} from 'react-intl';\n\nimport {Emoji} from 'mattermost-redux/constants';\n\nimport LoadingScreen from 'components/loading_screen.jsx';\nimport SaveButton from 'components/save_button.jsx';\nimport EmojiListItem from 'components/emoji/emoji_list_item';\nimport NextIcon from 'components/icon/next_icon';\nimport PreviousIcon from 'components/icon/previous_icon';\nimport SearchIcon from 'components/icon/search_icon';\nimport LocalizedInput from 'components/localized_input/localized_input';\n\nimport {t} from 'utils/i18n.jsx';\n\nconst EMOJI_PER_PAGE = 50;\nconst EMOJI_SEARCH_DELAY_MILLISECONDS = 200;\n\nexport default class EmojiList extends React.Component {\n    static propTypes = {\n\n        /**\n         * Custom emojis on the system.\n         */\n        emojiIds: PropTypes.arrayOf(PropTypes.string).isRequired,\n\n        /**\n         * Function to scroll list to top.\n         */\n        scrollToTop: PropTypes.func.isRequired,\n\n        actions: PropTypes.shape({\n\n            /**\n             * Get pages of custom emojis.\n             */\n            getCustomEmojis: PropTypes.func.isRequired,\n\n            /**\n             * Search custom emojis.\n             */\n            searchCustomEmojis: PropTypes.func.isRequired,\n        }).isRequired,\n    }\n\n    constructor(props) {\n        super(props);\n\n        this.searchTimeout = null;\n\n        this.state = {\n            loading: true,\n            page: 0,\n            nextLoading: false,\n            searchEmojis: null,\n            missingPages: true,\n        };\n    }\n\n    componentDidMount() {\n        this.props.actions.getCustomEmojis(0, EMOJI_PER_PAGE + 1, Emoji.SORT_BY_NAME, true).then(({data}) => {\n            this.setState({loading: false});\n            if (data && data.length < EMOJI_PER_PAGE) {\n                this.setState({missingPages: false});\n            }\n        });\n    }\n\n    nextPage = (e) => {\n        if (e) {\n            e.preventDefault();\n        }\n\n        const next = this.state.page + 1;\n        this.setState({nextLoading: true});\n        this.props.actions.getCustomEmojis(next, EMOJI_PER_PAGE, Emoji.SORT_BY_NAME, true).then(({data}) => {\n            this.setState({page: next, nextLoading: false});\n            if (data && data.length < EMOJI_PER_PAGE) {\n                this.setState({missingPages: false});\n            }\n\n            this.props.scrollToTop();\n        });\n    }\n\n    previousPage = (e) => {\n        if (e) {\n            e.preventDefault();\n        }\n\n        this.setState({page: this.state.page - 1, nextLoading: false});\n        this.props.scrollToTop();\n    }\n\n    onSearchChange = (e) => {\n        if (!e || !e.target) {\n            return;\n        }\n\n        const term = e.target.value || '';\n\n        clearTimeout(this.searchTimeout);\n\n        this.searchTimeout = setTimeout(async () => {\n            if (term.trim() === '') {\n                this.setState({searchEmojis: null, page: 0});\n                return;\n            }\n\n            this.setState({loading: true});\n\n            const {data} = await this.props.actions.searchCustomEmojis(term, {}, true);\n\n            if (data) {\n                this.setState({searchEmojis: data.map((em) => em.id), loading: false});\n            } else {\n                this.setState({searchEmojis: [], loading: false});\n            }\n        }, EMOJI_SEARCH_DELAY_MILLISECONDS);\n    }\n\n    deleteFromSearch = (emojiId) => {\n        if (!this.state.searchEmojis) {\n            return;\n        }\n\n        const index = this.state.searchEmojis.indexOf(emojiId);\n\n        if (index < 0) {\n            return;\n        }\n\n        const newSearchEmojis = [...this.state.searchEmojis];\n        newSearchEmojis.splice(index, 1);\n        this.setState({searchEmojis: newSearchEmojis});\n    }\n\n    render() {\n        const searchEmojis = this.state.searchEmojis;\n        const emojis = [];\n        let nextButton;\n        let previousButton;\n\n        if (this.state.loading) {\n            emojis.push(\n                <tr\n                    key='loading'\n                    className='backstage-list__item backstage-list__empty'\n                >\n                    <td colSpan='4'>\n                        <LoadingScreen key='loading'/>\n                    </td>\n                </tr>\n            );\n        } else if (this.props.emojiIds.length === 0 || (searchEmojis && searchEmojis.length === 0)) {\n            emojis.push(\n                <tr\n                    key='empty'\n                    className='backstage-list__item backstage-list__empty'\n                >\n                    <td colSpan='4'>\n                        <FormattedMessage\n                            id='emoji_list.empty'\n                            defaultMessage='No custom emoji found'\n                        />\n                    </td>\n                </tr>\n            );\n        } else if (searchEmojis) {\n            searchEmojis.forEach((emojiId) => {\n                emojis.push(\n                    <EmojiListItem\n                        key={'emoji_search_item' + emojiId}\n                        emojiId={emojiId}\n                        onDelete={this.deleteFromSearch}\n                    />\n                );\n            });\n        } else {\n            const pageStart = this.state.page * EMOJI_PER_PAGE;\n            const pageEnd = pageStart + EMOJI_PER_PAGE;\n            const emojisToDisplay = this.props.emojiIds.slice(pageStart, pageEnd);\n\n            emojisToDisplay.forEach((emojiId) => {\n                emojis.push(\n                    <EmojiListItem\n                        key={'emoji_list_item' + emojiId}\n                        emojiId={emojiId}\n                    />\n                );\n            });\n\n            if (this.state.missingPages) {\n                const buttonContents = (\n                    <span>\n                        <FormattedMessage\n                            id='filtered_user_list.next'\n                            defaultMessage='Next'\n                        />\n                        <NextIcon additionalClassName='margin-left'/>\n                    </span>\n                );\n\n                nextButton = (\n                    <SaveButton\n                        btnClass='btn-link'\n                        extraClasses='pull-right'\n                        onClick={this.nextPage}\n                        saving={this.state.nextLoading}\n                        disabled={this.state.nextLoading}\n                        defaultMessage={buttonContents}\n                        savingMessage={buttonContents}\n                    />\n                );\n            }\n\n            if (this.state.page > 0) {\n                previousButton = (\n                    <button\n                        className='btn btn-link'\n                        onClick={this.previousPage}\n                    >\n                        <PreviousIcon additionalClassName='margin-right'/>\n                        <FormattedMessage\n                            id='filtered_user_list.prev'\n                            defaultMessage='Previous'\n                        />\n                    </button>\n                );\n            }\n        }\n\n        return (\n            <div>\n                <div className='backstage-filters'>\n                    <div className='backstage-filter__search'>\n                        <SearchIcon/>\n                        <LocalizedInput\n                            type='search'\n                            className='form-control'\n                            placeholder={{id: t('emoji_list.search'), defaultMessage: 'Search Custom Emoji'}}\n                            onChange={this.onSearchChange}\n                            style={style.search}\n                        />\n                    </div>\n                </div>\n                <span className='backstage-list__help'>\n                    <p>\n                        <FormattedMessage\n                            id='emoji_list.help'\n                            defaultMessage=\"Custom emoji are available to everyone on your server. Type ':' followed by two characters in a message box to bring up the emoji selection menu.\"\n                        />\n                    </p>\n                    <p>\n                        <FormattedMessage\n                            id='emoji_list.help2'\n                            defaultMessage=\"Tip: If you add #, ##, or ### as the first character on a new line containing emoji, you can use larger sized emoji. To try it out, send a message such as: '# :smile:'.\"\n                        />\n                    </p>\n                </span>\n                <div className='backstage-list'>\n                    <table className='emoji-list__table'>\n                        <thead>\n                            <tr className='backstage-list__item emoji-list__table-header'>\n                                <th className='emoji-list__name'>\n                                    <FormattedMessage\n                                        id='emoji_list.name'\n                                        defaultMessage='Name'\n                                    />\n                                </th>\n                                <th className='emoji-list__image'>\n                                    <FormattedMessage\n                                        id='emoji_list.image'\n                                        defaultMessage='Image'\n                                    />\n                                </th>\n                                <th className='emoji-list__creator'>\n                                    <FormattedMessage\n                                        id='emoji_list.creator'\n                                        defaultMessage='Creator'\n                                    />\n                                </th>\n                                <th className='emoji-list_actions'>\n                                    <FormattedMessage\n                                        id='emoji_list.actions'\n                                        defaultMessage='Actions'\n                                    />\n                                </th>\n                            </tr>\n                        </thead>\n                        <tbody>\n                            {emojis}\n                        </tbody>\n                    </table>\n                </div>\n                <div className='filter-controls padding-top x2'>\n                    {previousButton}\n                    {nextButton}\n                </div>\n            </div>\n        );\n    }\n}\n\nconst style = {\n    search: {flexGrow: 0, flexShrink: 0},\n};\n","// Copyright (c) 2015-present Mattermost, Inc. All Rights Reserved.\n// See LICENSE.txt for license information.\n\nimport {connect} from 'react-redux';\nimport {bindActionCreators} from 'redux';\n\nimport {getCustomEmojiIdsSortedByName} from 'mattermost-redux/selectors/entities/emojis';\n\nimport {getCustomEmojis, searchCustomEmojis} from 'mattermost-redux/actions/emojis';\n\nimport EmojiList from './emoji_list.jsx';\n\nfunction mapStateToProps(state) {\n    return {\n        emojiIds: getCustomEmojiIdsSortedByName(state) || [],\n    };\n}\n\nfunction mapDispatchToProps(dispatch) {\n    return {\n        actions: bindActionCreators({\n            getCustomEmojis,\n            searchCustomEmojis,\n        }, dispatch),\n    };\n}\n\nexport default connect(mapStateToProps, mapDispatchToProps)(EmojiList);\n","// Copyright (c) 2015-present Mattermost, Inc. All Rights Reserved.\n// See LICENSE.txt for license information.\n\nimport React from 'react';\nimport PropTypes from 'prop-types';\nimport {FormattedMessage} from 'react-intl';\nimport {Link} from 'react-router-dom';\n\nimport Permissions from 'mattermost-redux/constants/permissions';\n\nimport * as Utils from 'utils/utils.jsx';\nimport AnyTeamPermissionGate from 'components/permissions_gates/any_team_permission_gate';\n\nimport EmojiList from './emoji_list';\n\nexport default class EmojiPage extends React.Component {\n    static propTypes = {\n        teamId: PropTypes.string.isRequired,\n        teamName: PropTypes.string.isRequired,\n        teamDisplayName: PropTypes.string.isRequired,\n        siteName: PropTypes.string,\n        scrollToTop: PropTypes.func.isRequired,\n        actions: PropTypes.shape({\n            loadRolesIfNeeded: PropTypes.func.isRequired,\n        }).isRequired,\n    }\n\n    static defaultProps = {\n        teamName: '',\n        teamDisplayName: '',\n        siteName: '',\n    }\n\n    componentDidMount() {\n        this.updateTitle();\n        this.props.actions.loadRolesIfNeeded(['system_admin', 'team_admin', 'system_user', 'team_user']);\n    }\n\n    updateTitle = (props = this.props) => {\n        document.title = Utils.localizeMessage('custom_emoji.header', 'Custom Emoji') + ' - ' + props.teamDisplayName + ' ' + props.siteName;\n    }\n\n    UNSAFE_componentWillReceiveProps(nextProps) { // eslint-disable-line camelcase\n        if (this.props.siteName !== nextProps.siteName) {\n            this.updateTitle(nextProps);\n        }\n    }\n\n    render() {\n        return (\n            <div className='backstage-content emoji-list'>\n                <div className='backstage-header'>\n                    <h1>\n                        <FormattedMessage\n                            id='emoji_list.header'\n                            defaultMessage='Custom Emoji'\n                        />\n                    </h1>\n                    <AnyTeamPermissionGate permissions={[Permissions.CREATE_EMOJIS]}>\n                        <Link\n                            className='add-link'\n                            to={'/' + this.props.teamName + '/emoji/add'}\n                        >\n                            <button\n                                type='button'\n                                className='btn btn-primary'\n                            >\n                                <FormattedMessage\n                                    id='emoji_list.add'\n                                    defaultMessage='Add Custom Emoji'\n                                />\n                            </button>\n                        </Link>\n                    </AnyTeamPermissionGate>\n                </div>\n                <EmojiList scrollToTop={this.props.scrollToTop}/>\n            </div>\n        );\n    }\n}\n","// Copyright (c) 2015-present Mattermost, Inc. All Rights Reserved.\n// See LICENSE.txt for license information.\n\nimport {connect} from 'react-redux';\nimport {bindActionCreators} from 'redux';\n\nimport {getCurrentTeam} from 'mattermost-redux/selectors/entities/teams';\nimport {loadRolesIfNeeded} from 'mattermost-redux/actions/roles';\n\nimport EmojiPage from './emoji_page.jsx';\n\nfunction mapStateToProps(state) {\n    const team = getCurrentTeam(state) || {};\n\n    return {\n        teamId: team.id,\n        teamName: team.name,\n        teamDisplayName: team.display_name,\n        siteName: state.entities.general.config.SiteName,\n    };\n}\n\nfunction mapDispatchToProps(dispatch) {\n    return {\n        actions: bindActionCreators({\n            loadRolesIfNeeded,\n        }, dispatch),\n    };\n}\n\nexport default connect(mapStateToProps, mapDispatchToProps)(EmojiPage);\n","// Copyright (c) 2015-present Mattermost, Inc. All Rights Reserved.\n// See LICENSE.txt for license information.\n\nimport PropTypes from 'prop-types';\nimport React from 'react';\nimport {FormattedMessage} from 'react-intl';\nimport {Link} from 'react-router-dom';\n\nimport BackstageHeader from 'components/backstage/components/backstage_header.jsx';\nimport FormError from 'components/form_error.jsx';\nimport SpinnerButton from 'components/spinner_button.jsx';\nimport {browserHistory} from 'utils/browser_history';\nimport {localizeMessage} from 'utils/utils.jsx';\n\nexport default class AddEmoji extends React.Component {\n    static propTypes = {\n        actions: PropTypes.shape({\n            createCustomEmoji: PropTypes.func.isRequired,\n        }).isRequired,\n        emojiMap: PropTypes.object.isRequired,\n        team: PropTypes.object,\n        user: PropTypes.object,\n    };\n\n    static contextTypes = {\n        router: PropTypes.object.isRequired,\n    };\n\n    constructor(props) {\n        super(props);\n\n        this.state = {\n            name: '',\n            image: null,\n            imageUrl: '',\n            saving: false,\n            error: null,\n        };\n    }\n\n    handleSubmit = async (e) => {\n        const {actions, emojiMap, user, team} = this.props;\n        const {image, name, saving} = this.state;\n\n        e.preventDefault();\n\n        if (saving) {\n            return;\n        }\n\n        this.setState({\n            saving: true,\n            error: null,\n        });\n\n        const emoji = {\n            creator_id: user.id,\n            name: name.trim().toLowerCase(),\n        };\n\n        // trim surrounding colons if the user accidentally included them in the name\n        if (emoji.name.startsWith(':') && emoji.name.endsWith(':')) {\n            emoji.name = emoji.name.substring(1, emoji.name.length - 1);\n        }\n\n        if (!emoji.name) {\n            this.setState({\n                saving: false,\n                error: (\n                    <FormattedMessage\n                        id='add_emoji.nameRequired'\n                        defaultMessage='A name is required for the emoji'\n                    />\n                ),\n            });\n\n            return;\n        } else if ((/[^a-z0-9_-]/).test(emoji.name)) {\n            this.setState({\n                saving: false,\n                error: (\n                    <FormattedMessage\n                        id='add_emoji.nameInvalid'\n                        defaultMessage=\"An emoji's name can only contain lowercase letters, numbers, and the symbols '-' and '_'.\"\n                    />\n                ),\n            });\n\n            return;\n        } else if (emojiMap.hasSystemEmoji(emoji.name)) {\n            this.setState({\n                saving: false,\n                error: (\n                    <FormattedMessage\n                        id='add_emoji.nameTaken'\n                        defaultMessage='This name is already in use by a system emoji. Please choose another name.'\n                    />\n                ),\n            });\n\n            return;\n        }\n\n        if (!image) {\n            this.setState({\n                saving: false,\n                error: (\n                    <FormattedMessage\n                        id='add_emoji.imageRequired'\n                        defaultMessage='An image is required for the emoji'\n                    />\n                ),\n            });\n\n            return;\n        }\n\n        const {error} = await actions.createCustomEmoji(emoji, image);\n        if (error) {\n            this.setState({\n                saving: false,\n                error: error.message,\n            });\n            return;\n        }\n\n        browserHistory.push('/' + team.name + '/emoji');\n    };\n\n    updateName = (e) => {\n        this.setState({\n            name: e.target.value,\n        });\n    };\n\n    updateImage = (e) => {\n        if (e.target.files.length === 0) {\n            this.setState({\n                image: null,\n                imageUrl: '',\n            });\n\n            return;\n        }\n\n        const image = e.target.files[0];\n\n        const reader = new FileReader();\n        reader.onload = () => {\n            this.setState({\n                image,\n                imageUrl: reader.result,\n            });\n        };\n        reader.readAsDataURL(image);\n    };\n\n    render() {\n        let filename = null;\n        if (this.state.image) {\n            filename = (\n                <span className='add-emoji__filename'>\n                    {this.state.image.name}\n                </span>\n            );\n        }\n\n        let preview = null;\n        if (this.state.imageUrl) {\n            preview = (\n                <div className='form-group'>\n                    <label\n                        className='control-label col-sm-4'\n                        htmlFor='preview'\n                    >\n                        <FormattedMessage\n                            id='add_emoji.preview'\n                            defaultMessage='Preview'\n                        />\n                    </label>\n                    <div className='col-md-5 col-sm-8 add-emoji__preview'>\n                        <FormattedMessage\n                            id='add_emoji.preview.sentence'\n                            defaultMessage='This is a sentence with {image} in it.'\n                            values={{\n                                image: (\n                                    <span\n                                        className='emoticon'\n                                        style={{backgroundImage: 'url(' + this.state.imageUrl + ')'}}\n                                    />\n                                ),\n                            }}\n                        />\n                    </div>\n                </div>\n            );\n        }\n\n        return (\n            <div className='backstage-content row'>\n                <BackstageHeader>\n                    <Link to={'/' + this.props.team.name + '/emoji'}>\n                        <FormattedMessage\n                            id='emoji_list.header'\n                            defaultMessage='Custom Emoji'\n                        />\n                    </Link>\n                    <FormattedMessage\n                        id='add_emoji.header'\n                        defaultMessage='Add'\n                    />\n                </BackstageHeader>\n                <div className='backstage-form'>\n                    <form\n                        className='form-horizontal'\n                        onSubmit={this.handleSubmit}\n                    >\n                        <div className='form-group'>\n                            <label\n                                className='control-label col-sm-4'\n                                htmlFor='name'\n                            >\n                                <FormattedMessage\n                                    id='add_emoji.name'\n                                    defaultMessage='Name'\n                                />\n                            </label>\n                            <div className='col-md-5 col-sm-8'>\n                                <input\n                                    id='name'\n                                    type='text'\n                                    maxLength='64'\n                                    className='form-control'\n                                    value={this.state.name}\n                                    onChange={this.updateName}\n                                />\n                                <div className='form__help'>\n                                    <FormattedMessage\n                                        id='add_emoji.name.help'\n                                        defaultMessage=\"Choose a name for your emoji made of up to 64 characters consisting of lowercase letters, numbers, and the symbols '-' and '_'.\"\n                                    />\n                                </div>\n                            </div>\n                        </div>\n                        <div className='form-group'>\n                            <label\n                                className='control-label col-sm-4'\n                                htmlFor='image'\n                            >\n                                <FormattedMessage\n                                    id='add_emoji.image'\n                                    defaultMessage='Image'\n                                />\n                            </label>\n                            <div className='col-md-5 col-sm-8'>\n                                <div>\n                                    <div className='add-emoji__upload'>\n                                        <button className='btn btn-primary'>\n                                            <FormattedMessage\n                                                id='add_emoji.image.button'\n                                                defaultMessage='Select'\n                                            />\n                                        </button>\n                                        <input\n                                            id='select-emoji'\n                                            type='file'\n                                            accept='.jpg,.png,.gif'\n                                            multiple={false}\n                                            onChange={this.updateImage}\n                                        />\n                                    </div>\n                                    {filename}\n                                    <div className='form__help'>\n                                        <FormattedMessage\n                                            id='add_emoji.image.help'\n                                            defaultMessage='Choose the image for your emoji. The image can be a gif, png, or jpeg file with a max size of 64 KB and dimensions up to 128 by 128 pixels.'\n                                        />\n                                    </div>\n                                </div>\n                            </div>\n                        </div>\n                        {preview}\n                        <div className='backstage-form__footer'>\n                            <FormError\n                                type='backstage'\n                                error={this.state.error}\n                            />\n                            <Link\n                                className='btn btn-link btn-sm'\n                                to={'/' + this.props.team.name + '/emoji'}\n                            >\n                                <FormattedMessage\n                                    id='add_emoji.cancel'\n                                    defaultMessage='Cancel'\n                                />\n                            </Link>\n                            <SpinnerButton\n                                className='btn btn-primary'\n                                type='submit'\n                                spinning={this.state.saving}\n                                spinningText={localizeMessage('add_emoji.saving', 'Saving...')}\n                                onClick={this.handleSubmit}\n                            >\n                                <FormattedMessage\n                                    id='add_emoji.save'\n                                    defaultMessage='Save'\n                                />\n                            </SpinnerButton>\n                        </div>\n                    </form>\n                </div>\n            </div>\n        );\n    }\n}\n","// Copyright (c) 2015-present Mattermost, Inc. All Rights Reserved.\n// See LICENSE.txt for license information.\n\nimport {bindActionCreators} from 'redux';\nimport {connect} from 'react-redux';\n\nimport {createCustomEmoji} from 'mattermost-redux/actions/emojis';\n\nimport {getEmojiMap} from 'selectors/emojis';\n\nimport AddEmoji from './add_emoji.jsx';\n\nfunction mapStateToProps(state) {\n    return {\n        emojiMap: getEmojiMap(state),\n    };\n}\n\nfunction mapDispatchToProps(dispatch) {\n    return {\n        actions: bindActionCreators({\n            createCustomEmoji,\n        }, dispatch),\n    };\n}\n\nexport default connect(mapStateToProps, mapDispatchToProps)(AddEmoji);\n","// Copyright (c) 2015-present Mattermost, Inc. All Rights Reserved.\n// See LICENSE.txt for license information.\n\nimport request from 'superagent';\nimport * as IntegrationActions from 'mattermost-redux/actions/integrations';\nimport {getProfilesByIds} from 'mattermost-redux/actions/users';\nimport {getUser} from 'mattermost-redux/selectors/entities/users';\n\nconst DEFAULT_PAGE_SIZE = 100;\n\nexport function loadIncomingHooksAndProfilesForTeam(teamId, page = 0, perPage = DEFAULT_PAGE_SIZE) {\n    return async (dispatch) => {\n        const {data} = await dispatch(IntegrationActions.getIncomingHooks(teamId, page, perPage));\n        if (data) {\n            dispatch(loadProfilesForIncomingHooks(data));\n        }\n    };\n}\n\nexport function loadProfilesForIncomingHooks(hooks) {\n    return async (dispatch, getState) => {\n        const state = getState();\n        const profilesToLoad = {};\n        for (let i = 0; i < hooks.length; i++) {\n            const hook = hooks[i];\n            if (!getUser(state, hook.user_id)) {\n                profilesToLoad[hook.user_id] = true;\n            }\n        }\n\n        const list = Object.keys(profilesToLoad);\n        if (list.length === 0) {\n            return;\n        }\n\n        dispatch(getProfilesByIds(list));\n    };\n}\n\nexport function loadOutgoingHooksAndProfilesForTeam(teamId, page = 0, perPage = DEFAULT_PAGE_SIZE) {\n    return async (dispatch) => {\n        const {data} = await dispatch(IntegrationActions.getOutgoingHooks('', teamId, page, perPage));\n        if (data) {\n            dispatch(loadProfilesForOutgoingHooks(data));\n        }\n    };\n}\n\nexport function loadProfilesForOutgoingHooks(hooks) {\n    return async (dispatch, getState) => {\n        const state = getState();\n        const profilesToLoad = {};\n        for (let i = 0; i < hooks.length; i++) {\n            const hook = hooks[i];\n            if (!getUser(state, hook.creator_id)) {\n                profilesToLoad[hook.creator_id] = true;\n            }\n        }\n\n        const list = Object.keys(profilesToLoad);\n        if (list.length === 0) {\n            return;\n        }\n\n        dispatch(getProfilesByIds(list));\n    };\n}\n\nexport function loadCommandsAndProfilesForTeam(teamId) {\n    return async (dispatch) => {\n        const {data} = await dispatch(IntegrationActions.getCustomTeamCommands(teamId));\n        if (data) {\n            dispatch(loadProfilesForCommands(data));\n        }\n    };\n}\n\nexport function loadProfilesForCommands(commands) {\n    return async (dispatch, getState) => {\n        const state = getState();\n        const profilesToLoad = {};\n        for (let i = 0; i < commands.length; i++) {\n            const command = commands[i];\n            if (!getUser(state, command.creator_id)) {\n                profilesToLoad[command.creator_id] = true;\n            }\n        }\n\n        const list = Object.keys(profilesToLoad);\n        if (list.length === 0) {\n            return;\n        }\n\n        dispatch(getProfilesByIds(list));\n    };\n}\n\nexport function loadOAuthAppsAndProfiles(page = 0, perPage = DEFAULT_PAGE_SIZE) {\n    return async (dispatch) => {\n        const {data} = await dispatch(IntegrationActions.getOAuthApps(page, perPage));\n        if (data) {\n            dispatch(loadProfilesForOAuthApps(data));\n        }\n    };\n}\n\nexport function loadProfilesForOAuthApps(apps) {\n    return async (dispatch, getState) => {\n        const state = getState();\n        const profilesToLoad = {};\n        for (let i = 0; i < apps.length; i++) {\n            const app = apps[i];\n            if (!getUser(state, app.creator_id)) {\n                profilesToLoad[app.creator_id] = true;\n            }\n        }\n\n        const list = Object.keys(profilesToLoad);\n        if (list.length === 0) {\n            return;\n        }\n\n        dispatch(getProfilesByIds(list));\n    };\n}\n\nexport function getYoutubeVideoInfo(googleKey, videoId, success, error) {\n    request.get('https://www.googleapis.com/youtube/v3/videos').\n        query({part: 'snippet', id: videoId, key: googleKey}).\n        end((err, res) => {\n            if (err) {\n                return error(err);\n            }\n\n            if (!res.body) {\n                console.error('Missing response body for getYoutubeVideoInfo'); // eslint-disable-line no-console\n            }\n\n            return success(res.body);\n        });\n}\n","// Copyright (c) 2015-present Mattermost, Inc. All Rights Reserved.\n// See LICENSE.txt for license information.\n\nimport PropTypes from 'prop-types';\nimport React from 'react';\n\nimport {FormattedMessage} from 'react-intl';\nimport {OverlayTrigger, Tooltip} from 'react-bootstrap';\n\nimport Constants from 'utils/constants.jsx';\nimport {copyToClipboard} from 'utils/utils.jsx';\n\nexport default class CopyText extends React.PureComponent {\n    static propTypes = {\n        value: PropTypes.string.isRequired,\n\n        defaultMessage: PropTypes.string,\n\n        idMessage: PropTypes.string,\n    };\n\n    static get defaultProps() {\n        return {\n            idMessage: 'integrations.copy',\n            defaultMessage: 'Copy',\n        };\n    }\n\n    copyText = (e) => {\n        e.preventDefault();\n        copyToClipboard(this.props.value);\n    };\n\n    render() {\n        if (!document.queryCommandSupported('copy')) {\n            return null;\n        }\n\n        const tooltip = (\n            <Tooltip id='copy'>\n                <FormattedMessage\n                    id={this.props.idMessage}\n                    defaultMessage={this.props.defaultMessage}\n                />\n            </Tooltip>\n        );\n\n        return (\n            <OverlayTrigger\n                delayShow={Constants.OVERLAY_TIME_DELAY}\n                placement='top'\n                overlay={tooltip}\n            >\n                <a\n                    href='#'\n                    className='fa fa-copy margin-left'\n                    onClick={this.copyText}\n                />\n            </OverlayTrigger>\n        );\n    }\n}\n","// Copyright (c) 2015-present Mattermost, Inc. All Rights Reserved.\n// See LICENSE.txt for license information.\n\nimport PropTypes from 'prop-types';\nimport React from 'react';\nimport {FormattedMessage} from 'react-intl';\n\nimport DeleteModalTrigger from 'components/delete_modal_trigger.jsx';\nimport WarningIcon from 'components/icon/warning_icon';\n\nexport default class DeleteIntegration extends DeleteModalTrigger {\n    get triggerTitle() {\n        return (\n            <FormattedMessage\n                id='installed_integrations.delete'\n                defaultMessage='Delete'\n            />\n        );\n    }\n\n    get modalTitle() {\n        return (\n            <FormattedMessage\n                id='integrations.delete.confirm.title'\n                defaultMessage='Delete Integration'\n            />\n        );\n    }\n\n    get modalMessage() {\n        return (\n            <div className='alert alert-warning'>\n                <WarningIcon additionalClassName='fa-margin--right'/>\n                <FormattedMessage\n                    id={this.props.messageId}\n                    defaultMessage='This action permanently deletes the integration and breaks any integrations using it. Are you sure you want to delete it?'\n                />\n            </div>\n        );\n    }\n\n    get modalConfirmButton() {\n        return (\n            <FormattedMessage\n                id='integrations.delete.confirm.button'\n                defaultMessage='Delete'\n            />\n        );\n    }\n}\n\nDeleteIntegration.propTypes = {\n    messageId: PropTypes.string.isRequired,\n    onDelete: PropTypes.func.isRequired,\n};\n","// Copyright (c) 2015-present Mattermost, Inc. All Rights Reserved.\n// See LICENSE.txt for license information.\n\nimport PropTypes from 'prop-types';\nimport React from 'react';\nimport {FormattedMessage} from 'react-intl';\nimport {Link} from 'react-router-dom';\n\nimport {getSiteURL} from 'utils/url.jsx';\nimport {t} from 'utils/i18n';\n\nimport CopyText from 'components/copy_text.jsx';\n\nimport DeleteIntegration from './delete_integration.jsx';\n\nexport function matchesFilter(incomingWebhook, channel, filter) {\n    if (!filter) {\n        return true;\n    }\n\n    if (incomingWebhook.display_name.toLowerCase().indexOf(filter) !== -1 ||\n        incomingWebhook.description.toLowerCase().indexOf(filter) !== -1) {\n        return true;\n    }\n\n    if (incomingWebhook.channel_id) {\n        if (channel && channel.name.toLowerCase().indexOf(filter) !== -1) {\n            return true;\n        }\n    }\n\n    return false;\n}\n\nexport default class InstalledIncomingWebhook extends React.PureComponent {\n    static propTypes = {\n\n        /**\n        * Data used for showing webhook details\n        */\n        incomingWebhook: PropTypes.object.isRequired,\n\n        /**\n        * Function to call when webhook delete button is pressed\n        */\n        onDelete: PropTypes.func.isRequired,\n\n        /**\n        * String used for filtering webhook item\n        */\n        filter: PropTypes.string,\n\n        /**\n        * Data used for showing created by details\n        */\n        creator: PropTypes.object.isRequired,\n\n        /**\n        *  Set to show available actions on webhook\n        */\n        canChange: PropTypes.bool.isRequired,\n\n        /**\n        *  Data used in routing of webhook for modifications\n        */\n        team: PropTypes.object.isRequired,\n\n        /**\n        *  Data used for filtering of webhook based on filter prop\n        */\n        channel: PropTypes.object,\n    }\n\n    constructor(props) {\n        super(props);\n\n        this.handleDelete = this.handleDelete.bind(this);\n    }\n\n    handleDelete() {\n        this.props.onDelete(this.props.incomingWebhook);\n    }\n\n    render() {\n        const incomingWebhook = this.props.incomingWebhook;\n        const channel = this.props.channel;\n        const filter = this.props.filter ? this.props.filter.toLowerCase() : '';\n\n        if (!matchesFilter(incomingWebhook, channel, filter)) {\n            return null;\n        }\n\n        let displayName;\n        if (incomingWebhook.display_name) {\n            displayName = incomingWebhook.display_name;\n        } else if (channel) {\n            displayName = channel.display_name;\n        } else {\n            displayName = (\n                <FormattedMessage\n                    id='installed_incoming_webhooks.unknown_channel'\n                    defaultMessage='A Private Webhook'\n                />\n            );\n        }\n\n        let description = null;\n        if (incomingWebhook.description) {\n            description = (\n                <div className='item-details__row'>\n                    <span className='item-details__description'>\n                        {incomingWebhook.description}\n                    </span>\n                </div>\n            );\n        }\n\n        let actions = null;\n        if (this.props.canChange) {\n            actions = (\n                <div className='item-actions'>\n                    <Link to={`/${this.props.team.name}/integrations/incoming_webhooks/edit?id=${incomingWebhook.id}`}>\n                        <FormattedMessage\n                            id='installed_integrations.edit'\n                            defaultMessage='Edit'\n                        />\n                    </Link>\n                    {' - '}\n                    <DeleteIntegration\n                        messageId={t('installed_incoming_webhooks.delete.confirm')}\n                        onDelete={this.handleDelete}\n                    />\n                </div>\n            );\n        }\n\n        const incomingWebhookId = getSiteURL() + '/hooks/' + incomingWebhook.id;\n\n        return (\n            <div className='backstage-list__item'>\n                <div className='item-details'>\n                    <div className='item-details__row'>\n                        <strong className='item-details__name'>\n                            {displayName}\n                        </strong>\n                    </div>\n                    {description}\n                    <div className='item-details__row'>\n                        <span className='item-details__url'>\n                            <FormattedMessage\n                                id='installed_integrations.url'\n                                defaultMessage='URL: {url}'\n                                values={{\n                                    url: incomingWebhookId,\n                                }}\n                            />\n                            <span>\n                                <CopyText\n                                    value={incomingWebhookId}\n                                />\n                            </span>\n                        </span>\n                    </div>\n                    <div className='item-details__row'>\n                        <span className='item-details__creation'>\n                            <FormattedMessage\n                                id='installed_integrations.creation'\n                                defaultMessage='Created by {creator} on {createAt, date, full}'\n                                values={{\n                                    creator: this.props.creator.username,\n                                    createAt: incomingWebhook.create_at,\n                                }}\n                            />\n                        </span>\n                    </div>\n                </div>\n                {actions}\n            </div>\n        );\n    }\n}\n","// Copyright (c) 2015-present Mattermost, Inc. All Rights Reserved.\n// See LICENSE.txt for license information.\n\nimport PropTypes from 'prop-types';\nimport React from 'react';\nimport {FormattedMessage} from 'react-intl';\n\nimport Constants from 'utils/constants.jsx';\nimport * as Utils from 'utils/utils.jsx';\nimport BackstageList from 'components/backstage/components/backstage_list.jsx';\nimport InstalledIncomingWebhook, {matchesFilter} from 'components/integrations/installed_incoming_webhook.jsx';\nimport FormattedMarkdownMessage from 'components/formatted_markdown_message';\n\nexport default class InstalledIncomingWebhooks extends React.PureComponent {\n    static propTypes = {\n\n        /**\n        *  Data used in passing down as props for webhook modifications\n        */\n        team: PropTypes.object,\n\n        /**\n        * Data used for checking if webhook is created by current user\n        */\n        user: PropTypes.object,\n\n        /**\n        *  Data used for checking modification privileges\n        */\n        canManageOthersWebhooks: PropTypes.bool,\n\n        /**\n        * Data used in passing down as props for showing webhook details\n        */\n        incomingWebhooks: PropTypes.array,\n\n        /**\n        * Data used in sorting for displaying list and as props channel details\n        */\n        channels: PropTypes.object,\n\n        /**\n        *  Data used in passing down as props for webhook -created by label\n        */\n        users: PropTypes.object,\n\n        /**\n        *  Data used in passing as argument for loading webhooks\n        */\n\n        teamId: PropTypes.string,\n        actions: PropTypes.shape({\n\n            /**\n            * The function to call for removing incomingWebhook\n            */\n            removeIncomingHook: PropTypes.func,\n\n            /**\n            * The function to call for incomingWebhook List and for the status of api\n            */\n            loadIncomingHooksAndProfilesForTeam: PropTypes.func,\n        }),\n\n        /**\n        * Whether or not incoming webhooks are enabled.\n        */\n        enableIncomingWebhooks: PropTypes.bool,\n    }\n\n    constructor(props) {\n        super(props);\n\n        this.state = {\n            loading: true,\n        };\n    }\n\n    componentDidMount() {\n        if (this.props.enableIncomingWebhooks) {\n            this.props.actions.loadIncomingHooksAndProfilesForTeam(\n                this.props.teamId,\n                Constants.Integrations.START_PAGE_NUM,\n                Constants.Integrations.PAGE_SIZE\n            ).then(\n                () => this.setState({loading: false})\n            );\n        }\n    }\n\n    deleteIncomingWebhook = (incomingWebhook) => {\n        this.props.actions.removeIncomingHook(incomingWebhook.id);\n    }\n\n    incomingWebhookCompare = (a, b) => {\n        let displayNameA = a.display_name;\n        if (!displayNameA) {\n            const channelA = this.props.channels[a.channel_id];\n            if (channelA) {\n                displayNameA = channelA.display_name;\n            } else {\n                displayNameA = Utils.localizeMessage('installed_incoming_webhooks.unknown_channel', 'A Private Webhook');\n            }\n        }\n\n        const displayNameB = b.display_name;\n\n        return displayNameA.localeCompare(displayNameB);\n    }\n\n    incomingWebhooks = (filter) => this.props.incomingWebhooks.\n        sort(this.incomingWebhookCompare).\n        filter((incomingWebhook) => matchesFilter(incomingWebhook, this.props.channels[incomingWebhook.channel_id], filter)).\n        map((incomingWebhook) => {\n            const canChange = this.props.canManageOthersWebhooks || this.props.user.id === incomingWebhook.user_id;\n            const channel = this.props.channels[incomingWebhook.channel_id];\n            return (\n                <InstalledIncomingWebhook\n                    key={incomingWebhook.id}\n                    incomingWebhook={incomingWebhook}\n                    onDelete={this.deleteIncomingWebhook}\n                    creator={this.props.users[incomingWebhook.user_id] || {}}\n                    canChange={canChange}\n                    team={this.props.team}\n                    channel={channel}\n                />\n            );\n        });\n\n    render() {\n        return (\n            <BackstageList\n                header={\n                    <FormattedMessage\n                        id='installed_incoming_webhooks.header'\n                        defaultMessage='Installed Incoming Webhooks'\n                    />\n                }\n                addText={\n                    <FormattedMessage\n                        id='installed_incoming_webhooks.add'\n                        defaultMessage='Add Incoming Webhook'\n                    />\n                }\n                addLink={'/' + this.props.team.name + '/integrations/incoming_webhooks/add'}\n                addButtonId='addIncomingWebhook'\n                emptyText={\n                    <FormattedMessage\n                        id='installed_incoming_webhooks.empty'\n                        defaultMessage='No incoming webhooks found'\n                    />\n                }\n                emptyTextSearch={\n                    <FormattedMarkdownMessage\n                        id='installed_incoming_webhooks.emptySearch'\n                        defaultMessage='No incoming webhooks match {searchTerm}'\n                    />\n                }\n                helpText={\n                    <FormattedMessage\n                        id='installed_incoming_webhooks.help'\n                        defaultMessage='Use incoming webhooks to connect external tools to Mattermost. {buildYourOwn} or visit the {appDirectory} to find self-hosted, third-party apps and integrations.'\n                        values={{\n                            buildYourOwn: (\n                                <a\n                                    target='_blank'\n                                    rel='noopener noreferrer'\n                                    href='http://docs.mattermost.com/developer/webhooks-incoming.html'\n                                >\n                                    <FormattedMessage\n                                        id='installed_incoming_webhooks.help.buildYourOwn'\n                                        defaultMessage='Build your own'\n                                    />\n                                </a>\n                            ),\n                            appDirectory: (\n                                <a\n                                    target='_blank'\n                                    rel='noopener noreferrer'\n                                    href='https://about.mattermost.com/default-app-directory/'\n                                >\n                                    <FormattedMessage\n                                        id='installed_incoming_webhooks.help.appDirectory'\n                                        defaultMessage='App Directory'\n                                    />\n                                </a>\n                            ),\n                        }}\n                    />\n                }\n                searchPlaceholder={Utils.localizeMessage('installed_incoming_webhooks.search', 'Search Incoming Webhooks')}\n                loading={this.state.loading}\n            >\n                {(filter) => {\n                    const children = this.incomingWebhooks(filter);\n                    return [children, children.length > 0];\n                }}\n            </BackstageList>\n        );\n    }\n}\n","// Copyright (c) 2015-present Mattermost, Inc. All Rights Reserved.\n// See LICENSE.txt for license information.\n\nimport {connect} from 'react-redux';\nimport {bindActionCreators} from 'redux';\nimport * as Actions from 'mattermost-redux/actions/integrations';\nimport {getAllChannels} from 'mattermost-redux/selectors/entities/channels';\nimport {getIncomingHooks} from 'mattermost-redux/selectors/entities/integrations';\nimport {getCurrentTeamId} from 'mattermost-redux/selectors/entities/teams';\nimport {getUsers} from 'mattermost-redux/selectors/entities/users';\nimport {haveITeamPermission} from 'mattermost-redux/selectors/entities/roles';\nimport {Permissions} from 'mattermost-redux/constants';\nimport {getConfig} from 'mattermost-redux/selectors/entities/general';\n\nimport {loadIncomingHooksAndProfilesForTeam} from 'actions/integration_actions';\n\nimport InstalledIncomingWebhooks from './installed_incoming_webhooks.jsx';\n\nfunction mapStateToProps(state) {\n    const config = getConfig(state);\n    const teamId = getCurrentTeamId(state);\n    const canManageOthersWebhooks = haveITeamPermission(state, {team: teamId, permission: Permissions.MANAGE_OTHERS_INCOMING_WEBHOOKS});\n    const incomingHooks = getIncomingHooks(state);\n    const incomingWebhooks = Object.keys(incomingHooks).\n        map((key) => incomingHooks[key]).\n        filter((incomingWebhook) => incomingWebhook.team_id === teamId);\n    const enableIncomingWebhooks = config.EnableIncomingWebhooks === 'true';\n\n    return {\n        incomingWebhooks,\n        channels: getAllChannels(state),\n        users: getUsers(state),\n        teamId,\n        canManageOthersWebhooks,\n        enableIncomingWebhooks,\n    };\n}\n\nfunction mapDispatchToProps(dispatch) {\n    return {\n        actions: bindActionCreators({\n            loadIncomingHooksAndProfilesForTeam,\n            removeIncomingHook: Actions.removeIncomingHook,\n        }, dispatch),\n    };\n}\n\nexport default connect(mapStateToProps, mapDispatchToProps)(InstalledIncomingWebhooks);\n","// Copyright (c) 2015-present Mattermost, Inc. All Rights Reserved.\n// See LICENSE.txt for license information.\n\nimport PropTypes from 'prop-types';\nimport React from 'react';\n\nimport Constants from 'utils/constants.jsx';\nimport * as Utils from 'utils/utils.jsx';\n\nexport default class ChannelSelect extends React.PureComponent {\n    static get propTypes() {\n        return {\n            channels: PropTypes.array.isRequired,\n            onChange: PropTypes.func,\n            value: PropTypes.string,\n            selectOpen: PropTypes.bool.isRequired,\n            selectPrivate: PropTypes.bool.isRequired,\n            selectDm: PropTypes.bool.isRequired,\n        };\n    }\n\n    static get defaultProps() {\n        return {\n            selectOpen: false,\n            selectPrivate: false,\n            selectDm: false,\n        };\n    }\n\n    render() {\n        const options = [\n            <option\n                key=''\n                value=''\n            >\n                {Utils.localizeMessage('channel_select.placeholder', '--- Select a channel ---')}\n            </option>,\n        ];\n\n        this.props.channels.forEach((channel) => {\n            const channelName = channel.display_name || channel.name;\n            if (channel.type === Constants.OPEN_CHANNEL && this.props.selectOpen) {\n                options.push(\n                    <option\n                        key={channel.id}\n                        value={channel.id}\n                    >\n                        {channelName}\n                    </option>\n                );\n            } else if (channel.type === Constants.PRIVATE_CHANNEL && this.props.selectPrivate) {\n                options.push(\n                    <option\n                        key={channel.id}\n                        value={channel.id}\n                    >\n                        {channelName}\n                    </option>\n                );\n            } else if (channel.type === Constants.DM_CHANNEL && this.props.selectDm) {\n                options.push(\n                    <option\n                        key={channel.id}\n                        value={channel.id}\n                    >\n                        {channelName}\n                    </option>\n                );\n            }\n        });\n\n        return (\n            <select\n                className='form-control'\n                value={this.props.value}\n                onChange={this.props.onChange}\n                id='channelSelect'\n            >\n                {options}\n            </select>\n        );\n    }\n}\n","// Copyright (c) 2015-present Mattermost, Inc. All Rights Reserved.\n// See LICENSE.txt for license information.\n\nimport {connect} from 'react-redux';\nimport {createSelector} from 'reselect';\n\nimport {getMyChannels} from 'mattermost-redux/selectors/entities/channels';\nimport {getCurrentUserLocale} from 'mattermost-redux/selectors/entities/i18n';\nimport {sortChannelsByTypeAndDisplayName} from 'mattermost-redux/utils/channel_utils';\n\nimport ChannelSelect from './channel_select.jsx';\n\nconst getMyChannelsSorted = createSelector(\n    getMyChannels,\n    getCurrentUserLocale,\n    (channels, locale) => {\n        return [...channels].sort(sortChannelsByTypeAndDisplayName.bind(null, locale));\n    }\n);\n\nfunction mapStateToProps(state) {\n    return {\n        channels: getMyChannelsSorted(state),\n    };\n}\n\nexport default connect(mapStateToProps)(ChannelSelect);\n","// Copyright (c) 2015-present Mattermost, Inc. All Rights Reserved.\n// See LICENSE.txt for license information.\n\nimport PropTypes from 'prop-types';\nimport React from 'react';\nimport {FormattedMessage} from 'react-intl';\nimport {Link} from 'react-router-dom';\n\nimport BackstageHeader from 'components/backstage/components/backstage_header.jsx';\nimport ChannelSelect from 'components/channel_select';\nimport FormError from 'components/form_error.jsx';\nimport SpinnerButton from 'components/spinner_button.jsx';\nimport {localizeMessage} from 'utils/utils.jsx';\n\nexport default class AbstractIncomingWebhook extends React.Component {\n    static propTypes = {\n\n        /**\n        * The current team\n        */\n        team: PropTypes.object.isRequired,\n\n        /**\n        * The header text to render, has id and defaultMessage\n        */\n        header: PropTypes.object.isRequired,\n\n        /**\n        * The footer text to render, has id and defaultMessage\n        */\n        footer: PropTypes.object.isRequired,\n\n        /**\n        * The spinner loading text to render, has id and defaultMessage\n        */\n        loading: PropTypes.object.isRequired,\n\n        /**\n        * The server error text after a failed action\n        */\n        serverError: PropTypes.string.isRequired,\n\n        /**\n        * The hook used to set the initial state\n        */\n        initialHook: PropTypes.object,\n\n        /**\n        * Whether to allow configuration of the default post username.\n        */\n        enablePostUsernameOverride: PropTypes.bool.isRequired,\n\n        /**\n        * Whether to allow configuration of the default post icon.\n        */\n        enablePostIconOverride: PropTypes.bool.isRequired,\n\n        /**\n        * The async function to run when the action button is pressed\n        */\n        action: PropTypes.func.isRequired,\n    }\n\n    constructor(props) {\n        super(props);\n\n        this.state = this.getStateFromHook(this.props.initialHook || {});\n    }\n\n    getStateFromHook = (hook) => {\n        return {\n            displayName: hook.display_name || '',\n            description: hook.description || '',\n            channelId: hook.channel_id || '',\n            channelLocked: hook.channel_locked || false,\n            username: hook.username || '',\n            iconURL: hook.icon_url || '',\n            saving: false,\n            serverError: '',\n            clientError: null,\n        };\n    }\n\n    handleSubmit = (e) => {\n        e.preventDefault();\n\n        if (this.state.saving) {\n            return;\n        }\n\n        this.setState({\n            saving: true,\n            serverError: '',\n            clientError: '',\n        });\n\n        if (!this.state.channelId) {\n            this.setState({\n                saving: false,\n                clientError: (\n                    <FormattedMessage\n                        id='add_incoming_webhook.channelRequired'\n                        defaultMessage='A valid channel is required'\n                    />\n                ),\n            });\n\n            return;\n        }\n\n        const hook = {\n            channel_id: this.state.channelId,\n            channel_locked: this.state.channelLocked,\n            display_name: this.state.displayName,\n            description: this.state.description,\n            username: this.state.username,\n            icon_url: this.state.iconURL,\n        };\n\n        this.props.action(hook).then(() => this.setState({saving: false}));\n    }\n\n    updateDisplayName = (e) => {\n        this.setState({\n            displayName: e.target.value,\n        });\n    }\n\n    updateDescription = (e) => {\n        this.setState({\n            description: e.target.value,\n        });\n    }\n\n    updateChannelId = (e) => {\n        this.setState({\n            channelId: e.target.value,\n        });\n    }\n\n    updateChannelLocked = (e) => {\n        this.setState({\n            channelLocked: e.target.checked,\n        });\n    }\n\n    updateUsername = (e) => {\n        this.setState({\n            username: e.target.value,\n        });\n    }\n\n    updateIconURL = (e) => {\n        this.setState({\n            iconURL: e.target.value,\n        });\n    }\n\n    render() {\n        var headerToRender = this.props.header;\n        var footerToRender = this.props.footer;\n\n        return (\n            <div className='backstage-content'>\n                <BackstageHeader>\n                    <Link to={`/${this.props.team.name}/integrations/incoming_webhooks`}>\n                        <FormattedMessage\n                            id='installed_incoming_webhooks.header'\n                            defaultMessage='Incoming Webhooks'\n                        />\n                    </Link>\n                    <FormattedMessage\n                        id={headerToRender.id}\n                        defaultMessage={headerToRender.defaultMessage}\n                    />\n                </BackstageHeader>\n                <div className='backstage-form'>\n                    <form\n                        className='form-horizontal'\n                        onSubmit={this.handleSubmit}\n                    >\n                        <div className='form-group'>\n                            <label\n                                className='control-label col-sm-4'\n                                htmlFor='displayName'\n                            >\n                                <FormattedMessage\n                                    id='add_incoming_webhook.displayName'\n                                    defaultMessage='Title'\n                                />\n                            </label>\n                            <div className='col-md-5 col-sm-8'>\n                                <input\n                                    id='displayName'\n                                    type='text'\n                                    maxLength='64'\n                                    className='form-control'\n                                    value={this.state.displayName}\n                                    onChange={this.updateDisplayName}\n                                />\n                                <div className='form__help'>\n                                    <FormattedMessage\n                                        id='add_incoming_webhook.displayName.help'\n                                        defaultMessage='Choose a title to be displayed on the webhook settings page. Maximum 64 characters.'\n                                    />\n                                </div>\n                            </div>\n                        </div>\n                        <div className='form-group'>\n                            <label\n                                className='control-label col-sm-4'\n                                htmlFor='description'\n                            >\n                                <FormattedMessage\n                                    id='add_incoming_webhook.description'\n                                    defaultMessage='Description'\n                                />\n                            </label>\n                            <div className='col-md-5 col-sm-8'>\n                                <input\n                                    id='description'\n                                    type='text'\n                                    maxLength='500'\n                                    className='form-control'\n                                    value={this.state.description}\n                                    onChange={this.updateDescription}\n                                />\n                                <div className='form__help'>\n                                    <FormattedMessage\n                                        id='add_incoming_webhook.description.help'\n                                        defaultMessage='Description for your incoming webhook.'\n                                    />\n                                </div>\n                            </div>\n                        </div>\n                        <div className='form-group'>\n                            <label\n                                className='control-label col-sm-4'\n                                htmlFor='channelId'\n                            >\n                                <FormattedMessage\n                                    id='add_incoming_webhook.channel'\n                                    defaultMessage='Channel'\n                                />\n                            </label>\n                            <div className='col-md-5 col-sm-8'>\n                                <ChannelSelect\n                                    id='channelId'\n                                    value={this.state.channelId}\n                                    onChange={this.updateChannelId}\n                                    selectOpen={true}\n                                    selectPrivate={true}\n                                />\n                                <div className='form__help'>\n                                    <FormattedMessage\n                                        id='add_incoming_webhook.channel.help'\n                                        defaultMessage='The default public or private channel that receives the webhook payloads. You must belong to the private channel when setting up the webhook.'\n                                    />\n                                </div>\n                            </div>\n                        </div>\n                        <div className='form-group'>\n                            <label\n                                className='control-label col-sm-4'\n                                htmlFor='channelLocked'\n                            >\n                                <FormattedMessage\n                                    id='add_incoming_webhook.channelLocked'\n                                    defaultMessage='Lock to this channel'\n                                />\n                            </label>\n                            <div className='col-md-5 col-sm-8 checkbox'>\n                                <input\n                                    id='channelLocked'\n                                    type='checkbox'\n                                    checked={this.state.channelLocked}\n                                    onChange={this.updateChannelLocked}\n                                />\n                                <div className='form__help'>\n                                    <FormattedMessage\n                                        id='add_incoming_webhook.channelLocked.help'\n                                        defaultMessage='If set, the incoming webhook can only post to the channel selected above.'\n                                    />\n                                </div>\n                            </div>\n                        </div>\n                        { this.props.enablePostUsernameOverride &&\n                            <div className='form-group'>\n                                <label\n                                    className='control-label col-sm-4'\n                                    htmlFor='username'\n                                >\n                                    <FormattedMessage\n                                        id='add_incoming_webhook.username'\n                                        defaultMessage='Username'\n                                    />\n                                </label>\n                                <div className='col-md-5 col-sm-8'>\n                                    <input\n                                        id='username'\n                                        type='text'\n                                        maxLength='22'\n                                        className='form-control'\n                                        value={this.state.username}\n                                        onChange={this.updateUsername}\n                                    />\n                                    <div className='form__help'>\n                                        <FormattedMessage\n                                            id='add_incoming_webhook.username.help'\n                                            defaultMessage='Choose the username this integration will post as. Usernames can be up to 22 characters, and may contain lowercase letters, numbers and the symbols \"-\", \"_\", and \".\".'\n                                        />\n                                    </div>\n                                </div>\n                            </div>\n                        }\n                        { this.props.enablePostIconOverride &&\n                            <div className='form-group'>\n                                <label\n                                    className='control-label col-sm-4'\n                                    htmlFor='iconURL'\n                                >\n                                    <FormattedMessage\n                                        id='add_incoming_webhook.icon_url'\n                                        defaultMessage='Profile Picture'\n                                    />\n                                </label>\n                                <div className='col-md-5 col-sm-8'>\n                                    <input\n                                        id='iconURL'\n                                        type='text'\n                                        maxLength='1024'\n                                        className='form-control'\n                                        value={this.state.iconURL}\n                                        onChange={this.updateIconURL}\n                                    />\n                                    <div className='form__help'>\n                                        <FormattedMessage\n                                            id='add_incoming_webhook.icon_url.help'\n                                            defaultMessage='Choose the profile picture this integration will use when posting. Enter the URL of a .png or .jpg file at least 128 pixels by 128 pixels.'\n                                        />\n                                    </div>\n                                </div>\n                            </div>\n                        }\n                        <div className='backstage-form__footer'>\n                            <FormError\n                                type='backstage'\n                                errors={[this.props.serverError, this.state.clientError]}\n                            />\n                            <Link\n                                className='btn btn-link btn-sm'\n                                to={`/${this.props.team.name}/integrations/incoming_webhooks`}\n                            >\n                                <FormattedMessage\n                                    id='add_incoming_webhook.cancel'\n                                    defaultMessage='Cancel'\n                                />\n                            </Link>\n                            <SpinnerButton\n                                className='btn btn-primary'\n                                type='submit'\n                                spinning={this.state.saving}\n                                spinningText={localizeMessage(this.props.loading.id, this.props.loading.defaultMessage)}\n                                onClick={this.handleSubmit}\n                                id='saveWebhook'\n                            >\n                                <FormattedMessage\n                                    id={footerToRender.id}\n                                    defaultMessage={footerToRender.defaultMessage}\n                                />\n                            </SpinnerButton>\n                        </div>\n                    </form>\n                </div>\n            </div>\n        );\n    }\n}\n","// Copyright (c) 2015-present Mattermost, Inc. All Rights Reserved.\n// See LICENSE.txt for license information.\n\nimport PropTypes from 'prop-types';\nimport React from 'react';\n\nimport {browserHistory} from 'utils/browser_history';\nimport {t} from 'utils/i18n';\nimport AbstractIncomingWebhook from 'components/integrations/abstract_incoming_webhook.jsx';\n\nconst HEADER = {id: t('integrations.add'), defaultMessage: 'Add'};\nconst FOOTER = {id: t('add_incoming_webhook.save'), defaultMessage: 'Save'};\nconst LOADING = {id: t('add_incoming_webhook.saving'), defaultMessage: 'Saving...'};\n\nexport default class AddIncomingWebhook extends React.PureComponent {\n    static propTypes = {\n\n        /**\n        * The current team\n        */\n        team: PropTypes.object.isRequired,\n\n        /**\n        * The request state for createIncomingHook action. Contains status and error\n        */\n        createIncomingHookRequest: PropTypes.object.isRequired,\n\n        /**\n        * Whether to allow configuration of the default post username.\n        */\n        enablePostUsernameOverride: PropTypes.bool.isRequired,\n\n        /**\n        * Whether to allow configuration of the default post icon.\n        */\n        enablePostIconOverride: PropTypes.bool.isRequired,\n\n        actions: PropTypes.shape({\n\n            /**\n            * The function to call to add a new incoming webhook\n            */\n            createIncomingHook: PropTypes.func.isRequired,\n        }).isRequired,\n    }\n\n    constructor(props) {\n        super(props);\n\n        this.state = {\n            serverError: '',\n        };\n    }\n\n    addIncomingHook = async (hook) => {\n        this.setState({serverError: ''});\n\n        const {data} = await this.props.actions.createIncomingHook(hook);\n        if (data) {\n            browserHistory.push(`/${this.props.team.name}/integrations/confirm?type=incoming_webhooks&id=${data.id}`);\n            return;\n        }\n\n        if (this.props.createIncomingHookRequest.error) {\n            this.setState({serverError: this.props.createIncomingHookRequest.error.message});\n        }\n    }\n\n    render() {\n        return (\n            <AbstractIncomingWebhook\n                team={this.props.team}\n                header={HEADER}\n                footer={FOOTER}\n                loading={LOADING}\n                enablePostUsernameOverride={this.props.enablePostUsernameOverride}\n                enablePostIconOverride={this.props.enablePostIconOverride}\n                action={this.addIncomingHook}\n                serverError={this.state.serverError}\n            />\n        );\n    }\n}\n","// Copyright (c) 2015-present Mattermost, Inc. All Rights Reserved.\n// See LICENSE.txt for license information.\n\nimport {connect} from 'react-redux';\nimport {bindActionCreators} from 'redux';\nimport {createIncomingHook} from 'mattermost-redux/actions/integrations';\nimport {getConfig} from 'mattermost-redux/selectors/entities/general';\n\nimport AddIncomingWebhook from './add_incoming_webhook.jsx';\n\nfunction mapStateToProps(state) {\n    const config = getConfig(state);\n    const enablePostUsernameOverride = config.EnablePostUsernameOverride === 'true';\n    const enablePostIconOverride = config.EnablePostIconOverride === 'true';\n\n    return {\n        createIncomingHookRequest: state.requests.integrations.createIncomingHook,\n        enablePostUsernameOverride,\n        enablePostIconOverride,\n    };\n}\n\nfunction mapDispatchToProps(dispatch) {\n    return {\n        actions: bindActionCreators({\n            createIncomingHook,\n        }, dispatch),\n    };\n}\n\nexport default connect(mapStateToProps, mapDispatchToProps)(AddIncomingWebhook);\n","// Copyright (c) 2015-present Mattermost, Inc. All Rights Reserved.\n// See LICENSE.txt for license information.\n\nimport PropTypes from 'prop-types';\nimport React from 'react';\n\nimport {browserHistory} from 'utils/browser_history';\nimport {t} from 'utils/i18n';\nimport AbstractIncomingWebhook from 'components/integrations/abstract_incoming_webhook.jsx';\nimport LoadingScreen from 'components/loading_screen.jsx';\n\nconst HEADER = {id: t('integrations.edit'), defaultMessage: 'Edit'};\nconst FOOTER = {id: t('update_incoming_webhook.update'), defaultMessage: 'Update'};\nconst LOADING = {id: t('update_incoming_webhook.updating'), defaultMessage: 'Updating...'};\n\nexport default class EditIncomingWebhook extends React.PureComponent {\n    static propTypes = {\n\n        /**\n        * The current team\n        */\n        team: PropTypes.object.isRequired,\n\n        /**\n        * The incoming webhook to edit\n        */\n        hook: PropTypes.object,\n\n        /**\n        * The id of the incoming webhook to edit\n        */\n        hookId: PropTypes.string.isRequired,\n\n        /**\n        * The request state for updateIncomingHook action. Contains status and error\n        */\n        updateIncomingHookRequest: PropTypes.object.isRequired,\n\n        /**\n        * Whether or not incoming webhooks are enabled.\n        */\n        enableIncomingWebhooks: PropTypes.bool.isRequired,\n\n        /**\n        * Whether to allow configuration of the default post username.\n        */\n        enablePostUsernameOverride: PropTypes.bool.isRequired,\n\n        /**\n        * Whether to allow configuration of the default post icon.\n        */\n        enablePostIconOverride: PropTypes.bool.isRequired,\n\n        actions: PropTypes.shape({\n\n            /**\n            * The function to call to update an incoming webhook\n            */\n            updateIncomingHook: PropTypes.func.isRequired,\n\n            /**\n            * The function to call to get an incoming webhook\n            */\n            getIncomingHook: PropTypes.func.isRequired,\n        }).isRequired,\n    }\n\n    constructor(props) {\n        super(props);\n\n        this.state = {\n            showConfirmModal: false,\n            serverError: '',\n        };\n    }\n\n    componentDidMount() {\n        if (this.props.enableIncomingWebhooks) {\n            this.props.actions.getIncomingHook(this.props.hookId);\n        }\n    }\n\n    editIncomingHook = async (hook) => {\n        this.newHook = hook;\n\n        if (this.props.hook.id) {\n            hook.id = this.props.hook.id;\n        }\n\n        if (this.props.hook.token) {\n            hook.token = this.props.hook.token;\n        }\n\n        await this.submitHook();\n    }\n\n    submitHook = async () => {\n        this.setState({serverError: ''});\n\n        const {data} = await this.props.actions.updateIncomingHook(this.newHook);\n\n        if (data) {\n            browserHistory.push(`/${this.props.team.name}/integrations/incoming_webhooks`);\n            return;\n        }\n\n        if (this.props.updateIncomingHookRequest.error) {\n            this.setState({serverError: this.props.updateIncomingHookRequest.error.message});\n        }\n    }\n\n    render() {\n        if (!this.props.hook) {\n            return <LoadingScreen/>;\n        }\n\n        return (\n            <AbstractIncomingWebhook\n                team={this.props.team}\n                header={HEADER}\n                footer={FOOTER}\n                loading={LOADING}\n                enablePostUsernameOverride={this.props.enablePostUsernameOverride}\n                enablePostIconOverride={this.props.enablePostIconOverride}\n                action={this.editIncomingHook}\n                serverError={this.state.serverError}\n                initialHook={this.props.hook}\n            />\n        );\n    }\n}\n","// Copyright (c) 2015-present Mattermost, Inc. All Rights Reserved.\n// See LICENSE.txt for license information.\n\nimport {connect} from 'react-redux';\nimport {bindActionCreators} from 'redux';\nimport {getIncomingHook, updateIncomingHook} from 'mattermost-redux/actions/integrations';\nimport {getConfig} from 'mattermost-redux/selectors/entities/general';\n\nimport EditIncomingWebhook from './edit_incoming_webhook.jsx';\n\nfunction mapStateToProps(state, ownProps) {\n    const config = getConfig(state);\n    const enableIncomingWebhooks = config.EnableIncomingWebhooks === 'true';\n    const enablePostUsernameOverride = config.EnablePostUsernameOverride === 'true';\n    const enablePostIconOverride = config.EnablePostIconOverride === 'true';\n    const hookId = (new URLSearchParams(ownProps.location.search)).get('id');\n\n    return {\n        hookId,\n        hook: state.entities.integrations.incomingHooks[hookId],\n        updateIncomingHookRequest: state.requests.integrations.updateIncomingHook,\n        enableIncomingWebhooks,\n        enablePostUsernameOverride,\n        enablePostIconOverride,\n    };\n}\n\nfunction mapDispatchToProps(dispatch) {\n    return {\n        actions: bindActionCreators({\n            updateIncomingHook,\n            getIncomingHook,\n        }, dispatch),\n    };\n}\n\nexport default connect(mapStateToProps, mapDispatchToProps)(EditIncomingWebhook);\n","// Copyright (c) 2015-present Mattermost, Inc. All Rights Reserved.\n// See LICENSE.txt for license information.\n\nimport PropTypes from 'prop-types';\nimport React from 'react';\nimport {FormattedMessage} from 'react-intl';\nimport {Link} from 'react-router-dom';\n\nimport {t} from 'utils/i18n';\nimport CopyText from 'components/copy_text.jsx';\n\nimport DeleteIntegration from './delete_integration.jsx';\n\nexport function matchesFilter(outgoingWebhook, channel, filter) {\n    if (!filter) {\n        return true;\n    }\n\n    const {\n        display_name: displayName,\n        description,\n        trigger_words: triggerWords,\n    } = outgoingWebhook;\n\n    if (\n        (displayName && displayName.toLowerCase().indexOf(filter) !== -1) ||\n        (description && description.toLowerCase().indexOf(filter) !== -1)\n    ) {\n        return true;\n    }\n\n    if (triggerWords) {\n        for (const triggerWord of triggerWords) {\n            if (triggerWord.toLowerCase().indexOf(filter) !== -1) {\n                return true;\n            }\n        }\n    }\n\n    if (channel && channel.name) {\n        if (channel.name.toLowerCase().indexOf(filter) !== -1) {\n            return true;\n        }\n    }\n\n    return false;\n}\n\nexport default class InstalledOutgoingWebhook extends React.PureComponent {\n    static propTypes = {\n\n        /**\n        * Data used for showing webhook details\n        */\n        outgoingWebhook: PropTypes.object.isRequired,\n\n        /**\n        * Function used for webhook token regeneration\n        */\n        onRegenToken: PropTypes.func.isRequired,\n\n        /**\n        * Function to call when webhook delete button is pressed\n        */\n        onDelete: PropTypes.func.isRequired,\n\n        /**\n        * String used for filtering webhook item\n        */\n        filter: PropTypes.string,\n\n        /**\n        * Data used for showing created by details\n        */\n        creator: PropTypes.object.isRequired,\n\n        /**\n        *  Set to show available actions on webhook\n        */\n        canChange: PropTypes.bool.isRequired,\n\n        /**\n        *  Data used in routing of webhook for modifications\n        */\n        team: PropTypes.object.isRequired,\n\n        /**\n        *  Data used for filtering of webhooks based in filter prop\n        */\n        channel: PropTypes.object,\n    }\n\n    constructor(props) {\n        super(props);\n\n        this.handleRegenToken = this.handleRegenToken.bind(this);\n        this.handleDelete = this.handleDelete.bind(this);\n    }\n\n    handleRegenToken(e) {\n        e.preventDefault();\n\n        this.props.onRegenToken(this.props.outgoingWebhook);\n    }\n\n    handleDelete() {\n        this.props.onDelete(this.props.outgoingWebhook);\n    }\n\n    makeDisplayName(outgoingWebhook, channel) {\n        if (outgoingWebhook.display_name) {\n            return outgoingWebhook.display_name;\n        } else if (channel) {\n            return channel.display_name;\n        }\n        return (\n            <FormattedMessage\n                id='installed_outgoing_webhooks.unknown_channel'\n                defaultMessage='A Private Webhook'\n            />\n        );\n    }\n\n    render() {\n        const outgoingWebhook = this.props.outgoingWebhook;\n        const channel = this.props.channel;\n        const filter = this.props.filter ? this.props.filter.toLowerCase() : '';\n        const triggerWordsFull = 0;\n        const triggerWordsStartsWith = 1;\n\n        if (outgoingWebhook && !matchesFilter(outgoingWebhook, channel, filter)) {\n            return null;\n        }\n\n        const displayName = this.makeDisplayName(outgoingWebhook, channel);\n\n        let description = null;\n        if (outgoingWebhook.description) {\n            description = (\n                <div className='item-details__row'>\n                    <span className='item-details__description'>\n                        {outgoingWebhook.description}\n                    </span>\n                </div>\n            );\n        }\n\n        let triggerWords = null;\n        if (outgoingWebhook.trigger_words && outgoingWebhook.trigger_words.length > 0) {\n            triggerWords = (\n                <div className='item-details__row'>\n                    <span className='item-details__trigger-words'>\n                        <FormattedMessage\n                            id='installed_integrations.triggerWords'\n                            defaultMessage='Trigger Words: {triggerWords}'\n                            values={{\n                                triggerWords: outgoingWebhook.trigger_words.join(', '),\n                            }}\n                        />\n                    </span>\n                </div>\n            );\n        }\n\n        const urls = (\n            <div className='item-details__row'>\n                <span className='item-details__url'>\n                    <FormattedMessage\n                        id='installed_integrations.callback_urls'\n                        defaultMessage='Callback URLs: {urls}'\n                        values={{\n                            urls: outgoingWebhook.callback_urls.join(', '),\n                        }}\n                    />\n                </span>\n            </div>\n        );\n\n        let triggerWhen;\n        if (outgoingWebhook.trigger_when === triggerWordsFull) {\n            triggerWhen = (\n                <FormattedMessage\n                    id='add_outgoing_webhook.triggerWordsTriggerWhenFullWord'\n                    defaultMessage='First word matches a trigger word exactly'\n                />\n            );\n        } else if (outgoingWebhook.trigger_when === triggerWordsStartsWith) {\n            triggerWhen = (\n                <FormattedMessage\n                    id='add_outgoing_webhook.triggerWordsTriggerWhenStartsWith'\n                    defaultMessage='First word starts with a trigger word'\n                />\n            );\n        }\n\n        let actions = null;\n        if (this.props.canChange) {\n            actions = (\n                <div className='item-actions'>\n                    <button\n                        className='style--none color--link'\n                        onClick={this.handleRegenToken}\n                    >\n                        <FormattedMessage\n                            id='installed_integrations.regenToken'\n                            defaultMessage='Regen Token'\n                        />\n                    </button>\n                    {' - '}\n                    <Link to={`/${this.props.team.name}/integrations/outgoing_webhooks/edit?id=${outgoingWebhook.id}`}>\n                        <FormattedMessage\n                            id='installed_integrations.edit'\n                            defaultMessage='Edit'\n                        />\n                    </Link>\n                    {' - '}\n                    <DeleteIntegration\n                        messageId={t('installed_outgoing_webhooks.delete.confirm')}\n                        onDelete={this.handleDelete}\n                    />\n                </div>\n            );\n        }\n\n        return (\n            <div className='backstage-list__item'>\n                <div className='item-details'>\n                    <div className='item-details__row'>\n                        <strong className='item-details__name'>\n                            {displayName}\n                        </strong>\n                    </div>\n                    {description}\n                    <div className='item-details__row'>\n                        <span className='item-details__content_type'>\n                            <FormattedMessage\n                                id='installed_integrations.content_type'\n                                defaultMessage='Content-Type: {contentType}'\n                                values={{\n                                    contentType: outgoingWebhook.content_type || 'application/x-www-form-urlencoded',\n                                }}\n                            />\n                        </span>\n                    </div>\n                    {triggerWords}\n                    <div className='item-details__row'>\n                        <span className='item-details__trigger-when'>\n                            <FormattedMessage\n                                id='installed_integrations.triggerWhen'\n                                defaultMessage='Trigger When: {triggerWhen}'\n                                values={{\n                                    triggerWhen,\n                                }}\n                            />\n                        </span>\n                    </div>\n                    <div className='item-details__row'>\n                        <span className='item-details__token'>\n                            <FormattedMessage\n                                id='installed_integrations.token'\n                                defaultMessage='Token: {token}'\n                                values={{\n                                    token: outgoingWebhook.token,\n                                }}\n                            />\n                            <CopyText\n                                value={outgoingWebhook.token}\n                            />\n                        </span>\n                    </div>\n                    <div className='item-details__row'>\n                        <span className='item-details__creation'>\n                            <FormattedMessage\n                                id='installed_integrations.creation'\n                                defaultMessage='Created by {creator} on {createAt, date, full}'\n                                values={{\n                                    creator: this.props.creator.username,\n                                    createAt: outgoingWebhook.create_at,\n                                }}\n                            />\n                        </span>\n                    </div>\n                    {urls}\n                </div>\n                {actions}\n            </div>\n        );\n    }\n}\n","// Copyright (c) 2015-present Mattermost, Inc. All Rights Reserved.\n// See LICENSE.txt for license information.\n\nimport PropTypes from 'prop-types';\nimport React from 'react';\nimport {FormattedMessage} from 'react-intl';\n\nimport * as Utils from 'utils/utils.jsx';\nimport Constants from 'utils/constants.jsx';\nimport BackstageList from 'components/backstage/components/backstage_list.jsx';\nimport InstalledOutgoingWebhook, {matchesFilter} from 'components/integrations/installed_outgoing_webhook.jsx';\nimport FormattedMarkdownMessage from 'components/formatted_markdown_message';\n\nexport default class InstalledOutgoingWebhooks extends React.PureComponent {\n    static propTypes = {\n\n        /**\n        *  Data used in passing down as props for webhook modifications\n        */\n        team: PropTypes.object,\n\n        /**\n        * Data used for checking if webhook is created by current user\n        */\n        user: PropTypes.object,\n\n        /**\n        *  Data used for checking modification privileges\n        */\n        canManageOthersWebhooks: PropTypes.bool,\n\n        /**\n        * Data used in passing down as props for showing webhook details\n        */\n        outgoingWebhooks: PropTypes.array,\n\n        /**\n        * Data used in sorting for displaying list and as props channel details\n        */\n        channels: PropTypes.object,\n\n        /**\n        *  Data used in passing down as props for webhook -created by label\n        */\n        users: PropTypes.object,\n\n        /**\n        *  Data used in passing as argument for loading webhooks\n        */\n        teamId: PropTypes.string,\n\n        actions: PropTypes.shape({\n\n            /**\n            * The function to call for removing outgoingWebhook\n            */\n            removeOutgoingHook: PropTypes.func,\n\n            /**\n            * The function to call for outgoingWebhook List and for the status of api\n            */\n            loadOutgoingHooksAndProfilesForTeam: PropTypes.func,\n\n            /**\n            * The function to call for regeneration of webhook token\n            */\n            regenOutgoingHookToken: PropTypes.func,\n        }),\n\n        /**\n        * Whether or not outgoing webhooks are enabled.\n        */\n        enableOutgoingWebhooks: PropTypes.bool,\n    }\n\n    constructor(props) {\n        super(props);\n\n        this.outgoingWebhookCompare = this.outgoingWebhookCompare.bind(this);\n\n        this.state = {\n            loading: true,\n        };\n    }\n\n    componentDidMount() {\n        if (this.props.enableOutgoingWebhooks) {\n            this.props.actions.loadOutgoingHooksAndProfilesForTeam(\n                this.props.teamId,\n                Constants.Integrations.START_PAGE_NUM,\n                Constants.Integrations.PAGE_SIZE\n            ).then(\n                () => this.setState({loading: false})\n            );\n        }\n    }\n\n    regenOutgoingWebhookToken = (outgoingWebhook) => {\n        this.props.actions.regenOutgoingHookToken(outgoingWebhook.id);\n    }\n\n    removeOutgoingHook = (outgoingWebhook) => {\n        this.props.actions.removeOutgoingHook(outgoingWebhook.id);\n    }\n\n    outgoingWebhookCompare(a, b) {\n        let displayNameA = a.display_name;\n        if (!displayNameA) {\n            const channelA = this.props.channels[a.channel_id];\n            if (channelA) {\n                displayNameA = channelA.display_name;\n            } else {\n                displayNameA = Utils.localizeMessage('installed_outgoing_webhooks.unknown_channel', 'A Private Webhook');\n            }\n        }\n\n        let displayNameB = b.display_name;\n        if (!displayNameB) {\n            const channelB = this.props.channels[b.channel_id];\n            if (channelB) {\n                displayNameB = channelB.display_name;\n            } else {\n                displayNameB = Utils.localizeMessage('installed_outgoing_webhooks.unknown_channel', 'A Private Webhook');\n            }\n        }\n        return displayNameA.localeCompare(displayNameB);\n    }\n\n    outgoingWebhooks = (filter) => this.props.outgoingWebhooks.\n        sort(this.outgoingWebhookCompare).\n        filter((outgoingWebhook) => matchesFilter(outgoingWebhook, this.props.channels[outgoingWebhook.channel_id], filter)).\n        map((outgoingWebhook) => {\n            const canChange = this.props.canManageOthersWebhooks || this.props.user.id === outgoingWebhook.creator_id;\n            const channel = this.props.channels[outgoingWebhook.channel_id];\n            return (\n                <InstalledOutgoingWebhook\n                    key={outgoingWebhook.id}\n                    outgoingWebhook={outgoingWebhook}\n                    onRegenToken={this.regenOutgoingWebhookToken}\n                    onDelete={this.removeOutgoingHook}\n                    creator={this.props.users[outgoingWebhook.creator_id] || {}}\n                    canChange={canChange}\n                    team={this.props.team}\n                    channel={channel}\n                />\n            );\n        });\n\n    render() {\n        return (\n            <BackstageList\n                header={\n                    <FormattedMessage\n                        id='installed_outgoing_webhooks.header'\n                        defaultMessage='Installed Outgoing Webhooks'\n                    />\n                }\n                addText={\n                    <FormattedMessage\n                        id='installed_outgoing_webhooks.add'\n                        defaultMessage='Add Outgoing Webhook'\n                    />\n                }\n                addLink={'/' + this.props.team.name + '/integrations/outgoing_webhooks/add'}\n                addButtonId='addOutgoingWebhook'\n                emptyText={\n                    <FormattedMessage\n                        id='installed_outgoing_webhooks.empty'\n                        defaultMessage='No outgoing webhooks found'\n                    />\n                }\n                emptyTextSearch={\n                    <FormattedMarkdownMessage\n                        id='installed_outgoing_webhooks.emptySearch'\n                        defaultMessage='No outgoing webhooks match {searchTerm}'\n                    />\n                }\n                helpText={\n                    <FormattedMessage\n                        id='installed_outgoing_webhooks.help'\n                        defaultMessage='Use outgoing webhooks to connect external tools to Mattermost. {buildYourOwn} or visit the {appDirectory} to find self-hosted, third-party apps and integrations.'\n                        values={{\n                            buildYourOwn: (\n                                <a\n                                    target='_blank'\n                                    rel='noopener noreferrer'\n                                    href='http://docs.mattermost.com/developer/webhooks-outgoing.html'\n                                >\n                                    <FormattedMessage\n                                        id='installed_outgoing_webhooks.help.buildYourOwn'\n                                        defaultMessage='Build your own'\n                                    />\n                                </a>\n                            ),\n                            appDirectory: (\n                                <a\n                                    target='_blank'\n                                    rel='noopener noreferrer'\n                                    href='https://about.mattermost.com/default-app-directory/'\n                                >\n                                    <FormattedMessage\n                                        id='installed_outgoing_webhooks.help.appDirectory'\n                                        defaultMessage='App Directory'\n                                    />\n                                </a>\n                            ),\n                        }}\n                    />\n                }\n                searchPlaceholder={Utils.localizeMessage('installed_outgoing_webhooks.search', 'Search Outgoing Webhooks')}\n                loading={this.state.loading}\n            >\n                {(filter) => {\n                    const children = this.outgoingWebhooks(filter);\n                    return [children, children.length > 0];\n                }}\n            </BackstageList>\n        );\n    }\n}\n","// Copyright (c) 2015-present Mattermost, Inc. All Rights Reserved.\n// See LICENSE.txt for license information.\nimport {connect} from 'react-redux';\nimport {bindActionCreators} from 'redux';\nimport * as Actions from 'mattermost-redux/actions/integrations';\nimport {getOutgoingHooks} from 'mattermost-redux/selectors/entities/integrations';\nimport {getCurrentTeamId} from 'mattermost-redux/selectors/entities/teams';\nimport {getAllChannels} from 'mattermost-redux/selectors/entities/channels';\nimport {getUsers} from 'mattermost-redux/selectors/entities/users';\nimport {haveITeamPermission} from 'mattermost-redux/selectors/entities/roles';\nimport {Permissions} from 'mattermost-redux/constants';\nimport {getConfig} from 'mattermost-redux/selectors/entities/general';\n\nimport {loadOutgoingHooksAndProfilesForTeam} from 'actions/integration_actions';\n\nimport InstalledOutgoingWebhook from './installed_outgoing_webhooks.jsx';\n\nfunction mapStateToProps(state) {\n    const config = getConfig(state);\n    const teamId = getCurrentTeamId(state);\n    const canManageOthersWebhooks = haveITeamPermission(state, {team: teamId, permission: Permissions.MANAGE_OTHERS_OUTGOING_WEBHOOKS});\n    const outgoingHooks = getOutgoingHooks(state);\n    const outgoingWebhooks = Object.keys(outgoingHooks).\n        map((key) => outgoingHooks[key]).\n        filter((outgoingWebhook) => outgoingWebhook.team_id === teamId);\n    const enableOutgoingWebhooks = config.EnableOutgoingWebhooks === 'true';\n\n    return {\n        outgoingWebhooks,\n        channels: getAllChannels(state),\n        users: getUsers(state),\n        teamId,\n        canManageOthersWebhooks,\n        enableOutgoingWebhooks,\n    };\n}\n\nfunction mapDispatchToProps(dispatch) {\n    return {\n        actions: bindActionCreators({\n            loadOutgoingHooksAndProfilesForTeam,\n            removeOutgoingHook: Actions.removeOutgoingHook,\n            regenOutgoingHookToken: Actions.regenOutgoingHookToken,\n        }, dispatch),\n    };\n}\n\nexport default connect(mapStateToProps, mapDispatchToProps)(InstalledOutgoingWebhook);\n","// Copyright (c) 2015-present Mattermost, Inc. All Rights Reserved.\n// See LICENSE.txt for license information.\n\nimport PropTypes from 'prop-types';\nimport React from 'react';\nimport {FormattedMessage} from 'react-intl';\nimport {Link} from 'react-router-dom';\n\nimport {localizeMessage} from 'utils/utils.jsx';\nimport BackstageHeader from 'components/backstage/components/backstage_header.jsx';\nimport ChannelSelect from 'components/channel_select';\nimport FormError from 'components/form_error.jsx';\nimport SpinnerButton from 'components/spinner_button.jsx';\n\nexport default class AbstractOutgoingWebhook extends React.Component {\n    static propTypes = {\n\n        /**\n         * The current team\n         */\n        team: PropTypes.object.isRequired,\n\n        /**\n         * The header text to render, has id and defaultMessage\n         */\n        header: PropTypes.object.isRequired,\n\n        /**\n         * The footer text to render, has id and defaultMessage\n         */\n        footer: PropTypes.object.isRequired,\n\n        /**\n        * The spinner loading text to render, has id and defaultMessage\n        */\n        loading: PropTypes.object.isRequired,\n\n        /**\n         * Any extra component/node to render\n         */\n        renderExtra: PropTypes.node.isRequired,\n\n        /**\n         * The server error text after a failed action\n         */\n        serverError: PropTypes.string.isRequired,\n\n        /**\n         * The hook used to set the initial state\n         */\n        initialHook: PropTypes.object,\n\n        /**\n         * The async function to run when the action button is pressed\n         */\n        action: PropTypes.func.isRequired,\n\n        /**\n         * Whether to allow configuration of the default post username.\n         */\n        enablePostUsernameOverride: PropTypes.bool.isRequired,\n\n        /**\n         * Whether to allow configuration of the default post icon.\n         */\n        enablePostIconOverride: PropTypes.bool.isRequired,\n    }\n\n    constructor(props) {\n        super(props);\n\n        this.state = this.getStateFromHook(this.props.initialHook || {});\n    }\n\n    getStateFromHook = (hook) => {\n        let triggerWords = '';\n        if (hook.trigger_words) {\n            let i = 0;\n            for (i = 0; i < hook.trigger_words.length; i++) {\n                triggerWords += hook.trigger_words[i] + '\\n';\n            }\n        }\n\n        let callbackUrls = '';\n        if (hook.callback_urls) {\n            let i = 0;\n            for (i = 0; i < hook.callback_urls.length; i++) {\n                callbackUrls += hook.callback_urls[i] + '\\n';\n            }\n        }\n\n        return {\n            displayName: hook.display_name || '',\n            description: hook.description || '',\n            contentType: hook.content_type || 'application/x-www-form-urlencoded',\n            channelId: hook.channel_id || '',\n            triggerWords,\n            triggerWhen: hook.trigger_when || 0,\n            callbackUrls,\n            saving: false,\n            clientError: null,\n            username: hook.username || '',\n            iconURL: hook.icon_url || '',\n        };\n    }\n\n    handleSubmit = (e) => {\n        e.preventDefault();\n\n        if (this.state.saving) {\n            return;\n        }\n\n        this.setState({\n            saving: true,\n            clientError: '',\n        });\n\n        const triggerWords = [];\n        if (this.state.triggerWords) {\n            for (let triggerWord of this.state.triggerWords.split('\\n')) {\n                triggerWord = triggerWord.trim();\n\n                if (triggerWord.length > 0) {\n                    triggerWords.push(triggerWord);\n                }\n            }\n        }\n\n        if (!this.state.channelId && triggerWords.length === 0) {\n            this.setState({\n                saving: false,\n                clientError: (\n                    <FormattedMessage\n                        id='add_outgoing_webhook.triggerWordsOrChannelRequired'\n                        defaultMessage='A valid channel or a list of trigger words is required'\n                    />\n                ),\n            });\n\n            return;\n        }\n\n        const callbackUrls = [];\n        for (let callbackUrl of this.state.callbackUrls.split('\\n')) {\n            callbackUrl = callbackUrl.trim();\n\n            if (callbackUrl.length > 0) {\n                callbackUrls.push(callbackUrl);\n            }\n        }\n\n        if (callbackUrls.length === 0) {\n            this.setState({\n                saving: false,\n                clientError: (\n                    <FormattedMessage\n                        id='add_outgoing_webhook.callbackUrlsRequired'\n                        defaultMessage='One or more callback URLs are required'\n                    />\n                ),\n            });\n\n            return;\n        }\n\n        const hook = {\n            team_id: this.props.team.id,\n            channel_id: this.state.channelId,\n            trigger_words: triggerWords,\n            trigger_when: parseInt(this.state.triggerWhen, 10),\n            callback_urls: callbackUrls,\n            display_name: this.state.displayName,\n            content_type: this.state.contentType,\n            description: this.state.description,\n            username: this.state.username,\n            icon_url: this.state.iconURL,\n        };\n\n        this.props.action(hook).then(() => this.setState({saving: false}));\n    }\n\n    updateDisplayName = (e) => {\n        this.setState({\n            displayName: e.target.value,\n        });\n    }\n\n    updateDescription = (e) => {\n        this.setState({\n            description: e.target.value,\n        });\n    }\n\n    updateContentType = (e) => {\n        this.setState({\n            contentType: e.target.value,\n        });\n    }\n\n    updateChannelId = (e) => {\n        this.setState({\n            channelId: e.target.value,\n        });\n    }\n\n    updateTriggerWords = (e) => {\n        this.setState({\n            triggerWords: e.target.value,\n        });\n    }\n\n    updateTriggerWhen = (e) => {\n        this.setState({\n            triggerWhen: e.target.value,\n        });\n    }\n\n    updateCallbackUrls = (e) => {\n        this.setState({\n            callbackUrls: e.target.value,\n        });\n    }\n\n    updateUsername = (e) => {\n        this.setState({\n            username: e.target.value,\n        });\n    }\n\n    updateIconURL = (e) => {\n        this.setState({\n            iconURL: e.target.value,\n        });\n    }\n\n    render() {\n        const contentTypeOption1 = 'application/x-www-form-urlencoded';\n        const contentTypeOption2 = 'application/json';\n\n        var headerToRender = this.props.header;\n        var footerToRender = this.props.footer;\n        var renderExtra = this.props.renderExtra;\n\n        return (\n            <div className='backstage-content'>\n                <BackstageHeader>\n                    <Link to={`/${this.props.team.name}/integrations/outgoing_webhooks`}>\n                        <FormattedMessage\n                            id='installed_outgoing_webhooks.header'\n                            defaultMessage='Outgoing Webhooks'\n                        />\n                    </Link>\n                    <FormattedMessage\n                        id={headerToRender.id}\n                        defaultMessage={headerToRender.defaultMessage}\n                    />\n                </BackstageHeader>\n                <div className='backstage-form'>\n                    <form\n                        className='form-horizontal'\n                        onSubmit={this.handleSubmit}\n                    >\n                        <div className='form-group'>\n                            <label\n                                className='control-label col-sm-4'\n                                htmlFor='displayName'\n                            >\n                                <FormattedMessage\n                                    id='add_outgoing_webhook.displayName'\n                                    defaultMessage='Title'\n                                />\n                            </label>\n                            <div className='col-md-5 col-sm-8'>\n                                <input\n                                    id='displayName'\n                                    type='text'\n                                    maxLength='64'\n                                    className='form-control'\n                                    value={this.state.displayName}\n                                    onChange={this.updateDisplayName}\n                                />\n                                <div className='form__help'>\n                                    <FormattedMessage\n                                        id='add_outgoing_webhook.displayName.help'\n                                        defaultMessage='Choose a title to be displayed on the webhook settings page. Maximum 64 characters.'\n                                    />\n                                </div>\n                            </div>\n                        </div>\n                        <div className='form-group'>\n                            <label\n                                className='control-label col-sm-4'\n                                htmlFor='description'\n                            >\n                                <FormattedMessage\n                                    id='add_outgoing_webhook.description'\n                                    defaultMessage='Description'\n                                />\n                            </label>\n                            <div className='col-md-5 col-sm-8'>\n                                <input\n                                    id='description'\n                                    type='text'\n                                    maxLength='500'\n                                    className='form-control'\n                                    value={this.state.description}\n                                    onChange={this.updateDescription}\n                                />\n                                <div className='form__help'>\n                                    <FormattedMessage\n                                        id='add_outgoing_webhook.description.help'\n                                        defaultMessage='Description for your incoming webhook.'\n                                    />\n                                </div>\n                            </div>\n                        </div>\n                        <div className='form-group'>\n                            <label\n                                className='control-label col-sm-4'\n                                htmlFor='contentType'\n                            >\n                                <FormattedMessage\n                                    id='add_outgoing_webhook.content_Type'\n                                    defaultMessage='Content Type'\n                                />\n                            </label>\n                            <div className='col-md-5 col-sm-8'>\n                                <select\n                                    className='form-control'\n                                    value={this.state.contentType}\n                                    onChange={this.updateContentType}\n                                >\n                                    <option\n                                        value={contentTypeOption1}\n                                    >\n                                        {contentTypeOption1}\n                                    </option>\n                                    <option\n                                        value={contentTypeOption2}\n                                    >\n                                        {contentTypeOption2}\n                                    </option>\n                                </select>\n                                <div className='form__help'>\n                                    <FormattedMessage\n                                        id='add_outgoing_webhook.contentType.help1'\n                                        defaultMessage='Choose the content type by which the request will be sent.'\n                                    />\n                                </div>\n                                <div className='form__help'>\n                                    <FormattedMessage\n                                        id='add_outgoing_webhook.contentType.help2'\n                                        defaultMessage='If application/x-www-form-urlencoded is chosen, the server will encode the parameters in a URL format in the request body.'\n                                    />\n                                </div>\n                                <div className='form__help'>\n                                    <FormattedMessage\n                                        id='add_outgoing_webhook.contentType.help3'\n                                        defaultMessage='If application/json is chosen, the server will format the request body as JSON.'\n                                    />\n                                </div>\n                            </div>\n                        </div>\n                        <div className='form-group'>\n                            <label\n                                className='control-label col-sm-4'\n                                htmlFor='channelId'\n                            >\n                                <FormattedMessage\n                                    id='add_outgoing_webhook.channel'\n                                    defaultMessage='Channel'\n                                />\n                            </label>\n                            <div className='col-md-5 col-sm-8'>\n                                <ChannelSelect\n                                    id='channelId'\n                                    value={this.state.channelId}\n                                    onChange={this.updateChannelId}\n                                    selectOpen={true}\n                                />\n                                <div className='form__help'>\n                                    <FormattedMessage\n                                        id='add_outgoing_webhook.channel.help'\n                                        defaultMessage='Public channel that delivers payload to webhook. Optional if at least one Trigger Word is specified.'\n                                    />\n                                </div>\n                            </div>\n                        </div>\n                        <div className='form-group'>\n                            <label\n                                className='control-label col-sm-4'\n                                htmlFor='triggerWords'\n                            >\n                                <FormattedMessage\n                                    id='add_outgoing_webhook.triggerWords'\n                                    defaultMessage='Trigger Words (One Per Line)'\n                                />\n                            </label>\n                            <div className='col-md-5 col-sm-8'>\n                                <textarea\n                                    id='triggerWords'\n                                    rows='3'\n                                    maxLength='1000'\n                                    className='form-control'\n                                    value={this.state.triggerWords}\n                                    onChange={this.updateTriggerWords}\n                                />\n                                <div className='form__help'>\n                                    <FormattedMessage\n                                        id='add_outgoing_webhook.triggerWords.help'\n                                        defaultMessage='Messages that start with one of the specified words will trigger the outgoing webhook. Optional if Channel is selected.'\n                                    />\n                                </div>\n                            </div>\n                        </div>\n                        <div className='form-group'>\n                            <label\n                                className='control-label col-sm-4'\n                                htmlFor='triggerWords'\n                            >\n                                <FormattedMessage\n                                    id='add_outgoing_webhook.triggerWordsTriggerWhen'\n                                    defaultMessage='Trigger When'\n                                />\n                            </label>\n                            <div className='col-md-5 col-sm-8'>\n                                <select\n                                    className='form-control'\n                                    value={this.state.triggerWhen}\n                                    onChange={this.updateTriggerWhen}\n                                >\n                                    <option\n                                        value='0'\n                                    >\n                                        {localizeMessage('add_outgoing_webhook.triggerWordsTriggerWhenFullWord', 'First word matches a trigger word exactly')}\n                                    </option>\n                                    <option\n                                        value='1'\n                                    >\n                                        {localizeMessage('add_outgoing_webhook.triggerWordsTriggerWhenStartsWith', 'First word starts with a trigger word')}\n                                    </option>\n                                </select>\n                                <div className='form__help'>\n                                    <FormattedMessage\n                                        id='add_outgoing_webhook.triggerWordsTriggerWhen.help'\n                                        defaultMessage='Choose when to trigger the outgoing webhook; if the first word of a message matches a Trigger Word exactly, or if it starts with a Trigger Word.'\n                                    />\n                                </div>\n                            </div>\n                        </div>\n                        <div className='form-group'>\n                            <label\n                                className='control-label col-sm-4'\n                                htmlFor='callbackUrls'\n                            >\n                                <FormattedMessage\n                                    id='add_outgoing_webhook.callbackUrls'\n                                    defaultMessage='Callback URLs (One Per Line)'\n                                />\n                            </label>\n                            <div className='col-md-5 col-sm-8'>\n                                <textarea\n                                    id='callbackUrls'\n                                    rows='3'\n                                    maxLength='1000'\n                                    className='form-control'\n                                    value={this.state.callbackUrls}\n                                    onChange={this.updateCallbackUrls}\n                                />\n                                <div className='form__help'>\n                                    <FormattedMessage\n                                        id='add_outgoing_webhook.callbackUrls.help'\n                                        defaultMessage='The URL that messages will be sent to. If the URL is private, add it as a {link}.'\n                                        values={{\n                                            link: (\n                                                <a\n                                                    href='https://about.mattermost.com/default-allow-internal-connections-settings-documentation/'\n                                                    target='_blank'\n                                                    rel='noopener noreferrer'\n                                                >\n                                                    <FormattedMessage\n                                                        id='add_outgoing_webhook.callbackUrls.helpLinkText'\n                                                        defaultMessage='trusted internal connection'\n                                                    />\n                                                </a>\n                                            ),\n                                        }}\n                                    />\n                                </div>\n                            </div>\n                        </div>\n                        {this.props.enablePostUsernameOverride &&\n                            <div className='form-group'>\n                                <label\n                                    className='control-label col-sm-4'\n                                    htmlFor='username'\n                                >\n                                    <FormattedMessage\n                                        id='add_outgoing_webhook.username'\n                                        defaultMessage='Username'\n                                    />\n                                </label>\n                                <div className='col-md-5 col-sm-8'>\n                                    <input\n                                        id='username'\n                                        type='text'\n                                        maxLength='22'\n                                        className='form-control'\n                                        value={this.state.username}\n                                        onChange={this.updateUsername}\n                                    />\n                                    <div className='form__help'>\n                                        <FormattedMessage\n                                            id='add_outgoing_webhook.username.help'\n                                            defaultMessage='Choose the username this integration will post as. Usernames can be up to 22 characters, and may contain lowercase letters, numbers and the symbols \"-\", \"_\", and \".\".'\n                                        />\n                                    </div>\n                                </div>\n                            </div>\n                        }\n                        {this.props.enablePostIconOverride &&\n                            <div className='form-group'>\n                                <label\n                                    className='control-label col-sm-4'\n                                    htmlFor='iconURL'\n                                >\n                                    <FormattedMessage\n                                        id='add_outgoing_webhook.icon_url'\n                                        defaultMessage='Profile Picture'\n                                    />\n                                </label>\n                                <div className='col-md-5 col-sm-8'>\n                                    <input\n                                        id='iconURL'\n                                        type='text'\n                                        maxLength='1024'\n                                        className='form-control'\n                                        value={this.state.iconURL}\n                                        onChange={this.updateIconURL}\n                                    />\n                                    <div className='form__help'>\n                                        <FormattedMessage\n                                            id='add_outgoing_webhook.icon_url.help'\n                                            defaultMessage='Choose the profile picture this integration will use when posting. Enter the URL of a .png or .jpg file at least 128 pixels by 128 pixels.'\n                                        />\n                                    </div>\n                                </div>\n                            </div>\n                        }\n                        <div className='backstage-form__footer'>\n                            <FormError\n                                type='backstage'\n                                errors={[this.props.serverError, this.state.clientError]}\n                            />\n                            <Link\n                                className='btn btn-link btn-sm'\n                                to={`/${this.props.team.name}/integrations/outgoing_webhooks`}\n                            >\n                                <FormattedMessage\n                                    id='add_outgoing_webhook.cancel'\n                                    defaultMessage='Cancel'\n                                />\n                            </Link>\n                            <SpinnerButton\n                                className='btn btn-primary'\n                                type='submit'\n                                spinning={this.state.saving}\n                                spinningText={localizeMessage(this.props.loading.id, this.props.loading.defaultMessage)}\n                                onClick={this.handleSubmit}\n                                id='saveWebhook'\n                            >\n                                <FormattedMessage\n                                    id={footerToRender.id}\n                                    defaultMessage={footerToRender.defaultMessage}\n                                />\n                            </SpinnerButton>\n                            {renderExtra}\n                        </div>\n                    </form>\n                </div>\n            </div>\n        );\n    }\n}\n","// Copyright (c) 2015-present Mattermost, Inc. All Rights Reserved.\n// See LICENSE.txt for license information.\n\nimport PropTypes from 'prop-types';\nimport React from 'react';\n\nimport {browserHistory} from 'utils/browser_history';\nimport {t} from 'utils/i18n';\nimport AbstractOutgoingWebhook from 'components/integrations/abstract_outgoing_webhook.jsx';\n\nconst HEADER = {id: t('integrations.add'), defaultMessage: 'Add'};\nconst FOOTER = {id: t('add_outgoing_webhook.save'), defaultMessage: 'Save'};\nconst LOADING = {id: t('add_outgoing_webhook.saving'), defaultMessage: 'Saving...'};\n\nexport default class AddOutgoingWebhook extends React.PureComponent {\n    static propTypes = {\n\n        /**\n         * The current team\n         */\n        team: PropTypes.object.isRequired,\n\n        /**\n         * The request state for createOutgoingHook action. Contains status and error\n         */\n        createOutgoingHookRequest: PropTypes.object.isRequired,\n\n        actions: PropTypes.shape({\n\n            /**\n             * The function to call to add a new outgoing webhook\n             */\n            createOutgoingHook: PropTypes.func.isRequired,\n        }).isRequired,\n\n        /**\n         * Whether to allow configuration of the default post username.\n         */\n        enablePostUsernameOverride: PropTypes.bool.isRequired,\n\n        /**\n         * Whether to allow configuration of the default post icon.\n         */\n        enablePostIconOverride: PropTypes.bool.isRequired,\n    }\n\n    constructor(props) {\n        super(props);\n\n        this.state = {\n            serverError: '',\n        };\n    }\n\n    addOutgoingHook = async (hook) => {\n        this.setState({serverError: ''});\n\n        const {data} = await this.props.actions.createOutgoingHook(hook);\n        if (data) {\n            browserHistory.push(`/${this.props.team.name}/integrations/confirm?type=outgoing_webhooks&id=${data.id}`);\n            return;\n        }\n\n        if (this.props.createOutgoingHookRequest.error) {\n            this.setState({serverError: this.props.createOutgoingHookRequest.error.message});\n        }\n    }\n\n    render() {\n        return (\n            <AbstractOutgoingWebhook\n                team={this.props.team}\n                header={HEADER}\n                footer={FOOTER}\n                loading={LOADING}\n                renderExtra={''}\n                action={this.addOutgoingHook}\n                serverError={this.state.serverError}\n                enablePostUsernameOverride={this.props.enablePostUsernameOverride}\n                enablePostIconOverride={this.props.enablePostIconOverride}\n            />\n        );\n    }\n}\n","// Copyright (c) 2015-present Mattermost, Inc. All Rights Reserved.\n// See LICENSE.txt for license information.\n\nimport {connect} from 'react-redux';\nimport {bindActionCreators} from 'redux';\nimport {createOutgoingHook} from 'mattermost-redux/actions/integrations';\n\nimport {getConfig} from 'mattermost-redux/selectors/entities/general';\n\nimport AddOutgoingWebhook from './add_outgoing_webhook.jsx';\n\nfunction mapStateToProps(state) {\n    const config = getConfig(state);\n    const enablePostUsernameOverride = config.EnablePostUsernameOverride === 'true';\n    const enablePostIconOverride = config.EnablePostIconOverride === 'true';\n    return {\n        createOutgoingHookRequest: state.requests.integrations.createOutgoingHook,\n        enablePostUsernameOverride,\n        enablePostIconOverride,\n    };\n}\n\nfunction mapDispatchToProps(dispatch) {\n    return {\n        actions: bindActionCreators({\n            createOutgoingHook,\n        }, dispatch),\n    };\n}\n\nexport default connect(mapStateToProps, mapDispatchToProps)(AddOutgoingWebhook);\n","// Copyright (c) 2015-present Mattermost, Inc. All Rights Reserved.\n// See LICENSE.txt for license information.\n\nimport PropTypes from 'prop-types';\nimport React from 'react';\nimport {FormattedMessage} from 'react-intl';\n\nimport {browserHistory} from 'utils/browser_history';\nimport ConfirmModal from 'components/confirm_modal.jsx';\nimport AbstractOutgoingWebhook from 'components/integrations/abstract_outgoing_webhook.jsx';\nimport LoadingScreen from 'components/loading_screen.jsx';\n\nconst HEADER = {id: 'integrations.edit', defaultMessage: 'Edit'};\nconst FOOTER = {id: 'update_outgoing_webhook.update', defaultMessage: 'Update'};\nconst LOADING = {id: 'update_outgoing_webhook.updating', defaultMessage: 'Updating...'};\n\nexport default class EditOutgoingWebhook extends React.PureComponent {\n    static propTypes = {\n\n        /**\n         * The current team\n         */\n        team: PropTypes.object.isRequired,\n\n        /**\n         * The outgoing webhook to edit\n         */\n        hook: PropTypes.object,\n\n        /**\n         * The id of the outgoing webhook to edit\n         */\n        hookId: PropTypes.string.isRequired,\n\n        /**\n         * The request state for updateOutgoingHook action. Contains status and error\n         */\n        updateOutgoingHookRequest: PropTypes.object.isRequired,\n\n        actions: PropTypes.shape({\n\n            /**\n             * The function to call to update an outgoing webhook\n             */\n            updateOutgoingHook: PropTypes.func.isRequired,\n\n            /**\n             * The function to call to get an outgoing webhook\n             */\n            getOutgoingHook: PropTypes.func.isRequired,\n        }).isRequired,\n\n        /**\n        * Whether or not outgoing webhooks are enabled.\n        */\n        enableOutgoingWebhooks: PropTypes.bool,\n\n        /**\n         * Whether to allow configuration of the default post username.\n         */\n        enablePostUsernameOverride: PropTypes.bool.isRequired,\n\n        /**\n         * Whether to allow configuration of the default post icon.\n         */\n        enablePostIconOverride: PropTypes.bool.isRequired,\n    }\n\n    constructor(props) {\n        super(props);\n\n        this.state = {\n            showConfirmModal: false,\n            serverError: '',\n        };\n    }\n\n    componentDidMount() {\n        if (this.props.enableOutgoingWebhooks) {\n            this.props.actions.getOutgoingHook(this.props.hookId);\n        }\n    }\n\n    editOutgoingHook = async (hook) => {\n        this.newHook = hook;\n\n        if (this.props.hook.id) {\n            hook.id = this.props.hook.id;\n        }\n\n        if (this.props.hook.token) {\n            hook.token = this.props.hook.token;\n        }\n\n        const triggerWordsSame = (this.props.hook.trigger_words.length === hook.trigger_words.length) &&\n            this.props.hook.trigger_words.every((v, i) => v === hook.trigger_words[i]);\n\n        const callbackUrlsSame = (this.props.hook.callback_urls.length === hook.callback_urls.length) &&\n            this.props.hook.callback_urls.every((v, i) => v === hook.callback_urls[i]);\n\n        if (this.props.hook.content_type !== hook.content_type ||\n            !triggerWordsSame || !callbackUrlsSame) {\n            this.handleConfirmModal();\n        } else {\n            await this.submitHook();\n        }\n    }\n\n    handleConfirmModal = () => {\n        this.setState({showConfirmModal: true});\n    }\n\n    confirmModalDismissed = () => {\n        this.setState({showConfirmModal: false});\n    }\n\n    submitHook = async () => {\n        this.setState({serverError: ''});\n\n        const {data} = await this.props.actions.updateOutgoingHook(this.newHook);\n\n        if (data) {\n            browserHistory.push(`/${this.props.team.name}/integrations/outgoing_webhooks`);\n            return;\n        }\n\n        this.setState({showConfirmModal: false});\n\n        if (this.props.updateOutgoingHookRequest.error) {\n            this.setState({serverError: this.props.updateOutgoingHookRequest.error.message});\n        }\n    }\n\n    renderExtra = () => {\n        const confirmButton = (\n            <FormattedMessage\n                id='update_outgoing_webhook.update'\n                defaultMessage='Update'\n            />\n        );\n\n        const confirmTitle = (\n            <FormattedMessage\n                id='update_outgoing_webhook.confirm'\n                defaultMessage='Edit Outgoing Webhook'\n            />\n        );\n\n        const confirmMessage = (\n            <FormattedMessage\n                id='update_outgoing_webhook.question'\n                defaultMessage='Your changes may break the existing outgoing webhook. Are you sure you would like to update it?'\n            />\n        );\n\n        return (\n            <ConfirmModal\n                title={confirmTitle}\n                message={confirmMessage}\n                confirmButtonText={confirmButton}\n                show={this.state.showConfirmModal}\n                onConfirm={this.submitHook}\n                onCancel={this.confirmModalDismissed}\n            />\n        );\n    }\n\n    render() {\n        if (!this.props.hook) {\n            return <LoadingScreen/>;\n        }\n\n        return (\n            <AbstractOutgoingWebhook\n                team={this.props.team}\n                header={HEADER}\n                footer={FOOTER}\n                loading={LOADING}\n                renderExtra={this.renderExtra()}\n                action={this.editOutgoingHook}\n                serverError={this.state.serverError}\n                initialHook={this.props.hook}\n                enablePostUsernameOverride={this.props.enablePostUsernameOverride}\n                enablePostIconOverride={this.props.enablePostIconOverride}\n            />\n        );\n    }\n}\n","// Copyright (c) 2015-present Mattermost, Inc. All Rights Reserved.\n// See LICENSE.txt for license information.\n\nimport {connect} from 'react-redux';\nimport {bindActionCreators} from 'redux';\nimport {getOutgoingHook, updateOutgoingHook} from 'mattermost-redux/actions/integrations';\nimport {getConfig} from 'mattermost-redux/selectors/entities/general';\n\nimport EditOutgoingWebhook from './edit_outgoing_webhook.jsx';\n\nfunction mapStateToProps(state, ownProps) {\n    const config = getConfig(state);\n    const hookId = (new URLSearchParams(ownProps.location.search)).get('id');\n    const enableOutgoingWebhooks = config.EnableOutgoingWebhooks === 'true';\n    const enablePostUsernameOverride = config.EnablePostUsernameOverride === 'true';\n    const enablePostIconOverride = config.EnablePostIconOverride === 'true';\n\n    return {\n        hookId,\n        hook: state.entities.integrations.outgoingHooks[hookId],\n        updateOutgoingHookRequest: state.requests.integrations.createOutgoingHook,\n        enableOutgoingWebhooks,\n        enablePostUsernameOverride,\n        enablePostIconOverride,\n    };\n}\n\nfunction mapDispatchToProps(dispatch) {\n    return {\n        actions: bindActionCreators({\n            updateOutgoingHook,\n            getOutgoingHook,\n        }, dispatch),\n    };\n}\n\nexport default connect(mapStateToProps, mapDispatchToProps)(EditOutgoingWebhook);\n","// Copyright (c) 2015-present Mattermost, Inc. All Rights Reserved.\n// See LICENSE.txt for license information.\n\nimport PropTypes from 'prop-types';\nimport React from 'react';\nimport {FormattedMessage} from 'react-intl';\nimport {Link} from 'react-router-dom';\n\nimport * as Utils from 'utils/utils.jsx';\nimport {t} from 'utils/i18n';\nimport FormError from 'components/form_error.jsx';\nimport FormattedMarkdownMessage from 'components/formatted_markdown_message.jsx';\nimport CopyText from 'components/copy_text.jsx';\n\nimport DeleteIntegration from '../delete_integration.jsx';\n\nconst FAKE_SECRET = '***************';\n\nexport function matchesFilter(oauthApp, filter) {\n    if (!filter) {\n        return true;\n    }\n\n    return oauthApp.name.toLowerCase().indexOf(filter) !== -1;\n}\n\nexport default class InstalledOAuthApp extends React.PureComponent {\n    static propTypes = {\n\n        /**\n        * The team data\n        */\n        team: PropTypes.object,\n\n        /**\n        * The oauthApp data\n        */\n        oauthApp: PropTypes.object.isRequired,\n\n        creatorName: PropTypes.string.isRequired,\n\n        /**\n        * The request state for regenOAuthAppSecret action. Contains status and error\n        */\n        regenOAuthAppSecretRequest: PropTypes.object.isRequired,\n\n        /**\n        * The function to call when Regenerate Secret link is clicked\n        */\n        onRegenerateSecret: PropTypes.func.isRequired,\n\n        /**\n        * The function to call when Delete link is clicked\n        */\n        onDelete: PropTypes.func.isRequired,\n\n        /**\n        * Set to filter OAuthApp\n        */\n        filter: PropTypes.string,\n    }\n\n    constructor(props) {\n        super(props);\n\n        this.state = {\n            clientSecret: FAKE_SECRET,\n        };\n    }\n\n    handleShowClientSecret = (e) => {\n        if (e && e.preventDefault) {\n            e.preventDefault();\n        }\n        this.setState({clientSecret: this.props.oauthApp.client_secret});\n    }\n\n    handleHideClientSecret = (e) => {\n        e.preventDefault();\n        this.setState({clientSecret: FAKE_SECRET});\n    }\n\n    handleRegenerate = (e) => {\n        e.preventDefault();\n        this.props.onRegenerateSecret(this.props.oauthApp.id).then(\n            () => {\n                const {error} = this.props.regenOAuthAppSecretRequest;\n                if (error) {\n                    this.setState({error: error.message});\n                } else {\n                    this.setState({error: null});\n                    this.handleShowClientSecret();\n                }\n            }\n        );\n    }\n\n    handleDelete = () => {\n        this.props.onDelete(this.props.oauthApp);\n    }\n\n    render() {\n        const {oauthApp, creatorName} = this.props;\n        let error;\n\n        if (this.state.error) {\n            error = (\n                <FormError\n                    error={this.state.error}\n                />\n            );\n        }\n\n        if (!matchesFilter(oauthApp, this.props.filter)) {\n            return null;\n        }\n\n        let name;\n        if (oauthApp.name) {\n            name = oauthApp.name;\n        } else {\n            name = (\n                <FormattedMessage\n                    id='installed_integrations.unnamed_oauth_app'\n                    defaultMessage='Unnamed OAuth 2.0 Application'\n                />\n            );\n        }\n\n        let description;\n        if (oauthApp.description) {\n            description = (\n                <div className='item-details__row'>\n                    <span className='item-details__description'>\n                        {oauthApp.description}\n                    </span>\n                </div>\n            );\n        }\n\n        const urls = (\n            <div className='item-details__row'>\n                <span className='item-details__url'>\n                    <FormattedMessage\n                        id='installed_integrations.callback_urls'\n                        defaultMessage='Callback URLs: {urls}'\n                        values={{\n                            urls: oauthApp.callback_urls.join(', '),\n                        }}\n                    />\n                </span>\n            </div>\n        );\n\n        let isTrusted;\n        if (oauthApp.is_trusted) {\n            isTrusted = Utils.localizeMessage('installed_oauth_apps.trusted.yes', 'Yes');\n        } else {\n            isTrusted = Utils.localizeMessage('installed_oauth_apps.trusted.no', 'No');\n        }\n\n        let showHide;\n        let clientSecret;\n        if (this.state.clientSecret === FAKE_SECRET) {\n            showHide = (\n                <button\n                    id='showSecretButton'\n                    className='style--none color--link'\n                    onClick={this.handleShowClientSecret}\n                >\n                    <FormattedMessage\n                        id='installed_integrations.showSecret'\n                        defaultMessage='Show Secret'\n                    />\n                </button>\n            );\n            clientSecret = (\n                <span className='item-details__token'>\n                    <FormattedMessage\n                        id='installed_integrations.client_secret'\n                        defaultMessage='Client Secret: **{clientSecret}**'\n                        values={{\n                            clientSecret: this.state.clientSecret,\n                        }}\n                    />\n                </span>\n            );\n        } else {\n            showHide = (\n                <button\n                    id='hideSecretButton'\n                    className='style--none color--link'\n                    onClick={this.handleHideClientSecret}\n                >\n                    <FormattedMessage\n                        id='installed_integrations.hideSecret'\n                        defaultMessage='Hide Secret'\n                    />\n                </button>\n            );\n            clientSecret = (\n                <span className='item-details__token'>\n                    <FormattedMarkdownMessage\n                        id='installed_integrations.client_secret'\n                        defaultMessage='Client Secret: **{clientSecret}**'\n                        values={{\n                            clientSecret: this.state.clientSecret,\n                        }}\n                    />\n                    <CopyText\n                        idMessage='integrations.copy_client_secret'\n                        defaultMessage='Copy Client Secret'\n                        value={this.state.clientSecret}\n                    />\n                </span>\n            );\n        }\n\n        const regen = (\n            <button\n                id='regenerateSecretButton'\n                className='style--none color--link'\n                onClick={this.handleRegenerate}\n            >\n                <FormattedMessage\n                    id='installed_integrations.regenSecret'\n                    defaultMessage='Regenerate Secret'\n                />\n            </button>\n        );\n\n        let icon;\n        if (oauthApp.icon_url) {\n            icon = (\n                <div className='integration__icon integration-list__icon'>\n                    <img\n                        alt={'get app screenshot'}\n                        src={oauthApp.icon_url}\n                    />\n                </div>\n            );\n        }\n\n        return (\n            <div className='backstage-list__item'>\n                {icon}\n                <div className='item-details'>\n                    <div className='item-details__row'>\n                        <strong className='item-details__name'>\n                            {name}\n                        </strong>\n                    </div>\n                    {error}\n                    {description}\n                    <div className='item-details__row'>\n                        <span className='item-details__url'>\n                            <FormattedMarkdownMessage\n                                id='installed_oauth_apps.is_trusted'\n                                defaultMessage='Is Trusted: **{isTrusted}**'\n                                values={{\n                                    isTrusted,\n                                }}\n                            />\n                        </span>\n                    </div>\n                    <div className='item-details__row'>\n                        <span className='item-details__token'>\n                            <FormattedMarkdownMessage\n                                id='installed_integrations.client_id'\n                                defaultMessage='Client ID: **{clientId}**'\n                                values={{\n                                    clientId: oauthApp.id,\n                                }}\n                            />\n                            <CopyText\n                                idMessage='integrations.copy_client_id'\n                                defaultMessage='Copy Client Id'\n                                value={oauthApp.id}\n                            />\n                        </span>\n                    </div>\n                    <div className='item-details__row'>\n                        {clientSecret}\n                    </div>\n                    {urls}\n                    <div className='item-details__row'>\n                        <span className='item-details__creation'>\n                            <FormattedMessage\n                                id='installed_integrations.creation'\n                                defaultMessage='Created by {creator} on {createAt, date, full}'\n                                values={{\n                                    creator: creatorName,\n                                    createAt: oauthApp.create_at,\n                                }}\n                            />\n                        </span>\n                    </div>\n                </div>\n                <div className='item-actions'>\n                    {showHide}\n                    {' - '}\n                    {regen}\n                    {' - '}\n                    <Link to={`/${this.props.team.name}/integrations/oauth2-apps/edit?id=${oauthApp.id}`}>\n                        <FormattedMessage\n                            id='installed_integrations.edit'\n                            defaultMessage='Edit'\n                        />\n                    </Link>\n                    {' - '}\n                    <DeleteIntegration\n                        messageId={t('installed_oauth_apps.delete.confirm')}\n                        onDelete={this.handleDelete}\n                    />\n                </div>\n            </div>\n        );\n    }\n}\n","// Copyright (c) 2015-present Mattermost, Inc. All Rights Reserved.\n// See LICENSE.txt for license information.\n\nimport {connect} from 'react-redux';\nimport {getUser} from 'mattermost-redux/selectors/entities/users';\n\nimport {getDisplayNameByUser} from 'utils/utils';\n\nimport InstalledOAuthApp from './installed_oauth_app.jsx';\n\nfunction mapStateToProps(state, ownProps) {\n    const oauthApp = ownProps.oauthApp || {};\n    return {\n        creatorName: getDisplayNameByUser(getUser(state, oauthApp.creator_id)),\n    };\n}\n\nexport default connect(mapStateToProps)(InstalledOAuthApp);\n","// Copyright (c) 2015-present Mattermost, Inc. All Rights Reserved.\n// See LICENSE.txt for license information.\n\nimport PropTypes from 'prop-types';\nimport React from 'react';\nimport {FormattedMessage} from 'react-intl';\n\nimport {localizeMessage} from 'utils/utils.jsx';\nimport BackstageList from 'components/backstage/components/backstage_list.jsx';\nimport InstalledOAuthApp from '../installed_oauth_app';\nimport {matchesFilter} from '../installed_oauth_app/installed_oauth_app';\nimport FormattedMarkdownMessage from 'components/formatted_markdown_message';\n\nexport default class InstalledOAuthApps extends React.PureComponent {\n    static propTypes = {\n\n        /**\n        * The team data\n        */\n        team: PropTypes.object,\n\n        /**\n        * The oauthApps data\n        */\n        oauthApps: PropTypes.object,\n\n        /**\n        * Set if user can manage oath\n        */\n        canManageOauth: PropTypes.bool,\n\n        /**\n        * The request state for regenOAuthAppSecret action. Contains status and error\n        */\n        regenOAuthAppSecretRequest: PropTypes.object.isRequired,\n\n        actions: PropTypes.shape({\n\n            /**\n            * The function to call to fetch OAuth apps\n            */\n            loadOAuthAppsAndProfiles: PropTypes.func.isRequired,\n\n            /**\n            * The function to call when Regenerate Secret link is clicked\n            */\n            regenOAuthAppSecret: PropTypes.func.isRequired,\n\n            /**\n            * The function to call when Delete link is clicked\n            */\n            deleteOAuthApp: PropTypes.func.isRequired,\n        }).isRequired,\n\n        /**\n        * Whether or not OAuth applications are enabled.\n        */\n        enableOAuthServiceProvider: PropTypes.bool,\n    };\n\n    constructor(props) {\n        super(props);\n        this.state = {\n            loading: true,\n        };\n    }\n\n    componentDidMount() {\n        if (this.props.enableOAuthServiceProvider) {\n            this.props.actions.loadOAuthAppsAndProfiles().then(\n                () => this.setState({loading: false})\n            );\n        }\n    }\n\n    deleteOAuthApp = (app) => {\n        if (app && app.id) {\n            this.props.actions.deleteOAuthApp(app.id);\n        }\n    }\n\n    oauthAppCompare(a, b) {\n        let nameA = a.name;\n        if (!nameA) {\n            nameA = localizeMessage('installed_integrations.unnamed_oauth_app', 'Unnamed OAuth 2.0 Application');\n        }\n\n        let nameB = b.name;\n        if (!nameB) {\n            nameB = localizeMessage('installed_integrations.unnamed_oauth_app', 'Unnamed OAuth 2.0 Application');\n        }\n\n        return nameA.localeCompare(nameB);\n    }\n\n    oauthApps = (filter) => Object.values(this.props.oauthApps).\n        filter((app) => matchesFilter(app, filter)).\n        sort(this.oauthAppCompare).\n        map((app) => {\n            return (\n                <InstalledOAuthApp\n                    key={app.id}\n                    team={this.props.team}\n                    oauthApp={app}\n                    regenOAuthAppSecretRequest={this.props.regenOAuthAppSecretRequest}\n                    onRegenerateSecret={this.props.actions.regenOAuthAppSecret}\n                    onDelete={this.deleteOAuthApp}\n                />\n            );\n        });\n\n    render() {\n        const integrationsEnabled = this.props.enableOAuthServiceProvider && this.props.canManageOauth;\n        let props;\n        if (integrationsEnabled) {\n            props = {\n                addLink: '/' + this.props.team.name + '/integrations/oauth2-apps/add',\n                addText: localizeMessage('installed_oauth_apps.add', 'Add OAuth 2.0 Application'),\n                addButtonId: 'addOauthApp',\n            };\n        }\n\n        return (\n            <BackstageList\n                header={\n                    <FormattedMessage\n                        id='installed_oauth_apps.header'\n                        defaultMessage='OAuth 2.0 Applications'\n                    />\n                }\n                helpText={\n                    <FormattedMessage\n                        id='installed_oauth_apps.help'\n                        defaultMessage='Create {oauthApplications} to securely integrate bots and third-party apps with Mattermost. Visit the {appDirectory} to find available self-hosted apps.'\n                        values={{\n                            oauthApplications: (\n                                <a\n                                    target='_blank'\n                                    rel='noopener noreferrer'\n                                    href='https://docs.mattermost.com/developer/oauth-2-0-applications.html'\n                                >\n                                    <FormattedMessage\n                                        id='installed_oauth_apps.help.oauthApplications'\n                                        defaultMessage='OAuth 2.0 applications'\n                                    />\n                                </a>\n                            ),\n                            appDirectory: (\n                                <a\n                                    target='_blank'\n                                    rel='noopener noreferrer'\n                                    href='https://about.mattermost.com/default-app-directory/'\n                                >\n                                    <FormattedMessage\n                                        id='installed_oauth_apps.help.appDirectory'\n                                        defaultMessage='App Directory'\n                                    />\n                                </a>\n                            ),\n                        }}\n                    />\n                }\n                emptyText={\n                    <FormattedMessage\n                        id='installed_oauth_apps.empty'\n                        defaultMessage='No OAuth 2.0 Applications found'\n                    />\n                }\n                emptyTextSearch={\n                    <FormattedMarkdownMessage\n                        id='installed_oauth_apps.emptySearch'\n                        defaultMessage='No OAuth 2.0 Applications match {searchTerm}'\n                    />\n                }\n                searchPlaceholder={localizeMessage('installed_oauth_apps.search', 'Search OAuth 2.0 Applications')}\n                loading={this.state.loading}\n                {...props}\n            >\n                {(filter) => {\n                    const children = this.oauthApps(filter);\n                    return [children, children.length > 0];\n                }}\n            </BackstageList>\n        );\n    }\n}\n","// Copyright (c) 2015-present Mattermost, Inc. All Rights Reserved.\n// See LICENSE.txt for license information.\n\nimport {connect} from 'react-redux';\nimport {bindActionCreators} from 'redux';\nimport * as Actions from 'mattermost-redux/actions/integrations';\nimport {getOAuthApps} from 'mattermost-redux/selectors/entities/integrations';\nimport {haveISystemPermission} from 'mattermost-redux/selectors/entities/roles';\nimport {Permissions} from 'mattermost-redux/constants';\nimport {getConfig} from 'mattermost-redux/selectors/entities/general';\n\nimport {loadOAuthAppsAndProfiles} from 'actions/integration_actions';\n\nimport InstalledOAuthApps from './installed_oauth_apps.jsx';\n\nfunction mapStateToProps(state) {\n    const config = getConfig(state);\n    const enableOAuthServiceProvider = config.EnableOAuthServiceProvider === 'true';\n\n    return {\n        canManageOauth: haveISystemPermission(state, {permission: Permissions.MANAGE_OAUTH}),\n        oauthApps: getOAuthApps(state),\n        regenOAuthAppSecretRequest: state.requests.integrations.updateOAuthApp,\n        enableOAuthServiceProvider,\n    };\n}\n\nfunction mapDispatchToProps(dispatch) {\n    return {\n        actions: bindActionCreators({\n            loadOAuthAppsAndProfiles,\n            regenOAuthAppSecret: Actions.regenOAuthAppSecret,\n            deleteOAuthApp: Actions.deleteOAuthApp,\n        }, dispatch),\n    };\n}\n\nexport default connect(mapStateToProps, mapDispatchToProps)(InstalledOAuthApps);\n","// Copyright (c) 2015-present Mattermost, Inc. All Rights Reserved.\n// See LICENSE.txt for license information.\n\nimport React from 'react';\nimport PropTypes from 'prop-types';\nimport {FormattedMessage} from 'react-intl';\nimport {Link} from 'react-router-dom';\nimport {Permissions} from 'mattermost-redux/constants';\n\nimport {localizeMessage} from 'utils/utils.jsx';\nimport BackstageHeader from 'components/backstage/components/backstage_header.jsx';\nimport FormError from 'components/form_error.jsx';\nimport SpinnerButton from 'components/spinner_button.jsx';\nimport SystemPermissionGate from 'components/permissions_gates/system_permission_gate';\n\nexport default class AbstractOAuthApp extends React.PureComponent {\n    static propTypes = {\n\n        /**\n        * The current team\n        */\n        team: PropTypes.object.isRequired,\n\n        /**\n        * The header text to render, has id and defaultMessage\n        */\n        header: PropTypes.object.isRequired,\n\n        /**\n        * The footer text to render, has id and defaultMessage\n        */\n        footer: PropTypes.object.isRequired,\n\n        /**\n        * The spinner loading text to render, has id and defaultMessage\n        */\n        loading: PropTypes.object.isRequired,\n\n        /**\n         * Any extra component/node to render\n         */\n        renderExtra: PropTypes.node.isRequired,\n\n        /**\n        * The server error text after a failed action\n        */\n        serverError: PropTypes.string.isRequired,\n\n        /**\n        * The OAuthApp used to set the initial state\n        */\n        initialApp: PropTypes.object,\n\n        /**\n        * The async function to run when the action button is pressed\n        */\n        action: PropTypes.func.isRequired,\n    }\n\n    constructor(props) {\n        super(props);\n\n        this.image = new Image();\n        this.image.onload = this.imageLoaded;\n        this.state = this.getStateFromApp(this.props.initialApp || {});\n    }\n\n    getStateFromApp = (app) => {\n        return {\n            name: app.name || '',\n            description: app.description || '',\n            homepage: app.homepage || '',\n            icon_url: app.icon_url || '',\n            callbackUrls: app.callback_urls ? app.callback_urls.join('\\n') : '',\n            is_trusted: app.is_trusted || false,\n            has_icon: Boolean(app.icon_url),\n            saving: false,\n            clientError: null,\n        };\n    }\n\n    imageLoaded = () => {\n        this.setState({\n            has_icon: true,\n            icon_url: this.refs.icon_url.value,\n        });\n    }\n\n    handleSubmit = (e) => {\n        e.preventDefault();\n\n        if (this.state.saving) {\n            return;\n        }\n\n        this.setState({\n            saving: true,\n            clientError: '',\n        });\n\n        if (!this.state.name) {\n            this.setState({\n                saving: false,\n                clientError: (\n                    <FormattedMessage\n                        id='add_oauth_app.nameRequired'\n                        defaultMessage='Name for the OAuth 2.0 application is required.'\n                    />\n                ),\n            });\n\n            return;\n        }\n\n        if (!this.state.description) {\n            this.setState({\n                saving: false,\n                clientError: (\n                    <FormattedMessage\n                        id='add_oauth_app.descriptionRequired'\n                        defaultMessage='Description for the OAuth 2.0 application is required.'\n                    />\n                ),\n            });\n\n            return;\n        }\n\n        if (!this.state.homepage) {\n            this.setState({\n                saving: false,\n                clientError: (\n                    <FormattedMessage\n                        id='add_oauth_app.homepageRequired'\n                        defaultMessage='Homepage for the OAuth 2.0 application is required.'\n                    />\n                ),\n            });\n\n            return;\n        }\n\n        const callbackUrls = [];\n        for (let callbackUrl of this.state.callbackUrls.split('\\n')) {\n            callbackUrl = callbackUrl.trim();\n\n            if (callbackUrl.length > 0) {\n                callbackUrls.push(callbackUrl);\n            }\n        }\n\n        if (callbackUrls.length === 0) {\n            this.setState({\n                saving: false,\n                clientError: (\n                    <FormattedMessage\n                        id='add_oauth_app.callbackUrlsRequired'\n                        defaultMessage='One or more callback URLs are required.'\n                    />\n                ),\n            });\n\n            return;\n        }\n\n        const app = {\n            name: this.state.name,\n            callback_urls: callbackUrls,\n            homepage: this.state.homepage,\n            description: this.state.description,\n            is_trusted: this.state.is_trusted,\n            icon_url: this.state.icon_url,\n        };\n\n        this.props.action(app).then(() => this.setState({saving: false}));\n    }\n\n    updateName = (e) => {\n        this.setState({\n            name: e.target.value,\n        });\n    }\n\n    updateTrusted = (e) => {\n        this.setState({\n            is_trusted: e.target.value === 'true',\n        });\n    }\n\n    updateDescription = (e) => {\n        this.setState({\n            description: e.target.value,\n        });\n    }\n\n    updateHomepage = (e) => {\n        this.setState({\n            homepage: e.target.value,\n        });\n    }\n\n    updateIconUrl = (e) => {\n        this.setState({\n            has_icon: false,\n            icon_url: e.target.value,\n        });\n        this.image.src = e.target.value;\n    }\n\n    updateCallbackUrls = (e) => {\n        this.setState({\n            callbackUrls: e.target.value,\n        });\n    }\n\n    render() {\n        const headerToRender = this.props.header;\n        const footerToRender = this.props.footer;\n        const renderExtra = this.props.renderExtra;\n\n        let icon;\n        if (this.state.has_icon) {\n            icon = (\n                <div className='integration__icon'>\n                    <img\n                        alt={'integration icon'}\n                        src={this.state.icon_url}\n                    />\n                </div>\n            );\n        }\n\n        const trusted = (\n            <SystemPermissionGate permissions={[Permissions.MANAGE_SYSTEM]}>\n                <div className='form-group'>\n                    <label\n                        className='control-label col-sm-4'\n                        htmlFor='is_trusted'\n                    >\n                        <FormattedMessage\n                            id='installed_oauth_apps.trusted'\n                            defaultMessage='Is Trusted'\n                        />\n                    </label>\n                    <div className='col-md-5 col-sm-8'>\n                        <label className='radio-inline'>\n                            <input\n                                type='radio'\n                                value='true'\n                                name='is_trusted'\n                                checked={this.state.is_trusted}\n                                onChange={this.updateTrusted}\n                            />\n                            <FormattedMessage\n                                id='installed_oauth_apps.trusted.yes'\n                                defaultMessage='Yes'\n                            />\n                        </label>\n                        <label className='radio-inline'>\n                            <input\n                                type='radio'\n                                value='false'\n                                name='is_trusted'\n                                checked={!this.state.is_trusted}\n                                onChange={this.updateTrusted}\n                            />\n                            <FormattedMessage\n                                id='installed_oauth_apps.trusted.no'\n                                defaultMessage='No'\n                            />\n                        </label>\n                        <div className='form__help'>\n                            <FormattedMessage\n                                id='add_oauth_app.trusted.help'\n                                defaultMessage=\"When true, the OAuth 2.0 application is considered trusted by the Mattermost server and doesn't require the user to accept authorization. When false, an additional window will appear, asking the user to accept or deny the authorization.\"\n                            />\n                        </div>\n                    </div>\n                </div>\n            </SystemPermissionGate>\n        );\n\n        return (\n            <div className='backstage-content'>\n                <BackstageHeader>\n                    <Link to={`/${this.props.team.name}/integrations/oauth2-apps`}>\n                        <FormattedMessage\n                            id='installed_oauth_apps.header'\n                            defaultMessage='Installed OAuth2 Apps'\n                        />\n                    </Link>\n                    <FormattedMessage\n                        id={headerToRender.id}\n                        defaultMessage={headerToRender.defaultMessage}\n                    />\n                </BackstageHeader>\n                <div className='backstage-form'>\n                    {icon}\n                    <form className='form-horizontal'>\n                        {trusted}\n                        <div className='form-group'>\n                            <label\n                                className='control-label col-sm-4'\n                                htmlFor='name'\n                            >\n                                <FormattedMessage\n                                    id='installed_oauth_apps.name'\n                                    defaultMessage='Display Name'\n                                />\n                            </label>\n                            <div className='col-md-5 col-sm-8'>\n                                <input\n                                    id='name'\n                                    type='text'\n                                    maxLength='64'\n                                    className='form-control'\n                                    value={this.state.name}\n                                    onChange={this.updateName}\n                                />\n                                <div className='form__help'>\n                                    <FormattedMessage\n                                        id='add_oauth_app.name.help'\n                                        defaultMessage='Display name for your OAuth 2.0 application made of up to 64 characters.'\n                                    />\n                                </div>\n                            </div>\n                        </div>\n                        <div className='form-group'>\n                            <label\n                                className='control-label col-sm-4'\n                                htmlFor='description'\n                            >\n                                <FormattedMessage\n                                    id='installed_oauth_apps.description'\n                                    defaultMessage='Description'\n                                />\n                            </label>\n                            <div className='col-md-5 col-sm-8'>\n                                <input\n                                    id='description'\n                                    type='text'\n                                    maxLength='512'\n                                    className='form-control'\n                                    value={this.state.description}\n                                    onChange={this.updateDescription}\n                                />\n                                <div className='form__help'>\n                                    <FormattedMessage\n                                        id='add_oauth_app.description.help'\n                                        defaultMessage='Description for your OAuth 2.0 application.'\n                                    />\n                                </div>\n                            </div>\n                        </div>\n                        <div className='form-group'>\n                            <label\n                                className='control-label col-sm-4'\n                                htmlFor='homepage'\n                            >\n                                <FormattedMessage\n                                    id='installed_oauth_apps.homepage'\n                                    defaultMessage='Homepage'\n                                />\n                            </label>\n                            <div className='col-md-5 col-sm-8'>\n                                <input\n                                    id='homepage'\n                                    type='url'\n                                    maxLength='256'\n                                    className='form-control'\n                                    value={this.state.homepage}\n                                    onChange={this.updateHomepage}\n                                />\n                                <div className='form__help'>\n                                    <FormattedMessage\n                                        id='add_oauth_app.homepage.help'\n                                        defaultMessage='The URL for the homepage of the OAuth 2.0 application. Make sure you use HTTP or HTTPS in your URL depending on your server configuration.'\n                                    />\n                                </div>\n                            </div>\n                        </div>\n                        <div className='form-group'>\n                            <label\n                                className='control-label col-sm-4'\n                                htmlFor='icon_url'\n                            >\n                                <FormattedMessage\n                                    id='installed_oauth_apps.iconUrl'\n                                    defaultMessage='Icon URL'\n                                />\n                            </label>\n                            <div className='col-md-5 col-sm-8'>\n                                <input\n                                    id='icon_url'\n                                    ref='icon_url'\n                                    type='url'\n                                    maxLength='512'\n                                    className='form-control'\n                                    value={this.state.icon_url}\n                                    onChange={this.updateIconUrl}\n                                />\n                                <div className='form__help'>\n                                    <FormattedMessage\n                                        id='add_oauth_app.icon.help'\n                                        defaultMessage='The URL for the homepage of the OAuth 2.0 application. Make sure you use HTTP or HTTPS in your URL depending on your server configuration.'\n                                    />\n                                </div>\n                            </div>\n                        </div>\n                        <div className='form-group'>\n                            <label\n                                className='control-label col-sm-4'\n                                htmlFor='callbackUrls'\n                            >\n                                <FormattedMessage\n                                    id='installed_oauth_apps.callbackUrls'\n                                    defaultMessage='Callback URLs (One Per Line)'\n                                />\n                            </label>\n                            <div className='col-md-5 col-sm-8'>\n                                <textarea\n                                    id='callbackUrls'\n                                    rows='3'\n                                    maxLength='1024'\n                                    className='form-control'\n                                    value={this.state.callbackUrls}\n                                    onChange={this.updateCallbackUrls}\n                                />\n                                <div className='form__help'>\n                                    <FormattedMessage\n                                        id='add_oauth_app.callbackUrls.help'\n                                        defaultMessage='The redirect URIs to which the service will redirect users after accepting or denying authorization of your application, and which will handle authorization codes or access tokens. Must be a valid URL and start with http:// or https://.'\n                                    />\n                                </div>\n                            </div>\n                        </div>\n                        <div className='backstage-form__footer'>\n                            <FormError\n                                type='backstage'\n                                errors={[this.props.serverError, this.state.clientError]}\n                            />\n                            <Link\n                                className='btn btn-link btn-sm'\n                                to={`/${this.props.team.name}/integrations/oauth2-apps`}\n                            >\n                                <FormattedMessage\n                                    id='installed_oauth_apps.cancel'\n                                    defaultMessage='Cancel'\n                                />\n                            </Link>\n                            <SpinnerButton\n                                className='btn btn-primary'\n                                type='submit'\n                                spinning={this.state.saving}\n                                spinningText={localizeMessage(this.props.loading.id, this.props.loading.defaultMessage)}\n                                onClick={this.handleSubmit}\n                                id='saveOauthApp'\n                            >\n                                <FormattedMessage\n                                    id={footerToRender.id}\n                                    defaultMessage={footerToRender.defaultMessage}\n                                />\n                            </SpinnerButton>\n                            {renderExtra}\n                        </div>\n                    </form>\n                </div>\n            </div>\n        );\n    }\n}\n","// Copyright (c) 2015-present Mattermost, Inc. All Rights Reserved.\n// See LICENSE.txt for license information.\n\nimport PropTypes from 'prop-types';\nimport React from 'react';\n\nimport {browserHistory} from 'utils/browser_history';\nimport {t} from 'utils/i18n';\nimport AbstractOAuthApp from '../abstract_oauth_app.jsx';\n\nconst HEADER = {id: t('add_oauth_app.header'), defaultMessage: 'Add'};\nconst FOOTER = {id: t('installed_oauth_apps.save'), defaultMessage: 'Save'};\nconst LOADING = {id: t('installed_oauth_apps.saving'), defaultMessage: 'Saving...'};\n\nexport default class AddOAuthApp extends React.PureComponent {\n    static propTypes = {\n\n        /**\n        * The team data\n        */\n        team: PropTypes.object,\n\n        /**\n        * The request state for addOAuthApp action. Contains status and error\n        */\n        addOAuthAppRequest: PropTypes.object.isRequired,\n\n        actions: PropTypes.shape({\n\n            /**\n            * The function to call to add new OAuthApp\n            */\n            addOAuthApp: PropTypes.func.isRequired,\n        }).isRequired,\n    }\n\n    constructor(props) {\n        super(props);\n\n        this.state = {\n            serverError: '',\n        };\n    }\n\n    addOAuthApp = async (app) => {\n        this.setState({serverError: ''});\n\n        const {data} = await this.props.actions.addOAuthApp(app);\n        if (data) {\n            browserHistory.push(`/${this.props.team.name}/integrations/confirm?type=oauth2-apps&id=${data.id}`);\n            return;\n        }\n\n        if (this.props.addOAuthAppRequest.error) {\n            this.setState({serverError: this.props.addOAuthAppRequest.error.message});\n        }\n    }\n\n    render() {\n        return (\n            <AbstractOAuthApp\n                team={this.props.team}\n                header={HEADER}\n                footer={FOOTER}\n                loading={LOADING}\n                renderExtra={''}\n                action={this.addOAuthApp}\n                serverError={this.state.serverError}\n            />\n        );\n    }\n}\n","// Copyright (c) 2015-present Mattermost, Inc. All Rights Reserved.\n// See LICENSE.txt for license information.\n\nimport {connect} from 'react-redux';\nimport {bindActionCreators} from 'redux';\nimport {addOAuthApp} from 'mattermost-redux/actions/integrations';\n\nimport AddOAuthApp from './add_oauth_app.jsx';\n\nfunction mapStateToProps(state) {\n    return {\n        addOAuthAppRequest: state.requests.integrations.addOAuthApp,\n    };\n}\n\nfunction mapDispatchToProps(dispatch) {\n    return {\n        actions: bindActionCreators({\n            addOAuthApp,\n        }, dispatch),\n    };\n}\n\nexport default connect(mapStateToProps, mapDispatchToProps)(AddOAuthApp);\n","// Copyright (c) 2015-present Mattermost, Inc. All Rights Reserved.\n// See LICENSE.txt for license information.\n\nimport React from 'react';\nimport PropTypes from 'prop-types';\nimport {FormattedMessage} from 'react-intl';\n\nimport {browserHistory} from 'utils/browser_history';\nimport LoadingScreen from 'components/loading_screen.jsx';\nimport ConfirmModal from 'components/confirm_modal.jsx';\nimport AbstractOAuthApp from '../abstract_oauth_app.jsx';\n\nconst HEADER = {id: 'integrations.edit', defaultMessage: 'Edit'};\nconst FOOTER = {id: 'update_incoming_webhook.update', defaultMessage: 'Update'};\nconst LOADING = {id: 'update_incoming_webhook.updating', defaultMessage: 'Updating...'};\n\nexport default class EditOAuthApp extends React.PureComponent {\n    static propTypes = {\n\n        /**\n        * The current team\n        */\n        team: PropTypes.object.isRequired,\n\n        /**\n        * The id of the OAuthApp to edit\n        */\n        oauthAppId: PropTypes.string.isRequired,\n\n        /**\n        * The OAuthApp data\n        */\n        oauthApp: PropTypes.object,\n\n        actions: PropTypes.shape({\n\n            /**\n            * The function to call to get OAuthApp\n            */\n            getOAuthApp: PropTypes.func.isRequired,\n\n            /**\n            * The function to call to edit OAuthApp\n            */\n            editOAuthApp: PropTypes.func.isRequired,\n        }).isRequired,\n\n        /**\n        * Whether or not OAuth applications are enabled.\n        */\n        enableOAuthServiceProvider: PropTypes.bool,\n    }\n\n    constructor(props) {\n        super(props);\n\n        this.state = {\n            showConfirmModal: false,\n            serverError: '',\n        };\n    }\n\n    componentDidMount() {\n        if (this.props.enableOAuthServiceProvider) {\n            this.props.actions.getOAuthApp(this.props.oauthAppId);\n        }\n    }\n\n    editOAuthApp = async (app) => {\n        this.newApp = app;\n\n        if (this.props.oauthApp.id) {\n            app.id = this.props.oauthApp.id;\n        }\n\n        if (this.props.oauthApp.token) {\n            app.token = this.props.oauthApp.token;\n        }\n\n        const callbackUrlsSame = (this.props.oauthApp.callback_urls.length === app.callback_urls.length) &&\n            this.props.oauthApp.callback_urls.every((v, i) => v === app.callback_urls[i]);\n\n        if (callbackUrlsSame === false) {\n            this.handleConfirmModal();\n        } else {\n            await this.submitOAuthApp();\n        }\n    }\n\n    handleConfirmModal = () => {\n        this.setState({showConfirmModal: true});\n    }\n\n    confirmModalDismissed = () => {\n        this.setState({showConfirmModal: false});\n    }\n\n    submitOAuthApp = async () => {\n        this.setState({serverError: ''});\n\n        const {data, error} = await this.props.actions.editOAuthApp(this.newApp);\n\n        if (data) {\n            browserHistory.push(`/${this.props.team.name}/integrations/oauth2-apps`);\n            return;\n        }\n\n        this.setState({showConfirmModal: false});\n\n        if (error) {\n            this.setState({serverError: error.message});\n        }\n    }\n\n    renderExtra = () => {\n        const confirmButton = (\n            <FormattedMessage\n                id='update_command.update'\n                defaultMessage='Update'\n            />\n        );\n\n        const confirmTitle = (\n            <FormattedMessage\n                id='update_oauth_app.confirm'\n                defaultMessage='Edit OAuth 2.0 application'\n            />\n        );\n\n        const confirmMessage = (\n            <FormattedMessage\n                id='update_oauth_app.question'\n                defaultMessage='Your changes may break the existing OAuth 2.0 application. Are you sure you would like to update it?'\n            />\n        );\n\n        return (\n            <ConfirmModal\n                title={confirmTitle}\n                message={confirmMessage}\n                confirmButtonText={confirmButton}\n                show={this.state.showConfirmModal}\n                onConfirm={this.submitOAuthApp}\n                onCancel={this.confirmModalDismissed}\n            />\n        );\n    }\n\n    render() {\n        if (!this.props.oauthApp) {\n            return <LoadingScreen/>;\n        }\n\n        return (\n            <AbstractOAuthApp\n                team={this.props.team}\n                header={HEADER}\n                footer={FOOTER}\n                loading={LOADING}\n                renderExtra={this.renderExtra()}\n                action={this.editOAuthApp}\n                serverError={this.state.serverError}\n                initialApp={this.props.oauthApp}\n            />\n        );\n    }\n}\n","// Copyright (c) 2015-present Mattermost, Inc. All Rights Reserved.\n// See LICENSE.txt for license information.\n\nimport {connect} from 'react-redux';\nimport {bindActionCreators} from 'redux';\nimport {getOAuthApp, editOAuthApp} from 'mattermost-redux/actions/integrations';\nimport {getConfig} from 'mattermost-redux/selectors/entities/general';\n\nimport EditOAuthApp from './edit_oauth_app.jsx';\n\nfunction mapStateToProps(state, ownProps) {\n    const config = getConfig(state);\n    const oauthAppId = (new URLSearchParams(ownProps.location.search)).get('id');\n    const enableOAuthServiceProvider = config.EnableOAuthServiceProvider === 'true';\n\n    return {\n        oauthAppId,\n        oauthApp: state.entities.integrations.oauthApps[oauthAppId],\n        enableOAuthServiceProvider,\n    };\n}\n\nfunction mapDispatchToProps(dispatch) {\n    return {\n        actions: bindActionCreators({\n            getOAuthApp,\n            editOAuthApp,\n        }, dispatch),\n    };\n}\n\nexport default connect(mapStateToProps, mapDispatchToProps)(EditOAuthApp);\n","// Copyright (c) 2015-present Mattermost, Inc. All Rights Reserved.\n// See LICENSE.txt for license information.\n\nimport PropTypes from 'prop-types';\nimport React from 'react';\nimport {FormattedMessage} from 'react-intl';\nimport {Link} from 'react-router-dom';\n\nimport {t} from 'utils/i18n';\nimport CopyText from '../copy_text.jsx';\n\nimport DeleteIntegration from './delete_integration.jsx';\n\nexport function matchesFilter(command, filter) {\n    if (!filter) {\n        return true;\n    }\n\n    return command.display_name.toLowerCase().indexOf(filter) !== -1 ||\n        command.description.toLowerCase().indexOf(filter) !== -1 ||\n        command.trigger.toLowerCase().indexOf(filter) !== -1;\n}\n\nexport default class InstalledCommand extends React.PureComponent {\n    static propTypes = {\n\n        /**\n        * The team data\n        */\n        team: PropTypes.object.isRequired,\n\n        /**\n        * Installed slash command to display\n        */\n        command: PropTypes.object.isRequired,\n\n        /**\n        * The function to call when Regenerate Token link is clicked\n        */\n        onRegenToken: PropTypes.func.isRequired,\n\n        /**\n        * The function to call when Delete link is clicked\n        */\n        onDelete: PropTypes.func.isRequired,\n\n        /**\n        * Set to filter command, comes from BackstageList\n        */\n        filter: PropTypes.string,\n\n        /**\n        * The creator user data\n        */\n        creator: PropTypes.object.isRequired,\n\n        /**\n        * Set to show edit link\n        */\n        canChange: PropTypes.bool.isRequired,\n    }\n\n    handleRegenToken = (e) => {\n        e.preventDefault();\n\n        this.props.onRegenToken(this.props.command);\n    }\n\n    handleDelete = () => {\n        this.props.onDelete(this.props.command);\n    }\n\n    render() {\n        const command = this.props.command;\n        const filter = this.props.filter ? this.props.filter.toLowerCase() : '';\n\n        if (!matchesFilter(command, filter)) {\n            return null;\n        }\n\n        let name;\n\n        if (command.display_name) {\n            name = command.display_name;\n        } else {\n            name = (\n                <FormattedMessage\n                    id='installed_commands.unnamed_command'\n                    defaultMessage='Unnamed Slash Command'\n                />\n            );\n        }\n\n        let description = null;\n        if (command.description) {\n            description = (\n                <div className='item-details__row'>\n                    <span className='item-details__description'>\n                        {command.description}\n                    </span>\n                </div>\n            );\n        }\n\n        let trigger = '- /' + command.trigger;\n        if (command.auto_complete && command.auto_complete_hint) {\n            trigger += ' ' + command.auto_complete_hint;\n        }\n\n        let actions = null;\n        if (this.props.canChange) {\n            actions = (\n                <div className='item-actions'>\n                    <button\n                        className='style--none color--link'\n                        onClick={this.handleRegenToken}\n                    >\n                        <FormattedMessage\n                            id='installed_integrations.regenToken'\n                            defaultMessage='Regenerate Token'\n                        />\n                    </button>\n                    {' - '}\n                    <Link to={`/${this.props.team.name}/integrations/commands/edit?id=${command.id}`}>\n                        <FormattedMessage\n                            id='installed_integrations.edit'\n                            defaultMessage='Edit'\n                        />\n                    </Link>\n                    {' - '}\n                    <DeleteIntegration\n                        messageId={t('installed_commands.delete.confirm')}\n                        onDelete={this.handleDelete}\n                    />\n                </div>\n            );\n        }\n\n        const commandToken = command.token;\n\n        return (\n            <div className='backstage-list__item'>\n                <div className='item-details'>\n                    <div className='item-details__row'>\n                        <strong className='item-details__name'>\n                            {name}\n                        </strong>\n                        <span className='item-details__trigger'>\n                            {trigger}\n                        </span>\n                    </div>\n                    {description}\n                    <div className='item-details__row'>\n                        <span className='item-details__token'>\n                            <FormattedMessage\n                                id='installed_integrations.token'\n                                defaultMessage='Token: {token}'\n                                values={{\n                                    token: commandToken,\n                                }}\n                            />\n                            <CopyText\n                                value={commandToken}\n                            />\n                        </span>\n                    </div>\n                    <div className='item-details__row'>\n                        <span className='item-details__creation'>\n                            <FormattedMessage\n                                id='installed_integrations.creation'\n                                defaultMessage='Created by {creator} on {createAt, date, full}'\n                                values={{\n                                    creator: this.props.creator.username,\n                                    createAt: command.create_at,\n                                }}\n                            />\n                        </span>\n                    </div>\n                </div>\n                {actions}\n            </div>\n        );\n    }\n}\n","// Copyright (c) 2015-present Mattermost, Inc. All Rights Reserved.\n// See LICENSE.txt for license information.\n\nimport PropTypes from 'prop-types';\nimport React from 'react';\nimport {FormattedMessage} from 'react-intl';\n\nimport * as Utils from 'utils/utils.jsx';\nimport BackstageList from 'components/backstage/components/backstage_list.jsx';\nimport InstalledCommand, {matchesFilter} from '../installed_command.jsx';\nimport FormattedMarkdownMessage from 'components/formatted_markdown_message';\n\nexport default class InstalledCommands extends React.PureComponent {\n    static propTypes = {\n\n        /**\n        * The team object\n        */\n        team: PropTypes.object,\n\n        /**\n        * The user object\n        */\n        user: PropTypes.object,\n\n        /**\n        * The users collection\n        */\n        users: PropTypes.object,\n\n        /**\n        * Installed slash commands to display\n        */\n        commands: PropTypes.array,\n\n        /**\n        * Set whether to show the loading... animation or not\n        */\n        loading: PropTypes.bool,\n\n        /**\n        * Set to allow changes to installed slash commands\n        */\n        canManageOthersSlashCommands: PropTypes.bool,\n\n        actions: PropTypes.shape({\n\n            /**\n            * The function to call when Regenerate Token link is clicked\n            */\n            regenCommandToken: PropTypes.func.isRequired,\n\n            /**\n            * The function to call when Delete link is clicked\n            */\n            deleteCommand: PropTypes.func.isRequired,\n        }).isRequired,\n    }\n\n    regenCommandToken = (command) => {\n        this.props.actions.regenCommandToken(command.id);\n    }\n\n    deleteCommand = (command) => {\n        this.props.actions.deleteCommand(command.id);\n    }\n\n    commandCompare(a, b) {\n        let nameA = a.display_name;\n        if (!nameA) {\n            nameA = Utils.localizeMessage('installed_commands.unnamed_command', 'Unnamed Slash Command');\n        }\n\n        let nameB = b.display_name;\n        if (!nameB) {\n            nameB = Utils.localizeMessage('installed_commands.unnamed_command', 'Unnamed Slash Command');\n        }\n\n        return nameA.localeCompare(nameB);\n    }\n\n    render() {\n        const commands = (filter) => this.props.commands.\n            filter((command) => command.team_id === this.props.team.id).\n            filter((command) => matchesFilter(command, filter)).\n            sort(this.commandCompare).map((command) => {\n                const canChange = this.props.canManageOthersSlashCommands || this.props.user.id === command.creator_id;\n\n                return (\n                    <InstalledCommand\n                        key={command.id}\n                        team={this.props.team}\n                        command={command}\n                        onRegenToken={this.regenCommandToken}\n                        onDelete={this.deleteCommand}\n                        creator={this.props.users[command.creator_id] || {}}\n                        canChange={canChange}\n                    />\n                );\n            });\n\n        return (\n            <BackstageList\n                header={\n                    <FormattedMessage\n                        id='installed_commands.header'\n                        defaultMessage='Installed Slash Commands'\n                    />\n                }\n                addText={\n                    <FormattedMessage\n                        id='installed_commands.add'\n                        defaultMessage='Add Slash Command'\n                    />\n                }\n                addLink={'/' + this.props.team.name + '/integrations/commands/add'}\n                addButtonId='addSlashCommand'\n                emptyText={\n                    <FormattedMessage\n                        id='installed_commands.empty'\n                        defaultMessage='No slash commands found'\n                    />\n                }\n                emptyTextSearch={\n                    <FormattedMarkdownMessage\n                        id='installed_commands.emptySearch'\n                        defaultMessage='No slash commands match {searchTerm}'\n                    />\n                }\n                helpText={\n                    <FormattedMessage\n                        id='installed_commands.help'\n                        defaultMessage='Use slash commands to connect external tools to Mattermost. {buildYourOwn} or visit the {appDirectory} to find self-hosted, third-party apps and integrations.'\n                        values={{\n                            buildYourOwn: (\n                                <a\n                                    target='_blank'\n                                    rel='noopener noreferrer'\n                                    href='http://docs.mattermost.com/developer/slash-commands.html'\n                                >\n                                    <FormattedMessage\n                                        id='installed_commands.help.buildYourOwn'\n                                        defaultMessage='Build your own'\n                                    />\n                                </a>\n                            ),\n                            appDirectory: (\n                                <a\n                                    target='_blank'\n                                    rel='noopener noreferrer'\n                                    href='https://about.mattermost.com/default-app-directory/'\n                                >\n                                    <FormattedMessage\n                                        id='installed_commands.help.appDirectory'\n                                        defaultMessage='App Directory'\n                                    />\n                                </a>\n                            ),\n                        }}\n                    />\n                }\n                searchPlaceholder={Utils.localizeMessage('installed_commands.search', 'Search Slash Commands')}\n                loading={this.props.loading}\n            >\n                {(filter) => {\n                    const children = commands(filter);\n                    return [children, children.length > 0];\n                }}\n            </BackstageList>\n        );\n    }\n}\n","// Copyright (c) 2015-present Mattermost, Inc. All Rights Reserved.\n// See LICENSE.txt for license information.\n\nimport {connect} from 'react-redux';\nimport {bindActionCreators} from 'redux';\nimport {deleteCommand, regenCommandToken} from 'mattermost-redux/actions/integrations';\nimport {haveITeamPermission} from 'mattermost-redux/selectors/entities/roles';\nimport {Permissions} from 'mattermost-redux/constants';\n\nimport InstalledCommands from './installed_commands.jsx';\n\nfunction mapStateToProps(state, ownProps) {\n    const canManageOthersSlashCommands = haveITeamPermission(state, {team: ownProps.team.id, permission: Permissions.MANAGE_OTHERS_SLASH_COMMANDS});\n\n    return {\n        canManageOthersSlashCommands,\n    };\n}\n\nfunction mapDispatchToProps(dispatch) {\n    return {\n        actions: bindActionCreators({\n            regenCommandToken,\n            deleteCommand,\n        }, dispatch),\n    };\n}\n\nexport default connect(mapStateToProps, mapDispatchToProps)(InstalledCommands);\n","// Copyright (c) 2015-present Mattermost, Inc. All Rights Reserved.\n// See LICENSE.txt for license information.\n\nimport React from 'react';\nimport PropTypes from 'prop-types';\nimport {FormattedMessage} from 'react-intl';\nimport {Link} from 'react-router-dom';\n\nimport BackstageHeader from 'components/backstage/components/backstage_header.jsx';\nimport Constants from 'utils/constants.jsx';\nimport * as Utils from 'utils/utils.jsx';\nimport FormError from 'components/form_error.jsx';\nimport SpinnerButton from 'components/spinner_button.jsx';\nimport LocalizedInput from 'components/localized_input/localized_input';\n\nimport {t} from 'utils/i18n.jsx';\n\nconst REQUEST_POST = 'P';\nconst REQUEST_GET = 'G';\n\nexport default class AbstractCommand extends React.PureComponent {\n    static propTypes = {\n\n        /**\n        * The current team\n        */\n        team: PropTypes.object.isRequired,\n\n        /**\n        * The header text to render, has id and defaultMessage\n        */\n        header: PropTypes.object.isRequired,\n\n        /**\n        * The footer text to render, has id and defaultMessage\n        */\n        footer: PropTypes.object.isRequired,\n\n        /**\n        * The spinner loading text to render, has id and defaultMessage\n        */\n        loading: PropTypes.object.isRequired,\n\n        /**\n         * Any extra component/node to render\n         */\n        renderExtra: PropTypes.node.isRequired,\n\n        /**\n        * The server error text after a failed action\n        */\n        serverError: PropTypes.string.isRequired,\n\n        /**\n        * The Command used to set the initial state\n        */\n        initialCommand: PropTypes.object,\n\n        /**\n        * The async function to run when the action button is pressed\n        */\n        action: PropTypes.func.isRequired,\n    }\n\n    constructor(props) {\n        super(props);\n\n        this.state = this.getStateFromCommand(this.props.initialCommand || {});\n    }\n\n    getStateFromCommand = (command) => {\n        return {\n            displayName: command.display_name || '',\n            description: command.description || '',\n            trigger: command.trigger || '',\n            url: command.url || '',\n            method: command.method || REQUEST_POST,\n            username: command.username || '',\n            iconUrl: command.icon_url || '',\n            autocomplete: command.auto_complete || false,\n            autocompleteHint: command.auto_complete_hint || '',\n            autocompleteDescription: command.auto_complete_desc || '',\n            saving: false,\n            clientError: null,\n        };\n    }\n\n    handleSubmit = (e) => {\n        e.preventDefault();\n\n        if (this.state.saving) {\n            return;\n        }\n\n        this.setState({\n            saving: true,\n            clientError: '',\n        });\n\n        let triggerWord = this.state.trigger.trim().toLowerCase();\n        if (triggerWord.indexOf('/') === 0) {\n            triggerWord = triggerWord.substr(1);\n        }\n\n        const command = {\n            display_name: this.state.displayName,\n            description: this.state.description,\n            trigger: triggerWord,\n            url: this.state.url.trim(),\n            method: this.state.method,\n            username: this.state.username,\n            icon_url: this.state.iconUrl,\n            auto_complete: this.state.autocomplete,\n            team_id: this.props.team.id,\n        };\n\n        if (command.auto_complete) {\n            command.auto_complete_desc = this.state.autocompleteDescription;\n            command.auto_complete_hint = this.state.autocompleteHint;\n        }\n\n        if (!command.trigger) {\n            this.setState({\n                saving: false,\n                clientError: (\n                    <FormattedMessage\n                        id='add_command.triggerRequired'\n                        defaultMessage='A trigger word is required'\n                    />\n                ),\n            });\n\n            return;\n        }\n\n        if (command.trigger.indexOf('/') === 0) {\n            this.setState({\n                saving: false,\n                clientError: (\n                    <FormattedMessage\n                        id='add_command.triggerInvalidSlash'\n                        defaultMessage='A trigger word cannot begin with a /'\n                    />\n                ),\n            });\n\n            return;\n        }\n\n        if (command.trigger.indexOf(' ') !== -1) {\n            this.setState({\n                saving: false,\n                clientError: (\n                    <FormattedMessage\n                        id='add_command.triggerInvalidSpace'\n                        defaultMessage='A trigger word must not contain spaces'\n                    />\n                ),\n            });\n            return;\n        }\n\n        if (command.trigger.length < Constants.MIN_TRIGGER_LENGTH ||\n            command.trigger.length > Constants.MAX_TRIGGER_LENGTH) {\n            this.setState({\n                saving: false,\n                clientError: (\n                    <FormattedMessage\n                        id='add_command.triggerInvalidLength'\n                        defaultMessage='A trigger word must contain between {min} and {max} characters'\n                        values={{\n                            min: Constants.MIN_TRIGGER_LENGTH,\n                            max: Constants.MAX_TRIGGER_LENGTH,\n                        }}\n                    />\n                ),\n            });\n\n            return;\n        }\n\n        if (!command.url) {\n            this.setState({\n                saving: false,\n                clientError: (\n                    <FormattedMessage\n                        id='add_command.urlRequired'\n                        defaultMessage='A request URL is required'\n                    />\n                ),\n            });\n\n            return;\n        }\n\n        this.props.action(command).then(() => this.setState({saving: false}));\n    }\n\n    updateDisplayName = (e) => {\n        this.setState({\n            displayName: e.target.value,\n        });\n    }\n\n    updateDescription = (e) => {\n        this.setState({\n            description: e.target.value,\n        });\n    }\n\n    updateTrigger = (e) => {\n        this.setState({\n            trigger: e.target.value,\n        });\n    }\n\n    updateUrl = (e) => {\n        this.setState({\n            url: e.target.value,\n        });\n    }\n\n    updateMethod = (e) => {\n        this.setState({\n            method: e.target.value,\n        });\n    }\n\n    updateUsername = (e) => {\n        this.setState({\n            username: e.target.value,\n        });\n    }\n\n    updateIconUrl = (e) => {\n        this.setState({\n            iconUrl: e.target.value,\n        });\n    }\n\n    updateAutocomplete = (e) => {\n        this.setState({\n            autocomplete: e.target.checked,\n        });\n    }\n\n    updateAutocompleteHint = (e) => {\n        this.setState({\n            autocompleteHint: e.target.value,\n        });\n    }\n\n    updateAutocompleteDescription = (e) => {\n        this.setState({\n            autocompleteDescription: e.target.value,\n        });\n    }\n\n    render() {\n        let autocompleteHint = null;\n        let autocompleteDescription = null;\n\n        if (this.state.autocomplete) {\n            autocompleteHint = (\n                <div className='form-group'>\n                    <label\n                        className='control-label col-sm-4'\n                        htmlFor='autocompleteHint'\n                    >\n                        <FormattedMessage\n                            id='add_command.autocompleteHint'\n                            defaultMessage='Autocomplete Hint'\n                        />\n                    </label>\n                    <div className='col-md-5 col-sm-8'>\n                        <LocalizedInput\n                            id='autocompleteHint'\n                            type='text'\n                            maxLength='1024'\n                            className='form-control'\n                            value={this.state.autocompleteHint}\n                            onChange={this.updateAutocompleteHint}\n                            placeholder={{id: t('add_command.autocompleteHint.placeholder'), defaultMessage: 'Example: [Patient Name]'}}\n                        />\n                        <div className='form__help'>\n                            <FormattedMessage\n                                id='add_command.autocompleteHint.help'\n                                defaultMessage='(Optional) Arguments associated with your slash command, displayed as help in the autocomplete list.'\n                            />\n                        </div>\n                    </div>\n                </div>\n            );\n\n            autocompleteDescription = (\n                <div className='form-group'>\n                    <label\n                        className='control-label col-sm-4'\n                        htmlFor='autocompleteDescription'\n                    >\n                        <FormattedMessage\n                            id='add_command.autocompleteDescription'\n                            defaultMessage='Autocomplete Description'\n                        />\n                    </label>\n                    <div className='col-md-5 col-sm-8'>\n                        <LocalizedInput\n                            id='description'\n                            type='text'\n                            maxLength='128'\n                            className='form-control'\n                            value={this.state.autocompleteDescription}\n                            onChange={this.updateAutocompleteDescription}\n                            placeholder={{id: t('add_command.autocompleteDescription.placeholder'), defaultMessage: 'Example: \"Returns search results for patient records\"'}}\n                        />\n                        <div className='form__help'>\n                            <FormattedMessage\n                                id='add_command.autocompleteDescription.help'\n                                defaultMessage='(Optional) Short description of slash command for the autocomplete list.'\n                            />\n                        </div>\n                    </div>\n                </div>\n            );\n        }\n\n        return (\n            <div className='backstage-content row'>\n                <BackstageHeader>\n                    <Link to={'/' + this.props.team.name + '/integrations/commands'}>\n                        <FormattedMessage\n                            id='installed_command.header'\n                            defaultMessage='Slash Commands'\n                        />\n                    </Link>\n                    <FormattedMessage\n                        id={this.props.header.id}\n                        defaultMessage={this.props.header.defaultMessage}\n                    />\n                </BackstageHeader>\n                <div className='backstage-form'>\n                    <form\n                        className='form-horizontal'\n                        onSubmit={this.handleSubmit}\n                    >\n                        <div className='form-group'>\n                            <label\n                                className='control-label col-sm-4'\n                                htmlFor='displayName'\n                            >\n                                <FormattedMessage\n                                    id='add_command.displayName'\n                                    defaultMessage='Title'\n                                />\n                            </label>\n                            <div className='col-md-5 col-sm-8'>\n                                <input\n                                    id='displayName'\n                                    type='text'\n                                    maxLength='64'\n                                    className='form-control'\n                                    value={this.state.displayName}\n                                    onChange={this.updateDisplayName}\n                                />\n                                <div className='form__help'>\n                                    <FormattedMessage\n                                        id='add_command.displayName.help'\n                                        defaultMessage='Choose a title to be displayed on the slash command settings page. Maximum 64 characters.'\n                                    />\n                                </div>\n                            </div>\n                        </div>\n                        <div className='form-group'>\n                            <label\n                                className='control-label col-sm-4'\n                                htmlFor='description'\n                            >\n                                <FormattedMessage\n                                    id='add_command.description'\n                                    defaultMessage='Description'\n                                />\n                            </label>\n                            <div className='col-md-5 col-sm-8'>\n                                <input\n                                    id='description'\n                                    type='text'\n                                    maxLength='128'\n                                    className='form-control'\n                                    value={this.state.description}\n                                    onChange={this.updateDescription}\n                                />\n                                <div className='form__help'>\n                                    <FormattedMessage\n                                        id='add_command.description.help'\n                                        defaultMessage='Description for your incoming webhook.'\n                                    />\n                                </div>\n                            </div>\n                        </div>\n                        <div className='form-group'>\n                            <label\n                                className='control-label col-sm-4'\n                                htmlFor='trigger'\n                            >\n                                <FormattedMessage\n                                    id='add_command.trigger'\n                                    defaultMessage='Command Trigger Word'\n                                />\n                            </label>\n                            <div className='col-md-5 col-sm-8'>\n                                <LocalizedInput\n                                    id='trigger'\n                                    type='text'\n                                    maxLength={Constants.MAX_TRIGGER_LENGTH}\n                                    className='form-control'\n                                    value={this.state.trigger}\n                                    onChange={this.updateTrigger}\n                                    placeholder={{id: t('add_command.trigger.placeholder'), defaultMessage: 'Command trigger e.g. \"hello\" not including the slash'}}\n                                />\n                                <div className='form__help'>\n                                    <FormattedMessage\n                                        id='add_command.trigger.help'\n                                        defaultMessage='Trigger word must be unique, and cannot begin with a slash or contain any spaces.'\n                                    />\n                                </div>\n                                <div className='form__help'>\n                                    <FormattedMessage\n                                        id='add_command.trigger.helpExamples'\n                                        defaultMessage='Examples: client, employee, patient, weather'\n                                    />\n                                </div>\n                                <div className='form__help'>\n                                    <FormattedMessage\n                                        id='add_command.trigger.helpReserved'\n                                        defaultMessage='Reserved: {link}'\n                                        values={{\n                                            link: (\n                                                <a\n                                                    href='https://docs.mattermost.com/help/messaging/executing-commands.html#built-in-commands'\n                                                    target='_blank'\n                                                    rel='noopener noreferrer'\n                                                >\n                                                    <FormattedMessage\n                                                        id='add_command.trigger.helpReservedLinkText'\n                                                        defaultMessage='see list of built-in slash commands'\n                                                    />\n                                                </a>\n                                            ),\n                                        }}\n                                    />\n                                </div>\n                            </div>\n                        </div>\n                        <div className='form-group'>\n                            <label\n                                className='control-label col-sm-4'\n                                htmlFor='url'\n                            >\n                                <FormattedMessage\n                                    id='add_command.url'\n                                    defaultMessage='Request URL'\n                                />\n                            </label>\n                            <div className='col-md-5 col-sm-8'>\n                                <LocalizedInput\n                                    id='url'\n                                    type='text'\n                                    maxLength='1024'\n                                    className='form-control'\n                                    value={this.state.url}\n                                    onChange={this.updateUrl}\n                                    placeholder={{id: t('add_command.url.placeholder'), defaultMessage: 'Must start with http:// or https://'}}\n                                />\n                                <div className='form__help'>\n                                    <FormattedMessage\n                                        id='add_command.url.help'\n                                        defaultMessage='The callback URL to receive the HTTP POST or GET event request when the slash command is run.'\n                                    />\n                                </div>\n                            </div>\n                        </div>\n                        <div className='form-group'>\n                            <label\n                                className='control-label col-sm-4'\n                                htmlFor='method'\n                            >\n                                <FormattedMessage\n                                    id='add_command.method'\n                                    defaultMessage='Request Method'\n                                />\n                            </label>\n                            <div className='col-md-5 col-sm-8'>\n                                <select\n                                    id='method'\n                                    className='form-control'\n                                    value={this.state.method}\n                                    onChange={this.updateMethod}\n                                >\n                                    <option value={REQUEST_POST}>\n                                        {Utils.localizeMessage('add_command.method.post', 'POST')}\n                                    </option>\n                                    <option value={REQUEST_GET}>\n                                        {Utils.localizeMessage('add_command.method.get', 'GET')}\n                                    </option>\n                                </select>\n                                <div className='form__help'>\n                                    <FormattedMessage\n                                        id='add_command.method.help'\n                                        defaultMessage='The type of command request issued to the Request URL.'\n                                    />\n                                </div>\n                            </div>\n                        </div>\n                        <div className='form-group'>\n                            <label\n                                className='control-label col-sm-4'\n                                htmlFor='username'\n                            >\n                                <FormattedMessage\n                                    id='add_command.username'\n                                    defaultMessage='Response Username'\n                                />\n                            </label>\n                            <div className='col-md-5 col-sm-8'>\n                                <LocalizedInput\n                                    id='username'\n                                    type='text'\n                                    maxLength='64'\n                                    className='form-control'\n                                    value={this.state.username}\n                                    onChange={this.updateUsername}\n                                    placeholder={{id: t('add_command.username.placeholder'), defaultMessage: 'Username'}}\n                                />\n                                <div className='form__help'>\n                                    <FormattedMessage\n                                        id='add_command.username.help'\n                                        defaultMessage='(Optional) Choose a username override for responses for this slash command. Usernames can consist of up to 22 characters consisting of lowercase letters, numbers and they symbols \"-\", \"_\", and \".\" .'\n                                    />\n                                </div>\n                            </div>\n                        </div>\n                        <div className='form-group'>\n                            <label\n                                className='control-label col-sm-4'\n                                htmlFor='iconUrl'\n                            >\n                                <FormattedMessage\n                                    id='add_command.iconUrl'\n                                    defaultMessage='Response Icon'\n                                />\n                            </label>\n                            <div className='col-md-5 col-sm-8'>\n                                <LocalizedInput\n                                    id='iconUrl'\n                                    type='text'\n                                    maxLength='1024'\n                                    className='form-control'\n                                    value={this.state.iconUrl}\n                                    onChange={this.updateIconUrl}\n                                    placeholder={{id: t('add_command.iconUrl.placeholder'), defaultMessage: 'https://www.example.com/myicon.png'}}\n                                />\n                                <div className='form__help'>\n                                    <FormattedMessage\n                                        id='add_command.iconUrl.help'\n                                        defaultMessage='(Optional) Choose a profile picture override for the post responses to this slash command. Enter the URL of a .png or .jpg file at least 128 pixels by 128 pixels.'\n                                    />\n                                </div>\n                            </div>\n                        </div>\n                        <div className='form-group'>\n                            <label\n                                className='control-label col-sm-4'\n                                htmlFor='autocomplete'\n                            >\n                                <FormattedMessage\n                                    id='add_command.autocomplete'\n                                    defaultMessage='Autocomplete'\n                                />\n                            </label>\n                            <div className='col-md-5 col-sm-8 checkbox'>\n                                <input\n                                    id='autocomplete'\n                                    type='checkbox'\n                                    checked={this.state.autocomplete}\n                                    onChange={this.updateAutocomplete}\n                                />\n                                <div className='form__help'>\n                                    <FormattedMessage\n                                        id='add_command.autocomplete.help'\n                                        defaultMessage='(Optional) Show slash command in autocomplete list.'\n                                    />\n                                </div>\n                            </div>\n                        </div>\n                        {autocompleteHint}\n                        {autocompleteDescription}\n                        <div className='backstage-form__footer'>\n                            <FormError\n                                type='backstage'\n                                errors={[this.props.serverError, this.state.clientError]}\n                            />\n                            <Link\n                                className='btn btn-link btn-sm'\n                                to={'/' + this.props.team.name + '/integrations/commands'}\n                            >\n                                <FormattedMessage\n                                    id='add_command.cancel'\n                                    defaultMessage='Cancel'\n                                />\n                            </Link>\n                            <SpinnerButton\n                                className='btn btn-primary'\n                                type='submit'\n                                spinning={this.state.saving}\n                                spinningText={Utils.localizeMessage(this.props.loading.id, this.props.loading.defaultMessage)}\n                                onClick={this.handleSubmit}\n                                id='saveCommand'\n                            >\n                                <FormattedMessage\n                                    id={this.props.footer.id}\n                                    defaultMessage={this.props.footer.defaultMessage}\n                                />\n                            </SpinnerButton>\n                            {this.props.renderExtra}\n                        </div>\n                    </form>\n                </div>\n            </div>\n        );\n    }\n}\n","// Copyright (c) 2015-present Mattermost, Inc. All Rights Reserved.\n// See LICENSE.txt for license information.\n\nimport PropTypes from 'prop-types';\nimport React from 'react';\n\nimport {browserHistory} from 'utils/browser_history';\nimport {t} from 'utils/i18n';\nimport AbstractCommand from '../abstract_command.jsx';\n\nconst HEADER = {id: t('integrations.add'), defaultMessage: 'Add'};\nconst FOOTER = {id: t('add_command.save'), defaultMessage: 'Save'};\nconst LOADING = {id: t('add_command.saving'), defaultMessage: 'Saving...'};\n\nexport default class AddCommand extends React.PureComponent {\n    static propTypes = {\n\n        /**\n        * The team data\n        */\n        team: PropTypes.object,\n\n        actions: PropTypes.shape({\n\n            /**\n            * The function to call to add new command\n            */\n            addCommand: PropTypes.func.isRequired,\n        }).isRequired,\n    }\n\n    constructor(props) {\n        super(props);\n\n        this.state = {\n            serverError: '',\n        };\n    }\n\n    addCommand = async (command) => {\n        this.setState({serverError: ''});\n\n        const {data, error} = await this.props.actions.addCommand(command);\n        if (data) {\n            browserHistory.push(`/${this.props.team.name}/integrations/commands/confirm?type=commands&id=${data.id}`);\n            return;\n        }\n\n        if (error) {\n            this.setState({serverError: error.message});\n        }\n    }\n\n    render() {\n        return (\n            <AbstractCommand\n                team={this.props.team}\n                header={HEADER}\n                footer={FOOTER}\n                loading={LOADING}\n                renderExtra={''}\n                action={this.addCommand}\n                serverError={this.state.serverError}\n            />\n        );\n    }\n}\n","// Copyright (c) 2015-present Mattermost, Inc. All Rights Reserved.\n// See LICENSE.txt for license information.\n\nimport {connect} from 'react-redux';\nimport {bindActionCreators} from 'redux';\nimport {addCommand} from 'mattermost-redux/actions/integrations';\n\nimport AddCommand from './add_command.jsx';\n\nfunction mapDispatchToProps(dispatch) {\n    return {\n        actions: bindActionCreators({\n            addCommand,\n        }, dispatch),\n    };\n}\n\nexport default connect(null, mapDispatchToProps)(AddCommand);\n","// Copyright (c) 2015-present Mattermost, Inc. All Rights Reserved.\n// See LICENSE.txt for license information.\n\nimport PropTypes from 'prop-types';\nimport React from 'react';\nimport {FormattedMessage} from 'react-intl';\n\nimport {browserHistory} from 'utils/browser_history';\nimport {t} from 'utils/i18n';\nimport LoadingScreen from 'components/loading_screen.jsx';\nimport ConfirmModal from 'components/confirm_modal.jsx';\nimport AbstractCommand from '../abstract_command.jsx';\n\nconst HEADER = {id: t('integrations.edit'), defaultMessage: 'Edit'};\nconst FOOTER = {id: t('edit_command.update'), defaultMessage: 'Update'};\nconst LOADING = {id: t('edit_command.updating'), defaultMessage: 'Updating...'};\n\nexport default class EditCommand extends React.PureComponent {\n    static propTypes = {\n\n        /**\n        * The current team\n        */\n        team: PropTypes.object.isRequired,\n\n        /**\n        * The id of the command to edit\n        */\n        commandId: PropTypes.string.isRequired,\n\n        /**\n        * Installed slash commands to display\n        */\n        commands: PropTypes.object,\n\n        actions: PropTypes.shape({\n\n            /**\n            * The function to call to fetch team commands\n            */\n            getCustomTeamCommands: PropTypes.func.isRequired,\n\n            /**\n            * The function to call to edit command\n            */\n            editCommand: PropTypes.func.isRequired,\n        }).isRequired,\n\n        /**\n        * Whether or not commands are enabled.\n        */\n        enableCommands: PropTypes.bool,\n    }\n\n    constructor(props) {\n        super(props);\n\n        this.state = {\n            originalCommand: null,\n            showConfirmModal: false,\n            serverError: '',\n        };\n    }\n\n    componentDidMount() {\n        if (this.props.enableCommands) {\n            this.props.actions.getCustomTeamCommands(this.props.team.id).then(\n                () => {\n                    this.setState({\n                        originalCommand: Object.values(this.props.commands).filter((command) => command.id === this.props.commandId)[0],\n                    });\n                }\n            );\n        }\n    }\n\n    editCommand = async (command) => {\n        this.newCommand = command;\n\n        if (this.state.originalCommand.id) {\n            command.id = this.state.originalCommand.id;\n        }\n\n        if (this.state.originalCommand.url !== this.newCommand.url ||\n            this.state.originalCommand.trigger !== this.newCommand.trigger ||\n            this.state.originalCommand.method !== this.newCommand.method) {\n            this.handleConfirmModal();\n        } else {\n            await this.submitCommand();\n        }\n    }\n\n    handleConfirmModal = () => {\n        this.setState({showConfirmModal: true});\n    }\n\n    confirmModalDismissed = () => {\n        this.setState({showConfirmModal: false});\n    }\n\n    submitCommand = async () => {\n        this.setState({serverError: ''});\n\n        const {data, error} = await this.props.actions.editCommand(this.newCommand);\n\n        if (data) {\n            browserHistory.push(`/${this.props.team.name}/integrations/commands`);\n            return;\n        }\n\n        this.setState({showConfirmModal: false});\n\n        if (error) {\n            this.setState({serverError: error.message});\n        }\n    }\n\n    renderExtra = () => {\n        const confirmButton = (\n            <FormattedMessage\n                id='update_command.update'\n                defaultMessage='Update'\n            />\n        );\n\n        const confirmTitle = (\n            <FormattedMessage\n                id='update_command.confirm'\n                defaultMessage='Edit Slash Command'\n            />\n        );\n\n        const confirmMessage = (\n            <FormattedMessage\n                id='update_command.question'\n                defaultMessage='Your changes may break the existing slash command. Are you sure you would like to update it?'\n            />\n        );\n\n        return (\n            <ConfirmModal\n                title={confirmTitle}\n                message={confirmMessage}\n                confirmButtonText={confirmButton}\n                show={this.state.showConfirmModal}\n                onConfirm={this.submitCommand}\n                onCancel={this.confirmModalDismissed}\n            />\n        );\n    }\n\n    render() {\n        if (!this.state.originalCommand) {\n            return <LoadingScreen/>;\n        }\n\n        return (\n            <AbstractCommand\n                team={this.props.team}\n                header={HEADER}\n                footer={FOOTER}\n                loading={LOADING}\n                renderExtra={this.renderExtra()}\n                action={this.editCommand}\n                serverError={this.state.serverError}\n                initialCommand={this.state.originalCommand}\n            />\n        );\n    }\n}\n","// Copyright (c) 2015-present Mattermost, Inc. All Rights Reserved.\n// See LICENSE.txt for license information.\n\nimport {connect} from 'react-redux';\nimport {bindActionCreators} from 'redux';\nimport {editCommand, getCustomTeamCommands} from 'mattermost-redux/actions/integrations';\nimport {getCommands} from 'mattermost-redux/selectors/entities/integrations';\nimport {getConfig} from 'mattermost-redux/selectors/entities/general';\n\nimport EditCommand from './edit_command.jsx';\n\nfunction mapStateToProps(state, ownProps) {\n    const config = getConfig(state);\n    const commandId = (new URLSearchParams(ownProps.location.search)).get('id');\n    const enableCommands = config.EnableCommands === 'true';\n\n    return {\n        commandId,\n        commands: getCommands(state),\n        enableCommands,\n    };\n}\n\nfunction mapDispatchToProps(dispatch) {\n    return {\n        actions: bindActionCreators({\n            getCustomTeamCommands,\n            editCommand,\n        }, dispatch),\n    };\n}\n\nexport default connect(mapStateToProps, mapDispatchToProps)(EditCommand);\n","// Copyright (c) 2015-present Mattermost, Inc. All Rights Reserved.\n// See LICENSE.txt for license information.\n\nimport PropTypes from 'prop-types';\nimport React from 'react';\nimport {FormattedMessage} from 'react-intl';\nimport {Link} from 'react-router-dom';\n\nimport {browserHistory} from 'utils/browser_history';\nimport {Constants, ErrorPageTypes} from 'utils/constants.jsx';\nimport CopyText from 'components/copy_text.jsx';\nimport BackstageHeader from 'components/backstage/components/backstage_header.jsx';\nimport {getSiteURL} from 'utils/url.jsx';\nimport FormattedMarkdownMessage from 'components/formatted_markdown_message';\n\nexport default class ConfirmIntegration extends React.Component {\n    static get propTypes() {\n        return {\n            team: PropTypes.object,\n            location: PropTypes.object,\n            commands: PropTypes.object,\n            oauthApps: PropTypes.object,\n            incomingHooks: PropTypes.object,\n            outgoingHooks: PropTypes.object,\n            bots: PropTypes.object,\n        };\n    }\n\n    constructor(props) {\n        super(props);\n        this.state = {\n            type: (new URLSearchParams(this.props.location.search)).get('type'),\n            id: (new URLSearchParams(this.props.location.search)).get('id'),\n        };\n    }\n\n    componentDidMount() {\n        window.addEventListener('keypress', this.handleKeyPress);\n    }\n\n    componentWillUnmount() {\n        window.removeEventListener('keypress', this.handleKeyPress);\n    }\n\n    handleKeyPress = (e) => {\n        if (e.key === 'Enter') {\n            browserHistory.push('/' + this.props.team.name + '/integrations/' + this.state.type);\n        }\n    }\n\n    render() {\n        let headerText = null;\n        let helpText = null;\n        let tokenText = null;\n\n        const command = this.props.commands[this.state.id];\n        const incomingHook = this.props.incomingHooks[this.state.id];\n        const outgoingHook = this.props.outgoingHooks[this.state.id];\n        const oauthApp = this.props.oauthApps[this.state.id];\n        const bot = this.props.bots[this.state.id];\n\n        if (this.state.type === Constants.Integrations.COMMAND && command) {\n            const commandToken = command.token;\n\n            headerText = (\n                <FormattedMessage\n                    id={'installed_commands.header'}\n                    defaultMessage='Slash Commands'\n                />\n            );\n            helpText = (\n                <p>\n                    <FormattedMarkdownMessage\n                        id='add_command.doneHelp'\n                        defaultMessage='Your slash command has been set up. The following token will be sent in the outgoing payload. Please use it to verify the request came from your Mattermost team (see [documentation](!https://docs.mattermost.com/developer/slash-commands.html) for further details).'\n                    />\n                </p>\n            );\n            tokenText = (\n                <p className='word-break--all'>\n                    <FormattedMarkdownMessage\n                        id='add_command.token'\n                        defaultMessage='**Token**: {token}'\n                        values={{\n                            token: commandToken,\n                        }}\n                    />\n                    <CopyText\n                        value={commandToken}\n                    />\n                </p>\n            );\n        } else if (this.state.type === Constants.Integrations.INCOMING_WEBHOOK && incomingHook) {\n            const incomingHookToken = getSiteURL() + '/hooks/' + incomingHook.id;\n\n            headerText = (\n                <FormattedMessage\n                    id={'installed_incoming_webhooks.header'}\n                    defaultMessage='Incoming Webhooks'\n                />\n            );\n            helpText = (\n                <p>\n                    <FormattedMarkdownMessage\n                        id='add_incoming_webhook.doneHelp'\n                        defaultMessage='Your incoming webhook has been set up. Please send data to the following URL (see [documentation](!https://docs.mattermost.com/developer/webhooks-incoming.html) for further details).'\n                    />\n                </p>\n            );\n            tokenText = (\n                <p className='word-break--all'>\n                    <FormattedMarkdownMessage\n                        id='add_incoming_webhook.url'\n                        defaultMessage='**URL**: {url}'\n                        values={{\n                            url: '`' + incomingHookToken + '`',\n                        }}\n                    />\n                    <CopyText\n                        idMessage='integrations.copy_client_secret'\n                        defaultMessage='Copy Client Secret'\n                        value={incomingHookToken}\n                    />\n                </p>\n            );\n        } else if (this.state.type === Constants.Integrations.OUTGOING_WEBHOOK && outgoingHook) {\n            const outgoingHookToken = outgoingHook.token;\n\n            headerText = (\n                <FormattedMessage\n                    id={'installed_outgoing_webhooks.header'}\n                    defaultMessage='Outgoing Webhooks'\n                />\n            );\n            helpText = (\n                <p>\n                    <FormattedMarkdownMessage\n                        id='add_outgoing_webhook.doneHelp'\n                        defaultMessage='Your outgoing webhook has been set up. The following token will be sent in the outgoing payload. Please use it to verify the request came from your Mattermost team (see [documentation](!https://docs.mattermost.com/developer/webhooks-outgoing.html) for further details).'\n                    />\n                </p>\n            );\n            tokenText = (\n                <p className='word-break--all'>\n                    <FormattedMarkdownMessage\n                        id='add_outgoing_webhook.token'\n                        defaultMessage='**Token**: {token}'\n                        values={{\n                            token: outgoingHookToken,\n                        }}\n                    />\n                    <CopyText\n                        value={outgoingHookToken}\n                    />\n                </p>\n            );\n        } else if (this.state.type === Constants.Integrations.OAUTH_APP && oauthApp) {\n            const oauthAppToken = oauthApp.id;\n            const oauthAppSecret = oauthApp.client_secret;\n\n            headerText = (\n                <FormattedMessage\n                    id={'installed_oauth_apps.header'}\n                    defaultMessage='OAuth 2.0 Applications'\n                />\n            );\n\n            helpText = [];\n            helpText.push(\n                <p key='add_oauth_app.doneHelp'>\n                    <FormattedMarkdownMessage\n                        id='add_oauth_app.doneHelp'\n                        defaultMessage='Your OAuth 2.0 application has been set up. Please use the following Client ID and Client Secret when requesting authorization for your application (see [documentation](!https://docs.mattermost.com/developer/oauth-2-0-applications.html) for further details).'\n                    />\n                </p>\n            );\n            helpText.push(\n                <p key='add_oauth_app.clientId'>\n                    <FormattedMarkdownMessage\n                        id='add_oauth_app.clientId'\n                        defaultMessage='**Client ID**: {id}'\n                        values={{\n                            id: oauthAppToken,\n                        }}\n                    />\n                    <CopyText\n                        idMessage='integrations.copy_client_id'\n                        defaultMessage='Copy Client Id'\n                        value={oauthAppToken}\n                    />\n                    <br/>\n                    <FormattedMarkdownMessage\n                        id='add_oauth_app.clientSecret'\n                        defaultMessage='**Client Secret**: {secret}'\n                        values={{\n                            secret: oauthAppSecret,\n                        }}\n                    />\n                    <CopyText\n                        idMessage='integrations.copy_client_secret'\n                        defaultMessage='Copy Client Secret'\n                        value={oauthAppSecret}\n                    />\n                </p>\n            );\n\n            helpText.push(\n                <p key='add_oauth_app.doneUrlHelp'>\n                    <FormattedMessage\n                        id='add_oauth_app.doneUrlHelp'\n                        defaultMessage='The following are your authorized redirect URL(s).'\n                    />\n                </p>\n            );\n\n            tokenText = (\n                <p className='word-break--all'>\n                    <FormattedMarkdownMessage\n                        id='add_oauth_app.url'\n                        defaultMessage='**URL(s)**: {url}'\n                        values={{\n                            url: oauthApp.callback_urls,\n                        }}\n                    />\n                </p>\n            );\n        } else if (this.state.type === Constants.Integrations.BOT && bot) {\n            const botToken = (new URLSearchParams(this.props.location.search)).get('token');\n\n            headerText = (\n                <FormattedMessage\n                    id='bots.manage.header'\n                    defaultMessage='Bot Accounts'\n                />\n            );\n            helpText = (\n                <p>\n                    <FormattedMarkdownMessage\n                        id='bots.manage.created.text'\n                        defaultMessage='Your bot account **{botname}** has been created successfully. Please use the following access token to connect to the bot (see [documentation](https://mattermost.com/pl/default-bot-accounts) for further details).'\n                        values={{\n                            botname: bot.display_name || bot.username,\n                        }}\n                    />\n                </p>\n            );\n            tokenText = (\n                <p className='word-break--all'>\n                    <FormattedMarkdownMessage\n                        id='add_outgoing_webhook.token'\n                        defaultMessage='**Token**: {token}'\n                        values={{\n                            token: botToken,\n                        }}\n                    />\n                    <CopyText\n                        value={botToken}\n                    />\n                    <br/>\n                    <br/>\n                    <FormattedMarkdownMessage\n                        id='add_outgoing_webhook.token.message'\n                        defaultMessage='Make sure to add this bot account to teams and channels you want it to interact in. See [documentation](https://mattermost.com/pl/default-bot-accounts) to learn more.'\n                    />\n                </p>\n            );\n        } else {\n            browserHistory.replace(`/error?type=${ErrorPageTypes.PAGE_NOT_FOUND}`);\n            return '';\n        }\n\n        return (\n            <div className='backstage-content row'>\n                <BackstageHeader>\n                    <Link to={'/' + this.props.team.name + '/integrations/' + this.state.type}>\n                        {headerText}\n                    </Link>\n                    <FormattedMessage\n                        id='integrations.add'\n                        defaultMessage='Add'\n                    />\n                </BackstageHeader>\n                <div className='backstage-form backstage-form__confirmation'>\n                    <h4\n                        className='backstage-form__title'\n                        id='formTitle'\n                    >\n                        <FormattedMessage\n                            id='integrations.successful'\n                            defaultMessage='Setup Successful'\n                        />\n                    </h4>\n                    {helpText}\n                    {tokenText}\n                    <div className='backstage-form__footer'>\n                        <Link\n                            className='btn btn-primary'\n                            type='submit'\n                            to={'/' + this.props.team.name + '/integrations/' + this.state.type}\n                            id='doneButton'\n                        >\n                            <FormattedMessage\n                                id='integrations.done'\n                                defaultMessage='Done'\n                            />\n                        </Link>\n                    </div>\n                </div>\n            </div>\n        );\n    }\n}\n","// Copyright (c) 2015-present Mattermost, Inc. All Rights Reserved.\n// See LICENSE.txt for license information.\n\nimport {connect} from 'react-redux';\nimport {getCommands, getOAuthApps, getIncomingHooks, getOutgoingHooks} from 'mattermost-redux/selectors/entities/integrations';\nimport {getBotAccounts} from 'mattermost-redux/selectors/entities/bots';\n\nimport ConfirmIntegration from './confirm_integration.jsx';\n\nfunction mapStateToProps(state) {\n    return {\n        commands: getCommands(state),\n        oauthApps: getOAuthApps(state),\n        incomingHooks: getIncomingHooks(state),\n        outgoingHooks: getOutgoingHooks(state),\n        bots: getBotAccounts(state),\n    };\n}\n\nexport default connect(mapStateToProps)(ConfirmIntegration);\n","// Copyright (c) 2015-present Mattermost, Inc. All Rights Reserved.\n// See LICENSE.txt for license information.\n\nimport PropTypes from 'prop-types';\nimport React from 'react';\nimport {Route, Switch, Redirect} from 'react-router-dom';\n\nimport InstalledCommands from 'components/integrations/installed_commands';\nimport AddCommand from 'components/integrations/add_command';\nimport EditCommand from 'components/integrations/edit_command';\nimport ConfirmIntegration from 'components/integrations/confirm_integration';\n\nconst CommandRoute = ({component: Component, extraProps, ...rest}) => ( //eslint-disable-line react/prop-types\n    <Route\n        {...rest}\n        render={(props) => (\n            <Component\n                {...extraProps}\n                {...props}\n            />\n        )}\n    />\n);\n\nexport default class CommandsContainer extends React.PureComponent {\n    static propTypes = {\n\n        /**\n        * The team data needed to pass into child components\n        */\n        team: PropTypes.object,\n\n        /**\n        * The user data needed to pass into child components\n        */\n        user: PropTypes.object,\n\n        /**\n        * The users collection\n        */\n        users: PropTypes.object,\n\n        /**\n        * Installed slash commands to display\n        */\n        commands: PropTypes.array,\n\n        /**\n        * Object from react-router\n        */\n        match: PropTypes.shape({\n            url: PropTypes.string.isRequired,\n        }).isRequired,\n\n        actions: PropTypes.shape({\n\n            /**\n            * The function to call to fetch team commands\n            */\n            loadCommandsAndProfilesForTeam: PropTypes.func.isRequired,\n        }).isRequired,\n\n        /**\n        * Whether or not commands are enabled.\n        */\n        enableCommands: PropTypes.bool,\n    }\n\n    constructor(props) {\n        super(props);\n        this.state = {\n            loading: true,\n        };\n    }\n\n    componentDidMount() {\n        if (this.props.enableCommands) {\n            this.props.actions.loadCommandsAndProfilesForTeam(this.props.team.id).then(\n                () => this.setState({loading: false})\n            );\n        }\n    }\n\n    render() {\n        const extraProps = {\n            loading: this.state.loading,\n            commands: this.props.commands || [],\n            users: this.props.users,\n            team: this.props.team,\n            user: this.props.user,\n        };\n        return (\n            <div>\n                <Switch>\n                    <Route\n                        exact={true}\n                        path={`${this.props.match.url}/`}\n                        render={() => (<Redirect to={`${this.props.match.url}/installed`}/>)}\n                    />\n                    <CommandRoute\n                        extraProps={extraProps}\n                        path={`${this.props.match.url}/installed`}\n                        component={InstalledCommands}\n                    />\n                    <CommandRoute\n                        extraProps={extraProps}\n                        path={`${this.props.match.url}/add`}\n                        component={AddCommand}\n                    />\n                    <CommandRoute\n                        extraProps={extraProps}\n                        path={`${this.props.match.url}/edit`}\n                        component={EditCommand}\n                    />\n                    <CommandRoute\n                        extraProps={extraProps}\n                        path={`${this.props.match.url}/confirm`}\n                        component={ConfirmIntegration}\n                    />\n                </Switch>\n            </div>\n        );\n    }\n}\n","// Copyright (c) 2015-present Mattermost, Inc. All Rights Reserved.\n// See LICENSE.txt for license information.\n\nimport {connect} from 'react-redux';\nimport {bindActionCreators} from 'redux';\nimport {getCommands} from 'mattermost-redux/selectors/entities/integrations';\nimport {getUsers} from 'mattermost-redux/selectors/entities/users';\nimport {getConfig} from 'mattermost-redux/selectors/entities/general';\n\nimport {loadCommandsAndProfilesForTeam} from 'actions/integration_actions';\n\nimport CommandsContainer from './commands_container.jsx';\n\nfunction mapStateToProps(state) {\n    const config = getConfig(state);\n    const enableCommands = config.EnableCommands === 'true';\n\n    return {\n        commands: Object.values(getCommands(state)),\n        users: getUsers(state),\n        enableCommands,\n    };\n}\n\nfunction mapDispatchToProps(dispatch) {\n    return {\n        actions: bindActionCreators({\n            loadCommandsAndProfilesForTeam,\n        }, dispatch),\n    };\n}\n\nexport default connect(mapStateToProps, mapDispatchToProps)(CommandsContainer);\n","// Copyright (c) 2015-present Mattermost, Inc. All Rights Reserved.\n// See LICENSE.txt for license information.\n\nimport PropTypes from 'prop-types';\nimport React from 'react';\nimport {Route, NavLink} from 'react-router-dom';\n\nexport default class BackstageCategory extends React.Component {\n    static get propTypes() {\n        return {\n            name: PropTypes.string.isRequired,\n            title: PropTypes.node.isRequired,\n            icon: PropTypes.string.isRequired,\n            parentLink: PropTypes.string,\n            children: PropTypes.arrayOf(PropTypes.element),\n        };\n    }\n\n    static get defaultProps() {\n        return {\n            parentLink: '',\n            children: [],\n        };\n    }\n\n    static get contextTypes() {\n        return {\n            router: PropTypes.object.isRequired,\n        };\n    }\n\n    render() {\n        const {name, title, icon, parentLink, children} = this.props;\n\n        const link = parentLink + '/' + name;\n\n        return (\n            <li className='backstage-sidebar__category'>\n                <NavLink\n                    to={link}\n                    className='category-title'\n                    activeClassName='category-title--active'\n                >\n                    <i className={'fa ' + icon}/>\n                    <span className='category-title__text'>\n                        {title}\n                    </span>\n                </NavLink>\n                {\n                    children && children.length > 0 &&\n                    <Route\n                        path={link}\n                        render={() => (\n                            <ul className='sections'>\n                                {\n                                    React.Children.map(children, (child) => {\n                                        if (!child) {\n                                            return child;\n                                        }\n\n                                        return React.cloneElement(child, {\n                                            parentLink: link,\n                                        });\n                                    })\n                                }\n                            </ul>\n                        )}\n                    />\n                }\n            </li>\n        );\n    }\n}\n","// Copyright (c) 2015-present Mattermost, Inc. All Rights Reserved.\n// See LICENSE.txt for license information.\n\nimport PropTypes from 'prop-types';\nimport React from 'react';\nimport {NavLink} from 'react-router-dom';\n\nexport default class BackstageSection extends React.Component {\n    static get propTypes() {\n        return {\n            name: PropTypes.string.isRequired,\n            title: PropTypes.node.isRequired,\n            parentLink: PropTypes.string,\n            subsection: PropTypes.bool,\n            children: PropTypes.arrayOf(PropTypes.element),\n            id: PropTypes.string,\n        };\n    }\n\n    static get defaultProps() {\n        return {\n            parentLink: '',\n            subsection: false,\n            children: [],\n        };\n    }\n\n    static get contextTypes() {\n        return {\n            router: PropTypes.object.isRequired,\n        };\n    }\n\n    getLink() {\n        return this.props.parentLink + '/' + this.props.name;\n    }\n\n    render() {\n        const {title, subsection, children} = this.props;\n\n        const link = this.getLink();\n\n        let clonedChildren = null;\n        if (children.length > 0) {\n            clonedChildren = (\n                <ul className='subsections'>\n                    {\n                        React.Children.map(children, (child) => {\n                            return React.cloneElement(child, {\n                                parentLink: link,\n                                subsection: true,\n                            });\n                        })\n                    }\n                </ul>\n            );\n        }\n\n        let className = 'section';\n        if (subsection) {\n            className = 'subsection';\n        }\n\n        return (\n            <li\n                className={className}\n                id={this.props.id}\n            >\n                <NavLink\n                    className={`${className}-title`}\n                    activeClassName={`${className}-title--active`}\n                    to={link}\n                >\n                    <span className={`${className}-title__text`}>\n                        {title}\n                    </span>\n                </NavLink>\n                {clonedChildren}\n            </li>\n        );\n    }\n}\n","// Copyright (c) 2015-present Mattermost, Inc. All Rights Reserved.\n// See LICENSE.txt for license information.\n\nimport PropTypes from 'prop-types';\nimport React from 'react';\nimport {FormattedMessage} from 'react-intl';\n\nimport {Permissions} from 'mattermost-redux/constants';\n\nimport SystemPermissionGate from 'components/permissions_gates/system_permission_gate';\nimport TeamPermissionGate from 'components/permissions_gates/team_permission_gate';\n\nimport BackstageCategory from './backstage_category.jsx';\nimport BackstageSection from './backstage_section.jsx';\n\nexport default class BackstageSidebar extends React.Component {\n    static get propTypes() {\n        return {\n            team: PropTypes.object.isRequired,\n            user: PropTypes.object.isRequired,\n            enableCustomEmoji: PropTypes.bool.isRequired,\n            enableIncomingWebhooks: PropTypes.bool.isRequired,\n            enableOutgoingWebhooks: PropTypes.bool.isRequired,\n            enableCommands: PropTypes.bool.isRequired,\n            enableOAuthServiceProvider: PropTypes.bool.isRequired,\n            canCreateOrDeleteCustomEmoji: PropTypes.bool.isRequired,\n        };\n    }\n\n    renderCustomEmoji() {\n        if (!this.props.enableCustomEmoji || !this.props.canCreateOrDeleteCustomEmoji) {\n            return null;\n        }\n\n        return (\n            <BackstageCategory\n                name='emoji'\n                parentLink={'/' + this.props.team.name}\n                icon='fa-smile-o'\n                title={\n                    <FormattedMessage\n                        id='backstage_sidebar.emoji'\n                        defaultMessage='Custom Emoji'\n                    />\n                }\n            />\n        );\n    }\n\n    renderIntegrations() {\n        let incomingWebhooks = null;\n        if (this.props.enableIncomingWebhooks) {\n            incomingWebhooks = (\n                <TeamPermissionGate\n                    permissions={[Permissions.MANAGE_INCOMING_WEBHOOKS]}\n                    teamId={this.props.team.id}\n                >\n                    <BackstageSection\n                        name='incoming_webhooks'\n                        parentLink={'/' + this.props.team.name + '/integrations'}\n                        title={(\n                            <FormattedMessage\n                                id='backstage_sidebar.integrations.incoming_webhooks'\n                                defaultMessage='Incoming Webhooks'\n                            />\n                        )}\n                        id='incomingWebhooks'\n                    />\n                </TeamPermissionGate>\n            );\n        }\n\n        let outgoingWebhooks = null;\n        if (this.props.enableOutgoingWebhooks) {\n            outgoingWebhooks = (\n                <TeamPermissionGate\n                    permissions={[Permissions.MANAGE_OUTGOING_WEBHOOKS]}\n                    teamId={this.props.team.id}\n                >\n                    <BackstageSection\n                        name='outgoing_webhooks'\n                        parentLink={'/' + this.props.team.name + '/integrations'}\n                        title={(\n                            <FormattedMessage\n                                id='backstage_sidebar.integrations.outgoing_webhooks'\n                                defaultMessage='Outgoing Webhooks'\n                            />\n                        )}\n                        id='outgoingWebhooks'\n                    />\n                </TeamPermissionGate>\n            );\n        }\n\n        let commands = null;\n        if (this.props.enableCommands) {\n            commands = (\n                <TeamPermissionGate\n                    permissions={[Permissions.MANAGE_SLASH_COMMANDS]}\n                    teamId={this.props.team.id}\n                >\n                    <BackstageSection\n                        name='commands'\n                        parentLink={'/' + this.props.team.name + '/integrations'}\n                        title={(\n                            <FormattedMessage\n                                id='backstage_sidebar.integrations.commands'\n                                defaultMessage='Slash Commands'\n                            />\n                        )}\n                        id='slashCommands'\n                    />\n                </TeamPermissionGate>\n            );\n        }\n\n        let oauthApps = null;\n        if (this.props.enableOAuthServiceProvider) {\n            oauthApps = (\n                <SystemPermissionGate permissions={[Permissions.MANAGE_OAUTH]}>\n                    <BackstageSection\n                        name='oauth2-apps'\n                        parentLink={'/' + this.props.team.name + '/integrations'}\n                        title={\n                            <FormattedMessage\n                                id='backstage_sidebar.integrations.oauthApps'\n                                defaultMessage='OAuth 2.0 Applications'\n                            />\n                        }\n                        id='oauthApps'\n                    />\n                </SystemPermissionGate>\n            );\n        }\n\n        const botAccounts = (\n            <SystemPermissionGate permissions={['manage_bots']}>\n                <BackstageSection\n                    name='bots'\n                    parentLink={'/' + this.props.team.name + '/integrations'}\n                    title={\n                        <FormattedMessage\n                            id='backstage_sidebar.bots'\n                            defaultMessage='Bot Accounts'\n                        />\n                    }\n                    id='botAccounts'\n                />\n            </SystemPermissionGate>\n        );\n\n        return (\n            <TeamPermissionGate\n                permissions={[Permissions.MANAGE_INCOMING_WEBHOOKS, Permissions.MANAGE_OUTGOING_WEBHOOKS, Permissions.MANAGE_SLASH_COMMANDS, Permissions.MANAGE_OAUTH]}\n                teamId={this.props.team.id}\n            >\n                <BackstageCategory\n                    name='integrations'\n                    icon='fa-link'\n                    parentLink={'/' + this.props.team.name}\n                    title={\n                        <FormattedMessage\n                            id='backstage_sidebar.integrations'\n                            defaultMessage='Integrations'\n                        />\n                    }\n                >\n                    {incomingWebhooks}\n                    {outgoingWebhooks}\n                    {commands}\n                    {oauthApps}\n                    {botAccounts}\n                </BackstageCategory>\n            </TeamPermissionGate>\n        );\n    }\n\n    render() {\n        return (\n            <div className='backstage-sidebar'>\n                <ul>\n                    {this.renderCustomEmoji()}\n                    {this.renderIntegrations()}\n                </ul>\n            </div>\n        );\n    }\n}\n","// Copyright (c) 2015-present Mattermost, Inc. All Rights Reserved.\n// See LICENSE.txt for license information.\n\nimport PropTypes from 'prop-types';\nimport React from 'react';\nimport {FormattedMessage} from 'react-intl';\nimport {Link} from 'react-router-dom';\n\nimport BackIcon from 'components/icon/back_icon';\n\nexport default class BackstageNavbar extends React.Component {\n    static get propTypes() {\n        return {\n            team: PropTypes.object.isRequired,\n            siteName: PropTypes.string,\n        };\n    }\n\n    render() {\n        if (!this.props.team) {\n            return null;\n        }\n\n        return (\n            <div className='backstage-navbar'>\n                <Link\n                    className='backstage-navbar__back'\n                    to={`/${this.props.team.name}`}\n                >\n                    <BackIcon/>\n                    <span>\n                        <FormattedMessage\n                            id='backstage_navbar.backToMattermost'\n                            defaultMessage='Back to {siteName}'\n                            values={{\n                                siteName: this.props.siteName,\n                            }}\n                        />\n                    </span>\n                </Link>\n            </div>\n        );\n    }\n}\n","// Copyright (c) 2015-present Mattermost, Inc. All Rights Reserved.\n// See LICENSE.txt for license information.\n\nimport React from 'react';\nimport PropTypes from 'prop-types';\nimport {Route, Switch} from 'react-router-dom';\n\nimport Bots from 'components/integrations/bots';\nimport AddBot from 'components/integrations/bots/add_bot';\n\nimport Pluggable from 'plugins/pluggable';\nimport AnnouncementBar from 'components/announcement_bar';\nimport SystemNotice from 'components/system_notice';\nimport Integrations from 'components/integrations';\nimport Emoji from 'components/emoji';\nimport AddEmoji from 'components/emoji/add_emoji';\nimport InstalledIncomingWebhooks from 'components/integrations/installed_incoming_webhooks';\nimport AddIncomingWehook from 'components/integrations/add_incoming_webhook';\nimport EditIncomingWebhook from 'components/integrations/edit_incoming_webhook';\nimport InstalledOutgoingWebhooks from 'components/integrations/installed_outgoing_webhooks';\nimport AddOutgoingWebhook from 'components/integrations/add_outgoing_webhook';\nimport EditOutgoingWebhook from 'components/integrations/edit_outgoing_webhook';\nimport InstalledOauthApps from 'components/integrations/installed_oauth_apps';\nimport AddOauthApp from 'components/integrations/add_oauth_app';\nimport EditOauthApp from 'components/integrations/edit_oauth_app';\nimport CommandsContainer from 'components/integrations/commands_container';\nimport ConfirmIntegration from 'components/integrations/confirm_integration';\n\nimport BackstageSidebar from './components/backstage_sidebar.jsx';\nimport BackstageNavbar from './components/backstage_navbar';\n\nconst BackstageRoute = ({component: Component, extraProps, ...rest}) => ( //eslint-disable-line react/prop-types\n    <Route\n        {...rest}\n        render={(props) => (\n            <Component\n                {...extraProps}\n                {...props}\n            />\n        )}\n    />\n);\n\nexport default class BackstageController extends React.Component {\n    static propTypes = {\n\n        /**\n         * Current user.\n         */\n        user: PropTypes.object,\n\n        /**\n         * Current team.\n         */\n        team: PropTypes.object,\n\n        /**\n         * Object from react-router\n         */\n        match: PropTypes.shape({\n            url: PropTypes.string.isRequired,\n        }).isRequired,\n\n        siteName: PropTypes.string,\n        enableCustomEmoji: PropTypes.bool.isRequired,\n        enableIncomingWebhooks: PropTypes.bool.isRequired,\n        enableOutgoingWebhooks: PropTypes.bool.isRequired,\n        enableCommands: PropTypes.bool.isRequired,\n        enableOAuthServiceProvider: PropTypes.bool.isRequired,\n        canCreateOrDeleteCustomEmoji: PropTypes.bool.isRequired,\n    }\n\n    scrollToTop = () => {\n        if (this.listRef) {\n            this.listRef.scrollTop = 0;\n        }\n    }\n\n    setListRef = (ref) => {\n        this.listRef = ref;\n    }\n\n    render() {\n        if (this.props.team == null || this.props.user == null) {\n            return <div/>;\n        }\n        const extraProps = {\n            team: this.props.team,\n            user: this.props.user,\n            scrollToTop: this.scrollToTop,\n        };\n        return (\n            <div className='backstage'>\n                <AnnouncementBar/>\n                <SystemNotice/>\n                <BackstageNavbar\n                    team={this.props.team}\n                    siteName={this.props.siteName}\n                />\n                <Pluggable pluggableName='Root'/>\n                <div\n                    className='backstage-body'\n                    ref={this.setListRef}\n                >\n                    <BackstageSidebar\n                        team={this.props.team}\n                        user={this.props.user}\n                        enableCustomEmoji={this.props.enableCustomEmoji}\n                        enableIncomingWebhooks={this.props.enableIncomingWebhooks}\n                        enableOutgoingWebhooks={this.props.enableOutgoingWebhooks}\n                        enableCommands={this.props.enableCommands}\n                        enableOAuthServiceProvider={this.props.enableOAuthServiceProvider}\n                        canCreateOrDeleteCustomEmoji={this.props.canCreateOrDeleteCustomEmoji}\n                    />\n                    <Switch>\n                        <BackstageRoute\n                            extraProps={extraProps}\n                            exact={true}\n                            path={'/:team/integrations'}\n                            component={Integrations}\n                        />\n                        <BackstageRoute\n                            extraProps={extraProps}\n                            exact={true}\n                            path={`${this.props.match.url}/incoming_webhooks`}\n                            component={InstalledIncomingWebhooks}\n                        />\n                        <BackstageRoute\n                            extraProps={extraProps}\n                            path={`${this.props.match.url}/incoming_webhooks/add`}\n                            component={AddIncomingWehook}\n                        />\n                        <BackstageRoute\n                            extraProps={extraProps}\n                            path={`${this.props.match.url}/incoming_webhooks/edit`}\n                            component={EditIncomingWebhook}\n                        />\n                        <BackstageRoute\n                            extraProps={extraProps}\n                            exact={true}\n                            path={`${this.props.match.url}/outgoing_webhooks`}\n                            component={InstalledOutgoingWebhooks}\n                        />\n                        <BackstageRoute\n                            extraProps={extraProps}\n                            path={`${this.props.match.url}/outgoing_webhooks/add`}\n                            component={AddOutgoingWebhook}\n                        />\n                        <BackstageRoute\n                            extraProps={extraProps}\n                            path={`${this.props.match.url}/outgoing_webhooks/edit`}\n                            component={EditOutgoingWebhook}\n                        />\n                        <BackstageRoute\n                            extraProps={extraProps}\n                            path={`${this.props.match.url}/commands`}\n                            component={CommandsContainer}\n                        />\n                        <BackstageRoute\n                            extraProps={extraProps}\n                            exact={true}\n                            path={`${this.props.match.url}/oauth2-apps`}\n                            component={InstalledOauthApps}\n                        />\n                        <BackstageRoute\n                            extraProps={extraProps}\n                            path={`${this.props.match.url}/oauth2-apps/add`}\n                            component={AddOauthApp}\n                        />\n                        <BackstageRoute\n                            extraProps={extraProps}\n                            path={`${this.props.match.url}/oauth2-apps/edit`}\n                            component={EditOauthApp}\n                        />\n                        <BackstageRoute\n                            extraProps={extraProps}\n                            path={`${this.props.match.url}/confirm`}\n                            component={ConfirmIntegration}\n                        />\n                        <BackstageRoute\n                            extraProps={extraProps}\n                            exact={true}\n                            path={'/:team/emoji'}\n                            component={Emoji}\n                        />\n                        <BackstageRoute\n                            extraProps={extraProps}\n                            path={`${this.props.match.url}/add`}\n                            component={AddEmoji}\n                        />\n                        <BackstageRoute\n                            extraProps={extraProps}\n                            path={`${this.props.match.url}/bots/add`}\n                            component={AddBot}\n                        />\n                        <BackstageRoute\n                            extraProps={extraProps}\n                            path={`${this.props.match.url}/bots/edit`}\n                            component={AddBot}\n                        />\n                        <BackstageRoute\n                            extraProps={extraProps}\n                            path={`${this.props.match.url}/bots`}\n                            component={Bots}\n                        />\n                    </Switch>\n                </div>\n            </div>\n        );\n    }\n}\n","// Copyright (c) 2015-present Mattermost, Inc. All Rights Reserved.\n// See LICENSE.txt for license information.\n\nimport {connect} from 'react-redux';\nimport {withRouter} from 'react-router-dom';\n\nimport {getCurrentUser} from 'mattermost-redux/selectors/entities/users';\nimport {getMyTeams, getCurrentTeam} from 'mattermost-redux/selectors/entities/teams';\nimport {getConfig} from 'mattermost-redux/selectors/entities/general';\nimport {haveITeamPermission, haveISystemPermission} from 'mattermost-redux/selectors/entities/roles';\nimport {Permissions} from 'mattermost-redux/constants';\n\nimport BackstageController from './backstage_controller.jsx';\n\nfunction mapStateToProps(state) {\n    const user = getCurrentUser(state);\n    const team = getCurrentTeam(state);\n\n    const config = getConfig(state);\n\n    const siteName = config.SiteName;\n    const enableCustomEmoji = config.EnableCustomEmoji === 'true';\n    const enableIncomingWebhooks = config.EnableIncomingWebhooks === 'true';\n    const enableOutgoingWebhooks = config.EnableOutgoingWebhooks === 'true';\n    const enableCommands = config.EnableCommands === 'true';\n    const enableOAuthServiceProvider = config.EnableOAuthServiceProvider === 'true';\n\n    let canCreateOrDeleteCustomEmoji = (haveISystemPermission(state, {permission: Permissions.CREATE_EMOJIS}) || haveISystemPermission(state, {permission: Permissions.DELETE_EMOJIS}));\n    if (!canCreateOrDeleteCustomEmoji) {\n        for (const t of getMyTeams(state)) {\n            if (haveITeamPermission(state, {team: t.id, permission: Permissions.CREATE_EMOJIS}) || haveITeamPermission(state, {team: t.id, permission: Permissions.DELETE_EMOJIS})) {\n                canCreateOrDeleteCustomEmoji = true;\n                break;\n            }\n        }\n    }\n\n    return {\n        user,\n        team,\n        siteName,\n        enableCustomEmoji,\n        enableIncomingWebhooks,\n        enableOutgoingWebhooks,\n        enableCommands,\n        enableOAuthServiceProvider,\n        canCreateOrDeleteCustomEmoji,\n    };\n}\n\nexport default withRouter(connect(mapStateToProps)(BackstageController));\n"],"sourceRoot":""}