{"version":3,"sources":["webpack:///./components/password_reset_form/password_reset_form.js","webpack:///./components/password_reset_form/index.js"],"names":["PasswordResetForm","props","_this","_classCallCheck","this","_getPrototypeOf","call","_defineProperty","_assertThisInitialized","_ref","regeneratorRuntime","mark","_callee","e","password","token","_ref2","data","error","wrap","_context","prev","next","preventDefault","ReactDOM","findDOMNode","refs","value","length","Constants","MIN_PASSWORD_LENGTH","setState","react_default","a","createElement","index_es","id","defaultMessage","values","chars","abrupt","URLSearchParams","location","search","get","actions","resetUserPassword","sent","browserHistory","push","PASSWORD_CHANGE","message","stop","_x","apply","arguments","state","React","PureComponent","className","formClass","onSubmit","handlePasswordReset","siteName","localized_input","type","name","ref","placeholder","t","spellCheck","autoFocus","PropTypes","object","isRequired","string","shape","func","connect","getConfig","SiteName","dispatch","bindActionCreators"],"mappings":"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","file":"30.8c95e9bc68c8080f2071.js","sourcesContent":["// Copyright (c) 2015-present Mattermost, Inc. All Rights Reserved.\n// See LICENSE.txt for license information.\n\nimport PropTypes from 'prop-types';\nimport React from 'react';\nimport ReactDOM from 'react-dom';\nimport {FormattedMessage} from 'react-intl';\n\nimport {browserHistory} from 'utils/browser_history';\nimport Constants from 'utils/constants.jsx';\nimport LocalizedInput from 'components/localized_input/localized_input';\n\nimport {t} from 'utils/i18n.jsx';\n\nexport default class PasswordResetForm extends React.PureComponent {\n    static propTypes = {\n        location: PropTypes.object.isRequired,\n        siteName: PropTypes.string,\n        actions: PropTypes.shape({\n            resetUserPassword: PropTypes.func.isRequired,\n        }).isRequired,\n    };\n\n    constructor(props) {\n        super(props);\n        this.state = {error: null};\n    }\n\n    handlePasswordReset = async (e) => {\n        e.preventDefault();\n\n        const password = ReactDOM.findDOMNode(this.refs.password).value;\n        if (!password || password.length < Constants.MIN_PASSWORD_LENGTH) {\n            this.setState({\n                error: (\n                    <FormattedMessage\n                        id='password_form.error'\n                        defaultMessage='Please enter at least {chars} characters.'\n                        values={{\n                            chars: Constants.MIN_PASSWORD_LENGTH,\n                        }}\n                    />\n                ),\n            });\n            return;\n        }\n\n        this.setState({error: null});\n\n        const token = (new URLSearchParams(this.props.location.search)).get('token');\n        const {data, error} = await this.props.actions.resetUserPassword(token, password);\n        if (data) {\n            browserHistory.push('/login?extra=' + Constants.PASSWORD_CHANGE);\n            this.setState({error: null});\n        } else if (error) {\n            this.setState({error: error.message});\n        }\n    }\n\n    render() {\n        let error = null;\n        if (this.state.error) {\n            error = (\n                <div className='form-group has-error'>\n                    <label className='control-label'>\n                        {this.state.error}\n                    </label>\n                </div>\n            );\n        }\n\n        let formClass = 'form-group';\n        if (error) {\n            formClass += ' has-error';\n        }\n\n        return (\n            <div className='col-sm-12'>\n                <div className='signup-team__container'>\n                    <h3>\n                        <FormattedMessage\n                            id='password_form.title'\n                            defaultMessage='Password Reset'\n                        />\n                    </h3>\n                    <form onSubmit={this.handlePasswordReset}>\n                        <p>\n                            <FormattedMessage\n                                id='password_form.enter'\n                                defaultMessage='Enter a new password for your {siteName} account.'\n                                values={{\n                                    siteName: this.props.siteName,\n                                }}\n                            />\n                        </p>\n                        <div className={formClass}>\n                            <LocalizedInput\n                                id='resetPasswordInput'\n                                type='password'\n                                className='form-control'\n                                name='password'\n                                ref='password'\n                                placeholder={{id: t('password_form.pwd'), defaultMessage: 'Password'}}\n                                spellCheck='false'\n                                autoFocus={true}\n                            />\n                        </div>\n                        {error}\n                        <button\n                            id='resetPasswordButton'\n                            type='submit'\n                            className='btn btn-primary'\n                        >\n                            <FormattedMessage\n                                id='password_form.change'\n                                defaultMessage='Change my password'\n                            />\n                        </button>\n                    </form>\n                </div>\n            </div>\n        );\n    }\n}\n","// Copyright (c) 2015-present Mattermost, Inc. All Rights Reserved.\n// See LICENSE.txt for license information.\n\nimport {bindActionCreators} from 'redux';\nimport {connect} from 'react-redux';\nimport {getConfig} from 'mattermost-redux/selectors/entities/general';\nimport {resetUserPassword} from 'mattermost-redux/actions/users';\n\nimport PasswordResetForm from './password_reset_form';\n\nconst mapStateToProps = (state) => {\n    const {SiteName: siteName} = getConfig(state);\n    return {siteName};\n};\n\nconst mapDispatchToProps = (dispatch) => ({\n    actions: bindActionCreators({\n        resetUserPassword,\n    }, dispatch),\n});\n\nexport default connect(mapStateToProps, mapDispatchToProps)(PasswordResetForm);\n"],"sourceRoot":""}