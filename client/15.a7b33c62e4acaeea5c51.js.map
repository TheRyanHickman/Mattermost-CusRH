{"version":3,"sources":["webpack:///./components/common/back_button.jsx","webpack:///./images/logo.png","webpack:///./components/login/login_mfa.jsx","webpack:///./components/claim/components/oauth_to_email.jsx","webpack:///./components/claim/components/email_to_oauth.jsx","webpack:///./components/claim/components/ldap_to_email.jsx","webpack:///./components/claim/components/email_to_ldap.jsx","webpack:///./components/claim/claim_controller.jsx","webpack:///./components/claim/index.js"],"names":["BackButton","React","PureComponent","react__WEBPACK_IMPORTED_MODULE_3___default","a","createElement","id","className","react_router_dom__WEBPACK_IMPORTED_MODULE_5__","onClick","this","props","to","url","react_intl__WEBPACK_IMPORTED_MODULE_4__","defaultMessage","title","PropTypes","string","func","module","exports","__webpack_require__","p","LoginMfa","_this","_classCallCheck","_getPrototypeOf","call","_defineProperty","_assertThisInitialized","e","preventDefault","token","target","value","trim","replace","state","setState","submit","loginId","password","saving","serverError","errorClass","react__WEBPACK_IMPORTED_MODULE_4___default","onSubmit","handleSubmit","react_intl__WEBPACK_IMPORTED_MODULE_5__","components_localized_input_localized_input__WEBPACK_IMPORTED_MODULE_9__","type","name","placeholder","t","spellCheck","autoComplete","autoFocus","onChange","handleChange","components_save_button_jsx__WEBPACK_IMPORTED_MODULE_8__","disabled","localizeMessage","savingMessage","isRequired","OAuthToEmail","bind","_this2","ReactDOM","findDOMNode","refs","error","Utils","_Utils$isValidPasswor","passwordConfig","valid","confirmPassword","passwordconfirm","oauthToEmail","currentType","email","data","follow_link","window","location","href","err","message","react_default","formClass","uiType","concat","Constants","SAML_SERVICE","toUpperCase","index_es","values","site","siteName","localized_input","ref","object","EmailToOAuth","email_to_oauth_classCallCheck","email_to_oauth_getPrototypeOf","email_to_oauth_assertThisInitialized","preSubmit","showMfa","emailToOAuth","newType","server_error_id","content","login_mfa","LDAPToEmail","ldap_to_email_classCallCheck","ldap_to_email_getPrototypeOf","ldap_to_email_assertThisInitialized","passwordError","confirmError","ldapPasswordError","Component","ldapPassword","ldappassword","switchLdapToEmail","then","_ref","startsWith","passwordClass","ldapPasswordClass","confimClass","passwordPlaceholder","EmailToLDAP","email_to_ldap_classCallCheck","email_to_ldap_getPrototypeOf","email_to_ldap_assertThisInitialized","ldapError","emailpassword","ldapId","ldapid","emailToLdap","ldapClass","loginPlaceholder","ldapLoginFieldName","style","usernameInput","display","ClaimController","URLSearchParams","search","get","back_button","alt","src","logoImage","react_router","path","match","render","oauth_to_email_OAuthToEmail","email_to_oauth_EmailToOAuth","ldap_to_email_LDAPToEmail","actions","email_to_ldap_EmailToLDAP","shape","connect","config","getConfig","SiteName","LdapLoginFieldName","getPasswordConfig","dispatch","bindActionCreators"],"mappings":"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","file":"15.a7b33c62e4acaeea5c51.js","sourcesContent":["// Copyright (c) 2015-present Mattermost, Inc. All Rights Reserved.\n// See LICENSE.txt for license information.\n\nimport PropTypes from 'prop-types';\nimport React from 'react';\nimport {FormattedMessage} from 'react-intl';\nimport {Link} from 'react-router-dom';\n\nexport default class BackButton extends React.PureComponent {\n    static propTypes = {\n\n        /**\n         * URL to return to\n         */\n        url: PropTypes.string,\n\n        /**\n         * An optional click handler that will trigger when the user clicks on the back button\n         */\n        onClick: PropTypes.func,\n    };\n\n    static defaultProps = {\n        url: '/',\n    };\n\n    render() {\n        return (\n            <div\n                id='back_button'\n                className='signup-header'\n            >\n                <Link\n                    onClick={this.props.onClick}\n                    to={this.props.url}\n                >\n                    <FormattedMessage\n                        id='generic_icons.back'\n                        defaultMessage='Back Icon'\n                    >\n                        {(title) => (\n                            <span\n                                id='back_button_icon'\n                                className='fa fa-1x fa-angle-left'\n                                title={title}\n                            />\n                        )}\n                    </FormattedMessage>\n                    <FormattedMessage\n                        id='web.header.back'\n                        defaultMessage='Back'\n                    />\n                </Link>\n            </div>\n        );\n    }\n}\n","module.exports = __webpack_public_path__ + \"files/786f906c373b98400b1e6f6c3341ce7d.png\";","// Copyright (c) 2015-present Mattermost, Inc. All Rights Reserved.\n// See LICENSE.txt for license information.\n\nimport PropTypes from 'prop-types';\nimport React from 'react';\nimport {FormattedMessage} from 'react-intl';\n\nimport {localizeMessage} from 'utils/utils.jsx';\nimport {t} from 'utils/i18n.jsx';\nimport SaveButton from 'components/save_button.jsx';\nimport LocalizedInput from 'components/localized_input/localized_input';\n\nexport default class LoginMfa extends React.PureComponent {\n    static propTypes = {\n\n        /*\n         * User's login ID\n         */\n        loginId: PropTypes.string.isRequired,\n\n        /*\n         * User's password\n         */\n        password: PropTypes.string.isRequired,\n\n        /*\n         * Function to call when submitting user credentials\n         */\n        submit: PropTypes.func.isRequired,\n    };\n\n    constructor(props) {\n        super(props);\n\n        this.state = {\n            saving: false,\n            token: '',\n            serverError: '',\n        };\n    }\n\n    handleChange = (e) => {\n        e.preventDefault();\n        const token = e.target.value.trim().replace(/\\s/g, '');\n\n        if (token !== this.state.token) {\n            this.setState({\n                token,\n            });\n        }\n    }\n\n    handleSubmit = (e) => {\n        e.preventDefault();\n        const state = {};\n\n        state.serverError = '';\n        state.saving = true;\n        this.setState(state);\n\n        this.props.submit(\n            this.props.loginId,\n            this.props.password,\n            this.state.token\n        );\n    }\n\n    render() {\n        let serverError;\n        let errorClass = '';\n        if (this.state.serverError) {\n            serverError = <label className='control-label'>{this.state.serverError}</label>;\n            errorClass = ' has-error';\n        }\n\n        return (\n            <form onSubmit={this.handleSubmit}>\n                <div className='signup__email-container'>\n                    <p>\n                        <FormattedMessage\n                            id='login_mfa.enterToken'\n                            defaultMessage=\"To complete the sign in process, please enter a token from your smartphone's authenticator\"\n                        />\n                    </p>\n                    <div className={'form-group' + errorClass}>\n                        {serverError}\n                    </div>\n                    <div className={'form-group' + errorClass}>\n                        <LocalizedInput\n                            type='text'\n                            className='form-control'\n                            name='token'\n                            placeholder={{id: t('login_mfa.token'), defaultMessage: 'MFA Token'}}\n                            spellCheck='false'\n                            autoComplete='off'\n                            autoFocus={true}\n                            onChange={this.handleChange}\n                        />\n                    </div>\n                    <div className='form-group'>\n                        <SaveButton\n                            saving={this.state.saving}\n                            disabled={this.state.saving}\n                            onClick={this.handleSubmit}\n                            defaultMessage={localizeMessage('login_mfa.submit', 'Submit')}\n                            savingMessage={localizeMessage('login_mfa.submitting', 'Submitting...')}\n                        />\n                    </div>\n                </div>\n            </form>\n        );\n    }\n}\n","// Copyright (c) 2015-present Mattermost, Inc. All Rights Reserved.\n// See LICENSE.txt for license information.\n\nimport PropTypes from 'prop-types';\nimport React from 'react';\nimport ReactDOM from 'react-dom';\nimport {FormattedMessage} from 'react-intl';\n\nimport {oauthToEmail} from 'actions/admin_actions.jsx';\nimport Constants from 'utils/constants.jsx';\nimport * as Utils from 'utils/utils.jsx';\nimport {t} from 'utils/i18n.jsx';\nimport LocalizedInput from 'components/localized_input/localized_input';\n\nexport default class OAuthToEmail extends React.PureComponent {\n    static propTypes = {\n        currentType: PropTypes.string,\n        email: PropTypes.string,\n        siteName: PropTypes.string,\n        passwordConfig: PropTypes.object,\n    };\n\n    constructor(props) {\n        super(props);\n\n        this.submit = this.submit.bind(this);\n\n        this.state = {};\n    }\n\n    submit(e) {\n        e.preventDefault();\n        const state = {};\n\n        const password = ReactDOM.findDOMNode(this.refs.password).value;\n        if (!password) {\n            state.error = Utils.localizeMessage('claim.oauth_to_email.enterPwd', 'Please enter a password.');\n            this.setState(state);\n            return;\n        }\n\n        const {valid, error} = Utils.isValidPassword(password, this.props.passwordConfig);\n        if (!valid && error) {\n            this.setState({error});\n            return;\n        }\n\n        const confirmPassword = ReactDOM.findDOMNode(this.refs.passwordconfirm).value;\n        if (!confirmPassword || password !== confirmPassword) {\n            state.error = Utils.localizeMessage('claim.oauth_to_email.pwdNotMatch', 'Passwords do not match.');\n            this.setState(state);\n            return;\n        }\n\n        state.error = null;\n        this.setState(state);\n\n        oauthToEmail(\n            this.props.currentType,\n            this.props.email,\n            password,\n            (data) => {\n                if (data.follow_link) {\n                    window.location.href = data.follow_link;\n                }\n            },\n            (err) => {\n                this.setState({error: err.message});\n            }\n        );\n    }\n    render() {\n        var error = null;\n        if (this.state.error) {\n            error = <div className='form-group has-error'><label className='control-label'>{this.state.error}</label></div>;\n        }\n\n        var formClass = 'form-group';\n        if (error) {\n            formClass += ' has-error';\n        }\n\n        const uiType = `${(this.props.currentType === Constants.SAML_SERVICE ? Constants.SAML_SERVICE.toUpperCase() : Utils.toTitleCase(this.props.currentType))} SSO`;\n\n        return (\n            <div>\n                <h3>\n                    <FormattedMessage\n                        id='claim.oauth_to_email.title'\n                        defaultMessage='Switch {type} Account to Email'\n                        values={{\n                            type: uiType,\n                        }}\n                    />\n                </h3>\n                <form onSubmit={this.submit}>\n                    <p>\n                        <FormattedMessage\n                            id='claim.oauth_to_email.description'\n                            defaultMessage='Upon changing your account type, you will only be able to login with your email and password.'\n                        />\n                    </p>\n                    <p>\n                        <FormattedMessage\n                            id='claim.oauth_to_email.enterNewPwd'\n                            defaultMessage='Enter a new password for your {site} email account'\n                            values={{\n                                site: this.props.siteName,\n                            }}\n                        />\n                    </p>\n                    <div className={formClass}>\n                        <LocalizedInput\n                            type='password'\n                            className='form-control'\n                            name='password'\n                            ref='password'\n                            placeholder={{id: t('claim.oauth_to_email.newPwd'), defaultMessage: 'New Password'}}\n                            spellCheck='false'\n                        />\n                    </div>\n                    <div className={formClass}>\n                        <LocalizedInput\n                            type='password'\n                            className='form-control'\n                            name='passwordconfirm'\n                            ref='passwordconfirm'\n                            placeholder={{id: t('claim.oauth_to_email.confirm'), defaultMessage: 'Confirm Password'}}\n                            spellCheck='false'\n                        />\n                    </div>\n                    {error}\n                    <button\n                        type='submit'\n                        className='btn btn-primary'\n                    >\n                        <FormattedMessage\n                            id='claim.oauth_to_email.switchTo'\n                            defaultMessage='Switch {type} to email and password'\n                            values={{\n                                type: uiType,\n                            }}\n                        />\n                    </button>\n                </form>\n            </div>\n        );\n    }\n}\n","// Copyright (c) 2015-present Mattermost, Inc. All Rights Reserved.\n// See LICENSE.txt for license information.\n\nimport PropTypes from 'prop-types';\nimport React from 'react';\nimport ReactDOM from 'react-dom';\nimport {FormattedMessage} from 'react-intl';\n\nimport {emailToOAuth} from 'actions/admin_actions.jsx';\nimport Constants from 'utils/constants.jsx';\nimport * as Utils from 'utils/utils.jsx';\nimport {t} from 'utils/i18n.jsx';\nimport LoginMfa from 'components/login/login_mfa.jsx';\nimport LocalizedInput from 'components/localized_input/localized_input';\n\nexport default class EmailToOAuth extends React.PureComponent {\n    static propTypes = {\n        newType: PropTypes.string,\n        email: PropTypes.string,\n        siteName: PropTypes.string,\n    };\n\n    constructor(props) {\n        super(props);\n\n        this.submit = this.submit.bind(this);\n        this.preSubmit = this.preSubmit.bind(this);\n\n        this.state = {showMfa: false, password: ''};\n    }\n\n    preSubmit(e) {\n        e.preventDefault();\n        var state = {};\n\n        var password = ReactDOM.findDOMNode(this.refs.password).value;\n        if (!password) {\n            state.error = Utils.localizeMessage('claim.email_to_oauth.pwdError', 'Please enter your password.');\n            this.setState(state);\n            return;\n        }\n\n        this.setState({password});\n\n        state.error = null;\n        this.setState(state);\n\n        this.submit(this.props.email, password, '');\n    }\n\n    submit(loginId, password, token) {\n        emailToOAuth(\n            loginId,\n            password,\n            token,\n            this.props.newType,\n            (data) => {\n                if (data.follow_link) {\n                    window.location.href = data.follow_link;\n                }\n            },\n            (err) => {\n                if (!this.state.showMfa && err.server_error_id === 'mfa.validate_token.authenticate.app_error') {\n                    this.setState({showMfa: true});\n                } else {\n                    this.setState({error: err.message, showMfa: false});\n                }\n            }\n        );\n    }\n\n    render() {\n        var error = null;\n        if (this.state.error) {\n            error = <div className='form-group has-error'><label className='control-label'>{this.state.error}</label></div>;\n        }\n\n        var formClass = 'form-group';\n        if (error) {\n            formClass += ' has-error';\n        }\n\n        const type = (this.props.newType === Constants.SAML_SERVICE ? Constants.SAML_SERVICE.toUpperCase() : Utils.toTitleCase(this.props.newType));\n        const uiType = `${type} SSO`;\n\n        let content;\n        if (this.state.showMfa) {\n            content = (\n                <LoginMfa\n                    loginId={this.props.email}\n                    password={this.state.password}\n                    submit={this.submit}\n                />\n            );\n        } else {\n            content = (\n                <form onSubmit={this.preSubmit}>\n                    <p>\n                        <FormattedMessage\n                            id='claim.email_to_oauth.ssoType'\n                            defaultMessage='Upon claiming your account, you will only be able to login with {type} SSO'\n                            values={{\n                                type,\n                            }}\n                        />\n                    </p>\n                    <p>\n                        <FormattedMessage\n                            id='claim.email_to_oauth.ssoNote'\n                            defaultMessage='You must already have a valid {type} account'\n                            values={{\n                                type,\n                            }}\n                        />\n                    </p>\n                    <p>\n                        <FormattedMessage\n                            id='claim.email_to_oauth.enterPwd'\n                            defaultMessage='Enter the password for your {site} account'\n                            values={{\n                                site: this.props.siteName,\n                            }}\n                        />\n                    </p>\n                    <div className={formClass}>\n                        <LocalizedInput\n                            type='password'\n                            className='form-control'\n                            name='password'\n                            ref='password'\n                            placeholder={{id: t('claim.email_to_oauth.pwd'), defaultMessage: 'Password'}}\n                            spellCheck='false'\n                        />\n                    </div>\n                    {error}\n                    <button\n                        type='submit'\n                        className='btn btn-primary'\n                    >\n                        <FormattedMessage\n                            id='claim.email_to_oauth.switchTo'\n                            defaultMessage='Switch account to {uiType}'\n                            values={{\n                                uiType,\n                            }}\n                        />\n                    </button>\n                </form>\n            );\n        }\n\n        return (\n            <div>\n                <h3>\n                    <FormattedMessage\n                        id='claim.email_to_oauth.title'\n                        defaultMessage='Switch Email/Password Account to {uiType}'\n                        values={{\n                            uiType,\n                        }}\n                    />\n                </h3>\n                {content}\n            </div>\n        );\n    }\n}\n","// Copyright (c) 2015-present Mattermost, Inc. All Rights Reserved.\n// See LICENSE.txt for license information.\n\nimport PropTypes from 'prop-types';\nimport React from 'react';\nimport {FormattedMessage} from 'react-intl';\n\nimport * as Utils from 'utils/utils.jsx';\nimport {t} from 'utils/i18n.jsx';\nimport LoginMfa from 'components/login/login_mfa.jsx';\nimport LocalizedInput from 'components/localized_input/localized_input';\n\nexport default class LDAPToEmail extends React.Component {\n    static propTypes = {\n        email: PropTypes.string,\n        passwordConfig: PropTypes.object,\n        switchLdapToEmail: PropTypes.func.isRequired,\n    };\n\n    constructor(props) {\n        super(props);\n\n        this.submit = this.submit.bind(this);\n        this.preSubmit = this.preSubmit.bind(this);\n\n        this.state = {\n            passwordError: '',\n            confirmError: '',\n            ldapPasswordError: '',\n            serverError: '',\n        };\n    }\n\n    preSubmit(e) {\n        e.preventDefault();\n\n        var state = {\n            passwordError: '',\n            confirmError: '',\n            ldapPasswordError: '',\n            serverError: '',\n        };\n\n        const ldapPassword = this.refs.ldappassword.value;\n        if (!ldapPassword) {\n            state.ldapPasswordError = Utils.localizeMessage('claim.ldap_to_email.ldapPasswordError', 'Please enter your AD/LDAP password.');\n            this.setState(state);\n            return;\n        }\n\n        const password = this.refs.password.value;\n        if (!password) {\n            state.passwordError = Utils.localizeMessage('claim.ldap_to_email.pwdError', 'Please enter your password.');\n            this.setState(state);\n            return;\n        }\n\n        const {valid, error} = Utils.isValidPassword(password, this.props.passwordConfig);\n        if (!valid && error) {\n            this.setState({\n                passwordError: error,\n            });\n            return;\n        }\n\n        const confirmPassword = this.refs.passwordconfirm.value;\n        if (!confirmPassword || password !== confirmPassword) {\n            state.confirmError = Utils.localizeMessage('claim.ldap_to_email.pwdNotMatch', 'Passwords do not match.');\n            this.setState(state);\n            return;\n        }\n\n        state.password = password;\n        state.ldapPassword = ldapPassword;\n        this.setState(state);\n\n        this.submit(this.props.email, password, '', ldapPassword);\n    }\n\n    submit(loginId, password, token, ldapPassword) {\n        this.props.switchLdapToEmail(ldapPassword || this.state.ldapPassword, this.props.email, password, token).then(({data, error: err}) => {\n            if (data && data.follow_link) {\n                window.location.href = data.follow_link;\n            } else if (err) {\n                if (err.server_error_id.startsWith('model.user.is_valid.pwd')) {\n                    this.setState({passwordError: err.message, showMfa: false});\n                } else if (err.server_error_id === 'ent.ldap.do_login.invalid_password.app_error') {\n                    this.setState({ldapPasswordError: err.message, showMfa: false});\n                } else if (!this.state.showMfa && err.server_error_id === 'mfa.validate_token.authenticate.app_error') {\n                    this.setState({showMfa: true});\n                } else {\n                    this.setState({serverError: err.message, showMfa: false});\n                }\n            }\n        });\n    }\n\n    render() {\n        let serverError = null;\n        let formClass = 'form-group';\n        if (this.state.serverError) {\n            serverError = <div className='form-group has-error'><label className='control-label'>{this.state.serverError}</label></div>;\n            formClass += ' has-error';\n        }\n\n        let passwordError = null;\n        let passwordClass = 'form-group';\n        if (this.state.passwordError) {\n            passwordError = <div className='form-group has-error'><label className='control-label'>{this.state.passwordError}</label></div>;\n            passwordClass += ' has-error';\n        }\n\n        let ldapPasswordError = null;\n        let ldapPasswordClass = 'form-group';\n        if (this.state.ldapPasswordError) {\n            ldapPasswordError = <div className='form-group has-error'><label className='control-label'>{this.state.ldapPasswordError}</label></div>;\n            ldapPasswordClass += ' has-error';\n        }\n\n        let confirmError = null;\n        let confimClass = 'form-group';\n        if (this.state.confirmError) {\n            confirmError = <div className='form-group has-error'><label className='control-label'>{this.state.confirmError}</label></div>;\n            confimClass += ' has-error';\n        }\n\n        const passwordPlaceholder = Utils.localizeMessage('claim.ldap_to_email.ldapPwd', 'AD/LDAP Password');\n\n        let content;\n        if (this.state.showMfa) {\n            content = (\n                <LoginMfa\n                    loginId={this.props.email}\n                    password={this.state.password}\n                    submit={this.submit}\n                />\n            );\n        } else {\n            content = (\n                <form\n                    onSubmit={this.preSubmit}\n                    className={formClass}\n                >\n                    <p>\n                        <FormattedMessage\n                            id='claim.ldap_to_email.email'\n                            defaultMessage='After switching your authentication method, you will use {email} to login. Your AD/LDAP credentials will no longer allow access to Mattermost.'\n                            values={{\n                                email: this.props.email,\n                            }}\n                        />\n                    </p>\n                    <p>\n                        <FormattedMessage\n                            id='claim.ldap_to_email.enterLdapPwd'\n                            defaultMessage='{ldapPassword}:'\n                            values={{\n                                ldapPassword: passwordPlaceholder,\n                            }}\n                        />\n                    </p>\n                    <div className={ldapPasswordClass}>\n                        <input\n                            type='password'\n                            className='form-control'\n                            name='ldapPassword'\n                            ref='ldappassword'\n                            placeholder={passwordPlaceholder}\n                            spellCheck='false'\n                        />\n                    </div>\n                    {ldapPasswordError}\n                    <p>\n                        <FormattedMessage\n                            id='claim.ldap_to_email.enterPwd'\n                            defaultMessage='New email login password:'\n                        />\n                    </p>\n                    <div className={passwordClass}>\n                        <LocalizedInput\n                            type='password'\n                            className='form-control'\n                            name='password'\n                            ref='password'\n                            placeholder={{id: t('claim.ldap_to_email.pwd'), defaultMessage: 'Password'}}\n                            spellCheck='false'\n                        />\n                    </div>\n                    {passwordError}\n                    <div className={confimClass}>\n                        <LocalizedInput\n                            type='password'\n                            className='form-control'\n                            name='passwordconfirm'\n                            ref='passwordconfirm'\n                            placeholder={{id: t('claim.ldap_to_email.confirm'), defaultMessage: 'Confirm Password'}}\n                            spellCheck='false'\n                        />\n                    </div>\n                    {confirmError}\n                    <button\n                        type='submit'\n                        className='btn btn-primary'\n                    >\n                        <FormattedMessage\n                            id='claim.ldap_to_email.switchTo'\n                            defaultMessage='Switch account to email/password'\n                        />\n                    </button>\n                    {serverError}\n                </form>\n            );\n        }\n\n        return (\n            <div>\n                <h3>\n                    <FormattedMessage\n                        id='claim.ldap_to_email.title'\n                        defaultMessage='Switch AD/LDAP Account to Email/Password'\n                    />\n                </h3>\n                {content}\n            </div>\n        );\n    }\n}\n","// Copyright (c) 2015-present Mattermost, Inc. All Rights Reserved.\n// See LICENSE.txt for license information.\n\nimport PropTypes from 'prop-types';\nimport React from 'react';\nimport {FormattedMessage} from 'react-intl';\n\nimport {emailToLdap} from 'actions/admin_actions.jsx';\nimport * as Utils from 'utils/utils.jsx';\nimport {t} from 'utils/i18n.jsx';\nimport LoginMfa from 'components/login/login_mfa.jsx';\nimport LocalizedInput from 'components/localized_input/localized_input';\n\nexport default class EmailToLDAP extends React.Component {\n    static propTypes = {\n        email: PropTypes.string,\n        siteName: PropTypes.string,\n        ldapLoginFieldName: PropTypes.string,\n    };\n\n    constructor(props) {\n        super(props);\n\n        this.submit = this.submit.bind(this);\n        this.preSubmit = this.preSubmit.bind(this);\n\n        this.state = {\n            passwordError: '',\n            ldapError: '',\n            ldapPasswordError: '',\n            serverError: '',\n            showMfa: false,\n        };\n    }\n\n    preSubmit(e) {\n        e.preventDefault();\n\n        var state = {\n            passwordError: '',\n            ldapError: '',\n            ldapPasswordError: '',\n            serverError: '',\n        };\n\n        const password = this.refs.emailpassword.value;\n        if (!password) {\n            state.passwordError = Utils.localizeMessage('claim.email_to_ldap.pwdError', 'Please enter your password.');\n            this.setState(state);\n            return;\n        }\n\n        const ldapId = this.refs.ldapid.value.trim();\n        if (!ldapId) {\n            state.ldapError = Utils.localizeMessage('claim.email_to_ldap.ldapIdError', 'Please enter your AD/LDAP ID.');\n            this.setState(state);\n            return;\n        }\n\n        const ldapPassword = this.refs.ldappassword.value;\n        if (!ldapPassword) {\n            state.ldapPasswordError = Utils.localizeMessage('claim.email_to_ldap.ldapPasswordError', 'Please enter your AD/LDAP password.');\n            this.setState(state);\n            return;\n        }\n\n        state.password = password;\n        state.ldapId = ldapId;\n        state.ldapPassword = ldapPassword;\n        this.setState(state);\n\n        this.submit(this.props.email, password, '', ldapId, ldapPassword);\n    }\n\n    submit(loginId, password, token, ldapId, ldapPassword) {\n        emailToLdap(\n            loginId,\n            password,\n            token,\n            ldapId || this.state.ldapId,\n            ldapPassword || this.state.ldapPassword,\n            (data) => {\n                if (data.follow_link) {\n                    window.location.href = data.follow_link;\n                }\n            },\n            (err) => {\n                if (!this.state.showMfa && err.server_error_id === 'mfa.validate_token.authenticate.app_error') {\n                    this.setState({showMfa: true});\n                } else {\n                    switch (err.id) {\n                    case 'ent.ldap.do_login.user_not_registered.app_error':\n                    case 'ent.ldap.do_login.user_filtered.app_error':\n                    case 'ent.ldap.do_login.matched_to_many_users.app_error':\n                        this.setState({ldapError: err.message, showMfa: false});\n                        break;\n                    case 'ent.ldap.do_login.invalid_password.app_error':\n                        this.setState({ldapPasswordError: err.message, showMfa: false});\n                        break;\n                    case 'api.user.check_user_password.invalid.app_error':\n                        this.setState({passwordError: err.message, showMfa: false});\n                        break;\n                    default:\n                        this.setState({serverError: err.message, showMfa: false});\n                    }\n                }\n            }\n        );\n    }\n\n    render() {\n        let serverError = null;\n        let formClass = 'form-group';\n        if (this.state.serverError) {\n            serverError = <div className='form-group has-error'><label className='control-label'>{this.state.serverError}</label></div>;\n            formClass += ' has-error';\n        }\n\n        let passwordError = null;\n        let passwordClass = 'form-group';\n        if (this.state.passwordError) {\n            passwordError = <div className='form-group has-error'><label className='control-label'>{this.state.passwordError}</label></div>;\n            passwordClass += ' has-error';\n        }\n\n        let ldapError = null;\n        let ldapClass = 'form-group';\n        if (this.state.ldapError) {\n            ldapError = <div className='form-group has-error'><label className='control-label'>{this.state.ldapError}</label></div>;\n            ldapClass += ' has-error';\n        }\n\n        let ldapPasswordError = null;\n        let ldapPasswordClass = 'form-group';\n        if (this.state.ldapPasswordError) {\n            ldapPasswordError = <div className='form-group has-error'><label className='control-label'>{this.state.ldapPasswordError}</label></div>;\n            ldapPasswordClass += ' has-error';\n        }\n\n        let loginPlaceholder;\n        if (this.props.ldapLoginFieldName) {\n            loginPlaceholder = this.props.ldapLoginFieldName;\n        } else {\n            loginPlaceholder = Utils.localizeMessage('claim.email_to_ldap.ldapId', 'AD/LDAP ID');\n        }\n\n        let content;\n        if (this.state.showMfa) {\n            content = (\n                <LoginMfa\n                    loginId={this.props.email}\n                    password={this.state.password}\n                    submit={this.submit}\n                />\n            );\n        } else {\n            content = (\n                <form\n                    onSubmit={this.preSubmit}\n                    className={formClass}\n                >\n                    <p>\n                        <FormattedMessage\n                            id='claim.email_to_ldap.ssoType'\n                            defaultMessage='Upon claiming your account, you will only be able to login with AD/LDAP'\n                        />\n                    </p>\n                    <p>\n                        <FormattedMessage\n                            id='claim.email_to_ldap.ssoNote'\n                            defaultMessage='You must already have a valid AD/LDAP account'\n                        />\n                    </p>\n                    <p>\n                        <FormattedMessage\n                            id='claim.email_to_ldap.enterPwd'\n                            defaultMessage='Enter the password for your {site} email account'\n                            values={{\n                                site: this.props.siteName,\n                            }}\n                        />\n                    </p>\n                    <input\n                        type='text'\n                        style={style.usernameInput}\n                        name='fakeusernameremembered'\n                    />\n                    <div className={passwordClass}>\n                        <LocalizedInput\n                            type='password'\n                            className='form-control'\n                            name='emailPassword'\n                            ref='emailpassword'\n                            autoComplete='off'\n                            placeholder={{id: t('claim.email_to_ldap.pwd'), defaultMessage: 'Password'}}\n                            spellCheck='false'\n                        />\n                    </div>\n                    {passwordError}\n                    <p>\n                        <FormattedMessage\n                            id='claim.email_to_ldap.enterLdapPwd'\n                            defaultMessage='Enter the ID and password for your AD/LDAP account'\n                        />\n                    </p>\n                    <div className={ldapClass}>\n                        <input\n                            type='text'\n                            className='form-control'\n                            name='ldapId'\n                            ref='ldapid'\n                            autoComplete='off'\n                            placeholder={loginPlaceholder}\n                            spellCheck='false'\n                        />\n                    </div>\n                    {ldapError}\n                    <div className={ldapPasswordClass}>\n                        <LocalizedInput\n                            type='password'\n                            className='form-control'\n                            name='ldapPassword'\n                            ref='ldappassword'\n                            autoComplete='off'\n                            placeholder={{id: t('claim.email_to_ldap.ldapPwd'), defaultMessage: 'AD/LDAP Password'}}\n                            spellCheck='false'\n                        />\n                    </div>\n                    {ldapPasswordError}\n                    <button\n                        type='submit'\n                        className='btn btn-primary'\n                    >\n                        <FormattedMessage\n                            id='claim.email_to_ldap.switchTo'\n                            defaultMessage='Switch account to AD/LDAP'\n                        />\n                    </button>\n                    {serverError}\n                </form>\n            );\n        }\n\n        return (\n            <div>\n                <h3>\n                    <FormattedMessage\n                        id='claim.email_to_ldap.title'\n                        defaultMessage='Switch Email/Password Account to AD/LDAP'\n                    />\n                </h3>\n                {content}\n            </div>\n        );\n    }\n}\n\nconst style = {\n    usernameInput: {display: 'none'},\n};\n","// Copyright (c) 2015-present Mattermost, Inc. All Rights Reserved.\n// See LICENSE.txt for license information.\n\nimport PropTypes from 'prop-types';\nimport React from 'react';\nimport {Route, Switch} from 'react-router-dom';\n\nimport logoImage from 'images/logo.png';\nimport BackButton from 'components/common/back_button.jsx';\nimport OAuthToEmail from 'components/claim/components/oauth_to_email';\nimport EmailToOAuth from 'components/claim/components/email_to_oauth';\nimport LDAPToEmail from 'components/claim/components/ldap_to_email';\nimport EmailToLDAP from 'components/claim/components/email_to_ldap';\n\nexport default class ClaimController extends React.PureComponent {\n    static propTypes = {\n        location: PropTypes.object.isRequired,\n        siteName: PropTypes.string,\n        ldapLoginFieldName: PropTypes.string,\n        passwordConfig: PropTypes.object,\n\n        /*\n         * Object from react-router\n         */\n        match: PropTypes.shape({\n            url: PropTypes.string.isRequired,\n        }).isRequired,\n\n        actions: PropTypes.shape({\n            switchLdapToEmail: PropTypes.func.isRequired,\n        }).isRequired,\n    };\n\n    render() {\n        const email = (new URLSearchParams(this.props.location.search)).get('email');\n        const newType = (new URLSearchParams(this.props.location.search)).get('new_type');\n        const currentType = (new URLSearchParams(this.props.location.search)).get('old_type');\n\n        return (\n            <div>\n                <BackButton/>\n                <div className='col-sm-12'>\n                    <div className='signup-team__container'>\n                        <img\n                            alt={'signup logo'}\n                            className='signup-team-logo'\n                            src={logoImage}\n                        />\n                        <div id='claim'>\n                            <Switch>\n                                <Route\n                                    path={`${this.props.match.url}/oauth_to_email`}\n                                    render={() => (\n                                        <OAuthToEmail\n                                            currentType={currentType}\n                                            email={email}\n                                            siteName={this.props.siteName}\n                                            passwordConfig={this.props.passwordConfig}\n                                        />\n                                    )}\n                                />\n                                <Route\n                                    path={`${this.props.match.url}/email_to_oauth`}\n                                    render={() => (\n                                        <EmailToOAuth\n                                            newType={newType}\n                                            email={email}\n                                            siteName={this.props.siteName}\n                                        />\n                                    )}\n                                />\n                                <Route\n                                    path={`${this.props.match.url}/ldap_to_email`}\n                                    render={() => (\n                                        <LDAPToEmail\n                                            email={email}\n                                            passwordConfig={this.props.passwordConfig}\n                                            switchLdapToEmail={this.props.actions.switchLdapToEmail}\n                                        />\n                                    )}\n                                />\n                                <Route\n                                    path={`${this.props.match.url}/email_to_ldap`}\n                                    render={() => (\n                                        <EmailToLDAP\n                                            email={email}\n                                            siteName={this.props.siteName}\n                                            ldapLoginFieldName={this.props.ldapLoginFieldName}\n                                        />\n                                    )}\n                                />\n                            </Switch>\n                        </div>\n                    </div>\n                </div>\n            </div>\n        );\n    }\n}\n","// Copyright (c) 2015-present Mattermost, Inc. All Rights Reserved.\n// See LICENSE.txt for license information.\n\nimport {connect} from 'react-redux';\nimport {bindActionCreators} from 'redux';\n\nimport {switchLdapToEmail} from 'mattermost-redux/actions/users';\nimport {getConfig} from 'mattermost-redux/selectors/entities/general';\n\nimport {getPasswordConfig} from 'utils/utils.jsx';\n\nimport ClaimController from './claim_controller.jsx';\n\nfunction mapStateToProps(state) {\n    const config = getConfig(state);\n    const siteName = config.SiteName;\n    const ldapLoginFieldName = config.LdapLoginFieldName;\n\n    return {\n        siteName,\n        ldapLoginFieldName,\n        passwordConfig: getPasswordConfig(config),\n    };\n}\n\nfunction mapDispatchToProps(dispatch) {\n    return {\n        actions: bindActionCreators({\n            switchLdapToEmail,\n        }, dispatch),\n    };\n}\n\nexport default connect(mapStateToProps, mapDispatchToProps)(ClaimController);\n"],"sourceRoot":""}