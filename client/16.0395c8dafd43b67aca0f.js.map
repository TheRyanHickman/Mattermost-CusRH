{"version":3,"sources":["webpack:///./actions/views/mfa.js","webpack:///./components/audit_table/audit_table.jsx","webpack:///./components/audit_table/index.js","webpack:///./components/user_settings/advanced/join_leave_section/join_leave_section.jsx","webpack:///./components/user_settings/advanced/join_leave_section/index.js","webpack:///./components/user_settings/advanced/user_settings_advanced.jsx","webpack:///./components/user_settings/advanced/index.js","webpack:///./components/color_input.jsx","webpack:///./components/user_settings/display/user_settings_theme/color_chooser.jsx","webpack:///./components/user_settings/display/user_settings_theme/custom_theme_chooser.jsx","webpack:///./components/user_settings/display/user_settings_theme/premade_theme_chooser/premade_theme_chooser.jsx","webpack:///./components/user_settings/display/user_settings_theme/premade_theme_chooser/index.js","webpack:///./components/user_settings/display/user_settings_theme/user_settings_theme.jsx","webpack:///./components/user_settings/display/user_settings_theme/index.js","webpack:///./components/suggestion/timezone_provider.jsx","webpack:///./components/user_settings/display/manage_timezones/manage_timezones.jsx","webpack:///./components/user_settings/display/manage_timezones/index.js","webpack:///./components/user_settings/display/manage_languages/manage_languages.jsx","webpack:///./components/user_settings/display/manage_languages/index.js","webpack:///./components/user_settings/display/user_settings_display.jsx","webpack:///./components/user_settings/display/index.js","webpack:///./components/user_settings/general/user_settings_general.jsx","webpack:///./components/user_settings/general/index.js","webpack:///./components/user_settings/notifications/desktop_notification_settings.jsx","webpack:///./components/user_settings/notifications/email_notification_setting/email_notification_setting.jsx","webpack:///./components/user_settings/notifications/email_notification_setting/index.js","webpack:///./components/user_settings/notifications/manage_auto_responder.jsx","webpack:///./components/user_settings/notifications/user_settings_notifications.jsx","webpack:///./components/user_settings/notifications/index.js","webpack:///./components/access_history_modal/access_history_modal.jsx","webpack:///./components/access_history_modal/index.js","webpack:///./components/activity_log_modal/components/more_info.jsx","webpack:///./components/activity_log_modal/components/activity_log.jsx","webpack:///./components/activity_log_modal/activity_log_modal.jsx","webpack:///./components/activity_log_modal/index.js","webpack:///./components/user_settings/security/mfa_section/mfa_section.jsx","webpack:///./components/user_settings/security/mfa_section/index.js","webpack:///./components/user_settings/security/user_access_token_section/user_access_token_section.jsx","webpack:///./components/user_settings/security/user_access_token_section/index.js","webpack:///./components/user_settings/security/user_settings_security.jsx","webpack:///./components/user_settings/security/index.js","webpack:///./components/user_settings/sidebar/user_settings_sidebar.jsx","webpack:///./components/user_settings/sidebar/index.js","webpack:///./components/user_settings/user_settings.jsx","webpack:///./components/user_settings/index.js"],"names":["__webpack_require__","d","__webpack_exports__","activateMfa","deactivateMfa","generateMfaSecret","mattermost_redux_actions_users__WEBPACK_IMPORTED_MODULE_0__","mattermost_redux_selectors_entities_users__WEBPACK_IMPORTED_MODULE_1__","code","dispatch","getState","currentUserId","getCurrentUserId","UserActions","holders","defineMessages","sessionRevoked","id","t","defaultMessage","channelCreated","establishedDM","nameUpdated","headerUpdated","channelDeleted","userAdded","userRemoved","attemptedRegisterApp","attemptedAllowOAuthAccess","successfullOAuthAccess","failedOAuthAccess","attemptedOAuthToken","successfullOAuthToken","oauthTokenFailed","attemptedLogin","authenticated","defauleMessage","successfullLogin","failedLogin","updatePicture","updateGeneral","attemptedPassword","successfullPassword","failedPassword","updatedRol","member","accountActive","accountInactive","by","byAdmin","sentEmail","attemptedReset","successfullReset","updateGlobalNotifications","attemptedWebhookCreate","succcessfullWebhookCreate","failedWebhookCreate","attemptedWebhookDelete","successfullWebhookDelete","failedWebhookDelete","logout","verified","revokedAll","loginAttempt","loginFailure","attemptedLicenseAdd","successfullLicenseAdd","failedExpiredLicenseAdd","failedInvalidLicenseAdd","licenseRemoved","AuditTable","_React$PureComponent","_classCallCheck","this","_possibleConstructorReturn","_getPrototypeOf","apply","arguments","_inherits","React","PureComponent","key","value","ids","props","audits","map","audit","user_id","actions","getMissingProfilesByIds","userIdContent","ipContent","sessionContent","showUserId","showIp","showSession","accessList","i","length","auditInfo","formatAuditInfo","uContent","react_default","a","createElement","className","userId","iContent","ip","sContent","sessionId","descStyle","desc","toLowerCase","indexOf","timestamp","index_es","formatMessage","intl","actionURL","action","replace","auditDesc","channelObj","channelInfo","extra_info","split","channelNameField","channelURL","channelName","getByName","display_name","username","getDirectTeammate","userIdField","profile","getUser","test","url","oauthInfo","clientIdField","oauthTokenFailure","trim","token","userInfo","userRoles","updateType","updateField","actingUserInfo","actingUser","user","currentUser","isSystemAdmin","roles","email","webhookInfo","licenseInfo","toTitleCase","actionDesc","lastIndexOf","substring","extraInfoDesc","date","Date","create_at","day","month","year","hour","minute","auditProfile","ip_address","session_id","intlShape","isRequired","PropTypes","array","bool","object","func","shape","injectIntl","connect","state","getCurrentUser","getChannelByName","bindActionCreators","JoinLeaveSection","_this","call","_defineProperty","_assertThisInitialized","e","currentTarget","setState","joinLeaveState","section","joinLeave","onUpdateSection","_this$props","joinLeavePreference","category","Preferences","CATEGORY_ADVANCED_SETTINGS","name","ADVANCED_FILTER_JOIN_LEAVE","savePreferences","activeSection","AdvancedSections","JOIN_LEAVE","setting_item_max","title","inputs","type","checked","onChange","handleOnChange","setting","submit","handleSubmit","saving","isSaving","server_error","serverError","updateSection","handleUpdateSection","setting_item_min","describe","renderOnOffLabel","string","getPreference","PreReleaseFeatures","Constants","PRE_RELEASE_FEATURES","AdvancedSettingsDisplay","user_settings_advanced_classCallCheck","user_settings_advanced_getPrototypeOf","user_settings_advanced_defineProperty","user_settings_advanced_assertThisInitialized","advancedSettings","advancedSettingsCategory","settings","send_on_ctrl_enter","sendOnCtrlEnter","code_block_ctrl_enter","codeBlockOnCtrlEnter","formatting","join_leave","preReleaseFeaturesKeys","Object","keys","enabledFeatures","_iteratorNormalCompletion","_didIteratorError","_iteratorError","undefined","_step","_iterator","Symbol","iterator","next","done","as","_i","_preReleaseFeaturesKe","feature","FeatureTogglePrefix","label","err","return","previewFeaturesEnabled","enablePreviewFeatures","preReleaseFeatures","showDeactivateAccountModal","String","forEach","features","push","_ref","_asyncToGenerator","regeneratorRuntime","mark","_callee","preferences","wrap","_context","prev","Array","isArray","stop","_x","_callee2","_ref4","data","error","_context2","updateUserActive","then","_ref3","message","revokeAllSessionsForUser","sent","emitUserLoggedOutEvent","getStateFromProps","updateSetting","bind","enabled","ctrlEnter","codeBlockCtrlEnter","ctrlSendSection","_this2","ctrlSendActive","renderCtrlEnterLabel","previewFeaturesSection","previewFeaturesSectionDivider","formattingSection","renderFormattingSection","formattingSectionDivider","toggleFeature","target","renderFeatureLabel","saveEnabledFeatures","Utils","values","count","deactivateAccountSection","makeConfirmationModal","auth_service","enableUserDeactivation","saveButtonText","handleShowDeactivateAccountModal","deactivateMemberButton","confirm_modal","show","confirmButtonClass","confirmButtonText","onConfirm","handleDeactivateAccountSubmit","onCancel","handleHideDeactivateAccountModal","data-dismiss","aria-label","onClick","closeModal","aria-hidden","ref","collapseModal","back_icon","join_leave_section","getAdvancedSettingsCategory","makeGetCategory","config","getConfig","EnablePreviewFeatures","EnableUserDeactivation","get","ColorInput","color_input_classCallCheck","color_input_getPrototypeOf","color_input_defineProperty","color_input_assertThisInitialized","colorPickerDOMNode","ReactDom","findDOMNode","colorPicker","contains","isOpened","newColorData","hex","handleChange","node","idOpened","Component","prevProps","prevState","prevIsOpened","document","addEventListener","checkClick","removeEventListener","color","readOnly","togglePicker","style","backgroundColor","getColorPicker","lib","ColorChooser","newColor","_this$props2","color_input","messages","sidebarBg","sidebarText","sidebarHeaderBg","sidebarHeaderTextColor","sidebarUnreadText","sidebarTextHoverBg","sidebarTextActiveBorder","sidebarTextActiveColor","onlineIndicator","awayIndicator","dndIndicator","mentionBg","mentionColor","centerChannelBg","centerChannelColor","newMessageSeparator","linkColor","buttonBg","buttonColor","errorTextColor","mentionHighlightBg","mentionHighlightLink","codeTheme","CustomThemeChooser","custom_theme_chooser_classCallCheck","custom_theme_chooser_getPrototypeOf","custom_theme_chooser_defineProperty","custom_theme_chooser_assertThisInitialized","settingId","updateTheme","theme","newTheme","_objectSpread","mentionBj","copyTheme","setCopyTheme","text","window","clipboardData","getData","JSON","parse","stringify","stopPropagation","textarea","refs","focus","setSelectionRange","preventDefault","$","sidebarStylesHeader","toggleClass","toggleSection","sidebarStyles","centerChannelStylesHeader","centerChannelStyles","linkAndButtonStylesHeader","linkAndButtonStyles","on","onCodeThemeChange","off","assign","image","UserAgent","slideToggle","context","sidebarElements","centerChannelElements","linkAndButtonElements","THEME_ELEMENTS","element","index","codeThemeOptions","codeThemeURL","themes","codeThemeIndex","iconURL","uiName","popoverContent","Popover","bsStyle","width","alt","src","defaultValue","OverlayTrigger","placement","overlay","group","color_chooser","handleColorChange","pasteBox","onPaste","pasteBoxChange","onChangeHandle","selectTheme","toggleSidebarStyles","toggleCenterChannelStyles","toggleLinkAndButtonStyles","PremadeThemeChooser","premadeThemes","allowedThemes","hasAllowedThemes","k","THEMES","hasOwnProperty","premadeTheme","extend","activeClass","concat","propTypes","arrayOf","defaultProps","AllowedThemes","ThemeSetting","user_settings_theme_classCallCheck","user_settings_theme_getPrototypeOf","user_settings_theme_defineProperty","user_settings_theme_assertThisInitialized","user_settings_theme_asyncToGenerator","teamId","applyToAllTeams","currentTeamId","saveTheme","deleteTeamSpecificThemes","setRequireConfirm","originalTheme","scrollToTop","themeChanged","field","AppDispatcher","handleViewAction","ActionTypes","TOGGLE_IMPORT_THEME_MODAL","callback","setEnforceFocus","user_settings_theme_objectSpread","selected","ReactDOM","addClass","removeClass","nextProps","resetFields","DEFAULT_CODE_THEME","showAllTeamsCheckbox","scrollTop","custom","premade","themeUI","displayCustom","allowCustomThemes","custom_theme_chooser_CustomThemeChooser","premade_theme_chooser","href","rel","handleImportModal","allTeamsCheckbox","submitExtra","submitTheme","focused","getThemeCategory","getCurrentTeamId","getTheme","CATEGORY_THEME","getMyTeamsCount","UserSettingsTheme","TimezoneSuggestion","Suggestion","timezone","item","isSelection","handleClick","baseProps","TimezoneProvider","Provider","timezonePrefix","resultsCallback","displayAllTimezones","filterTimezones","matchedPretext","terms","getSupportedTimezones","items","component","filteredTimezones","filter","getTimezoneRegion","ManageTimezones","manage_timezones_classCallCheck","manage_timezones_getPrototypeOf","manage_timezones_defineProperty","manage_timezones_assertThisInitialized","manualTimezoneInput","manualTimezone","_this$state","useAutomaticTimezone","automaticTimezone","oldUseAutomaticTimezone","oldAutomaticTimezone","oldManualTimezone","timezoneNotChanged","submitUser","_this$state2","updatedUser","manage_timezones_objectSpread","toString","updateMe","getBrowserTimezone","timezones","_this$state3","timezoneRegion","noTimezonesFromServer","automaticTimezoneInput","handleAutomaticTimezone","disabled","providers","suggestion_box","setSwitchBoxRef","onItemSelected","handleTimezoneSelected","listComponent","SuggestionList","maxLength","requiredCharacters","listStyle","completeOnTab","renderDividers","openOnFocus","containerStyle","changeTimezone","ManageLanguage","manage_languages_classCallCheck","manage_languages_getPrototypeOf","manage_languages_defineProperty","manage_languages_assertThisInitialized","isKeyPressed","KeyCodes","ESCAPE","openMenu","querySelector","classList","remove","ENTER","add","selectedOption","locale","manage_languages_objectSpread","locales","I18n","userLocale","reactSelectContainer","createRef","current","handleContainerKeyDown","options","l","order","sort","b","lang","reactStyles","menuPortal","provided","zIndex","input","react_select_esm","classNamePrefix","menuIsOpen","menuPortalTarget","body","styles","clearable","setLanguage","onKeyDown","handleKeyDown","onMenuClose","handleMenuClose","onMenuOpen","handleMenuOpen","formatted_markdown_message","changeLanguage","ManageLanguages","getDisplayStateFromProps","militaryTime","teammateNameDisplay","channelDisplayMode","messageDisplay","collapseDisplay","linkPreviewDisplay","UserSettingsDisplay","user_settings_display_classCallCheck","user_settings_display_getPrototypeOf","user_settings_display_defineProperty","user_settings_display_assertThisInitialized","user_settings_display_asyncToGenerator","timePreference","teammateNameDisplayPreference","channelDisplayModePreference","messageDisplayPreference","collapseDisplayPreference","linkPreviewDisplayPreference","CATEGORY_DISPLAY_SETTINGS","USE_MILITARY_TIME","NAME_NAME_FORMAT","CHANNEL_DISPLAY_MODE","MESSAGE_DISPLAY","COLLAPSE_DISPLAY","LINK_PREVIEW_DISPLAY","updateState","newState","user_settings_display_objectSpread","prevSections","clock","linkpreview","message_display","channel_display_mode","languages","enableTimezone","shouldAutoUpdateTimezone","autoUpdateTimezone","display","moreColon","firstMessageMore","firstOption","secondOption","thirdOption","description","firstMessage","radionButtonText","moreId","moreMessage","secondMessageMore","thirdMessage","secondMessage","messageTitle","messageDesc","format","firstDisplay","secondDisplay","thirdSection","thirdDisplay","collapseSection","createSection","defaultDisplay","linkPreviewSection","enableLinkPreviews","timezoneSelection","clockSection","teammateNameDisplaySection","configTeammateNameDisplay","TEAMMATE_NAME_DISPLAY","SHOW_USERNAME","SHOW_NICKNAME_FULLNAME","SHOW_FULLNAME","userTimezone","manage_timezones","currentUserTimezone","languagesSection","themeSection","messageDisplaySection","MESSAGE_DISPLAY_CLEAN","MESSAGE_DISPLAY_COMPACT","channelDisplayModeSection","CHANNEL_DISPLAY_MODE_FULL_SCREEN","CHANNEL_DISPLAY_MODE_CENTERED","defaultClientLocale","manage_languages","enableThemeSelection","user_settings_theme","getTimezones","getUserTimezone","automaticTimezoneNotSet","AllowCustomThemes","EnableLinkPreviews","DefaultClientLocale","EnableThemeSelection","ExperimentalTimezone","TeammateNameDisplay","getUserCurrentTimezone","USE_MILITARY_TIME_DEFAULT","CHANNEL_DISPLAY_MODE_DEFAULT","MESSAGE_DISPLAY_DEFAULT","COLLAPSE_DISPLAY_DEFAULT","LINK_PREVIEW_DISPLAY_DEFAULT","usernameReserved","usernameRestrictions","validEmail","emailMatch","incorrectPassword","emptyPassword","validImage","imageTooLarge","uploadImage","uploadImageMobile","fullName","nickname","profilePicture","close","position","UserSettingsGeneralTab","user_settings_general_classCallCheck","user_settings_general_getPrototypeOf","user_settings_general_defineProperty","user_settings_general_assertThisInitialized","resendStatus","showSpinner","sendVerificationEmail","loading_wrapper","loading","handleEmailResend","setTimeout","usernameError","clientError","min","MIN_USERNAME_LENGTH","max","MAX_USERNAME_LENGTH","trackEvent","firstName","lastName","first_name","last_name","confirmEmail","currentPassword","isEmail","password","emailError","emailUpdated","sectionIsSaving","_ref2","getMe","sendEmailNotifications","requireEmailVerification","clearErrors","logError","AnnouncementBarMessages","EMAIL_VERIFICATION_REQUIRED","AnnouncementBarTypes","SUCCESS","server_error_id","user_settings_general_asyncToGenerator","setDefaultProfileImage","submitActive","t0","pictureFile","file","AcceptedProfileImageTypes","includes","size","maxFileSize","loadingPicture","uploadProfileImage","setupInitialState","files","originalEmail","emailSection","emailEnabled","emailVerificationEnabled","helpText","autoFocus","updateEmail","updateConfirmEmail","updateCurrentPassword","submitEmail","GITLAB_SERVICE","GOOGLE_SERVICE","OFFICE365_SERVICE","LDAP_SERVICE","SAML_SERVICE","nameSection","nicknameSection","usernameSection","positionSection","extraInfo","ldapFirstNameAttributeSet","ldapLastNameAttributeSet","samlFirstNameAttributeSet","samlLastNameAttributeSet","updateFirstName","onFocus","updateLastName","notifLink","updateTab","notify","submitName","ldapNicknameAttributeSet","samlNicknameAttributeSet","nicknameLabel","updateNickname","MAX_NICKNAME_LENGTH","autoCapitalize","submitNickname","usernameLabel","updateUsername","submitUsername","ldapPositionAttributeSet","samlPositionAttributeSet","positionLabel","updatePosition","MAX_POSITION_LENGTH","submitPosition","pictureSection","createEmailSection","setting_picture","onSubmit","submitPicture","onSetDefault","last_picture_update","setDefaultProfilePicture","defaultImageSrc","onFileChange","minMessage","number","SendEmailNotifications","RequireEmailVerification","parseInt","MaxFileSize","LdapFirstNameAttributeSet","LdapLastNameAttributeSet","SamlFirstNameAttributeSet","SamlLastNameAttributeSet","LdapNicknameAttributeSet","SamlNicknameAttributeSet","SamlPositionAttributeSet","LdapPositionAttributeSet","DesktopNotificationSettings","cancel","getAttribute","setParentState","soundSection","activityRadio","activity","NotificationLevels","MENTION","NONE","soundRadio","sound","data-key","data-value","ALL","handleMaxUpdateSection","formattedMessageProps","hasSoundOption","handleMinUpdateSection","active","buildMaximizedSetting","buildMinimizedSetting","SECONDS_PER_MINUTE","EmailNotificationSetting","email_notification_setting_classCallCheck","email_notification_setting_getPrototypeOf","email_notification_setting_defineProperty","email_notification_setting_assertThisInitialized","enableEmail","newInterval","email_notification_setting_asyncToGenerator","emailIntervalPreference","emailInterval","CATEGORY_NOTIFICATIONS","EMAIL_INTERVAL","INTERVAL_IMMEDIATE","INTERVAL_HOUR","INTERVAL_FIFTEEN_MINUTES","localizeMessage","batchingOptions","batchingInfo","enableEmailBatching","data-enable-email","data-email-interval","INTERVAL_NEVER","siteName","getEmailInterval","renderMinSettingView","renderMaxSettingView","INTERVAL_NOT_SET","EnableEmailBatching","ManageAutoResponder","autoResponderActive","autoResponderMessage","activeToggle","handleAutoResponderChecked","autosize_textarea","resize","rows","placeholder","onMessageChanged","shiftEnter","getNotificationsStateFromProps","desktop","comments","pushActivity","pushStatus","UserStatuses","AWAY","notify_props","desktop_sound","push_status","auto_responder_active","auto_responder_message","usernameKey","customKeys","firstNameKey","channelKey","mention_keys","splice","join","channel","desktopActivity","desktopSound","customKeysChecked","notifyCommentsLevel","NotificationsTab","user_settings_notifications_classCallCheck","user_settings_notifications_getPrototypeOf","user_settings_notifications_defineProperty","user_settings_notifications_assertThisInitialized","mentionKeys","stringKeys","result","handleCancel","val","customcheck","custommentions","updateCustomMentionKeys","sendPushNotifications","pushActivityRadio","pushStatusSettings","pushStatusRadio","ONLINE","handlePushStatusRadio","OFFLINE","handlePushRadio","keysSection","commentsSection","autoResponderSection","updateFirstNameKey","updateUsernameKey","updateChannelKey","onCustomChange","aria-labelledby","commentsActive","handleNotifyCommentsRadio","enableAutoResponder","manage_auto_responder_ManageAutoResponder","setStateValue","pushNotificationSection","createPushNotificationSection","desktop_notification_settings_DesktopNotificationSettings","email_notification_setting","handleEmailRadio","activeTab","SiteName","SendPushNotifications","ExperimentalEnableAutomaticReplies","UserSettingsNotifications","AccessHistoryModal","access_history_modal_classCallCheck","access_history_modal_getPrototypeOf","access_history_modal_defineProperty","access_history_modal_assertThisInitialized","getUserAudits","isMobile","perfectScrollbar","onShow","content","userAudits","loading_screen","audit_table","Modal","dialogClassName","onHide","onExited","bsSize","role","Header","closeButton","Title","componentClass","Body","Footer","getCurrentUserAudits","MoreInfo","currentSession","moreInfo","handleMoreInfo","firstAccessTime","getMonthLong","time","os","browser","ActivityLog","activity_log_classCallCheck","activity_log_getPrototypeOf","activity_log_defineProperty","activity_log_assertThisInitialized","submitRevoke","session","device_id","deviceTypeId","deviceTypeMessage","devicePicture","deviceTitle","General","PUSH_NOTIFY_APPLE_REACT_NATIVE","PUSH_NOTIFY_ANDROID_REACT_NATIVE","devicePlatform","lastAccessTime","last_activity_at","platform","isMobileSession","sessionInfo","mobileSessionInfo","ActivityLogModal","activity_log_modal_classCallCheck","activity_log_modal_getPrototypeOf","activity_log_modal_defineProperty","activity_log_modal_assertThisInitialized","altId","modalContent","closest","revokeSession","getSessions","sessions","activityList","reduce","activity_log_ActivityLog","oneOfType","getUserSessions","getCurrentLocale","MfaSection","browserHistory","abrupt","mfaEnforced","mfaActive","buttonText","removeMfa","setupMfa","renderTitle","mfaAvailable","renderContent","renderHelpText","renderDescription","license","getLicense","mfaLicensed","IsLicensed","MFA","mfaEnabled","EnableMultifactorAuthentication","EnforceMultifactorAuthentication","mfa_active","TOKEN_CREATING","TOKEN_CREATED","TOKEN_NOT_CREATING","UserAccessTokenSection","user_access_token_section_classCallCheck","user_access_token_section_getPrototypeOf","user_access_token_section_defineProperty","user_access_token_section_assertThisInitialized","tokenCreationState","user_access_token_section_asyncToGenerator","handleCancelConfirm","newtokendescription","tokenError","confirmCopyToken","createUserAccessToken","newToken","confirmAction","showConfirmModal","confirmTitle","confirmMessage","confirmButton","confirmComplete","confirmHideCancel","UserUtils","handleCreateToken","confirmCreateToken","tokenId","userAccessTokens","revokeToken","revokeUserAccessToken","_ref5","_callee3","_ref6","_context3","enableUserAccessToken","_x2","_ref7","_callee4","_ref8","_context4","disableUserAccessToken","_x3","clearUserAccessTokens","getUserAccessTokensForUser","tokenListClass","noTokenText","newTokenSection","tokenList","activeLink","activeStatus","is_active","deactivateToken","activateToken","confirmRevokeToken","onKeyPress","saveTokenKeyPress","save_button","btnClass","savingMessage","stopCreatingToken","warning_icon","additionalClassName","startCreatingToken","infoPosition","cancelButtonText","hideCancel","entities","users","myUserAccessTokens","SECTION_MFA","SECTION_PASSWORD","SECTION_SIGNIN","SECTION_APPS","SECTION_TOKENS","SecurityTab","user_settings_security_classCallCheck","user_settings_security_getPrototypeOf","user_settings_security_defineProperty","user_settings_security_assertThisInitialized","user_settings_security_asyncToGenerator","getAuthorizedOAuthApps","authorizedApps","newPassword","confirmPassword","_Utils$isValidPasswor","valid","defaultState","passwordError","passwordConfig","getDefaultState","savingPassword","updateUserPassword","appId","deauthorizeOAuthApp","app","submitPassword","updateNewPassword","updateConfirmPassword","last_password_update","hour12","emailOption","gitlabOption","googleOption","office365Option","ldapOption","samlOption","enableSignUpWithGitLab","react_router_dom","to","encodeURIComponent","enableSignUpWithGoogle","enableSignUpWithOffice365","enableLdap","enableSaml","enableSignUpWithEmail","link","apps","homepage","data-app","deauthorizeApp","icon_url","icon50","wrapperClass","authService","enableOAuthServiceProvider","loadAuthorizedOAuthApps","signInSection","oauthSection","tokensSection","passwordSection","createPasswordSection","numMethods","experimentalEnableAuthenticationTransfer","createSignInSection","createOAuthAppsSection","canUseAccessTokens","user_access_token_section","ariaLabel","mfa_section","toggle_modal_button","dialogType","ownProps","tokensEnabled","EnableUserAccessTokens","userHasTokenRole","EnableOAuthServiceProvider","EnableSignUpWithEmail","EnableSignUpWithGitLab","EnableSignUpWithGoogle","EnableLdap","EnableSaml","EnableSignUpWithOffice365","ExperimentalEnableAuthenticationTransfer","getPasswordConfig","getBool","UserSettingsSidebar","user_settings_sidebar_classCallCheck","user_settings_sidebar_getPrototypeOf","user_settings_sidebar_defineProperty","user_settings_sidebar_assertThisInitialized","closeUnusedDirectMessages","channelSwitcherOption","_this$props$sidebarPr","sidebarPreference","grouping","sorting","close_unused_direct_messages","channel_switcher_section","unreadsAtTop","favoriteAtTop","updatedSidebarSettings","unreads_at_top","favorite_at_top","CATEGORY_SIDEBAR_SETTINGS","trackSettingChangeIfNecessary","sectionName","showChannelOrganization","contents","renderAutoCloseDMLabel","Fragment","sortingId","sortingDefaultMessage","_this$props3","_this$props3$sidebarP","atTopId","atTopDefaultMessage","_this$state$settings","renderOrganizationLabel","channelSwitcherSectionDescId","channelSwitcherSectionDescDefault","isMac","helpChannelSwitcherText","renderChannelSwitcherLabel","_this$props4","showUnusedOption","channelOrganizationSection","renderChannelOrganizationSection","autoCloseDMSection","renderAutoCloseDMSection","channelSwitcherSection","renderChannelSwitcherSection","getSidebarPreferences","ExperimentalChannelOrganization","CloseUnusedDirectMessages","UserSettings","components_user_settings_general","security","notifications","user_settings_display","sidebar","advanced"],"mappings":"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","file":"16.0395c8dafd43b67aca0f.js","sourcesContent":["// Copyright (c) 2015-present Mattermost, Inc. All Rights Reserved.\n// See LICENSE.txt for license information.\n\nimport * as UserActions from 'mattermost-redux/actions/users';\nimport {getCurrentUserId} from 'mattermost-redux/selectors/entities/users';\n\nexport function activateMfa(code) {\n    return (dispatch, getState) => {\n        const currentUserId = getCurrentUserId(getState());\n\n        return dispatch(UserActions.updateUserMfa(currentUserId, true, code));\n    };\n}\n\nexport function deactivateMfa() {\n    return (dispatch, getState) => {\n        const currentUserId = getCurrentUserId(getState());\n\n        return dispatch(UserActions.updateUserMfa(currentUserId, false));\n    };\n}\n\nexport function generateMfaSecret() {\n    return (dispatch, getState) => {\n        const currentUserId = getCurrentUserId(getState());\n\n        return dispatch(UserActions.generateMfaSecret(currentUserId));\n    };\n}\n\n","// Copyright (c) 2015-present Mattermost, Inc. All Rights Reserved.\n// See LICENSE.txt for license information.\n\nimport PropTypes from 'prop-types';\nimport React from 'react';\nimport {defineMessages, FormattedDate, FormattedMessage, FormattedTime, injectIntl, intlShape} from 'react-intl';\n\nimport {getDirectTeammate, isSystemAdmin, toTitleCase} from 'utils/utils.jsx';\nimport {t} from 'utils/i18n';\n\nconst holders = defineMessages({\n    sessionRevoked: {\n        id: t('audit_table.sessionRevoked'),\n        defaultMessage: 'The session with id {sessionId} was revoked',\n    },\n    channelCreated: {\n        id: t('audit_table.channelCreated'),\n        defaultMessage: 'Created the {channelName} channel',\n    },\n    establishedDM: {\n        id: t('audit_table.establishedDM'),\n        defaultMessage: 'Established a direct message channel with {username}',\n    },\n    nameUpdated: {\n        id: t('audit_table.nameUpdated'),\n        defaultMessage: 'Updated the {channelName} channel name',\n    },\n    headerUpdated: {\n        id: t('audit_table.headerUpdated'),\n        defaultMessage: 'Updated the {channelName} channel header',\n    },\n    channelDeleted: {\n        id: t('audit_table.channelDeleted'),\n        defaultMessage: 'Archived the channel with the URL {url}',\n    },\n    userAdded: {\n        id: t('audit_table.userAdded'),\n        defaultMessage: 'Added {username} to the {channelName} channel',\n    },\n    userRemoved: {\n        id: t('audit_table.userRemoved'),\n        defaultMessage: 'Removed {username} to the {channelName} channel',\n    },\n    attemptedRegisterApp: {\n        id: t('audit_table.attemptedRegisterApp'),\n        defaultMessage: 'Attempted to register a new OAuth Application with ID {id}',\n    },\n    attemptedAllowOAuthAccess: {\n        id: t('audit_table.attemptedAllowOAuthAccess'),\n        defaultMessage: 'Attempted to allow a new OAuth service access',\n    },\n    successfullOAuthAccess: {\n        id: t('audit_table.successfullOAuthAccess'),\n        defaultMessage: 'Successfully gave a new OAuth service access',\n    },\n    failedOAuthAccess: {\n        id: t('audit_table.failedOAuthAccess'),\n        defaultMessage: 'Failed to allow a new OAuth service access - the redirect URI did not match the previously registered callback',\n    },\n    attemptedOAuthToken: {\n        id: t('audit_table.attemptedOAuthToken'),\n        defaultMessage: 'Attempted to get an OAuth access token',\n    },\n    successfullOAuthToken: {\n        id: t('audit_table.successfullOAuthToken'),\n        defaultMessage: 'Successfully added a new OAuth service',\n    },\n    oauthTokenFailed: {\n        id: t('audit_table.oauthTokenFailed'),\n        defaultMessage: 'Failed to get an OAuth access token - {token}',\n    },\n    attemptedLogin: {\n        id: t('audit_table.attemptedLogin'),\n        defaultMessage: 'Attempted to login',\n    },\n    authenticated: {\n        id: t('audit_table.authenticated'),\n        defauleMessage: 'Successfully authenticated',\n    },\n    successfullLogin: {\n        id: t('audit_table.successfullLogin'),\n        defaultMessage: 'Successfully logged in',\n    },\n    failedLogin: {\n        id: t('audit_table.failedLogin'),\n        defaultMessage: 'FAILED login attempt',\n    },\n    updatePicture: {\n        id: t('audit_table.updatePicture'),\n        defaultMessage: 'Updated your profile picture',\n    },\n    updateGeneral: {\n        id: t('audit_table.updateGeneral'),\n        defaultMessage: 'Updated the general settings of your account',\n    },\n    attemptedPassword: {\n        id: t('audit_table.attemptedPassword'),\n        defaultMessage: 'Attempted to change password',\n    },\n    successfullPassword: {\n        id: t('audit_table.successfullPassword'),\n        defaultMessage: 'Successfully changed password',\n    },\n    failedPassword: {\n        id: t('audit_table.failedPassword'),\n        defaultMessage: 'Failed to change password - tried to update user password who was logged in through OAuth',\n    },\n    updatedRol: {\n        id: t('audit_table.updatedRol'),\n        defaultMessage: 'Updated user role(s) to ',\n    },\n    member: {\n        id: t('audit_table.member'),\n        defaultMessage: 'member',\n    },\n    accountActive: {\n        id: t('audit_table.accountActive'),\n        defaultMessage: 'Account activated',\n    },\n    accountInactive: {\n        id: t('audit_table.accountInactive'),\n        defaultMessage: 'Account deactivated',\n    },\n    by: {\n        id: t('audit_table.by'),\n        defaultMessage: ' by {username}',\n    },\n    byAdmin: {\n        id: t('audit_table.byAdmin'),\n        defaultMessage: ' by an admin',\n    },\n    sentEmail: {\n        id: t('audit_table.sentEmail'),\n        defaultMessage: 'Sent an email to {email} to reset your password',\n    },\n    attemptedReset: {\n        id: t('audit_table.attemptedReset'),\n        defaultMessage: 'Attempted to reset password',\n    },\n    successfullReset: {\n        id: t('audit_table.successfullReset'),\n        defaultMessage: 'Successfully reset password',\n    },\n    updateGlobalNotifications: {\n        id: t('audit_table.updateGlobalNotifications'),\n        defaultMessage: 'Updated your global notification settings',\n    },\n    attemptedWebhookCreate: {\n        id: t('audit_table.attemptedWebhookCreate'),\n        defaultMessage: 'Attempted to create a webhook',\n    },\n    succcessfullWebhookCreate: {\n        id: t('audit_table.successfullWebhookCreate'),\n        defaultMessage: 'Successfully created a webhook',\n    },\n    failedWebhookCreate: {\n        id: t('audit_table.failedWebhookCreate'),\n        defaultMessage: 'Failed to create a webhook - bad channel permissions',\n    },\n    attemptedWebhookDelete: {\n        id: t('audit_table.attemptedWebhookDelete'),\n        defaultMessage: 'Attempted to delete a webhook',\n    },\n    successfullWebhookDelete: {\n        id: t('audit_table.successfullWebhookDelete'),\n        defaultMessage: 'Successfully deleted a webhook',\n    },\n    failedWebhookDelete: {\n        id: t('audit_table.failedWebhookDelete'),\n        defaultMessage: 'Failed to delete a webhook - inappropriate conditions',\n    },\n    logout: {\n        id: t('audit_table.logout'),\n        defaultMessage: 'Logged out of your account',\n    },\n    verified: {\n        id: t('audit_table.verified'),\n        defaultMessage: 'Successfully verified your email address',\n    },\n    revokedAll: {\n        id: t('audit_table.revokedAll'),\n        defaultMessage: 'Revoked all current sessions for the team',\n    },\n    loginAttempt: {\n        id: t('audit_table.loginAttempt'),\n        defaultMessage: ' (Login attempt)',\n    },\n    loginFailure: {\n        id: t('audit_table.loginFailure'),\n        defaultMessage: ' (Login failure)',\n    },\n    attemptedLicenseAdd: {\n        id: t('audit_table.attemptedLicenseAdd'),\n        defaultMessage: 'Attempted to add new license',\n    },\n    successfullLicenseAdd: {\n        id: t('audit_table.successfullLicenseAdd'),\n        defaultMessage: 'Successfully added new license',\n    },\n    failedExpiredLicenseAdd: {\n        id: t('audit_table.failedExpiredLicenseAdd'),\n        defaultMessage: 'Failed to add a new license as it has either expired or not yet been started',\n    },\n    failedInvalidLicenseAdd: {\n        id: t('audit_table.failedInvalidLicenseAdd'),\n        defaultMessage: 'Failed to add an invalid license',\n    },\n    licenseRemoved: {\n        id: t('audit_table.licenseRemoved'),\n        defaultMessage: 'Successfully removed a license',\n    },\n});\n\nexport class AuditTable extends React.PureComponent {\n    static propTypes = {\n        intl: intlShape.isRequired,\n        audits: PropTypes.array.isRequired,\n        showUserId: PropTypes.bool,\n        showIp: PropTypes.bool,\n        showSession: PropTypes.bool,\n        currentUser: PropTypes.object.isRequired,\n        getUser: PropTypes.func.isRequired,\n        getByName: PropTypes.func.isRequired,\n\n        actions: PropTypes.shape({\n            getMissingProfilesByIds: PropTypes.func.isRequired,\n        }).isRequired,\n    }\n\n    componentDidMount() {\n        const ids = this.props.audits.map((audit) => audit.user_id);\n        this.props.actions.getMissingProfilesByIds(ids);\n    }\n\n    render() {\n        const audits = this.props.audits;\n        const showUserId = this.props.showUserId;\n        const showIp = this.props.showIp;\n        const showSession = this.props.showSession;\n        var accessList = [];\n\n        for (var i = 0; i < audits.length; i++) {\n            const audit = audits[i];\n            const auditInfo = this.formatAuditInfo(audit);\n\n            let uContent;\n            if (showUserId) {\n                uContent = <td className='word-break--all'>{auditInfo.userId}</td>;\n            }\n\n            let iContent;\n            if (showIp) {\n                iContent = <td className='whitespace--nowrap word-break--all'>{auditInfo.ip}</td>;\n            }\n\n            let sContent;\n            if (showSession) {\n                sContent = <td className='whitespace--nowrap word-break--all'>{auditInfo.sessionId}</td>;\n            }\n\n            let descStyle = '';\n            if (auditInfo.desc.toLowerCase().indexOf('fail') !== -1) {\n                descStyle = ' color--error';\n            }\n\n            accessList[i] = (\n                <tr key={audit.id}>\n                    <td className='whitespace--nowrap word-break--all'>{auditInfo.timestamp}</td>\n                    {uContent}\n                    <td\n                        className={'word-break--all' + descStyle}\n                    >\n                        {auditInfo.desc}\n                    </td>\n                    {iContent}\n                    {sContent}\n                </tr>\n            );\n        }\n\n        let userIdContent;\n        if (showUserId) {\n            userIdContent = (\n                <th>\n                    <FormattedMessage\n                        id='audit_table.userId'\n                        defaultMessage='User ID'\n                    />\n                </th>\n            );\n        }\n\n        let ipContent;\n        if (showIp) {\n            ipContent = (\n                <th>\n                    <FormattedMessage\n                        id='audit_table.ip'\n                        defaultMessage='IP Address'\n                    />\n                </th>\n            );\n        }\n\n        let sessionContent;\n        if (showSession) {\n            sessionContent = (\n                <th>\n                    <FormattedMessage\n                        id='audit_table.session'\n                        defaultMessage='Session ID'\n                    />\n                </th>\n            );\n        }\n\n        return (\n            <table className='table'>\n                <thead>\n                    <tr>\n                        <th>\n                            <FormattedMessage\n                                id='audit_table.timestamp'\n                                defaultMessage='Timestamp'\n                            />\n                        </th>\n                        {userIdContent}\n                        <th>\n                            <FormattedMessage\n                                id='audit_table.action'\n                                defaultMessage='Action'\n                            />\n                        </th>\n                        {ipContent}\n                        {sessionContent}\n                    </tr>\n                </thead>\n                <tbody>\n                    {accessList}\n                </tbody>\n            </table>\n        );\n    }\n\n    formatAuditInfo(audit) {\n        const {formatMessage} = this.props.intl;\n        const actionURL = audit.action.replace(/\\/api\\/v[1-9]/, '');\n        let auditDesc = '';\n\n        if (actionURL.indexOf('/channels') === 0) {\n            const channelInfo = audit.extra_info.split(' ');\n            const channelNameField = channelInfo[0].split('=');\n\n            let channelURL = '';\n            let channelObj;\n            let channelName = '';\n            if (channelNameField.indexOf('name') >= 0) {\n                channelURL = channelNameField[channelNameField.indexOf('name') + 1];\n                channelObj = this.props.getByName(channelURL);\n                if (channelObj) {\n                    channelName = channelObj.display_name;\n                } else {\n                    channelName = channelURL;\n                }\n            }\n\n            switch (actionURL) {\n            case '/channels/create':\n                auditDesc = formatMessage(holders.channelCreated, {channelName});\n                break;\n            case '/channels/create_direct':\n                auditDesc = formatMessage(holders.establishedDM, {username: getDirectTeammate(channelObj.id).username});\n                break;\n            case '/channels/update':\n                auditDesc = formatMessage(holders.nameUpdated, {channelName});\n                break;\n            case '/channels/update_desc': // support the old path\n            case '/channels/update_header':\n                auditDesc = formatMessage(holders.headerUpdated, {channelName});\n                break;\n            default: {\n                let userIdField = [];\n                let userId = '';\n                let username = '';\n\n                if (channelInfo[1]) {\n                    userIdField = channelInfo[1].split('=');\n\n                    if (userIdField.indexOf('user_id') >= 0) {\n                        userId = userIdField[userIdField.indexOf('user_id') + 1];\n                        var profile = this.props.getUser(userId);\n                        if (profile) {\n                            username = profile.username;\n                        }\n                    }\n                }\n\n                if ((/\\/channels\\/[A-Za-z0-9]+\\/delete/).test(actionURL)) {\n                    auditDesc = formatMessage(holders.channelDeleted, {url: channelURL});\n                } else if ((/\\/channels\\/[A-Za-z0-9]+\\/add/).test(actionURL)) {\n                    auditDesc = formatMessage(holders.userAdded, {username, channelName});\n                } else if ((/\\/channels\\/[A-Za-z0-9]+\\/remove/).test(actionURL)) {\n                    auditDesc = formatMessage(holders.userRemoved, {username, channelName});\n                }\n\n                break;\n            }\n            }\n        } else if (actionURL.indexOf('/oauth') === 0) {\n            const oauthInfo = audit.extra_info.split(' ');\n\n            switch (actionURL) {\n            case '/oauth/register': {\n                const clientIdField = oauthInfo[0].split('=');\n\n                if (clientIdField[0] === 'client_id') {\n                    auditDesc = formatMessage(holders.attemptedRegisterApp, {id: clientIdField[1]});\n                }\n\n                break;\n            }\n            case '/oauth/allow':\n                if (oauthInfo[0] === 'attempt') {\n                    auditDesc = formatMessage(holders.attemptedAllowOAuthAccess);\n                } else if (oauthInfo[0] === 'success') {\n                    auditDesc = formatMessage(holders.successfullOAuthAccess);\n                } else if (oauthInfo[0] === 'fail - redirect_uri did not match registered callback') {\n                    auditDesc = formatMessage(holders.failedOAuthAccess);\n                }\n\n                break;\n            case '/oauth/access_token':\n                if (oauthInfo[0] === 'attempt') {\n                    auditDesc = formatMessage(holders.attemptedOAuthToken);\n                } else if (oauthInfo[0] === 'success') {\n                    auditDesc = formatMessage(holders.successfullOAuthToken);\n                } else {\n                    const oauthTokenFailure = oauthInfo[0].split('-');\n\n                    if (oauthTokenFailure[0].trim() === 'fail' && oauthTokenFailure[1]) {\n                        auditDesc = formatMessage(oauthTokenFailure, {token: oauthTokenFailure[1].trim()});\n                    }\n                }\n\n                break;\n            default:\n                break;\n            }\n        } else if (actionURL.indexOf('/users') === 0) {\n            const userInfo = audit.extra_info.split(' ');\n\n            switch (actionURL) {\n            case '/users/login':\n                if (userInfo[0] === 'attempt') {\n                    auditDesc = formatMessage(holders.attemptedLogin);\n                } else if (userInfo[0] === 'success') {\n                    auditDesc = formatMessage(holders.successfullLogin);\n                } else if (userInfo[0] === 'authenticated') {\n                    auditDesc = formatMessage(holders.authenticated);\n                } else if (userInfo[0]) {\n                    auditDesc = formatMessage(holders.failedLogin);\n                }\n\n                break;\n            case '/users/revoke_session':\n                auditDesc = formatMessage(holders.sessionRevoked, {sessionId: userInfo[0].split('=')[1]});\n                break;\n            case '/users/newimage':\n                auditDesc = formatMessage(holders.updatePicture);\n                break;\n            case '/users/update':\n                auditDesc = formatMessage(holders.updateGeneral);\n                break;\n            case '/users/newpassword':\n                if (userInfo[0] === 'attempted') {\n                    auditDesc = formatMessage(holders.attemptedPassword);\n                } else if (userInfo[0] === 'completed') {\n                    auditDesc = formatMessage(holders.successfullPassword);\n                } else if (userInfo[0] === 'failed - tried to update user password who was logged in through oauth') {\n                    auditDesc = formatMessage(holders.failedPassword);\n                }\n\n                break;\n            case '/users/update_roles': {\n                const userRoles = userInfo[0].split('=')[1];\n\n                auditDesc = formatMessage(holders.updatedRol);\n                if (userRoles.trim()) {\n                    auditDesc += userRoles;\n                } else {\n                    auditDesc += formatMessage(holders.member);\n                }\n\n                break;\n            }\n            case '/users/update_active': {\n                const updateType = userInfo[0].split('=')[0];\n                const updateField = userInfo[0].split('=')[1];\n\n                /* Either describes account activation/deactivation or a revoked session as part of an account deactivation */\n                if (updateType === 'active') {\n                    if (updateField === 'true') {\n                        auditDesc = formatMessage(holders.accountActive);\n                    } else if (updateField === 'false') {\n                        auditDesc = formatMessage(holders.accountInactive);\n                    }\n\n                    const actingUserInfo = userInfo[1].split('=');\n                    if (actingUserInfo[0] === 'session_user') {\n                        const actingUser = this.props.getUser(actingUserInfo[1]);\n                        const user = this.props.currentUser;\n                        if (user && actingUser && isSystemAdmin(user.roles)) {\n                            auditDesc += formatMessage(holders.by, {username: actingUser.username});\n                        } else if (user && actingUser) {\n                            auditDesc += formatMessage(holders.byAdmin);\n                        }\n                    }\n                } else if (updateType === 'session_id') {\n                    auditDesc = formatMessage(holders.sessionRevoked, {sessionId: updateField});\n                }\n\n                break;\n            }\n            case '/users/send_password_reset':\n                auditDesc = formatMessage(holders.sentEmail, {email: userInfo[0].split('=')[1]});\n                break;\n            case '/users/reset_password':\n                if (userInfo[0] === 'attempt') {\n                    auditDesc = formatMessage(holders.attemptedReset);\n                } else if (userInfo[0] === 'success') {\n                    auditDesc = formatMessage(holders.successfullReset);\n                }\n\n                break;\n            case '/users/update_notify':\n                auditDesc = formatMessage(holders.updateGlobalNotifications);\n                break;\n            default:\n                break;\n            }\n        } else if (actionURL.indexOf('/hooks') === 0) {\n            const webhookInfo = audit.extra_info;\n\n            switch (actionURL) {\n            case '/hooks/incoming/create':\n                if (webhookInfo === 'attempt') {\n                    auditDesc = formatMessage(holders.attemptedWebhookCreate);\n                } else if (webhookInfo === 'success') {\n                    auditDesc = formatMessage(holders.succcessfullWebhookCreate);\n                } else if (webhookInfo === 'fail - bad channel permissions') {\n                    auditDesc = formatMessage(holders.failedWebhookCreate);\n                }\n\n                break;\n            case '/hooks/incoming/delete':\n                if (webhookInfo === 'attempt') {\n                    auditDesc = formatMessage(holders.attemptedWebhookDelete);\n                } else if (webhookInfo === 'success') {\n                    auditDesc = formatMessage(holders.successfullWebhookDelete);\n                } else if (webhookInfo === 'fail - inappropriate conditions') {\n                    auditDesc = formatMessage(holders.failedWebhookDelete);\n                }\n\n                break;\n            default:\n                break;\n            }\n        } else if (actionURL.indexOf('/license') === 0) {\n            const licenseInfo = audit.extra_info;\n\n            switch (actionURL) {\n            case '/license/add':\n                if (licenseInfo === 'attempt') {\n                    auditDesc = formatMessage(holders.attemptedLicenseAdd);\n                } else if (licenseInfo === 'success') {\n                    auditDesc = formatMessage(holders.successfullLicenseAdd);\n                } else if (licenseInfo === 'failed - expired or non-started license') {\n                    auditDesc = formatMessage(holders.failedExpiredLicenseAdd);\n                } else if (licenseInfo === 'failed - invalid license') {\n                    auditDesc = formatMessage(holders.failedInvalidLicenseAdd);\n                }\n\n                break;\n            case '/license/remove':\n                auditDesc = formatMessage(holders.licenseRemoved);\n                break;\n            default:\n                break;\n            }\n        } else if (actionURL.indexOf('/admin/download_compliance_report') === 0) {\n            auditDesc = toTitleCase(audit.extra_info);\n        } else {\n            switch (actionURL) {\n            case '/logout':\n                auditDesc = formatMessage(holders.logout);\n                break;\n            case '/verify_email':\n                auditDesc = formatMessage(holders.verified);\n                break;\n            default:\n                break;\n            }\n        }\n\n        /* If all else fails... */\n        if (!auditDesc) {\n            /* Currently not called anywhere */\n            if (audit.extra_info.indexOf('revoked_all=') >= 0) {\n                auditDesc = formatMessage(holders.revokedAll);\n            } else {\n                let actionDesc = '';\n                if (actionURL && actionURL.lastIndexOf('/') !== -1) {\n                    actionDesc = actionURL.substring(actionURL.lastIndexOf('/') + 1).replace('_', ' ');\n                    actionDesc = toTitleCase(actionDesc);\n                }\n\n                let extraInfoDesc = '';\n                if (audit.extra_info) {\n                    extraInfoDesc = audit.extra_info;\n\n                    if (extraInfoDesc.indexOf('=') !== -1) {\n                        extraInfoDesc = extraInfoDesc.substring(extraInfoDesc.indexOf('=') + 1);\n                    }\n                }\n                auditDesc = actionDesc + ' ' + extraInfoDesc;\n            }\n        }\n\n        const date = new Date(audit.create_at);\n        const auditInfo = {};\n        auditInfo.timestamp = (\n            <div>\n                <div>\n                    <FormattedDate\n                        value={date}\n                        day='2-digit'\n                        month='short'\n                        year='numeric'\n                    />\n                </div>\n                <div>\n                    <FormattedTime\n                        value={date}\n                        hour='2-digit'\n                        minute='2-digit'\n                    />\n                </div>\n            </div>\n        );\n\n        const auditProfile = this.props.getUser(audit.user_id);\n\n        auditInfo.userId = auditProfile ? auditProfile.email : audit.user_id;\n        auditInfo.desc = auditDesc;\n        auditInfo.ip = audit.ip_address;\n        auditInfo.sessionId = audit.session_id;\n\n        return auditInfo;\n    }\n}\n\nexport default injectIntl(AuditTable);\n","// Copyright (c) 2015-present Mattermost, Inc. All Rights Reserved.\n// See LICENSE.txt for license information.\n\nimport {connect} from 'react-redux';\nimport {bindActionCreators} from 'redux';\n\nimport {getMissingProfilesByIds} from 'mattermost-redux/actions/users';\nimport {getUser, getCurrentUser} from 'mattermost-redux/selectors/entities/users';\nimport {getChannelByName} from 'mattermost-redux/selectors/entities/channels';\n\nimport AuditTable from './audit_table.jsx';\n\nfunction mapStateToProps(state) {\n    return {\n        currentUser: getCurrentUser(state),\n        getUser: (userId) => getUser(state, userId),\n        getByName: (channelName) => getChannelByName(state, channelName),\n    };\n}\n\nfunction mapDispatchToProps(dispatch) {\n    return {\n        actions: bindActionCreators({\n            getMissingProfilesByIds,\n        }, dispatch),\n    };\n}\n\nexport default connect(mapStateToProps, mapDispatchToProps)(AuditTable);\n","// Copyright (c) 2015-present Mattermost, Inc. All Rights Reserved.\n// See LICENSE.txt for license information.\n\nimport React from 'react';\nimport PropTypes from 'prop-types';\nimport {FormattedMessage} from 'react-intl';\n\nimport {Preferences} from 'mattermost-redux/constants';\n\nimport SettingItemMax from 'components/setting_item_max.jsx';\nimport SettingItemMin from 'components/setting_item_min';\n\nimport {AdvancedSections} from 'utils/constants.jsx';\n\nexport default class JoinLeaveSection extends React.PureComponent {\n    static propTypes = {\n        activeSection: PropTypes.string,\n        currentUserId: PropTypes.string.isRequired,\n        joinLeave: PropTypes.string,\n        onUpdateSection: PropTypes.func.isRequired,\n        renderOnOffLabel: PropTypes.func.isRequired,\n        actions: PropTypes.shape({\n            savePreferences: PropTypes.func.isRequired,\n        }).isRequired,\n    }\n\n    constructor(props) {\n        super(props);\n\n        this.state = {\n            joinLeaveState: props.joinLeave,\n        };\n    }\n\n    handleOnChange = (e) => {\n        const value = e.currentTarget.value;\n\n        this.setState({joinLeaveState: value});\n    }\n\n    handleUpdateSection = (section) => {\n        if (!section) {\n            this.setState({joinLeaveState: this.props.joinLeave});\n        }\n\n        this.props.onUpdateSection(section);\n    }\n\n    handleSubmit = () => {\n        const {actions, currentUserId, onUpdateSection} = this.props;\n        const joinLeavePreference = {category: Preferences.CATEGORY_ADVANCED_SETTINGS, user_id: currentUserId, name: Preferences.ADVANCED_FILTER_JOIN_LEAVE, value: this.state.joinLeaveState};\n        actions.savePreferences(currentUserId, [joinLeavePreference]);\n\n        onUpdateSection();\n    }\n\n    render() {\n        const {joinLeaveState} = this.state;\n        if (this.props.activeSection === AdvancedSections.JOIN_LEAVE) {\n            return (\n                <SettingItemMax\n                    title={\n                        <FormattedMessage\n                            id='user.settings.advance.joinLeaveTitle'\n                            defaultMessage='Enable Join/Leave Messages'\n                        />\n                    }\n                    inputs={[\n                        <fieldset key='joinLeaveSetting'>\n                            <div className='radio'>\n                                <label>\n                                    <input\n                                        id='joinLeaveOn'\n                                        type='radio'\n                                        value={'true'}\n                                        name={AdvancedSections.JOIN_LEAVE}\n                                        checked={joinLeaveState === 'true'}\n                                        onChange={this.handleOnChange}\n                                    />\n                                    <FormattedMessage\n                                        id='user.settings.advance.on'\n                                        defaultMessage='On'\n                                    />\n                                </label>\n                                <br/>\n                            </div>\n                            <div className='radio'>\n                                <label>\n                                    <input\n                                        id='joinLeaveOff'\n                                        type='radio'\n                                        value={'false'}\n                                        name={AdvancedSections.JOIN_LEAVE}\n                                        checked={joinLeaveState === 'false'}\n                                        onChange={this.handleOnChange}\n                                    />\n                                    <FormattedMessage\n                                        id='user.settings.advance.off'\n                                        defaultMessage='Off'\n                                    />\n                                </label>\n                                <br/>\n                            </div>\n                            <div className='margin-top x3'>\n                                <FormattedMessage\n                                    id='user.settings.advance.joinLeaveDesc'\n                                    defaultMessage='When \"On\", System Messages saying a user has joined or left a channel will be visible. When \"Off\", the System Messages about joining or leaving a channel will be hidden. A message will still show up when you are added to a channel, so you can receive a notification.'\n                                />\n                            </div>\n                        </fieldset>,\n                    ]}\n                    setting={AdvancedSections.JOIN_LEAVE}\n                    submit={this.handleSubmit}\n                    saving={this.state.isSaving}\n                    server_error={this.state.serverError}\n                    updateSection={this.handleUpdateSection}\n                />\n            );\n        }\n\n        return (\n            <SettingItemMin\n                title={\n                    <FormattedMessage\n                        id='user.settings.advance.joinLeaveTitle'\n                        defaultMessage='Enable Join/Leave Messages'\n                    />\n                }\n                describe={this.props.renderOnOffLabel(joinLeaveState)}\n                section={AdvancedSections.JOIN_LEAVE}\n                updateSection={this.handleUpdateSection}\n            />\n        );\n    }\n}\n","// Copyright (c) 2015-present Mattermost, Inc. All Rights Reserved.\n// See LICENSE.txt for license information.\n\nimport {bindActionCreators} from 'redux';\nimport {connect} from 'react-redux';\n\nimport {savePreferences} from 'mattermost-redux/actions/preferences';\nimport {Preferences} from 'mattermost-redux/constants';\nimport {get as getPreference} from 'mattermost-redux/selectors/entities/preferences';\nimport {getCurrentUserId} from 'mattermost-redux/selectors/entities/users';\n\nimport JoinLeaveSection from './join_leave_section.jsx';\n\nfunction mapStateToProps(state) {\n    const joinLeave = getPreference(\n        state,\n        Preferences.CATEGORY_ADVANCED_SETTINGS,\n        Preferences.ADVANCED_FILTER_JOIN_LEAVE,\n        'true'\n    );\n\n    return {\n        currentUserId: getCurrentUserId(state),\n        joinLeave,\n    };\n}\n\nfunction mapDispatchToProps(dispatch) {\n    return {\n        actions: bindActionCreators({\n            savePreferences,\n        }, dispatch),\n    };\n}\n\nexport default connect(mapStateToProps, mapDispatchToProps)(JoinLeaveSection);\n","// Copyright (c) 2015-present Mattermost, Inc. All Rights Reserved.\n// See LICENSE.txt for license information.\n\nimport PropTypes from 'prop-types';\nimport React from 'react';\nimport {FormattedMessage} from 'react-intl';\n\nimport {emitUserLoggedOutEvent} from 'actions/global_actions.jsx';\nimport Constants from 'utils/constants.jsx';\nimport * as Utils from 'utils/utils.jsx';\nimport SettingItemMax from 'components/setting_item_max.jsx';\nimport SettingItemMin from 'components/setting_item_min';\nimport ConfirmModal from 'components/confirm_modal.jsx';\nimport BackIcon from 'components/icon/back_icon';\n\nimport JoinLeaveSection from './join_leave_section';\n\nconst PreReleaseFeatures = Constants.PRE_RELEASE_FEATURES;\n\nexport default class AdvancedSettingsDisplay extends React.PureComponent {\n    static propTypes = {\n        currentUser: PropTypes.object.isRequired,\n        advancedSettingsCategory: PropTypes.array.isRequired,\n        sendOnCtrlEnter: PropTypes.string.isRequired,\n        codeBlockOnCtrlEnter: PropTypes.bool,\n        formatting: PropTypes.string.isRequired,\n        joinLeave: PropTypes.string.isRequired,\n        updateSection: PropTypes.func,\n        activeSection: PropTypes.string,\n        closeModal: PropTypes.func.isRequired,\n        collapseModal: PropTypes.func.isRequired,\n        enablePreviewFeatures: PropTypes.bool,\n        enableUserDeactivation: PropTypes.bool,\n        actions: PropTypes.shape({\n            savePreferences: PropTypes.func.isRequired,\n            updateUserActive: PropTypes.func.isRequired,\n            revokeAllSessionsForUser: PropTypes.func.isRequired,\n        }).isRequired,\n    }\n\n    constructor(props) {\n        super(props);\n\n        this.state = this.getStateFromProps();\n    }\n\n    getStateFromProps = () => {\n        const advancedSettings = this.props.advancedSettingsCategory;\n        const settings = {\n            send_on_ctrl_enter: this.props.sendOnCtrlEnter,\n            code_block_ctrl_enter: this.props.codeBlockOnCtrlEnter,\n            formatting: this.props.formatting,\n            join_leave: this.props.joinLeave,\n        };\n\n        const preReleaseFeaturesKeys = Object.keys(PreReleaseFeatures);\n        let enabledFeatures = 0;\n        for (const as of advancedSettings) {\n            for (const key of preReleaseFeaturesKeys) {\n                const feature = PreReleaseFeatures[key];\n\n                if (as.name === Constants.FeatureTogglePrefix + feature.label) {\n                    settings[as.name] = as.value;\n\n                    if (as.value === 'true') {\n                        enabledFeatures += 1;\n                    }\n                }\n            }\n        }\n\n        const isSaving = false;\n\n        const previewFeaturesEnabled = this.props.enablePreviewFeatures;\n        const showDeactivateAccountModal = false;\n\n        return {\n            preReleaseFeatures: PreReleaseFeatures,\n            settings,\n            preReleaseFeaturesKeys,\n            enabledFeatures,\n            isSaving,\n            previewFeaturesEnabled,\n            showDeactivateAccountModal,\n        };\n    }\n\n    updateSetting = (setting, value) => {\n        const settings = this.state.settings;\n        settings[setting] = value;\n        this.setState(settings);\n    }\n\n    toggleFeature = (feature, checked) => {\n        const settings = this.state.settings;\n        settings[Constants.FeatureTogglePrefix + feature] = String(checked);\n\n        let enabledFeatures = 0;\n        Object.keys(this.state.settings).forEach((setting) => {\n            if (setting.lastIndexOf(Constants.FeatureTogglePrefix) === 0 && this.state.settings[setting] === 'true') {\n                enabledFeatures++;\n            }\n        });\n\n        this.setState({settings, enabledFeatures});\n    }\n\n    saveEnabledFeatures = () => {\n        const features = [];\n        Object.keys(this.state.settings).forEach((setting) => {\n            if (setting.lastIndexOf(Constants.FeatureTogglePrefix) === 0) {\n                features.push(setting);\n            }\n        });\n\n        this.handleSubmit(features);\n    }\n\n    handleSubmit = async (settings) => {\n        const preferences = [];\n        const {actions, currentUser} = this.props;\n        const userId = currentUser.id;\n\n        // this should be refactored so we can actually be certain about what type everything is\n        (Array.isArray(settings) ? settings : [settings]).forEach((setting) => {\n            preferences.push({\n                user_id: userId,\n                category: Constants.Preferences.CATEGORY_ADVANCED_SETTINGS,\n                name: setting,\n                value: this.state.settings[setting],\n            });\n        });\n\n        this.setState({isSaving: true});\n        await actions.savePreferences(userId, preferences);\n\n        this.handleUpdateSection('');\n    }\n\n    handleDeactivateAccountSubmit = async () => {\n        const userId = this.props.currentUser.id;\n\n        this.setState({isSaving: true});\n\n        this.props.actions.updateUserActive(userId, false).\n            then(({error}) => {\n                if (error) {\n                    this.setState({serverError: error.message});\n                }\n            });\n\n        const {data, error} = await this.props.actions.revokeAllSessionsForUser(userId);\n        if (data) {\n            emitUserLoggedOutEvent();\n        } else if (error) {\n            this.setState({serverError: error.message});\n        }\n    }\n\n    handleShowDeactivateAccountModal = () => {\n        this.setState({\n            showDeactivateAccountModal: true,\n        });\n    }\n\n    handleHideDeactivateAccountModal = () => {\n        this.setState({\n            showDeactivateAccountModal: false,\n        });\n    }\n\n    handleUpdateSection = (section) => {\n        if (!section) {\n            this.setState(this.getStateFromProps());\n        }\n        this.setState({isSaving: false});\n        this.props.updateSection(section);\n    }\n\n    renderOnOffLabel(enabled) {\n        if (enabled === 'false') {\n            return (\n                <FormattedMessage\n                    id='user.settings.advance.off'\n                    defaultMessage='Off'\n                />\n            );\n        }\n\n        return (\n            <FormattedMessage\n                id='user.settings.advance.on'\n                defaultMessage='On'\n            />\n        );\n    }\n\n    renderCtrlEnterLabel() {\n        const ctrlEnter = this.state.settings.send_on_ctrl_enter;\n        const codeBlockCtrlEnter = this.state.settings.code_block_ctrl_enter;\n        if (ctrlEnter === 'false' && codeBlockCtrlEnter === 'false') {\n            return (\n                <FormattedMessage\n                    id='user.settings.advance.off'\n                    defaultMessage='Off'\n                />\n            );\n        } else if (ctrlEnter === 'true' && codeBlockCtrlEnter === 'true') {\n            return (\n                <FormattedMessage\n                    id='user.settings.advance.onForAllMessages'\n                    defaultMessage='On for all messages'\n                />\n            );\n        }\n        return (\n            <FormattedMessage\n                id='user.settings.advance.onForCode'\n                defaultMessage='On only for code blocks starting with ```'\n            />\n        );\n    }\n\n    renderFormattingSection = () => {\n        if (this.props.activeSection === 'formatting') {\n            return (\n                <SettingItemMax\n                    title={\n                        <FormattedMessage\n                            id='user.settings.advance.formattingTitle'\n                            defaultMessage='Enable Post Formatting'\n                        />\n                    }\n                    inputs={[\n                        <fieldset key='formattingSetting'>\n                            <div className='radio'>\n                                <label>\n                                    <input\n                                        id='postFormattingOn'\n                                        type='radio'\n                                        name='formatting'\n                                        checked={this.state.settings.formatting !== 'false'}\n                                        onChange={this.updateSetting.bind(this, 'formatting', 'true')}\n                                    />\n                                    <FormattedMessage\n                                        id='user.settings.advance.on'\n                                        defaultMessage='On'\n                                    />\n                                </label>\n                                <br/>\n                            </div>\n                            <div className='radio'>\n                                <label>\n                                    <input\n                                        id='postFormattingOff'\n                                        type='radio'\n                                        name='formatting'\n                                        checked={this.state.settings.formatting === 'false'}\n                                        onChange={this.updateSetting.bind(this, 'formatting', 'false')}\n                                    />\n                                    <FormattedMessage\n                                        id='user.settings.advance.off'\n                                        defaultMessage='Off'\n                                    />\n                                </label>\n                                <br/>\n                            </div>\n                            <div className='margin-top x3'>\n                                <FormattedMessage\n                                    id='user.settings.advance.formattingDesc'\n                                    defaultMessage='If enabled, posts will be formatted to create links, show emoji, style the text, and add line breaks. By default, this setting is enabled.'\n                                />\n                            </div>\n                        </fieldset>,\n                    ]}\n                    setting={'formatting'}\n                    submit={this.handleSubmit}\n                    saving={this.state.isSaving}\n                    server_error={this.state.serverError}\n                    updateSection={this.handleUpdateSection}\n                />\n            );\n        }\n\n        return (\n            <SettingItemMin\n                title={\n                    <FormattedMessage\n                        id='user.settings.advance.formattingTitle'\n                        defaultMessage='Enable Post Formatting'\n                    />\n                }\n                describe={this.renderOnOffLabel(this.state.settings.formatting)}\n                section={'formatting'}\n                updateSection={this.handleUpdateSection}\n            />\n        );\n    }\n\n    renderFeatureLabel(feature) {\n        switch (feature) {\n        case 'MARKDOWN_PREVIEW':\n            return (\n                <FormattedMessage\n                    id='user.settings.advance.markdown_preview'\n                    defaultMessage='Show markdown preview option in message input box'\n                />\n            );\n        default:\n            return null;\n        }\n    }\n\n    render() {\n        const serverError = this.state.serverError || null;\n        let ctrlSendSection;\n\n        if (this.props.activeSection === 'advancedCtrlSend') {\n            const ctrlSendActive = [\n                this.state.settings.send_on_ctrl_enter === 'true',\n                this.state.settings.send_on_ctrl_enter === 'false' && this.state.settings.code_block_ctrl_enter === 'true',\n                this.state.settings.send_on_ctrl_enter === 'false' && this.state.settings.code_block_ctrl_enter === 'false',\n            ];\n\n            const inputs = [\n                <div key='ctrlSendSetting'>\n                    <div className='radio'>\n                        <label>\n                            <input\n                                id='ctrlSendOn'\n                                type='radio'\n                                name='sendOnCtrlEnter'\n                                checked={ctrlSendActive[0]}\n                                onChange={() => {\n                                    this.updateSetting('send_on_ctrl_enter', 'true');\n                                    this.updateSetting('code_block_ctrl_enter', 'true');\n                                }}\n                            />\n                            <FormattedMessage\n                                id='user.settings.advance.onForAllMessages'\n                                defaultMessage='On for all messages'\n                            />\n                        </label>\n                        <br/>\n                    </div>\n                    <div className='radio'>\n                        <label>\n                            <input\n                                id='ctrlSendOnForCode'\n                                type='radio'\n                                name='sendOnCtrlEnter'\n                                checked={ctrlSendActive[1]}\n                                onChange={() => {\n                                    this.updateSetting('send_on_ctrl_enter', 'false');\n                                    this.updateSetting('code_block_ctrl_enter', 'true');\n                                }}\n                            />\n                            <FormattedMessage\n                                id='user.settings.advance.onForCode'\n                                defaultMessage='On only for code blocks starting with ```'\n                            />\n                        </label>\n                        <br/>\n                    </div>\n                    <div className='radio'>\n                        <label>\n                            <input\n                                id='ctrlSendOff'\n                                type='radio'\n                                name='sendOnCtrlEnter'\n                                checked={ctrlSendActive[2]}\n                                onChange={() => {\n                                    this.updateSetting('send_on_ctrl_enter', 'false');\n                                    this.updateSetting('code_block_ctrl_enter', 'false');\n                                }}\n                            />\n                            <FormattedMessage\n                                id='user.settings.advance.off'\n                                defaultMessage='Off'\n                            />\n                        </label>\n                        <br/>\n                    </div>\n                    <div>\n                        <br/>\n                        <FormattedMessage\n                            id='user.settings.advance.sendDesc'\n                            defaultMessage='When enabled, CTRL + ENTER will send the message and ENTER inserts a new line.'\n                        />\n                    </div>\n                </div>,\n            ];\n            ctrlSendSection = (\n                <SettingItemMax\n                    title={\n                        <FormattedMessage\n                            id='user.settings.advance.sendTitle'\n                            defaultMessage='Send messages on CTRL+ENTER'\n                        />\n                    }\n                    inputs={inputs}\n                    submit={this.handleSubmit.bind(this, ['send_on_ctrl_enter', 'code_block_ctrl_enter'])}\n                    saving={this.state.isSaving}\n                    server_error={serverError}\n                    updateSection={this.handleUpdateSection}\n                />\n            );\n        } else {\n            ctrlSendSection = (\n                <SettingItemMin\n                    title={\n                        <FormattedMessage\n                            id='user.settings.advance.sendTitle'\n                            defaultMessage='Send messages on CTRL+ENTER'\n                        />\n                    }\n                    describe={this.renderCtrlEnterLabel()}\n                    section={'advancedCtrlSend'}\n                    updateSection={this.handleUpdateSection}\n                />\n            );\n        }\n\n        const formattingSection = this.renderFormattingSection();\n        let formattingSectionDivider = null;\n        if (formattingSection) {\n            formattingSectionDivider = <div className='divider-light'/>;\n        }\n\n        let previewFeaturesSection;\n        let previewFeaturesSectionDivider;\n        if (this.state.previewFeaturesEnabled && this.state.preReleaseFeaturesKeys.length > 0) {\n            previewFeaturesSectionDivider = (\n                <div className='divider-light'/>\n            );\n\n            if (this.props.activeSection === 'advancedPreviewFeatures') {\n                const inputs = [];\n\n                this.state.preReleaseFeaturesKeys.forEach((key) => {\n                    const feature = this.state.preReleaseFeatures[key];\n                    inputs.push(\n                        <div key={'advancedPreviewFeatures_' + feature.label}>\n                            <div className='checkbox'>\n                                <label>\n                                    <input\n                                        id={'advancedPreviewFeatures' + feature.label}\n                                        type='checkbox'\n                                        checked={this.state.settings[Constants.FeatureTogglePrefix + feature.label] === 'true'}\n                                        onChange={(e) => {\n                                            this.toggleFeature(feature.label, e.target.checked);\n                                        }}\n                                    />\n                                    {this.renderFeatureLabel(key)}\n                                </label>\n                            </div>\n                        </div>\n                    );\n                });\n\n                inputs.push(\n                    <div key='advancedPreviewFeatures_helptext'>\n                        <br/>\n                        <FormattedMessage\n                            id='user.settings.advance.preReleaseDesc'\n                            defaultMessage=\"Check any pre-released features you'd like to preview.  You may also need to refresh the page before the setting will take effect.\"\n                        />\n                    </div>\n                );\n                previewFeaturesSection = (\n                    <SettingItemMax\n                        title={\n                            <FormattedMessage\n                                id='user.settings.advance.preReleaseTitle'\n                                defaultMessage='Preview pre-release features'\n                            />\n                        }\n                        inputs={inputs}\n                        submit={this.saveEnabledFeatures}\n                        saving={this.state.isSaving}\n                        server_error={serverError}\n                        updateSection={this.handleUpdateSection}\n                    />\n                );\n            } else {\n                previewFeaturesSection = (\n                    <SettingItemMin\n                        title={Utils.localizeMessage('user.settings.advance.preReleaseTitle', 'Preview pre-release features')}\n                        describe={\n                            <FormattedMessage\n                                id='user.settings.advance.enabledFeatures'\n                                defaultMessage='{count, number} {count, plural, one {Feature} other {Features}} Enabled'\n                                values={{count: this.state.enabledFeatures}}\n                            />\n                        }\n                        section={'advancedPreviewFeatures'}\n                        updateSection={this.handleUpdateSection}\n                    />\n                );\n            }\n        }\n\n        let deactivateAccountSection = '';\n        let makeConfirmationModal = '';\n        const currentUser = this.props.currentUser;\n\n        if (currentUser.auth_service === '' && this.props.enableUserDeactivation) {\n            if (this.props.activeSection === 'deactivateAccount') {\n                deactivateAccountSection = (\n                    <SettingItemMax\n                        title={\n                            <FormattedMessage\n                                id='user.settings.advance.deactivateAccountTitle'\n                                defaultMessage='Deactivate Account'\n                            />\n                        }\n                        inputs={[\n                            <div key='formattingSetting'>\n                                <div>\n                                    <br/>\n                                    <FormattedMessage\n                                        id='user.settings.advance.deactivateDesc'\n                                        defaultMessage='Deactivating your account removes your ability to log in to this server and disables all email and mobile notifications. To reactivate your account, contact your System Administrator.'\n                                    />\n                                </div>\n                            </div>,\n                        ]}\n                        saveButtonText={'Deactivate'}\n                        setting={'deactivateAccount'}\n                        submit={this.handleShowDeactivateAccountModal}\n                        saving={this.state.isSaving}\n                        server_error={this.state.serverError}\n                        updateSection={this.handleUpdateSection}\n                    />\n                );\n            } else {\n                deactivateAccountSection = (\n                    <SettingItemMin\n                        title={\n                            <FormattedMessage\n                                id='user.settings.advance.deactivateAccountTitle'\n                                defaultMessage='Deactivate Account'\n                            />\n                        }\n                        describe={\n                            <FormattedMessage\n                                id='user.settings.advance.deactivateDescShort'\n                                defaultMessage=\"Click 'Edit' to deactivate your account\"\n                            />\n                        }\n                        section={'deactivateAccount'}\n                        updateSection={this.handleUpdateSection}\n                    />\n                );\n            }\n\n            const confirmButtonClass = 'btn btn-danger';\n            const deactivateMemberButton = (\n                <FormattedMessage\n                    id='user.settings.advance.deactivate_member_modal.deactivateButton'\n                    defaultMessage='Yes, deactivate my account'\n                />\n            );\n\n            makeConfirmationModal = (\n                <ConfirmModal\n                    show={this.state.showDeactivateAccountModal}\n                    title={\n                        <FormattedMessage\n                            id='user.settings.advance.confirmDeactivateAccountTitle'\n                            defaultMessage='Confirm Deactivation'\n                        />\n                    }\n                    message={\n                        <FormattedMessage\n                            id='user.settings.advance.confirmDeactivateDesc'\n                            defaultMessage='Are you sure you want to deactivate your account? This can only be reversed by your System Administrator.'\n                        />\n                    }\n                    confirmButtonClass={confirmButtonClass}\n                    confirmButtonText={deactivateMemberButton}\n                    onConfirm={this.handleDeactivateAccountSubmit}\n                    onCancel={this.handleHideDeactivateAccountModal}\n                />\n            );\n        }\n\n        return (\n            <div>\n                <div className='modal-header'>\n                    <button\n                        id='closeButton'\n                        type='button'\n                        className='close'\n                        data-dismiss='modal'\n                        aria-label='Close'\n                        onClick={this.props.closeModal}\n                    >\n                        <span aria-hidden='true'>{'×'}</span>\n                    </button>\n                    <h4\n                        className='modal-title'\n                        ref='title'\n                    >\n                        <div className='modal-back'>\n                            <span onClick={this.props.collapseModal}>\n                                <BackIcon/>\n                            </span>\n                        </div>\n                        <FormattedMessage\n                            id='user.settings.advance.title'\n                            defaultMessage='Advanced Settings'\n                        />\n                    </h4>\n                </div>\n                <div className='user-settings'>\n                    <h3 className='tab-header'>\n                        <FormattedMessage\n                            id='user.settings.advance.title'\n                            defaultMessage='Advanced Settings'\n                        />\n                    </h3>\n                    <div className='divider-dark first'/>\n                    {ctrlSendSection}\n                    {formattingSectionDivider}\n                    {formattingSection}\n                    <div className='divider-light'/>\n                    <JoinLeaveSection\n                        activeSection={this.props.activeSection}\n                        onUpdateSection={this.handleUpdateSection}\n                        renderOnOffLabel={this.renderOnOffLabel}\n                    />\n                    {previewFeaturesSectionDivider}\n                    {previewFeaturesSection}\n                    {formattingSectionDivider}\n                    {deactivateAccountSection}\n                    <div className='divider-dark'/>\n                    {makeConfirmationModal}\n                </div>\n            </div>\n        );\n    }\n}\n","// Copyright (c) 2015-present Mattermost, Inc. All Rights Reserved.\n// See LICENSE.txt for license information.\n\nimport {connect} from 'react-redux';\nimport {bindActionCreators} from 'redux';\n\nimport {getConfig} from 'mattermost-redux/selectors/entities/general';\nimport {getCurrentUser} from 'mattermost-redux/selectors/entities/users';\nimport {get, makeGetCategory} from 'mattermost-redux/selectors/entities/preferences';\nimport {savePreferences} from 'mattermost-redux/actions/preferences';\nimport {updateUserActive, revokeAllSessionsForUser} from 'mattermost-redux/actions/users';\n\nimport {Preferences} from 'utils/constants.jsx';\n\nimport AdvancedSettingsDisplay from './user_settings_advanced.jsx';\n\nfunction makeMapStateToProps() {\n    const getAdvancedSettingsCategory = makeGetCategory();\n\n    return (state) => {\n        const config = getConfig(state);\n\n        const enablePreviewFeatures = config.EnablePreviewFeatures === 'true';\n        const enableUserDeactivation = config.EnableUserDeactivation === 'true';\n\n        return {\n            advancedSettingsCategory: getAdvancedSettingsCategory(state, Preferences.CATEGORY_ADVANCED_SETTINGS),\n            sendOnCtrlEnter: get(state, Preferences.CATEGORY_ADVANCED_SETTINGS, 'send_on_ctrl_enter', 'false'),\n            codeBlockOnCtrlEnter: get(state, Preferences.CATEGORY_ADVANCED_SETTINGS, 'code_block_ctrl_enter', 'true'),\n            formatting: get(state, Preferences.CATEGORY_ADVANCED_SETTINGS, 'formatting', 'true'),\n            joinLeave: get(state, Preferences.CATEGORY_ADVANCED_SETTINGS, 'join_leave', 'true'),\n            currentUser: getCurrentUser(state),\n            enablePreviewFeatures,\n            enableUserDeactivation,\n        };\n    };\n}\n\nfunction mapDispatchToProps(dispatch) {\n    return {\n        actions: bindActionCreators({\n            savePreferences,\n            updateUserActive,\n            revokeAllSessionsForUser,\n        }, dispatch),\n    };\n}\n\nexport default connect(makeMapStateToProps, mapDispatchToProps)(AdvancedSettingsDisplay);\n","// Copyright (c) 2015-present Mattermost, Inc. All Rights Reserved.\n// See LICENSE.txt for license information.\n\nimport React from 'react';\nimport ReactDom from 'react-dom';\nimport PropTypes from 'prop-types';\nimport {ChromePicker} from 'react-color';\n\nclass ColorInput extends React.Component {\n    static propTypes = {\n\n        /*\n         * Selected color\n         */\n        color: PropTypes.string.isRequired,\n\n        /*\n         * Function called when color changed. Takes hex format of color Ex: #ffeec0\n         */\n        onChange: PropTypes.func,\n    };\n\n    constructor(props) {\n        super(props);\n        this.state = {\n            idOpened: false,\n        };\n    }\n\n    componentDidUpdate(prevProps, prevState) {\n        const {isOpened: prevIsOpened} = prevState;\n        const {isOpened} = this.state;\n\n        if (isOpened !== prevIsOpened) {\n            if (isOpened) {\n                document.addEventListener('click', this.checkClick);\n            } else {\n                document.removeEventListener('click', this.checkClick);\n            }\n        }\n    }\n\n    checkClick = (e) => {\n        const colorPickerDOMNode = ReactDom.findDOMNode(this.colorPicker);\n        if (!colorPickerDOMNode || !colorPickerDOMNode.contains(e.target)) {\n            this.setState({isOpened: false});\n        }\n    };\n\n    togglePicker = () => {\n        this.setState({isOpened: !this.state.isOpened});\n    };\n\n    handleChange = (newColorData) => {\n        const {hex} = newColorData;\n        const {onChange: handleChange} = this.props;\n\n        if (handleChange) {\n            handleChange(hex);\n        }\n    };\n\n    getColorPicker = (node) => {\n        this.colorPicker = node;\n    };\n\n    render() {\n        const {color} = this.props;\n        const {isOpened} = this.state;\n\n        return (\n            <div className='color-input input-group'>\n                <input\n                    className='form-control'\n                    type='text'\n                    value={color}\n                    readOnly={true}\n                />\n                <span\n                    className='input-group-addon'\n                    onClick={this.togglePicker}\n                >\n                    <i\n                        className='color-icon'\n                        style={{\n                            backgroundColor: color,\n                        }}\n                    />\n                </span>\n                {isOpened && (\n                    <div\n                        ref={this.getColorPicker}\n                        className='color-popover'\n                    >\n                        <ChromePicker\n                            color={color}\n                            onChange={this.handleChange}\n                        />\n                    </div>\n                )}\n            </div>\n        );\n    }\n}\n\nexport default ColorInput;\n","// Copyright (c) 2015-present Mattermost, Inc. All Rights Reserved.\n// See LICENSE.txt for license information.\n\nimport React from 'react';\nimport PropTypes from 'prop-types';\n\nimport ColorInput from 'components/color_input';\n\nclass ColorChooser extends React.Component {\n    static propTypes = {\n\n        /*\n         * The id of setting that we will change\n         */\n        id: PropTypes.string.isRequired,\n\n        /*\n         * The label of setting that we will choose\n         */\n        label: PropTypes.string.isRequired,\n\n        /*\n         * Selected color\n         */\n        color: PropTypes.string.isRequired,\n\n        /*\n         * Function called when color changed takes 2 arguments: Id of changing setting and new color\n         */\n        onChange: PropTypes.func,\n    }\n\n    handleChange = (newColor) => {\n        const {id, onChange: handleChange} = this.props;\n        if (handleChange) {\n            handleChange(id, newColor);\n        }\n    }\n\n    render() {\n        const {label, color} = this.props;\n        return (\n            <div>\n                <label className='custom-label'>{label}</label>\n                <ColorInput\n                    color={color}\n                    onChange={this.handleChange}\n                />\n            </div>\n        );\n    }\n}\n\nexport default ColorChooser;\n","// Copyright (c) 2015-present Mattermost, Inc. All Rights Reserved.\n// See LICENSE.txt for license information.\n\nimport $ from 'jquery';\nimport PropTypes from 'prop-types';\nimport React from 'react';\nimport {OverlayTrigger, Popover} from 'react-bootstrap';\nimport {defineMessages, FormattedMessage, intlShape} from 'react-intl';\n\nimport {t} from 'utils/i18n';\nimport 'bootstrap-colorpicker';\n\nimport Constants from 'utils/constants.jsx';\nimport * as UserAgent from 'utils/user_agent.jsx';\n\nimport ColorChooser from './color_chooser.jsx';\n\nconst messages = defineMessages({\n    sidebarBg: {\n        id: t('user.settings.custom_theme.sidebarBg'),\n        defaultMessage: 'Sidebar BG',\n    },\n    sidebarText: {\n        id: t('user.settings.custom_theme.sidebarText'),\n        defaultMessage: 'Sidebar Text',\n    },\n    sidebarHeaderBg: {\n        id: t('user.settings.custom_theme.sidebarHeaderBg'),\n        defaultMessage: 'Sidebar Header BG',\n    },\n    sidebarHeaderTextColor: {\n        id: t('user.settings.custom_theme.sidebarHeaderTextColor'),\n        defaultMessage: 'Sidebar Header Text',\n    },\n    sidebarUnreadText: {\n        id: t('user.settings.custom_theme.sidebarUnreadText'),\n        defaultMessage: 'Sidebar Unread Text',\n    },\n    sidebarTextHoverBg: {\n        id: t('user.settings.custom_theme.sidebarTextHoverBg'),\n        defaultMessage: 'Sidebar Text Hover BG',\n    },\n    sidebarTextActiveBorder: {\n        id: t('user.settings.custom_theme.sidebarTextActiveBorder'),\n        defaultMessage: 'Sidebar Text Active Border',\n    },\n    sidebarTextActiveColor: {\n        id: t('user.settings.custom_theme.sidebarTextActiveColor'),\n        defaultMessage: 'Sidebar Text Active Color',\n    },\n    onlineIndicator: {\n        id: t('user.settings.custom_theme.onlineIndicator'),\n        defaultMessage: 'Online Indicator',\n    },\n    awayIndicator: {\n        id: t('user.settings.custom_theme.awayIndicator'),\n        defaultMessage: 'Away Indicator',\n    },\n    dndIndicator: {\n        id: t('user.settings.custom_theme.dndIndicator'),\n        defaultMessage: 'Do Not Disturb Indicator',\n    },\n    mentionBg: {\n        id: t('user.settings.custom_theme.mentionBg'),\n        defaultMessage: 'Mention Jewel BG',\n    },\n    mentionColor: {\n        id: t('user.settings.custom_theme.mentionColor'),\n        defaultMessage: 'Mention Jewel Text',\n    },\n    centerChannelBg: {\n        id: t('user.settings.custom_theme.centerChannelBg'),\n        defaultMessage: 'Center Channel BG',\n    },\n    centerChannelColor: {\n        id: t('user.settings.custom_theme.centerChannelColor'),\n        defaultMessage: 'Center Channel Text',\n    },\n    newMessageSeparator: {\n        id: t('user.settings.custom_theme.newMessageSeparator'),\n        defaultMessage: 'New Message Separator',\n    },\n    linkColor: {\n        id: t('user.settings.custom_theme.linkColor'),\n        defaultMessage: 'Link Color',\n    },\n    buttonBg: {\n        id: t('user.settings.custom_theme.buttonBg'),\n        defaultMessage: 'Button BG',\n    },\n    buttonColor: {\n        id: t('user.settings.custom_theme.buttonColor'),\n        defaultMessage: 'Button Text',\n    },\n    errorTextColor: {\n        id: t('user.settings.custom_theme.errorTextColor'),\n        defaultMessage: 'Error Text Color',\n    },\n    mentionHighlightBg: {\n        id: t('user.settings.custom_theme.mentionHighlightBg'),\n        defaultMessage: 'Mention Highlight BG',\n    },\n    mentionHighlightLink: {\n        id: t('user.settings.custom_theme.mentionHighlightLink'),\n        defaultMessage: 'Mention Highlight Link',\n    },\n    codeTheme: {\n        id: t('user.settings.custom_theme.codeTheme'),\n        defaultMessage: 'Code Theme',\n    },\n});\n\nexport default class CustomThemeChooser extends React.Component {\n    static propTypes = {\n        theme: PropTypes.object.isRequired,\n        updateTheme: PropTypes.func.isRequired,\n    };\n\n    static contextTypes = {\n        intl: intlShape.isRequired,\n    };\n\n    constructor(props) {\n        super(props);\n        const copyTheme = this.setCopyTheme(this.props.theme);\n\n        this.state = {\n            copyTheme,\n        };\n    }\n\n    componentDidMount() {\n        $('.group--code').on('change', this.onCodeThemeChange);\n    }\n\n    componentWillUnmount() {\n        $('.group--code').off('change', this.onCodeThemeChange);\n    }\n\n    handleColorChange = (settingId, color) => {\n        const {updateTheme, theme} = this.props;\n        if (theme[settingId] !== color) {\n            const newTheme = {\n                ...theme,\n                type: 'custom',\n                [settingId]: color,\n            };\n\n            // For backwards compatability\n            if (settingId === 'mentionBg') {\n                newTheme.mentionBj = color;\n            }\n\n            updateTheme(newTheme);\n\n            const copyTheme = this.setCopyTheme(newTheme);\n\n            this.setState({\n                copyTheme,\n            });\n        }\n    }\n\n    setCopyTheme(theme) {\n        const copyTheme = Object.assign({}, theme);\n        delete copyTheme.type;\n        delete copyTheme.image;\n\n        return JSON.stringify(copyTheme);\n    }\n\n    pasteBoxChange = (e) => {\n        let text = '';\n\n        if (window.clipboardData && window.clipboardData.getData) { // IE\n            text = window.clipboardData.getData('Text');\n        } else {\n            text = e.clipboardData.getData('Text');//e.clipboardData.getData('text/plain');\n        }\n\n        if (text.length === 0) {\n            return;\n        }\n\n        let theme;\n        try {\n            theme = JSON.parse(text);\n        } catch (err) {\n            return;\n        }\n\n        this.setState({\n            copyTheme: JSON.stringify(theme),\n        });\n\n        theme.type = 'custom';\n        this.props.updateTheme(theme);\n    }\n\n    onChangeHandle = (e) => {\n        e.stopPropagation();\n    }\n\n    selectTheme = () => {\n        const textarea = this.refs.textarea;\n        textarea.focus();\n        textarea.setSelectionRange(0, this.state.copyTheme.length);\n    }\n\n    toggleSidebarStyles = (e) => {\n        e.preventDefault();\n\n        $(this.refs.sidebarStylesHeader).toggleClass('open');\n        this.toggleSection(this.refs.sidebarStyles);\n    }\n\n    toggleCenterChannelStyles = (e) => {\n        e.preventDefault();\n\n        $(this.refs.centerChannelStylesHeader).toggleClass('open');\n        this.toggleSection(this.refs.centerChannelStyles);\n    }\n\n    toggleLinkAndButtonStyles = (e) => {\n        e.preventDefault();\n\n        $(this.refs.linkAndButtonStylesHeader).toggleClass('open');\n        this.toggleSection(this.refs.linkAndButtonStyles);\n    }\n\n    toggleSection(node) {\n        if (UserAgent.isIos()) {\n            // iOS doesn't support jQuery animations\n            $(node).toggleClass('open');\n        } else {\n            $(node).slideToggle();\n        }\n    }\n\n    onCodeThemeChange = (e) => {\n        const theme = {\n            ...this.props.theme,\n            type: 'custom',\n            codeTheme: e.target.value,\n        };\n\n        this.props.updateTheme(theme);\n    }\n\n    render() {\n        const {formatMessage} = this.context.intl;\n        const theme = this.props.theme;\n\n        const sidebarElements = [];\n        const centerChannelElements = [];\n        const linkAndButtonElements = [];\n        Constants.THEME_ELEMENTS.forEach((element, index) => {\n            if (element.id === 'codeTheme') {\n                const codeThemeOptions = [];\n                let codeThemeURL = '';\n\n                element.themes.forEach((codeTheme, codeThemeIndex) => {\n                    if (codeTheme.id === theme[element.id]) {\n                        codeThemeURL = codeTheme.iconURL;\n                    }\n                    codeThemeOptions.push(\n                        <option\n                            key={'code-theme-key' + codeThemeIndex}\n                            value={codeTheme.id}\n                        >\n                            {codeTheme.uiName}\n                        </option>\n                    );\n                });\n\n                var popoverContent = (\n                    <Popover\n                        bsStyle='info'\n                        id='code-popover'\n                        className='code-popover'\n                    >\n                        <img\n                            width='200'\n                            alt={'code theme image'}\n                            src={codeThemeURL}\n                        />\n                    </Popover>\n                );\n\n                centerChannelElements.push(\n                    <div\n                        className='col-sm-6 form-group'\n                        key={'custom-theme-key' + index}\n                    >\n                        <label className='custom-label'>{formatMessage(messages[element.id])}</label>\n                        <div\n                            className='input-group theme-group group--code dropdown'\n                            id={element.id}\n                        >\n                            <select\n                                id='codeThemeSelect'\n                                className='form-control'\n                                type='text'\n                                defaultValue={theme[element.id]}\n                            >\n                                {codeThemeOptions}\n                            </select>\n                            <OverlayTrigger\n                                placement='top'\n                                overlay={popoverContent}\n                                ref='headerOverlay'\n                            >\n                                <span className='input-group-addon'>\n                                    <img\n                                        alt={'code theme image'}\n                                        src={codeThemeURL}\n                                    />\n                                </span>\n                            </OverlayTrigger>\n                        </div>\n                    </div>\n                );\n            } else if (element.group === 'centerChannelElements') {\n                centerChannelElements.push(\n                    <div\n                        className='col-sm-6 form-group element'\n                        key={'custom-theme-key' + index}\n                    >\n                        <ColorChooser\n                            id={element.id}\n                            label={formatMessage(messages[element.id])}\n                            color={theme[element.id]}\n                            onChange={this.handleColorChange}\n                        />\n                    </div>\n                );\n            } else if (element.group === 'sidebarElements') {\n                // Need to support old typo mentionBj element for mentionBg\n                let color = theme[element.id];\n                if (!color && element.id === 'mentionBg') {\n                    color = theme.mentionBj;\n                }\n\n                sidebarElements.push(\n                    <div\n                        className='col-sm-6 form-group element'\n                        key={'custom-theme-key' + index}\n                    >\n                        <ColorChooser\n                            id={element.id}\n                            label={formatMessage(messages[element.id])}\n                            color={color}\n                            onChange={this.handleColorChange}\n                        />\n                    </div>\n                );\n            } else {\n                linkAndButtonElements.push(\n                    <div\n                        className='col-sm-6 form-group element'\n                        key={'custom-theme-key' + index}\n                    >\n                        <ColorChooser\n                            id={element.id}\n                            label={formatMessage(messages[element.id])}\n                            color={theme[element.id]}\n                            onChange={this.handleColorChange}\n                        />\n                    </div>\n                );\n            }\n        });\n\n        const pasteBox = (\n            <div className='col-sm-12'>\n                <label className='custom-label'>\n                    <FormattedMessage\n                        id='user.settings.custom_theme.copyPaste'\n                        defaultMessage='Copy and paste to share theme colors:'\n                    />\n                </label>\n                <textarea\n                    ref='textarea'\n                    className='form-control'\n                    id='pasteBox'\n                    value={this.state.copyTheme}\n                    onPaste={this.pasteBoxChange}\n                    onChange={this.onChangeHandle}\n                    onClick={this.selectTheme}\n                />\n            </div>\n        );\n\n        return (\n            <div className='appearance-section padding-top'>\n                <div className='theme-elements row'>\n                    <div\n                        ref='sidebarStylesHeader'\n                        className='theme-elements__header'\n                        onClick={this.toggleSidebarStyles}\n                    >\n                        <FormattedMessage\n                            id='user.settings.custom_theme.sidebarTitle'\n                            defaultMessage='Sidebar Styles'\n                        />\n                        <div className='header__icon'>\n                            <i\n                                className='fa fa-plus'\n                                title={formatMessage({id: 'generic_icons.expand', defaultMessage: 'Expand Icon'})}\n                            />\n                            <i\n                                className='fa fa-minus'\n                                title={formatMessage({id: 'generic_icons.collapse', defaultMessage: 'Collapse Icon'})}\n                            />\n                        </div>\n                    </div>\n                    <div\n                        ref='sidebarStyles'\n                        className='theme-elements__body'\n                    >\n                        {sidebarElements}\n                    </div>\n                </div>\n                <div\n                    id='centerChannelStyles'\n                    className='theme-elements row'\n                >\n                    <div\n                        ref='centerChannelStylesHeader'\n                        className='theme-elements__header'\n                        onClick={this.toggleCenterChannelStyles}\n                    >\n                        <FormattedMessage\n                            id='user.settings.custom_theme.centerChannelTitle'\n                            defaultMessage='Center Channel Styles'\n                        />\n                        <div className='header__icon'>\n                            <i\n                                className='fa fa-plus'\n                                title={formatMessage({id: 'generic_icons.expand', defaultMessage: 'Expand Icon'})}\n                            />\n                            <i\n                                className='fa fa-minus'\n                                title={formatMessage({id: 'generic_icons.collapse', defaultMessage: 'Collapse Icon'})}\n                            />\n                        </div>\n                    </div>\n                    <div\n                        ref='centerChannelStyles'\n                        className='theme-elements__body'\n                    >\n                        {centerChannelElements}\n                    </div>\n                </div>\n                <div className='theme-elements row'>\n                    <div\n                        ref='linkAndButtonStylesHeader'\n                        className='theme-elements__header'\n                        onClick={this.toggleLinkAndButtonStyles}\n                    >\n                        <FormattedMessage\n                            id='user.settings.custom_theme.linkButtonTitle'\n                            defaultMessage='Link and Button Styles'\n                        />\n                        <div className='header__icon'>\n                            <i\n                                className='fa fa-plus'\n                                title={formatMessage({id: 'generic_icons.expand', defaultMessage: 'Expand Icon'})}\n                            />\n                            <i\n                                className='fa fa-minus'\n                                title={formatMessage({id: 'generic_icons.collapse', defaultMessage: 'Collapse Icon'})}\n                            />\n                        </div>\n                    </div>\n                    <div\n                        ref='linkAndButtonStyles'\n                        className='theme-elements__body'\n                    >\n                        {linkAndButtonElements}\n                    </div>\n                </div>\n                <div className='row margin-top x2'>\n                    {pasteBox}\n                </div>\n            </div>\n        );\n    }\n}\n","// Copyright (c) 2015-present Mattermost, Inc. All Rights Reserved.\n// See LICENSE.txt for license information.\n\nimport $ from 'jquery';\nimport PropTypes from 'prop-types';\nimport React from 'react';\n\nimport Constants from 'utils/constants.jsx';\nimport * as Utils from 'utils/utils.jsx';\n\nexport default class PremadeThemeChooser extends React.Component {\n    render() {\n        const theme = this.props.theme;\n\n        const premadeThemes = [];\n        const allowedThemes = this.props.allowedThemes;\n        const hasAllowedThemes = allowedThemes.length > 1 || (allowedThemes[0] && allowedThemes[0].trim().length > 0);\n\n        for (const k in Constants.THEMES) {\n            if (Constants.THEMES.hasOwnProperty(k)) {\n                if (hasAllowedThemes && allowedThemes.indexOf(k) < 0) {\n                    continue;\n                }\n\n                const premadeTheme = $.extend(true, {}, Constants.THEMES[k]);\n\n                let activeClass = '';\n                if (premadeTheme.type === theme.type) {\n                    activeClass = 'active';\n                }\n\n                premadeThemes.push(\n                    <div\n                        className='col-xs-6 col-sm-3 premade-themes'\n                        key={'premade-theme-key' + k}\n                    >\n                        <div\n                            id={`premadeTheme${premadeTheme.type.replace(' ', '')}`}\n                            className={activeClass}\n                            onClick={() => this.props.updateTheme(premadeTheme)}\n                        >\n                            <label>\n                                <img\n                                    alt={'premade theme ' + k}\n                                    className='img-responsive'\n                                    src={premadeTheme.image}\n                                />\n                                <div className='theme-label'>{Utils.toTitleCase(premadeTheme.type)}</div>\n                            </label>\n                        </div>\n                    </div>\n                );\n            }\n        }\n\n        return (\n            <div className='row appearance-section'>\n                <div className='clearfix'>\n                    {premadeThemes}\n                </div>\n            </div>\n        );\n    }\n}\n\nPremadeThemeChooser.propTypes = {\n    theme: PropTypes.object.isRequired,\n    updateTheme: PropTypes.func.isRequired,\n    allowedThemes: PropTypes.arrayOf(PropTypes.string),\n};\n\nPremadeThemeChooser.defaultProps = {\n    allowedThemes: [],\n};\n","// Copyright (c) 2015-present Mattermost, Inc. All Rights Reserved.\n// See LICENSE.txt for license information.\n\nimport {connect} from 'react-redux';\nimport {getConfig} from 'mattermost-redux/selectors/entities/general';\n\nimport PremadeThemeChooser from './premade_theme_chooser.jsx';\n\nfunction mapStateToProps(state) {\n    const config = getConfig(state);\n\n    const allowedThemes = (config.AllowedThemes && config.AllowedThemes.split(',')) || [];\n\n    return {\n        allowedThemes,\n    };\n}\n\nexport default connect(mapStateToProps)(PremadeThemeChooser);\n","// Copyright (c) 2015-present Mattermost, Inc. All Rights Reserved.\n// See LICENSE.txt for license information.\n\nimport $ from 'jquery';\nimport PropTypes from 'prop-types';\nimport React from 'react';\nimport ReactDOM from 'react-dom';\nimport {FormattedMessage} from 'react-intl';\n\nimport {ActionTypes, Constants} from 'utils/constants.jsx';\nimport * as Utils from 'utils/utils.jsx';\nimport AppDispatcher from 'dispatcher/app_dispatcher.jsx';\nimport SettingItemMax from 'components/setting_item_max.jsx';\nimport SettingItemMin from 'components/setting_item_min';\n\nimport CustomThemeChooser from './custom_theme_chooser.jsx';\nimport PremadeThemeChooser from './premade_theme_chooser';\n\nexport default class ThemeSetting extends React.Component {\n    static propTypes = {\n        actions: PropTypes.shape({\n            saveTheme: PropTypes.func.isRequired,\n            deleteTeamSpecificThemes: PropTypes.func.isRequired,\n        }).isRequired,\n        currentTeamId: PropTypes.string.isRequired,\n        theme: PropTypes.object,\n        selected: PropTypes.bool.isRequired,\n        updateSection: PropTypes.func.isRequired,\n        setRequireConfirm: PropTypes.func.isRequired,\n        setEnforceFocus: PropTypes.func.isRequired,\n        allowCustomThemes: PropTypes.bool,\n        focused: PropTypes.bool.isRequired,\n    };\n\n    constructor(props) {\n        super(props);\n\n        this.state = {\n            ...this.getStateFromProps(props),\n            isSaving: false,\n        };\n\n        this.originalTheme = Object.assign({}, this.state.theme);\n    }\n\n    componentDidMount() {\n        if (this.props.selected) {\n            $(ReactDOM.findDOMNode(this.refs[this.state.theme])).addClass('active-border');\n        }\n    }\n\n    componentDidUpdate() {\n        if (this.props.selected) {\n            $('.color-btn').removeClass('active-border');\n            $(ReactDOM.findDOMNode(this.refs[this.state.theme])).addClass('active-border');\n        }\n    }\n\n    UNSAFE_componentWillReceiveProps(nextProps) { // eslint-disable-line camelcase\n        if (this.props.selected && !nextProps.selected) {\n            this.resetFields();\n        }\n    }\n\n    componentWillUnmount() {\n        if (this.props.selected) {\n            Utils.applyTheme(this.props.theme);\n        }\n    }\n\n    getStateFromProps(props = this.props) {\n        const theme = {...props.theme};\n        if (!theme.codeTheme) {\n            theme.codeTheme = Constants.DEFAULT_CODE_THEME;\n        }\n\n        return {\n            theme,\n            type: theme.type || 'premade',\n            showAllTeamsCheckbox: props.showAllTeamsCheckbox,\n            applyToAllTeams: props.applyToAllTeams,\n        };\n    }\n\n    scrollToTop() {\n        $('.ps-container.modal-body').scrollTop(0);\n    }\n\n    submitTheme = async () => {\n        const teamId = this.state.applyToAllTeams ? '' : this.props.currentTeamId;\n\n        this.setState({isSaving: true});\n\n        await this.props.actions.saveTheme(teamId, this.state.theme);\n\n        if (this.state.applyToAllTeams) {\n            await this.props.actions.deleteTeamSpecificThemes();\n        }\n\n        this.props.setRequireConfirm(false);\n        this.originalTheme = Object.assign({}, this.state.theme);\n        this.scrollToTop();\n        this.props.updateSection('');\n        this.setState({isSaving: false});\n    };\n\n    updateTheme = (theme) => {\n        let themeChanged = this.state.theme.length === theme.length;\n        if (!themeChanged) {\n            for (const field in theme) {\n                if (theme.hasOwnProperty(field)) {\n                    if (this.state.theme[field] !== theme[field]) {\n                        themeChanged = true;\n                        break;\n                    }\n                }\n            }\n        }\n\n        this.props.setRequireConfirm(themeChanged);\n\n        this.setState({theme});\n        Utils.applyTheme(theme);\n    };\n\n    updateType(type) {\n        this.setState({type});\n    }\n\n    resetFields = () => {\n        const state = this.getStateFromProps();\n        state.serverError = null;\n        this.setState(state);\n        this.scrollToTop();\n\n        Utils.applyTheme(state.theme);\n\n        this.props.setRequireConfirm(false);\n    };\n\n    handleImportModal = () => {\n        AppDispatcher.handleViewAction({\n            type: ActionTypes.TOGGLE_IMPORT_THEME_MODAL,\n            value: true,\n            callback: this.updateTheme,\n        });\n\n        this.props.setEnforceFocus(false);\n    };\n\n    handleUpdateSection = (section) => {\n        this.props.updateSection(section);\n    };\n\n    render() {\n        let serverError;\n        if (this.state.serverError) {\n            serverError = this.state.serverError;\n        }\n\n        const displayCustom = this.state.type === 'custom';\n\n        let custom;\n        let premade;\n        if (displayCustom && this.props.allowCustomThemes) {\n            custom = (\n                <div key='customThemeChooser'>\n                    <CustomThemeChooser\n                        theme={this.state.theme}\n                        updateTheme={this.updateTheme}\n                    />\n                </div>\n            );\n        } else {\n            premade = (\n                <div key='premadeThemeChooser'>\n                    <br/>\n                    <PremadeThemeChooser\n                        theme={this.state.theme}\n                        updateTheme={this.updateTheme}\n                    />\n                </div>\n            );\n        }\n\n        let themeUI;\n        if (this.props.selected) {\n            const inputs = [];\n\n            if (this.props.allowCustomThemes) {\n                inputs.push(\n                    <div\n                        className='radio'\n                        key='premadeThemeColorLabel'\n                    >\n                        <label>\n                            <input\n                                id='standardThemes'\n                                type='radio'\n                                name='theme'\n                                checked={!displayCustom}\n                                onChange={this.updateType.bind(this, 'premade')}\n                            />\n                            <FormattedMessage\n                                id='user.settings.display.theme.themeColors'\n                                defaultMessage='Theme Colors'\n                            />\n                        </label>\n                        <br/>\n                    </div>\n                );\n            }\n\n            inputs.push(premade);\n\n            if (this.props.allowCustomThemes) {\n                inputs.push(\n                    <div\n                        className='radio'\n                        key='customThemeColorLabel'\n                    >\n                        <label>\n                            <input\n                                id='customThemes'\n                                type='radio'\n                                name='theme'\n                                checked={displayCustom}\n                                onChange={this.updateType.bind(this, 'custom')}\n                            />\n                            <FormattedMessage\n                                id='user.settings.display.theme.customTheme'\n                                defaultMessage='Custom Theme'\n                            />\n                        </label>\n                    </div>\n                );\n\n                inputs.push(custom);\n\n                inputs.push(\n                    <div key='otherThemes'>\n                        <br/>\n                        <a\n                            id='otherThemes'\n                            href='http://docs.mattermost.com/help/settings/theme-colors.html#custom-theme-examples'\n                            target='_blank'\n                            rel='noopener noreferrer'\n                        >\n                            <FormattedMessage\n                                id='user.settings.display.theme.otherThemes'\n                                defaultMessage='See other themes'\n                            />\n                        </a>\n                    </div>\n                );\n\n                inputs.push(\n                    <div\n                        key='importSlackThemeButton'\n                        className='padding-top'\n                    >\n                        <button\n                            id='slackImportTheme'\n                            className='theme style--none color--link'\n                            onClick={this.handleImportModal}\n                        >\n                            <FormattedMessage\n                                id='user.settings.display.theme.import'\n                                defaultMessage='Import theme colors from Slack'\n                            />\n                        </button>\n                    </div>\n                );\n            }\n\n            let allTeamsCheckbox = null;\n            if (this.state.showAllTeamsCheckbox) {\n                allTeamsCheckbox = (\n                    <div className='checkbox user-settings__submit-checkbox'>\n                        <label>\n                            <input\n                                id='applyThemeToAllTeams'\n                                type='checkbox'\n                                checked={this.state.applyToAllTeams}\n                                onChange={(e) => this.setState({applyToAllTeams: e.target.checked})}\n                            />\n                            <FormattedMessage\n                                id='user.settings.display.theme.applyToAllTeams'\n                                defaultMessage='Apply new theme to all my teams'\n                            />\n                        </label>\n                    </div>\n                );\n            }\n\n            themeUI = (\n                <SettingItemMax\n                    inputs={inputs}\n                    submitExtra={allTeamsCheckbox}\n                    submit={this.submitTheme}\n                    saving={this.state.isSaving}\n                    server_error={serverError}\n                    width='full'\n                    updateSection={this.handleUpdateSection}\n                />\n            );\n        } else {\n            themeUI = (\n                <SettingItemMin\n                    title={\n                        <FormattedMessage\n                            id='user.settings.display.theme.title'\n                            defaultMessage='Theme'\n                        />\n                    }\n                    describe={\n                        <FormattedMessage\n                            id='user.settings.display.theme.describe'\n                            defaultMessage='Open to manage your theme'\n                        />\n                    }\n                    section={'theme'}\n                    updateSection={this.handleUpdateSection}\n                    focused={this.props.focused}\n                />\n            );\n        }\n\n        return themeUI;\n    }\n}\n","// Copyright (c) 2015-present Mattermost, Inc. All Rights Reserved.\n// See LICENSE.txt for license information.\n\nimport {connect} from 'react-redux';\nimport {bindActionCreators} from 'redux';\n\nimport {getTheme, makeGetCategory} from 'mattermost-redux/selectors/entities/preferences';\nimport {getCurrentTeamId, getMyTeamsCount} from 'mattermost-redux/selectors/entities/teams';\n\nimport {saveTheme, deleteTeamSpecificThemes} from 'mattermost-redux/actions/preferences';\n\nimport {Preferences} from 'utils/constants.jsx';\n\nimport UserSettingsTheme from './user_settings_theme.jsx';\n\nfunction makeMapStateToProps() {\n    const getThemeCategory = makeGetCategory();\n\n    return (state) => {\n        return {\n            currentTeamId: getCurrentTeamId(state),\n            theme: getTheme(state),\n            applyToAllTeams: getThemeCategory(state, Preferences.CATEGORY_THEME).length <= 1,\n            showAllTeamsCheckbox: getMyTeamsCount(state) > 1,\n        };\n    };\n}\n\nfunction mapDispatchToProps(dispatch) {\n    return {\n        actions: bindActionCreators({\n            saveTheme,\n            deleteTeamSpecificThemes,\n        }, dispatch),\n    };\n}\n\nexport default connect(makeMapStateToProps, mapDispatchToProps)(UserSettingsTheme);\n","// Copyright (c) 2015-present Mattermost, Inc. All Rights Reserved.\n// See LICENSE.txt for license information.\n\nimport React from 'react';\n\nimport {getTimezoneRegion} from 'mattermost-redux/utils/timezone_utils';\n\nimport {getSupportedTimezones} from 'utils/timezone';\n\nimport Provider from './provider.jsx';\nimport Suggestion from './suggestion.jsx';\n\nclass TimezoneSuggestion extends Suggestion {\n    render() {\n        const {item, isSelection} = this.props;\n        const timezone = item;\n\n        let className = 'mentions__name';\n        if (isSelection) {\n            className += ' suggestion--selected';\n        }\n\n        return (\n            <div\n                onClick={this.handleClick}\n                className={className}\n                {...Suggestion.baseProps}\n            >\n                {timezone}\n            </div>\n        );\n    }\n}\n\nexport default class TimezoneProvider extends Provider {\n    handlePretextChanged(timezonePrefix, resultsCallback) {\n        if (timezonePrefix.length === 0) {\n            this.displayAllTimezones(resultsCallback, timezonePrefix);\n            return true;\n        }\n\n        if (timezonePrefix) {\n            this.filterTimezones(resultsCallback, timezonePrefix);\n            return true;\n        }\n\n        return false;\n    }\n\n    async displayAllTimezones(resultsCallback) {\n        resultsCallback({\n            matchedPretext: '',\n            terms: getSupportedTimezones(),\n            items: getSupportedTimezones(),\n            component: TimezoneSuggestion,\n        });\n    }\n\n    async filterTimezones(resultsCallback, timezonePrefix) {\n        const filteredTimezones = getSupportedTimezones().filter((t) => (\n            getTimezoneRegion(t).toLowerCase().indexOf(timezonePrefix) >= 0 ||\n                t.toLowerCase().indexOf(timezonePrefix) >= 0\n        ));\n\n        resultsCallback({\n            matchedPretext: timezonePrefix,\n            terms: filteredTimezones,\n            items: filteredTimezones,\n            component: TimezoneSuggestion,\n        });\n    }\n}\n","// Copyright (c) 2015-present Mattermost, Inc. All Rights Reserved.\n// See LICENSE.txt for license information.\n\nimport PropTypes from 'prop-types';\nimport React from 'react';\nimport {getTimezoneRegion} from 'mattermost-redux/utils/timezone_utils';\nimport {FormattedHTMLMessage, FormattedMessage} from 'react-intl';\n\nimport SettingItemMax from 'components/setting_item_max.jsx';\nimport {getBrowserTimezone} from 'utils/timezone';\n\nimport SuggestionBox from 'components/suggestion/suggestion_box.jsx';\nimport SuggestionList from 'components/suggestion/suggestion_list.jsx';\nimport TimezoneProvider from 'components/suggestion/timezone_provider.jsx';\n\nexport default class ManageTimezones extends React.PureComponent {\n    static propTypes = {\n        user: PropTypes.object.isRequired,\n        updateSection: PropTypes.func.isRequired,\n        useAutomaticTimezone: PropTypes.bool.isRequired,\n        automaticTimezone: PropTypes.string.isRequired,\n        manualTimezone: PropTypes.string.isRequired,\n        timezones: PropTypes.array.isRequired,\n        actions: PropTypes.shape({\n            updateMe: PropTypes.func.isRequired,\n        }).isRequired,\n    };\n\n    constructor(props) {\n        super(props);\n\n        this.state = {\n            useAutomaticTimezone: props.useAutomaticTimezone,\n            automaticTimezone: props.automaticTimezone,\n            manualTimezone: props.manualTimezone,\n            manualTimezoneInput: props.manualTimezone,\n            isSaving: false,\n        };\n    }\n\n    onChange = (e) => {\n        this.setState({manualTimezoneInput: e.target.value});\n    };\n\n    handleTimezoneSelected = (selected) => {\n        if (!selected) {\n            return;\n        }\n\n        this.setState({\n            manualTimezone: selected,\n            manualTimezoneInput: selected,\n        });\n    };\n\n    timezoneNotChanged = () => {\n        const {\n            useAutomaticTimezone,\n            automaticTimezone,\n            manualTimezone,\n        } = this.state;\n\n        const {\n            useAutomaticTimezone: oldUseAutomaticTimezone,\n            automaticTimezone: oldAutomaticTimezone,\n            manualTimezone: oldManualTimezone,\n        } = this.props;\n\n        return (\n            useAutomaticTimezone === oldUseAutomaticTimezone &&\n            automaticTimezone === oldAutomaticTimezone &&\n            manualTimezone === oldManualTimezone\n        );\n    };\n\n    changeTimezone = () => {\n        if (this.timezoneNotChanged()) {\n            this.props.updateSection('');\n            return;\n        }\n\n        this.submitUser();\n    };\n\n    submitUser = () => {\n        const {user, actions} = this.props;\n        const {\n            useAutomaticTimezone,\n            automaticTimezone,\n            manualTimezone,\n        } = this.state;\n\n        const timezone = {\n            useAutomaticTimezone: useAutomaticTimezone.toString(),\n            automaticTimezone,\n            manualTimezone,\n        };\n\n        const updatedUser = {\n            ...user,\n            timezone,\n        };\n\n        actions.updateMe(updatedUser).\n            then(({data, error: err}) => {\n                if (data) {\n                    this.props.updateSection('');\n                } else if (err) {\n                    let serverError;\n                    if (err.message) {\n                        serverError = err.message;\n                    } else {\n                        serverError = err;\n                    }\n                    this.setState({serverError, isSaving: false});\n                }\n            });\n    };\n\n    handleAutomaticTimezone = (e) => {\n        const useAutomaticTimezone = e.target.checked;\n        let automaticTimezone = '';\n\n        if (useAutomaticTimezone) {\n            automaticTimezone = getBrowserTimezone();\n        }\n\n        this.setState({\n            useAutomaticTimezone,\n            automaticTimezone,\n        });\n    };\n\n    handleManualTimezone = (e) => {\n        this.setState({manualTimezone: e.target.value});\n    };\n\n    render() {\n        const {timezones} = this.props;\n        const {\n            useAutomaticTimezone,\n            automaticTimezone,\n        } = this.state;\n\n        let serverError;\n        if (this.state.serverError) {\n            serverError = <label className='has-error'>{this.state.serverError}</label>;\n        }\n\n        const inputs = [];\n\n        const timezoneRegion = (\n            <div\n                className='section-describe padding-top'\n            >\n                {useAutomaticTimezone && getTimezoneRegion(automaticTimezone)}\n            </div>\n        );\n\n        const noTimezonesFromServer = timezones.length === 0;\n        const automaticTimezoneInput = (\n            <div className='checkbox'>\n                <label>\n                    <input\n                        id='automaticTimezoneInput'\n                        type='checkbox'\n                        checked={useAutomaticTimezone}\n                        onChange={this.handleAutomaticTimezone}\n                        disabled={noTimezonesFromServer}\n                    />\n                    <FormattedMessage\n                        id='user.settings.timezones.automatic'\n                        defaultMessage='Set automatically'\n                    />\n                    {timezoneRegion}\n                </label>\n            </div>\n        );\n\n        const providers = [new TimezoneProvider()];\n        const manualTimezoneInput = (\n            <div key='changeTimezone'>\n                <label className='control-label'>\n                    <FormattedMessage\n                        id='user.settings.timezones.change'\n                        defaultMessage='Change timezone'\n                    />\n                </label>\n                <div className='padding-top'>\n                    <SuggestionBox\n                        ref={this.setSwitchBoxRef}\n                        className='form-control focused'\n                        type='search'\n                        onChange={this.onChange}\n                        value={this.state.manualTimezoneInput}\n                        onItemSelected={this.handleTimezoneSelected}\n                        listComponent={SuggestionList}\n                        maxLength='64'\n                        requiredCharacters={0}\n                        providers={providers}\n                        listStyle='bottom'\n                        completeOnTab={false}\n                        renderDividers={false}\n                        openOnFocus={true}\n                        disabled={noTimezonesFromServer}\n                    />\n                    {serverError}\n                </div>\n            </div>\n        );\n\n        inputs.push(automaticTimezoneInput);\n\n        if (!useAutomaticTimezone) {\n            inputs.push(manualTimezoneInput);\n        }\n\n        inputs.push(\n            <div>\n                <br/>\n                <FormattedHTMLMessage\n                    id='user.settings.timezones.promote'\n                    defaultMessage='Select the time zone used for timestamps in the user interface and email notifications.'\n                />\n            </div>\n        );\n\n        return (\n            <SettingItemMax\n                title={\n                    <FormattedMessage\n                        id='user.settings.display.timezone'\n                        defaultMessage='Timezone'\n                    />\n                }\n                containerStyle='timezone-container'\n                width='medium'\n                submit={this.changeTimezone}\n                saving={this.state.isSaving}\n                inputs={inputs}\n                updateSection={this.props.updateSection}\n            />\n        );\n    }\n}\n\n","// Copyright (c) 2015-present Mattermost, Inc. All Rights Reserved.\n// See LICENSE.txt for license information.\nimport {connect} from 'react-redux';\nimport {bindActionCreators} from 'redux';\nimport {updateMe} from 'mattermost-redux/actions/users';\n\nimport ManageTimezones from './manage_timezones';\n\nfunction mapDispatchToProps(dispatch) {\n    return {actions: bindActionCreators({updateMe}, dispatch)};\n}\n\nexport default connect(null, mapDispatchToProps)(ManageTimezones);\n","// Copyright (c) 2015-present Mattermost, Inc. All Rights Reserved.\n// See LICENSE.txt for license information.\n\nimport PropTypes from 'prop-types';\nimport React from 'react';\nimport {FormattedMessage} from 'react-intl';\nimport ReactSelect from 'react-select';\n\nimport * as I18n from 'i18n/i18n.jsx';\nimport SettingItemMax from 'components/setting_item_max.jsx';\nimport FormattedMarkdownMessage from 'components/formatted_markdown_message.jsx';\nimport {isKeyPressed} from 'utils/utils.jsx';\nimport Constants from 'utils/constants.jsx';\n\nexport default class ManageLanguage extends React.Component {\n    static propTypes = {\n        user: PropTypes.object.isRequired,\n        locale: PropTypes.string.isRequired,\n        updateSection: PropTypes.func.isRequired,\n        actions: PropTypes.shape({\n            updateMe: PropTypes.func.isRequired,\n        }).isRequired,\n    };\n\n    constructor(props) {\n        super(props);\n        const locales = I18n.getLanguages();\n        const userLocale = props.locale;\n        const selectedOption = {value: locales[userLocale].value, label: locales[userLocale].name};\n        this.reactSelectContainer = React.createRef();\n\n        this.state = {\n            locale: props.locale,\n            selectedOption,\n            isSaving: false,\n            openMenu: false,\n        };\n    }\n\n    componentDidMount() {\n        if (this.reactSelectContainer.current) {\n            this.reactSelectContainer.current.addEventListener('keydown', this.handleContainerKeyDown);\n        }\n    }\n\n    componentWillUnmount() {\n        if (this.reactSelectContainer.current) {\n            this.reactSelectContainer.current.removeEventListener('keydown', this.handleContainerKeyDown);\n        }\n    }\n\n    handleContainerKeyDown = (e) => {\n        if (isKeyPressed(e, Constants.KeyCodes.ESCAPE) && this.state.openMenu) {\n            document.querySelector('.modal-body').classList.remove('no-scroll');\n            this.setState({openMenu: false});\n            e.stopPropagation();\n        }\n    }\n\n    handleKeyDown = (e) => {\n        if (isKeyPressed(e, Constants.KeyCodes.ENTER)) {\n            document.querySelector('.modal-body').classList.add('no-scroll');\n            this.setState({openMenu: true});\n        }\n    }\n\n    setLanguage = (selectedOption) => {\n        this.setState({\n            locale: selectedOption.value,\n            selectedOption,\n        });\n    }\n\n    changeLanguage = () => {\n        if (this.props.user.locale === this.state.locale) {\n            this.props.updateSection('');\n        } else {\n            this.submitUser({\n                ...this.props.user,\n                locale: this.state.locale,\n            });\n        }\n    }\n\n    submitUser = (user) => {\n        this.setState({isSaving: true});\n\n        this.props.actions.updateMe(user).\n            then(({data, error: err}) => {\n                if (data) {\n                    // Do nothing since changing the locale essentially refreshes the page\n                } else if (err) {\n                    let serverError;\n                    if (err.message) {\n                        serverError = err.message;\n                    } else {\n                        serverError = err;\n                    }\n                    this.setState({serverError, isSaving: false});\n                }\n            });\n    }\n\n    handleMenuClose = () => {\n        document.querySelector('.modal-body').classList.remove('no-scroll');\n        this.setState({openMenu: false});\n    }\n\n    handleMenuOpen = () => {\n        document.querySelector('.modal-body').classList.add('no-scroll');\n        this.setState({openMenu: true});\n    }\n\n    render() {\n        let serverError;\n        if (this.state.serverError) {\n            serverError = <label className='has-error'>{this.state.serverError}</label>;\n        }\n\n        const options = [];\n        const locales = I18n.getLanguages();\n\n        const languages = Object.keys(locales).map((l) => {\n            return {\n                value: locales[l].value,\n                name: locales[l].name,\n                order: locales[l].order,\n            };\n        }).sort((a, b) => a.order - b.order);\n\n        languages.forEach((lang) => {\n            options.push(\n                {value: lang.value, label: lang.name}\n            );\n        });\n\n        const reactStyles = {\n            menuPortal: (provided) => ({\n                ...provided,\n                zIndex: 9999,\n            }),\n        };\n\n        const input = (\n            <div key='changeLanguage'>\n                <br/>\n                <label className='control-label'>\n                    <FormattedMessage\n                        id='user.settings.languages.change'\n                        defaultMessage='Change interface language'\n                    />\n                </label>\n                <div\n                    ref={this.reactSelectContainer}\n                    className='padding-top'\n                >\n                    <ReactSelect\n                        className='react-select react-select-top'\n                        classNamePrefix='react-select'\n                        id='displayLanguage'\n                        menuIsOpen={this.state.openMenu}\n                        menuPortalTarget={document.body}\n                        styles={reactStyles}\n                        options={options}\n                        clearable={false}\n                        onChange={this.setLanguage}\n                        onKeyDown={this.handleKeyDown}\n                        value={this.state.selectedOption}\n                        onMenuClose={this.handleMenuClose}\n                        onMenuOpen={this.handleMenuOpen}\n                    />\n                    {serverError}\n                </div>\n                <div>\n                    <br/>\n                    <FormattedMarkdownMessage\n                        id='user.settings.languages.promote'\n                        defaultMessage='Select which language Mattermost displays in the user interface.\\n \\nWould you like to help with translations? Join the [Mattermost Translation Server](!http://translate.mattermost.com/) to contribute.'\n                    />\n                </div>\n            </div>\n        );\n\n        return (\n            <SettingItemMax\n                title={\n                    <FormattedMessage\n                        id='user.settings.display.language'\n                        defaultMessage='Language'\n                    />\n                }\n                width='medium'\n                submit={this.changeLanguage}\n                saving={this.state.isSaving}\n                inputs={[input]}\n                updateSection={this.props.updateSection}\n            />\n        );\n    }\n}\n","// Copyright (c) 2015-present Mattermost, Inc. All Rights Reserved.\n// See LICENSE.txt for license information.\nimport {connect} from 'react-redux';\nimport {bindActionCreators} from 'redux';\nimport {updateMe} from 'mattermost-redux/actions/users';\n\nimport ManageLanguages from './manage_languages';\n\nfunction mapDispatchToProps(dispatch) {\n    return {actions: bindActionCreators({updateMe}, dispatch)};\n}\n\nexport default connect(null, mapDispatchToProps)(ManageLanguages);\n","// Copyright (c) 2015-present Mattermost, Inc. All Rights Reserved.\n// See LICENSE.txt for license information.\n\nimport PropTypes from 'prop-types';\nimport React from 'react';\nimport {getTimezoneRegion} from 'mattermost-redux/utils/timezone_utils';\nimport {FormattedMessage} from 'react-intl';\n\nimport Constants from 'utils/constants.jsx';\nimport * as Utils from 'utils/utils.jsx';\nimport {getBrowserTimezone} from 'utils/timezone.jsx';\n\nimport * as I18n from 'i18n/i18n.jsx';\nimport {t} from 'utils/i18n';\n\nimport SettingItemMax from 'components/setting_item_max.jsx';\nimport SettingItemMin from 'components/setting_item_min';\nimport ThemeSetting from 'components/user_settings/display/user_settings_theme';\nimport BackIcon from 'components/icon/back_icon';\n\nimport ManageTimezones from './manage_timezones';\nimport ManageLanguages from './manage_languages';\n\nconst Preferences = Constants.Preferences;\n\nfunction getDisplayStateFromProps(props) {\n    return {\n        militaryTime: props.militaryTime,\n        teammateNameDisplay: props.teammateNameDisplay,\n        channelDisplayMode: props.channelDisplayMode,\n        messageDisplay: props.messageDisplay,\n        collapseDisplay: props.collapseDisplay,\n        linkPreviewDisplay: props.linkPreviewDisplay,\n    };\n}\n\nexport default class UserSettingsDisplay extends React.Component {\n    static propTypes = {\n        user: PropTypes.object,\n        updateSection: PropTypes.func,\n        activeSection: PropTypes.string,\n        closeModal: PropTypes.func.isRequired,\n        collapseModal: PropTypes.func.isRequired,\n        setRequireConfirm: PropTypes.func.isRequired,\n        setEnforceFocus: PropTypes.func.isRequired,\n        timezones: PropTypes.array.isRequired,\n        userTimezone: PropTypes.object.isRequired,\n        allowCustomThemes: PropTypes.bool,\n        enableLinkPreviews: PropTypes.bool,\n        defaultClientLocale: PropTypes.string,\n        enableThemeSelection: PropTypes.bool,\n        configTeammateNameDisplay: PropTypes.string,\n        currentUserTimezone: PropTypes.string,\n        enableTimezone: PropTypes.bool,\n        shouldAutoUpdateTimezone: PropTypes.bool,\n        militaryTime: PropTypes.string,\n        teammateNameDisplay: PropTypes.string,\n        channelDisplayMode: PropTypes.string,\n        messageDisplay: PropTypes.string,\n        collapseDisplay: PropTypes.string,\n        linkPreviewDisplay: PropTypes.string,\n        actions: PropTypes.shape({\n            getSupportedTimezones: PropTypes.func.isRequired,\n            autoUpdateTimezone: PropTypes.func.isRequired,\n            savePreferences: PropTypes.func.isRequired,\n        }).isRequired,\n    }\n\n    constructor(props) {\n        super(props);\n\n        this.state = {\n            ...getDisplayStateFromProps(props),\n            isSaving: false,\n        };\n\n        if (props.timezones.length === 0) {\n            props.actions.getSupportedTimezones();\n        }\n\n        this.prevSections = {\n            theme: 'dummySectionName', // dummy value that should never match any section name\n            clock: 'theme',\n            linkpreview: 'clock',\n            message_display: 'linkpreview',\n            channel_display_mode: 'message_display',\n            languages: 'channel_display_mode',\n        };\n    }\n\n    componentDidMount() {\n        const {actions, enableTimezone, shouldAutoUpdateTimezone} = this.props;\n\n        if (enableTimezone && shouldAutoUpdateTimezone) {\n            actions.autoUpdateTimezone(getBrowserTimezone());\n        }\n    }\n\n    handleSubmit = async () => {\n        const userId = this.props.user.id;\n\n        const timePreference = {\n            user_id: userId,\n            category: Preferences.CATEGORY_DISPLAY_SETTINGS,\n            name: Preferences.USE_MILITARY_TIME,\n            value: this.state.militaryTime,\n        };\n        const teammateNameDisplayPreference = {\n            user_id: userId,\n            category: Preferences.CATEGORY_DISPLAY_SETTINGS,\n            name: Preferences.NAME_NAME_FORMAT,\n            value: this.state.teammateNameDisplay,\n        };\n        const channelDisplayModePreference = {\n            user_id: userId,\n            category: Preferences.CATEGORY_DISPLAY_SETTINGS,\n            name: Preferences.CHANNEL_DISPLAY_MODE,\n            value: this.state.channelDisplayMode,\n        };\n        const messageDisplayPreference = {\n            user_id: userId,\n            category: Preferences.CATEGORY_DISPLAY_SETTINGS,\n            name: Preferences.MESSAGE_DISPLAY,\n            value: this.state.messageDisplay,\n        };\n        const collapseDisplayPreference = {\n            user_id: userId,\n            category: Preferences.CATEGORY_DISPLAY_SETTINGS,\n            name: Preferences.COLLAPSE_DISPLAY,\n            value: this.state.collapseDisplay,\n        };\n        const linkPreviewDisplayPreference = {\n            user_id: userId,\n            category: Preferences.CATEGORY_DISPLAY_SETTINGS,\n            name: Preferences.LINK_PREVIEW_DISPLAY,\n            value: this.state.linkPreviewDisplay,\n        };\n\n        this.setState({isSaving: true});\n\n        const preferences = [\n            timePreference,\n            channelDisplayModePreference,\n            messageDisplayPreference,\n            collapseDisplayPreference,\n            linkPreviewDisplayPreference,\n            teammateNameDisplayPreference,\n        ];\n\n        await this.props.actions.savePreferences(userId, preferences);\n\n        this.updateSection('');\n    }\n\n    handleClockRadio = (militaryTime) => {\n        this.setState({militaryTime});\n    }\n\n    handleTeammateNameDisplayRadio = (teammateNameDisplay) => {\n        this.setState({teammateNameDisplay});\n    }\n\n    handleChannelDisplayModeRadio(channelDisplayMode) {\n        this.setState({channelDisplayMode});\n    }\n\n    handlemessageDisplayRadio(messageDisplay) {\n        this.setState({messageDisplay});\n    }\n\n    handleCollapseRadio(collapseDisplay) {\n        this.setState({collapseDisplay});\n    }\n\n    handleLinkPreviewRadio(linkPreviewDisplay) {\n        this.setState({linkPreviewDisplay});\n    }\n\n    handleOnChange(display) {\n        this.setState({...display});\n    }\n\n    updateSection = (section) => {\n        this.updateState();\n        this.props.updateSection(section);\n    }\n\n    updateState = () => {\n        const newState = getDisplayStateFromProps(this.props);\n        if (!Utils.areObjectsEqual(newState, this.state)) {\n            this.setState(newState);\n        }\n\n        this.setState({isSaving: false});\n    }\n\n    createSection(props) {\n        const {\n            section,\n            display,\n            value,\n            title,\n            firstOption,\n            secondOption,\n            thirdOption,\n            description,\n        } = props;\n\n        const firstMessage = (\n            <FormattedMessage\n                id={firstOption.radionButtonText.id}\n                defaultMessage={firstOption.radionButtonText.message}\n            />\n        );\n\n        let moreColon;\n        let firstMessageMore;\n        if (firstOption.radionButtonText.moreId) {\n            moreColon = ': ';\n            firstMessageMore = (\n                <span className='font-weight--normal'>\n                    <FormattedMessage\n                        id={firstOption.radionButtonText.moreId}\n                        defaultMessage={firstOption.radionButtonText.moreMessage}\n                    />\n                </span>\n            );\n        }\n\n        const secondMessage = (\n            <FormattedMessage\n                id={secondOption.radionButtonText.id}\n                defaultMessage={secondOption.radionButtonText.message}\n            />\n        );\n\n        let secondMessageMore;\n        if (secondOption.radionButtonText.moreId) {\n            secondMessageMore = (\n                <span className='font-weight--normal'>\n                    <FormattedMessage\n                        id={secondOption.radionButtonText.moreId}\n                        defaultMessage={secondOption.radionButtonText.moreMessage}\n                    />\n                </span>\n            );\n        }\n\n        let thirdMessage;\n        if (thirdOption) {\n            thirdMessage = (\n                <FormattedMessage\n                    id={thirdOption.radionButtonText.id}\n                    defaultMessage={thirdOption.radionButtonText.message}\n                />\n            );\n        }\n\n        const messageTitle = (\n            <FormattedMessage\n                id={title.id}\n                defaultMessage={title.message}\n            />\n        );\n\n        const messageDesc = (\n            <FormattedMessage\n                id={description.id}\n                defaultMessage={description.message}\n            />\n        );\n\n        if (this.props.activeSection === section) {\n            const format = [false, false, false];\n            if (value === firstOption.value) {\n                format[0] = true;\n            } else if (value === secondOption.value) {\n                format[1] = true;\n            } else {\n                format[2] = true;\n            }\n\n            const name = section + 'Format';\n            const key = section + 'UserDisplay';\n\n            const firstDisplay = {};\n            firstDisplay[display] = firstOption.value;\n\n            const secondDisplay = {};\n            secondDisplay[display] = secondOption.value;\n\n            const thirdDisplay = {};\n            if (thirdOption) {\n                thirdDisplay[display] = thirdOption.value;\n            }\n\n            let thirdSection;\n            if (thirdMessage) {\n                thirdSection = (\n                    <div className='radio'>\n                        <label>\n                            <input\n                                id={name + 'C'}\n                                type='radio'\n                                name={name}\n                                checked={format[2]}\n                                onChange={() => this.handleOnChange(thirdDisplay)}\n                            />\n                            {thirdMessage}\n                        </label>\n                        <br/>\n                    </div>\n                );\n            }\n\n            const inputs = [\n                <div key={key}>\n                    <div className='radio'>\n                        <label>\n                            <input\n                                id={name + 'A'}\n                                type='radio'\n                                name={name}\n                                checked={format[0]}\n                                onChange={() => this.handleOnChange(firstDisplay)}\n                            />\n                            {firstMessage}\n                            {moreColon}\n                            {firstMessageMore}\n                        </label>\n                        <br/>\n                    </div>\n                    <div className='radio'>\n                        <label>\n                            <input\n                                id={name + 'B'}\n                                type='radio'\n                                name={name}\n                                checked={format[1]}\n                                onChange={() => this.handleOnChange(secondDisplay)}\n                            />\n                            {secondMessage}\n                            {moreColon}\n                            {secondMessageMore}\n                        </label>\n                        <br/>\n                    </div>\n                    {thirdSection}\n                    <div>\n                        <br/>\n                        {messageDesc}\n                    </div>\n                </div>,\n            ];\n\n            return (\n                <div>\n                    <SettingItemMax\n                        title={messageTitle}\n                        inputs={inputs}\n                        submit={this.handleSubmit}\n                        saving={this.state.isSaving}\n                        server_error={this.state.serverError}\n                        updateSection={this.updateSection}\n                    />\n                    <div className='divider-dark'/>\n                </div>\n            );\n        }\n\n        let describe;\n        if (value === firstOption.value) {\n            describe = firstMessage;\n        } else if (value === secondOption.value) {\n            describe = secondMessage;\n        } else {\n            describe = thirdMessage;\n        }\n\n        return (\n            <div>\n                <SettingItemMin\n                    title={messageTitle}\n                    describe={describe}\n                    section={section}\n                    updateSection={this.updateSection}\n                />\n                <div className='divider-dark'/>\n            </div>\n        );\n    }\n\n    render() {\n        const collapseSection = this.createSection({\n            section: 'collapse',\n            display: 'collapseDisplay',\n            value: this.state.collapseDisplay,\n            defaultDisplay: 'false',\n            title: {\n                id: t('user.settings.display.collapseDisplay'),\n                message: 'Default appearance of image previews',\n            },\n            firstOption: {\n                value: 'false',\n                radionButtonText: {\n                    id: t('user.settings.display.collapseOn'),\n                    message: 'On',\n                },\n            },\n            secondOption: {\n                value: 'true',\n                radionButtonText: {\n                    id: t('user.settings.display.collapseOff'),\n                    message: 'Off',\n                },\n            },\n            description: {\n                id: t('user.settings.display.collapseDesc'),\n                message: 'Set whether previews of image links and image attachment thumbnails show as expanded or collapsed by default. This setting can also be controlled using the slash commands /expand and /collapse.',\n            },\n        });\n\n        let linkPreviewSection = null;\n\n        if (this.props.enableLinkPreviews) {\n            linkPreviewSection = this.createSection({\n                section: 'linkpreview',\n                display: 'linkPreviewDisplay',\n                value: this.state.linkPreviewDisplay,\n                defaultDisplay: 'true',\n                title: {\n                    id: t('user.settings.display.linkPreviewDisplay'),\n                    message: 'Website Link Previews',\n                },\n                firstOption: {\n                    value: 'true',\n                    radionButtonText: {\n                        id: t('user.settings.display.linkPreviewOn'),\n                        message: 'On',\n                    },\n                },\n                secondOption: {\n                    value: 'false',\n                    radionButtonText: {\n                        id: t('user.settings.display.linkPreviewOff'),\n                        message: 'Off',\n                    },\n                },\n                description: {\n                    id: t('user.settings.display.linkPreviewDesc'),\n                    message: 'When available, the first web link in a message will show a preview of the website content below the message.',\n                },\n            });\n            this.prevSections.message_display = 'linkpreview';\n        } else {\n            this.prevSections.message_display = this.prevSections.linkpreview;\n        }\n\n        const clockSection = this.createSection({\n            section: 'clock',\n            display: 'militaryTime',\n            value: this.state.militaryTime,\n            defaultDisplay: 'false',\n            title: {\n                id: t('user.settings.display.clockDisplay'),\n                message: 'Clock Display',\n            },\n            firstOption: {\n                value: 'false',\n                radionButtonText: {\n                    id: t('user.settings.display.normalClock'),\n                    message: '12-hour clock (example: 4:00 PM)',\n                },\n            },\n            secondOption: {\n                value: 'true',\n                radionButtonText: {\n                    id: t('user.settings.display.militaryClock'),\n                    message: '24-hour clock (example: 16:00)',\n                },\n            },\n            description: {\n                id: t('user.settings.display.preferTime'),\n                message: 'Select how you prefer time displayed.',\n            },\n        });\n\n        const teammateNameDisplaySection = this.createSection({\n            section: Preferences.NAME_NAME_FORMAT,\n            display: 'teammateNameDisplay',\n            value: this.state.teammateNameDisplay,\n            defaultDisplay: this.props.configTeammateNameDisplay,\n            title: {\n                id: t('user.settings.display.teammateNameDisplayTitle'),\n                message: 'Teammate Name Display',\n            },\n            firstOption: {\n                value: Constants.TEAMMATE_NAME_DISPLAY.SHOW_USERNAME,\n                radionButtonText: {\n                    id: t('user.settings.display.teammateNameDisplayUsername'),\n                    message: 'Show username',\n                },\n            },\n            secondOption: {\n                value: Constants.TEAMMATE_NAME_DISPLAY.SHOW_NICKNAME_FULLNAME,\n                radionButtonText: {\n                    id: t('user.settings.display.teammateNameDisplayNicknameFullname'),\n                    message: 'Show nickname if one exists, otherwise show first and last name',\n                },\n            },\n            thirdOption: {\n                value: Constants.TEAMMATE_NAME_DISPLAY.SHOW_FULLNAME,\n                radionButtonText: {\n                    id: t('user.settings.display.teammateNameDisplayFullname'),\n                    message: 'Show first and last name',\n                },\n            },\n            description: {\n                id: t('user.settings.display.teammateNameDisplayDescription'),\n                message: 'Set how to display other user\\'s names in posts and the Direct Messages list.',\n            },\n        });\n\n        let timezoneSelection;\n        if (this.props.enableTimezone && !this.props.shouldAutoUpdateTimezone) {\n            const userTimezone = this.props.userTimezone;\n            if (this.props.activeSection === 'timezone') {\n                timezoneSelection = (\n                    <div>\n                        <ManageTimezones\n                            user={this.props.user}\n                            timezones={this.props.timezones}\n                            useAutomaticTimezone={userTimezone.useAutomaticTimezone}\n                            automaticTimezone={userTimezone.automaticTimezone}\n                            manualTimezone={userTimezone.manualTimezone}\n                            updateSection={this.updateSection}\n                        />\n                        <div className='divider-dark'/>\n                    </div>\n                );\n            } else {\n                timezoneSelection = (\n                    <div>\n                        <SettingItemMin\n                            title={\n                                <FormattedMessage\n                                    id='user.settings.display.timezone'\n                                    defaultMessage='Timezone'\n                                />\n                            }\n                            width='medium'\n                            describe={getTimezoneRegion(this.props.currentUserTimezone)}\n                            section={'timezone'}\n                            updateSection={this.updateSection}\n                        />\n                        <div className='divider-dark'/>\n                    </div>\n                );\n            }\n        }\n\n        const messageDisplaySection = this.createSection({\n            section: Preferences.MESSAGE_DISPLAY,\n            display: 'messageDisplay',\n            value: this.state.messageDisplay,\n            defaultDisplay: Preferences.MESSAGE_DISPLAY_CLEAN,\n            title: {\n                id: t('user.settings.display.messageDisplayTitle'),\n                message: 'Message Display',\n            },\n            firstOption: {\n                value: Preferences.MESSAGE_DISPLAY_CLEAN,\n                radionButtonText: {\n                    id: t('user.settings.display.messageDisplayClean'),\n                    message: 'Standard',\n                    moreId: t('user.settings.display.messageDisplayCleanDes'),\n                    moreMessage: 'Easy to scan and read.',\n                },\n            },\n            secondOption: {\n                value: Preferences.MESSAGE_DISPLAY_COMPACT,\n                radionButtonText: {\n                    id: t('user.settings.display.messageDisplayCompact'),\n                    message: 'Compact',\n                    moreId: t('user.settings.display.messageDisplayCompactDes'),\n                    moreMessage: 'Fit as many messages on the screen as we can.',\n                },\n            },\n            description: {\n                id: t('user.settings.display.messageDisplayDescription'),\n                message: 'Select how messages in a channel should be displayed.',\n            },\n        });\n\n        const channelDisplayModeSection = this.createSection({\n            section: Preferences.CHANNEL_DISPLAY_MODE,\n            display: 'channelDisplayMode',\n            value: this.state.channelDisplayMode,\n            defaultDisplay: Preferences.CHANNEL_DISPLAY_MODE_FULL_SCREEN,\n            title: {\n                id: t('user.settings.display.channelDisplayTitle'),\n                message: 'Channel Display',\n            },\n            firstOption: {\n                value: Preferences.CHANNEL_DISPLAY_MODE_FULL_SCREEN,\n                radionButtonText: {\n                    id: t('user.settings.display.fullScreen'),\n                    message: 'Full width',\n                },\n            },\n            secondOption: {\n                value: Preferences.CHANNEL_DISPLAY_MODE_CENTERED,\n                radionButtonText: {\n                    id: t('user.settings.display.fixedWidthCentered'),\n                    message: 'Fixed width, centered',\n                },\n            },\n            description: {\n                id: t('user.settings.display.channeldisplaymode'),\n                message: 'Select the width of the center channel.',\n            },\n        });\n\n        let languagesSection;\n        let userLocale = this.props.user.locale;\n        if (this.props.activeSection === 'languages') {\n            if (!I18n.isLanguageAvailable(userLocale)) {\n                userLocale = this.props.defaultClientLocale;\n            }\n            languagesSection = (\n                <div>\n                    <ManageLanguages\n                        user={this.props.user}\n                        locale={userLocale}\n                        updateSection={this.updateSection}\n                    />\n                    <div className='divider-dark'/>\n                </div>\n            );\n        } else {\n            let locale;\n            if (I18n.isLanguageAvailable(userLocale)) {\n                locale = I18n.getLanguageInfo(userLocale).name;\n            } else {\n                locale = I18n.getLanguageInfo(this.props.defaultClientLocale).name;\n            }\n\n            languagesSection = (\n                <div>\n                    <SettingItemMin\n                        title={\n                            <FormattedMessage\n                                id='user.settings.display.language'\n                                defaultMessage='Language'\n                            />\n                        }\n                        width='medium'\n                        describe={locale}\n                        section={'languages'}\n                        updateSection={this.updateSection}\n                    />\n                    <div className='divider-dark'/>\n                </div>\n            );\n        }\n\n        if (Object.keys(I18n.getLanguages()).length === 1) {\n            languagesSection = null;\n        }\n\n        let themeSection;\n        if (this.props.enableThemeSelection) {\n            themeSection = (\n                <div>\n                    <ThemeSetting\n                        selected={this.props.activeSection === 'theme'}\n                        updateSection={this.updateSection}\n                        setRequireConfirm={this.props.setRequireConfirm}\n                        setEnforceFocus={this.props.setEnforceFocus}\n                        allowCustomThemes={this.props.allowCustomThemes}\n                    />\n                    <div className='divider-dark'/>\n                </div>\n            );\n        }\n\n        return (\n            <div id='displaySettings'>\n                <div className='modal-header'>\n                    <button\n                        id='closeButton'\n                        type='button'\n                        className='close'\n                        data-dismiss='modal'\n                        aria-label='Close'\n                        onClick={this.props.closeModal}\n                    >\n                        <span aria-hidden='true'>{'×'}</span>\n                    </button>\n                    <h4\n                        className='modal-title'\n                        ref='title'\n                    >\n                        <div className='modal-back'>\n                            <span onClick={this.props.collapseModal}>\n                                <BackIcon/>\n                            </span>\n                        </div>\n                        <FormattedMessage\n                            id='user.settings.display.title'\n                            defaultMessage='Display Settings'\n                        />\n                    </h4>\n                </div>\n                <div className='user-settings'>\n                    <h3\n                        id='displaySettingsTitle'\n                        className='tab-header'\n                    >\n                        <FormattedMessage\n                            id='user.settings.display.title'\n                            defaultMessage='Display Settings'\n                        />\n                    </h3>\n                    <div className='divider-dark first'/>\n                    {themeSection}\n                    {clockSection}\n                    {teammateNameDisplaySection}\n                    {timezoneSelection}\n                    {linkPreviewSection}\n                    {collapseSection}\n                    {messageDisplaySection}\n                    {channelDisplayModeSection}\n                    {languagesSection}\n                </div>\n            </div>\n        );\n    }\n}\n","// Copyright (c) 2015-present Mattermost, Inc. All Rights Reserved.\n// See LICENSE.txt for license information.\n\nimport {connect} from 'react-redux';\nimport {bindActionCreators} from 'redux';\n\nimport {savePreferences} from 'mattermost-redux/actions/preferences';\nimport {getSupportedTimezones} from 'mattermost-redux/actions/general';\nimport {autoUpdateTimezone} from 'mattermost-redux/actions/timezone';\nimport {getConfig, getSupportedTimezones as getTimezones} from 'mattermost-redux/selectors/entities/general';\nimport {getCurrentUserId} from 'mattermost-redux/selectors/entities/users';\nimport {get} from 'mattermost-redux/selectors/entities/preferences';\nimport {getUserTimezone} from 'mattermost-redux/selectors/entities/timezone';\nimport {getUserCurrentTimezone} from 'mattermost-redux/utils/timezone_utils';\n\nimport {Preferences} from 'utils/constants.jsx';\n\nimport UserSettingsDisplay from './user_settings_display.jsx';\n\nfunction mapStateToProps(state) {\n    const config = getConfig(state);\n    const timezones = getTimezones(state);\n    const currentUserId = getCurrentUserId(state);\n    const userTimezone = getUserTimezone(state, currentUserId);\n    const automaticTimezoneNotSet = userTimezone && userTimezone.useAutomaticTimezone && !userTimezone.automaticTimezone;\n    const shouldAutoUpdateTimezone = !userTimezone || automaticTimezoneNotSet;\n\n    const allowCustomThemes = config.AllowCustomThemes === 'true';\n    const enableLinkPreviews = config.EnableLinkPreviews === 'true';\n    const defaultClientLocale = config.DefaultClientLocale;\n    const enableThemeSelection = config.EnableThemeSelection === 'true';\n    const enableTimezone = config.ExperimentalTimezone === 'true';\n    const configTeammateNameDisplay = config.TeammateNameDisplay;\n\n    return {\n        allowCustomThemes,\n        configTeammateNameDisplay,\n        enableLinkPreviews,\n        defaultClientLocale,\n        enableThemeSelection,\n        enableTimezone,\n        timezones,\n        userTimezone,\n        shouldAutoUpdateTimezone,\n        currentUserTimezone: getUserCurrentTimezone(userTimezone),\n        militaryTime: get(state, Preferences.CATEGORY_DISPLAY_SETTINGS, Preferences.USE_MILITARY_TIME, Preferences.USE_MILITARY_TIME_DEFAULT),\n        teammateNameDisplay: get(state, Preferences.CATEGORY_DISPLAY_SETTINGS, Preferences.NAME_NAME_FORMAT, configTeammateNameDisplay),\n        channelDisplayMode: get(state, Preferences.CATEGORY_DISPLAY_SETTINGS, Preferences.CHANNEL_DISPLAY_MODE, Preferences.CHANNEL_DISPLAY_MODE_DEFAULT),\n        messageDisplay: get(state, Preferences.CATEGORY_DISPLAY_SETTINGS, Preferences.MESSAGE_DISPLAY, Preferences.MESSAGE_DISPLAY_DEFAULT),\n        collapseDisplay: get(state, Preferences.CATEGORY_DISPLAY_SETTINGS, Preferences.COLLAPSE_DISPLAY, Preferences.COLLAPSE_DISPLAY_DEFAULT),\n        linkPreviewDisplay: get(state, Preferences.CATEGORY_DISPLAY_SETTINGS, Preferences.LINK_PREVIEW_DISPLAY, Preferences.LINK_PREVIEW_DISPLAY_DEFAULT),\n    };\n}\n\nfunction mapDispatchToProps(dispatch) {\n    return {\n        actions: bindActionCreators({\n            getSupportedTimezones,\n            autoUpdateTimezone,\n            savePreferences,\n        }, dispatch),\n    };\n}\n\nexport default connect(mapStateToProps, mapDispatchToProps)(UserSettingsDisplay);\n","// Copyright (c) 2015-present Mattermost, Inc. All Rights Reserved.\n// See LICENSE.txt for license information.\n\nimport PropTypes from 'prop-types';\nimport React from 'react';\nimport {defineMessages, FormattedDate, FormattedMessage, injectIntl, intlShape} from 'react-intl';\n\nimport {isEmail} from 'mattermost-redux/utils/helpers';\n\nimport {trackEvent} from 'actions/diagnostics_actions.jsx';\nimport {AcceptedProfileImageTypes, Constants} from 'utils/constants.jsx';\nimport * as Utils from 'utils/utils.jsx';\nimport {t} from 'utils/i18n';\n\nimport SettingItemMax from 'components/setting_item_max.jsx';\nimport SettingItemMin from 'components/setting_item_min';\nimport SettingPicture from 'components/setting_picture.jsx';\nimport LoadingWrapper from 'components/widgets/loading/loading_wrapper.jsx';\nimport {AnnouncementBarMessages, AnnouncementBarTypes} from 'utils/constants';\n\nconst holders = defineMessages({\n    usernameReserved: {\n        id: t('user.settings.general.usernameReserved'),\n        defaultMessage: 'This username is reserved, please choose a new one.',\n    },\n    usernameRestrictions: {\n        id: t('user.settings.general.usernameRestrictions'),\n        defaultMessage: \"Username must begin with a letter, and contain between {min} to {max} lowercase characters made up of numbers, letters, and the symbols '.', '-', and '_'.\",\n    },\n    validEmail: {\n        id: t('user.settings.general.validEmail'),\n        defaultMessage: 'Please enter a valid email address.',\n    },\n    emailMatch: {\n        id: t('user.settings.general.emailMatch'),\n        defaultMessage: 'The new emails you entered do not match.',\n    },\n    incorrectPassword: {\n        id: t('user.settings.general.incorrectPassword'),\n        defaultMessage: 'Your password is incorrect.',\n    },\n    emptyPassword: {\n        id: t('user.settings.general.emptyPassword'),\n        defaultMessage: 'Please enter your current password.',\n    },\n    validImage: {\n        id: t('user.settings.general.validImage'),\n        defaultMessage: 'Only BMP, JPG or PNG images may be used for profile pictures',\n    },\n    imageTooLarge: {\n        id: t('user.settings.general.imageTooLarge'),\n        defaultMessage: 'Unable to upload profile image. File is too large.',\n    },\n    uploadImage: {\n        id: t('user.settings.general.uploadImage'),\n        defaultMessage: \"Click 'Edit' to upload an image.\",\n    },\n    uploadImageMobile: {\n        id: t('user.settings.general.mobile.uploadImage'),\n        defaultMessage: 'Click to upload an image',\n    },\n    fullName: {\n        id: t('user.settings.general.fullName'),\n        defaultMessage: 'Full Name',\n    },\n    nickname: {\n        id: t('user.settings.general.nickname'),\n        defaultMessage: 'Nickname',\n    },\n    username: {\n        id: t('user.settings.general.username'),\n        defaultMessage: 'Username',\n    },\n    profilePicture: {\n        id: t('user.settings.general.profilePicture'),\n        defaultMessage: 'Profile Picture',\n    },\n    close: {\n        id: t('user.settings.general.close'),\n        defaultMessage: 'Close',\n    },\n    position: {\n        id: t('user.settings.general.position'),\n        defaultMessage: 'Position',\n    },\n});\n\nclass UserSettingsGeneralTab extends React.Component {\n    static propTypes = {\n        intl: intlShape.isRequired,\n        user: PropTypes.object.isRequired,\n        updateSection: PropTypes.func.isRequired,\n        updateTab: PropTypes.func.isRequired,\n        activeSection: PropTypes.string.isRequired,\n        closeModal: PropTypes.func.isRequired,\n        collapseModal: PropTypes.func.isRequired,\n        actions: PropTypes.shape({\n            logError: PropTypes.func.isRequired,\n            clearErrors: PropTypes.func.isRequired,\n            getMe: PropTypes.func.isRequired,\n            updateMe: PropTypes.func.isRequired,\n            sendVerificationEmail: PropTypes.func.isRequired,\n            setDefaultProfileImage: PropTypes.func.isRequired,\n            uploadProfileImage: PropTypes.func.isRequired,\n        }).isRequired,\n        sendEmailNotifications: PropTypes.bool,\n        requireEmailVerification: PropTypes.bool,\n        maxFileSize: PropTypes.number,\n        ldapFirstNameAttributeSet: PropTypes.bool,\n        ldapLastNameAttributeSet: PropTypes.bool,\n        samlFirstNameAttributeSet: PropTypes.bool,\n        samlLastNameAttributeSet: PropTypes.bool,\n        ldapNicknameAttributeSet: PropTypes.bool,\n        samlNicknameAttributeSet: PropTypes.bool,\n        ldapPositionAttributeSet: PropTypes.bool,\n        samlPositionAttributeSet: PropTypes.bool,\n    }\n\n    constructor(props) {\n        super(props);\n        this.submitActive = false;\n\n        this.state = this.setupInitialState(props);\n    }\n\n    handleEmailResend = (email) => {\n        this.setState({resendStatus: 'sending', showSpinner: true});\n        this.props.actions.sendVerificationEmail(email).then(({data, error: err}) => {\n            if (data) {\n                this.setState({resendStatus: 'success'});\n            } else if (err) {\n                this.setState({resendStatus: 'failure'});\n            }\n        });\n    }\n\n    createEmailResendLink = (email) => {\n        return (\n            <span className='resend-verification-wrapper'>\n                <LoadingWrapper\n                    loading={this.state.showSpinner}\n                    text={Utils.localizeMessage('user.settings.general.sending', 'Sending')}\n                >\n                    <a\n                        onClick={() => {\n                            this.handleEmailResend(email);\n                            setTimeout(() => {\n                                this.setState({\n                                    showSpinner: false,\n                                });\n                            }, 500);\n                        }}\n                    >\n                        <FormattedMessage\n                            id='user.settings.general.sendAgain'\n                            defaultMessage='Send again'\n                        />\n                    </a>\n                </LoadingWrapper>\n            </span>\n        );\n    }\n\n    submitUsername = () => {\n        const user = Object.assign({}, this.props.user);\n        const username = this.state.username.trim().toLowerCase();\n\n        const {formatMessage} = this.props.intl;\n        const usernameError = Utils.isValidUsername(username);\n        if (usernameError === 'Cannot use a reserved word as a username.') {\n            this.setState({clientError: formatMessage(holders.usernameReserved), serverError: ''});\n            return;\n        } else if (usernameError) {\n            this.setState({clientError: formatMessage(holders.usernameRestrictions, {min: Constants.MIN_USERNAME_LENGTH, max: Constants.MAX_USERNAME_LENGTH}), serverError: ''});\n            return;\n        }\n\n        if (user.username === username) {\n            this.updateSection('');\n            return;\n        }\n\n        user.username = username;\n\n        trackEvent('settings', 'user_settings_update', {field: 'username'});\n\n        this.submitUser(user, false);\n    }\n\n    submitNickname = () => {\n        const user = Object.assign({}, this.props.user);\n        const nickname = this.state.nickname.trim();\n\n        if (user.nickname === nickname) {\n            this.updateSection('');\n            return;\n        }\n\n        user.nickname = nickname;\n\n        trackEvent('settings', 'user_settings_update', {field: 'nickname'});\n\n        this.submitUser(user, false);\n    }\n\n    submitName = () => {\n        const user = Object.assign({}, this.props.user);\n        const firstName = this.state.firstName.trim();\n        const lastName = this.state.lastName.trim();\n\n        if (user.first_name === firstName && user.last_name === lastName) {\n            this.updateSection('');\n            return;\n        }\n\n        user.first_name = firstName;\n        user.last_name = lastName;\n\n        trackEvent('settings', 'user_settings_update', {field: 'fullname'});\n\n        this.submitUser(user, false);\n    }\n\n    submitEmail = () => {\n        const user = Object.assign({}, this.props.user);\n        const email = this.state.email.trim().toLowerCase();\n        const confirmEmail = this.state.confirmEmail.trim().toLowerCase();\n        const currentPassword = this.state.currentPassword;\n\n        const {formatMessage} = this.props.intl;\n\n        if (email === user.email && (confirmEmail === '' || confirmEmail === user.email)) {\n            this.updateSection('');\n            return;\n        }\n\n        if (email === '' || !isEmail(email)) {\n            this.setState({emailError: formatMessage(holders.validEmail), clientError: '', serverError: ''});\n            return;\n        }\n\n        if (email !== confirmEmail) {\n            this.setState({emailError: formatMessage(holders.emailMatch), clientError: '', serverError: ''});\n            return;\n        }\n\n        if (currentPassword === '') {\n            this.setState({emailError: formatMessage(holders.emptyPassword), clientError: '', serverError: ''});\n            return;\n        }\n\n        user.email = email;\n        user.password = currentPassword;\n        trackEvent('settings', 'user_settings_update', {field: 'email'});\n        this.submitUser(user, true);\n    }\n\n    submitUser = (user, emailUpdated) => {\n        const {formatMessage} = this.props.intl;\n        this.setState({sectionIsSaving: true});\n\n        this.props.actions.updateMe(user).\n            then(({data, error: err}) => {\n                if (data) {\n                    this.updateSection('');\n                    this.props.actions.getMe();\n                    const verificationEnabled = this.props.sendEmailNotifications && this.props.requireEmailVerification && emailUpdated;\n                    if (verificationEnabled) {\n                        this.props.actions.clearErrors();\n                        this.props.actions.logError({\n                            message: AnnouncementBarMessages.EMAIL_VERIFICATION_REQUIRED,\n                            type: AnnouncementBarTypes.SUCCESS,\n                        }, true);\n                    }\n                } else if (err) {\n                    let serverError;\n                    if (err.server_error_id &&\n                        err.server_error_id === 'api.user.check_user_password.invalid.app_error') {\n                        serverError = formatMessage(holders.incorrectPassword);\n                    } else if (err.message) {\n                        serverError = err.message;\n                    } else {\n                        serverError = err;\n                    }\n                    this.setState({serverError, emailError: '', clientError: '', sectionIsSaving: false});\n                }\n            });\n    }\n\n    setDefaultProfilePicture = async () => {\n        try {\n            await this.props.actions.setDefaultProfileImage(this.props.user.id);\n            this.updateSection('');\n            this.submitActive = false;\n        } catch (err) {\n            let serverError;\n            if (err.message) {\n                serverError = err.message;\n            } else {\n                serverError = err;\n            }\n            this.setState({serverError, emailError: '', clientError: '', sectionIsSaving: false});\n        }\n    }\n\n    submitPicture = () => {\n        if (!this.state.pictureFile) {\n            return;\n        }\n\n        if (!this.submitActive) {\n            return;\n        }\n\n        trackEvent('settings', 'user_settings_update', {field: 'picture'});\n\n        const {formatMessage} = this.props.intl;\n        const file = this.state.pictureFile;\n\n        if (!AcceptedProfileImageTypes.includes(file.type)) {\n            this.setState({clientError: formatMessage(holders.validImage), serverError: ''});\n            return;\n        } else if (file.size > this.props.maxFileSize) {\n            this.setState({clientError: formatMessage(holders.imageTooLarge), serverError: ''});\n            return;\n        }\n\n        this.setState({loadingPicture: true});\n\n        this.props.actions.uploadProfileImage(this.props.user.id, file).\n            then(({data, error: err}) => {\n                if (data) {\n                    this.updateSection('');\n                    this.submitActive = false;\n                } else if (err) {\n                    var state = this.setupInitialState(this.props);\n                    state.serverError = err.message;\n                    this.setState(state);\n                }\n            });\n    }\n\n    submitPosition = () => {\n        const user = Object.assign({}, this.props.user);\n        const position = this.state.position.trim();\n\n        if (user.position === position) {\n            this.updateSection('');\n            return;\n        }\n\n        user.position = position;\n\n        trackEvent('settings', 'user_settings_update', {field: 'position'});\n\n        this.submitUser(user, false);\n    }\n\n    updateUsername = (e) => {\n        this.setState({username: e.target.value});\n    }\n\n    updateFirstName = (e) => {\n        this.setState({firstName: e.target.value});\n    }\n\n    updateLastName = (e) => {\n        this.setState({lastName: e.target.value});\n    }\n\n    updateNickname = (e) => {\n        this.setState({nickname: e.target.value});\n    }\n\n    updatePosition = (e) => {\n        this.setState({position: e.target.value});\n    }\n\n    updateEmail = (e) => {\n        this.setState({email: e.target.value});\n    }\n\n    updateConfirmEmail = (e) => {\n        this.setState({confirmEmail: e.target.value});\n    }\n\n    updateCurrentPassword = (e) => {\n        this.setState({currentPassword: e.target.value});\n    }\n\n    updatePicture = (e) => {\n        if (e.target.files && e.target.files[0]) {\n            this.setState({pictureFile: e.target.files[0]});\n\n            this.submitActive = true;\n            this.setState({clientError: null});\n        } else {\n            this.setState({pictureFile: null});\n        }\n    }\n\n    updateSection = (section) => {\n        this.setState(Object.assign({}, this.setupInitialState(this.props), {clientError: '', serverError: '', emailError: '', sectionIsSaving: false}));\n        this.submitActive = false;\n        this.props.updateSection(section);\n    }\n\n    setupInitialState(props) {\n        const user = props.user;\n\n        return {\n            username: user.username,\n            firstName: user.first_name,\n            lastName: user.last_name,\n            nickname: user.nickname,\n            position: user.position,\n            originalEmail: user.email,\n            email: '',\n            confirmEmail: '',\n            currentPassword: '',\n            pictureFile: null,\n            loadingPicture: false,\n            sectionIsSaving: false,\n            showSpinner: false,\n        };\n    }\n\n    createEmailSection() {\n        const {formatMessage} = this.props.intl;\n\n        let emailSection;\n        if (this.props.activeSection === 'email') {\n            const emailEnabled = this.props.sendEmailNotifications;\n            const emailVerificationEnabled = this.props.requireEmailVerification;\n            const inputs = [];\n\n            let helpText = (\n                <FormattedMessage\n                    id='user.settings.general.emailHelp1'\n                    defaultMessage='Email is used for sign-in, notifications, and password reset. Email requires verification if changed.'\n                />\n            );\n\n            if (!emailEnabled) {\n                helpText = (\n                    <div className='setting-list__hint col-sm-12 text-danger'>\n                        <FormattedMessage\n                            id='user.settings.general.emailHelp2'\n                            defaultMessage='Email has been disabled by your System Administrator. No notification emails will be sent until it is enabled.'\n                        />\n                    </div>\n                );\n            } else if (!emailVerificationEnabled) {\n                helpText = (\n                    <FormattedMessage\n                        id='user.settings.general.emailHelp3'\n                        defaultMessage='Email is used for sign-in, notifications, and password reset.'\n                    />\n                );\n            }\n\n            let submit = null;\n\n            if (this.props.user.auth_service === '') {\n                inputs.push(\n                    <div key='currentEmailSetting'>\n                        <div className='form-group'>\n                            <label className='col-sm-5 control-label'>\n                                <FormattedMessage\n                                    id='user.settings.general.currentEmail'\n                                    defaultMessage='Current Email'\n                                />\n                            </label>\n                            <div className='col-sm-7'>\n                                <label className='control-label word-break--all text-left'>{this.state.originalEmail}</label>\n                            </div>\n                        </div>\n                    </div>\n                );\n\n                inputs.push(\n                    <div key='emailSetting'>\n                        <div className='form-group'>\n                            <label className='col-sm-5 control-label'>\n                                <FormattedMessage\n                                    id='user.settings.general.newEmail'\n                                    defaultMessage='New Email'\n                                />\n                            </label>\n                            <div className='col-sm-7'>\n                                <input\n                                    autoFocus={true}\n                                    id='primaryEmail'\n                                    className='form-control'\n                                    type='email'\n                                    onChange={this.updateEmail}\n                                    value={this.state.email}\n                                    aria-label={formatMessage({id: 'user.settings.general.newEmail', defaultMessage: 'New Email'})}\n                                />\n                            </div>\n                        </div>\n                    </div>\n                );\n\n                inputs.push(\n                    <div key='confirmEmailSetting'>\n                        <div className='form-group'>\n                            <label className='col-sm-5 control-label'>\n                                <FormattedMessage\n                                    id='user.settings.general.confirmEmail'\n                                    defaultMessage='Confirm Email'\n                                />\n                            </label>\n                            <div className='col-sm-7'>\n                                <input\n                                    id='confirmEmail'\n                                    className='form-control'\n                                    type='email'\n                                    onChange={this.updateConfirmEmail}\n                                    value={this.state.confirmEmail}\n                                    aria-label={formatMessage({id: 'user.settings.general.confirmEmail', defaultMessage: 'Confirm Email'})}\n                                />\n                            </div>\n                        </div>\n                    </div>\n                );\n\n                inputs.push(\n                    <div key='currentPassword'>\n                        <div className='form-group'>\n                            <label className='col-sm-5 control-label'>\n                                <FormattedMessage\n                                    id='user.settings.general.currentPassword'\n                                    defaultMessage='Current Password'\n                                />\n                            </label>\n                            <div className='col-sm-7'>\n                                <input\n                                    id='currentPassword'\n                                    className='form-control'\n                                    type='password'\n                                    onChange={this.updateCurrentPassword}\n                                    value={this.state.currentPassword}\n                                    aria-label={formatMessage({id: 'user.settings.general.currentPassword', defaultMessage: 'Current Password'})}\n                                />\n                            </div>\n                        </div>\n                        {helpText}\n                    </div>\n                );\n\n                submit = this.submitEmail;\n            } else if (this.props.user.auth_service === Constants.GITLAB_SERVICE) {\n                inputs.push(\n                    <div\n                        key='oauthEmailInfo'\n                        className='form-group'\n                    >\n                        <div className='setting-list__hint padding-bottom x2'>\n                            <FormattedMessage\n                                id='user.settings.general.emailGitlabCantUpdate'\n                                defaultMessage='Login occurs through GitLab. Email cannot be updated. Email address used for notifications is {email}.'\n                                values={{\n                                    email: this.state.originalEmail,\n                                }}\n                            />\n                        </div>\n                        {helpText}\n                    </div>\n                );\n            } else if (this.props.user.auth_service === Constants.GOOGLE_SERVICE) {\n                inputs.push(\n                    <div\n                        key='oauthEmailInfo'\n                        className='form-group'\n                    >\n                        <div className='setting-list__hint padding-bottom x2'>\n                            <FormattedMessage\n                                id='user.settings.general.emailGoogleCantUpdate'\n                                defaultMessage='Login occurs through Google Apps. Email cannot be updated. Email address used for notifications is {email}.'\n                                values={{\n                                    email: this.state.originalEmail,\n                                }}\n                            />\n                        </div>\n                        {helpText}\n                    </div>\n                );\n            } else if (this.props.user.auth_service === Constants.OFFICE365_SERVICE) {\n                inputs.push(\n                    <div\n                        key='oauthEmailInfo'\n                        className='form-group'\n                    >\n                        <div className='setting-list__hint padding-bottom x2'>\n                            <FormattedMessage\n                                id='user.settings.general.emailOffice365CantUpdate'\n                                defaultMessage='Login occurs through Office 365. Email cannot be updated. Email address used for notifications is {email}.'\n                                values={{\n                                    email: this.state.originalEmail,\n                                }}\n                            />\n                        </div>\n                        {helpText}\n                    </div>\n                );\n            } else if (this.props.user.auth_service === Constants.LDAP_SERVICE) {\n                inputs.push(\n                    <div\n                        key='oauthEmailInfo'\n                        className='padding-bottom'\n                    >\n                        <div className='setting-list__hint padding-bottom x2'>\n                            <FormattedMessage\n                                id='user.settings.general.emailLdapCantUpdate'\n                                defaultMessage='Login occurs through AD/LDAP. Email cannot be updated. Email address used for notifications is {email}.'\n                                values={{\n                                    email: this.state.originalEmail,\n                                }}\n                            />\n                        </div>\n                    </div>\n                );\n            } else if (this.props.user.auth_service === Constants.SAML_SERVICE) {\n                inputs.push(\n                    <div\n                        key='oauthEmailInfo'\n                        className='padding-bottom'\n                    >\n                        <div className='setting-list__hint padding-bottom x2'>\n                            <FormattedMessage\n                                id='user.settings.general.emailSamlCantUpdate'\n                                defaultMessage='Login occurs through SAML. Email cannot be updated. Email address used for notifications is {email}.'\n                                values={{\n                                    email: this.state.originalEmail,\n                                }}\n                            />\n                        </div>\n                        {helpText}\n                    </div>\n                );\n            }\n\n            emailSection = (\n                <SettingItemMax\n                    title={\n                        <FormattedMessage\n                            id='user.settings.general.email'\n                            defaultMessage='Email'\n                        />\n                    }\n                    inputs={inputs}\n                    submit={submit}\n                    saving={this.state.sectionIsSaving}\n                    serverError={this.state.serverError}\n                    clientError={this.state.emailError}\n                    updateSection={this.updateSection}\n                />\n            );\n        } else {\n            let describe = '';\n            if (this.props.user.auth_service === '') {\n                describe = this.props.user.email;\n            } else if (this.props.user.auth_service === Constants.GITLAB_SERVICE) {\n                describe = (\n                    <FormattedMessage\n                        id='user.settings.general.loginGitlab'\n                        defaultMessage='Login done through GitLab ({email})'\n                        values={{\n                            email: this.state.originalEmail,\n                        }}\n                    />\n                );\n            } else if (this.props.user.auth_service === Constants.GOOGLE_SERVICE) {\n                describe = (\n                    <FormattedMessage\n                        id='user.settings.general.loginGoogle'\n                        defaultMessage='Login done through Google Apps ({email})'\n                        values={{\n                            email: this.state.originalEmail,\n                        }}\n                    />\n                );\n            } else if (this.props.user.auth_service === Constants.OFFICE365_SERVICE) {\n                describe = (\n                    <FormattedMessage\n                        id='user.settings.general.loginOffice365'\n                        defaultMessage='Login done through Office 365 ({email})'\n                        values={{\n                            email: this.state.originalEmail,\n                        }}\n                    />\n                );\n            } else if (this.props.user.auth_service === Constants.LDAP_SERVICE) {\n                describe = (\n                    <FormattedMessage\n                        id='user.settings.general.loginLdap'\n                        defaultMessage='Login done through AD/LDAP ({email})'\n                        values={{\n                            email: this.state.originalEmail,\n                        }}\n                    />\n                );\n            } else if (this.props.user.auth_service === Constants.SAML_SERVICE) {\n                describe = (\n                    <FormattedMessage\n                        id='user.settings.general.loginSaml'\n                        defaultMessage='Login done through SAML ({email})'\n                        values={{\n                            email: this.state.originalEmail,\n                        }}\n                    />\n                );\n            }\n\n            emailSection = (\n                <SettingItemMin\n                    title={\n                        <FormattedMessage\n                            id='user.settings.general.email'\n                            defaultMessage='Email'\n                        />\n                    }\n                    describe={describe}\n                    section={'email'}\n                    updateSection={this.updateSection}\n                />\n            );\n        }\n\n        return emailSection;\n    }\n\n    render() {\n        const user = this.props.user;\n        const {formatMessage} = this.props.intl;\n\n        let clientError = null;\n        if (this.state.clientError) {\n            clientError = this.state.clientError;\n        }\n        let serverError = null;\n        if (this.state.serverError) {\n            serverError = this.state.serverError;\n        }\n\n        let nameSection;\n        const inputs = [];\n\n        if (this.props.activeSection === 'name') {\n            let extraInfo;\n            let submit = null;\n            if (\n                (this.props.user.auth_service === 'ldap' &&\n                    (this.props.ldapFirstNameAttributeSet || this.props.ldapLastNameAttributeSet)) ||\n                (this.props.user.auth_service === Constants.SAML_SERVICE &&\n                    (this.props.samlFirstNameAttributeSet || this.props.samlLastNameAttributeSet))\n            ) {\n                extraInfo = (\n                    <span>\n                        <FormattedMessage\n                            id='user.settings.general.field_handled_externally'\n                            defaultMessage='This field is handled through your login provider. If you want to change it, you need to do so through your login provider.'\n                        />\n                    </span>\n                );\n            } else {\n                inputs.push(\n                    <div\n                        key='firstNameSetting'\n                        className='form-group'\n                    >\n                        <label className='col-sm-5 control-label'>\n                            <FormattedMessage\n                                id='user.settings.general.firstName'\n                                defaultMessage='First Name'\n                            />\n                        </label>\n                        <div className='col-sm-7'>\n                            <input\n                                id='firstName'\n                                autoFocus={true}\n                                className='form-control'\n                                type='text'\n                                onChange={this.updateFirstName}\n                                value={this.state.firstName}\n                                onFocus={Utils.moveCursorToEnd}\n                                aria-label={formatMessage({id: 'user.settings.general.firstName', defaultMessage: 'First Name'})}\n                            />\n                        </div>\n                    </div>\n                );\n\n                inputs.push(\n                    <div\n                        key='lastNameSetting'\n                        className='form-group'\n                    >\n                        <label className='col-sm-5 control-label'>\n                            <FormattedMessage\n                                id='user.settings.general.lastName'\n                                defaultMessage='Last Name'\n                            />\n                        </label>\n                        <div className='col-sm-7'>\n                            <input\n                                id='lastName'\n                                className='form-control'\n                                type='text'\n                                onChange={this.updateLastName}\n                                value={this.state.lastName}\n                                aria-label={formatMessage({id: 'user.settings.general.lastName', defaultMessage: 'Last Name'})}\n                            />\n                        </div>\n                    </div>\n                );\n\n                function notifClick(e) {\n                    e.preventDefault();\n                    this.updateSection('');\n                    this.props.updateTab('notifications');\n                }\n\n                const notifLink = (\n                    <a\n                        href='#'\n                        onClick={notifClick.bind(this)}\n                    >\n                        <FormattedMessage\n                            id='user.settings.general.notificationsLink'\n                            defaultMessage='Notifications'\n                        />\n                    </a>\n                );\n\n                extraInfo = (\n                    <span>\n                        <FormattedMessage\n                            id='user.settings.general.notificationsExtra'\n                            defaultMessage='By default, you will receive mention notifications when someone types your first name. Go to {notify} settings to change this default.'\n                            values={{\n                                notify: (notifLink),\n                            }}\n                        />\n                    </span>\n                );\n\n                submit = this.submitName;\n            }\n\n            nameSection = (\n                <SettingItemMax\n                    title={formatMessage(holders.fullName)}\n                    inputs={inputs}\n                    submit={submit}\n                    saving={this.state.sectionIsSaving}\n                    serverError={serverError}\n                    clientError={clientError}\n                    updateSection={this.updateSection}\n                    extraInfo={extraInfo}\n                />\n            );\n        } else {\n            let describe = '';\n\n            if (user.first_name && user.last_name) {\n                describe = user.first_name + ' ' + user.last_name;\n            } else if (user.first_name) {\n                describe = user.first_name;\n            } else if (user.last_name) {\n                describe = user.last_name;\n            } else {\n                describe = (\n                    <FormattedMessage\n                        id='user.settings.general.emptyName'\n                        defaultMessage=\"Click 'Edit' to add your full name\"\n                    />\n                );\n                if (Utils.isMobile()) {\n                    describe = (\n                        <FormattedMessage\n                            id='user.settings.general.mobile.emptyName'\n                            defaultMessage='Click to add your full name'\n                        />\n                    );\n                }\n            }\n\n            nameSection = (\n                <SettingItemMin\n                    title={formatMessage(holders.fullName)}\n                    describe={describe}\n                    section={'name'}\n                    updateSection={this.updateSection}\n                />\n            );\n        }\n\n        let nicknameSection;\n        if (this.props.activeSection === 'nickname') {\n            let extraInfo;\n            let submit = null;\n            if ((this.props.user.auth_service === 'ldap' && this.props.ldapNicknameAttributeSet) || (this.props.user.auth_service === Constants.SAML_SERVICE && this.props.samlNicknameAttributeSet)) {\n                extraInfo = (\n                    <span>\n                        <FormattedMessage\n                            id='user.settings.general.field_handled_externally'\n                            defaultMessage='This field is handled through your login provider. If you want to change it, you need to do so though your login provider.'\n                        />\n                    </span>\n                );\n            } else {\n                let nicknameLabel = (\n                    <FormattedMessage\n                        id='user.settings.general.nickname'\n                        defaultMessage='Nickname'\n                    />\n                );\n                if (Utils.isMobile()) {\n                    nicknameLabel = '';\n                }\n\n                inputs.push(\n                    <div\n                        key='nicknameSetting'\n                        className='form-group'\n                    >\n                        <label className='col-sm-5 control-label'>{nicknameLabel}</label>\n                        <div className='col-sm-7'>\n                            <input\n                                id='nickname'\n                                autoFocus={true}\n                                className='form-control'\n                                type='text'\n                                onChange={this.updateNickname}\n                                value={this.state.nickname}\n                                maxLength={Constants.MAX_NICKNAME_LENGTH}\n                                autoCapitalize='off'\n                                aria-label={formatMessage({id: 'user.settings.general.nickname', defaultMessage: 'Nickname'})}\n                            />\n                        </div>\n                    </div>\n                );\n\n                extraInfo = (\n                    <span>\n                        <FormattedMessage\n                            id='user.settings.general.nicknameExtra'\n                            defaultMessage='Use Nickname for a name you might be called that is different from your first name and username. This is most often used when two or more people have similar sounding names and usernames.'\n                        />\n                    </span>\n                );\n\n                submit = this.submitNickname;\n            }\n\n            nicknameSection = (\n                <SettingItemMax\n                    title={formatMessage(holders.nickname)}\n                    inputs={inputs}\n                    submit={submit}\n                    saving={this.state.sectionIsSaving}\n                    serverError={serverError}\n                    clientError={clientError}\n                    updateSection={this.updateSection}\n                    extraInfo={extraInfo}\n                />\n            );\n        } else {\n            let describe = '';\n            if (user.nickname) {\n                describe = user.nickname;\n            } else {\n                describe = (\n                    <FormattedMessage\n                        id='user.settings.general.emptyNickname'\n                        defaultMessage=\"Click 'Edit' to add a nickname\"\n                    />\n                );\n                if (Utils.isMobile()) {\n                    describe = (\n                        <FormattedMessage\n                            id='user.settings.general.mobile.emptyNickname'\n                            defaultMessage='Click to add a nickname'\n                        />\n                    );\n                }\n            }\n\n            nicknameSection = (\n                <SettingItemMin\n                    title={formatMessage(holders.nickname)}\n                    describe={describe}\n                    section={'nickname'}\n                    updateSection={this.updateSection}\n                />\n            );\n        }\n\n        let usernameSection;\n        if (this.props.activeSection === 'username') {\n            let extraInfo;\n            let submit = null;\n            if (this.props.user.auth_service === '') {\n                let usernameLabel = (\n                    <FormattedMessage\n                        id='user.settings.general.username'\n                        defaultMessage='Username'\n                    />\n                );\n                if (Utils.isMobile()) {\n                    usernameLabel = '';\n                }\n\n                inputs.push(\n                    <div\n                        key='usernameSetting'\n                        className='form-group'\n                    >\n                        <label className='col-sm-5 control-label'>{usernameLabel}</label>\n                        <div className='col-sm-7'>\n                            <input\n                                id='username'\n                                autoFocus={true}\n                                maxLength={Constants.MAX_USERNAME_LENGTH}\n                                className='form-control'\n                                type='text'\n                                onChange={this.updateUsername}\n                                value={this.state.username}\n                                autoCapitalize='off'\n                                onFocus={Utils.moveCursorToEnd}\n                                aria-label={formatMessage({id: 'user.settings.general.username', defaultMessage: 'Username'})}\n                            />\n                        </div>\n                    </div>\n                );\n\n                extraInfo = (\n                    <span>\n                        <FormattedMessage\n                            id='user.settings.general.usernameInfo'\n                            defaultMessage='Pick something easy for teammates to recognize and recall.'\n                        />\n                    </span>\n                );\n\n                submit = this.submitUsername;\n            } else {\n                extraInfo = (\n                    <span>\n                        <FormattedMessage\n                            id='user.settings.general.field_handled_externally'\n                            defaultMessage='This field is handled through your login provider. If you want to change it, you need to do so though your login provider.'\n                        />\n                    </span>\n                );\n            }\n\n            usernameSection = (\n                <SettingItemMax\n                    title={formatMessage(holders.username)}\n                    inputs={inputs}\n                    submit={submit}\n                    saving={this.state.sectionIsSaving}\n                    serverError={serverError}\n                    clientError={clientError}\n                    updateSection={this.updateSection}\n                    extraInfo={extraInfo}\n                />\n            );\n        } else {\n            usernameSection = (\n                <SettingItemMin\n                    title={formatMessage(holders.username)}\n                    describe={this.props.user.username}\n                    section={'username'}\n                    updateSection={this.updateSection}\n                />\n            );\n        }\n\n        let positionSection;\n        if (this.props.activeSection === 'position') {\n            let extraInfo;\n            let submit = null;\n            if ((this.props.user.auth_service === Constants.LDAP_SERVICE && this.props.ldapPositionAttributeSet) || (this.props.user.auth_service === Constants.SAML_SERVICE && this.props.samlPositionAttributeSet)) {\n                extraInfo = (\n                    <span>\n                        <FormattedMessage\n                            id='user.settings.general.field_handled_externally'\n                            defaultMessage='This field is handled through your login provider. If you want to change it, you need to do so though your login provider.'\n                        />\n                    </span>\n                );\n            } else {\n                let positionLabel = (\n                    <FormattedMessage\n                        id='user.settings.general.position'\n                        defaultMessage='Position'\n                    />\n                );\n                if (Utils.isMobile()) {\n                    positionLabel = '';\n                }\n\n                inputs.push(\n                    <div\n                        key='positionSetting'\n                        className='form-group'\n                    >\n                        <label className='col-sm-5 control-label'>{positionLabel}</label>\n                        <div className='col-sm-7'>\n                            <input\n                                id='position'\n                                autoFocus={true}\n                                className='form-control'\n                                type='text'\n                                onChange={this.updatePosition}\n                                value={this.state.position}\n                                maxLength={Constants.MAX_POSITION_LENGTH}\n                                autoCapitalize='off'\n                                onFocus={Utils.moveCursorToEnd}\n                                aria-label={formatMessage({id: 'user.settings.general.position', defaultMessage: 'Position'})}\n                            />\n                        </div>\n                    </div>\n                );\n\n                extraInfo = (\n                    <span>\n                        <FormattedMessage\n                            id='user.settings.general.positionExtra'\n                            defaultMessage='Use Position for your role or job title. This will be shown in your profile popover.'\n                        />\n                    </span>\n                );\n\n                submit = this.submitPosition;\n            }\n\n            positionSection = (\n                <SettingItemMax\n                    title={formatMessage(holders.position)}\n                    inputs={inputs}\n                    submit={submit}\n                    saving={this.state.sectionIsSaving}\n                    serverError={serverError}\n                    clientError={clientError}\n                    updateSection={this.updateSection}\n                    extraInfo={extraInfo}\n                />\n            );\n        } else {\n            let describe = '';\n            if (user.position) {\n                describe = user.position;\n            } else {\n                describe = (\n                    <FormattedMessage\n                        id='user.settings.general.emptyPosition'\n                        defaultMessage=\"Click 'Edit' to add your job title / position\"\n                    />\n                );\n                if (Utils.isMobile()) {\n                    describe = (\n                        <FormattedMessage\n                            id='user.settings.general.mobile.emptyPosition'\n                            defaultMessage='Click to add your job title / position'\n                        />\n                    );\n                }\n            }\n\n            positionSection = (\n                <SettingItemMin\n                    title={formatMessage(holders.position)}\n                    describe={describe}\n                    section={'position'}\n                    updateSection={this.updateSection}\n                />\n            );\n        }\n\n        const emailSection = this.createEmailSection();\n\n        let pictureSection;\n        if (this.props.activeSection === 'picture') {\n            pictureSection = (\n                <SettingPicture\n                    title={formatMessage(holders.profilePicture)}\n                    onSubmit={this.submitPicture}\n                    onSetDefault={user.last_picture_update > 0 ? this.setDefaultProfilePicture : null}\n                    src={Utils.imageURLForUser(user)}\n                    defaultImageSrc={Utils.defaultImageURLForUser(user.id)}\n                    serverError={serverError}\n                    clientError={clientError}\n                    updateSection={(e) => {\n                        this.updateSection('');\n                        e.preventDefault();\n                    }}\n                    file={this.state.pictureFile}\n                    onFileChange={this.updatePicture}\n                    submitActive={this.submitActive}\n                    loadingPicture={this.state.loadingPicture}\n                    maxFileSize={this.props.maxFileSize}\n                />\n            );\n        } else {\n            let minMessage = formatMessage(holders.uploadImage);\n            if (Utils.isMobile()) {\n                minMessage = formatMessage(holders.uploadImageMobile);\n            }\n            if (user.last_picture_update) {\n                minMessage = (\n                    <FormattedMessage\n                        id='user.settings.general.imageUpdated'\n                        defaultMessage='Image last updated {date}'\n                        values={{\n                            date: (\n                                <FormattedDate\n                                    value={new Date(user.last_picture_update)}\n                                    day='2-digit'\n                                    month='short'\n                                    year='numeric'\n                                />\n                            ),\n                        }}\n                    />\n                );\n            }\n            pictureSection = (\n                <SettingItemMin\n                    title={formatMessage(holders.profilePicture)}\n                    describe={minMessage}\n                    section={'picture'}\n                    updateSection={this.updateSection}\n                />\n            );\n        }\n\n        return (\n            <div id='generalSettings'>\n                <div className='modal-header'>\n                    <button\n                        id='closeUserSettings'\n                        type='button'\n                        className='close'\n                        data-dismiss='modal'\n                        aria-label={formatMessage(holders.close)}\n                        onClick={this.props.closeModal}\n                    >\n                        <span aria-hidden='true'>{'×'}</span>\n                    </button>\n                    <h4\n                        className='modal-title'\n                        ref='title'\n                    >\n                        <div className='modal-back'>\n                            <FormattedMessage\n                                id='generic_icons.collapse'\n                                defaultMessage='Collapse Icon'\n                            >\n                                {(title) => (\n                                    <i\n                                        className='fa fa-angle-left'\n                                        title={title}\n                                        onClick={this.props.collapseModal}\n                                    />\n                                )}\n                            </FormattedMessage>\n                        </div>\n                        <FormattedMessage\n                            id='user.settings.general.title'\n                            defaultMessage='General Settings'\n                        />\n                    </h4>\n                </div>\n                <div className='user-settings'>\n                    <h3\n                        id='generalSettingsTitle'\n                        className='tab-header'\n                    >\n                        <FormattedMessage\n                            id='user.settings.general.title'\n                            defaultMessage='General Settings'\n                        />\n                    </h3>\n                    <div className='divider-dark first'/>\n                    {nameSection}\n                    <div className='divider-light'/>\n                    {usernameSection}\n                    <div className='divider-light'/>\n                    {nicknameSection}\n                    <div className='divider-light'/>\n                    {positionSection}\n                    <div className='divider-light'/>\n                    {emailSection}\n                    <div className='divider-light'/>\n                    {pictureSection}\n                    <div className='divider-dark'/>\n                </div>\n            </div>\n        );\n    }\n}\n\nexport default injectIntl(UserSettingsGeneralTab);\n","// Copyright (c) 2015-present Mattermost, Inc. All Rights Reserved.\n// See LICENSE.txt for license information.\n\nimport {connect} from 'react-redux';\nimport {bindActionCreators} from 'redux';\nimport {\n    getMe,\n    updateMe,\n    sendVerificationEmail,\n    setDefaultProfileImage,\n    uploadProfileImage,\n} from 'mattermost-redux/actions/users';\nimport {clearErrors, logError} from 'mattermost-redux/actions/errors';\nimport {getConfig} from 'mattermost-redux/selectors/entities/general';\n\nimport UserSettingsGeneralTab from './user_settings_general.jsx';\n\nfunction mapStateToProps(state) {\n    const config = getConfig(state);\n\n    const sendEmailNotifications = config.SendEmailNotifications === 'true';\n    const requireEmailVerification = config.RequireEmailVerification === 'true';\n    const maxFileSize = parseInt(config.MaxFileSize, 10);\n    const ldapFirstNameAttributeSet = config.LdapFirstNameAttributeSet === 'true';\n    const ldapLastNameAttributeSet = config.LdapLastNameAttributeSet === 'true';\n    const samlFirstNameAttributeSet = config.SamlFirstNameAttributeSet === 'true';\n    const samlLastNameAttributeSet = config.SamlLastNameAttributeSet === 'true';\n    const ldapNicknameAttributeSet = config.LdapNicknameAttributeSet === 'true';\n    const samlNicknameAttributeSet = config.SamlNicknameAttributeSet === 'true';\n    const samlPositionAttributeSet = config.SamlPositionAttributeSet === 'true';\n    const ldapPositionAttributeSet = config.LdapPositionAttributeSet === 'true';\n\n    return {\n        sendEmailNotifications,\n        requireEmailVerification,\n        maxFileSize,\n        ldapFirstNameAttributeSet,\n        ldapLastNameAttributeSet,\n        samlFirstNameAttributeSet,\n        samlLastNameAttributeSet,\n        ldapNicknameAttributeSet,\n        samlNicknameAttributeSet,\n        samlPositionAttributeSet,\n        ldapPositionAttributeSet,\n    };\n}\n\nfunction mapDispatchToProps(dispatch) {\n    return {\n        actions: bindActionCreators({\n            logError,\n            clearErrors,\n            getMe,\n            updateMe,\n            sendVerificationEmail,\n            setDefaultProfileImage,\n            uploadProfileImage,\n        }, dispatch),\n    };\n}\n\nexport default connect(mapStateToProps, mapDispatchToProps)(UserSettingsGeneralTab);\n","// Copyright (c) 2015-present Mattermost, Inc. All Rights Reserved.\n// See LICENSE.txt for license information.\n\nimport PropTypes from 'prop-types';\nimport React from 'react';\nimport {FormattedMessage} from 'react-intl';\n\nimport {NotificationLevels} from 'utils/constants.jsx';\nimport * as Utils from 'utils/utils.jsx';\nimport {t} from 'utils/i18n.jsx';\nimport SettingItemMax from 'components/setting_item_max.jsx';\nimport SettingItemMin from 'components/setting_item_min';\n\nexport default class DesktopNotificationSettings extends React.Component {\n    handleMinUpdateSection = (section) => {\n        this.props.updateSection(section);\n\n        this.props.cancel();\n    }\n\n    handleMaxUpdateSection = (section) => {\n        this.props.updateSection(section);\n    }\n\n    handleOnChange = (e) => {\n        const key = e.currentTarget.getAttribute('data-key');\n        const value = e.currentTarget.getAttribute('data-value');\n        this.props.setParentState(key, value);\n    }\n\n    buildMaximizedSetting = () => {\n        const inputs = [];\n\n        const activityRadio = [false, false, false];\n        if (this.props.activity === NotificationLevels.MENTION) {\n            activityRadio[1] = true;\n        } else if (this.props.activity === NotificationLevels.NONE) {\n            activityRadio[2] = true;\n        } else {\n            activityRadio[0] = true;\n        }\n\n        let soundSection;\n        if (this.props.activity !== NotificationLevels.NONE) {\n            const soundRadio = [false, false];\n            if (this.props.sound === 'false') {\n                soundRadio[1] = true;\n            } else {\n                soundRadio[0] = true;\n            }\n\n            if (Utils.hasSoundOptions()) {\n                soundSection = (\n                    <fieldset>\n                        <legend className='form-legend'>\n                            <FormattedMessage\n                                id='user.settings.notifications.desktop.sound'\n                                defaultMessage='Notification sound'\n                            />\n                        </legend>\n                        <div className='radio'>\n                            <label>\n                                <input\n                                    id='soundOn'\n                                    type='radio'\n                                    name='notificationSounds'\n                                    checked={soundRadio[0]}\n                                    data-key={'desktopSound'}\n                                    data-value={'true'}\n                                    onChange={this.handleOnChange}\n                                />\n                                <FormattedMessage\n                                    id='user.settings.notifications.on'\n                                    defaultMessage='On'\n                                />\n                            </label>\n                            <br/>\n                        </div>\n                        <div className='radio'>\n                            <label>\n                                <input\n                                    id='soundOff'\n                                    type='radio'\n                                    name='notificationSounds'\n                                    checked={soundRadio[1]}\n                                    data-key={'desktopSound'}\n                                    data-value={'false'}\n                                    onChange={this.handleOnChange}\n                                />\n                                <FormattedMessage\n                                    id='user.settings.notifications.off'\n                                    defaultMessage='Off'\n                                />\n                            </label>\n                            <br/>\n                        </div>\n                        <div className='margin-top x3'>\n                            <FormattedMessage\n                                id='user.settings.notifications.sounds_info'\n                                defaultMessage='Notification sounds are available on IE11, Safari, Chrome and Mattermost Desktop Apps.'\n                            />\n                        </div>\n                    </fieldset>\n                );\n            } else {\n                soundSection = (\n                    <fieldset>\n                        <legend className='form-legend'>\n                            <FormattedMessage\n                                id='user.settings.notifications.desktop.sound'\n                                defaultMessage='Notification sound'\n                            />\n                        </legend>\n                        <br/>\n                        <FormattedMessage\n                            id='user.settings.notifications.soundConfig'\n                            defaultMessage='Please configure notification sounds in your browser settings'\n                        />\n                    </fieldset>\n                );\n            }\n        }\n\n        inputs.push(\n            <div key='userNotificationLevelOption'>\n                <fieldset>\n                    <legend className='form-legend'>\n                        <FormattedMessage\n                            id='user.settings.notifications.desktop'\n                            defaultMessage='Send desktop notifications'\n                        />\n                    </legend>\n                    <div className='radio'>\n                        <label>\n                            <input\n                                id='desktopNotificationAllActivity'\n                                type='radio'\n                                name='desktopNotificationLevel'\n                                checked={activityRadio[0]}\n                                data-key={'desktopActivity'}\n                                data-value={NotificationLevels.ALL}\n                                onChange={this.handleOnChange}\n                            />\n                            <FormattedMessage\n                                id='user.settings.notifications.allActivity'\n                                defaultMessage='For all activity'\n                            />\n                        </label>\n                        <br/>\n                    </div>\n                    <div className='radio'>\n                        <label>\n                            <input\n                                id='desktopNotificationMentions'\n                                type='radio'\n                                name='desktopNotificationLevel'\n                                checked={activityRadio[1]}\n                                data-key={'desktopActivity'}\n                                data-value={NotificationLevels.MENTION}\n                                onChange={this.handleOnChange}\n                            />\n                            <FormattedMessage\n                                id='user.settings.notifications.onlyMentions'\n                                defaultMessage='Only for mentions and direct messages'\n                            />\n                        </label>\n                        <br/>\n                    </div>\n                    <div className='radio'>\n                        <label>\n                            <input\n                                id='desktopNotificationNever'\n                                type='radio'\n                                name='desktopNotificationLevel'\n                                checked={activityRadio[2]}\n                                data-key={'desktopActivity'}\n                                data-value={NotificationLevels.NONE}\n                                onChange={this.handleOnChange}\n                            />\n                            <FormattedMessage\n                                id='user.settings.notifications.never'\n                                defaultMessage='Never'\n                            />\n                        </label>\n                    </div>\n                    <div className='margin-top x3'>\n                        <FormattedMessage\n                            id='user.settings.notifications.info'\n                            defaultMessage='Desktop notifications are available on Edge, Firefox, Safari, Chrome and Mattermost Desktop Apps.'\n                        />\n                    </div>\n                </fieldset>\n                <hr/>\n                {soundSection}\n            </div>\n        );\n\n        return (\n            <SettingItemMax\n                title={Utils.localizeMessage('user.settings.notifications.desktop.title', 'Desktop notifications')}\n                inputs={inputs}\n                submit={this.props.submit}\n                saving={this.props.saving}\n                server_error={this.props.error}\n                updateSection={this.handleMaxUpdateSection}\n            />\n        );\n    }\n\n    buildMinimizedSetting = () => {\n        let formattedMessageProps;\n        const hasSoundOption = Utils.hasSoundOptions();\n        if (this.props.activity === NotificationLevels.MENTION) {\n            if (hasSoundOption && this.props.sound !== 'false') {\n                formattedMessageProps = {\n                    id: t('user.settings.notifications.desktop.mentionsSound'),\n                    defaultMessage: 'For mentions and direct messages, with sound',\n                };\n            } else if (hasSoundOption && this.props.sound === 'false') {\n                formattedMessageProps = {\n                    id: t('user.settings.notifications.desktop.mentionsNoSound'),\n                    defaultMessage: 'For mentions and direct messages, without sound',\n                };\n            } else {\n                formattedMessageProps = {\n                    id: t('user.settings.notifications.desktop.mentionsSoundHidden'),\n                    defaultMessage: 'For mentions and direct messages',\n                };\n            }\n        } else if (this.props.activity === NotificationLevels.NONE) {\n            formattedMessageProps = {\n                id: t('user.settings.notifications.off'),\n                defaultMessage: 'Off',\n            };\n        } else {\n            if (hasSoundOption && this.props.sound !== 'false') { //eslint-disable-line no-lonely-if\n                formattedMessageProps = {\n                    id: t('user.settings.notifications.desktop.allSound'),\n                    defaultMessage: 'For all activity, with sound',\n                };\n            } else if (hasSoundOption && this.props.sound === 'false') {\n                formattedMessageProps = {\n                    id: t('user.settings.notifications.desktop.allNoSound'),\n                    defaultMessage: 'For all activity, without sound',\n                };\n            } else {\n                formattedMessageProps = {\n                    id: t('user.settings.notifications.desktop.allSoundHidden'),\n                    defaultMessage: 'For all activity',\n                };\n            }\n        }\n\n        return (\n            <SettingItemMin\n                title={Utils.localizeMessage('user.settings.notifications.desktop.title', 'Desktop notifications')}\n                describe={<FormattedMessage {...formattedMessageProps}/>}\n                focused={this.props.focused}\n                section={'desktop'}\n                updateSection={this.handleMinUpdateSection}\n            />\n        );\n    }\n\n    render() {\n        if (this.props.active) {\n            return this.buildMaximizedSetting();\n        }\n\n        return this.buildMinimizedSetting();\n    }\n}\n\nDesktopNotificationSettings.propTypes = {\n    activity: PropTypes.string.isRequired,\n    sound: PropTypes.string.isRequired,\n    updateSection: PropTypes.func,\n    setParentState: PropTypes.func,\n    submit: PropTypes.func,\n    cancel: PropTypes.func,\n    error: PropTypes.string,\n    active: PropTypes.bool,\n    saving: PropTypes.bool,\n    focused: PropTypes.bool,\n};\n","// Copyright (c) 2015-present Mattermost, Inc. All Rights Reserved.\n// See LICENSE.txt for license information.\n\nimport PropTypes from 'prop-types';\nimport React from 'react';\nimport {FormattedMessage} from 'react-intl';\n\nimport {getEmailInterval} from 'mattermost-redux/utils/notify_props';\n\nimport {Preferences} from 'utils/constants.jsx';\nimport {localizeMessage} from 'utils/utils.jsx';\nimport SettingItemMax from 'components/setting_item_max.jsx';\nimport SettingItemMin from 'components/setting_item_min';\n\nconst SECONDS_PER_MINUTE = 60;\n\nexport default class EmailNotificationSetting extends React.Component {\n    static propTypes = {\n        currentUserId: PropTypes.string.isRequired,\n        activeSection: PropTypes.string.isRequired,\n        updateSection: PropTypes.func.isRequired,\n        enableEmail: PropTypes.bool.isRequired,\n        emailInterval: PropTypes.number.isRequired,\n        onSubmit: PropTypes.func.isRequired,\n        onCancel: PropTypes.func.isRequired,\n        onChange: PropTypes.func.isRequired,\n        serverError: PropTypes.string,\n        saving: PropTypes.bool,\n        focused: PropTypes.bool,\n        sendEmailNotifications: PropTypes.bool,\n        enableEmailBatching: PropTypes.bool,\n        siteName: PropTypes.string,\n        actions: PropTypes.shape({\n            savePreferences: PropTypes.func.isRequired,\n        }).isRequired,\n    };\n\n    constructor(props) {\n        super(props);\n\n        const {\n            emailInterval,\n            enableEmail,\n            enableEmailBatching,\n            sendEmailNotifications,\n        } = props;\n\n        this.state = {\n            emailInterval,\n            enableEmailBatching,\n            sendEmailNotifications,\n            newInterval: getEmailInterval(enableEmail && sendEmailNotifications, enableEmailBatching, emailInterval),\n        };\n    }\n\n    static getDerivedStateFromProps(nextProps, prevState) {\n        const {\n            emailInterval,\n            enableEmail,\n            enableEmailBatching,\n            sendEmailNotifications,\n        } = nextProps;\n\n        if (sendEmailNotifications !== prevState.sendEmailNotifications ||\n            enableEmailBatching !== prevState.enableEmailBatching ||\n            emailInterval !== prevState.emailInterval\n        ) {\n            return {\n                emailInterval,\n                enableEmailBatching,\n                sendEmailNotifications,\n                newInterval: getEmailInterval(enableEmail && sendEmailNotifications, enableEmailBatching, emailInterval),\n            };\n        }\n\n        return null;\n    }\n\n    handleChange = (e) => {\n        const enableEmail = e.currentTarget.getAttribute('data-enable-email');\n\n        this.setState({\n            enableEmail,\n            newInterval: parseInt(e.currentTarget.getAttribute('data-email-interval'), 10),\n        });\n\n        this.props.onChange(enableEmail);\n    }\n\n    handleSubmit = async () => {\n        const {newInterval} = this.state;\n        if (this.props.emailInterval === newInterval) {\n            this.props.updateSection('');\n        } else {\n            // until the rest of the notification settings are moved to preferences, we have to do this separately\n            const {currentUserId, actions} = this.props;\n            const emailIntervalPreference = {\n                user_id: currentUserId,\n                category: Preferences.CATEGORY_NOTIFICATIONS,\n                name: Preferences.EMAIL_INTERVAL,\n                value: newInterval.toString(),\n            };\n\n            await actions.savePreferences(currentUserId, [emailIntervalPreference]);\n\n            this.props.onSubmit();\n        }\n    }\n\n    handleUpdateSection = (section) => {\n        if (section) {\n            this.props.updateSection(section);\n        } else {\n            this.props.updateSection('');\n\n            this.setState({\n                enableEmail: this.props.enableEmail,\n                newInterval: this.props.emailInterval,\n            });\n            this.props.onCancel();\n        }\n    }\n\n    renderMinSettingView = () => {\n        const {\n            enableEmail,\n            focused,\n            sendEmailNotifications,\n        } = this.props;\n\n        const {newInterval} = this.state;\n\n        let description;\n        if (!sendEmailNotifications) {\n            description = (\n                <FormattedMessage\n                    id='user.settings.notifications.email.disabled'\n                    defaultMessage='Email notifications are not enabled'\n                />\n            );\n        } else if (enableEmail) {\n            switch (newInterval) {\n            case Preferences.INTERVAL_IMMEDIATE:\n                description = (\n                    <FormattedMessage\n                        id='user.settings.notifications.email.immediately'\n                        defaultMessage='Immediately'\n                    />\n                );\n                break;\n            case Preferences.INTERVAL_HOUR:\n                description = (\n                    <FormattedMessage\n                        id='user.settings.notifications.email.everyHour'\n                        defaultMessage='Every hour'\n                    />\n                );\n                break;\n            case Preferences.INTERVAL_FIFTEEN_MINUTES:\n                description = (\n                    <FormattedMessage\n                        id='user.settings.notifications.email.everyXMinutes'\n                        defaultMessage='Every {count, plural, one {minute} other {{count, number} minutes}}'\n                        values={{count: newInterval / SECONDS_PER_MINUTE}}\n                    />\n                );\n                break;\n            default:\n                description = (\n                    <FormattedMessage\n                        id='user.settings.notifications.email.never'\n                        defaultMessage='Never'\n                    />\n                );\n            }\n        } else {\n            description = (\n                <FormattedMessage\n                    id='user.settings.notifications.email.never'\n                    defaultMessage='Never'\n                />\n            );\n        }\n\n        return (\n            <SettingItemMin\n                title={localizeMessage('user.settings.notifications.emailNotifications', 'Email notifications')}\n                describe={description}\n                focused={focused}\n                section={'email'}\n                updateSection={this.handleUpdateSection}\n            />\n        );\n    }\n\n    renderMaxSettingView = () => {\n        if (!this.props.sendEmailNotifications) {\n            return (\n                <SettingItemMax\n                    title={localizeMessage('user.settings.notifications.emailNotifications', 'Email notifications')}\n                    inputs={[\n                        <div\n                            key='oauthEmailInfo'\n                            className='padding-top'\n                        >\n                            <FormattedMessage\n                                id='user.settings.notifications.email.disabled_long'\n                                defaultMessage='Email notifications have not been enabled by your System Administrator.'\n                            />\n                        </div>,\n                    ]}\n                    server_error={this.props.serverError}\n                    section={'email'}\n                    updateSection={this.handleUpdateSection}\n                />\n            );\n        }\n\n        const {newInterval} = this.state;\n        let batchingOptions = null;\n        let batchingInfo = null;\n        if (this.props.enableEmailBatching) {\n            batchingOptions = (\n                <fieldset>\n                    <div className='radio'>\n                        <label>\n                            <input\n                                id='emailNotificationMinutes'\n                                type='radio'\n                                name='emailNotifications'\n                                checked={newInterval === Preferences.INTERVAL_FIFTEEN_MINUTES}\n                                data-enable-email={'true'}\n                                data-email-interval={Preferences.INTERVAL_FIFTEEN_MINUTES}\n                                onChange={this.handleChange}\n                            />\n                            <FormattedMessage\n                                id='user.settings.notifications.email.everyXMinutes'\n                                defaultMessage='Every {count} minutes'\n                                values={{count: Preferences.INTERVAL_FIFTEEN_MINUTES / SECONDS_PER_MINUTE}}\n                            />\n                        </label>\n                    </div>\n                    <div className='radio'>\n                        <label>\n                            <input\n                                id='emailNotificationHour'\n                                type='radio'\n                                name='emailNotifications'\n                                checked={newInterval === Preferences.INTERVAL_HOUR}\n                                data-enable-email={'true'}\n                                data-email-interval={Preferences.INTERVAL_HOUR}\n                                onChange={this.handleChange}\n                            />\n                            <FormattedMessage\n                                id='user.settings.notifications.email.everyHour'\n                                defaultMessage='Every hour'\n                            />\n                        </label>\n                    </div>\n                </fieldset>\n            );\n\n            batchingInfo = (\n                <FormattedMessage\n                    id='user.settings.notifications.emailBatchingInfo'\n                    defaultMessage='Notifications received over the time period selected are combined and sent in a single email.'\n                />\n            );\n        }\n\n        return (\n            <SettingItemMax\n                title={localizeMessage('user.settings.notifications.emailNotifications', 'Email notifications')}\n                inputs={[\n                    <fieldset key='userNotificationEmailOptions'>\n                        <legend className='form-legend'>\n                            <FormattedMessage\n                                id='user.settings.notifications.email.send'\n                                defaultMessage='Send email notifications'\n                            />\n                        </legend>\n                        <div className='radio'>\n                            <label>\n                                <input\n                                    id='emailNotificationImmediately'\n                                    type='radio'\n                                    name='emailNotifications'\n                                    checked={newInterval === Preferences.INTERVAL_IMMEDIATE}\n                                    data-enable-email={'true'}\n                                    data-email-interval={Preferences.INTERVAL_IMMEDIATE}\n                                    onChange={this.handleChange}\n                                />\n                                <FormattedMessage\n                                    id='user.settings.notifications.email.immediately'\n                                    defaultMessage='Immediately'\n                                />\n                            </label>\n                        </div>\n                        {batchingOptions}\n                        <div className='radio'>\n                            <label>\n                                <input\n                                    id='emailNotificationNever'\n                                    type='radio'\n                                    name='emailNotifications'\n                                    checked={newInterval === Preferences.INTERVAL_NEVER}\n                                    data-enable-email={'false'}\n                                    data-email-interval={Preferences.INTERVAL_NEVER}\n                                    onChange={this.handleChange}\n                                />\n                                <FormattedMessage\n                                    id='user.settings.notifications.email.never'\n                                    defaultMessage='Never'\n                                />\n                            </label>\n                        </div>\n                        <div className='margin-top x2'>\n                            <FormattedMessage\n                                id='user.settings.notifications.emailInfo'\n                                defaultMessage='Email notifications are sent for mentions and direct messages when you are offline or away from {siteName} for more than 5 minutes.'\n                                values={{\n                                    siteName: this.props.siteName,\n                                }}\n                            />\n                            {' '}\n                            {batchingInfo}\n                        </div>\n                    </fieldset>,\n                ]}\n                submit={this.handleSubmit}\n                saving={this.props.saving}\n                server_error={this.props.serverError}\n                updateSection={this.handleUpdateSection}\n            />\n        );\n    }\n\n    render() {\n        if (this.props.activeSection !== 'email') {\n            return this.renderMinSettingView();\n        }\n\n        return this.renderMaxSettingView();\n    }\n}\n","// Copyright (c) 2015-present Mattermost, Inc. All Rights Reserved.\n// See LICENSE.txt for license information.\n\nimport {connect} from 'react-redux';\nimport {bindActionCreators} from 'redux';\n\nimport {Preferences} from 'mattermost-redux/constants';\n\nimport {savePreferences} from 'mattermost-redux/actions/preferences';\n\nimport {getCurrentUserId} from 'mattermost-redux/selectors/entities/common';\nimport {getConfig} from 'mattermost-redux/selectors/entities/general';\nimport {get as getPreference} from 'mattermost-redux/selectors/entities/preferences';\n\nimport EmailNotificationSetting from './email_notification_setting';\n\nfunction mapStateToProps(state) {\n    const config = getConfig(state);\n    const emailInterval = parseInt(getPreference(\n        state,\n        Preferences.CATEGORY_NOTIFICATIONS,\n        Preferences.EMAIL_INTERVAL,\n        Preferences.INTERVAL_NOT_SET.toString(),\n    ), 10);\n\n    return {\n        currentUserId: getCurrentUserId(state),\n        emailInterval,\n        enableEmailBatching: config.EnableEmailBatching === 'true',\n        sendEmailNotifications: config.SendEmailNotifications === 'true',\n    };\n}\n\nfunction mapDispatchToProps(dispatch) {\n    return {\n        actions: bindActionCreators({\n            savePreferences,\n        }, dispatch),\n    };\n}\n\nexport default connect(mapStateToProps, mapDispatchToProps)(EmailNotificationSetting);\n","// Copyright (c) 2015-present Mattermost, Inc. All Rights Reserved.\n// See LICENSE.txt for license information.\n\nimport PropTypes from 'prop-types';\nimport React from 'react';\nimport {FormattedHTMLMessage, FormattedMessage} from 'react-intl';\n\nimport AutosizeTextarea from 'components/autosize_textarea.jsx';\nimport SettingItemMax from 'components/setting_item_max.jsx';\nimport {localizeMessage} from 'utils/utils.jsx';\n\nconst MESSAGE_MAX_LENGTH = 200;\n\nexport default class ManageAutoResponder extends React.PureComponent {\n    static propTypes = {\n        autoResponderActive: PropTypes.bool.isRequired,\n        autoResponderMessage: PropTypes.string.isRequired,\n        updateSection: PropTypes.func.isRequired,\n        setParentState: PropTypes.func.isRequired,\n        submit: PropTypes.func.isRequired,\n        saving: PropTypes.bool.isRequired,\n        error: PropTypes.string,\n    };\n\n    handleAutoResponderChecked = (e) => {\n        this.props.setParentState('autoResponderActive', e.target.checked);\n    };\n\n    onMessageChanged = (e) => {\n        this.props.setParentState('autoResponderMessage', e.target.value);\n    };\n\n    render() {\n        const {\n            autoResponderActive,\n            autoResponderMessage,\n        } = this.props;\n\n        let serverError;\n        if (this.props.error) {\n            serverError = <label className='has-error'>{this.props.error}</label>;\n        }\n\n        const inputs = [];\n\n        const activeToggle = (\n            <div\n                id='autoResponderCheckbox'\n                key='autoResponderCheckbox'\n                className='checkbox'\n            >\n                <label>\n                    <input\n                        id='autoResponderActive'\n                        type='checkbox'\n                        checked={autoResponderActive}\n                        onChange={this.handleAutoResponderChecked}\n                    />\n                    <FormattedMessage\n                        id='user.settings.notifications.autoResponderEnabled'\n                        defaultMessage='Enabled'\n                    />\n                </label>\n            </div>\n        );\n\n        const message = (\n            <div\n                id='autoResponderMessage'\n                key='autoResponderMessage'\n            >\n                <div className='padding-top'>\n                    <AutosizeTextarea\n                        style={{resize: 'none'}}\n                        id='autoResponderMessageInput'\n                        className='form-control'\n                        rows='5'\n                        placeholder={localizeMessage('user.settings.notifications.autoResponderPlaceholder', 'Message')}\n                        value={autoResponderMessage}\n                        maxLength={MESSAGE_MAX_LENGTH}\n                        onChange={this.onMessageChanged}\n                    />\n                    {serverError}\n                </div>\n            </div>\n        );\n\n        inputs.push(activeToggle);\n        if (autoResponderActive) {\n            inputs.push(message);\n        }\n        inputs.push((\n            <div\n                key='autoResponderHint'\n                className='margin-top x3'\n            >\n                <FormattedHTMLMessage\n                    id='user.settings.notifications.autoResponderHint'\n                    defaultMessage='Set a custom message that will be automatically sent in response to Direct Messages. Mentions in Public and Private Channels will not trigger the automated reply. Enabling Automatic Replies sets your status to Out of Office and disables email and push notifications.'\n                />\n            </div>\n        ));\n\n        return (\n            <SettingItemMax\n                title={\n                    <FormattedMessage\n                        id='user.settings.notifications.autoResponder'\n                        defaultMessage='Automatic Direct Message Replies'\n                    />\n                }\n                width='medium'\n                shiftEnter={true}\n                submit={this.props.submit}\n                saving={this.props.saving}\n                inputs={inputs}\n                updateSection={this.props.updateSection}\n            />\n        );\n    }\n}\n","// Copyright (c) 2015-present Mattermost, Inc. All Rights Reserved.\n// See LICENSE.txt for license information.\n\nimport PropTypes from 'prop-types';\nimport React from 'react';\nimport {FormattedMessage} from 'react-intl';\n\nimport Constants, {NotificationLevels} from 'utils/constants.jsx';\nimport * as Utils from 'utils/utils.jsx';\nimport SettingItemMax from 'components/setting_item_max.jsx';\nimport SettingItemMin from 'components/setting_item_min';\n\nimport DesktopNotificationSettings from './desktop_notification_settings.jsx';\nimport EmailNotificationSetting from './email_notification_setting';\nimport ManageAutoResponder from './manage_auto_responder.jsx';\n\nfunction getNotificationsStateFromProps(props) {\n    const user = props.user;\n\n    let desktop = NotificationLevels.MENTION;\n    let sound = 'true';\n    let comments = 'never';\n    let enableEmail = 'true';\n    let pushActivity = NotificationLevels.MENTION;\n    let pushStatus = Constants.UserStatuses.AWAY;\n    let autoResponderActive = false;\n    let autoResponderMessage = Utils.localizeMessage(\n        'user.settings.notifications.autoResponderDefault',\n        'Hello, I am out of office and unable to respond to messages.'\n    );\n\n    if (user.notify_props) {\n        if (user.notify_props.desktop) {\n            desktop = user.notify_props.desktop;\n        }\n        if (user.notify_props.desktop_sound) {\n            sound = user.notify_props.desktop_sound;\n        }\n        if (user.notify_props.comments) {\n            comments = user.notify_props.comments;\n        }\n        if (user.notify_props.email) {\n            enableEmail = user.notify_props.email;\n        }\n        if (user.notify_props.push) {\n            pushActivity = user.notify_props.push;\n        }\n        if (user.notify_props.push_status) {\n            pushStatus = user.notify_props.push_status;\n        }\n\n        if (user.notify_props.auto_responder_active) {\n            autoResponderActive = user.notify_props.auto_responder_active === 'true';\n        }\n\n        if (user.notify_props.auto_responder_message) {\n            autoResponderMessage = user.notify_props.auto_responder_message;\n        }\n    }\n\n    let usernameKey = false;\n    let customKeys = '';\n    let firstNameKey = false;\n    let channelKey = false;\n\n    if (user.notify_props) {\n        if (user.notify_props.mention_keys) {\n            const keys = user.notify_props.mention_keys.split(',');\n\n            if (keys.indexOf(user.username) === -1) {\n                usernameKey = false;\n            } else {\n                usernameKey = true;\n                keys.splice(keys.indexOf(user.username), 1);\n                if (keys.indexOf(`@${user.username}`) !== -1) {\n                    keys.splice(keys.indexOf(`@${user.username}`), 1);\n                }\n            }\n\n            customKeys = keys.join(',');\n        }\n\n        if (user.notify_props.first_name) {\n            firstNameKey = user.notify_props.first_name === 'true';\n        }\n\n        if (user.notify_props.channel) {\n            channelKey = user.notify_props.channel === 'true';\n        }\n    }\n\n    return {\n        desktopActivity: desktop,\n        enableEmail,\n        pushActivity,\n        pushStatus,\n        desktopSound: sound,\n        usernameKey,\n        customKeys,\n        customKeysChecked: customKeys.length > 0,\n        firstNameKey,\n        channelKey,\n        autoResponderActive,\n        autoResponderMessage,\n        notifyCommentsLevel: comments,\n        isSaving: false,\n    };\n}\n\nexport default class NotificationsTab extends React.Component {\n    static propTypes = {\n        user: PropTypes.object,\n        updateSection: PropTypes.func,\n        activeSection: PropTypes.string,\n        closeModal: PropTypes.func.isRequired,\n        collapseModal: PropTypes.func.isRequired,\n        siteName: PropTypes.string,\n        sendPushNotifications: PropTypes.bool,\n        enableAutoResponder: PropTypes.bool,\n        actions: PropTypes.shape({\n            updateMe: PropTypes.func.isRequired,\n        }).isRequired,\n    }\n\n    static defaultProps = {\n        user: null,\n        activeSection: '',\n        activeTab: '',\n    }\n\n    constructor(props) {\n        super(props);\n\n        this.state = getNotificationsStateFromProps(props);\n    }\n\n    handleSubmit = () => {\n        const data = {};\n        data.email = this.state.enableEmail;\n        data.desktop_sound = this.state.desktopSound;\n        data.desktop = this.state.desktopActivity;\n        data.push = this.state.pushActivity;\n        data.push_status = this.state.pushStatus;\n        data.comments = this.state.notifyCommentsLevel;\n        data.auto_responder_active = this.state.autoResponderActive.toString();\n        data.auto_responder_message = this.state.autoResponderMessage;\n\n        if (!data.auto_responder_message || data.auto_responder_message === '') {\n            data.auto_responder_message = Utils.localizeMessage(\n                'user.settings.notifications.autoResponderDefault',\n                'Hello, I am out of office and unable to respond to messages.'\n            );\n        }\n\n        const mentionKeys = [];\n        if (this.state.usernameKey) {\n            mentionKeys.push(this.props.user.username);\n        }\n\n        let stringKeys = mentionKeys.join(',');\n        if (this.state.customKeys.length > 0 && this.state.customKeysChecked) {\n            stringKeys += ',' + this.state.customKeys;\n        }\n\n        data.mention_keys = stringKeys;\n        data.first_name = this.state.firstNameKey.toString();\n        data.channel = this.state.channelKey.toString();\n\n        this.setState({isSaving: true});\n\n        this.props.actions.updateMe({notify_props: data}).\n            then(({data: result, error: err}) => {\n                if (result) {\n                    this.updateSection('');\n                    this.setState(getNotificationsStateFromProps(this.props));\n                } else if (err) {\n                    this.setState({serverError: err.message, isSaving: false});\n                }\n            });\n    }\n\n    handleCancel = (e) => {\n        if (e) {\n            e.preventDefault();\n        }\n        this.setState(getNotificationsStateFromProps(this.props));\n    }\n\n    handleUpdateSection = (section) => {\n        if (section) {\n            this.props.updateSection(section);\n        } else {\n            this.props.updateSection('');\n            this.handleCancel();\n        }\n    };\n\n    setStateValue = (key, value) => {\n        const data = {};\n        data[key] = value;\n        this.setState(data);\n    }\n\n    updateSection = (section) => {\n        this.setState({isSaving: false});\n        this.props.updateSection(section);\n    }\n\n    handleNotifyCommentsRadio(notifyCommentsLevel) {\n        this.setState({notifyCommentsLevel});\n    }\n\n    handlePushRadio(pushActivity) {\n        this.setState({pushActivity});\n    }\n\n    handlePushStatusRadio(pushStatus) {\n        this.setState({pushStatus});\n    }\n\n    handleEmailRadio = (enableEmail) => {\n        this.setState({enableEmail});\n    }\n\n    updateUsernameKey = (val) => {\n        this.setState({usernameKey: val});\n    }\n\n    updateFirstNameKey = (val) => {\n        this.setState({firstNameKey: val});\n    }\n\n    updateChannelKey = (val) => {\n        this.setState({channelKey: val});\n    }\n\n    updateCustomMentionKeys = () => {\n        const checked = this.refs.customcheck.checked;\n\n        if (checked) {\n            const text = this.refs.custommentions.value;\n\n            // remove all spaces and split string into individual keys\n            this.setState({customKeys: text.replace(/ /g, ''), customKeysChecked: true});\n        } else {\n            this.setState({customKeys: '', customKeysChecked: false});\n        }\n    }\n\n    onCustomChange = () => {\n        this.refs.customcheck.checked = true;\n        this.updateCustomMentionKeys();\n    }\n\n    createPushNotificationSection = () => {\n        if (this.props.activeSection === 'push') {\n            const inputs = [];\n            let extraInfo = null;\n            let submit = null;\n\n            if (this.props.sendPushNotifications) {\n                const pushActivityRadio = [false, false, false];\n                if (this.state.pushActivity === NotificationLevels.ALL) {\n                    pushActivityRadio[0] = true;\n                } else if (this.state.pushActivity === NotificationLevels.NONE) {\n                    pushActivityRadio[2] = true;\n                } else {\n                    pushActivityRadio[1] = true;\n                }\n\n                const pushStatusRadio = [false, false, false];\n                if (this.state.pushStatus === Constants.UserStatuses.ONLINE) {\n                    pushStatusRadio[0] = true;\n                } else if (this.state.pushStatus === Constants.UserStatuses.AWAY) {\n                    pushStatusRadio[1] = true;\n                } else {\n                    pushStatusRadio[2] = true;\n                }\n\n                let pushStatusSettings;\n                if (this.state.pushActivity !== NotificationLevels.NONE) {\n                    pushStatusSettings = (\n                        <fieldset>\n                            <legend className='form-legend'>\n                                <FormattedMessage\n                                    id='user.settings.notifications.push_notification.status'\n                                    defaultMessage='Trigger push notifications when'\n                                />\n                            </legend>\n                            <div className='radio'>\n                                <label>\n                                    <input\n                                        id='pushNotificationOnline'\n                                        type='radio'\n                                        name='pushNotificationStatus'\n                                        checked={pushStatusRadio[0]}\n                                        onChange={this.handlePushStatusRadio.bind(this, Constants.UserStatuses.ONLINE)}\n                                    />\n                                    <FormattedMessage\n                                        id='user.settings.push_notification.online'\n                                        defaultMessage='Online, away or offline'\n                                    />\n                                </label>\n                            </div>\n                            <div className='radio'>\n                                <label>\n                                    <input\n                                        id='pushNotificationAway'\n                                        type='radio'\n                                        name='pushNotificationStatus'\n                                        checked={pushStatusRadio[1]}\n                                        onChange={this.handlePushStatusRadio.bind(this, Constants.UserStatuses.AWAY)}\n                                    />\n                                    <FormattedMessage\n                                        id='user.settings.push_notification.away'\n                                        defaultMessage='Away or offline'\n                                    />\n                                </label>\n                            </div>\n                            <div className='radio'>\n                                <label>\n                                    <input\n                                        id='pushNotificationOffline'\n                                        type='radio'\n                                        name='pushNotificationStatus'\n                                        checked={pushStatusRadio[2]}\n                                        onChange={this.handlePushStatusRadio.bind(this, Constants.UserStatuses.OFFLINE)}\n                                    />\n                                    <FormattedMessage\n                                        id='user.settings.push_notification.offline'\n                                        defaultMessage='Offline'\n                                    />\n                                </label>\n                            </div>\n                        </fieldset>\n                    );\n\n                    extraInfo = (\n                        <span>\n                            <FormattedMessage\n                                id='user.settings.push_notification.status_info'\n                                defaultMessage='Notification alerts are only pushed to your mobile device when your online status matches the selection above.'\n                            />\n                        </span>\n                    );\n                }\n\n                inputs.push(\n                    <div>\n                        <fieldset key='userNotificationLevelOption'>\n                            <legend className='form-legend'>\n                                <FormattedMessage\n                                    id='user.settings.push_notification.send'\n                                    defaultMessage='Send mobile push notifications'\n                                />\n                            </legend>\n                            <div className='radio'>\n                                <label>\n                                    <input\n                                        id='pushNotificationAllActivity'\n                                        type='radio'\n                                        name='pushNotificationLevel'\n                                        checked={pushActivityRadio[0]}\n                                        onChange={this.handlePushRadio.bind(this, NotificationLevels.ALL)}\n                                    />\n                                    <FormattedMessage\n                                        id='user.settings.push_notification.allActivity'\n                                        defaultMessage='For all activity'\n                                    />\n                                </label>\n                            </div>\n                            <div className='radio'>\n                                <label>\n                                    <input\n                                        id='pushNotificationMentions'\n                                        type='radio'\n                                        name='pushNotificationLevel'\n                                        checked={pushActivityRadio[1]}\n                                        onChange={this.handlePushRadio.bind(this, NotificationLevels.MENTION)}\n                                    />\n                                    <FormattedMessage\n                                        id='user.settings.push_notification.onlyMentions'\n                                        defaultMessage='For mentions and direct messages'\n                                    />\n                                </label>\n                            </div>\n                            <div className='radio'>\n                                <label>\n                                    <input\n                                        id='pushNotificationNever'\n                                        type='radio'\n                                        name='pushNotificationLevel'\n                                        checked={pushActivityRadio[2]}\n                                        onChange={this.handlePushRadio.bind(this, NotificationLevels.NONE)}\n                                    />\n                                    <FormattedMessage\n                                        id='user.settings.notifications.never'\n                                        defaultMessage='Never'\n                                    />\n                                </label>\n                            </div>\n                            <div className='margin-top x3'>\n                                <FormattedMessage\n                                    id='user.settings.push_notification.info'\n                                    defaultMessage='Notification alerts are pushed to your mobile device when there is activity in Mattermost.'\n                                />\n                            </div>\n                        </fieldset>\n                        <hr/>\n                        {pushStatusSettings}\n                    </div>\n                );\n\n                submit = this.handleSubmit;\n            } else {\n                inputs.push(\n                    <div\n                        key='oauthEmailInfo'\n                        className='padding-top'\n                    >\n                        <FormattedMessage\n                            id='user.settings.push_notification.disabled_long'\n                            defaultMessage='Push notifications have not been enabled by your System Administrator.'\n                        />\n                    </div>\n                );\n            }\n\n            return (\n                <SettingItemMax\n                    title={Utils.localizeMessage('user.settings.notifications.push', 'Mobile push notifications')}\n                    extraInfo={extraInfo}\n                    inputs={inputs}\n                    submit={submit}\n                    server_error={this.state.serverError}\n                    updateSection={this.handleUpdateSection}\n                />\n            );\n        }\n\n        let describe = '';\n        if (this.state.pushActivity === NotificationLevels.ALL) {\n            if (this.state.pushStatus === Constants.UserStatuses.AWAY) {\n                describe = (\n                    <FormattedMessage\n                        id='user.settings.push_notification.allActivityAway'\n                        defaultMessage='For all activity when away or offline'\n                    />\n                );\n            } else if (this.state.pushStatus === Constants.UserStatuses.OFFLINE) {\n                describe = (\n                    <FormattedMessage\n                        id='user.settings.push_notification.allActivityOffline'\n                        defaultMessage='For all activity when offline'\n                    />\n                );\n            } else {\n                describe = (\n                    <FormattedMessage\n                        id='user.settings.push_notification.allActivityOnline'\n                        defaultMessage='For all activity when online, away or offline'\n                    />\n                );\n            }\n        } else if (this.state.pushActivity === NotificationLevels.NONE) {\n            describe = (\n                <FormattedMessage\n                    id='user.settings.notifications.never'\n                    defaultMessage='Never'\n                />\n            );\n        } else if (this.props.sendPushNotifications) {\n            if (this.state.pushStatus === Constants.UserStatuses.AWAY) { //eslint-disable-line no-lonely-if\n                describe = (\n                    <FormattedMessage\n                        id='user.settings.push_notification.onlyMentionsAway'\n                        defaultMessage='For mentions and direct messages when away or offline'\n                    />\n                );\n            } else if (this.state.pushStatus === Constants.UserStatuses.OFFLINE) {\n                describe = (\n                    <FormattedMessage\n                        id='user.settings.push_notification.onlyMentionsOffline'\n                        defaultMessage='For mentions and direct messages when offline'\n                    />\n                );\n            } else {\n                describe = (\n                    <FormattedMessage\n                        id='user.settings.push_notification.onlyMentionsOnline'\n                        defaultMessage='For mentions and direct messages when online, away or offline'\n                    />\n                );\n            }\n        } else {\n            describe = (\n                <FormattedMessage\n                    id='user.settings.push_notification.disabled'\n                    defaultMessage='Push notifications are not enabled'\n                />\n            );\n        }\n\n        return (\n            <SettingItemMin\n                title={Utils.localizeMessage('user.settings.notifications.push', 'Mobile push notifications')}\n                describe={describe}\n                section={'push'}\n                updateSection={this.handleUpdateSection}\n            />\n        );\n    }\n\n    render() {\n        const serverError = this.state.serverError;\n        const user = this.props.user;\n\n        let keysSection;\n        if (this.props.activeSection === 'keys') {\n            const inputs = [];\n\n            if (user.first_name) {\n                const handleUpdateFirstNameKey = (e) => {\n                    this.updateFirstNameKey(e.target.checked);\n                };\n                inputs.push(\n                    <div key='userNotificationFirstNameOption'>\n                        <div className='checkbox'>\n                            <label>\n                                <input\n                                    id='notificationTriggerFirst'\n                                    type='checkbox'\n                                    checked={this.state.firstNameKey}\n                                    onChange={handleUpdateFirstNameKey}\n                                />\n                                <FormattedMessage\n                                    id='user.settings.notifications.sensitiveName'\n                                    defaultMessage='Your case sensitive first name \"{first_name}\"'\n                                    values={{\n                                        first_name: user.first_name,\n                                    }}\n                                />\n                            </label>\n                        </div>\n                    </div>\n                );\n            }\n\n            const handleUpdateUsernameKey = (e) => {\n                this.updateUsernameKey(e.target.checked);\n            };\n            inputs.push(\n                <div key='userNotificationUsernameOption'>\n                    <div className='checkbox'>\n                        <label>\n                            <input\n                                id='notificationTriggerUsername'\n                                type='checkbox'\n                                checked={this.state.usernameKey}\n                                onChange={handleUpdateUsernameKey}\n                            />\n                            <FormattedMessage\n                                id='user.settings.notifications.sensitiveUsername'\n                                defaultMessage='Your non-case sensitive username \"{username}\"'\n                                values={{\n                                    username: user.username,\n                                }}\n                            />\n                        </label>\n                    </div>\n                </div>\n            );\n\n            const handleUpdateChannelKey = (e) => {\n                this.updateChannelKey(e.target.checked);\n            };\n            inputs.push(\n                <div key='userNotificationChannelOption'>\n                    <div className='checkbox'>\n                        <label>\n                            <input\n                                id='notificationTriggerShouts'\n                                type='checkbox'\n                                checked={this.state.channelKey}\n                                onChange={handleUpdateChannelKey}\n                            />\n                            <FormattedMessage\n                                id='user.settings.notifications.channelWide'\n                                defaultMessage='Channel-wide mentions \"@channel\", \"@all\", \"@here\"'\n                            />\n                        </label>\n                    </div>\n                </div>\n            );\n\n            inputs.push(\n                <div key='userNotificationCustomOption'>\n                    <div className='checkbox'>\n                        <label>\n                            <input\n                                id='notificationTriggerCustom'\n                                ref='customcheck'\n                                type='checkbox'\n                                checked={this.state.customKeysChecked}\n                                onChange={this.updateCustomMentionKeys}\n                            />\n                            <FormattedMessage\n                                id='user.settings.notifications.sensitiveWords'\n                                defaultMessage='Other non-case sensitive words, separated by commas:'\n                            />\n                        </label>\n                    </div>\n                    <input\n                        id='notificationTriggerCustomText'\n                        autoFocus={this.state.customKeysChecked}\n                        ref='custommentions'\n                        className='form-control mentions-input'\n                        type='text'\n                        defaultValue={this.state.customKeys}\n                        onChange={this.onCustomChange}\n                        onFocus={Utils.moveCursorToEnd}\n                        aria-labelledby='notificationTriggerCustom'\n                    />\n                </div>\n            );\n\n            const extraInfo = (\n                <span>\n                    <FormattedMessage\n                        id='user.settings.notifications.mentionsInfo'\n                        defaultMessage='Mentions trigger when someone sends a message that includes your username (@{username}) or any of the options selected above.'\n                        values={{\n                            username: user.username,\n                        }}\n                    />\n                </span>\n            );\n\n            keysSection = (\n                <SettingItemMax\n                    title={Utils.localizeMessage('user.settings.notifications.wordsTrigger', 'Words that trigger mentions')}\n                    inputs={inputs}\n                    submit={this.handleSubmit}\n                    saving={this.state.isSaving}\n                    server_error={serverError}\n                    updateSection={this.handleUpdateSection}\n                    extraInfo={extraInfo}\n                />\n            );\n        } else {\n            let keys = ['@' + user.username];\n            if (this.state.firstNameKey) {\n                keys.push(user.first_name);\n            }\n            if (this.state.usernameKey) {\n                keys.push(user.username);\n            }\n\n            if (this.state.channelKey) {\n                keys.push('@channel');\n                keys.push('@all');\n                keys.push('@here');\n            }\n            if (this.state.customKeys.length > 0) {\n                keys = keys.concat(this.state.customKeys.split(','));\n            }\n\n            let describe = '';\n            for (let i = 0; i < keys.length; i++) {\n                if (keys[i] !== '') {\n                    describe += '\"' + keys[i] + '\", ';\n                }\n            }\n\n            if (describe.length > 0) {\n                describe = describe.substring(0, describe.length - 2);\n            } else {\n                describe = (\n                    <FormattedMessage\n                        id='user.settings.notifications.noWords'\n                        defaultMessage='No words configured'\n                    />\n                );\n            }\n\n            keysSection = (\n                <SettingItemMin\n                    title={Utils.localizeMessage('user.settings.notifications.wordsTrigger', 'Words that trigger mentions')}\n                    describe={describe}\n                    section={'keys'}\n                    updateSection={this.handleUpdateSection}\n                />\n            );\n        }\n\n        let commentsSection;\n        if (this.props.activeSection === 'comments') {\n            const commentsActive = [false, false, false];\n            if (this.state.notifyCommentsLevel === 'never') {\n                commentsActive[2] = true;\n            } else if (this.state.notifyCommentsLevel === 'root') {\n                commentsActive[1] = true;\n            } else {\n                commentsActive[0] = true;\n            }\n\n            const inputs = [];\n\n            inputs.push(\n                <fieldset key='userNotificationLevelOption'>\n                    <legend className='form-legend hidden-label'>\n                        {Utils.localizeMessage('user.settings.notifications.comments', 'Reply notifications')}\n                    </legend>\n                    <div className='radio'>\n                        <label>\n                            <input\n                                id='notificationCommentsAny'\n                                type='radio'\n                                name='commentsNotificationLevel'\n                                checked={commentsActive[0]}\n                                onChange={this.handleNotifyCommentsRadio.bind(this, 'any')}\n                            />\n                            <FormattedMessage\n                                id='user.settings.notifications.commentsAny'\n                                defaultMessage='Trigger notifications on messages in reply threads that I start or participate in'\n                            />\n                        </label>\n                        <br/>\n                    </div>\n                    <div className='radio'>\n                        <label>\n                            <input\n                                id='notificationCommentsRoot'\n                                type='radio'\n                                name='commentsNotificationLevel'\n                                checked={commentsActive[1]}\n                                onChange={this.handleNotifyCommentsRadio.bind(this, 'root')}\n                            />\n                            <FormattedMessage\n                                id='user.settings.notifications.commentsRoot'\n                                defaultMessage='Trigger notifications on messages in threads that I start'\n                            />\n                        </label>\n                        <br/>\n                    </div>\n                    <div className='radio'>\n                        <label>\n                            <input\n                                id='notificationCommentsNever'\n                                type='radio'\n                                name='commentsNotificationLevel'\n                                checked={commentsActive[2]}\n                                onChange={this.handleNotifyCommentsRadio.bind(this, 'never')}\n                            />\n                            <FormattedMessage\n                                id='user.settings.notifications.commentsNever'\n                                defaultMessage=\"Do not trigger notifications on messages in reply threads unless I'm mentioned\"\n                            />\n                        </label>\n                    </div>\n                </fieldset>\n            );\n\n            const extraInfo = (\n                <span>\n                    <FormattedMessage\n                        id='user.settings.notifications.commentsInfo'\n                        defaultMessage=\"In addition to notifications for when you're mentioned, select if you would like to receive notifications on reply threads.\"\n                    />\n                </span>\n            );\n\n            commentsSection = (\n                <SettingItemMax\n                    title={Utils.localizeMessage('user.settings.notifications.comments', 'Reply notifications')}\n                    extraInfo={extraInfo}\n                    inputs={inputs}\n                    submit={this.handleSubmit}\n                    saving={this.state.isSaving}\n                    server_error={serverError}\n                    updateSection={this.handleUpdateSection}\n                />\n            );\n        } else {\n            let describe = '';\n            if (this.state.notifyCommentsLevel === 'never') {\n                describe = (\n                    <FormattedMessage\n                        id='user.settings.notifications.commentsNever'\n                        defaultMessage=\"Do not trigger notifications on messages in reply threads unless I'm mentioned\"\n                    />\n                );\n            } else if (this.state.notifyCommentsLevel === 'root') {\n                describe = (\n                    <FormattedMessage\n                        id='user.settings.notifications.commentsRoot'\n                        defaultMessage='Trigger notifications on messages in threads that I start'\n                    />\n                );\n            } else {\n                describe = (\n                    <FormattedMessage\n                        id='user.settings.notifications.commentsAny'\n                        defaultMessage='Trigger notifications on messages in reply threads that I start or participate in'\n                    />\n                );\n            }\n\n            commentsSection = (\n                <SettingItemMin\n                    title={Utils.localizeMessage('user.settings.notifications.comments', 'Reply notifications')}\n                    describe={describe}\n                    section={'comments'}\n                    updateSection={this.handleUpdateSection}\n                />\n            );\n        }\n\n        let autoResponderSection;\n        if (this.props.enableAutoResponder) {\n            if (this.props.activeSection === 'auto-responder') {\n                autoResponderSection = (\n                    <div>\n                        <ManageAutoResponder\n                            autoResponderActive={this.state.autoResponderActive}\n                            autoResponderMessage={this.state.autoResponderMessage}\n                            updateSection={this.updateSection}\n                            setParentState={this.setStateValue}\n                            submit={this.handleSubmit}\n                            error={this.state.serverError}\n                            saving={this.state.isSaving}\n                        />\n                        <div className='divider-dark'/>\n                    </div>\n                );\n            } else {\n                const describe = this.state.autoResponderActive ? (\n                    <FormattedMessage\n                        id='user.settings.notifications.autoResponderEnabled'\n                        defaultMessage='Enabled'\n                    />\n                ) : (\n                    <FormattedMessage\n                        id='user.settings.notifications.autoResponderDisabled'\n                        defaultMessage='Disabled'\n                    />\n                );\n\n                autoResponderSection = (\n                    <SettingItemMin\n                        title={\n                            <FormattedMessage\n                                id='user.settings.notifications.autoResponder'\n                                defaultMessage='Automatic Direct Message Replies'\n                            />\n                        }\n                        width='medium'\n                        describe={describe}\n                        section={'auto-responder'}\n                        updateSection={this.updateSection}\n                    />\n                );\n            }\n        }\n\n        const pushNotificationSection = this.createPushNotificationSection();\n\n        return (\n            <div id='notificationSettings'>\n                <div className='modal-header'>\n                    <button\n                        id='closeButton'\n                        type='button'\n                        className='close'\n                        data-dismiss='modal'\n                        onClick={this.props.closeModal}\n                    >\n                        <span aria-hidden='true'>{'×'}</span>\n                    </button>\n                    <h4\n                        className='modal-title'\n                        ref='title'\n                    >\n                        <div className='modal-back'>\n                            <FormattedMessage\n                                id='generic_icons.collapse'\n                                defaultMessage='Collapse Icon'\n                            >\n                                {(title) => (\n                                    <i\n                                        className='fa fa-angle-left'\n                                        title={title}\n                                        onClick={this.props.collapseModal}\n                                    />\n                                )}\n                            </FormattedMessage>\n                        </div>\n                        <FormattedMessage\n                            id='user.settings.notifications.title'\n                            defaultMessage='Notification Settings'\n                        />\n                    </h4>\n                </div>\n                <div\n                    ref='wrapper'\n                    className='user-settings'\n                >\n                    <h3\n                        id='notificationSettingsTitle'\n                        className='tab-header'\n                    >\n                        <FormattedMessage\n                            id='user.settings.notifications.header'\n                            defaultMessage='Notifications'\n                        />\n                    </h3>\n                    <div className='divider-dark first'/>\n                    <DesktopNotificationSettings\n                        activity={this.state.desktopActivity}\n                        sound={this.state.desktopSound}\n                        updateSection={this.handleUpdateSection}\n                        setParentState={this.setStateValue}\n                        submit={this.handleSubmit}\n                        saving={this.state.isSaving}\n                        cancel={this.handleCancel}\n                        error={this.state.serverError}\n                        active={this.props.activeSection === 'desktop'}\n                    />\n                    <div className='divider-light'/>\n                    <EmailNotificationSetting\n                        activeSection={this.props.activeSection}\n                        updateSection={this.props.updateSection}\n                        enableEmail={this.state.enableEmail === 'true'}\n                        onSubmit={this.handleSubmit}\n                        onCancel={this.handleCancel}\n                        onChange={this.handleEmailRadio}\n                        saving={this.state.isSaving}\n                        serverError={this.state.serverError}\n                        siteName={this.props.siteName}\n                    />\n                    <div className='divider-light'/>\n                    {pushNotificationSection}\n                    <div className='divider-light'/>\n                    {keysSection}\n                    <div className='divider-light'/>\n                    {commentsSection}\n                    <div className='divider-light'/>\n                    {autoResponderSection}\n                    <div className='divider-dark'/>\n                </div>\n            </div>\n\n        );\n    }\n}\n","// Copyright (c) 2015-present Mattermost, Inc. All Rights Reserved.\n// See LICENSE.txt for license information.\n\nimport {connect} from 'react-redux';\nimport {bindActionCreators} from 'redux';\nimport {updateMe} from 'mattermost-redux/actions/users';\nimport {getConfig} from 'mattermost-redux/selectors/entities/general';\n\nimport UserSettingsNotifications from './user_settings_notifications.jsx';\n\nfunction mapStateToProps(state) {\n    const config = getConfig(state);\n\n    const siteName = config.SiteName;\n    const sendPushNotifications = config.SendPushNotifications === 'true';\n    const enableAutoResponder = config.ExperimentalEnableAutomaticReplies === 'true';\n\n    return {\n        siteName,\n        sendPushNotifications,\n        enableAutoResponder,\n    };\n}\n\nfunction mapDispatchToProps(dispatch) {\n    return {\n        actions: bindActionCreators({updateMe}, dispatch),\n    };\n}\n\nexport default connect(mapStateToProps, mapDispatchToProps)(UserSettingsNotifications);\n","// Copyright (c) 2015-present Mattermost, Inc. All Rights Reserved.\n// See LICENSE.txt for license information.\n\nimport $ from 'jquery';\nimport PropTypes from 'prop-types';\nimport React from 'react';\nimport {Modal} from 'react-bootstrap';\nimport {FormattedMessage} from 'react-intl';\n\nimport {isMobile} from 'utils/utils.jsx';\nimport AuditTable from 'components/audit_table';\nimport LoadingScreen from 'components/loading_screen.jsx';\n\nexport default class AccessHistoryModal extends React.PureComponent {\n    static propTypes = {\n\n        /**\n         * Function that's called when modal is closed\n         */\n        onHide: PropTypes.func.isRequired,\n        actions: PropTypes.shape({\n\n            /**\n             * Function to fetch the user's audits\n             */\n            getUserAudits: PropTypes.func.isRequired,\n        }).isRequired,\n\n        /**\n         * The current user's audits\n         */\n        userAudits: PropTypes.array.isRequired,\n\n        /**\n         * The current user id\n         */\n        currentUserId: PropTypes.string.isRequired,\n    }\n\n    constructor(props) {\n        super(props);\n\n        this.state = {\n            show: true,\n        };\n    }\n\n    onShow = () => {\n        this.props.actions.getUserAudits(this.props.currentUserId, 0, 200);\n        if (!isMobile()) {\n            $('.modal-body').perfectScrollbar();\n        }\n    }\n\n    onHide = () => {\n        this.setState({show: false});\n    }\n\n    componentDidMount() {\n        this.onShow();\n    }\n\n    render() {\n        let content;\n        if (this.props.userAudits.length === 0) {\n            content = (<LoadingScreen/>);\n        } else {\n            content = (\n                <AuditTable\n                    audits={this.props.userAudits}\n                    showIp={true}\n                    showSession={true}\n                />\n            );\n        }\n\n        return (\n            <Modal\n                dialogClassName='a11y__modal modal--scroll'\n                show={this.state.show}\n                onHide={this.onHide}\n                onExited={this.props.onHide}\n                bsSize='large'\n                role='dialog'\n                aria-labelledby='accessHistoryModalLabel'\n            >\n                <Modal.Header closeButton={true}>\n                    <Modal.Title\n                        componentClass='h1'\n                        id='accessHistoryModalLabel'\n                    >\n                        <FormattedMessage\n                            id='access_history.title'\n                            defaultMessage='Access History'\n                        />\n                    </Modal.Title>\n                </Modal.Header>\n                <Modal.Body ref='modalBody'>\n                    {content}\n                </Modal.Body>\n                <Modal.Footer className='modal-footer--invisible'>\n                    <button\n                        id='closeModalButton'\n                        type='button'\n                        className='btn btn-link'\n                    >\n                        <FormattedMessage\n                            id='general_button.close'\n                            defaultMessage='Close'\n                        />\n                    </button>\n                </Modal.Footer>\n            </Modal>\n        );\n    }\n}\n","// Copyright (c) 2015-present Mattermost, Inc. All Rights Reserved.\n// See LICENSE.txt for license information.\n\nimport {connect} from 'react-redux';\nimport {bindActionCreators} from 'redux';\nimport {getUserAudits} from 'mattermost-redux/actions/users';\nimport {getCurrentUserId, getUserAudits as getCurrentUserAudits} from 'mattermost-redux/selectors/entities/users';\n\nimport AccessHistoryModal from './access_history_modal.jsx';\n\nfunction mapStateToProps(state) {\n    return {\n        currentUserId: getCurrentUserId(state),\n        userAudits: getCurrentUserAudits(state) || [],\n    };\n}\n\nfunction mapDispatchToProps(dispatch) {\n    return {\n        actions: bindActionCreators({\n            getUserAudits,\n        }, dispatch),\n    };\n}\n\nexport default connect(mapStateToProps, mapDispatchToProps)(AccessHistoryModal);\n","// Copyright (c) 2015-present Mattermost, Inc. All Rights Reserved.\n// See LICENSE.txt for license information.\n\nimport PropTypes from 'prop-types';\nimport React from 'react';\nimport {FormattedDate, FormattedMessage, FormattedTime} from 'react-intl';\n\nimport {getMonthLong} from 'utils/i18n';\n\nexport default function MoreInfo({\n    locale,\n    currentSession,\n    moreInfo,\n    handleMoreInfo,\n}) {\n    if (moreInfo) {\n        const firstAccessTime = new Date(currentSession.create_at);\n\n        return (\n            <div>\n                <div>\n                    <FormattedMessage\n                        id='activity_log.firstTime'\n                        defaultMessage='First time active: {date}, {time}'\n                        values={{\n                            date: (\n                                <FormattedDate\n                                    value={firstAccessTime}\n                                    day='2-digit'\n                                    month={getMonthLong(locale)}\n                                    year='numeric'\n                                />\n                            ),\n                            time: (\n                                <FormattedTime\n                                    value={firstAccessTime}\n                                    hour='2-digit'\n                                    minute='2-digit'\n                                />\n                            ),\n                        }}\n                    />\n                </div>\n                <div>\n                    <FormattedMessage\n                        id='activity_log.os'\n                        defaultMessage='OS: {os}'\n                        values={{\n                            os: currentSession.props.os,\n                        }}\n                    />\n                </div>\n                <div>\n                    <FormattedMessage\n                        id='activity_log.browser'\n                        defaultMessage='Browser: {browser}'\n                        values={{\n                            browser: currentSession.props.browser,\n                        }}\n                    />\n                </div>\n                <div>\n                    <FormattedMessage\n                        id='activity_log.sessionId'\n                        defaultMessage='Session ID: {id}'\n                        values={{\n                            id: currentSession.id,\n                        }}\n                    />\n                </div>\n            </div>\n        );\n    }\n\n    return (\n        <a\n            className='theme'\n            href='#'\n            onClick={handleMoreInfo}\n        >\n            <FormattedMessage\n                id='activity_log.moreInfo'\n                defaultMessage='More info'\n            />\n        </a>\n    );\n}\n\nMoreInfo.propTypes = {\n    locale: PropTypes.string.isRequired,\n    currentSession: PropTypes.object.isRequired,\n    handleMoreInfo: PropTypes.func.isRequired,\n    moreInfo: PropTypes.bool.isRequired,\n};\n","// Copyright (c) 2015-present Mattermost, Inc. All Rights Reserved.\n// See LICENSE.txt for license information.\n\nimport PropTypes from 'prop-types';\nimport React from 'react';\nimport {FormattedDate, FormattedMessage, FormattedTime} from 'react-intl';\nimport {General} from 'mattermost-redux/constants';\n\nimport {localizeMessage} from 'utils/utils.jsx';\nimport {getMonthLong, t} from 'utils/i18n';\n\nimport MoreInfo from './more_info.jsx';\n\nexport default class ActivityLog extends React.PureComponent {\n    static propTypes = {\n\n        /**\n         * The index of this instance within the list\n         */\n        index: PropTypes.number.isRequired,\n\n        /**\n         * The current locale of the user\n         */\n        locale: PropTypes.string.isRequired,\n\n        /**\n         * The session that's to be displayed\n         */\n        currentSession: PropTypes.object.isRequired,\n\n        /**\n         * Function to revoke session\n         */\n        submitRevoke: PropTypes.func.isRequired,\n    }\n\n    constructor(props) {\n        super(props);\n\n        this.state = {\n            moreInfo: false,\n        };\n    }\n\n    handleMoreInfo = () => {\n        this.setState({moreInfo: true});\n    }\n\n    submitRevoke = (e) => {\n        this.props.submitRevoke(this.props.currentSession.id, e);\n    }\n\n    isMobileSession = (session) => {\n        return session.device_id && (session.device_id.includes('apple') || session.device_id.includes('android'));\n    };\n\n    mobileSessionInfo = (session) => {\n        let deviceTypeId;\n        let deviceTypeMessage;\n        let devicePicture;\n        let deviceTitle;\n\n        if (session.device_id.includes('apple')) {\n            devicePicture = 'fa fa-apple';\n            deviceTitle = localizeMessage('device_icons.apple', 'Apple Icon');\n            deviceTypeId = t('activity_log_modal.iphoneNativeClassicApp');\n            deviceTypeMessage = 'iPhone Native Classic App';\n\n            if (session.device_id.includes(General.PUSH_NOTIFY_APPLE_REACT_NATIVE)) {\n                deviceTypeId = t('activity_log_modal.iphoneNativeApp');\n                deviceTypeMessage = 'iPhone Native App';\n            }\n        } else if (session.device_id.includes('android')) {\n            devicePicture = 'fa fa-android';\n            deviceTitle = localizeMessage('device_icons.android', 'Android Icon');\n            deviceTypeId = t('activity_log_modal.androidNativeClassicApp');\n            deviceTypeMessage = 'Android Native Classic App';\n\n            if (session.device_id.includes(General.PUSH_NOTIFY_ANDROID_REACT_NATIVE)) {\n                deviceTypeId = t('activity_log_modal.androidNativeApp');\n                deviceTypeMessage = 'Android Native App';\n            }\n        }\n\n        return {\n            devicePicture,\n            deviceTitle,\n            devicePlatform: (\n                <FormattedMessage\n                    id={deviceTypeId}\n                    defaultMessage={deviceTypeMessage}\n                />\n            ),\n        };\n    };\n\n    render() {\n        const {\n            index,\n            locale,\n            currentSession,\n        } = this.props;\n\n        const lastAccessTime = new Date(currentSession.last_activity_at);\n        let devicePlatform = currentSession.props.platform;\n        let devicePicture = '';\n        let deviceTitle = '';\n\n        if (currentSession.props.platform === 'Windows') {\n            devicePicture = 'fa fa-windows';\n            deviceTitle = localizeMessage('device_icons.windows', 'Windows Icon');\n        } else if (this.isMobileSession(currentSession)) {\n            const sessionInfo = this.mobileSessionInfo(currentSession);\n            devicePicture = sessionInfo.devicePicture;\n            devicePlatform = sessionInfo.devicePlatform;\n        } else if (currentSession.props.platform === 'Macintosh' ||\n            currentSession.props.platform === 'iPhone') {\n            devicePicture = 'fa fa-apple';\n            deviceTitle = localizeMessage('device_icons.apple', 'Apple Icon');\n        } else if (currentSession.props.platform === 'Linux') {\n            if (currentSession.props.os.indexOf('Android') >= 0) {\n                devicePlatform = (\n                    <FormattedMessage\n                        id='activity_log_modal.android'\n                        defaultMessage='Android'\n                    />\n                );\n                devicePicture = 'fa fa-android';\n                deviceTitle = localizeMessage('device_icons.android', 'Android Icon');\n            } else {\n                devicePicture = 'fa fa-linux';\n                deviceTitle = localizeMessage('device_icons.linux', 'Linux Icon');\n            }\n        } else if (currentSession.props.os.indexOf('Linux') !== -1) {\n            devicePicture = 'fa fa-linux';\n            deviceTitle = localizeMessage('device_icons.linux', 'Linux Icon');\n        }\n\n        if (currentSession.props.browser.indexOf('Desktop App') !== -1) {\n            devicePlatform = (\n                <FormattedMessage\n                    id='activity_log_modal.desktop'\n                    defaultMessage='Native Desktop App'\n                />\n            );\n        }\n\n        return (\n            <div\n                key={'activityLogEntryKey' + index}\n                className='activity-log__table'\n            >\n                <div className='activity-log__report'>\n                    <div className='report__platform'>\n                        <i\n                            className={devicePicture}\n                            title={deviceTitle}\n                        />{devicePlatform}\n                    </div>\n                    <div className='report__info'>\n                        <div>\n                            <FormattedMessage\n                                id='activity_log.lastActivity'\n                                defaultMessage='Last activity: {date}, {time}'\n                                values={{\n                                    date: (\n                                        <FormattedDate\n                                            value={lastAccessTime}\n                                            day='2-digit'\n                                            month={getMonthLong(locale)}\n                                            year='numeric'\n                                        />\n                                    ),\n                                    time: (\n                                        <FormattedTime\n                                            value={lastAccessTime}\n                                            hour='2-digit'\n                                            minute='2-digit'\n                                        />\n                                    ),\n                                }}\n                            />\n                        </div>\n                        <MoreInfo\n                            locale={locale}\n                            currentSession={currentSession}\n                            moreInfo={this.state.moreInfo}\n                            handleMoreInfo={this.handleMoreInfo}\n                        />\n                    </div>\n                </div>\n                <div className='activity-log__action'>\n                    <button\n                        onClick={this.submitRevoke}\n                        className='btn btn-primary'\n                    >\n                        <FormattedMessage\n                            id='activity_log.logout'\n                            defaultMessage='Logout'\n                        />\n                    </button>\n                </div>\n            </div>\n        );\n    }\n}\n","// Copyright (c) 2015-present Mattermost, Inc. All Rights Reserved.\n// See LICENSE.txt for license information.\n\nimport $ from 'jquery';\nimport PropTypes from 'prop-types';\nimport React from 'react';\nimport {Modal} from 'react-bootstrap';\nimport {FormattedMessage} from 'react-intl';\n\nimport {isMobile} from 'utils/utils.jsx';\nimport ActivityLog from 'components/activity_log_modal/components/activity_log.jsx';\nimport LoadingScreen from 'components/loading_screen.jsx';\n\nexport default class ActivityLogModal extends React.PureComponent {\n    static propTypes = {\n\n        /**\n         * The current user id\n         */\n        currentUserId: PropTypes.string.isRequired,\n\n        /**\n         * Current user's sessions\n         */\n        sessions: PropTypes.oneOfType([\n            PropTypes.array,\n            PropTypes.object,\n        ]).isRequired,\n\n        /**\n         * Current user's locale\n         */\n        locale: PropTypes.string.isRequired,\n\n        /**\n         * Function that's called when user closes the modal\n         */\n        onHide: PropTypes.func.isRequired,\n        actions: PropTypes.shape({\n\n            /**\n             * Function to refresh sessions from server\n             */\n            getSessions: PropTypes.func.isRequired,\n\n            /**\n             * Function to revoke a particular session\n             */\n            revokeSession: PropTypes.func.isRequired,\n        }).isRequired,\n    }\n\n    constructor(props) {\n        super(props);\n\n        this.state = {\n            show: true,\n        };\n    }\n\n    submitRevoke = (altId, e) => {\n        e.preventDefault();\n        var modalContent = $(e.target).closest('.modal-content');\n        modalContent.addClass('animation--highlight');\n        setTimeout(() => {\n            modalContent.removeClass('animation--highlight');\n        }, 1500);\n        this.props.actions.revokeSession(this.props.currentUserId, altId).then(() => {\n            this.props.actions.getSessions(this.props.currentUserId);\n        });\n    }\n\n    onShow = () => {\n        this.props.actions.getSessions(this.props.currentUserId);\n        if (!isMobile()) {\n            $('.modal-body').perfectScrollbar();\n        }\n    }\n\n    onHide = () => {\n        this.setState({show: false});\n    }\n\n    componentDidMount() {\n        this.onShow();\n    }\n\n    render() {\n        let content;\n        if (this.props.sessions.loading) {\n            content = <LoadingScreen/>;\n        } else {\n            const activityList = this.props.sessions.reduce((array, currentSession, index) => {\n                if (currentSession.props.type === 'UserAccessToken') {\n                    return array;\n                }\n\n                array.push(\n                    <ActivityLog\n                        key={currentSession.id}\n                        index={index}\n                        locale={this.props.locale}\n                        currentSession={currentSession}\n                        submitRevoke={this.submitRevoke}\n                    />\n                );\n                return array;\n            }, []);\n\n            content = <form role='form'>{activityList}</form>;\n        }\n\n        return (\n            <Modal\n                dialogClassName='a11y__modal modal--scroll'\n                show={this.state.show}\n                onHide={this.onHide}\n                onExited={this.props.onHide}\n                bsSize='large'\n                role='dialog'\n                aria-labelledby='activityLogModalLabel'\n            >\n                <Modal.Header closeButton={true}>\n                    <Modal.Title\n                        componentClass='h1'\n                        id='activityLogModalLabel'\n                    >\n                        <FormattedMessage\n                            id='activity_log.activeSessions'\n                            defaultMessage='Active Sessions'\n                        />\n                    </Modal.Title>\n                </Modal.Header>\n                <Modal.Body ref='modalBody'>\n                    <p className='session-help-text'>\n                        <FormattedMessage\n                            id='activity_log.sessionsDescription'\n                            defaultMessage=\"Sessions are created when you log in to a new browser on a device. Sessions let you use Mattermost without having to log in again for a time period specified by the System Admin. If you want to log out sooner, use the 'Logout' button below to end a session.\"\n                        />\n                    </p>\n                    {content}\n                </Modal.Body>\n                <Modal.Footer className='modal-footer--invisible'>\n                    <button\n                        id='closeModalButton'\n                        type='button'\n                        className='btn btn-link'\n                    >\n                        <FormattedMessage\n                            id='general_button.close'\n                            defaultMessage='Close'\n                        />\n                    </button>\n                </Modal.Footer>\n            </Modal>\n        );\n    }\n}\n","// Copyright (c) 2015-present Mattermost, Inc. All Rights Reserved.\n// See LICENSE.txt for license information.\n\nimport {connect} from 'react-redux';\nimport {bindActionCreators} from 'redux';\nimport {getSessions, revokeSession} from 'mattermost-redux/actions/users';\nimport {getCurrentUserId, getUserSessions} from 'mattermost-redux/selectors/entities/users';\n\nimport {getCurrentLocale} from 'selectors/i18n';\n\nimport ActivityLogModal from './activity_log_modal.jsx';\n\nfunction mapStateToProps(state) {\n    return {\n        currentUserId: getCurrentUserId(state),\n        sessions: getUserSessions(state),\n        locale: getCurrentLocale(state),\n    };\n}\n\nfunction mapDispatchToProps(dispatch) {\n    return {\n        actions: bindActionCreators({\n            getSessions,\n            revokeSession,\n        }, dispatch),\n    };\n}\n\nexport default connect(mapStateToProps, mapDispatchToProps)(ActivityLogModal);\n","// Copyright (c) 2015-present Mattermost, Inc. All Rights Reserved.\n// See LICENSE.txt for license information.\n\nimport PropTypes from 'prop-types';\nimport React from 'react';\nimport {FormattedMessage} from 'react-intl';\n\nimport SettingItemMax from 'components/setting_item_max.jsx';\nimport SettingItemMin from 'components/setting_item_min';\nimport {browserHistory} from 'utils/browser_history';\n\nconst SECTION_MFA = 'mfa';\n\nexport default class MfaSection extends React.PureComponent {\n    static propTypes = {\n        active: PropTypes.bool.isRequired,\n\n        // Whether or not the current user has MFA enabled\n        mfaActive: PropTypes.bool.isRequired,\n\n        // Whether or not the current user can enable MFA based on their authentication type and the server's settings\n        mfaAvailable: PropTypes.bool.isRequired,\n\n        // Whether or not this server enforces that all users have MFA\n        mfaEnforced: PropTypes.bool.isRequired,\n\n        updateSection: PropTypes.func.isRequired,\n        actions: PropTypes.shape({\n            deactivateMfa: PropTypes.func.isRequired,\n        }),\n    };\n\n    state = {\n        serverError: null,\n    };\n\n    setupMfa = (e) => {\n        e.preventDefault();\n\n        browserHistory.push('/mfa/setup');\n    };\n\n    removeMfa = async (e) => {\n        e.preventDefault();\n\n        const {error} = await this.props.actions.deactivateMfa();\n\n        if (error) {\n            this.setState({\n                serverError: error.message,\n            });\n            return;\n        }\n\n        if (this.props.mfaEnforced) {\n            browserHistory.push('/mfa/setup');\n            return;\n        }\n\n        this.props.updateSection('');\n        this.setState({\n            serverError: null,\n        });\n    };\n\n    renderTitle = () => {\n        return (\n            <FormattedMessage\n                id='user.settings.mfa.title'\n                defaultMessage='Multi-factor Authentication'\n            />\n        );\n    };\n\n    renderDescription = () => {\n        if (this.props.mfaActive) {\n            return (\n                <FormattedMessage\n                    id='user.settings.security.active'\n                    defaultMessage='Active'\n                />\n            );\n        }\n\n        return (\n            <FormattedMessage\n                id='user.settings.security.inactive'\n                defaultMessage='Inactive'\n            />\n        );\n    };\n\n    renderContent = () => {\n        let content;\n\n        if (this.props.mfaActive) {\n            let buttonText;\n\n            if (this.props.mfaEnforced) {\n                buttonText = (\n                    <FormattedMessage\n                        id='user.settings.mfa.reset'\n                        defaultMessage='Reset MFA on your account'\n                    />\n                );\n            } else {\n                buttonText = (\n                    <FormattedMessage\n                        id='user.settings.mfa.remove'\n                        defaultMessage='Remove MFA from your account'\n                    />\n                );\n            }\n\n            content = (\n                <a\n                    className='btn btn-primary'\n                    href='#'\n                    onClick={this.removeMfa}\n                >\n                    {buttonText}\n                </a>\n            );\n        } else {\n            content = (\n                <a\n                    className='btn btn-primary'\n                    href='#'\n                    onClick={this.setupMfa}\n                >\n                    <FormattedMessage\n                        id='user.settings.mfa.add'\n                        defaultMessage='Add MFA to your account'\n                    />\n                </a>\n            );\n        }\n\n        return (\n            <div className='padding-top'>\n                {content}\n                <br/>\n            </div>\n        );\n    };\n\n    renderHelpText = () => {\n        if (this.props.mfaActive) {\n            if (this.props.mfaEnforced) {\n                return (\n                    <FormattedMessage\n                        id='user.settings.mfa.requiredHelp'\n                        defaultMessage='Multi-factor authentication is required on this server. Resetting is only recommended when you need to switch code generation to a new mobile device. You will be required to set it up again immediately.'\n                    />\n                );\n            }\n\n            return (\n                <FormattedMessage\n                    id='user.settings.mfa.removeHelp'\n                    defaultMessage='Removing multi-factor authentication means you will no longer require a phone-based passcode to sign-in to your account.'\n                />\n            );\n        }\n\n        return (\n            <FormattedMessage\n                id='user.settings.mfa.addHelp'\n                defaultMessage='Adding multi-factor authentication will make your account more secure by requiring a code from your mobile phone each time you sign in.'\n            />\n        );\n    };\n\n    render() {\n        const title = this.renderTitle();\n\n        if (!this.props.mfaAvailable) {\n            return null;\n        }\n\n        if (!this.props.active) {\n            return (\n                <SettingItemMin\n                    title={title}\n                    describe={this.renderDescription()}\n                    section={SECTION_MFA}\n                    updateSection={this.props.updateSection}\n                />\n            );\n        }\n\n        return (\n            <SettingItemMax\n                title={title}\n                inputs={this.renderContent()}\n                extraInfo={this.renderHelpText()}\n                serverError={this.state.serverError}\n                updateSection={this.props.updateSection}\n                width='medium'\n            />\n        );\n    }\n}\n","// Copyright (c) 2015-present Mattermost, Inc. All Rights Reserved.\n// See LICENSE.txt for license information.\n\nimport {connect} from 'react-redux';\nimport {bindActionCreators} from 'redux';\n\nimport {getConfig, getLicense} from 'mattermost-redux/selectors/entities/general';\nimport {getCurrentUser} from 'mattermost-redux/selectors/entities/users';\n\nimport {deactivateMfa} from 'actions/views/mfa';\nimport Constants from 'utils/constants';\n\nimport MfaSection from './mfa_section';\n\nfunction mapStateToProps(state) {\n    const license = getLicense(state);\n    const config = getConfig(state);\n\n    const mfaLicensed = license && license.IsLicensed === 'true' && license.MFA === 'true';\n\n    const mfaEnabled = config.EnableMultifactorAuthentication === 'true';\n    const mfaEnforced = mfaLicensed && config.EnforceMultifactorAuthentication === 'true';\n\n    const user = getCurrentUser(state);\n\n    let mfaActive = false;\n    let mfaAvailable = false;\n    if (user) {\n        mfaActive = user.mfa_active;\n        mfaAvailable = mfaEnabled && (user.auth_service === '' || user.auth_service === Constants.LDAP_SERVICE);\n    }\n\n    return {\n        mfaActive,\n        mfaAvailable,\n        mfaEnforced,\n    };\n}\n\nfunction mapDispatchToProps(dispatch) {\n    return {\n        actions: bindActionCreators({\n            deactivateMfa,\n        }, dispatch),\n    };\n}\n\nexport default connect(mapStateToProps, mapDispatchToProps)(MfaSection);\n","// Copyright (c) 2015-present Mattermost, Inc. All Rights Reserved.\n// See LICENSE.txt for license information.\n\nimport PropTypes from 'prop-types';\nimport React from 'react';\nimport {FormattedHTMLMessage, FormattedMessage} from 'react-intl';\nimport * as UserUtils from 'mattermost-redux/utils/user_utils';\n\nimport {trackEvent} from 'actions/diagnostics_actions.jsx';\nimport Constants from 'utils/constants.jsx';\nimport {isMobile} from 'utils/user_agent.jsx';\nimport * as Utils from 'utils/utils.jsx';\nimport ConfirmModal from 'components/confirm_modal.jsx';\nimport SettingItemMax from 'components/setting_item_max.jsx';\nimport SettingItemMin from 'components/setting_item_min';\nimport SaveButton from 'components/save_button.jsx';\n\nimport FormattedMarkdownMessage from 'components/formatted_markdown_message.jsx';\nimport WarningIcon from 'components/icon/warning_icon';\n\nconst SECTION_TOKENS = 'tokens';\nconst TOKEN_CREATING = 'creating';\nconst TOKEN_CREATED = 'created';\nconst TOKEN_NOT_CREATING = 'not_creating';\n\nexport default class UserAccessTokenSection extends React.Component {\n    static propTypes = {\n        user: PropTypes.object,\n        active: PropTypes.bool,\n        updateSection: PropTypes.func,\n        userAccessTokens: PropTypes.object,\n        setRequireConfirm: PropTypes.func.isRequired,\n        actions: PropTypes.shape({\n            getUserAccessTokensForUser: PropTypes.func.isRequired,\n            createUserAccessToken: PropTypes.func.isRequired,\n            revokeUserAccessToken: PropTypes.func.isRequired,\n            enableUserAccessToken: PropTypes.func.isRequired,\n            disableUserAccessToken: PropTypes.func.isRequired,\n            clearUserAccessTokens: PropTypes.func.isRequired,\n        }).isRequired,\n    }\n\n    static defaultProps = {\n        user: {},\n        active: false,\n    }\n\n    constructor(props) {\n        super(props);\n\n        this.state = {\n            showConfirmModal: false,\n            newToken: null,\n            tokenCreationState: TOKEN_NOT_CREATING,\n            tokenError: '',\n            serverError: null,\n            saving: false,\n        };\n    }\n\n    componentDidMount() {\n        this.props.actions.clearUserAccessTokens();\n        const userId = this.props.user ? this.props.user.id : '';\n        this.props.actions.getUserAccessTokensForUser(userId, 0, 200);\n    }\n\n    UNSAFE_componentWillReceiveProps(nextProps) { // eslint-disable-line camelcase\n        if (!nextProps.active && this.props.active) {\n            this.setState({\n                showConfirmModal: false,\n                newToken: null,\n                tokenCreationState: TOKEN_NOT_CREATING,\n                tokenError: '',\n                serverError: null,\n                saving: false,\n            });\n        }\n    }\n\n    startCreatingToken = () => {\n        this.setState({tokenCreationState: TOKEN_CREATING});\n    }\n\n    stopCreatingToken = () => {\n        this.setState({tokenCreationState: TOKEN_NOT_CREATING, saving: false});\n    }\n\n    handleCreateToken = async () => {\n        this.handleCancelConfirm();\n\n        const description = this.refs.newtokendescription ? this.refs.newtokendescription.value : '';\n\n        if (description === '') {\n            this.setState({tokenError: Utils.localizeMessage('user.settings.tokens.nameRequired', 'Please enter a description.')});\n            return;\n        }\n\n        this.setState({tokenError: '', saving: true});\n        this.props.setRequireConfirm(true, this.confirmCopyToken);\n\n        const userId = this.props.user ? this.props.user.id : '';\n        const {data, error} = await this.props.actions.createUserAccessToken(userId, description);\n\n        if (data && this.state.tokenCreationState === TOKEN_CREATING) {\n            this.setState({tokenCreationState: TOKEN_CREATED, newToken: data, saving: false});\n        } else if (error) {\n            this.setState({serverError: error.message, saving: false});\n        }\n    }\n\n    confirmCopyToken = (confirmAction) => {\n        this.setState({\n            showConfirmModal: true,\n            confirmTitle: (\n                <FormattedMessage\n                    id='user.settings.tokens.confirmCopyTitle'\n                    defaultMessage='Have you copied your token?'\n                />\n            ),\n            confirmMessage: (state) => (\n                <div>\n                    <FormattedHTMLMessage\n                        id='user.settings.tokens.confirmCopyMessage'\n                        defaultMessage=\"Make sure you have copied and saved the access token below. You won't be able to see it again!\"\n                    />\n                    <br/>\n                    <br/>\n                    {state.tokenCreationState === TOKEN_CREATING ? (\n                        <div>\n                            <strong className='word-break--all'>\n                                <FormattedMessage\n                                    id='user.settings.tokens.token'\n                                    defaultMessage='Access Token: '\n                                />\n                            </strong>\n                            <FormattedMessage\n                                id='user.settings.tokens.tokenLoading'\n                                defaultMessage='Loading...'\n                            />\n                        </div>\n                    ) : (\n                        <strong className='word-break--all'>\n                            <FormattedMessage\n                                id='user.settings.tokens.token'\n                                defaultMessage='Access Token: '\n                            />\n                            {state.newToken.token}\n                        </strong>\n                    )}\n                </div>\n            ),\n            confirmButton: (\n                <FormattedMessage\n                    id='user.settings.tokens.confirmCopyButton'\n                    defaultMessage='Yes, I have copied the token'\n                />\n            ),\n            confirmComplete: () => {\n                this.handleCancelConfirm();\n                confirmAction();\n            },\n            confirmHideCancel: true,\n        });\n    }\n\n    handleCancelConfirm = () => {\n        this.setState({\n            showConfirmModal: false,\n            confirmTitle: null,\n            confirmMessage: null,\n            confirmButton: null,\n            confirmComplete: null,\n            confirmHideCancel: false,\n        });\n    }\n\n    confirmCreateToken = () => {\n        if (!UserUtils.isSystemAdmin(this.props.user.roles)) {\n            this.handleCreateToken();\n            return;\n        }\n\n        this.setState({\n            showConfirmModal: true,\n            confirmTitle: (\n                <FormattedMessage\n                    id='user.settings.tokens.confirmCreateTitle'\n                    defaultMessage='Create System Admin Personal Access Token'\n                />\n            ),\n            confirmMessage: () => (\n                <div className='alert alert-danger'>\n                    <FormattedHTMLMessage\n                        id='user.settings.tokens.confirmCreateMessage'\n                        defaultMessage='You are generating a personal access token with System Admin permissions. Are you sure want to create this token?'\n                    />\n                </div>\n            ),\n            confirmButton: (\n                <FormattedMessage\n                    id='user.settings.tokens.confirmCreateButton'\n                    defaultMessage='Yes, Create'\n                />\n            ),\n            confirmComplete: () => {\n                this.handleCreateToken();\n                trackEvent('settings', 'system_admin_create_user_access_token');\n            },\n        });\n    }\n\n    saveTokenKeyPress = (e) => {\n        if (Utils.isKeyPressed(e, Constants.KeyCodes.ENTER)) {\n            this.confirmCreateToken();\n        }\n    }\n\n    confirmRevokeToken = (tokenId) => {\n        const token = this.props.userAccessTokens[tokenId];\n\n        this.setState({\n            showConfirmModal: true,\n            confirmTitle: (\n                <FormattedMessage\n                    id='user.settings.tokens.confirmDeleteTitle'\n                    defaultMessage='Delete Token?'\n                />\n            ),\n            confirmMessage: () => (\n                <div className='alert alert-danger'>\n                    <FormattedMarkdownMessage\n                        id='user.settings.tokens.confirmDeleteMessage'\n                        defaultMessage='Any integrations using this token will no longer be able to access the Mattermost API. You cannot undo this action. \\n \\nAre you sure want to delete the **{description}** token?'\n                        values={{\n                            description: token.description,\n                        }}\n                    />\n                </div>\n            ),\n            confirmButton: (\n                <FormattedMessage\n                    id='user.settings.tokens.confirmDeleteButton'\n                    defaultMessage='Yes, Delete'\n                />\n            ),\n            confirmComplete: () => {\n                this.revokeToken(tokenId);\n                trackEvent('settings', 'revoke_user_access_token');\n            },\n        });\n    }\n\n    revokeToken = async (tokenId) => {\n        const {error} = await this.props.actions.revokeUserAccessToken(tokenId);\n        if (error) {\n            this.setState({serverError: error.message});\n        }\n        this.handleCancelConfirm();\n    }\n\n    activateToken = async (tokenId) => {\n        const {error} = await this.props.actions.enableUserAccessToken(tokenId);\n        if (error) {\n            this.setState({serverError: error.message});\n        } else {\n            trackEvent('settings', 'activate_user_access_token');\n        }\n    }\n\n    deactivateToken = async (tokenId) => {\n        const {error} = await this.props.actions.disableUserAccessToken(tokenId);\n        if (error) {\n            this.setState({serverError: error.message});\n        } else {\n            trackEvent('settings', 'deactivate_user_access_token');\n        }\n    }\n\n    render() {\n        let tokenListClass = '';\n\n        if (!this.props.active) {\n            const describe = Utils.localizeMessage('user.settings.tokens.clickToEdit', \"Click 'Edit' to manage your personal access tokens\");\n\n            return (\n                <SettingItemMin\n                    title={Utils.localizeMessage('user.settings.tokens.title', 'Personal Access Tokens')}\n                    describe={describe}\n                    section={SECTION_TOKENS}\n                    updateSection={this.props.updateSection}\n                />\n            );\n        }\n\n        const tokenList = [];\n        Object.values(this.props.userAccessTokens).forEach((token) => {\n            if (this.state.newToken && this.state.newToken.id === token.id) {\n                return;\n            }\n\n            let activeLink;\n            let activeStatus;\n\n            if (token.is_active) {\n                activeLink = (\n                    <a\n                        name={token.id + '_deactivate'}\n                        href='#'\n                        onClick={(e) => {\n                            e.preventDefault();\n                            this.deactivateToken(token.id);\n                        }}\n                    >\n                        <FormattedMessage\n                            id='user.settings.tokens.deactivate'\n                            defaultMessage='Disable'\n                        />\n                    </a>);\n            } else {\n                activeStatus = (\n                    <span className='has-error setting-box__inline-error'>\n                        <FormattedMessage\n                            id='user.settings.tokens.deactivatedWarning'\n                            defaultMessage='(Disabled)'\n                        />\n                    </span>\n                );\n                activeLink = (\n                    <a\n                        name={token.id + '_activate'}\n                        href='#'\n                        onClick={(e) => {\n                            e.preventDefault();\n                            this.activateToken(token.id);\n                        }}\n                    >\n                        <FormattedMessage\n                            id='user.settings.tokens.activate'\n                            defaultMessage='Enable'\n                        />\n                    </a>\n                );\n            }\n\n            tokenList.push(\n                <div\n                    key={token.id}\n                    className='setting-box__item'\n                >\n                    <div className='whitespace--nowrap overflow--ellipsis'>\n                        <FormattedMessage\n                            id='user.settings.tokens.tokenDesc'\n                            defaultMessage='Token Description: '\n                        />\n                        {token.description}\n                        {activeStatus}\n                    </div>\n                    <div className='setting-box__token-id whitespace--nowrap overflow--ellipsis'>\n                        <FormattedMessage\n                            id='user.settings.tokens.tokenId'\n                            defaultMessage='Token ID: '\n                        />\n                        {token.id}\n                    </div>\n                    <div>\n                        {activeLink}\n                        {' - '}\n                        <a\n                            name={token.id + '_delete'}\n                            href='#'\n                            onClick={(e) => {\n                                e.preventDefault();\n                                this.confirmRevokeToken(token.id);\n                            }}\n                        >\n                            <FormattedMessage\n                                id='user.settings.tokens.delete'\n                                defaultMessage='Delete'\n                            />\n                        </a>\n                    </div>\n                    <hr className='margin-bottom margin-top x2'/>\n                </div>\n            );\n        });\n\n        let noTokenText;\n        if (tokenList.length === 0) {\n            noTokenText = (\n                <FormattedMessage\n                    key='notokens'\n                    id='user.settings.tokens.userAccessTokensNone'\n                    defaultMessage='No personal access tokens.'\n                />\n            );\n        }\n\n        let extraInfo;\n        if (isMobile()) {\n            extraInfo = (\n                <span>\n                    <FormattedMarkdownMessage\n                        id='user.settings.tokens.description_mobile'\n                        defaultMessage='[Personal access tokens](!https://about.mattermost.com/default-user-access-tokens) function similarly to session tokens and can be used by integrations to [authenticate against the REST API](!https://about.mattermost.com/default-api-authentication). Create new tokens on your desktop.'\n                    />\n                </span>\n            );\n        } else {\n            extraInfo = (\n                <span>\n                    <FormattedMarkdownMessage\n                        id='user.settings.tokens.description'\n                        defaultMessage='[Personal access tokens](!https://about.mattermost.com/default-user-access-tokens) function similarly to session tokens and can be used by integrations to [authenticate against the REST API](!https://about.mattermost.com/default-api-authentication).'\n                    />\n                </span>\n            );\n        }\n\n        let newTokenSection;\n        if (this.state.tokenCreationState === TOKEN_CREATING) {\n            newTokenSection = (\n                <div className='padding-left x2'>\n                    <div className='row'>\n                        <label className='col-sm-auto control-label padding-right x2'>\n                            <FormattedMessage\n                                id='user.settings.tokens.name'\n                                defaultMessage='Token Description: '\n                            />\n                        </label>\n                        <div className='col-sm-5'>\n                            <input\n                                autoFocus={true}\n                                ref='newtokendescription'\n                                className='form-control'\n                                type='text'\n                                maxLength={64}\n                                onKeyPress={this.saveTokenKeyPress}\n                            />\n                        </div>\n                    </div>\n                    <div>\n                        <div className='padding-top x2'>\n                            <FormattedMessage\n                                id='user.settings.tokens.nameHelp'\n                                defaultMessage='Enter a description for your token to remember what it does.'\n                            />\n                        </div>\n                        <div>\n                            <label\n                                id='clientError'\n                                className='has-error margin-top margin-bottom'\n                            >\n                                {this.state.tokenError}\n                            </label>\n                        </div>\n                        <SaveButton\n                            btnClass='btn-primary'\n                            savingMessage={\n                                <FormattedMessage\n                                    id='user.settings.tokens.save'\n                                    defaultMessage='Save'\n                                />\n                            }\n                            saving={this.state.saving}\n                            onClick={this.confirmCreateToken}\n                        />\n                        <button\n                            className='btn btn-link'\n                            onClick={this.stopCreatingToken}\n                        >\n                            <FormattedMessage\n                                id='user.settings.tokens.cancel'\n                                defaultMessage='Cancel'\n                            />\n                        </button>\n                    </div>\n                </div>\n            );\n        } else if (this.state.tokenCreationState === TOKEN_CREATED) {\n            if (tokenList.length === 0) {\n                tokenListClass = ' hidden';\n            }\n\n            newTokenSection = (\n                <div\n                    className='alert alert-warning'\n                >\n                    <WarningIcon additionalClassName='margin-right'/>\n                    <FormattedMessage\n                        id='user.settings.tokens.copy'\n                        defaultMessage=\"Please copy the access token below. You won't be able to see it again!\"\n                    />\n                    <br/>\n                    <br/>\n                    <div className='whitespace--nowrap overflow--ellipsis'>\n                        <FormattedMessage\n                            id='user.settings.tokens.name'\n                            defaultMessage='Token Description: '\n                        />\n                        {this.state.newToken.description}\n                    </div>\n                    <div className='whitespace--nowrap overflow--ellipsis'>\n                        <FormattedMessage\n                            id='user.settings.tokens.id'\n                            defaultMessage='Token ID: '\n                        />\n                        {this.state.newToken.id}\n                    </div>\n                    <strong className='word-break--all'>\n                        <FormattedMessage\n                            id='user.settings.tokens.token'\n                            defaultMessage='Access Token: '\n                        />\n                        {this.state.newToken.token}\n                    </strong>\n                </div>\n            );\n        } else {\n            newTokenSection = (\n                <a\n                    className='btn btn-primary'\n                    href='#'\n                    onClick={this.startCreatingToken}\n                >\n                    <FormattedMessage\n                        id='user.settings.tokens.create'\n                        defaultMessage='Create New Token'\n                    />\n                </a>\n            );\n        }\n\n        const inputs = [];\n        inputs.push(\n            <div\n                key='tokensSetting'\n                className='padding-top'\n            >\n                <div key='tokenList'>\n                    <div className={'alert alert-transparent' + tokenListClass}>\n                        {tokenList}\n                        {noTokenText}\n                    </div>\n                    {newTokenSection}\n                </div>\n            </div>\n        );\n\n        return (\n            <div>\n                <SettingItemMax\n                    title={Utils.localizeMessage('user.settings.tokens.title', 'Personal Access Tokens')}\n                    inputs={inputs}\n                    extraInfo={extraInfo}\n                    infoPosition='top'\n                    serverError={this.state.serverError}\n                    updateSection={this.props.updateSection}\n                    width='full'\n                    saving={this.state.saving}\n                    cancelButtonText={\n                        <FormattedMessage\n                            id='user.settings.security.close'\n                            defaultMessage='Close'\n                        />\n                    }\n                />\n                <ConfirmModal\n                    title={this.state.confirmTitle}\n                    message={this.state.confirmMessage ? this.state.confirmMessage(this.state) : null}\n                    confirmButtonText={this.state.confirmButton}\n                    show={this.state.showConfirmModal}\n                    onConfirm={this.state.confirmComplete || (() => {})} //eslint-disable-line no-empty-function\n                    onCancel={this.handleCancelConfirm}\n                    hideCancel={this.state.confirmHideCancel}\n                />\n            </div>\n        );\n    }\n}\n","// Copyright (c) 2015-present Mattermost, Inc. All Rights Reserved.\n// See LICENSE.txt for license information.\n\nimport {connect} from 'react-redux';\nimport {bindActionCreators} from 'redux';\nimport {clearUserAccessTokens, createUserAccessToken, getUserAccessTokensForUser, revokeUserAccessToken, enableUserAccessToken, disableUserAccessToken} from 'mattermost-redux/actions/users';\n\nimport UserAccessTokenSection from './user_access_token_section.jsx';\n\nfunction mapStateToProps(state) {\n    return {\n        userAccessTokens: state.entities.users.myUserAccessTokens,\n    };\n}\n\nfunction mapDispatchToProps(dispatch) {\n    return {\n        actions: bindActionCreators({\n            getUserAccessTokensForUser,\n            createUserAccessToken,\n            revokeUserAccessToken,\n            enableUserAccessToken,\n            disableUserAccessToken,\n            clearUserAccessTokens,\n        }, dispatch),\n    };\n}\n\nexport default connect(mapStateToProps, mapDispatchToProps)(UserAccessTokenSection);\n","// Copyright (c) 2015-present Mattermost, Inc. All Rights Reserved.\n// See LICENSE.txt for license information.\n\nimport PropTypes from 'prop-types';\nimport React from 'react';\nimport {FormattedDate, FormattedMessage, FormattedTime} from 'react-intl';\nimport {Link} from 'react-router-dom';\n\nimport Constants from 'utils/constants.jsx';\nimport * as Utils from 'utils/utils.jsx';\nimport icon50 from 'images/icon50x50.png';\nimport AccessHistoryModal from 'components/access_history_modal';\nimport ActivityLogModal from 'components/activity_log_modal';\nimport SettingItemMax from 'components/setting_item_max.jsx';\nimport SettingItemMin from 'components/setting_item_min';\nimport ToggleModalButton from 'components/toggle_modal_button.jsx';\n\nimport MfaSection from './mfa_section';\nimport UserAccessTokenSection from './user_access_token_section';\n\nconst SECTION_MFA = 'mfa';\nconst SECTION_PASSWORD = 'password';\nconst SECTION_SIGNIN = 'signin';\nconst SECTION_APPS = 'apps';\nconst SECTION_TOKENS = 'tokens';\n\nexport default class SecurityTab extends React.PureComponent {\n    static propTypes = {\n        user: PropTypes.object,\n        activeSection: PropTypes.string,\n        updateSection: PropTypes.func,\n        closeModal: PropTypes.func.isRequired,\n        collapseModal: PropTypes.func.isRequired,\n        setRequireConfirm: PropTypes.func.isRequired,\n\n        /*\n         * Set if access tokens are enabled and this user can use them\n         */\n        canUseAccessTokens: PropTypes.bool,\n\n        // Whether or not OAuth applications are enabled.\n        enableOAuthServiceProvider: PropTypes.bool,\n\n        // Whether or not sign-up with email is enabled.\n        enableSignUpWithEmail: PropTypes.bool,\n\n        // Whether or not sign-up with GitLab is enabled.\n        enableSignUpWithGitLab: PropTypes.bool,\n\n        // Whether or not sign-up with Google is enabled.\n        enableSignUpWithGoogle: PropTypes.bool,\n\n        // Whether or not sign-up with LDAP is enabled.\n        enableLdap: PropTypes.bool,\n\n        // Whether or not sign-up with SAML is enabled.\n        enableSaml: PropTypes.bool,\n\n        // Whether or not sign-up with Office 365 is enabled.\n        enableSignUpWithOffice365: PropTypes.bool,\n\n        // Whether or not the experimental authentication transfer is enabled.\n        experimentalEnableAuthenticationTransfer: PropTypes.bool,\n\n        passwordConfig: PropTypes.object,\n        militaryTime: PropTypes.bool,\n\n        actions: PropTypes.shape({\n            getMe: PropTypes.func.isRequired,\n            updateUserPassword: PropTypes.func.isRequired,\n            getAuthorizedOAuthApps: PropTypes.func.isRequired,\n            deauthorizeOAuthApp: PropTypes.func.isRequired,\n        }).isRequired,\n    }\n\n    static defaultProps = {\n        user: {},\n        activeSection: '',\n    };\n\n    constructor(props) {\n        super(props);\n\n        this.state = this.getDefaultState();\n    }\n\n    getDefaultState() {\n        return {\n            currentPassword: '',\n            newPassword: '',\n            confirmPassword: '',\n            passwordError: '',\n            serverError: '',\n            tokenError: '',\n            authService: this.props.user.auth_service,\n            savingPassword: false,\n        };\n    }\n\n    componentDidMount() {\n        if (this.props.enableOAuthServiceProvider) {\n            this.loadAuthorizedOAuthApps();\n        }\n    }\n\n    loadAuthorizedOAuthApps = async () => {\n        const {data, error} = await this.props.actions.getAuthorizedOAuthApps();\n        if (data) {\n            this.setState({authorizedApps: data, serverError: null}); //eslint-disable-line react/no-did-mount-set-state\n        } else if (error) {\n            this.setState({serverError: error.message}); //eslint-disable-line react/no-did-mount-set-state\n        }\n    }\n\n    submitPassword = async () => {\n        const user = this.props.user;\n        const currentPassword = this.state.currentPassword;\n        const newPassword = this.state.newPassword;\n        const confirmPassword = this.state.confirmPassword;\n\n        if (currentPassword === '') {\n            this.setState({passwordError: Utils.localizeMessage('user.settings.security.currentPasswordError', 'Please enter your current password.'), serverError: ''});\n            return;\n        }\n\n        const {valid, error} = Utils.isValidPassword(newPassword, this.props.passwordConfig);\n        if (!valid && error) {\n            this.setState({\n                passwordError: error,\n                serverError: '',\n            });\n            return;\n        }\n\n        if (newPassword !== confirmPassword) {\n            const defaultState = Object.assign(this.getDefaultState(), {passwordError: Utils.localizeMessage('user.settings.security.passwordMatchError', 'The new passwords you entered do not match.'), serverError: ''});\n            this.setState(defaultState);\n            return;\n        }\n\n        this.setState({savingPassword: true});\n\n        const {data, error: err} = await this.props.actions.updateUserPassword(\n            user.id,\n            currentPassword,\n            newPassword\n        );\n        if (data) {\n            this.props.updateSection('');\n            this.props.actions.getMe();\n            this.setState(this.getDefaultState());\n        } else if (err) {\n            const state = this.getDefaultState();\n            if (err.message) {\n                state.serverError = err.message;\n            } else {\n                state.serverError = err;\n            }\n            state.passwordError = '';\n            this.setState(state);\n        }\n    }\n\n    updateCurrentPassword = (e) => {\n        this.setState({currentPassword: e.target.value});\n    }\n\n    updateNewPassword = (e) => {\n        this.setState({newPassword: e.target.value});\n    }\n\n    updateConfirmPassword = (e) => {\n        this.setState({confirmPassword: e.target.value});\n    }\n\n    deauthorizeApp = async (e) => {\n        e.preventDefault();\n\n        const appId = e.currentTarget.getAttribute('data-app');\n\n        const {data, error} = await this.props.actions.deauthorizeOAuthApp(appId);\n        if (data) {\n            const authorizedApps = this.state.authorizedApps.filter((app) => {\n                return app.id !== appId;\n            });\n            this.setState({authorizedApps, serverError: null});\n        } else if (error) {\n            this.setState({serverError: error.message});\n        }\n    }\n\n    handleUpdateSection = (section) => {\n        if (section) {\n            this.props.updateSection(section);\n        } else {\n            switch (this.props.activeSection) {\n            case SECTION_MFA:\n            case SECTION_SIGNIN:\n            case SECTION_TOKENS:\n            case SECTION_APPS:\n                this.setState({\n                    serverError: null,\n                });\n                break;\n            case SECTION_PASSWORD:\n                this.setState({\n                    currentPassword: '',\n                    newPassword: '',\n                    confirmPassword: '',\n                    serverError: null,\n                    passwordError: null,\n                });\n                break;\n            default:\n            }\n\n            this.props.updateSection('');\n        }\n    }\n\n    createPasswordSection = () => {\n        if (this.props.activeSection === SECTION_PASSWORD) {\n            const inputs = [];\n            let submit;\n\n            if (this.props.user.auth_service === '') {\n                submit = this.submitPassword;\n\n                inputs.push(\n                    <div\n                        key='currentPasswordUpdateForm'\n                        className='form-group'\n                    >\n                        <label className='col-sm-5 control-label'>\n                            <FormattedMessage\n                                id='user.settings.security.currentPassword'\n                                defaultMessage='Current Password'\n                            />\n                        </label>\n                        <div className='col-sm-7'>\n                            <input\n                                id='currentPassword'\n                                autoFocus={true}\n                                className='form-control'\n                                type='password'\n                                onChange={this.updateCurrentPassword}\n                                value={this.state.currentPassword}\n                                aria-label={Utils.localizeMessage('user.settings.security.currentPassword', 'Current Password')}\n                            />\n                        </div>\n                    </div>\n                );\n                inputs.push(\n                    <div\n                        key='newPasswordUpdateForm'\n                        className='form-group'\n                    >\n                        <label className='col-sm-5 control-label'>\n                            <FormattedMessage\n                                id='user.settings.security.newPassword'\n                                defaultMessage='New Password'\n                            />\n                        </label>\n                        <div className='col-sm-7'>\n                            <input\n                                id='newPassword'\n                                className='form-control'\n                                type='password'\n                                onChange={this.updateNewPassword}\n                                value={this.state.newPassword}\n                                aria-label={Utils.localizeMessage('user.settings.security.newPassword', 'New Password')}\n                            />\n                        </div>\n                    </div>\n                );\n                inputs.push(\n                    <div\n                        key='retypeNewPasswordUpdateForm'\n                        className='form-group'\n                    >\n                        <label className='col-sm-5 control-label'>\n                            <FormattedMessage\n                                id='user.settings.security.retypePassword'\n                                defaultMessage='Retype New Password'\n                            />\n                        </label>\n                        <div className='col-sm-7'>\n                            <input\n                                id='confirmPassword'\n                                className='form-control'\n                                type='password'\n                                onChange={this.updateConfirmPassword}\n                                value={this.state.confirmPassword}\n                                aria-label={Utils.localizeMessage('user.settings.security.retypePassword', 'Retype New Password')}\n                            />\n                        </div>\n                    </div>\n                );\n            } else if (this.props.user.auth_service === Constants.GITLAB_SERVICE) {\n                inputs.push(\n                    <div\n                        key='oauthEmailInfo'\n                        className='form-group'\n                    >\n                        <div className='padding-bottom x2'>\n                            <FormattedMessage\n                                id='user.settings.security.passwordGitlabCantUpdate'\n                                defaultMessage='Login occurs through GitLab. Password cannot be updated.'\n                            />\n                        </div>\n                    </div>\n                );\n            } else if (this.props.user.auth_service === Constants.LDAP_SERVICE) {\n                inputs.push(\n                    <div\n                        key='oauthEmailInfo'\n                        className='form-group'\n                    >\n                        <div className='padding-bottom x2'>\n                            <FormattedMessage\n                                id='user.settings.security.passwordLdapCantUpdate'\n                                defaultMessage='Login occurs through AD/LDAP. Password cannot be updated.'\n                            />\n                        </div>\n                    </div>\n                );\n            } else if (this.props.user.auth_service === Constants.SAML_SERVICE) {\n                inputs.push(\n                    <div\n                        key='oauthEmailInfo'\n                        className='form-group'\n                    >\n                        <div className='padding-bottom x2'>\n                            <FormattedMessage\n                                id='user.settings.security.passwordSamlCantUpdate'\n                                defaultMessage='This field is handled through your login provider. If you want to change it, you need to do so through your login provider.'\n                            />\n                        </div>\n                    </div>\n                );\n            } else if (this.props.user.auth_service === Constants.GOOGLE_SERVICE) {\n                inputs.push(\n                    <div\n                        key='oauthEmailInfo'\n                        className='form-group'\n                    >\n                        <div className='padding-bottom x2'>\n                            <FormattedMessage\n                                id='user.settings.security.passwordGoogleCantUpdate'\n                                defaultMessage='Login occurs through Google Apps. Password cannot be updated.'\n                            />\n                        </div>\n                    </div>\n                );\n            } else if (this.props.user.auth_service === Constants.OFFICE365_SERVICE) {\n                inputs.push(\n                    <div\n                        key='oauthEmailInfo'\n                        className='form-group'\n                    >\n                        <div className='padding-bottom x2'>\n                            <FormattedMessage\n                                id='user.settings.security.passwordOffice365CantUpdate'\n                                defaultMessage='Login occurs through Office 365. Password cannot be updated.'\n                            />\n                        </div>\n                    </div>\n                );\n            }\n\n            return (\n                <SettingItemMax\n                    title={\n                        <FormattedMessage\n                            id='user.settings.security.password'\n                            defaultMessage='Password'\n                        />\n                    }\n                    inputs={inputs}\n                    submit={submit}\n                    saving={this.state.savingPassword}\n                    serverError={this.state.serverError}\n                    clientError={this.state.passwordError}\n                    updateSection={this.handleUpdateSection}\n                />\n            );\n        }\n\n        let describe;\n\n        if (this.props.user.auth_service === '') {\n            const d = new Date(this.props.user.last_password_update);\n\n            describe = (\n                <FormattedMessage\n                    id='user.settings.security.lastUpdated'\n                    defaultMessage='Last updated {date} at {time}'\n                    values={{\n                        date: (\n                            <FormattedDate\n                                value={d}\n                                day='2-digit'\n                                month='short'\n                                year='numeric'\n                            />\n                        ),\n                        time: (\n                            <FormattedTime\n                                value={d}\n                                hour12={!this.props.militaryTime}\n                                hour='2-digit'\n                                minute='2-digit'\n                            />\n                        ),\n                    }}\n                />\n            );\n        } else if (this.props.user.auth_service === Constants.GITLAB_SERVICE) {\n            describe = (\n                <FormattedMessage\n                    id='user.settings.security.loginGitlab'\n                    defaultMessage='Login done through GitLab'\n                />\n            );\n        } else if (this.props.user.auth_service === Constants.LDAP_SERVICE) {\n            describe = (\n                <FormattedMessage\n                    id='user.settings.security.loginLdap'\n                    defaultMessage='Login done through AD/LDAP'\n                />\n            );\n        } else if (this.props.user.auth_service === Constants.SAML_SERVICE) {\n            describe = (\n                <FormattedMessage\n                    id='user.settings.security.loginSaml'\n                    defaultMessage='Login done through SAML'\n                />\n            );\n        } else if (this.props.user.auth_service === Constants.GOOGLE_SERVICE) {\n            describe = (\n                <FormattedMessage\n                    id='user.settings.security.loginGoogle'\n                    defaultMessage='Login done through Google Apps'\n                />\n            );\n        } else if (this.props.user.auth_service === Constants.OFFICE365_SERVICE) {\n            describe = (\n                <FormattedMessage\n                    id='user.settings.security.loginOffice365'\n                    defaultMessage='Login done through Office 365'\n                />\n            );\n        }\n\n        return (\n            <SettingItemMin\n                title={\n                    <FormattedMessage\n                        id='user.settings.security.password'\n                        defaultMessage='Password'\n                    />\n                }\n                describe={describe}\n                section={SECTION_PASSWORD}\n                updateSection={this.handleUpdateSection}\n                focused={true}\n            />\n        );\n    }\n\n    createSignInSection = () => {\n        const user = this.props.user;\n\n        if (this.props.activeSection === SECTION_SIGNIN) {\n            let emailOption;\n            let gitlabOption;\n            let googleOption;\n            let office365Option;\n            let ldapOption;\n            let samlOption;\n\n            if (user.auth_service === '') {\n                if (this.props.enableSignUpWithGitLab) {\n                    gitlabOption = (\n                        <div className='padding-bottom x2'>\n                            <Link\n                                className='btn btn-primary'\n                                to={'/claim/email_to_oauth?email=' + encodeURIComponent(user.email) + '&old_type=' + user.auth_service + '&new_type=' + Constants.GITLAB_SERVICE}\n                            >\n                                <FormattedMessage\n                                    id='user.settings.security.switchGitlab'\n                                    defaultMessage='Switch to using GitLab SSO'\n                                />\n                            </Link>\n                            <br/>\n                        </div>\n                    );\n                }\n\n                if (this.props.enableSignUpWithGoogle) {\n                    googleOption = (\n                        <div className='padding-bottom x2'>\n                            <Link\n                                className='btn btn-primary'\n                                to={'/claim/email_to_oauth?email=' + encodeURIComponent(user.email) + '&old_type=' + user.auth_service + '&new_type=' + Constants.GOOGLE_SERVICE}\n                            >\n                                <FormattedMessage\n                                    id='user.settings.security.switchGoogle'\n                                    defaultMessage='Switch to using Google SSO'\n                                />\n                            </Link>\n                            <br/>\n                        </div>\n                    );\n                }\n\n                if (this.props.enableSignUpWithOffice365) {\n                    office365Option = (\n                        <div className='padding-bottom x2'>\n                            <Link\n                                className='btn btn-primary'\n                                to={'/claim/email_to_oauth?email=' + encodeURIComponent(user.email) + '&old_type=' + user.auth_service + '&new_type=' + Constants.OFFICE365_SERVICE}\n                            >\n                                <FormattedMessage\n                                    id='user.settings.security.switchOffice365'\n                                    defaultMessage='Switch to using Office 365 SSO'\n                                />\n                            </Link>\n                            <br/>\n                        </div>\n                    );\n                }\n\n                if (this.props.enableLdap) {\n                    ldapOption = (\n                        <div className='padding-bottom x2'>\n                            <Link\n                                className='btn btn-primary'\n                                to={'/claim/email_to_ldap?email=' + encodeURIComponent(user.email)}\n                            >\n                                <FormattedMessage\n                                    id='user.settings.security.switchLdap'\n                                    defaultMessage='Switch to using AD/LDAP'\n                                />\n                            </Link>\n                            <br/>\n                        </div>\n                    );\n                }\n\n                if (this.props.enableSaml) {\n                    samlOption = (\n                        <div className='padding-bottom x2'>\n                            <Link\n                                className='btn btn-primary'\n                                to={'/claim/email_to_oauth?email=' + encodeURIComponent(user.email) + '&old_type=' + user.auth_service + '&new_type=' + Constants.SAML_SERVICE}\n                            >\n                                <FormattedMessage\n                                    id='user.settings.security.switchSaml'\n                                    defaultMessage='Switch to using SAML SSO'\n                                />\n                            </Link>\n                            <br/>\n                        </div>\n                    );\n                }\n            } else if (this.props.enableSignUpWithEmail) {\n                let link;\n                if (user.auth_service === Constants.LDAP_SERVICE) {\n                    link = '/claim/ldap_to_email?email=' + encodeURIComponent(user.email);\n                } else {\n                    link = '/claim/oauth_to_email?email=' + encodeURIComponent(user.email) + '&old_type=' + user.auth_service;\n                }\n\n                emailOption = (\n                    <div className='padding-bottom x2'>\n                        <Link\n                            className='btn btn-primary'\n                            to={link}\n                        >\n                            <FormattedMessage\n                                id='user.settings.security.switchEmail'\n                                defaultMessage='Switch to using email and password'\n                            />\n                        </Link>\n                        <br/>\n                    </div>\n                );\n            }\n\n            const inputs = [];\n            inputs.push(\n                <div key='userSignInOption'>\n                    {emailOption}\n                    {gitlabOption}\n                    {googleOption}\n                    {office365Option}\n                    {ldapOption}\n                    {samlOption}\n                </div>\n            );\n\n            const extraInfo = (\n                <span>\n                    <FormattedMessage\n                        id='user.settings.security.oneSignin'\n                        defaultMessage='You may only have one sign-in method at a time. Switching sign-in method will send an email notifying you if the change was successful.'\n                    />\n                </span>\n            );\n\n            return (\n                <SettingItemMax\n                    title={Utils.localizeMessage('user.settings.security.method', 'Sign-in Method')}\n                    extraInfo={extraInfo}\n                    inputs={inputs}\n                    serverError={this.state.serverError}\n                    updateSection={this.handleUpdateSection}\n                />\n            );\n        }\n\n        let describe = (\n            <FormattedMessage\n                id='user.settings.security.emailPwd'\n                defaultMessage='Email and Password'\n            />\n        );\n        if (this.props.user.auth_service === Constants.GITLAB_SERVICE) {\n            describe = (\n                <FormattedMessage\n                    id='user.settings.security.gitlab'\n                    defaultMessage='GitLab'\n                />\n            );\n        } else if (this.props.user.auth_service === Constants.GOOGLE_SERVICE) {\n            describe = (\n                <FormattedMessage\n                    id='user.settings.security.google'\n                    defaultMessage='Google'\n                />\n            );\n        } else if (this.props.user.auth_service === Constants.OFFICE365_SERVICE) {\n            describe = (\n                <FormattedMessage\n                    id='user.settings.security.office365'\n                    defaultMessage='Office 365'\n                />\n            );\n        } else if (this.props.user.auth_service === Constants.LDAP_SERVICE) {\n            describe = (\n                <FormattedMessage\n                    id='user.settings.security.ldap'\n                    defaultMessage='AD/LDAP'\n                />\n            );\n        } else if (this.props.user.auth_service === Constants.SAML_SERVICE) {\n            describe = (\n                <FormattedMessage\n                    id='user.settings.security.saml'\n                    defaultMessage='SAML'\n                />\n            );\n        }\n\n        return (\n            <SettingItemMin\n                title={Utils.localizeMessage('user.settings.security.method', 'Sign-in Method')}\n                describe={describe}\n                section={SECTION_SIGNIN}\n                updateSection={this.handleUpdateSection}\n            />\n        );\n    }\n\n    createOAuthAppsSection = () => {\n        if (this.props.activeSection === SECTION_APPS) {\n            let apps;\n            if (this.state.authorizedApps && this.state.authorizedApps.length > 0) {\n                apps = this.state.authorizedApps.map((app) => {\n                    const homepage = (\n                        <a\n                            href={app.homepage}\n                            target='_blank'\n                            rel='noopener noreferrer'\n                        >\n                            {app.homepage}\n                        </a>\n                    );\n\n                    return (\n                        <div\n                            key={app.id}\n                            className='padding-bottom x2 authorized-app'\n                        >\n                            <div className='col-sm-10'>\n                                <div className='authorized-app__name'>\n                                    {app.name}\n                                    <span className='authorized-app__url'>\n                                        {' -'} {homepage}\n                                    </span>\n                                </div>\n                                <div className='authorized-app__description'>{app.description}</div>\n                                <div className='authorized-app__deauthorize'>\n                                    <a\n                                        href='#'\n                                        data-app={app.id}\n                                        onClick={this.deauthorizeApp}\n                                    >\n                                        <FormattedMessage\n                                            id='user.settings.security.deauthorize'\n                                            defaultMessage='Deauthorize'\n                                        />\n                                    </a>\n                                </div>\n                            </div>\n                            <div className='col-sm-2 pull-right'>\n                                <img\n                                    alt={app.name}\n                                    src={app.icon_url || icon50}\n                                />\n                            </div>\n                            <br/>\n                        </div>\n                    );\n                });\n            } else {\n                apps = (\n                    <div className='padding-bottom x2 authorized-app'>\n                        <div className='setting-list__hint'>\n                            <FormattedMessage\n                                id='user.settings.security.noApps'\n                                defaultMessage='No OAuth 2.0 Applications are authorized.'\n                            />\n                        </div>\n                    </div>\n                );\n            }\n\n            const inputs = [];\n            let wrapperClass;\n            let helpText;\n            if (Array.isArray(apps)) {\n                wrapperClass = 'authorized-apps__wrapper';\n\n                helpText = (\n                    <div className='authorized-apps__help'>\n                        <FormattedMessage\n                            id='user.settings.security.oauthAppsHelp'\n                            defaultMessage='Applications act on your behalf to access your data based on the permissions you grant them.'\n                        />\n                    </div>\n                );\n            }\n\n            inputs.push(\n                <div\n                    className={wrapperClass}\n                    key='authorizedApps'\n                >\n                    {apps}\n                </div>\n            );\n\n            const title = (\n                <div>\n                    <FormattedMessage\n                        id='user.settings.security.oauthApps'\n                        defaultMessage='OAuth 2.0 Applications'\n                    />\n                    {helpText}\n                </div>\n            );\n\n            return (\n                <SettingItemMax\n                    title={title}\n                    inputs={inputs}\n                    serverError={this.state.serverError}\n                    updateSection={this.handleUpdateSection}\n                    width='full'\n                    cancelButtonText={\n                        <FormattedMessage\n                            id='user.settings.security.close'\n                            defaultMessage='Close'\n                        />\n                    }\n                />\n            );\n        }\n\n        return (\n            <SettingItemMin\n                title={Utils.localizeMessage('user.settings.security.oauthApps', 'OAuth 2.0 Applications')}\n                describe={\n                    <FormattedMessage\n                        id='user.settings.security.oauthAppsDescription'\n                        defaultMessage=\"Click 'Edit' to manage your OAuth 2.0 Applications\"\n                    />\n                }\n                section={SECTION_APPS}\n                updateSection={this.handleUpdateSection}\n            />\n        );\n    }\n\n    render() {\n        const user = this.props.user;\n\n        const passwordSection = this.createPasswordSection();\n\n        let numMethods = 0;\n        numMethods = this.props.enableSignUpWithGitLab ? numMethods + 1 : numMethods;\n        numMethods = this.props.enableSignUpWithGoogle ? numMethods + 1 : numMethods;\n        numMethods = this.props.enableSignUpWithOffice365 ? numMethods + 1 : numMethods;\n        numMethods = this.props.enableLdap ? numMethods + 1 : numMethods;\n        numMethods = this.props.enableSaml ? numMethods + 1 : numMethods;\n\n        // If there are other sign-in methods and either email is enabled or the user's account is email, then allow switching\n        let signInSection;\n        if ((this.props.enableSignUpWithEmail || user.auth_service === '') &&\n            numMethods > 0 && this.props.experimentalEnableAuthenticationTransfer) {\n            signInSection = this.createSignInSection();\n        }\n\n        let oauthSection;\n        if (this.props.enableOAuthServiceProvider) {\n            oauthSection = this.createOAuthAppsSection();\n        }\n\n        let tokensSection;\n        if (this.props.canUseAccessTokens) {\n            tokensSection = (\n                <UserAccessTokenSection\n                    user={this.props.user}\n                    active={this.props.activeSection === SECTION_TOKENS}\n                    updateSection={this.handleUpdateSection}\n                    setRequireConfirm={this.props.setRequireConfirm}\n                />\n            );\n        }\n\n        return (\n            <div>\n                <div className='modal-header'>\n                    <FormattedMessage\n                        id='user.settings.security.close'\n                        defaultMessage='Close'\n                    >\n                        {(ariaLabel) => (\n                            <button\n                                type='button'\n                                className='close'\n                                data-dismiss='modal'\n                                aria-label={ariaLabel}\n                                onClick={this.props.closeModal}\n                            >\n                                <span aria-hidden='true'>{'×'}</span>\n                            </button>\n                        )}\n                    </FormattedMessage>\n                    <h4\n                        className='modal-title'\n                        ref='title'\n                    >\n                        <div className='modal-back'>\n                            <FormattedMessage\n                                id='generic_icons.collapse'\n                                defaultMessage='Collapse Icon'\n                            >\n                                {(title) => (\n                                    <i\n                                        className='fa fa-angle-left'\n                                        title={title}\n                                        onClick={this.props.collapseModal}\n                                    />\n                                )}\n                            </FormattedMessage>\n                        </div>\n                        <FormattedMessage\n                            id='user.settings.security.title'\n                            defaultMessage='Security Settings'\n                        />\n                    </h4>\n                </div>\n                <div className='user-settings'>\n                    <h3 className='tab-header'>\n                        <FormattedMessage\n                            id='user.settings.security.title'\n                            defaultMessage='Security Settings'\n                        />\n                    </h3>\n                    <div className='divider-dark first'/>\n                    {passwordSection}\n                    <div className='divider-light'/>\n                    <MfaSection\n                        active={this.props.activeSection === SECTION_MFA}\n                        updateSection={this.handleUpdateSection}\n                    />\n                    <div className='divider-light'/>\n                    {oauthSection}\n                    <div className='divider-light'/>\n                    {tokensSection}\n                    <div className='divider-light'/>\n                    {signInSection}\n                    <div className='divider-dark'/>\n                    <br/>\n                    <ToggleModalButton\n                        className='security-links color--link'\n                        dialogType={AccessHistoryModal}\n                    >\n                        <FormattedMessage\n                            id='user.settings.security.viewHistory.icon'\n                            defaultMessage='Access History Icon'\n                        >\n                            {(title) => (\n                                <i\n                                    className='fa fa-clock-o'\n                                    title={title}\n                                />\n                            )}\n                        </FormattedMessage>\n                        <FormattedMessage\n                            id='user.settings.security.viewHistory'\n                            defaultMessage='View Access History'\n                        />\n                    </ToggleModalButton>\n                    <ToggleModalButton\n                        className='security-links color--link margin-top'\n                        dialogType={ActivityLogModal}\n                    >\n                        <FormattedMessage\n                            id='user.settings.security.logoutActiveSessions.icon'\n                            defaultMessage='Active Sessions Icon'\n                        >\n                            {(title) => (\n                                <i\n                                    className='fa fa-clock-o'\n                                    title={title}\n                                />\n                            )}\n                        </FormattedMessage>\n                        <FormattedMessage\n                            id='user.settings.security.logoutActiveSessions'\n                            defaultMessage='View and Logout of Active Sessions'\n                        />\n                    </ToggleModalButton>\n                </div>\n            </div>\n        );\n    }\n}\n","// Copyright (c) 2015-present Mattermost, Inc. All Rights Reserved.\n// See LICENSE.txt for license information.\n\nimport {connect} from 'react-redux';\nimport {bindActionCreators} from 'redux';\nimport {getMe, updateUserPassword} from 'mattermost-redux/actions/users';\nimport {getAuthorizedOAuthApps, deauthorizeOAuthApp} from 'mattermost-redux/actions/integrations';\nimport * as UserUtils from 'mattermost-redux/utils/user_utils';\nimport {getConfig} from 'mattermost-redux/selectors/entities/general';\nimport {getBool} from 'mattermost-redux/selectors/entities/preferences';\n\nimport {getPasswordConfig} from 'utils/utils.jsx';\nimport {Preferences} from 'utils/constants';\n\nimport SecurityTab from './user_settings_security.jsx';\n\nfunction mapStateToProps(state, ownProps) {\n    const config = getConfig(state);\n\n    const tokensEnabled = config.EnableUserAccessTokens === 'true';\n    const userHasTokenRole = UserUtils.hasUserAccessTokenRole(ownProps.user.roles) || UserUtils.isSystemAdmin(ownProps.user.roles);\n\n    const enableOAuthServiceProvider = config.EnableOAuthServiceProvider === 'true';\n    const enableSignUpWithEmail = config.EnableSignUpWithEmail === 'true';\n    const enableSignUpWithGitLab = config.EnableSignUpWithGitLab === 'true';\n    const enableSignUpWithGoogle = config.EnableSignUpWithGoogle === 'true';\n    const enableLdap = config.EnableLdap === 'true';\n    const enableSaml = config.EnableSaml === 'true';\n    const enableSignUpWithOffice365 = config.EnableSignUpWithOffice365 === 'true';\n    const experimentalEnableAuthenticationTransfer = config.ExperimentalEnableAuthenticationTransfer === 'true';\n\n    return {\n        canUseAccessTokens: tokensEnabled && userHasTokenRole,\n        enableOAuthServiceProvider,\n        enableSignUpWithEmail,\n        enableSignUpWithGitLab,\n        enableSignUpWithGoogle,\n        enableLdap,\n        enableSaml,\n        enableSignUpWithOffice365,\n        experimentalEnableAuthenticationTransfer,\n        passwordConfig: getPasswordConfig(config),\n        militaryTime: getBool(state, Preferences.CATEGORY_DISPLAY_SETTINGS, Preferences.USE_MILITARY_TIME, false),\n    };\n}\n\nfunction mapDispatchToProps(dispatch) {\n    return {\n        actions: bindActionCreators({\n            getMe,\n            updateUserPassword,\n            getAuthorizedOAuthApps,\n            deauthorizeOAuthApp,\n        }, dispatch),\n    };\n}\n\nexport default connect(mapStateToProps, mapDispatchToProps)(SecurityTab);\n","// Copyright (c) 2015-present Mattermost, Inc. All Rights Reserved.\n// See LICENSE.txt for license information.\n\nimport PropTypes from 'prop-types';\nimport React from 'react';\nimport {FormattedMessage, intlShape} from 'react-intl';\n\nimport {trackEvent} from 'actions/diagnostics_actions.jsx';\n\nimport Constants from 'utils/constants.jsx';\nimport {isMac} from 'utils/utils.jsx';\nimport {t} from 'utils/i18n';\n\nimport SettingItemMax from 'components/setting_item_max.jsx';\nimport SettingItemMin from 'components/setting_item_min';\n\nexport default class UserSettingsSidebar extends React.Component {\n    static propTypes = {\n        actions: PropTypes.shape({\n\n            /*\n             * Function to save the user's preferences\n             */\n            savePreferences: PropTypes.func.isRequired,\n        }).isRequired,\n\n        /**\n         * Current user object\n         */\n        user: PropTypes.object,\n\n        /**\n         * The preferences for closing the unused direct messages channels\n         */\n        closeUnusedDirectMessages: PropTypes.string.isRequired,\n\n        /**\n         * Display the close unused direct messages channels options\n         */\n        showUnusedOption: PropTypes.bool.isRequired,\n\n        /**\n         * Display the channel grouping and sorting sections options\n         */\n        showChannelOrganization: PropTypes.bool.isRequired,\n\n        /**\n         * The preferences to show the channel switcher in the sidebar\n         */\n        channelSwitcherOption: PropTypes.string.isRequired,\n\n        /**\n         * Display the unread channels sections options\n         * The preferences to display channels in sidebar\n         */\n        sidebarPreference: PropTypes.shape({\n\n            /**\n             * Group channels by type or none\n             */\n            grouping: PropTypes.string.isRequired,\n\n            /**\n             * Sort channels by recency or alphabetical order\n             */\n            sorting: PropTypes.string.isRequired,\n        }).isRequired,\n\n        /**\n         * Option for including unread channels at top\n         */\n        unreadsAtTop: PropTypes.string.isRequired,\n\n        /**\n         * Option for including favorite channels at top\n         */\n        favoriteAtTop: PropTypes.string.isRequired,\n\n        updateSection: PropTypes.func,\n        activeSection: PropTypes.string,\n        closeModal: PropTypes.func.isRequired,\n        collapseModal: PropTypes.func.isRequired,\n    };\n\n    static contextTypes = {\n        intl: intlShape.isRequired,\n    };\n\n    constructor(props) {\n        super(props);\n\n        this.state = this.getStateFromProps();\n    }\n\n    getStateFromProps = () => {\n        const {\n            closeUnusedDirectMessages,\n            channelSwitcherOption,\n            sidebarPreference: {\n                grouping,\n                sorting,\n            },\n            unreadsAtTop,\n            favoriteAtTop,\n        } = this.props;\n\n        return {\n            settings: {\n                close_unused_direct_messages: closeUnusedDirectMessages,\n                channel_switcher_section: channelSwitcherOption,\n                grouping,\n                unreadsAtTop,\n                favoriteAtTop,\n                sorting,\n            },\n            isSaving: false,\n        };\n    };\n\n    trackSettingChangeIfNecessary = (setting) => {\n        if (this.state.settings[setting] !== this.props.sidebarPreference[setting]) {\n            trackEvent('settings', 'user_settings_update', {field: 'sidebar.' + setting, value: this.state.settings[setting]});\n        }\n    }\n\n    updateSetting = (setting, value) => {\n        const settings = this.state.settings;\n        settings[setting] = value;\n\n        this.setState(settings);\n    };\n\n    handleSubmit = (setting) => {\n        const {actions, user} = this.props;\n        const preferences = [];\n\n        if (setting === 'channel_grouping' || setting === 'channel_sorting') {\n            const updatedSidebarSettings = {\n                grouping: this.state.settings.grouping,\n                unreads_at_top: this.state.settings.unreadsAtTop,\n                favorite_at_top: this.state.settings.favoriteAtTop,\n                sorting: this.state.settings.sorting,\n            };\n\n            preferences.push({\n                user_id: user.id,\n                category: Constants.Preferences.CATEGORY_SIDEBAR_SETTINGS,\n                name: '',\n                value: JSON.stringify(updatedSidebarSettings),\n            });\n\n            this.trackSettingChangeIfNecessary('grouping');\n            this.trackSettingChangeIfNecessary('sorting');\n            this.trackSettingChangeIfNecessary('unreadsAtTop');\n            this.trackSettingChangeIfNecessary('favoriteAtTop');\n        } else {\n            preferences.push({\n                user_id: user.id,\n                category: Constants.Preferences.CATEGORY_SIDEBAR_SETTINGS,\n                name: setting,\n                value: this.state.settings[setting],\n            });\n\n            trackEvent('settings', 'user_settings_update', {field: 'sidebar.' + setting, value: this.state.settings[setting]});\n        }\n\n        this.setState({isSaving: true});\n\n        actions.savePreferences(user.id, preferences).then(() => {\n            this.updateSection('');\n        });\n    };\n\n    getPreviousSection = (sectionName) => {\n        const {showChannelOrganization} = this.props;\n        switch (sectionName) {\n        case 'autoCloseDM':\n            return 'channelSwitcher';\n        case 'groupChannels':\n            return 'dummySectionName';\n        case 'channelSwitcher':\n            return showChannelOrganization ? 'groupChannels' : 'dummySectionName';\n        default:\n            return null;\n        }\n    }\n\n    updateSection = (section) => {\n        if (!section) {\n            this.setState(this.getStateFromProps());\n        }\n        this.setState({isSaving: false});\n        this.props.updateSection(section);\n    };\n\n    renderAutoCloseDMLabel = (value) => {\n        if (value === 'after_seven_days') {\n            return (\n                <FormattedMessage\n                    id='user.settings.sidebar.after_seven_days'\n                    defaultMessage='After 7 days with no new messages'\n                />\n            );\n        }\n\n        return (\n            <FormattedMessage\n                id='user.settings.sidebar.never'\n                defaultMessage='Never'\n            />\n        );\n    };\n\n    renderAutoCloseDMSection = () => {\n        let contents;\n\n        if (this.props.activeSection === 'autoCloseDM') {\n            contents = (\n                <SettingItemMax\n                    title={\n                        <FormattedMessage\n                            id='user.settings.sidebar.autoCloseDMTitle'\n                            defaultMessage='Automatically Close Direct Messages'\n                        />\n                    }\n                    inputs={[\n                        <fieldset key='autoCloseDMSetting'>\n                            <div className='radio'>\n                                <label>\n                                    <input\n                                        id='autoCloseDMAfterSevenDays'\n                                        type='radio'\n                                        name='autoCloseDM'\n                                        checked={this.state.settings.close_unused_direct_messages === 'after_seven_days'}\n                                        onChange={this.updateSetting.bind(this, 'close_unused_direct_messages', 'after_seven_days')}\n                                    />\n                                    <FormattedMessage\n                                        id='user.settings.sidebar.after_seven_days'\n                                        defaultMessage='After 7 days with no new messages'\n                                    />\n                                </label>\n                            </div>\n                            <div className='radio'>\n                                <label>\n                                    <input\n                                        id='autoCloseDMNever'\n                                        type='radio'\n                                        name='autoCloseDM'\n                                        checked={this.state.settings.close_unused_direct_messages === 'never'}\n                                        onChange={this.updateSetting.bind(this, 'close_unused_direct_messages', 'never')}\n                                    />\n                                    <FormattedMessage\n                                        id='user.settings.sidebar.never'\n                                        defaultMessage='Never'\n                                    />\n                                </label>\n                            </div>\n                            <div className='margin-top x3'>\n                                <FormattedMessage\n                                    id='user.settings.sidebar.autoCloseDMDesc'\n                                    defaultMessage='Direct Message conversations can be reopened with the “+” button in the sidebar or using the Channel Switcher (CTRL+K).'\n                                />\n                            </div>\n                        </fieldset>,\n                    ]}\n                    setting={'close_unused_direct_messages'}\n                    submit={this.handleSubmit}\n                    saving={this.state.isSaving}\n                    server_error={this.state.serverError}\n                    updateSection={this.updateSection}\n                />\n            );\n        } else {\n            contents = (\n                <SettingItemMin\n                    title={\n                        <FormattedMessage\n                            id='user.settings.sidebar.autoCloseDMTitle'\n                            defaultMessage='Automatically Close Direct Messages'\n                        />\n                    }\n                    describe={this.renderAutoCloseDMLabel(this.state.settings.close_unused_direct_messages)}\n                    section={'autoCloseDM'}\n                    updateSection={this.updateSection}\n                />\n            );\n        }\n\n        return (\n            <React.Fragment>\n                {contents}\n                <div className='divider-dark'/>\n            </React.Fragment>\n        );\n    };\n\n    renderOrganizationLabel = () => {\n        const {\n            sidebarPreference: {\n                sorting,\n                grouping,\n            },\n            unreadsAtTop,\n            favoriteAtTop,\n        } = this.props;\n\n        const messages = [];\n\n        if (grouping === 'by_type') {\n            messages.push(\n                <FormattedMessage\n                    key='by_type'\n                    id='user.settings.sidebar.groupByTypeShort'\n                    defaultMessage='Group by channel type'\n                />\n            );\n        } else {\n            messages.push(\n                <FormattedMessage\n                    key='none'\n                    id='user.settings.sidebar.groupByNoneShort'\n                    defaultMessage='No grouping'\n                />\n            );\n        }\n\n        let sortingId;\n        let sortingDefaultMessage;\n        if (sorting === 'alpha') {\n            sortingId = t('user.settings.sidebar.sortAlphaShort');\n            sortingDefaultMessage = 'sorted alphabetically';\n        } else {\n            sortingId = t('user.settings.sidebar.sortRecentShort');\n            sortingDefaultMessage = 'sorted by recency';\n        }\n\n        messages.push(\n            <span key='comma'>{', '}</span>\n        );\n\n        messages.push(\n            <FormattedMessage\n                key='sorting'\n                id={sortingId}\n                defaultMessage={sortingDefaultMessage}\n            />\n        );\n\n        let atTopId = null;\n        let atTopDefaultMessage = null;\n        if (unreadsAtTop === 'true' && favoriteAtTop === 'false') {\n            atTopId = t('user.settings.sidebar.unreadsShort');\n            atTopDefaultMessage = 'Unreads grouped separately';\n        } else if (unreadsAtTop === 'false' && favoriteAtTop === 'true') {\n            atTopId = t('user.settings.sidebar.favoritesShort');\n            atTopDefaultMessage = 'Favorites grouped separately';\n        } else if (unreadsAtTop === 'true' && favoriteAtTop === 'true') {\n            atTopId = t('user.settings.sidebar.unreadsFavoritesShort');\n            atTopDefaultMessage = 'Unreads and favorites grouped separately';\n        }\n\n        if (atTopId) {\n            messages.push(\n                <br key='break'/>\n            );\n\n            messages.push(\n                <FormattedMessage\n                    key='atTop'\n                    id={atTopId}\n                    defaultMessage={atTopDefaultMessage}\n                />\n            );\n        }\n\n        return messages;\n    };\n\n    renderChannelSwitcherLabel = (value) => {\n        if (value === 'true') {\n            return (\n                <FormattedMessage\n                    id='user.settings.sidebar.on'\n                    defaultMessage='On'\n                />\n            );\n        }\n\n        return (\n            <FormattedMessage\n                id='user.settings.sidebar.off'\n                defaultMessage='Off'\n            />\n        );\n    };\n\n    renderChannelOrganizationSection = () => {\n        const {\n            grouping,\n            sorting,\n        } = this.state.settings;\n\n        let contents;\n\n        if (this.props.activeSection === 'groupChannels') {\n            const inputs = [];\n\n            inputs.push(\n                <fieldset key='groupingSectionSetting'>\n                    <legend className='form-legend'>\n                        <FormattedMessage\n                            id='user.settings.sidebar.groupChannelsTitle'\n                            defaultMessage='Channel grouping'\n                        />\n                    </legend>\n                    <div className='radio'>\n                        <label>\n                            <input\n                                id='byTypeOption'\n                                type='radio'\n                                name='groupChannels'\n                                checked={grouping === 'by_type'}\n                                onChange={this.updateSetting.bind(this, 'grouping', 'by_type')}\n                            />\n                            <FormattedMessage\n                                id='user.settings.sidebar.groupByType'\n                                defaultMessage='Channels grouped by type'\n                            />\n                        </label>\n                    </div>\n                    <div className='radio'>\n                        <label>\n                            <input\n                                id='noneOption'\n                                type='radio'\n                                name='groupChannels'\n                                checked={grouping === 'none'}\n                                onChange={this.updateSetting.bind(this, 'grouping', 'none')}\n                            />\n                            <FormattedMessage\n                                id='user.settings.sidebar.groupByNone'\n                                defaultMessage='Combine all channel types'\n                            />\n                        </label>\n                    </div>\n                    <div className='margin-top x3'>\n                        <FormattedMessage\n                            id='user.settings.sidebar.groupDesc'\n                            defaultMessage='Group channels by type, or combine all types into a list.'\n                        />\n                    </div>\n                </fieldset>\n            );\n\n            inputs.push(<hr key='sortingDivider'/>);\n\n            inputs.push(\n                <fieldset key='sortingOptions'>\n                    <legend className='form-legend'>\n                        <FormattedMessage\n                            id='user.settings.sidebar.sortChannelsTitle'\n                            defaultMessage='Channel sorting'\n                        />\n                    </legend>\n                    <div className='radio'>\n                        <label>\n                            <input\n                                id='recentSectionEnabled'\n                                type='radio'\n                                name='sortChannels'\n                                checked={sorting === 'recent'}\n                                onChange={this.updateSetting.bind(this, 'sorting', 'recent')}\n                            />\n                            <FormattedMessage\n                                id='user.settings.sidebar.sortRecent'\n                                defaultMessage='Recency'\n                            />\n                        </label>\n                    </div>\n                    <div className='radio'>\n                        <label>\n                            <input\n                                id='alphaSectionEnabled'\n                                type='radio'\n                                name='sortChannels'\n                                checked={sorting === 'alpha'}\n                                onChange={this.updateSetting.bind(this, 'sorting', 'alpha')}\n                            />\n                            <FormattedMessage\n                                id='user.settings.sidebar.sortAlpha'\n                                defaultMessage='Alphabetically'\n                            />\n                        </label>\n                    </div>\n                    <div className='margin-top x3'>\n                        <FormattedMessage\n                            id='user.settings.sidebar.sortDesc'\n                            defaultMessage='Sort channels alphabetically, or by most recent post.'\n                        />\n                    </div>\n                </fieldset>\n            );\n\n            inputs.push(<hr key='divider'/>);\n\n            inputs.push(\n                <fieldset key='unreadOption'>\n                    <div className='checkbox'>\n                        <label>\n                            <input\n                                id='unreadAtTopOption'\n                                type='checkbox'\n                                checked={this.state.settings.unreadsAtTop === 'true'}\n                                onChange={(e) => this.updateSetting('unreadsAtTop', (e.target.checked).toString())}\n                            />\n                            <FormattedMessage\n                                id='user.settings.sidebar.unreads'\n                                defaultMessage='Unreads grouped separately'\n                            />\n                        </label>\n                    </div>\n                    <div className='margin-top x3'>\n                        <FormattedMessage\n                            id='user.settings.sidebar.unreadsDesc'\n                            defaultMessage='Group unread channels separately until read.'\n                        />\n                    </div>\n                </fieldset>\n            );\n\n            inputs.push(<hr key='groupingDivider'/>);\n\n            inputs.push(\n                <fieldset key='favoriteOption'>\n                    <div className='checkbox'>\n                        <label>\n                            <input\n                                id='favoriteAtTopOption'\n                                type='checkbox'\n                                checked={this.state.settings.favoriteAtTop === 'true'}\n                                onChange={(e) => this.updateSetting('favoriteAtTop', (e.target.checked).toString())}\n                            />\n                            <FormattedMessage\n                                id='user.settings.sidebar.favorites'\n                                defaultMessage='Favorites grouped separately'\n                            />\n                        </label>\n                    </div>\n                    <div>\n                        <br/>\n                        <FormattedMessage\n                            id='user.settings.sidebar.favoritesDesc'\n                            defaultMessage='Channels marked as favorites will be grouped separately.'\n                        />\n                    </div>\n                </fieldset>\n            );\n\n            contents = (\n                <SettingItemMax\n                    title={\n                        <FormattedMessage\n                            id='user.settings.sidebar.groupAndSortChannelsTitle'\n                            defaultMessage='Channel grouping and sorting'\n                        />\n                    }\n                    inputs={inputs}\n                    setting={'channel_grouping'}\n                    submit={this.handleSubmit}\n                    saving={this.state.isSaving}\n                    server_error={this.state.serverError}\n                    updateSection={this.updateSection}\n                />\n            );\n        } else {\n            contents = (\n                <SettingItemMin\n                    title={\n                        <FormattedMessage\n                            id='user.settings.sidebar.groupAndSortChannelsTitle'\n                            defaultMessage='Channel grouping and sorting'\n                        />\n                    }\n                    describe={this.renderOrganizationLabel()}\n                    section={'groupChannels'}\n                    updateSection={this.updateSection}\n                />\n            );\n        }\n\n        return (\n            <React.Fragment>\n                {contents}\n                <div className='divider-light'/>\n            </React.Fragment>\n        );\n    };\n\n    renderChannelSwitcherSection = () => {\n        let channelSwitcherSectionDescId = t('user.settings.sidebar.channelSwitcherSectionDesc.windows');\n        let channelSwitcherSectionDescDefault = 'The channel switcher is shown at the bottom of the sidebar and is used to jump between channels quickly. It can also be accessed using CTRL + K.';\n        if (isMac()) {\n            channelSwitcherSectionDescId = t('user.settings.sidebar.channelSwitcherSectionDesc.mac');\n            channelSwitcherSectionDescDefault = 'The channel switcher is shown at the bottom of the sidebar and is used to jump between channels quickly. It can also be accessed using CMD + K.';\n        }\n\n        const helpChannelSwitcherText = (\n            <FormattedMessage\n                id={channelSwitcherSectionDescId}\n                defaultMessage={channelSwitcherSectionDescDefault}\n            />\n        );\n\n        if (this.props.activeSection === 'channelSwitcher') {\n            return (\n                <SettingItemMax\n                    title={\n                        <FormattedMessage\n                            id='user.settings.sidebar.channelSwitcherSectionTitle'\n                            defaultMessage='Channel Switcher'\n                        />\n                    }\n                    inputs={[\n                        <div key='channelSwitcherSectionSetting'>\n                            <div\n                                id='channelSwitcherRadioOn'\n                                className='radio'\n                            >\n                                <label>\n                                    <input\n                                        id='channelSwitcherSectionEnabled'\n                                        type='radio'\n                                        name='channelSwitcher'\n                                        checked={this.state.settings.channel_switcher_section === 'true'}\n                                        onChange={this.updateSetting.bind(this, 'channel_switcher_section', 'true')}\n                                    />\n                                    <FormattedMessage\n                                        id='user.settings.sidebar.on'\n                                        defaultMessage='On'\n                                    />\n                                </label>\n                                <br/>\n                            </div>\n                            <div\n                                id='channelSwitcherRadioOff'\n                                className='radio'\n                            >\n                                <label>\n                                    <input\n                                        id='channelSwitcherSectionOff'\n                                        type='radio'\n                                        name='channelSwitcher'\n                                        checked={this.state.settings.channel_switcher_section === 'false'}\n                                        onChange={this.updateSetting.bind(this, 'channel_switcher_section', 'false')}\n                                    />\n                                    <FormattedMessage\n                                        id='user.settings.sidebar.off'\n                                        defaultMessage='Off'\n                                    />\n                                </label>\n                                <br/>\n                            </div>\n                            <div id='channelSwitcherHelpText'>\n                                <br/>\n                                {helpChannelSwitcherText}\n                            </div>\n                        </div>,\n                    ]}\n                    setting={'channel_switcher_section'}\n                    submit={this.handleSubmit}\n                    saving={this.state.isSaving}\n                    server_error={this.state.serverError}\n                    updateSection={this.updateSection}\n                />\n            );\n        }\n\n        return (\n            <SettingItemMin\n                title={\n                    <FormattedMessage\n                        id='user.settings.sidebar.channelSwitcherSectionTitle'\n                        defaultMessage='Channel Switcher'\n                    />\n                }\n                describe={this.renderChannelSwitcherLabel(this.props.channelSwitcherOption)}\n                section={'channelSwitcher'}\n                updateSection={this.updateSection}\n            />\n        );\n    };\n\n    render() {\n        const {showUnusedOption, showChannelOrganization} = this.props;\n        const {formatMessage} = this.context.intl;\n\n        const channelOrganizationSection = showChannelOrganization ? this.renderChannelOrganizationSection() : null;\n        const autoCloseDMSection = showUnusedOption ? this.renderAutoCloseDMSection() : null;\n        const channelSwitcherSection = this.renderChannelSwitcherSection();\n\n        return (\n            <div>\n                <div className='modal-header'>\n                    <button\n                        id='closeButton'\n                        type='button'\n                        className='close'\n                        data-dismiss='modal'\n                        aria-label='Close'\n                        onClick={this.props.closeModal}\n                    >\n                        <span aria-hidden='true'>{'×'}</span>\n                    </button>\n                    <h4\n                        className='modal-title'\n                        ref='title'\n                    >\n                        <div className='modal-back'>\n                            <i\n                                className='fa fa-angle-left'\n                                title={formatMessage({id: 'generic_icons.collapse', defaultMessage: 'Collapse Icon'})}\n                                onClick={this.props.collapseModal}\n                            />\n                        </div>\n                        <FormattedMessage\n                            id='user.settings.sidebar.title'\n                            defaultMessage='Sidebar Settings'\n                        />\n                    </h4>\n                </div>\n                <div\n                    id='sidebarTitle'\n                    className='user-settings'\n                >\n                    <h3 className='tab-header'>\n                        <FormattedMessage\n                            id='user.settings.sidebar.title'\n                            defaultMessage='Sidebar Settings'\n                        />\n                    </h3>\n                    <div className='divider-dark first'/>\n                    {channelOrganizationSection}\n                    {channelSwitcherSection}\n                    {showUnusedOption ? <div className='divider-light'/> : <div className='divider-dark'/>}\n                    {autoCloseDMSection}\n                </div>\n            </div>\n        );\n    }\n}\n","// Copyright (c) 2015-present Mattermost, Inc. All Rights Reserved.\n// See LICENSE.txt for license information.\n\nimport {bindActionCreators} from 'redux';\nimport {connect} from 'react-redux';\n\nimport {savePreferences} from 'mattermost-redux/actions/preferences';\nimport {Preferences} from 'mattermost-redux/constants';\nimport {getConfig} from 'mattermost-redux/selectors/entities/general';\nimport {get as getPreference, getSidebarPreferences} from 'mattermost-redux/selectors/entities/preferences';\nimport {getCurrentUser} from 'mattermost-redux/selectors/entities/users';\n\nimport UserSettingsSidebar from './user_settings_sidebar.jsx';\n\nfunction mapStateToProps(state) {\n    const config = getConfig(state);\n\n    const closeUnusedDirectMessages = getPreference(\n        state,\n        Preferences.CATEGORY_SIDEBAR_SETTINGS,\n        'close_unused_direct_messages',\n        'after_seven_days'\n    );\n\n    const channelSwitcherOption = getPreference(\n        state,\n        Preferences.CATEGORY_SIDEBAR_SETTINGS,\n        'channel_switcher_section',\n        'true'\n    );\n\n    const sidebarPreference = getSidebarPreferences(state);\n\n    return {\n        closeUnusedDirectMessages,\n        sidebarPreference,\n        unreadsAtTop: sidebarPreference.unreads_at_top,\n        favoriteAtTop: sidebarPreference.favorite_at_top,\n        channelSwitcherOption,\n        showChannelOrganization: config.ExperimentalChannelOrganization === 'true',\n        showUnusedOption: config.CloseUnusedDirectMessages === 'true',\n        user: getCurrentUser(state),\n    };\n}\n\nfunction mapDispatchToProps(dispatch) {\n    return {\n        actions: bindActionCreators({\n            savePreferences,\n        }, dispatch),\n    };\n}\n\nexport default connect(mapStateToProps, mapDispatchToProps)(UserSettingsSidebar);\n","// Copyright (c) 2015-present Mattermost, Inc. All Rights Reserved.\n// See LICENSE.txt for license information.\n\nimport PropTypes from 'prop-types';\nimport React from 'react';\n\nimport AdvancedTab from './advanced';\nimport DisplayTab from './display';\nimport GeneralTab from './general';\nimport NotificationsTab from './notifications';\nimport SecurityTab from './security';\nimport SidebarTab from './sidebar';\n\nexport default class UserSettings extends React.PureComponent {\n    static propTypes = {\n        user: PropTypes.object.isRequired,\n        activeTab: PropTypes.string,\n        activeSection: PropTypes.string,\n        updateSection: PropTypes.func,\n        updateTab: PropTypes.func,\n        closeModal: PropTypes.func.isRequired,\n        collapseModal: PropTypes.func.isRequired,\n        setEnforceFocus: PropTypes.func.isRequired,\n        setRequireConfirm: PropTypes.func.isRequired,\n    }\n\n    render() {\n        if (this.props.activeTab === 'general') {\n            return (\n                <div>\n                    <GeneralTab\n                        user={this.props.user}\n                        activeSection={this.props.activeSection}\n                        updateSection={this.props.updateSection}\n                        updateTab={this.props.updateTab}\n                        closeModal={this.props.closeModal}\n                        collapseModal={this.props.collapseModal}\n                    />\n                </div>\n            );\n        } else if (this.props.activeTab === 'security') {\n            return (\n                <div>\n                    <SecurityTab\n                        user={this.props.user}\n                        activeSection={this.props.activeSection}\n                        updateSection={this.props.updateSection}\n                        closeModal={this.props.closeModal}\n                        collapseModal={this.props.collapseModal}\n                        setRequireConfirm={this.props.setRequireConfirm}\n                    />\n                </div>\n            );\n        } else if (this.props.activeTab === 'notifications') {\n            return (\n                <div>\n                    <NotificationsTab\n                        user={this.props.user}\n                        activeSection={this.props.activeSection}\n                        updateSection={this.props.updateSection}\n                        closeModal={this.props.closeModal}\n                        collapseModal={this.props.collapseModal}\n                    />\n                </div>\n            );\n        } else if (this.props.activeTab === 'display') {\n            return (\n                <div>\n                    <DisplayTab\n                        user={this.props.user}\n                        activeSection={this.props.activeSection}\n                        updateSection={this.props.updateSection}\n                        closeModal={this.props.closeModal}\n                        collapseModal={this.props.collapseModal}\n                        setEnforceFocus={this.props.setEnforceFocus}\n                        setRequireConfirm={this.props.setRequireConfirm}\n                    />\n                </div>\n            );\n        } else if (this.props.activeTab === 'sidebar') {\n            return (\n                <div>\n                    <SidebarTab\n                        activeSection={this.props.activeSection}\n                        updateSection={this.props.updateSection}\n                        closeModal={this.props.closeModal}\n                        collapseModal={this.props.collapseModal}\n                    />\n                </div>\n            );\n        } else if (this.props.activeTab === 'advanced') {\n            return (\n                <div>\n                    <AdvancedTab\n                        activeSection={this.props.activeSection}\n                        updateSection={this.props.updateSection}\n                        closeModal={this.props.closeModal}\n                        collapseModal={this.props.collapseModal}\n                    />\n                </div>\n            );\n        }\n\n        return <div/>;\n    }\n}","// Copyright (c) 2015-present Mattermost, Inc. All Rights Reserved.\n// See LICENSE.txt for license information.\n\nimport {connect} from 'react-redux';\nimport {getCurrentUser} from 'mattermost-redux/selectors/entities/users';\n\nimport UserSettings from './user_settings.jsx';\n\nfunction mapStateToProps(state) {\n    return {\n        user: getCurrentUser(state),\n    };\n}\n\nexport default connect(mapStateToProps)(UserSettings);\n"],"sourceRoot":""}