{"version":3,"sources":["webpack:///./components/common/back_button.jsx","webpack:///./images/logo.png","webpack:///./components/common/site_name_and_description.jsx","webpack:///./components/login/login_mfa.jsx","webpack:///./actions/views/login.js","webpack:///./components/login/login_controller/login_controller.jsx","webpack:///./components/login/login_controller/index.js"],"names":["BackButton","React","PureComponent","react__WEBPACK_IMPORTED_MODULE_3___default","a","createElement","id","className","react_router_dom__WEBPACK_IMPORTED_MODULE_5__","onClick","this","props","to","url","react_intl__WEBPACK_IMPORTED_MODULE_4__","defaultMessage","title","PropTypes","string","func","module","exports","__webpack_require__","p","SiteNameAndDescription","_this$props","customDescriptionText","siteName","description","Fragment","LoginMfa","_this","_classCallCheck","_getPrototypeOf","call","_defineProperty","_assertThisInitialized","e","preventDefault","token","target","value","trim","replace","state","setState","submit","loginId","password","saving","serverError","errorClass","react__WEBPACK_IMPORTED_MODULE_4___default","onSubmit","handleSubmit","react_intl__WEBPACK_IMPORTED_MODULE_5__","components_localized_input_localized_input__WEBPACK_IMPORTED_MODULE_9__","type","name","placeholder","t","spellCheck","autoComplete","autoFocus","onChange","handleChange","components_save_button_jsx__WEBPACK_IMPORTED_MODULE_8__","disabled","localizeMessage","savingMessage","isRequired","login","mfaToken","dispatch","ignoreMfaRequiredError","UserActions","loginById","userId","_callee","promise","result","regeneratorRuntime","wrap","_context","prev","next","sent","error","server_error_id","data","abrupt","stop","LoginController","sessionExpired","document","intl","formatMessage","closeSessionExpiredNotification","showNotification","body","Utils","requireInteraction","silent","window","focus","then","closeNotification","catch","onDismissSessionExpired","location","newQuery","search","browserHistory","concat","pathname","hash","refs","toLowerCase","msgId","emailSigninEnabled","usernameSigninEnabled","ldapEnabled","react_default","index_es","values","ldapUsername","ldapLoginFieldName","loading","actions","_ref2","mark","_ref","params","inviteToken","inviteId","_ref3","team","push","encodeURIComponent","showMfa","message","URLSearchParams","get","addUserToTeamFromInvite","finishSignin","_x","apply","arguments","experimentalPrimaryTeam","redirectTo","LocalStorageStore","setWasLoggedIn","match","GlobalActions","brandImageError","enableCustomBrand","text","customBrandText","formattedText","TextFormatting","brandImageUrl","Client4","getBrandImageUrl","brandImageStyle","display","alt","src","onError","handleBrandImageError","style","messageHtmlToComponent","mentions","imagesMetadata","loginPlaceholders","length","slice","join","enableSignUpWithEmail","enableSignUpWithGitLab","enableSignUpWithOffice365","enableSignUpWithGoogle","enableLdap","enableSaml","extraParam","warning_icon","react_router_dom","Constants","GET_TERMS_ERROR","TERMS_REJECTED","formatted_markdown_message","SIGNIN_CHANGE","success_icon","SIGNIN_VERIFIED","PASSWORD_CHANGE","CREATE_LDAP","loginControls","gitlabSigninEnabled","googleSigninEnabled","office365SigninEnabled","samlSigninEnabled","samlEnabled","key","preSubmit","form_error","margin","ref","handleLoginIdChange","createLoginPlaceholder","autoCapitalize","localized_input","handlePasswordChange","loading_wrapper","enableOpenServer","checkSignUpEnabled","href","getOAuthRoute","getUrl","samlLoginButtonText","createExtraText","isLicensed","enableSignInWithUsername","enableSignInWithEmail","Component","configureTitle","currentUser","extra","email","getWasLoggedIn","set","SESSION_EXPIRED","showSessionExpiredNotificationIfNeeded","content","customContent","customClass","backButton","initializing","loading_screen","login_mfa","back_button","hideMfa","createLoginOptions","createCustomLogin","announcement_bar","logoImage","site_name_and_description","intlShape","object","bool","shape","injectIntl","connect","config","getConfig","getLicense","IsLicensed","CustomBrandText","CustomDescriptionText","EnableCustomBrand","EnableLdap","EnableOpenServer","EnableSaml","EnableSignInWithEmail","EnableSignInWithUsername","EnableSignUpWithEmail","EnableSignUpWithGitLab","EnableSignUpWithGoogle","EnableSignUpWithOffice365","LdapLoginFieldName","SamlLoginButtonText","SiteName","requests","users","logout","status","RequestStatus","SUCCESS","storage","initialized","ExperimentalPrimaryTeam","getTeamByName","member","getMyTeamMember","team_id","getCurrentUser","bindActionCreators"],"mappings":"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","file":"10.f1fec3bb8116d79766bf.js","sourcesContent":["// Copyright (c) 2015-present Mattermost, Inc. All Rights Reserved.\n// See LICENSE.txt for license information.\n\nimport PropTypes from 'prop-types';\nimport React from 'react';\nimport {FormattedMessage} from 'react-intl';\nimport {Link} from 'react-router-dom';\n\nexport default class BackButton extends React.PureComponent {\n    static propTypes = {\n\n        /**\n         * URL to return to\n         */\n        url: PropTypes.string,\n\n        /**\n         * An optional click handler that will trigger when the user clicks on the back button\n         */\n        onClick: PropTypes.func,\n    };\n\n    static defaultProps = {\n        url: '/',\n    };\n\n    render() {\n        return (\n            <div\n                id='back_button'\n                className='signup-header'\n            >\n                <Link\n                    onClick={this.props.onClick}\n                    to={this.props.url}\n                >\n                    <FormattedMessage\n                        id='generic_icons.back'\n                        defaultMessage='Back Icon'\n                    >\n                        {(title) => (\n                            <span\n                                id='back_button_icon'\n                                className='fa fa-1x fa-angle-left'\n                                title={title}\n                            />\n                        )}\n                    </FormattedMessage>\n                    <FormattedMessage\n                        id='web.header.back'\n                        defaultMessage='Back'\n                    />\n                </Link>\n            </div>\n        );\n    }\n}\n","module.exports = __webpack_public_path__ + \"files/786f906c373b98400b1e6f6c3341ce7d.png\";","// Copyright (c) 2015-present Mattermost, Inc. All Rights Reserved.\n// See LICENSE.txt for license information.\n\nimport PropTypes from 'prop-types';\nimport React from 'react';\nimport {FormattedMessage} from 'react-intl';\n\nexport default class SiteNameAndDescription extends React.PureComponent {\n    static propTypes = {\n        customDescriptionText: PropTypes.string,\n        siteName: PropTypes.string,\n    };\n\n    static defaultProps = {\n        siteName: 'Mattermost',\n    };\n\n    render() {\n        const {\n            customDescriptionText,\n            siteName,\n        } = this.props;\n        let description = null;\n        if (customDescriptionText) {\n            description = customDescriptionText;\n        } else {\n            description = (\n                <FormattedMessage\n                    id='web.root.signup_info'\n                    defaultMessage='All team communication in one place, searchable and accessible anywhere'\n                />\n            );\n        }\n\n        return (\n            <React.Fragment>\n                <h1 id='site_name'>{siteName}</h1>\n                <h4\n                    id='site_description'\n                    className='color--light'\n                >\n                    {description}\n                </h4>\n            </React.Fragment>\n        );\n    }\n}\n","// Copyright (c) 2015-present Mattermost, Inc. All Rights Reserved.\n// See LICENSE.txt for license information.\n\nimport PropTypes from 'prop-types';\nimport React from 'react';\nimport {FormattedMessage} from 'react-intl';\n\nimport {localizeMessage} from 'utils/utils.jsx';\nimport {t} from 'utils/i18n.jsx';\nimport SaveButton from 'components/save_button.jsx';\nimport LocalizedInput from 'components/localized_input/localized_input';\n\nexport default class LoginMfa extends React.PureComponent {\n    static propTypes = {\n\n        /*\n         * User's login ID\n         */\n        loginId: PropTypes.string.isRequired,\n\n        /*\n         * User's password\n         */\n        password: PropTypes.string.isRequired,\n\n        /*\n         * Function to call when submitting user credentials\n         */\n        submit: PropTypes.func.isRequired,\n    };\n\n    constructor(props) {\n        super(props);\n\n        this.state = {\n            saving: false,\n            token: '',\n            serverError: '',\n        };\n    }\n\n    handleChange = (e) => {\n        e.preventDefault();\n        const token = e.target.value.trim().replace(/\\s/g, '');\n\n        if (token !== this.state.token) {\n            this.setState({\n                token,\n            });\n        }\n    }\n\n    handleSubmit = (e) => {\n        e.preventDefault();\n        const state = {};\n\n        state.serverError = '';\n        state.saving = true;\n        this.setState(state);\n\n        this.props.submit(\n            this.props.loginId,\n            this.props.password,\n            this.state.token\n        );\n    }\n\n    render() {\n        let serverError;\n        let errorClass = '';\n        if (this.state.serverError) {\n            serverError = <label className='control-label'>{this.state.serverError}</label>;\n            errorClass = ' has-error';\n        }\n\n        return (\n            <form onSubmit={this.handleSubmit}>\n                <div className='signup__email-container'>\n                    <p>\n                        <FormattedMessage\n                            id='login_mfa.enterToken'\n                            defaultMessage=\"To complete the sign in process, please enter a token from your smartphone's authenticator\"\n                        />\n                    </p>\n                    <div className={'form-group' + errorClass}>\n                        {serverError}\n                    </div>\n                    <div className={'form-group' + errorClass}>\n                        <LocalizedInput\n                            type='text'\n                            className='form-control'\n                            name='token'\n                            placeholder={{id: t('login_mfa.token'), defaultMessage: 'MFA Token'}}\n                            spellCheck='false'\n                            autoComplete='off'\n                            autoFocus={true}\n                            onChange={this.handleChange}\n                        />\n                    </div>\n                    <div className='form-group'>\n                        <SaveButton\n                            saving={this.state.saving}\n                            disabled={this.state.saving}\n                            onClick={this.handleSubmit}\n                            defaultMessage={localizeMessage('login_mfa.submit', 'Submit')}\n                            savingMessage={localizeMessage('login_mfa.submitting', 'Submitting...')}\n                        />\n                    </div>\n                </div>\n            </form>\n        );\n    }\n}\n","// Copyright (c) 2015-present Mattermost, Inc. All Rights Reserved.\n// See LICENSE.txt for license information.\n\nimport * as UserActions from 'mattermost-redux/actions/users';\n\nexport function login(loginId, password, mfaToken) {\n    return (dispatch) => {\n        return ignoreMfaRequiredError(dispatch(UserActions.login(loginId, password, mfaToken)));\n    };\n}\n\nexport function loginById(userId, password, mfaToken) {\n    return (dispatch) => {\n        return ignoreMfaRequiredError(dispatch(UserActions.loginById(userId, password, mfaToken)));\n    };\n}\n\nasync function ignoreMfaRequiredError(promise) {\n    let result = await promise;\n\n    if (result.error && result.error.server_error_id === 'api.context.mfa_required.app_error') {\n        result = {data: true};\n    }\n\n    return result;\n}\n","// Copyright (c) 2015-present Mattermost, Inc. All Rights Reserved.\n// See LICENSE.txt for license information.\n\nimport PropTypes from 'prop-types';\nimport React from 'react';\nimport {FormattedMessage, injectIntl, intlShape} from 'react-intl';\nimport {Link} from 'react-router-dom';\n\nimport {Client4} from 'mattermost-redux/client';\n\nimport * as GlobalActions from 'actions/global_actions.jsx';\nimport LocalStorageStore from 'stores/local_storage_store';\n\nimport {browserHistory} from 'utils/browser_history';\nimport Constants from 'utils/constants.jsx';\nimport messageHtmlToComponent from 'utils/message_html_to_component';\nimport * as TextFormatting from 'utils/text_formatting.jsx';\nimport * as Utils from 'utils/utils.jsx';\nimport {showNotification} from 'utils/notifications.jsx';\nimport {t} from 'utils/i18n.jsx';\n\nimport logoImage from 'images/logo.png';\n\nimport SiteNameAndDescription from 'components/common/site_name_and_description';\nimport AnnouncementBar from 'components/announcement_bar';\nimport FormError from 'components/form_error.jsx';\nimport FormattedMarkdownMessage from 'components/formatted_markdown_message.jsx';\nimport BackButton from 'components/common/back_button.jsx';\nimport LoadingScreen from 'components/loading_screen.jsx';\nimport LoadingWrapper from 'components/widgets/loading/loading_wrapper.jsx';\nimport SuccessIcon from 'components/icon/success_icon';\nimport WarningIcon from 'components/icon/warning_icon';\nimport LocalizedInput from 'components/localized_input/localized_input';\n\nimport LoginMfa from '../login_mfa.jsx';\n\nclass LoginController extends React.Component {\n    static propTypes = {\n        intl: intlShape.isRequired,\n\n        location: PropTypes.object.isRequired,\n        isLicensed: PropTypes.bool.isRequired,\n        currentUser: PropTypes.object,\n        customBrandText: PropTypes.string,\n        customDescriptionText: PropTypes.string,\n        enableCustomBrand: PropTypes.bool.isRequired,\n        enableLdap: PropTypes.bool.isRequired,\n        enableOpenServer: PropTypes.bool.isRequired,\n        enableSaml: PropTypes.bool.isRequired,\n        enableSignInWithEmail: PropTypes.bool.isRequired,\n        enableSignInWithUsername: PropTypes.bool.isRequired,\n        enableSignUpWithEmail: PropTypes.bool.isRequired,\n        enableSignUpWithGitLab: PropTypes.bool.isRequired,\n        enableSignUpWithGoogle: PropTypes.bool.isRequired,\n        enableSignUpWithOffice365: PropTypes.bool.isRequired,\n        experimentalPrimaryTeam: PropTypes.string,\n        ldapLoginFieldName: PropTypes.string,\n        samlLoginButtonText: PropTypes.string,\n        siteName: PropTypes.string,\n        initializing: PropTypes.bool,\n        actions: PropTypes.shape({\n            login: PropTypes.func.isRequired,\n            addUserToTeamFromInvite: PropTypes.func.isRequired,\n        }).isRequired,\n    }\n\n    constructor(props) {\n        super(props);\n\n        let loginId = '';\n        if ((new URLSearchParams(this.props.location.search)).get('extra') === Constants.SIGNIN_VERIFIED && (new URLSearchParams(this.props.location.search)).get('email')) {\n            loginId = (new URLSearchParams(this.props.location.search)).get('email');\n        }\n\n        this.state = {\n            ldapEnabled: this.props.isLicensed && this.props.enableLdap,\n            usernameSigninEnabled: this.props.enableSignInWithUsername,\n            emailSigninEnabled: this.props.enableSignInWithEmail,\n            samlEnabled: this.props.isLicensed && this.props.enableSaml,\n            loginId,\n            password: '',\n            showMfa: false,\n            loading: false,\n            sessionExpired: false,\n            brandImageError: false,\n        };\n    }\n\n    componentDidMount() {\n        this.configureTitle();\n\n        if (this.props.currentUser) {\n            GlobalActions.redirectUserToDefaultTeam();\n            return;\n        }\n\n        const search = new URLSearchParams(this.props.location.search);\n        const extra = search.get('extra');\n        const email = search.get('email');\n\n        if (extra === Constants.SIGNIN_VERIFIED && email) {\n            this.refs.password.focus();\n        }\n\n        // Determine if the user was unexpectedly logged out.\n        if (LocalStorageStore.getWasLoggedIn()) {\n            if (extra === Constants.SIGNIN_CHANGE) {\n                // Assume that if the user triggered a sign in change, it was intended to logout.\n                // We can't preflight this, since in some flows it's the server that invalidates\n                // our session after we use it to complete the sign in change.\n                LocalStorageStore.setWasLoggedIn(false);\n            } else {\n                // Although the authority remains the local sessionExpired bit on the state, set this\n                // extra field in the querystring to signal the desktop app. And although eslint\n                // complains about this, it is allowed: https://reactjs.org/docs/react-component.html#componentdidmount.\n                // eslint-disable-next-line react/no-did-mount-set-state\n                this.setState({sessionExpired: true});\n                search.set('extra', Constants.SESSION_EXPIRED);\n                browserHistory.replace(`${this.props.location.pathname}?${search}`);\n            }\n        }\n\n        this.showSessionExpiredNotificationIfNeeded();\n    }\n\n    componentDidUpdate() {\n        this.configureTitle();\n        this.showSessionExpiredNotificationIfNeeded();\n    }\n\n    componentWillUnmount() {\n        if (this.closeSessionExpiredNotification) {\n            this.closeSessionExpiredNotification();\n            this.closeSessionExpiredNotification = null;\n        }\n    }\n\n    configureTitle = () => {\n        if (this.state.sessionExpired) {\n            document.title = this.props.intl.formatMessage({\n                id: 'login.session_expired.title',\n                defaultMessage: '* {siteName} - Session Expired',\n            }, {\n                siteName: this.props.siteName,\n            });\n        } else {\n            document.title = this.props.siteName;\n        }\n    }\n\n    showSessionExpiredNotificationIfNeeded = () => {\n        if (this.state.sessionExpired && !this.closeSessionExpiredNotification) {\n            showNotification({\n                title: this.props.siteName,\n                body: Utils.localizeMessage(\n                    'login.session_expired.notification',\n                    'Session Expired: Please sign in to continue receiving notifications.'\n                ),\n                requireInteraction: true,\n                silent: false,\n                onClick: () => {\n                    window.focus();\n                    if (this.closeSessionExpiredNotification()) {\n                        this.closeSessionExpiredNotification();\n                        this.closeSessionExpiredNotification = null;\n                    }\n                },\n            }).then((closeNotification) => {\n                this.closeSessionExpiredNotification = closeNotification;\n            }).catch(() => {\n                // Ignore the failure to display the notification.\n            });\n        } else if (!this.state.sessionExpired && this.closeSessionExpiredNotification) {\n            this.closeSessionExpiredNotification();\n            this.closeSessionExpiredNotification = null;\n        }\n    }\n\n    preSubmit = (e) => {\n        e.preventDefault();\n\n        // Discard any session expiry notice once the user interacts with the login page.\n        this.onDismissSessionExpired();\n\n        const {location} = this.props;\n        const newQuery = location.search.replace(/(extra=password_change)&?/i, '');\n        if (newQuery !== location.search) {\n            browserHistory.replace(`${location.pathname}${newQuery}${location.hash}`);\n        }\n\n        // password managers don't always call onInput handlers for form fields so it's possible\n        // for the state to get out of sync with what the user sees in the browser\n        let loginId = this.state.loginId;\n        if (this.refs.loginId) {\n            loginId = this.refs.loginId.value;\n            if (loginId !== this.state.loginId) {\n                this.setState({loginId});\n            }\n        }\n\n        let password = this.state.password;\n        if (this.refs.password) {\n            password = this.refs.password.value;\n            if (password !== this.state.password) {\n                this.setState({password});\n            }\n        }\n\n        // don't trim the password since we support spaces in passwords\n        loginId = loginId.trim().toLowerCase();\n\n        if (!loginId) {\n            t('login.noEmail');\n            t('login.noEmailLdapUsername');\n            t('login.noEmailUsername');\n            t('login.noEmailUsernameLdapUsername');\n            t('login.noLdapUsername');\n            t('login.noUsername');\n            t('login.noUsernameLdapUsername');\n\n            // it's slightly weird to be constructing the message ID, but it's a bit nicer than triply nested if statements\n            let msgId = 'login.no';\n            if (this.state.emailSigninEnabled) {\n                msgId += 'Email';\n            }\n            if (this.state.usernameSigninEnabled) {\n                msgId += 'Username';\n            }\n            if (this.state.ldapEnabled) {\n                msgId += 'LdapUsername';\n            }\n\n            this.setState({\n                serverError: (\n                    <FormattedMessage\n                        id={msgId}\n                        values={{\n                            ldapUsername: this.props.ldapLoginFieldName || Utils.localizeMessage('login.ldapUsernameLower', 'AD/LDAP username'),\n                        }}\n                    />\n                ),\n            });\n            return;\n        }\n\n        if (!password) {\n            this.setState({\n                serverError: (\n                    <FormattedMessage\n                        id='login.noPassword'\n                        defaultMessage='Please enter your password'\n                    />\n                ),\n            });\n            return;\n        }\n\n        this.submit(loginId, password, '');\n    }\n\n    submit = (loginId, password, token) => {\n        this.setState({serverError: null, loading: true});\n\n        this.props.actions.login(loginId, password, token).then(async ({error}) => {\n            if (error) {\n                if (error.server_error_id === 'api.user.login.not_verified.app_error') {\n                    browserHistory.push('/should_verify_email?&email=' + encodeURIComponent(loginId));\n                } else if (error.server_error_id === 'store.sql_user.get_for_login.app_error' ||\n                    error.server_error_id === 'ent.ldap.do_login.user_not_registered.app_error') {\n                    this.setState({\n                        showMfa: false,\n                        loading: false,\n                        serverError: (\n                            <FormattedMessage\n                                id='login.userNotFound'\n                                defaultMessage=\"We couldn't find an account matching your login credentials.\"\n                            />\n                        ),\n                    });\n                } else if (error.server_error_id === 'api.user.check_user_password.invalid.app_error' || error.server_error_id === 'ent.ldap.do_login.invalid_password.app_error') {\n                    this.setState({\n                        showMfa: false,\n                        loading: false,\n                        serverError: (\n                            <FormattedMessage\n                                id='login.invalidPassword'\n                                defaultMessage='Your password is incorrect.'\n                            />\n                        ),\n                    });\n                } else if (!this.state.showMfa && error.server_error_id === 'mfa.validate_token.authenticate.app_error') {\n                    this.setState({showMfa: true});\n                } else {\n                    this.setState({showMfa: false, serverError: error.message, loading: false});\n                }\n\n                return;\n            }\n\n            // check for query params brought over from signup_user_complete\n            const params = new URLSearchParams(this.props.location.search);\n            const inviteToken = params.get('t') || '';\n            const inviteId = params.get('id') || '';\n\n            if (inviteId || inviteToken) {\n                const {data: team} = await this.props.actions.addUserToTeamFromInvite(inviteToken, inviteId);\n                if (team) {\n                    this.finishSignin(team);\n                } else {\n                    // there's not really a good way to deal with this, so just let the user log in like normal\n                    this.finishSignin();\n                }\n            } else {\n                this.finishSignin();\n            }\n        });\n    }\n\n    finishSignin = (team) => {\n        const experimentalPrimaryTeam = this.props.experimentalPrimaryTeam;\n        const query = new URLSearchParams(this.props.location.search);\n        const redirectTo = query.get('redirect_to');\n\n        Utils.setCSRFFromCookie();\n\n        // Record a successful login to local storage. If an unintentional logout occurs, e.g.\n        // via session expiration, this bit won't get reset and we can notify the user as such.\n        LocalStorageStore.setWasLoggedIn(true);\n        if (redirectTo && redirectTo.match(/^\\/([^/]|$)/)) {\n            browserHistory.push(redirectTo);\n        } else if (team) {\n            browserHistory.push(`/${team.name}`);\n        } else if (experimentalPrimaryTeam) {\n            browserHistory.push(`/${experimentalPrimaryTeam}`);\n        } else {\n            GlobalActions.redirectUserToDefaultTeam();\n        }\n    }\n\n    handleLoginIdChange = (e) => {\n        this.setState({\n            loginId: e.target.value,\n        });\n    }\n\n    handlePasswordChange = (e) => {\n        this.setState({\n            password: e.target.value,\n        });\n    }\n\n    handleBrandImageError = () => {\n        this.setState({brandImageError: true});\n    }\n\n    createCustomLogin = () => {\n        if (this.props.enableCustomBrand) {\n            const text = this.props.customBrandText || '';\n            const formattedText = TextFormatting.formatText(text);\n            const brandImageUrl = Client4.getBrandImageUrl(0);\n            const brandImageStyle = this.state.brandImageError ? {display: 'none'} : {};\n\n            return (\n                <div>\n                    <img\n                        alt={'brand image'}\n                        src={brandImageUrl}\n                        onError={this.handleBrandImageError}\n                        style={brandImageStyle}\n                    />\n                    <div>\n                        {messageHtmlToComponent(formattedText, false, {mentions: false, imagesMetadata: null})}\n                    </div>\n                </div>\n            );\n        }\n\n        return null;\n    }\n\n    createLoginPlaceholder = () => {\n        const ldapEnabled = this.state.ldapEnabled;\n        const usernameSigninEnabled = this.state.usernameSigninEnabled;\n        const emailSigninEnabled = this.state.emailSigninEnabled;\n\n        const loginPlaceholders = [];\n        if (emailSigninEnabled) {\n            loginPlaceholders.push(Utils.localizeMessage('login.email', 'Email'));\n        }\n\n        if (usernameSigninEnabled) {\n            loginPlaceholders.push(Utils.localizeMessage('login.username', 'Username'));\n        }\n\n        if (ldapEnabled) {\n            if (this.props.ldapLoginFieldName) {\n                loginPlaceholders.push(this.props.ldapLoginFieldName);\n            } else {\n                loginPlaceholders.push(Utils.localizeMessage('login.ldapUsername', 'AD/LDAP Username'));\n            }\n        }\n\n        if (loginPlaceholders.length >= 2) {\n            return loginPlaceholders.slice(0, loginPlaceholders.length - 1).join(', ') +\n                Utils.localizeMessage('login.placeholderOr', ' or ') +\n                loginPlaceholders[loginPlaceholders.length - 1];\n        } else if (loginPlaceholders.length === 1) {\n            return loginPlaceholders[0];\n        }\n\n        return '';\n    }\n\n    checkSignUpEnabled = () => {\n        return this.props.enableSignUpWithEmail ||\n            this.props.enableSignUpWithGitLab ||\n            this.props.enableSignUpWithOffice365 ||\n            this.props.enableSignUpWithGoogle ||\n            this.props.enableLdap ||\n            this.props.enableSaml;\n    }\n\n    onDismissSessionExpired = () => {\n        LocalStorageStore.setWasLoggedIn(false);\n        this.setState({sessionExpired: false});\n    }\n\n    createExtraText = () => {\n        const extraParam = (new URLSearchParams(this.props.location.search)).get('extra');\n\n        if (this.state.sessionExpired) {\n            return (\n                <div className='alert alert-warning'>\n                    <WarningIcon/>\n                    {' '}\n                    <FormattedMessage\n                        id='login.session_expired'\n                        defaultMessage='Your session has expired. Please log in again.'\n                    />\n                    {' '}\n                    <Link\n                        className='btn-close'\n                        to='/login'\n                        onClick={this.onDismissSessionExpired}\n                    >\n                        <span>\n                            {'×'}\n                        </span>\n                    </Link>\n                </div>\n            );\n        }\n\n        if (extraParam === Constants.GET_TERMS_ERROR) {\n            return (\n                <div className='alert has-error no-padding'>\n                    <label className='control-label'>\n                        <FormattedMessage\n                            id='login.get_terms_error'\n                            defaultMessage='Unable to load terms of service. If this issue persists, contact your System Administrator.'\n                        />\n                    </label>\n                </div>\n            );\n        } else if (extraParam === Constants.TERMS_REJECTED) {\n            return (\n                <div className='alert alert-warning'>\n                    <WarningIcon/>\n                    <FormattedMarkdownMessage\n                        id='login.terms_rejected'\n                        defaultMessage='You must agree to the terms of service before accessing {siteName}. Please contact your System Administrator for more details.'\n                        values={{\n                            siteName: this.props.siteName,\n                        }}\n                    />\n                </div>\n            );\n        } else if (extraParam === Constants.SIGNIN_CHANGE) {\n            return (\n                <div className='alert alert-success'>\n                    <SuccessIcon/>\n                    <FormattedMessage\n                        id='login.changed'\n                        defaultMessage=' Sign-in method changed successfully'\n                    />\n                </div>\n            );\n        } else if (extraParam === Constants.SIGNIN_VERIFIED) {\n            return (\n                <div className='alert alert-success'>\n                    <SuccessIcon/>\n                    <FormattedMessage\n                        id='login.verified'\n                        defaultMessage=' Email Verified'\n                    />\n                </div>\n            );\n        } else if (extraParam === Constants.PASSWORD_CHANGE) {\n            return (\n                <div\n                    id='passwordUpdatedSuccess'\n                    className='alert alert-success'\n                >\n                    <SuccessIcon/>\n                    <FormattedMessage\n                        id='login.passwordChanged'\n                        defaultMessage=' Password updated successfully'\n                    />\n                </div>\n            );\n        } else if (extraParam === Constants.CREATE_LDAP) {\n            return (\n                <div className='alert alert-grey'>\n                    <FormattedMessage\n                        id='login.ldapCreate'\n                        defaultMessage=' Enter your AD/LDAP username and password to create an account.'\n                    />\n                </div>\n            );\n        }\n\n        return null;\n    }\n\n    createLoginOptions = () => {\n        const loginControls = [];\n\n        const ldapEnabled = this.state.ldapEnabled;\n        const gitlabSigninEnabled = this.props.enableSignUpWithGitLab;\n        const googleSigninEnabled = this.props.enableSignUpWithGoogle;\n        const office365SigninEnabled = this.props.enableSignUpWithOffice365;\n        const samlSigninEnabled = this.state.samlEnabled;\n        const usernameSigninEnabled = this.state.usernameSigninEnabled;\n        const emailSigninEnabled = this.state.emailSigninEnabled;\n\n        if (emailSigninEnabled || usernameSigninEnabled || ldapEnabled) {\n            let errorClass = '';\n            if (this.state.serverError) {\n                errorClass = ' has-error';\n            }\n\n            loginControls.push(\n                <form\n                    key='loginBoxes'\n                    onSubmit={this.preSubmit}\n                >\n                    <div className='signup__email-container'>\n                        <FormError\n                            error={this.state.serverError}\n                            margin={true}\n                        />\n                        <div className={'form-group' + errorClass}>\n                            <input\n                                id='loginId'\n                                className='form-control'\n                                ref='loginId'\n                                name='loginId'\n                                value={this.state.loginId}\n                                onChange={this.handleLoginIdChange}\n                                placeholder={this.createLoginPlaceholder()}\n                                spellCheck='false'\n                                autoCapitalize='off'\n                                autoFocus={true}\n                            />\n                        </div>\n                        <div className={'form-group' + errorClass}>\n                            <LocalizedInput\n                                id='loginPassword'\n                                type='password'\n                                className='form-control'\n                                ref='password'\n                                name='password'\n                                value={this.state.password}\n                                onChange={this.handlePasswordChange}\n                                placeholder={{id: t('login.password'), defaultMessage: 'Password'}}\n                                spellCheck='false'\n                            />\n                        </div>\n                        <div className='form-group'>\n                            <button\n                                id='loginButton'\n                                type='submit'\n                                className='btn btn-primary'\n                            >\n                                <LoadingWrapper\n                                    id='login_button_signing'\n                                    loading={this.state.loading}\n                                    text={Utils.localizeMessage('login.signInLoading', 'Signing in...')}\n                                >\n                                    <FormattedMessage\n                                        id='login.signIn'\n                                        defaultMessage='Sign in'\n                                    />\n                                </LoadingWrapper>\n                            </button>\n                        </div>\n                    </div>\n                </form>\n            );\n        }\n\n        if (this.props.enableOpenServer && this.checkSignUpEnabled()) {\n            loginControls.push(\n                <div\n                    className='form-group'\n                    key='signup'\n                >\n                    <span>\n                        <FormattedMessage\n                            id='login.noAccount'\n                            defaultMessage=\"Don't have an account? \"\n                        />\n                        <Link\n                            id='signup'\n                            to={'/signup_user_complete' + this.props.location.search}\n                            className='signup-team-login'\n                        >\n                            <FormattedMessage\n                                id='login.create'\n                                defaultMessage='Create one now'\n                            />\n                        </Link>\n                    </span>\n                </div>\n            );\n        }\n\n        if (usernameSigninEnabled || emailSigninEnabled) {\n            loginControls.push(\n                <div\n                    id='login_forgot'\n                    key='forgotPassword'\n                    className='form-group'\n                >\n                    <Link to={'/reset_password'}>\n                        <FormattedMessage\n                            id='login.forgot'\n                            defaultMessage='I forgot my password'\n                        />\n                    </Link>\n                </div>\n            );\n        }\n\n        if ((emailSigninEnabled || usernameSigninEnabled || ldapEnabled) && (gitlabSigninEnabled || googleSigninEnabled || samlSigninEnabled || office365SigninEnabled)) {\n            loginControls.push(\n                <div\n                    key='divider'\n                    className='or__container'\n                >\n                    <FormattedMessage\n                        id='login.or'\n                        defaultMessage='or'\n                    />\n                </div>\n            );\n\n            loginControls.push(\n                <h5 key='oauthHeader'>\n                    <FormattedMessage\n                        id='login.signInWith'\n                        defaultMessage='Sign in with:'\n                    />\n                </h5>\n            );\n        }\n\n        if (gitlabSigninEnabled) {\n            loginControls.push(\n                <a\n                    className='btn btn-custom-login gitlab'\n                    key='gitlab'\n                    href={Client4.getOAuthRoute() + '/gitlab/login' + this.props.location.search}\n                >\n                    <span>\n                        <span className='icon'/>\n                        <span>\n                            <FormattedMessage\n                                id='login.gitlab'\n                                defaultMessage='GitLab'\n                            />\n                        </span>\n                    </span>\n                </a>\n            );\n        }\n\n        if (googleSigninEnabled) {\n            loginControls.push(\n                <a\n                    className='btn btn-custom-login google'\n                    key='google'\n                    href={Client4.getOAuthRoute() + '/google/login' + this.props.location.search}\n                >\n                    <span>\n                        <span className='icon'/>\n                        <span>\n                            <FormattedMessage\n                                id='login.google'\n                                defaultMessage='Google Apps'\n                            />\n                        </span>\n                    </span>\n                </a>\n            );\n        }\n\n        if (office365SigninEnabled) {\n            loginControls.push(\n                <a\n                    className='btn btn-custom-login office365'\n                    key='office365'\n                    href={Client4.getOAuthRoute() + '/office365/login' + this.props.location.search}\n                >\n                    <span>\n                        <span className='icon'/>\n                        <span>\n                            <FormattedMessage\n                                id='login.office365'\n                                defaultMessage='Office 365'\n                            />\n                        </span>\n                    </span>\n                </a>\n            );\n        }\n\n        if (samlSigninEnabled) {\n            loginControls.push(\n                <a\n                    className='btn btn-custom-login saml'\n                    key='saml'\n                    href={Client4.getUrl() + '/login/sso/saml' + this.props.location.search}\n                >\n                    <span>\n                        <span\n                            className='icon fa fa-lock fa--margin-top'\n                            title='Saml icon'\n                        />\n                        <span>\n                            {this.props.samlLoginButtonText}\n                        </span>\n                    </span>\n                </a>\n            );\n        }\n\n        if (loginControls.length === 0) {\n            loginControls.push(\n                <FormError\n                    key='noMethods'\n                    error={\n                        <FormattedMessage\n                            id='login.noMethods'\n                            defaultMessage='No sign-in methods are enabled. Please contact your System Administrator.'\n                        />\n                    }\n                    margin={true}\n                />\n            );\n        }\n\n        return (\n            <div>\n                {this.createExtraText()}\n                {loginControls}\n            </div>\n        );\n    }\n\n    hideMfa = () => {\n        this.setState({showMfa: false});\n    }\n\n    render() {\n        const {\n            customDescriptionText,\n            siteName,\n            initializing,\n        } = this.props;\n\n        if (initializing) {\n            return (<LoadingScreen/>);\n        }\n\n        let content;\n        let customContent;\n        let customClass;\n        let backButton;\n        if (this.state.showMfa) {\n            content = (\n                <LoginMfa\n                    loginId={this.state.loginId}\n                    password={this.state.password}\n                    submit={this.submit}\n                />\n            );\n            backButton = (<BackButton onClick={this.hideMfa}/>);\n        } else {\n            content = this.createLoginOptions();\n            customContent = this.createCustomLogin();\n            if (customContent) {\n                customClass = 'branded';\n            }\n        }\n\n        return (\n            <div>\n                <AnnouncementBar/>\n                {backButton}\n                <div\n                    id='login_section'\n                    className='col-sm-12'\n                >\n                    <div className={'signup-team__container ' + customClass}>\n                        <div className='signup__markdown'>\n                            {customContent}\n                        </div>\n                        <img\n                            alt={'signup team logo'}\n                            className='signup-team-logo'\n                            src={logoImage}\n                        />\n                        <div className='signup__content'>\n                            <SiteNameAndDescription\n                                customDescriptionText={customDescriptionText}\n                                siteName={siteName}\n                            />\n                            {content}\n                        </div>\n                    </div>\n                </div>\n            </div>\n        );\n    }\n}\n\nexport default injectIntl(LoginController);\n","// Copyright (c) 2015-present Mattermost, Inc. All Rights Reserved.\n// See LICENSE.txt for license information.\n\nimport {connect} from 'react-redux';\nimport {bindActionCreators} from 'redux';\n\nimport {getConfig, getLicense} from 'mattermost-redux/selectors/entities/general';\nimport {getTeamByName, getMyTeamMember} from 'mattermost-redux/selectors/entities/teams';\nimport {getCurrentUser} from 'mattermost-redux/selectors/entities/users';\nimport {RequestStatus} from 'mattermost-redux/constants';\n\nimport {addUserToTeamFromInvite} from 'actions/team_actions';\n\nimport {login} from 'actions/views/login';\n\nimport LoginController from './login_controller.jsx';\n\nfunction mapStateToProps(state) {\n    const config = getConfig(state);\n    const license = getLicense(state);\n\n    const isLicensed = license.IsLicensed === 'true';\n\n    const customBrandText = config.CustomBrandText;\n    const customDescriptionText = config.CustomDescriptionText;\n    const enableCustomBrand = config.EnableCustomBrand === 'true';\n    const enableLdap = config.EnableLdap === 'true';\n    const enableOpenServer = config.EnableOpenServer === 'true';\n    const enableSaml = config.EnableSaml === 'true';\n    const enableSignInWithEmail = config.EnableSignInWithEmail === 'true';\n    const enableSignInWithUsername = config.EnableSignInWithUsername === 'true';\n    const enableSignUpWithEmail = config.EnableSignUpWithEmail === 'true';\n    const enableSignUpWithGitLab = config.EnableSignUpWithGitLab === 'true';\n    const enableSignUpWithGoogle = config.EnableSignUpWithGoogle === 'true';\n    const enableSignUpWithOffice365 = config.EnableSignUpWithOffice365 === 'true';\n    const ldapLoginFieldName = config.LdapLoginFieldName;\n    const samlLoginButtonText = config.SamlLoginButtonText;\n    const siteName = config.SiteName;\n    const initializing = state.requests.users.logout.status === RequestStatus.SUCCESS || !state.storage.initialized;\n\n    // Only set experimental team if user is on that team\n    let experimentalPrimaryTeam = config.ExperimentalPrimaryTeam;\n    if (experimentalPrimaryTeam) {\n        const team = getTeamByName(state, experimentalPrimaryTeam);\n        if (team) {\n            const member = getMyTeamMember(state, team.id);\n            if (!member || !member.team_id) {\n                experimentalPrimaryTeam = null;\n            }\n        } else {\n            experimentalPrimaryTeam = null;\n        }\n    }\n\n    return {\n        currentUser: getCurrentUser(state),\n        isLicensed,\n        customBrandText,\n        customDescriptionText,\n        enableCustomBrand,\n        enableLdap,\n        enableOpenServer,\n        enableSaml,\n        enableSignInWithEmail,\n        enableSignInWithUsername,\n        enableSignUpWithEmail,\n        enableSignUpWithGitLab,\n        enableSignUpWithGoogle,\n        enableSignUpWithOffice365,\n        experimentalPrimaryTeam,\n        ldapLoginFieldName,\n        samlLoginButtonText,\n        siteName,\n        initializing,\n    };\n}\n\nfunction mapDispatchToProps(dispatch) {\n    return {\n        actions: bindActionCreators({\n            login,\n            addUserToTeamFromInvite,\n        }, dispatch),\n    };\n}\n\nexport default connect(mapStateToProps, mapDispatchToProps)(LoginController);\n"],"sourceRoot":""}