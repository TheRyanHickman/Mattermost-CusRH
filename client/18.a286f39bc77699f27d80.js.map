{"version":3,"sources":["webpack:///./components/common/back_button.jsx","webpack:///./images/logo.png","webpack:///./components/signup/signup_controller/signup_controller.jsx","webpack:///./components/signup/signup_controller/index.js"],"names":["BackButton","React","PureComponent","react__WEBPACK_IMPORTED_MODULE_3___default","a","createElement","id","className","react_router_dom__WEBPACK_IMPORTED_MODULE_5__","onClick","this","props","to","url","react_intl__WEBPACK_IMPORTED_MODULE_4__","defaultMessage","title","PropTypes","string","func","module","exports","__webpack_require__","p","SignupController","_this","_classCallCheck","_getPrototypeOf","call","_defineProperty","_assertThisInitialized","_ref","_asyncToGenerator","regeneratorRuntime","mark","_callee","token","inviteId","_ref2","team","error","wrap","_context","prev","next","actions","addUserToTeamFromInvite","sent","data","browserHistory","push","name","concat","Constants","DEFAULT_CHANNEL","handleInvalidInvite","stop","_x","_x2","apply","arguments","_ref3","_callee2","_ref4","_context2","getTeamInviteInfo","setState","serverError","loading","_x3","err","server_error_id","message","react_default","index_es","noOpenServerError","renderSignupControls","bind","usedBefore","location","search","params","URLSearchParams","get","loggedIn","enableOpenServer","noAccounts","state","Component","removeGlobalItem","userLoggedIn","getInviteInfo","GlobalActions","formatMessage","context","intl","signupControls","enableSignUpWithEmail","react_router_dom","key","window","enableSignUpWithGitLab","href","Client4","getOAuthRoute","isLicensed","enableSignUpWithGoogle","enableSignUpWithOffice365","enableLDAP","append","query","toString","LDAPText","ldapLoginFieldName","enableSAML","samlLoginButtonText","length","signupDisabledError","form_error","margin","loading_screen","announcement_bar","back_button","alt","src","logoImage","siteName","object","bool","isRequired","shape","intlShape","connect","ownProps","license","getLicense","config","getConfig","IsLicensed","EnableOpenServer","NoAccounts","EnableSignUpWithEmail","EnableSignUpWithGitLab","EnableSignUpWithGoogle","EnableSignUpWithOffice365","EnableLdap","EnableSaml","SamlLoginButtonText","LdapLoginFieldName","SiteName","getGlobalItem","Boolean","getCurrentUserId","dispatch","bindActionCreators"],"mappings":"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","file":"18.a286f39bc77699f27d80.js","sourcesContent":["// Copyright (c) 2015-present Mattermost, Inc. All Rights Reserved.\n// See LICENSE.txt for license information.\n\nimport PropTypes from 'prop-types';\nimport React from 'react';\nimport {FormattedMessage} from 'react-intl';\nimport {Link} from 'react-router-dom';\n\nexport default class BackButton extends React.PureComponent {\n    static propTypes = {\n\n        /**\n         * URL to return to\n         */\n        url: PropTypes.string,\n\n        /**\n         * An optional click handler that will trigger when the user clicks on the back button\n         */\n        onClick: PropTypes.func,\n    };\n\n    static defaultProps = {\n        url: '/',\n    };\n\n    render() {\n        return (\n            <div\n                id='back_button'\n                className='signup-header'\n            >\n                <Link\n                    onClick={this.props.onClick}\n                    to={this.props.url}\n                >\n                    <FormattedMessage\n                        id='generic_icons.back'\n                        defaultMessage='Back Icon'\n                    >\n                        {(title) => (\n                            <span\n                                id='back_button_icon'\n                                className='fa fa-1x fa-angle-left'\n                                title={title}\n                            />\n                        )}\n                    </FormattedMessage>\n                    <FormattedMessage\n                        id='web.header.back'\n                        defaultMessage='Back'\n                    />\n                </Link>\n            </div>\n        );\n    }\n}\n","module.exports = __webpack_public_path__ + \"files/786f906c373b98400b1e6f6c3341ce7d.png\";","// Copyright (c) 2015-present Mattermost, Inc. All Rights Reserved.\n// See LICENSE.txt for license information.\n\nimport PropTypes from 'prop-types';\nimport React from 'react';\nimport {FormattedMessage, intlShape} from 'react-intl';\nimport {Link} from 'react-router-dom';\nimport {Client4} from 'mattermost-redux/client';\n\nimport {browserHistory} from 'utils/browser_history';\nimport * as GlobalActions from 'actions/global_actions.jsx';\nimport logoImage from 'images/logo.png';\nimport AnnouncementBar from 'components/announcement_bar';\nimport BackButton from 'components/common/back_button.jsx';\nimport FormError from 'components/form_error.jsx';\nimport LoadingScreen from 'components/loading_screen.jsx';\nimport {Constants} from 'utils/constants.jsx';\n\nexport default class SignupController extends React.Component {\n    static propTypes = {\n        location: PropTypes.object,\n        loggedIn: PropTypes.bool.isRequired,\n        isLicensed: PropTypes.bool.isRequired,\n        enableOpenServer: PropTypes.bool.isRequired,\n        noAccounts: PropTypes.bool.isRequired,\n        enableSignUpWithEmail: PropTypes.bool.isRequired,\n        enableSignUpWithGitLab: PropTypes.bool.isRequired,\n        enableSignUpWithGoogle: PropTypes.bool.isRequired,\n        enableSignUpWithOffice365: PropTypes.bool.isRequired,\n        enableLDAP: PropTypes.bool.isRequired,\n        enableSAML: PropTypes.bool.isRequired,\n        samlLoginButtonText: PropTypes.string,\n        siteName: PropTypes.string,\n        usedBefore: PropTypes.string,\n        ldapLoginFieldName: PropTypes.string.isRequired,\n        actions: PropTypes.shape({\n            removeGlobalItem: PropTypes.func.isRequired,\n            getTeamInviteInfo: PropTypes.func.isRequired,\n            addUserToTeamFromInvite: PropTypes.func.isRequired,\n        }).isRequired,\n    }\n\n    static contextTypes = {\n        intl: intlShape.isRequired,\n    };\n\n    constructor(props) {\n        super(props);\n\n        this.renderSignupControls = this.renderSignupControls.bind(this);\n\n        let loading = false;\n        let serverError = '';\n        let noOpenServerError = false;\n        let usedBefore = false;\n\n        if (this.props.location.search) {\n            const params = new URLSearchParams(this.props.location.search);\n            let token = params.get('t');\n            if (token == null) {\n                token = '';\n            }\n            let inviteId = params.get('id');\n            if (inviteId == null) {\n                inviteId = '';\n            }\n\n            if (inviteId) {\n                loading = true;\n            } else if (!this.props.loggedIn) {\n                usedBefore = props.usedBefore;\n            } else if (!inviteId && !this.props.enableOpenServer && !this.props.noAccounts) {\n                noOpenServerError = true;\n                serverError = (\n                    <FormattedMessage\n                        id='signup_user_completed.no_open_server'\n                        defaultMessage='This server does not allow open signups.  Please speak with your Administrator to receive an invitation.'\n                    />\n                );\n            }\n        }\n\n        this.state = {\n            loading,\n            serverError,\n            noOpenServerError,\n            usedBefore,\n        };\n    }\n\n    componentDidMount() {\n        this.props.actions.removeGlobalItem('team');\n        if (this.props.location.search) {\n            const params = new URLSearchParams(this.props.location.search);\n            const token = params.get('t') || '';\n            const inviteId = params.get('id') || '';\n\n            const userLoggedIn = this.props.loggedIn;\n\n            if ((inviteId || token) && userLoggedIn) {\n                this.addUserToTeamFromInvite(token, inviteId);\n            } else if (inviteId) {\n                this.getInviteInfo(inviteId);\n            } else if (userLoggedIn) {\n                GlobalActions.redirectUserToDefaultTeam();\n            }\n        }\n    }\n\n    addUserToTeamFromInvite = async (token, inviteId) => {\n        const {data: team, error} = await this.props.actions.addUserToTeamFromInvite(token, inviteId);\n        if (team) {\n            browserHistory.push('/' + team.name + `/channels/${Constants.DEFAULT_CHANNEL}`);\n        } else if (error) {\n            this.handleInvalidInvite(error);\n        }\n    }\n\n    getInviteInfo = async (inviteId) => {\n        const {data, error} = await this.props.actions.getTeamInviteInfo(inviteId);\n        if (data) {\n            this.setState({\n                serverError: '',\n                loading: false,\n            });\n        } else if (error) {\n            this.handleInvalidInvite(error);\n        }\n    }\n\n    handleInvalidInvite = (err) => {\n        let serverError;\n        if (err.server_error_id === 'store.sql_user.save.max_accounts.app_error') {\n            serverError = err.message;\n        } else {\n            serverError = (\n                <FormattedMessage\n                    id='signup_user_completed.invalid_invite'\n                    defaultMessage='The invite link was invalid.  Please speak with your Administrator to receive an invitation.'\n                />\n            );\n        }\n\n        this.setState({\n            noOpenServerError: true,\n            loading: false,\n            serverError,\n        });\n    }\n\n    renderSignupControls() {\n        const {formatMessage} = this.context.intl;\n        let signupControls = [];\n\n        if (this.props.enableSignUpWithEmail) {\n            signupControls.push(\n                <Link\n                    className='btn btn-custom-login btn--full email'\n                    key='email'\n                    to={'/signup_email' + window.location.search}\n                >\n                    <span>\n                        <span\n                            className='icon fa fa-envelope'\n                            title={formatMessage({id: 'signup.email.icon', defaultMessage: 'Email Icon'})}\n                        />\n                        <FormattedMessage\n                            id='signup.email'\n                            defaultMessage='Email and Password'\n                        />\n                    </span>\n                </Link>\n            );\n        }\n\n        if (this.props.enableSignUpWithGitLab) {\n            signupControls.push(\n                <a\n                    className='btn btn-custom-login btn--full gitlab'\n                    key='gitlab'\n                    href={Client4.getOAuthRoute() + '/gitlab/signup' + window.location.search}\n                >\n                    <span>\n                        <span className='icon'/>\n                        <span>\n                            <FormattedMessage\n                                id='signup.gitlab'\n                                defaultMessage='GitLab Single Sign-On'\n                            />\n                        </span>\n                    </span>\n                </a>\n            );\n        }\n\n        if (this.props.isLicensed && this.props.enableSignUpWithGoogle) {\n            signupControls.push(\n                <a\n                    className='btn btn-custom-login btn--full google'\n                    key='google'\n                    href={Client4.getOAuthRoute() + '/google/signup' + window.location.search}\n                >\n                    <span>\n                        <span className='icon'/>\n                        <span>\n                            <FormattedMessage\n                                id='signup.google'\n                                defaultMessage='Google Account'\n                            />\n                        </span>\n                    </span>\n                </a>\n            );\n        }\n\n        if (this.props.isLicensed && this.props.enableSignUpWithOffice365) {\n            signupControls.push(\n                <a\n                    className='btn btn-custom-login btn--full office365'\n                    key='office365'\n                    href={Client4.getOAuthRoute() + '/office365/signup' + window.location.search}\n                >\n                    <span>\n                        <span className='icon'/>\n                        <span>\n                            <FormattedMessage\n                                id='signup.office365'\n                                defaultMessage='Office 365'\n                            />\n                        </span>\n                    </span>\n                </a>\n            );\n        }\n\n        if (this.props.isLicensed && this.props.enableLDAP) {\n            const params = new URLSearchParams(this.props.location.search);\n            params.append('extra', 'create_ldap');\n            const query = '?' + params.toString();\n\n            let LDAPText = (\n                <FormattedMessage\n                    id='signup.ldap'\n                    defaultMessage='AD/LDAP Credentials'\n                />\n            );\n            if (this.props.ldapLoginFieldName) {\n                LDAPText = this.props.ldapLoginFieldName;\n            }\n            signupControls.push(\n                <Link\n                    className='btn btn-custom-login btn--full ldap'\n                    key='ldap'\n                    to={'/login' + query}\n                >\n                    <span>\n                        <span\n                            className='icon fa fa-folder-open fa--margin-top'\n                            title={formatMessage({id: 'signup.ldap.icon', defaultMessage: 'AD/LDAP Icon'})}\n                        />\n                        <span>\n                            {LDAPText}\n                        </span>\n                    </span>\n                </Link>\n            );\n        }\n\n        if (this.props.isLicensed && this.props.enableSAML) {\n            let query = '';\n            if (window.location.search) {\n                query = '&action=signup';\n            } else {\n                query = '?action=signup';\n            }\n\n            signupControls.push(\n                <Link\n                    className='btn btn-custom-login btn--full saml'\n                    key='saml'\n                    to={'/login/sso/saml' + window.location.search + query}\n                >\n                    <span>\n                        <span\n                            className='icon fa fa-lock fa--margin-top'\n                            title={formatMessage({id: 'signup.saml.icon', defaultMessage: 'SAML Icon'})}\n                        />\n                        <span>\n                            {this.props.samlLoginButtonText}\n                        </span>\n                    </span>\n                </Link>\n            );\n        }\n\n        if (signupControls.length === 0) {\n            const signupDisabledError = (\n                <FormattedMessage\n                    id='signup_user_completed.none'\n                    defaultMessage='No user creation method has been enabled. Please contact an administrator for access.'\n                />\n            );\n            signupControls = (\n                <FormError\n                    error={signupDisabledError}\n                    margin={true}\n                />\n            );\n        } else if (signupControls.length === 1) {\n            if (this.props.enableSignUpWithEmail) {\n                return browserHistory.push('/signup_email' + window.location.search);\n            } else if (this.props.isLicensed && this.props.enableLDAP) {\n                return browserHistory.push('/login' + window.location.search);\n            }\n        }\n\n        return signupControls;\n    }\n\n    render() {\n        if (this.state.loading) {\n            return (<LoadingScreen/>);\n        }\n\n        if (this.state.usedBefore) {\n            return (\n                <div>\n                    <FormattedMessage\n                        id='signup_user_completed.expired'\n                        defaultMessage=\"You've already completed the signup process for this invitation or this invitation has expired.\"\n                    />\n                </div>\n            );\n        }\n\n        let serverError = null;\n        if (this.state.serverError) {\n            serverError = (\n                <div className={'form-group has-error'}>\n                    <label className='control-label'>{this.state.serverError}</label>\n                </div>\n            );\n        }\n\n        let signupControls;\n        if (this.state.noOpenServerError || this.state.usedBefore) {\n            signupControls = null;\n        } else {\n            signupControls = this.renderSignupControls();\n        }\n\n        return (\n            <div>\n                <AnnouncementBar/>\n                <BackButton/>\n                <div className='col-sm-12'>\n                    <div className='signup-team__container'>\n                        <img\n                            alt={'signup team logo'}\n                            className='signup-team-logo'\n                            src={logoImage}\n                        />\n                        <div className='signup__content'>\n                            <h1>{this.props.siteName}</h1>\n                            <h4 className='color--light'>\n                                <FormattedMessage\n                                    id='web.root.signup_info'\n                                />\n                            </h4>\n                            <div className='margin--extra'>\n                                <h5><strong>\n                                    <FormattedMessage\n                                        id='signup.title'\n                                        defaultMessage='Create an account with:'\n                                    />\n                                </strong></h5>\n                            </div>\n                            {signupControls}\n                            {serverError}\n                        </div>\n                        <span className='color--light'>\n                            <FormattedMessage\n                                id='signup_user_completed.haveAccount'\n                                defaultMessage='Already have an account?'\n                            />\n                            {' '}\n                            <Link\n                                to={'/login' + this.props.location.search}\n                            >\n                                <FormattedMessage\n                                    id='signup_user_completed.signIn'\n                                    defaultMessage='Click here to sign in.'\n                                />\n                            </Link>\n                        </span>\n                    </div>\n                </div>\n            </div>\n        );\n    }\n}\n","// Copyright (c) 2015-present Mattermost, Inc. All Rights Reserved.\n// See LICENSE.txt for license information.\n\nimport {connect} from 'react-redux';\nimport {bindActionCreators} from 'redux';\n\nimport {getConfig, getLicense} from 'mattermost-redux/selectors/entities/general';\nimport {getCurrentUserId} from 'mattermost-redux/selectors/entities/users';\nimport {getTeamInviteInfo} from 'mattermost-redux/actions/teams';\n\nimport {getGlobalItem} from 'selectors/storage';\nimport {removeGlobalItem} from 'actions/storage';\nimport {addUserToTeamFromInvite} from 'actions/team_actions';\n\nimport SignupController from './signup_controller.jsx';\n\nfunction mapStateToProps(state, ownProps) {\n    const license = getLicense(state);\n    const config = getConfig(state);\n\n    const isLicensed = license && license.IsLicensed === 'true';\n    const enableOpenServer = config.EnableOpenServer === 'true';\n    const noAccounts = config.NoAccounts === 'true';\n    const enableSignUpWithEmail = config.EnableSignUpWithEmail === 'true';\n    const enableSignUpWithGitLab = config.EnableSignUpWithGitLab === 'true';\n    const enableSignUpWithGoogle = config.EnableSignUpWithGoogle === 'true';\n    const enableSignUpWithOffice365 = config.EnableSignUpWithOffice365 === 'true';\n    const enableLDAP = config.EnableLdap === 'true';\n    const enableSAML = config.EnableSaml === 'true';\n    const samlLoginButtonText = config.SamlLoginButtonText;\n    const ldapLoginFieldName = config.LdapLoginFieldName;\n    const siteName = config.SiteName;\n\n    let usedBefore;\n    if (ownProps.location.search) {\n        const params = new URLSearchParams(ownProps.location.search);\n        let token = params.get('t');\n        if (token == null) {\n            token = '';\n        }\n        usedBefore = getGlobalItem(state, token, null);\n    }\n\n    return {\n        loggedIn: Boolean(getCurrentUserId(state)),\n        isLicensed,\n        enableOpenServer,\n        noAccounts,\n        enableSignUpWithEmail,\n        enableSignUpWithGitLab,\n        enableSignUpWithGoogle,\n        enableSignUpWithOffice365,\n        enableLDAP,\n        enableSAML,\n        samlLoginButtonText,\n        ldapLoginFieldName,\n        siteName,\n        usedBefore,\n    };\n}\n\nfunction mapDispatchToProps(dispatch) {\n    return {\n        actions: bindActionCreators({\n            removeGlobalItem,\n            getTeamInviteInfo,\n            addUserToTeamFromInvite,\n        }, dispatch),\n    };\n}\n\nexport default connect(mapStateToProps, mapDispatchToProps)(SignupController);\n"],"sourceRoot":""}